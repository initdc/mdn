{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Trabajando con objetos","mdn_url":"/es/docs/Web/JavaScript/Guide/Working_with_Objects","locale":"es","native":"Espa√±ol","sidebarHTML":"\n <ol>\n  <li><a href=\"/es/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/es/docs/Web/JavaScript/Tutorials\"><strong>Tutorials:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Complete beginners</summary>\n      <ol>\n        <li><a href=\"/es/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript basics</a></li>\n        <li><a href=\"/es/docs/Learn/JavaScript/First_steps\">JavaScript first steps</a></li>\n        <li><a href=\"/es/docs/Learn/JavaScript/Building_blocks\">JavaScript building blocks</a></li>\n        <li><a href=\"/es/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>JavaScript Guide</summary>\n      <ol>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Introduction\">Introduction</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Grammar_and_Types\">Grammar and types</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Control flow and error handling</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Loops_and_iteration\">Loops and iteration</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Functions\">Functions</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressions and operators</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Numbers_and_dates\">Numbers and dates</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Text_formatting\">Text formatting</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Regular_Expressions\">Regular expressions</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Indexed_collections\">Indexed collections</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Keyed_collections\">Keyed collections</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Working_with_Objects\">Working with objects</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Details of the object model</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Iterators_and_generators\">Iterators and generators</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Meta_programming\">Meta programming</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Intermediate</summary>\n      <ol>\n        <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/es/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">A re-introduction to JavaScript</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Equality comparisons and sameness</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Closures\">Closures</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Advanced</summary>\n      <ol>\n        <li><a href=\"/es/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Inheritance and the prototype chain</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Typed_arrays\">JavaScript typed arrays</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Memory_Management\">Memory Management</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/EventLoop\">Concurrency model and Event Loop</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/es/docs/Web/JavaScript/Reference\">References:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Built-in objects</summary>\n        <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Expressions &amp; operators</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Statements &amp; declarations</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Functions</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Misc</summary>\n      <ol>\n        <li><a href=\"/es/docs/Web/JavaScript/JavaScript_technologies_overview\">JavaScript technologies overview</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Lexical_grammar\">Lexical grammar</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Enumerability and ownership of properties</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Iteration_protocols\">Iteration protocols</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Transitioning to strict mode</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Template_literals\">Template literals</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Deprecated features</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/es/docs/Web/JavaScript/Guide/Keyed_collections\">¬´ Anterior</a></li>\n    <li><a class=\"button minimal\" href=\"/es/docs/conflicting/Web/JavaScript/Inheritance_and_the_prototype_chain\">Siguiente  ¬ª</a></li>\n</ul>\n<p>JavaScript est√° dise√±ado en un paradigma simple basado en objetos. Un objeto es una colecci√≥n de propiedades, y una propiedad es una asociaci√≥n entre un nombre (o <em>clave</em>) y un valor. El valor de una propiedad puede ser una funci√≥n, en cuyo caso la propiedad es conocida como un m√©todo. Adem√°s de los objetos que est√°n predefinidos en el navegador, puedes definir tus propios objetos. Este cap√≠tulo describe c√≥mo usar objetos, propiedades, funciones y m√©todos; y c√≥mo crear tus propios objectos.</p>"}},{"type":"prose","value":{"id":"visi√≥n_general_sobre_objetos","title":"Visi√≥n general sobre Objetos","isH3":false,"content":"<p>Los objetos en JavaScript, como en tantos otros lenguajes de programaci√≥n, se pueden comparar con objetos de la vida real. El concepto de Objetos en JavaScript se puede entender con objetos tangibles de la vida real.</p>\n<p>En JavaScript, un objeto es un entidad independiente con propiedades y tipos. Comp√°ralo con una taza, por ejemplo. Una taza es un objeto con propiedades. Una taza tiene un color, un dise√±o, un peso, un material del que est√° hecha, etc. Del mismo modo, los objetos de JavaScript pueden tener propiedades que definan sus caracter√≠sticas.</p>"}},{"type":"prose","value":{"id":"objetos_y_propiedades","title":"Objetos y propiedades","isH3":false,"content":"<p>Un objeto de JavaScript tiene propiedades asociadas a √©l. Una propiedad de un objeto se puede explicar como una variable adjunta al objeto. Las propiedades de un objeto b√°sicamente son lo mismo que las variables comunes de JavaScript, excepto por el nexo con el objeto. Las propiedades de un objeto definen las caracter√≠sticas del objeto. Accedes a las propiedades de un objeto con una simple notaci√≥n de puntos:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>objectName<span class=\"token punctuation\">.</span>propertyName\n</code></pre></div>\n<p>Como todas las <code>variables</code> de JavaScript, tanto el nombre del objeto (que puede ser una variable normal) como el nombre de la propiedad son sensibles a may√∫sculas y min√∫sculas. Puedes definir propiedades asign√°ndoles un valor. Por ejemplo, vamos a crear un objeto llamado <code>myCar</code> y le vamos a asignar propiedades denominadas <code>make</code>, <code>model</code>, y <code>year</code> de la siguiente manera:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myCar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyCar<span class=\"token punctuation\">.</span>make <span class=\"token operator\">=</span> <span class=\"token string\">'Ford'</span><span class=\"token punctuation\">;</span>\nmyCar<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> <span class=\"token string\">'Mustang'</span><span class=\"token punctuation\">;</span>\nmyCar<span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> <span class=\"token number\">1969</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>El ejemplo anterior tambi√©n se podr√≠a escribir usando un <strong><a href=\"/es/docs/Web/JavaScript/Guide/Working_with_Objects#Object_initializers\" aria-current=\"page\">iniciador de objeto</a></strong>, que es una lista delimitada por comas de cero o m√°s pares de nombres de propiedad y valores asociados de un objeto, encerrados entre llaves (<code>{}</code>):</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myCar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">make</span><span class=\"token operator\">:</span> <span class=\"token string\">'Ford'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token string\">'Mustang'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token number\">1969</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Las propiedades no asignadas de un objeto son <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> (y‚Äãno <a href=\"/es/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>myCar<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n</code></pre></div>\n<p>Tambi√©n puedes acceder o establecer las propiedades de los objetos en JavaScript mediante la notaci√≥n de corchetes ‚Üë[]‚Üì (Para m√°s detalle ve <a href=\"/es/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Accesores de propiedades</a>). Los objetos, a veces son llamados <em>arreglos asociativos</em>, debido a que cada propiedad est√° asociada con un valor de cadena que se puede utilizar para acceder a ella. Por lo tanto, por ejemplo, puedes acceder a las propiedades del objeto <code>myCar</code> de la siguiente manera:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>myCar<span class=\"token punctuation\">[</span><span class=\"token string\">'make'</span><span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span> <span class=\"token string\">'Ford'</span><span class=\"token punctuation\">;</span>\nmyCar<span class=\"token punctuation\">[</span><span class=\"token string\">'model'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Mustang'</span><span class=\"token punctuation\">;</span>\nmyCar<span class=\"token punctuation\">[</span><span class=\"token string\">'year'</span><span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span> <span class=\"token number\">1969</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>El nombre de la propiedad de un objeto puede ser cualquier cadena v√°lida de JavaScript, o cualquier cosa que se pueda convertir en una cadena, incluyendo una cadena vac√≠a. Sin embargo, cualquier nombre de propiedad que no sea un identificador v√°lido de JavaScript (por ejemplo, el nombre de alguna propiedad que tenga un espacio o un gui√≥n, o comience con un n√∫mero) solo se puede acceder utilizando la notaci√≥n de corchetes. Esta notaci√≥n es muy √∫til tambi√©n cuando los nombres de propiedades son determinados din√°micamente (cuando el nombre de la propiedad no se determina hasta el tiempo de ejecuci√≥n). Ejemplos de esto se muestran a continuaci√≥n:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Se crean y asignan cuatro variables de una sola vez,</span>\n<span class=\"token comment\">// separadas por comas</span>\n<span class=\"token keyword\">var</span> myObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    str <span class=\"token operator\">=</span> <span class=\"token string\">'myString'</span><span class=\"token punctuation\">,</span>\n    rand <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyObj<span class=\"token punctuation\">.</span>type                 <span class=\"token operator\">=</span> <span class=\"token string\">'Sintaxis de puntos'</span><span class=\"token punctuation\">;</span>\nmyObj<span class=\"token punctuation\">[</span><span class=\"token string\">'fecha de creaci√≥n'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Cadena con espacios'</span><span class=\"token punctuation\">;</span>\nmyObj<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">]</span>                 <span class=\"token operator\">=</span> <span class=\"token string\">'Valor de cadena'</span><span class=\"token punctuation\">;</span>\nmyObj<span class=\"token punctuation\">[</span>rand<span class=\"token punctuation\">]</span>                <span class=\"token operator\">=</span> <span class=\"token string\">'N√∫mero aleatorio'</span><span class=\"token punctuation\">;</span>\nmyObj<span class=\"token punctuation\">[</span>obj<span class=\"token punctuation\">]</span>                 <span class=\"token operator\">=</span> <span class=\"token string\">'Object'</span><span class=\"token punctuation\">;</span>\nmyObj<span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span>                  <span class=\"token operator\">=</span> <span class=\"token string\">'Incluso una cadena vac√≠a'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Por favor, ten en cuenta que todas las claves con notaci√≥n en corchetes se convierten a cadenas a menos que estas sean s√≠mbolos, ya que los nombres de las propiedades (claves) en Javascript pueden solo pueden ser cadenas o s√≠mbolos (en alg√∫n momento, los nombres privados tambi√©n ser√°n agregados a medida que progrese la <a href=\"https://github.com/tc39/proposal-class-fields\" class=\"external\" rel=\" noopener\">propuesta de los campos de clase</a>, pero no las usar√°s con el formato <code>[]</code>). Por ejemplo, en el c√≥digo anterior, cuando la clave <code>obj</code> se a√±adi√≥ a <code>myObj</code>, Javascript llamar√° al m√©todo <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>obj.toString()</code></a>, y usar√° la cadena resultante de esta llamada como la nueva clave.</p>\n<p>Tambi√©n puedes acceder a las propiedades mediante el uso de un valor de cadena que se almacena en una variable:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> propertyName <span class=\"token operator\">=</span> <span class=\"token string\">'make'</span><span class=\"token punctuation\">;</span>\nmyCar<span class=\"token punctuation\">[</span>propertyName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Ford'</span><span class=\"token punctuation\">;</span>\n\npropertyName <span class=\"token operator\">=</span> <span class=\"token string\">'model'</span><span class=\"token punctuation\">;</span>\nmyCar<span class=\"token punctuation\">[</span>propertyName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Mustang'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Puedes usar la notaci√≥n de corchetes con <a href=\"/es/docs/Web/JavaScript/Reference/Statements/for...in\"><code>for...in</code></a> para iterar sobre todas las propiedades enumerables de un objeto. Para ilustrar c√≥mo funciona esto, la siguiente funci√≥n muestra las propiedades del objeto cuando pasas el objeto y el nombre del objeto como argumentos a la funci√≥n:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">showProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> objName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// obj.hasOwnProperty() se usa para filtrar propiedades de la cadena de prototipos del objeto</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>objName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>obj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Por lo tanto, la llamada a la funci√≥n <code>showProps(myCar, \"myCar\")</code> devolver√° lo siguiente:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>myCar<span class=\"token punctuation\">.</span>make <span class=\"token operator\">=</span> Ford\nmyCar<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> Mustang\nmyCar<span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> <span class=\"token number\">1969</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"enumerar_las_propiedades_de_un_objeto","title":"Enumerar las propiedades de un objeto","isH3":false,"content":"<p>A partir de <a href=\"/es/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_5_support_in_Mozilla\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">ECMAScript 5</a>, hay tres formas nativas para enumerar/recorrer las propiedades de objetos:</p>\n<ul>\n  <li>\n    <a href=\"/es/docs/Web/JavaScript/Reference/Statements/for...in\"><code>bucles for...in</code></a>\n    Este m√©todo recorre todas las propiedades enumerables de un objeto y su cadena de prototipos\n  </li>\n  <li>\n    <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys(o)</code></a>\n    Este m√©todo devuelve un arreglo con todos los nombres de propiedades enumerables (\"<code>claves</code>\") propias (no en la cadena de prototipos) de un objeto <code>o</code>.\n  </li>\n  <li>\n    <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\"><code>Object.getOwnPropertyNames(o)</code></a>\n    Este m√©todo devuelve un arreglo que contiene todos los nombres (enumerables o no) de las propiedades de un objeto <code>o</code>.\n  </li>\n</ul>\n<p>Antes de ECMAScript 5, no exist√≠a una manera nativa para enumerar todas las propiedades de un objeto. Sin embargo, esto se puede lograr con la siguiente funci√≥n:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">listAllProperties</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">var</span> objectToInspect<span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n       <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>objectToInspect <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span> objectToInspect <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n           objectToInspect <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>objectToInspect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>\n            Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>objectToInspect<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Esto puede ser √∫til para revelar propiedades \"ocultas\" (propiedades de la cadena de prototipos a las que no se puede acceder a trav√©s del objeto, porque otra propiedad tiene el mismo nombre en la cadena de prototipos). Enumerar las propiedades accesibles solo es posible eliminando los duplicados en el arreglo.</p>"}},{"type":"prose","value":{"id":"creaci√≥n_de_nuevos_objetos","title":"Creaci√≥n de nuevos objetos","isH3":false,"content":"<p>JavaScript tiene una colecci√≥n de objetos predefinidos. Adem√°s, puedes crear tus propios objetos. En JavaScript 1.2 y versiones posteriores, puedes crear un objeto usando un <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">iniciador de objeto (en-US)</a>. Como alternativa, puedes crear primero una funci√≥n constructora y luego crear una instancia de un objeto invocando esa funci√≥n con el operador <code>new</code>.</p>"}},{"type":"prose","value":{"id":"uso_de_iniciadores_de_objeto","title":"Uso de iniciadores de objeto","isH3":true,"content":"<p>Adem√°s de la creaci√≥n de objetos utilizando una funci√≥n constructora, puedes crear objetos utilizando un <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">iniciador de objeto (en-US)</a>. El uso de iniciadores de objetos a veces se denomina crear objetos con notaci√≥n literal. \"Iniciador de objeto\" es consistente con la terminolog√≠a utilizada por C++.</p>\n<p>La sintaxis para un objeto usando un iniciador de objeto es:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">property_1</span><span class=\"token operator\">:</span>   value_1<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// property_# puede ser un identificador...</span>\n            <span class=\"token number\">2</span><span class=\"token operator\">:</span>            value_2<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// o un n√∫mero...</span>\n            <span class=\"token comment\">// ...,</span>\n            <span class=\"token string-property property\">'property n'</span><span class=\"token operator\">:</span> value_n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// o una cadena</span>\n</code></pre></div>\n<p>donde <code>obj</code> es el nombre del nuevo objeto, cada <code>property_i</code> es un identificador (ya sea un nombre, un n√∫mero o una cadena literal), y cada <code>value_i</code> es una expresi√≥n cuyo valor se asigna a la <code>property_i</code>. El <code>obj</code> y la asignaci√≥n es opcional; si no necesitas hacer referencia a este objeto desde otro lugar, no necesitas asignarlo a una variable. (Ten en cuenta que tal vez necesites envolver el objeto literal entre par√©ntesis si el objeto aparece donde se espera una declaraci√≥n, a fin de no confundir el literal con una declaraci√≥n de bloque).</p>\n<p>Los iniciadores de objetos son expresiones, y cada iniciador de objeto da como resultado un nuevo objeto donde la instrucci√≥n de creaci√≥n sea ejecutada. Los iniciadores de objetos id√©nticos crean objetos distintos que no se comparar√°n entre s√≠ como iguales. Los objetos se crean como si se hiciera una llamada a <code>new Object()</code>; es decir, los objetos hechos a partir de expresiones literales de objeto son instancias de <code>Object</code>.</p>\n<p>La siguiente declaraci√≥n crea un objeto y lo asigna a la variable <code>x</code> si y solo si la expresi√≥n <code>cond</code> es <code>true</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cond<span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">greeting</span><span class=\"token operator\">:</span> <span class=\"token string\">'¬°Hola!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>El siguiente ejemplo crea <code>myHonda</code> con tres propiedades. Observa que la propiedad <code>engine</code> tambi√©n es un objeto con sus propias propiedades.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myHonda <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">wheels</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">engine</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">cylinders</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">size</span><span class=\"token operator\">:</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Tambi√©n puedes utilizar iniciadores de objetos para crear arreglos. Consulta <a href=\"/es/docs/Web/JavaScript/Guide/Grammar_and_types#array_literals\">arreglos literales</a>.</p>"}},{"type":"prose","value":{"id":"usar_una_funci√≥n_constructora","title":"Usar una funci√≥n constructora","isH3":true,"content":"<p>Como alternativa, puedes crear un objeto con estos dos pasos:</p>\n<ol>\n  <li>Definir el tipo de objeto escribiendo una funci√≥n constructora. Existe una fuerte convenci√≥n, con buena raz√≥n, para utilizar en may√∫scula la letra inicial.</li>\n  <li>Crear una instancia del objeto con el operador <code>new</code>.</li>\n</ol>\n<p>Para definir un tipo de objeto, crea una funci√≥n para el objeto que especifique su nombre, propiedades y m√©todos. Por ejemplo, supongamos que deseas crear un tipo de objeto para coches. Quieres llamar <code>Car</code> a este tipo de objeto, y deseas que tenga las siguientes propiedades: <code>make</code>, <code>model</code> y <code>year</code>. Para ello, podr√≠as escribir la siguiente funci√≥n:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">make<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> year</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>make <span class=\"token operator\">=</span> make<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> model<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> year<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Observa el uso de <code>this</code> para asignar valores a las propiedades del objeto en funci√≥n de los valores pasados a la funci√≥n.</p>\n<p>Ahora puedes crear un objeto llamado <code>myCar</code> de la siguiente manera:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> mycar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Eagle'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Talon TSi'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1993</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Esta declaraci√≥n crea <code>myCar</code> y le asigna los valores especificados a sus propiedades. Entonces el valor de <code>myCar.make</code> es la cadena \"Eagle\", para <code>myCar.year</code> es el n√∫mero entero 1993, y as√≠ sucesivamente.</p>\n<p>Puedes crear cualquier n√∫mero de objetos <code>Car</code> con las llamadas a <code>new</code>. Por ejemplo,</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> kenscar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Nissan'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'300ZX'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1992</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> vpgscar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mazda'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Miata'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1990</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>&lt;s0&gt;Un objeto puede tener una propiedad que en s√≠ misma es otro objeto. Por ejemplo, supongamos que defines un objeto llamado <code>person</code> de la siguiente manera:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> sex</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> sex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>y luego instancias dos nuevos objetos <code>person</code> de la siguiente manera:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> rand <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Rand McKinnon'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'M'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ken <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ken Jones'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'M'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Entonces, puedes volver a escribir la definici√≥n de <code>Car</code> para incluir una propiedad <code>owner</code> que tomar√° el objeto <code>person</code>, de la siguiente manera:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">make<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">,</span> owner</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>make <span class=\"token operator\">=</span> make<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> model<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> year<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>owner <span class=\"token operator\">=</span> owner<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Para crear instancias de los nuevos objetos, utiliza lo siguiente:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> car1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Eagle'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Talon TSi'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1993</span><span class=\"token punctuation\">,</span> rand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> car2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Nissan'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'300ZX'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1992</span><span class=\"token punctuation\">,</span> ken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Nota que en lugar de pasar un valor de cadena o entero cuando se crean los nuevos objetos, las declaraciones anteriores pasan al objetos <code>rand</code> y <code>ken</code> como argumentos para los <code>owner</code>s. Si luego quieres averig√ºar el nombre del propietario del <code>car2</code>, puedes acceder a la propiedad de la siguiente manera:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>car2<span class=\"token punctuation\">.</span>owner<span class=\"token punctuation\">.</span>name\n</code></pre></div>\n<p>Ten en cuenta que siempre se puede a√±adir una propiedad a un objeto previamente definido. Por ejemplo, la declaraci√≥n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>car1<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>agrega la propiedad <code>color</code> a <code>car1</code>, y le asigna el valor \"<code>black</code>\". Sin embargo, esto no afecta a ning√∫n otro objeto. Para agregar la nueva propiedad a todos los objetos del mismo tipo, tienes que a√±adir la propiedad a la definici√≥n del tipo de objeto <code>Car</code>.</p>"}},{"type":"prose","value":{"id":"usar_el_m√©todo_object.create","title":"Usar el m√©todo <code>Object.create</code>","isH3":true,"content":"<p>Los objetos tambi√©n se pueden crear por medio del m√©todo <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a>. Este m√©todo puede ser muy √∫til, ya que te permite elegir el prototipo del objeto que deseas crear, sin tener que definir una funci√≥n constructora.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Propiedades y m√©todo de encapsulaci√≥n para Animal</span>\n<span class=\"token keyword\">var</span> Animal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'Invertebrates'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Valor predeterminado de las propiedades</span>\n  <span class=\"token function-variable function\">displayType</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// M√©todo que mostrar√° el tipo de Animal</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Crea un nuevo tipo de animal llamado animal1</span>\n<span class=\"token keyword\">var</span> animal1 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nanimal1<span class=\"token punctuation\">.</span><span class=\"token function\">displayType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Muestra: Invertebrates</span>\n\n<span class=\"token comment\">// Crea un nuevo tipo de animal llamado Fishes</span>\n<span class=\"token keyword\">var</span> fish <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfish<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'Fishes'</span><span class=\"token punctuation\">;</span>\nfish<span class=\"token punctuation\">.</span><span class=\"token function\">displayType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Muestra: Fishes</span>\n</code></pre></div>","titleAsText":"Usar el m√©todo Object.create"}},{"type":"prose","value":{"id":"herencia","title":"Herencia","isH3":false,"content":"<p>Todos los objetos en JavaScript heredan de al menos otro objeto. El objeto del que se hereda se conoce como el prototipo, y las propiedades heredadas se pueden encontrar en el objeto <code>prototype</code> del constructor. Para m√°s informaci√≥n consulta <a href=\"/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Herencia y cadena prototipos (en-US)</a>.</p>"}},{"type":"prose","value":{"id":"propiedades_del_objeto_indexado","title":"Propiedades del objeto indexado","isH3":false,"content":"<p>En &lt;s0&gt;JavaScript 1.0&lt;/s0&gt;, puedes hacer referencia a una propiedad de un objeto, ya sea por el nombre de la propiedad o por su √≠ndice ordinal. Si inicialmente defines una propiedad por su nombre, siempre debes referirte a ella por su nombre, y si inicialmente defines una propiedad por un √≠ndice, siempre debes referirte a ella por su √≠ndice.</p>\n<p>Esta restricci√≥n se aplica cuando creas un objeto y sus propiedades con una funci√≥n constructora (como hicimos anteriormente con el tipo de objeto <code>Car</code>) y cuando defines propiedades individuales expl√≠citamente (por ejemplo, <code>myCar.color = \"red\"</code>). Si inicialmente defines una propiedad de objeto con un √≠ndice, como <code>myCar[5] = \"25 mpg\"</code>, posteriormente te refiere a la propiedad solo como <code>myCar[5]</code>.</p>\n<p>La excepci√≥n a esta regla son los objetos HTML, como por ejemplo los objetos contenidos en <code>formularios</code>. Siempre puedes hacer referencia a los objetos en estos objetos en forma de arreglo por su n√∫mero ordinal (seg√∫n el lugar en el que aparecen en el documento) o por su nombre (si est√° definido). Por ejemplo, si la segunda etiqueta <code>&lt;FORM&gt;</code> en un documento tiene un atributo <code>NAME</code> con valor \"<code>myForm</code>\", puedes hacer referencia al formulario como <code>document.forms[1]</code> o <code>document.forms[\"myForm\"]</code> o <code>document.forms.myForm</code>.</p>"}},{"type":"prose","value":{"id":"definici√≥n_de_las_propiedades_de_un_tipo_de_objeto","title":"Definici√≥n de las propiedades de un tipo de objeto","isH3":false,"content":"<p>Puedes agregar una propiedad a un tipo de objeto definido previamente mediante el uso de la propiedad <code>prototype</code>. Esto define una propiedad que es compartida por todos los objetos del tipo especificado, en lugar de por una sola instancia del objeto. El siguiente c√≥digo agrega una propiedad <code>color</code> a todos los objetos del tipo <code>Car</code>, y luego asigna un valor a la propiedad <code>color</code> del objeto <code>car1</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\ncar1<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Para m√°s informaci√≥n, consulta la <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">propiedad prototype (en-US)</a> del objeto <code>Function</code> en la <a href=\"/es/docs/Web/JavaScript/Reference\">Referencia de JavaScript</a>.</p>"}},{"type":"prose","value":{"id":"definici√≥n_de_m√©todos","title":"Definici√≥n de m√©todos","isH3":false,"content":"<p>Un <em>m√©todo</em> es una funci√≥n asociada a un objeto, o, simplemente, un m√©todo es una propiedad de un objeto que es una funci√≥n. Los m√©todos se definen normalmente como una funci√≥n, con excepci√≥n de que tienen que ser asignados como la propiedad de un objeto. Consulte tambi√©n <a href=\"/es/docs/Web/JavaScript/Reference/Functions/Method_definitions\">definiciones de m√©todos</a> para obtener m√°s detalles. Un ejemplo puede ser:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>objectName<span class=\"token punctuation\">.</span>methodname <span class=\"token operator\">=</span> functionName<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">myMethod</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...hacer algo</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// O ESTO TAMBI√âN FUNCIONA</span>\n\n  <span class=\"token function\">myOtherMethod</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...hacer algo m√°s</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>&lt;s0&gt;donde <code>objectName</code> es un objeto existente, <code>methodname</code> es el nombre que se le va a asignar al m√©todo, y <code>functionName</code> es el nombre de la funci√≥n.</p>\n<p>Entonces puedes llamar al m√©todo en el contexto del objeto de la siguiente manera:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>object<span class=\"token punctuation\">.</span><span class=\"token function\">methodname</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Puedes definir m√©todos para un tipo de objeto incluyendo una definici√≥n del m√©todo en la funci√≥n constructora del objeto. Podr√≠as definir una funci√≥n que formate√© y muestre las propiedades de los objetos del tipo <code>Car</code> previamente definidas; por ejemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">displayCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Un hermoso </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>make<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">pretty_print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>donde <code>pretty_print</code> es una funci√≥n para mostrar una l√≠nea horizontal y una cadena. Observa el uso de <code>this</code> para referirse al objeto al que pertenece el m√©todo.</p>\n<p>Puedes hacer de esta funci√≥n un m√©todo de <code>Car</code> agregando la declaraci√≥n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>displayCar <span class=\"token operator\">=</span> displayCar<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>a la definici√≥n del objeto. Por lo tanto, la definici√≥n completa de <code>Car</code> ahora se ver√° as√≠:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">make<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">,</span> owner</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>make <span class=\"token operator\">=</span> make<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> model<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> year<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>owner <span class=\"token operator\">=</span> owner<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>displayCar <span class=\"token operator\">=</span> displayCar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Entonces puedes llamar al m√©todo <code>displayCar</code> para cada uno de los objetos de la siguiente manera:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>car1<span class=\"token punctuation\">.</span><span class=\"token function\">displayCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncar2<span class=\"token punctuation\">.</span><span class=\"token function\">displayCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"usar_this_para_referencias_a_objetos","title":"Usar <code>this</code> para referencias a objetos","isH3":false,"content":"<p>JavaScript tiene una palabra clave especial, <code>this</code>, que puedes usar dentro de un m√©todo para referirte al objeto actual. Por ejemplo, supongamos que tienes 2 objetos,<code>Manager</code> e <code>Intern</code>. Cada objeto tiene su propio <code>name</code>,<code>age</code> y <code>job</code>. En la funci√≥n <code>sayHi()</code>, observa que hay <code>this.name</code>. Cuando se agregan a los 2 objetos, se pueden llamar y devuelve el <code>'Hola, mi nombre es'</code> y luego agrega el valor <code>name</code> de ese objeto espec√≠fico. Como se muestra abajo.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> Manager <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">job</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Software Engineer\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Intern<span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Ben\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">job</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Software Engineer Intern\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hola, mi nombre es '</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// agrega la funci√≥n sayHi a ambos objetos</span>\nManager<span class=\"token punctuation\">.</span>sayHi <span class=\"token operator\">=</span> sayHi<span class=\"token punctuation\">;</span>\nIntern<span class=\"token punctuation\">.</span>sayHi <span class=\"token operator\">=</span> sayHi<span class=\"token punctuation\">;</span>\n\nManager<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Hola, mi nombre es John'</span>\nIntern<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Hola, mi nombre es Ben'</span>\n</code></pre></div>\n<p><code>this</code> se refiere al objeto en el que se encuentra. Puedes crear una nueva funci√≥n llamada <code>howOldAmI()</code> que registra una oraci√≥n que dice cu√°ntos a√±os tiene la persona.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">howOldAmI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tengo '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">+</span> <span class=\"token string\">' a√±os.'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nManager<span class=\"token punctuation\">.</span>howOldAmI <span class=\"token operator\">=</span> howOldAmI<span class=\"token punctuation\">;</span>\nManager<span class=\"token punctuation\">.</span><span class=\"token function\">howOldAmI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Tengo 27 a√±os.</span>\n</code></pre></div>","titleAsText":"Usar this para referencias a objetos"}},{"type":"prose","value":{"id":"definici√≥n_de_captadores_getters_y_establecedores_setters","title":"Definici√≥n de captadores (<code>getters</code>) y establecedores (<code>setters</code>)","isH3":false,"content":"<p>Un captador (<a href=\"/es/docs/Web/JavaScript/Reference/Functions/get\">getter</a>) es un m√©todo que obtiene el valor de una propiedad espec√≠fica. Un establecedor (<a href=\"/es/docs/Web/JavaScript/Reference/Functions/set\">setter</a>) es un m√©todo que establece el valor de una propiedad espec√≠fica. Puedes definir captadores y establecedores en cualquier objeto principal predefinido o en un objeto definido por el usuario que admita la adici√≥n de nuevas propiedades.</p>\n<p>En principio, los captadores y establecedores pueden ser</p>\n<ul>\n  <li>definido usando <a href=\"#iniciadores_de_objeto\">iniciadores de objeto</a>, o</li>\n  <li>agregado posteriormente a cualquier objeto en cualquier momento usando un m√©todo de adici√≥n para el captador o el establecedor.</li>\n</ul>\n<p>Al definir captadores y establecedores usando <a href=\"#iniciadores_de_objeto\">iniciadores de objeto</a>, todo lo que necesitas hacer es prefijar un m√©todo captador con <code>get</code> y un m√©todo establecedor con <code>set</code>. Por supuesto, el m√©todo captador no debe esperar un par√°metro, mientras que el m√©todo establecedor espera exactamente un par√°metro (el nuevo valor a establecer). Por ejemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> x <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 7</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 8 &lt;-- En este punto se inicia el m√©todo get b().</span>\no<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// &lt;-- En este punto se inicia el m√©todo set c(x)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 25</span>\n</code></pre></div>\n<p>var o = {</p>\n<ul>\n  <li>a: 7,</li>\n  <li><code>o.b</code> ‚Äî un captador que devuelve <code>o.a</code> m√°s 1</li>\n  <li><code>o.c</code> ‚Äî un establecedor que establece el valor de <code>o.a</code> en la mitad del valor que se establece en <code>o.c</code></li>\n</ul>\n<p>Ten en cuenta que los nombres de funci√≥n de los captadores y establecedores definidos en un objeto literal usando \"[gs]et <em>propiedad</em>()\" (en contraposici√≥n a <code>__define [GS]etter__</code>) no son los nombres de los captadores en s√≠, aunque la sintaxis <code>[gs]et propertyName() {}</code> te puede inducir a pensar lo contrario.</p>\n<p>Los captadores y establecedores tambi√©n se pueden agregar a un objeto en cualquier momento despu√©s de la creaci√≥n usando el m√©todo <code>Object.defineProperties</code>. El primer par√°metro de este m√©todo es el objeto sobre el que se quiere definir el captador o establecedor. El segundo par√°metro es un objeto cuyo nombre de propiedad son los nombres <code>getter</code> o <code>setter</code>, y cuyos valores de propiedad son objetos para la definici√≥n de las funciones <code>getter</code> o <code>setter</code>. Aqu√≠ hay un ejemplo que define el mismo <code>getter</code> y <code>setter</code> utilizado en el ejemplo anterior:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'b'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'c'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> x <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\no<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ejecuta el establecedor, que asigna 10/2 (5) a la propiedad 'a'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ejecuta el captador, que produce un + 1 o 6</span>\n</code></pre></div>\n<p>¬øCu√°l de las dos formas elegir? depende de tu estilo de programaci√≥n y de la tarea que te ocupa. Si ya utilizas el iniciador de objeto al definir un prototipo probablemente escojas la primer forma la mayor√≠a de las veces. Esta forma es m√°s compacta y natural. Sin embargo, si m√°s tarde necesitas agregar captadores y establecedores ‚Äî porque no lo escribiste en el objeto prototipo o particular ‚Äî entonces la segunda forma es la √∫nica forma posible. La segunda forma, probablemente representa mejor la naturaleza din√°mica de JavaScript ‚Äî pero puede hacer que el c√≥digo sea dif√≠cil de leer y entender.&lt;/s6&gt;</p>","titleAsText":"Definici√≥n de captadores (getters) y establecedores (setters)"}},{"type":"prose","value":{"id":"eliminar_propiedades","title":"Eliminar propiedades","isH3":false,"content":"<p>Puedes eliminar una propiedad no heredada mediante el operador <code>delete</code>. El siguiente c√≥digo muestra c√≥mo eliminar una propiedad.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">//Crea un nuevo objeto, myobj, con dos propiedades, a y b.</span>\n<span class=\"token keyword\">var</span> myobj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span>\nmyobj<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nmyobj<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Elimina la propiedad a, dejando a myobj solo con la propiedad b.</span>\n<span class=\"token keyword\">delete</span> myobj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span> <span class=\"token keyword\">in</span> myobj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// muestra: \"false\"</span>\n</code></pre></div>\n<p>Tambi√©n puedes utilizar <code>delete</code> para eliminar una variable global siempre y cuando no se haya utilizado la palabra clave <code>var</code> para declarar la variable:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>g <span class=\"token operator\">=</span> <span class=\"token number\">17</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> g<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"comparar_objetos","title":"Comparar objetos","isH3":false,"content":"<p>Como sabemos los objetos son de tipo referencia en JavaScript. Dos distintos objetos nunca son iguales, incluso aunque tengan las mismas propiedades. Solo comparar la misma referencia de objeto consigo misma arroja verdadero.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Dos variables, dos distintos objetos con las mismas propiedades</span>\n<span class=\"token keyword\">var</span> fruit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'apple'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> fruitbear <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'apple'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nfruit <span class=\"token operator\">==</span> fruitbear<span class=\"token punctuation\">;</span> <span class=\"token comment\">// devuelve false</span>\nfruit <span class=\"token operator\">===</span> fruitbear<span class=\"token punctuation\">;</span> <span class=\"token comment\">// devuelve false</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Dos variables, un solo objeto</span>\n<span class=\"token keyword\">var</span> fruit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'apple'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> fruitbear <span class=\"token operator\">=</span> fruit<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Asigna la referencia del objeto fruit a fruitbear</span>\n\n<span class=\"token comment\">// Aqu√≠ fruit y fruitbear apuntan al mismo objeto</span>\nfruit <span class=\"token operator\">==</span> fruitbear<span class=\"token punctuation\">;</span> <span class=\"token comment\">// devuelve true</span>\nfruit <span class=\"token operator\">===</span> fruitbear<span class=\"token punctuation\">;</span> <span class=\"token comment\">// devuelve true</span>\n\nfruit<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'grape'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruitbear<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Produce: { name: \"grape\" }, en lugar de { name: \"apple\" }</span>\n</code></pre></div>\n<p>Para obtener m√°s informaci√≥n sobre los operadores de comparaci√≥n, consulta <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Operadores de comparaci√≥n (en-US)</a>.</p>"}},{"type":"prose","value":{"id":"ve_tambi√©n","title":"Ve tambi√©n","isH3":false,"content":"<ul>\n  <li>Para profundizar m√°s, lee sobre los <a href=\"/es/docs/conflicting/Web/JavaScript/Inheritance_and_the_prototype_chain\">detalles del modelo de objetos de JavaScript</a>.</li>\n  <li>Para obtener m√°s informaci√≥n sobre las clases de ECMAScript 2015 (una forma alternativa de crear objetos), lee el cap√≠tulo <a href=\"/es/docs/Web/JavaScript/Reference/Classes\">Clases de JavaScript</a>.</li>\n</ul><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/es/docs/Web/JavaScript/Guide/Regular_Expressions\">¬´ Anterior</a></li>\n    <li><a class=\"button minimal\" href=\"/es/docs/conflicting/Web/JavaScript/Inheritance_and_the_prototype_chain\">Siguiente  ¬ª</a></li>\n</ul>"}}],"toc":[{"text":"Visi√≥n general sobre Objetos","id":"visi√≥n_general_sobre_objetos"},{"text":"Objetos y propiedades","id":"objetos_y_propiedades"},{"text":"Enumerar las propiedades de un objeto","id":"enumerar_las_propiedades_de_un_objeto"},{"text":"Creaci√≥n de nuevos objetos","id":"creaci√≥n_de_nuevos_objetos"},{"text":"Herencia","id":"herencia"},{"text":"Propiedades del objeto indexado","id":"propiedades_del_objeto_indexado"},{"text":"Definici√≥n de las propiedades de un tipo de objeto","id":"definici√≥n_de_las_propiedades_de_un_tipo_de_objeto"},{"text":"Definici√≥n de m√©todos","id":"definici√≥n_de_m√©todos"},{"text":"Usar <code>this</code> para referencias a objetos","id":"usar_this_para_referencias_a_objetos"},{"text":"Definici√≥n de captadores (<code>getters</code>) y establecedores (<code>setters</code>)","id":"definici√≥n_de_captadores_getters_y_establecedores_setters"},{"text":"Eliminar propiedades","id":"eliminar_propiedades"},{"text":"Comparar objetos","id":"comparar_objetos"},{"text":"Ve tambi√©n","id":"ve_tambi√©n"}],"summary":"JavaScript est√° dise√±ado en un paradigma simple basado en objetos. Un objeto es una colecci√≥n de propiedades, y una propiedad es una asociaci√≥n entre un nombre (o clave) y un valor. El valor de una propiedad puede ser una funci√≥n, en cuyo caso la propiedad es conocida como un m√©todo. Adem√°s de los objetos que est√°n predefinidos en el navegador, puedes definir tus propios objetos. Este cap√≠tulo describe c√≥mo usar objetos, propiedades, funciones y m√©todos; y c√≥mo crear tus propios objectos.","popularity":0.0125,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Working with objects","locale":"en-US","native":"English (US)"},{"title":"Utiliser les objets","locale":"fr","native":"Fran√ßais"},{"title":"„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Åß„ÅÆ‰ΩúÊ•≠","locale":"ja","native":"Êó•Êú¨Ë™û"},{"title":"Í∞ùÏ≤¥Î°ú ÏûëÏóÖÌïòÍ∏∞","locale":"ko","native":"ÌïúÍµ≠Ïñ¥"},{"title":"Trabalhando com objetos","locale":"pt-BR","native":"Portugu√™s (do¬†Brasil)"},{"title":"–†–∞–±–æ—Ç–∞ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏","locale":"ru","native":"–†—É—Å—Å–∫–∏–π"},{"title":"‰ΩøÁî®ÂØπË±°","locale":"zh-CN","native":"‰∏≠Êñá (ÁÆÄ‰Ωì)"},{"title":"Áâ©‰ª∂ÁöÑ‰ΩøÁî®","locale":"zh-TW","native":"Ê≠£È´î‰∏≠Êñá (ÁπÅÈ´î)"}],"source":{"folder":"es/web/javascript/guide/working_with_objects","github_url":"https://github.com/mdn/translated-content/blob/main/files/es/web/javascript/guide/working_with_objects/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/es/docs/Web","title":"Tecnolog√≠a para desarrolladores web"},{"uri":"/es/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/es/docs/Web/JavaScript/Guide","title":"Gu√≠a de JavaScript"},{"uri":"/es/docs/Web/JavaScript/Guide/Working_with_Objects","title":"Trabajando con objetos"}],"pageTitle":"Trabajando con objetos - JavaScript | MDN","noIndexing":false}}