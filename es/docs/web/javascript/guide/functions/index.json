{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Funciones","mdn_url":"/es/docs/Web/JavaScript/Guide/Functions","locale":"es","native":"Espa√±ol","sidebarHTML":"\n <ol>\n  <li><a href=\"/es/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/es/docs/Web/JavaScript/Tutorials\"><strong>Tutorials:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Complete beginners</summary>\n      <ol>\n        <li><a href=\"/es/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript basics</a></li>\n        <li><a href=\"/es/docs/Learn/JavaScript/First_steps\">JavaScript first steps</a></li>\n        <li><a href=\"/es/docs/Learn/JavaScript/Building_blocks\">JavaScript building blocks</a></li>\n        <li><a href=\"/es/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>JavaScript Guide</summary>\n      <ol>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Introduction\">Introduction</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Grammar_and_Types\">Grammar and types</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Control flow and error handling</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Loops_and_iteration\">Loops and iteration</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Functions\">Functions</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressions and operators</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Numbers_and_dates\">Numbers and dates</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Text_formatting\">Text formatting</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Regular_Expressions\">Regular expressions</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Indexed_collections\">Indexed collections</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Keyed_collections\">Keyed collections</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Working_with_Objects\">Working with objects</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Details of the object model</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Iterators_and_generators\">Iterators and generators</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Meta_programming\">Meta programming</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Intermediate</summary>\n      <ol>\n        <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/es/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">A re-introduction to JavaScript</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Equality comparisons and sameness</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Closures\">Closures</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Advanced</summary>\n      <ol>\n        <li><a href=\"/es/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Inheritance and the prototype chain</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Typed_arrays\">JavaScript typed arrays</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Memory_Management\">Memory Management</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/EventLoop\">Concurrency model and Event Loop</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/es/docs/Web/JavaScript/Reference\">References:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Built-in objects</summary>\n        <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Expressions &amp; operators</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Statements &amp; declarations</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Functions</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Misc</summary>\n      <ol>\n        <li><a href=\"/es/docs/Web/JavaScript/JavaScript_technologies_overview\">JavaScript technologies overview</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Lexical_grammar\">Lexical grammar</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Enumerability and ownership of properties</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Iteration_protocols\">Iteration protocols</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Transitioning to strict mode</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Template_literals\">Template literals</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Deprecated features</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/es/docs/Web/JavaScript/Guide/Loops_and_iteration\">¬´ Anterior</a></li>\n    <li><a class=\"button minimal\" href=\"/es/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Siguiente  ¬ª</a></li>\n</ul>\n<p>Las funciones son uno de los bloques de construcci√≥n fundamentales en JavaScript. Una funci√≥n en JavaScript es similar a un procedimiento ‚Äî un conjunto de instrucciones que realiza una tarea o calcula un valor, pero para que un procedimiento califique como funci√≥n, debe tomar alguna entrada y devolver una salida donde hay alguna relaci√≥n obvia entre la entrada y la salida. Para usar una funci√≥n, debes definirla en alg√∫n lugar del √°mbito desde el que deseas llamarla.</p>\n<p>Consulta tambi√©n el <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>cap√≠tulo de referencia exhaustivo sobre funciones de JavaScript</code></a> para conocer los detalles.</p>"}},{"type":"prose","value":{"id":"definir_funciones","title":"Definir funciones","isH3":false,"content":""}},{"type":"prose","value":{"id":"declaraci√≥n_de_funci√≥n","title":"Declaraci√≥n de funci√≥n","isH3":true,"content":"<p>Una <strong>definici√≥n de funci√≥n</strong> (tambi√©n denominada <strong>declaraci√≥n de funci√≥n</strong> o <strong>expresi√≥n de funci√≥n</strong>) consta de la palabra clave <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>function</code></a>, seguida de:</p>\n<ul>\n  <li>El nombre de la funci√≥n.</li>\n  <li>Una lista de par√°metros de la funci√≥n, entre par√©ntesis y separados por comas.</li>\n  <li>Las declaraciones de JavaScript que definen la funci√≥n, encerradas entre llaves, <code>{ ... }</code>.</li>\n</ul>\n<p>Por ejemplo, el siguiente c√≥digo define una funci√≥n simple llamada <code>square</code> (\"cuadrado\"):</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> number <span class=\"token operator\">*</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>La funci√≥n <code>square</code> toma un par√°metro, llamado <code>number</code>. La funci√≥n consta de una declaraci√≥n que dice devuelva el par√°metro de la funci√≥n (es decir, <code>number</code>) multiplicado por s√≠ mismo. La instrucci√≥n <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>return</code></a> especifica el valor devuelto por la funci√≥n:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">return</span> number <span class=\"token operator\">*</span> number<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Los par√°metros primitivos (como un <code>number</code>) se pasan a las funciones <strong>por valor</strong>; el valor se pasa a la funci√≥n, pero si la funci√≥n cambia el valor del par√°metro, <strong>este cambio no se refleja globalmente ni en la funci√≥n que llama</strong>.</p>\n<p>Si pasas un objeto (es decir, un valor no primitivo, como <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> o un objeto definido por el usuario) como par√°metro y la funci√≥n cambia las propiedades del objeto, ese cambio es visible fuera de la funci√≥n, como se muestra en el siguiente ejemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">theObject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  theObject<span class=\"token punctuation\">.</span>make <span class=\"token operator\">=</span> <span class=\"token string\">'Toyota'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">[</span>parcial<span class=\"token punctuation\">]</span><span class=\"token keyword\">var</span> mycar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">make</span><span class=\"token operator\">:</span> <span class=\"token string\">'Honda'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token string\">'Accord'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token number\">1998</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span>\n\nx <span class=\"token operator\">=</span> mycar<span class=\"token punctuation\">.</span>make<span class=\"token punctuation\">;</span> <span class=\"token comment\">// x obtiene el valor \"Honda\"</span>\n\n<span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span>mycar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ny <span class=\"token operator\">=</span> mycar<span class=\"token punctuation\">.</span>make<span class=\"token punctuation\">;</span> <span class=\"token comment\">// y obtiene el valor \"Toyota\"</span>\n                <span class=\"token comment\">// (la propiedad make fue cambiada por la funci√≥n)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"expresiones_function","title":"Expresiones <code>function</code>","isH3":true,"content":"<p>Si bien la declaraci√≥n de funci√≥n anterior sint√°cticamente es una declaraci√≥n, las funciones tambi√©n se pueden crear mediante una <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>expresi√≥n function</code></a>.</p>\n<p>Esta funci√≥n puede ser <strong>an√≥nima</strong>; no tiene por qu√© tener un nombre. Por ejemplo, la funci√≥n <code>square</code> se podr√≠a haber definido como:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">square</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> number <span class=\"token operator\">*</span> number <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// x obtiene el valor 16</span>\n</code></pre></div>\n<p>Sin embargo, <em>puedes</em> proporcionar un nombre con una expresi√≥n <code>function</code>. Proporcionar un nombre permite que la funci√≥n se refiera a s√≠ misma y tambi√©n facilita la identificaci√≥n de la funci√≥n en el seguimiento de la pila de un depurador:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">factorial</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fac</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> n <span class=\"token operator\">*</span> <span class=\"token function\">fac</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>Las expresiones <code>function</code> son convenientes cuando se pasa una funci√≥n como argumento a otra funci√≥n. El siguiente ejemplo muestra una funci√≥n <code>map</code> que deber√≠a recibir una funci√≥n como primer argumento y un arreglo como segundo argumento.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Crea un nuevo arreglo</span>\n  <span class=\"token keyword\">let</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Declara una variable</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>En el siguiente c√≥digo, la funci√≥n recibe una funci√≥n definida por una expresi√≥n de funci√≥n y la ejecuta por cada elemento del arreglo recibido como segundo argumento.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Crea un nuevo arreglo</span>\n  <span class=\"token keyword\">let</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Declara una variable</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> cube <span class=\"token operator\">=</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>cube<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>La funci√≥n devuelve: <code>[0, 1, 8, 125, 1000]</code>.</p>\n<p>En JavaScript, una funci√≥n se puede definir en funci√≥n de una condici√≥n. Por ejemplo, la siguiente definici√≥n de funci√≥n define <code>myFunc</code> solo si <code>num</code> es igual a <code>0</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myFunc<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">myFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">theObject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    theObject<span class=\"token punctuation\">.</span>make <span class=\"token operator\">=</span> <span class=\"token string\">'Toyota'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Adem√°s de definir funciones como se describe aqu√≠, tambi√©n puedes usar el constructor <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> para crear funciones a partir de una cadena en tiempo de ejecuci√≥n, muy al estilo de <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a>.</p>\n<p>Un <strong>m√©todo</strong> es una funci√≥n que es propiedad de un objeto. Obten m√°s informaci√≥n sobre objetos y m√©todos en <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Trabajar con objetos</code></a>.</p>","titleAsText":"Expresiones function"}},{"type":"prose","value":{"id":"llamar_funciones","title":"Llamar funciones","isH3":false,"content":"<p><em>Definir</em> una funci√≥n no la <em>ejecuta</em>. Definirla simplemente nombra la funci√≥n y especifica qu√© hacer cuando se llama a la funci√≥n.</p>\n<p><strong>Llamar</strong> a la funci√≥n en realidad lleva a cabo las acciones especificadas con los par√°metros indicados. Por ejemplo, si defines la funci√≥n <code>square</code>, podr√≠as llamarla de la siguiente manera:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>La declaraci√≥n anterior llama a la funci√≥n con un argumento de <code>5</code>. La funci√≥n ejecuta sus declaraciones y devuelve el valor <code>25</code>.</p>\n<p>Las funciones deben estar <em>dentro del √°mbito</em> cuando se llaman, pero la declaraci√≥n de la funci√≥n se puede elevar (cuando aparece debajo de la llamada en el c√≥digo), como en este ejemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* ... */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> n <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>El √°mbito de una funci√≥n es la funci√≥n en la que se declara (o el programa completo, si se declara en el nivel superior).</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Nota:</strong> Esto solo trabaja cuando se define la funci√≥n usando la sintaxis anterior (es decir, <code>function funcName() {}</code>). El siguiente c√≥digo no trabajar√°.Esto significa que la elevaci√≥n de funci√≥n solo trabaja con <em>declaraciones</em> de funci√≥n, no con <em>expresiones</em> de funci√≥n.</p>\n  <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">)</span> <span class=\"token comment\">// square se eleva con un valor inicial undefined.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Error de tipo no detectado: square no es una funci√≥n</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">square</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> n \\<span class=\"token operator\">*</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</div>\n<p>Los argumentos de una funci√≥n no se limitan a cadenas y n√∫meros. Puedes pasar objetos completos a una funci√≥n. La funci√≥n <code>show_props()</code> (definida en <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Trabajar con objetos</code></a> es un ejemplo de una funci√≥n que toma un objeto como argumento.</p>\n<p>Una funci√≥n se puede llamar a s√≠ misma. Por ejemplo, aqu√≠ hay una funci√≥n que calcula factoriales de forma recursiva:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Luego, podr√≠as calcular los factoriales de <code>1</code> a <code>5</code> de la siguiente manera:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a obtiene el valor 1</span>\nb <span class=\"token operator\">=</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// b obtiene el valor 2</span>\nc <span class=\"token operator\">=</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// c obtiene el valor 6</span>\nd <span class=\"token operator\">=</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// d obtiene el valor 24</span>\ne <span class=\"token operator\">=</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// e obtiene el valor 120</span>\n</code></pre></div>\n<p>Hay otras formas de llamar funciones. A menudo hay casos en los que una funci√≥n se tiene que llamar din√°micamente, o el n√∫mero de argumentos de una funci√≥n var√≠a, o en los que el contexto de la llamada a la funci√≥n se tiene que establecer en un determinado objeto espec√≠fico en tiempo de ejecuci√≥n.</p>\n<p>Resulta que las <em>funciones en s√≠ mismas son objetos</em> y, a su vez, estos objetos tienen m√©todos. (Consulta el objeto <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a>. Uno de estos, el m√©todo <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>apply()</code></a>, se puede utilizar para lograr este objetivo.</p>"}},{"type":"prose","value":{"id":"√°mbito_de_function","title":"√Åmbito de <code>function</code>","isH3":false,"content":"<p>No se puede acceder a las variables definidas dentro de una funci√≥n desde cualquier lugar fuera de la funci√≥n, porque la variable se define solo en el √°mbito de la funci√≥n. Sin embargo, una funci√≥n puede acceder a todas las variables y funciones definidas dentro del √°mbito en el que est√° definida.</p>\n<p>En otras palabras, una funci√≥n definida en el √°mbito global puede acceder a todas las variables definidas en el √°mbito global. Una funci√≥n definida dentro de otra funci√≥n tambi√©n puede acceder a todas las variables definidas en su funci√≥n principal y a cualquier otra variable a la que tenga acceso la funci√≥n principal.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Las siguientes variables se definen en el √°mbito global</span>\n<span class=\"token keyword\">var</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n    num2 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">'Chamahk'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Esta funci√≥n est√° definida en el √°mbito global</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">*</span> num2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Devuelve 60</span>\n\n<span class=\"token comment\">// Un ejemplo de funci√≥n anidada</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      num2 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> name <span class=\"token operator\">+</span> <span class=\"token string\">' anot√≥ '</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Devuelve \"Chamahk anot√≥ 5\"</span>\n</code></pre></div>","titleAsText":"√Åmbito de function"}},{"type":"prose","value":{"id":"√°mbito_y_la_pila_de_funciones","title":"√Åmbito y la pila de funciones","isH3":false,"content":""}},{"type":"prose","value":{"id":"recursi√≥n","title":"Recursi√≥n","isH3":true,"content":"<p>Una funci√≥n se puede referir y llamarse a s√≠ misma. Hay tres formas de que una funci√≥n se refiera a s√≠ misma:</p>\n<ol>\n  <li>El nombre de la funci√≥n</li>\n  <li><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>arguments.callee</code></a></li>\n  <li>Una variable dentro del √°mbito que se refiere a la funci√≥n</li>\n</ol>\n<p>Por ejemplo, considera la siguiente definici√≥n de funci√≥n:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// las instrucciones van aqu√≠</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Dentro del cuerpo de la funci√≥n, todos los siguientes son equivalentes:</p>\n<ol>\n  <li><code>bar()</code></li>\n  <li><code>arguments.callee()</code></li>\n  <li><code>foo()</code></li>\n</ol>\n<p>Una funci√≥n que se llama a s√≠ misma se conoce como una <em>funci√≥n recursiva</em>. En cierto modo, la recursividad es an√°loga a un bucle. Ambas ejecutan el mismo c√≥digo varias veces y ambas requieren una condici√≥n (para evitar un bucle infinito, o m√°s bien, una recursividad infinita en este caso).</p>\n<p>Por ejemplo, el siguiente bucle...</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// \"x &lt; 10\" es la condici√≥n del bucle</span>\n   <span class=\"token comment\">// hacer cosas</span>\n   x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>...se puede convertir en una declaraci√≥n de funci√≥n recursiva, seguida de una llamada a esa funci√≥n:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"x &gt;= 10\" es la condici√≥n de salida (equivalente a \"!(x &lt; 10)\")</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// hacer cosas</span>\n  <span class=\"token function\">loop</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// la llamada recursiva</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Sin embargo, algunos algoritmos no pueden ser simples bucles iterativos. Por ejemplo, obtener todos los nodos de una estructura de √°rbol (como <a href=\"/en-US/docs/Web/API/Document_Object_Model\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">DOM (en-US)</a>) es m√°s f√°cil a trav√©s de la recursividad:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">walkTree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// hacer algo con el nodo</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> node<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">walkTree</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>En comparaci√≥n con la funci√≥n <code>loop</code>, cada llamada recursiva en s√≠ misma hace muchas llamadas recursivas aqu√≠.</p>\n<p>Es posible convertir cualquier algoritmo recursivo en uno no recursivo, pero la l√≥gica suele ser mucho m√°s compleja, y hacerlo requiere el uso de una pila.</p>\n<p>De hecho, la recursividad en s√≠ misma usa una pila: la pila de funciones. El comportamiento similar a una pila se puede ver en el siguiente ejemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inicio: '</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fin: '</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Produce:</span>\n\n<span class=\"token comment\">// inicio: 3</span>\n<span class=\"token comment\">// inicio: 2</span>\n<span class=\"token comment\">// inicio: 1</span>\n<span class=\"token comment\">// inicio: 0</span>\n<span class=\"token comment\">// fin: 0</span>\n<span class=\"token comment\">// fin: 1</span>\n<span class=\"token comment\">// fin: 2</span>\n<span class=\"token comment\">// fin: 3</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"funciones_anidadas_y_cierres","title":"Funciones anidadas y cierres","isH3":true,"content":"<p>Puedes anidar una funci√≥n dentro de otra funci√≥n. La funci√≥n anidada (interna) es privada de su funci√≥n contenedora (externa).</p>\n<p>Tambi√©n forma un <em>cierre</em>. Un cierre es una expresi√≥n (com√∫nmente, una funci√≥n) que puede tener variables libres junto con un entorno que une esas variables (que \"cierra\" la expresi√≥n).</p>\n<p>Dado que una funci√≥n anidada es un cierre, significa que una funci√≥n anidada puede \"heredar\" los argumentos y variables de su funci√≥n contenedora. En otras palabras, la funci√≥n interna contiene el √°mbito de la funci√≥n externa.</p>\n<p>Para resumir:</p>\n<ul>\n  <li>Solo se puede acceder a la funci√≥n interna desde declaraciones en la funci√≥n externa.</li>\n  <li>La funci√≥n interna forma un cierre: la funci√≥n interna puede usar los argumentos y variables de la funci√≥n externa, mientras que la funci√≥n externa no puede usar los argumentos y variables de la funci√≥n interna.</li>\n</ul>\n<p>El siguiente ejemplo muestra funciones anidadas:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">addSquares</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\na <span class=\"token operator\">=</span> <span class=\"token function\">addSquares</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// devuelve 13</span>\nb <span class=\"token operator\">=</span> <span class=\"token function\">addSquares</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// devuelve 25</span>\nc <span class=\"token operator\">=</span> <span class=\"token function\">addSquares</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// devuelve 41</span>\n</code></pre></div>\n<p>Dado que la funci√≥n interna forma un cierre, puedes llamar a la funci√≥n externa y especificar argumentos tanto para la funci√≥n externa como para la interna:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">outside</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">inside</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> inside<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nfn_inside <span class=\"token operator\">=</span> <span class=\"token function\">outside</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Piensa en ello como: dame una funci√≥n que agregue 3 a lo que sea que le des</span>\n                        <span class=\"token comment\">// eso</span>\nresult <span class=\"token operator\">=</span> <span class=\"token function\">fn_inside</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// devuelve 8</span>\n\nresult1 <span class=\"token operator\">=</span> <span class=\"token function\">outside</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// devuelve 8</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"preservaci√≥n_de_variables","title":"Preservaci√≥n de variables","isH3":true,"content":"<p>Observa c√≥mo se conserva <code>x</code> cuando se devuelve <code>inside</code>. Un cierre debe conservar los argumentos y variables en todos los √°mbitos a los que hace referencia. Dado que cada llamada proporciona argumentos potencialmente diferentes, se crea un nuevo cierre para cada llamada a <code>outside</code>. La memoria se puede liberar solo cuando el <code>inside</code> devuelto ya no es accesible.</p>\n<p>Esto no es diferente de almacenar referencias en otros objetos, pero a menudo es menos obvio porque uno no establece las referencias directamente y no las puede inspeccionar.</p>"}},{"type":"prose","value":{"id":"funciones_multianidadas","title":"Funciones multianidadas","isH3":true,"content":"<p>Las funciones se pueden anidar de forma m√∫ltiple. Por ejemplo:</p>\n<ul>\n  <li>Una funci√≥n (<code>A</code>) contiene una funci√≥n (<code>B</code>), que a su vez contiene una funci√≥n (<code>C</code>).</li>\n  <li>Ambas funciones <code>B</code> y <code>C</code> forman cierres aqu√≠. Por tanto, <code>B</code> puede acceder a <code>A</code> y <code>C</code> puede acceder a <code>B</code>.</li>\n  <li>Adem√°s, dado que <code>C</code> puede acceder a <code>B</code> que puede acceder a <code>A</code>, <code>C</code> tambi√©n puede acceder a <code>A</code>.</li>\n</ul>\n<p>Por tanto, los cierres pueden contener m√∫ltiples √°mbitos; contienen de forma recursiva el √°mbito de las funciones que la contienen. Esto se llama <em>encadenamiento de alcance</em>. (La raz√≥n por la que se llama \"encadenamiento\" se explica m√°s adelante).</p>\n<p>Considera el siguiente ejemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">z</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token constant\">B</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// registra 6 (1 + 2 + 3)</span>\n</code></pre></div>\n<p>En este ejemplo, <code>C</code> accede a <code>y</code> de <code>B</code> y a <code>x</code> de <code>A</code>.</p>\n<p>Esto se puede hacer porque:</p>\n<ol>\n  <li><code>B</code> forma un cierre que incluye a <code>A</code> (es decir, <code>B</code> puede acceder a los argumentos y variables de <code>A</code>).</li>\n  <li><code>C</code> forma un cierre que incluye a <code>B</code>.</li>\n  <li>Debido a que el cierre de <code>B</code> incluye a <code>A</code>, el cierre de <code>C</code> incluye a <code>A</code>, <code>C</code> puede acceder a los argumentos <em>y variables</em> de <code>B</code> <em>y</em> de <code>A</code>. En otras palabras, <code>C</code> <em>encadena</em> los √°mbitos de <code>B</code> y <code>A</code>, <em>en ese orden</em>.</li>\n</ol>\n<p>Sin embargo, lo contrario no es cierto. <code>A</code> no puede acceder a <code>C</code>, porque <code>A</code> no puede acceder a ning√∫n argumento o variable de <code>B</code>, del que <code>C</code> es una variable. Por lo tanto, <code>C</code> permanece privado solo para <code>B</code>.</p>"}},{"type":"prose","value":{"id":"conflictos_de_nombres","title":"Conflictos de nombres","isH3":true,"content":"<p>Cuando dos argumentos o variables en el √°mbito de un cierre tienen el mismo nombre, hay un <em>conflicto de nombres</em>. Tiene m√°s prioridad el √°mbito anidado. Entonces, el √°mbito m√°s interno tiene la mayor prioridad, mientras que el √°mbito m√°s externo tiene la m√°s baja. Esta es la cadena de √°mbito. El primero de la cadena es el √°mbito m√°s interno y el √∫ltimo es el √°mbito m√°s externo. Considera lo siguiente:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">outside</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">inside</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> inside<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">outside</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// devuelve 20 en lugar de 10</span>\n</code></pre></div>\n<p>El conflicto de nombre ocurre en la declaraci√≥n <code>return x</code> y est√° entre el par√°metro <code>x</code> de <code>inside</code> y la variable <code>x</code> de <code>outside</code>. La cadena de √°mbito aqu√≠ es {<code>inside</code>, <code>outside</code>, objeto global}. Por lo tanto, <code>x</code> de <code>inside</code> tiene precedencia sobre <code>x</code> de <code>outside</code> y <code>20</code> (<code>x</code>) de <code>inside</code> se devuelve en lugar de <code>10</code> (<code>x</code> de <code>outside</code>).</p>"}},{"type":"prose","value":{"id":"cierres","title":"Cierres","isH3":false,"content":"<p>Los cierres son una de las caracter√≠sticas m√°s poderosas de JavaScript. JavaScript permite el anidamiento de funciones y otorga a la funci√≥n interna acceso completo a todas las variables y funciones definidas dentro de la funci√≥n externa (y todas las dem√°s variables y funciones a las que la funci√≥n externa tiene acceso).</p>\n<p>Sin embargo, la funci√≥n externa <em>no</em> tiene acceso a las variables y funciones definidas dentro de la funci√≥n interna. Esto proporciona una especie de encapsulaci√≥n para las variables de la funci√≥n interna.</p>\n<p>Adem√°s, dado que la funci√≥n interna tiene acceso a el √°mbito de la funci√≥n externa, las variables y funciones definidas en la funci√≥n externa vivir√°n m√°s que la duraci√≥n de la ejecuci√≥n de la funci√≥n externa, si la funci√≥n interna logra sobrevivir m√°s all√° de la vida de la funci√≥n externa. Se crea un cierre cuando la funci√≥n interna de alguna manera se pone a disposici√≥n de cualquier √°mbito fuera de la funci√≥n externa.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">pet</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// La funci√≥n externa define una variable llamada \"name\"</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// La funci√≥n interna tiene acceso a la variable</span>\n                             <span class=\"token comment\">// \"name\" de la funci√≥n externa</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> getName<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// Devuelve la funci√≥n interna, exponi√©ndola as√≠ a √°mbitos externos</span>\n<span class=\"token punctuation\">}</span>\nmyPet <span class=\"token operator\">=</span> <span class=\"token function\">pet</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Vivie'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">myPet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                     <span class=\"token comment\">// Devuelve \"Vivie\"</span>\n</code></pre></div>\n<p>Puede ser mucho m√°s complejo que el c√≥digo anterior. Se puede devolver un objeto que contiene m√©todos para manipular las variables internas de la funci√≥n externa.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">createPet</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> sex<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">setName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      name <span class=\"token operator\">=</span> newName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function-variable function\">getName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function-variable function\">getSex</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> sex<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function-variable function\">setSex</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newSex</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> newSex <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>newSex<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'male'</span> <span class=\"token operator\">||</span>\n        newSex<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'female'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sex <span class=\"token operator\">=</span> newSex<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> pet <span class=\"token operator\">=</span> <span class=\"token function\">createPet</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Vivie'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npet<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// Vivie</span>\n\npet<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Oliver'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npet<span class=\"token punctuation\">.</span><span class=\"token function\">setSex</span><span class=\"token punctuation\">(</span><span class=\"token string\">'male'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npet<span class=\"token punctuation\">.</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// male</span>\npet<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// Oliver</span>\n</code></pre></div>\n<p>En el c√≥digo anterior, la variable <code>name</code> de la funci√≥n externa es accesible para las funciones internas, y no hay otra forma de acceder a las variables internas excepto a trav√©s de las funciones internas. Las variables internas de las funciones internas act√∫an como almacenes seguros para los argumentos y variables externos. Contienen datos \"persistentes\" y \"encapsulados\" para que trabajen las funciones internas. Las funciones ni siquiera tienen que estar asignadas a una variable o tener un nombre.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> getCode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> apiCode <span class=\"token operator\">=</span> <span class=\"token string\">'0]Eal(eh&amp;2'</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Un c√≥digo que no queremos que los externos puedan modificar...</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> apiCode<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Devuelve el apiCode</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Nota:</strong> <strong>Precauci√≥n</strong> ¬°Hay una serie de trampas a tener en cuenta al usar cierres!</p>\n  <p>Si una funci√≥n encerrada define una variable con el mismo nombre que una variable en el √°mbito externo, entonces no hay forma de hacer referencia a la variable en el √°mbito externo nuevamente. (La variable de √°mbito interno \"anula\" la externa, hasta que el programa sale de el √°mbito interno).</p>\n  <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">createPet</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// La funci√≥n externa define una variable llamada \"name\".</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">setName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// La funci√≥n envolvente tambi√©n define una variable llamada \"name\".</span>\n      name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ¬øC√≥mo accedemos al \"name\" definido por la funci√≥n externa?</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n</div>"}},{"type":"prose","value":{"id":"usar_el_objeto_arguments","title":"Usar el objeto <code>arguments</code>","isH3":false,"content":"<p>El <code>arguments</code> de una funci√≥n se mantiene en un objeto similar a un arreglo. Dentro de una funci√≥n, puedes abordar los argumentos que se le pasan de la siguiente manera:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>donde <code>i</code> es el n√∫mero ordinal del argumento, comenzando en <code>0</code>. Entonces, el primer argumento que se pasa a una funci√≥n ser√≠a <code>arguments[0]</code>. El n√∫mero total de argumentos se indica mediante <code>arguments.length</code>.</p>\n<p>Usando el objeto <code>arguments</code>, puedes llamar a una funci√≥n con m√°s argumentos de los que formalmente declara aceptar. Esto suele ser √∫til si no sabes de antemano cu√°ntos argumentos se pasar√°n a la funci√≥n. Puedes usar <code>arguments.length</code> para determinar el n√∫mero de argumentos que realmente se pasan a la funci√≥n, y luego acceder a cada argumento usando el objeto <code>arguments</code>.</p>\n<p>Por ejemplo, considera una funci√≥n que concatena varias cadenas. El √∫nico argumento formal para la funci√≥n es una cadena que especifica los caracteres que separan los elementos a concatenar. La funci√≥n se define de la siguiente manera:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">myConcat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">separator</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// inicia list</span>\n   <span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// itera a trav√©s de arguments</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result <span class=\"token operator\">+=</span> arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> separator<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Puedes pasar cualquier n√∫mero de argumentos a esta funci√≥n, y concatena cada argumento en una \"lista\" de cadenas:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// devuelve \"red, orange, blue, \"</span>\n<span class=\"token function\">myConcat</span><span class=\"token punctuation\">(</span><span class=\"token string\">', '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// devuelve \"elephant; giraffe; lion; cheetah\"</span>\n<span class=\"token function\">myConcat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'; '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'elephant'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'giraffe'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'lion'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cheetah'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// devuelve \"sage. basil. oregano. pepper. perejil. \"</span>\n<span class=\"token function\">myConcat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'. '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'salvia'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'albahaca'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'or√©gano'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pimienta'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'perejil'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Nota:</strong> La variable <code>arguments</code> es \"similar a un arreglo\", pero no es un arreglo. Es similar a un arreglo en el sentido de que tiene un √≠ndice numerado y una propiedad <code>length</code>. Sin embargo, <em>no</em> posee todos los m√©todos de manipulaci√≥n de arreglos.</p>\n</div>\n<p>Consulta el objeto <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> en la referencia de JavaScript para obtener m√°s informaci√≥n.</p>","titleAsText":"Usar el objeto arguments"}},{"type":"prose","value":{"id":"par√°metros_de_funci√≥n","title":"Par√°metros de funci√≥n","isH3":false,"content":"<p>A partir de ECMAScript 2015, hay dos nuevos tipos de par√°metros: <em>par√°metros predeterminados</em> y <em>par√°metros resto</em>.</p>"}},{"type":"prose","value":{"id":"par√°metros_predeterminados","title":"Par√°metros predeterminados","isH3":true,"content":"<p>En JavaScript, los par√°metros de las funciones est√°n predeterminados en <code>undefined</code>. Sin embargo, en algunas situaciones puede resultar √∫til establecer un valor predeterminado diferente. Esto es exactamente lo que hacen los par√°metros predeterminados.</p>\n<h4 id=\"sin_par√°metros_predeterminados_preecmascript_2015\">Sin par√°metros predeterminados (preECMAScript 2015)</h4>\n<p>En el pasado, la estrategia general para establecer valores predeterminados era probar los valores de los par√°metros en el cuerpo de la funci√≥n y asignar un valor si eran <code>undefined</code>.</p>\n<p>En el siguiente ejemplo, si no se proporciona ning√∫n valor para <code>b</code>, su valor ser√≠a <code>undefined</code> al evaluar <code>a * b</code>, y una llamada a <code>multiply</code> normalmente habr√≠a devuelto <code>NaN</code>. Sin embargo, esto se evita con la segunda l√≠nea de este ejemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  b <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> b <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">?</span>  b <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n</code></pre></div>\n<h4 id=\"con_par√°metros_predeterminados_posecmascript_2015\">Con par√°metros predeterminados (posECMAScript 2015)</h4>\n<p>Con <em>par√°metros predeterminados</em>, ya no es necesaria una verificaci√≥n manual en el cuerpo de la funci√≥n. Simplemente puedes poner <code>1</code> como valor predeterminado para <code>b</code> en el encabezado de la funci√≥n:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n</code></pre></div>\n<p>Para obtener m√°s detalles, consulta <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>par√°metros predeterminados</code></a> en la referencia.</p>"}},{"type":"prose","value":{"id":"par√°metros_rest","title":"Par√°metros <code>rest</code>","isH3":true,"content":"<p>La sintaxis del <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>par√°metro rest</code></a> nos permite representar un n√∫mero indefinido de argumentos como un arreglo.</p>\n<p>En el siguiente ejemplo, la funci√≥n <code>multiply</code> usa <em>par√°metros <code>rest</code></em> para recopilar argumentos desde el segundo hasta el final. Luego, la funci√≥n los multiplica por el primer argumento.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">multiplier<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>theArgs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> theArgs<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=&gt;</span> multiplier <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2, 4, 6]</span>\n</code></pre></div>","titleAsText":"Par√°metros rest"}},{"type":"prose","value":{"id":"funciones_flecha","title":"Funciones Flecha","isH3":false,"content":"<p>Una <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>expresi√≥n de funci√≥n flecha</code></a> (anteriormente, y ahora conocida incorrectamente como <strong>funci√≥n de flecha gruesa</strong>) tiene una sintaxis m√°s corta en comparaci√≥n con las expresiones de funci√≥n y no tiene su propio <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>this</code></a>, <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>arguments</code></a>, <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>super</code></a> o <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>new.target</code></a>. Las funciones flecha siempre son an√≥nimas. Consulta tambi√©n esta publicaci√≥n del blog hacks.mozilla.org: \"<a href=\"https://hacks.mozilla.org/2015/06/es6-in-depth-arrow-functions/\" class=\"external\" rel=\" noopener\">ES6 en profundidad: funciones flecha</a>\".</p>\n<p>Dos factores influyeron en la introducci√≥n de las funciones flecha: <em>funciones m√°s cortas</em> y <em>no vinculantes</em> de <code>this</code>.</p>"}},{"type":"prose","value":{"id":"funciones_m√°s_cortas","title":"Funciones m√°s cortas","isH3":true,"content":"<p>En algunos patrones funcionales, las funciones m√°s cortas son bienvenidas. Compara:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'Hidr√≥geno'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Helio'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Litio'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Berilio'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> a2 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs [8, 6, 7, 9]</span>\n\n<span class=\"token keyword\">var</span> a3 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span> <span class=\"token operator\">=&gt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs [8, 6, 7, 9]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"sin_this_separado","title":"Sin <code>this</code> separado","isH3":true,"content":"<p>Hasta las funciones flecha, cada nueva funci√≥n defin√≠a su propio valor <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>this</code></a> (un nuevo objeto en el caso de un constructor, indefinido en llamadas a funciones en <a href=\"/es/docs/Web/JavaScript/Reference/Strict_mode\"><code>modo estricto</code></a>, el objeto base si la funci√≥n se llama como un \"m√©todo de objeto\", etc.). Esto result√≥ ser poco menos que ideal con un estilo de programaci√≥n orientado a objetos.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// El constructor Person() define `this` como √©l mismo.</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">growUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// En modo no estricto, la funci√≥n growUp() define `this`</span>\n    <span class=\"token comment\">// como el objeto global, que es diferente del `this`</span>\n    <span class=\"token comment\">// definido por el constructor Person().</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>En ECMAScript 3/5, este problema se solucion√≥ asignando el valor en <code>this</code> a una variable que se podr√≠a cerrar.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Algunos eligen `that` en lugar de` self`.</span>\n                   <span class=\"token comment\">// Elige uno y se congruente.</span>\n  self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">growUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// La retrollamada se refiere a la variable `self` de la cual</span>\n    <span class=\"token comment\">// el valor es el objeto esperado.</span>\n    self<span class=\"token punctuation\">.</span>age<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Alternativamente, podr√≠as crear una <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>funci√≥n vinculada</code></a> para que el valor <code>this</code> adecuado se pasara a la funci√≥n <code>growUp()</code>.</p>\n<p>Una funci√≥n flecha no tiene su propio <code>this</code> se utiliza el valor de <code>this</code> del contexto de ejecuci√≥n adjunto. Por lo tanto, en el siguiente c√≥digo, <code>this</code> dentro de la funci√≥n que se pasa a <code>setInterval</code> tiene el mismo valor que <code>this</code> en la funci√≥n adjunta:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// |this| propiamente se refiere al objeto person</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","titleAsText":"Sin this separado"}},{"type":"prose","value":{"id":"funciones_predefinidas","title":"Funciones predefinidas","isH3":false,"content":"<p>JavaScript tiene integradas varias funciones de nivel superior:</p>\n<dl>\n  <dt id=\"eval\"><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>eval()</code></a></dt>\n  <dd>\n    <p>El m√©todo <strong><code>eval()</code></strong> eval√∫a el c√≥digo JavaScript representado como una cadena.</p>\n  </dd>\n  <dt id=\"uneval\"><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>uneval()</code></a></dt>\n  <dd>\n    <p>El m√©todo <strong><code>uneval()</code></strong> crea una representaci√≥n de cadena del c√≥digo fuente de un <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a>.</p>\n  </dd>\n  <dt id=\"isfinite\"><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>isFinite()</code></a></dt>\n  <dd>\n    <p>La funci√≥n global <strong><code>isFinite()</code></strong> determina si el valor pasado es un n√∫mero finito. Si es necesario, el par√°metro, primero se convierte en un n√∫mero.</p>\n  </dd>\n  <dt id=\"isnan\"><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>isNaN()</code></a></dt>\n  <dd>\n    <p>La funci√≥n <strong><code>isNaN()</code></strong> determina si un valor es <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>NaN</code></a> o no. <strong>Nota</strong>: La coerci√≥n dentro de la funci√≥n <code>isNaN</code> tiene <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>interesantes</code></a> reglas; tambi√©n puedes querer usar <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\"><code>Number.isNaN()</code></a>, como se define en ECMAScript 2015, o puedes usar <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>typeof</code></a> para determinar si el valor no es un n√∫mero (<code>NaN</code>).</p>\n  </dd>\n  <dt id=\"parsefloat\"><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>parseFloat()</code></a></dt>\n  <dd>\n    <p>La funci√≥n <strong><code>parseFloat()</code></strong> procesa un argumento de cadena y devuelve un n√∫mero de punto flotante.</p>\n  </dd>\n  <dt id=\"parseint\"><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>parseInt()</code></a></dt>\n  <dd>\n    <p>La funci√≥n <strong><code>parseInt()</code></strong> procesa un argumento de cadena y devuelve un n√∫mero entero de la base especificada (la base en los sistemas num√©ricos matem√°ticos).</p>\n  </dd>\n  <dt id=\"decodeuri\"><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>decodeURI()</code></a></dt>\n  <dd>\n    <p>La funci√≥n <strong><code>decodeURI()</code></strong> decodifica un identificador uniforme de recursos (URI) creado previamente por <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>encodeURI</code></a> o por una rutina similar.</p>\n  </dd>\n  <dt id=\"decodeuricomponent\"><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>decodeURIComponent()</code></a></dt>\n  <dd>\n    <p>El m√©todo <strong><code>decodeURIComponent()</code></strong> decodifica un componente Identificador uniforme de recursos (URI) creado previamente por <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>encodeURIComponent</code></a> o por un rutina similar.</p>\n  </dd>\n  <dt id=\"encodeuri\"><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>encodeURI()</code></a></dt>\n  <dd>\n    <p>El m√©todo <strong><code>encodeURI()</code></strong> codifica un identificador uniforme de recursos (URI) reemplazando cada instancia de ciertos caracteres por una, dos, tres o cuatro secuencias de escape que representan la codificaci√≥n UTF-8 del caracter (solo habr√° cuatro secuencias de escape para caracteres compuestos por dos caracteres \"sustitutos\").</p>\n  </dd>\n  <dt id=\"encodeuricomponent\"><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>encodeURIComponent()</code></a></dt>\n  <dd>\n    <p>El m√©todo <strong><code>encodeURIComponent()</code></strong> codifica un componente Identificador uniforme de recursos (URI) reemplazando cada instancia de ciertos caracteres por una, dos, tres o cuatro secuencias de escape que representan la codificaci√≥n UTF-8 del caracter (solo habr√° cuatro secuencias de escape para caracteres compuestos por dos caracteres \"sustitutos\").</p>\n  </dd>\n  <dt id=\"escape\"><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>escape()</code></a></dt>\n  <dd>\n    <p>El m√©todo obsoleto <strong><code>escape()</code></strong> calcula una nueva cadena en la que ciertos caracteres han sido reemplazados por una secuencia de escape hexadecimal. En su lugar usa <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>encodeURI</code></a> o <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>encodeURIComponent</code></a>.</p>\n  </dd>\n  <dt id=\"unescape\"><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>unescape()</code></a></dt>\n  <dd>\n    <p>El m√©todo obsoleto <strong><code>unescape()</code></strong> calcula una nueva cadena en la que las secuencias de escape hexadecimales se reemplazan con el caracter que representan. Las secuencias de escape se pueden introducir por medio de una funci√≥n como <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>escape</code></a>. Debido a que <code>unescape()</code> est√° en desuso, usa <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>decodeURI()</code></a> o <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>decodeURIComponent</code></a> en su lugar.</p>\n  </dd>\n</dl><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/es/docs/Web/JavaScript/Guide/Loops_and_iteration\">¬´ Anterior</a></li>\n    <li><a class=\"button minimal\" href=\"/es/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Siguiente  ¬ª</a></li>\n</ul>"}}],"toc":[{"text":"Definir funciones","id":"definir_funciones"},{"text":"Llamar funciones","id":"llamar_funciones"},{"text":"√Åmbito de <code>function</code>","id":"√°mbito_de_function"},{"text":"√Åmbito y la pila de funciones","id":"√°mbito_y_la_pila_de_funciones"},{"text":"Cierres","id":"cierres"},{"text":"Usar el objeto <code>arguments</code>","id":"usar_el_objeto_arguments"},{"text":"Par√°metros de funci√≥n","id":"par√°metros_de_funci√≥n"},{"text":"Funciones Flecha","id":"funciones_flecha"},{"text":"Funciones predefinidas","id":"funciones_predefinidas"}],"summary":"Las funciones son uno de los bloques de construcci√≥n fundamentales en JavaScript. Una funci√≥n en JavaScript es similar a un procedimiento ‚Äî un conjunto de instrucciones que realiza una tarea o calcula un valor, pero para que un procedimiento califique como funci√≥n, debe tomar alguna entrada y devolver una salida donde hay alguna relaci√≥n obvia entre la entrada y la salida. Para usar una funci√≥n, debes definirla en alg√∫n lugar del √°mbito desde el que deseas llamarla.","popularity":0.0098,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Functions","locale":"en-US","native":"English (US)"},{"title":"Fonctions","locale":"fr","native":"Fran√ßais"},{"title":"Èñ¢Êï∞","locale":"ja","native":"Êó•Êú¨Ë™û"},{"title":"Ìï®Ïàò","locale":"ko","native":"ÌïúÍµ≠Ïñ¥"},{"title":"Fun√ß√µes","locale":"pt-BR","native":"Portugu√™s (do¬†Brasil)"},{"title":"–§—É–Ω–∫—Ü–∏–∏","locale":"ru","native":"–†—É—Å—Å–∫–∏–π"},{"title":"ÂáΩÊï∞","locale":"zh-CN","native":"‰∏≠Êñá (ÁÆÄ‰Ωì)"},{"title":"ÂáΩÂºè","locale":"zh-TW","native":"Ê≠£È´î‰∏≠Êñá (ÁπÅÈ´î)"}],"source":{"folder":"es/web/javascript/guide/functions","github_url":"https://github.com/mdn/translated-content/blob/main/files/es/web/javascript/guide/functions/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/es/docs/Web","title":"Tecnolog√≠a para desarrolladores web"},{"uri":"/es/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/es/docs/Web/JavaScript/Guide","title":"Gu√≠a de JavaScript"},{"uri":"/es/docs/Web/JavaScript/Guide/Functions","title":"Funciones"}],"pageTitle":"Funciones - JavaScript | MDN","noIndexing":false}}