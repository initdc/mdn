{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Gramática y Tipos","mdn_url":"/es/docs/Web/JavaScript/Guide/Grammar_and_types","locale":"es","native":"Español","sidebarHTML":"\n <ol>\n  <li><a href=\"/es/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/es/docs/Web/JavaScript/Tutorials\"><strong>Tutorials:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Complete beginners</summary>\n      <ol>\n        <li><a href=\"/es/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript basics</a></li>\n        <li><a href=\"/es/docs/Learn/JavaScript/First_steps\">JavaScript first steps</a></li>\n        <li><a href=\"/es/docs/Learn/JavaScript/Building_blocks\">JavaScript building blocks</a></li>\n        <li><a href=\"/es/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>JavaScript Guide</summary>\n      <ol>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Introduction\">Introduction</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Grammar_and_Types\">Grammar and types</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Control flow and error handling</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Loops_and_iteration\">Loops and iteration</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Functions\">Functions</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressions and operators</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Numbers_and_dates\">Numbers and dates</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Text_formatting\">Text formatting</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Regular_Expressions\">Regular expressions</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Indexed_collections\">Indexed collections</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Keyed_collections\">Keyed collections</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Working_with_Objects\">Working with objects</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Details of the object model</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Iterators_and_generators\">Iterators and generators</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Meta_programming\">Meta programming</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Intermediate</summary>\n      <ol>\n        <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/es/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">A re-introduction to JavaScript</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Equality comparisons and sameness</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Closures\">Closures</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Advanced</summary>\n      <ol>\n        <li><a href=\"/es/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Inheritance and the prototype chain</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Typed_arrays\">JavaScript typed arrays</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Memory_Management\">Memory Management</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/EventLoop\">Concurrency model and Event Loop</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/es/docs/Web/JavaScript/Reference\">References:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Built-in objects</summary>\n        <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Expressions &amp; operators</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Statements &amp; declarations</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Functions</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Misc</summary>\n      <ol>\n        <li><a href=\"/es/docs/Web/JavaScript/JavaScript_technologies_overview\">JavaScript technologies overview</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Lexical_grammar\">Lexical grammar</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Enumerability and ownership of properties</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Iteration_protocols\">Iteration protocols</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Transitioning to strict mode</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Template_literals\">Template literals</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Deprecated features</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/es/docs/Web/JavaScript/Guide/Introduction\">« Anterior</a></li>\n    <li><a class=\"button minimal\" href=\"/es/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Siguiente  »</a></li>\n</ul>\n<p>Este capítulo analiza la gramática básica de JavaScript, la declaración de variables, los tipos de datos y literales.</p>"}},{"type":"prose","value":{"id":"conceptos_básicos","title":"Conceptos básicos","isH3":false,"content":"<p>JavaScript está influenciado sobre todo por la sintaxis de Java, C y C++, pero también ha sido influenciado por Awk, Perl y Python.</p>\n<p>JavaScript distingue entre mayúsculas y minúsculas (es <strong>case-sensitive</strong>) y utiliza el conjunto de caracteres <strong>Unicode</strong>. Por ejemplo, la palabra «Früh» (que significa \"temprano\" en Alemán) se podría usar como el nombre de una variable.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> Früh <span class=\"token operator\">=</span> <span class=\"token string\">\"foobar\"</span>\n</code></pre></div>\n<p>Pero, la variable <code>früh</code> no es la misma que <code>Früh</code> porque JavaScript distingue entre mayúsculas y minúsculas.</p>\n<p>En JavaScript, las instrucciones se denominan <a href=\"/es/docs/Glossary/Statement\">declaraciones</a> y están separadas por punto y coma (;).</p>\n<p>No es necesario un punto y coma después de una declaración si está escrita en su propia línea. Pero si se deseas más de una declaración en una línea, entonces <em>debes</em> separarlas con punto y coma.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Nota:</strong> ECMAScript también tiene reglas para la inserción automática del punto y coma —<a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>IAPC</code></a>— (<em>ASI</em> en inglés, por sus siglas «<em>Automatic Semicolon Insertion</em>») al final de las declaraciones. (Para obtener más información, consulta la referencia detallada sobre la <a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>gramática léxica</code></a> de JavaScript).</p>\n</div>\n<p>Sin embargo, se considera una buena práctica escribir siempre un punto y coma después de una declaración, incluso cuando no sea estrictamente necesario. Esta práctica reduce las posibilidades de que se introduzcan errores en el código.</p>\n<p>El texto fuente del script JavaScript se escanea de izquierda a derecha y se convierte en una secuencia de elementos de entrada que son <em>fragmentos</em>, <em>caracteres de control</em>, <em>terminadores de línea</em>, <em>comentarios</em> o <a href=\"/es/docs/Glossary/Whitespace\">espacios en blanco</a>. (Los espacios, tabulaciones y caracteres de nueva línea se consideran espacios en blanco).</p>"}},{"type":"prose","value":{"id":"comentarios","title":"Comentarios","isH3":false,"content":"<p>La sintaxis de los <strong>comentarios</strong> es la misma que en C++ y en muchos otros lenguajes:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// un comentario de una línea</span>\n\n<span class=\"token comment\">/* este es un comentario\n * más largo, de varias líneas\n */</span>\n\n<span class=\"token comment\">/* Sin embargo, no puedes /* anidar comentarios */</span> SyntaxError <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\n</code></pre></div>\n<p>Los comentarios se comportan como espacios en blanco y se descartan durante la ejecución del script.</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Nota:</strong> También puedes ver un tercer tipo de sintaxis de comentario al comienzo de algunos archivos JavaScript, que se parece a esto: <code>#!/usr/bin/env node</code>.Esto se denomina sintaxis de <strong>comentario hashbang</strong> y es un comentario especial que se utiliza para especificar la ruta a un motor JavaScript en particular que debe ejecutar el script. Consulta <a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>Comentarios Hashbang</code></a> para obtener más detalles.</p>\n</div>"}},{"type":"prose","value":{"id":"declaraciones","title":"Declaraciones","isH3":false,"content":"<p>JavaScript tiene tres tipos de declaraciones de variables.</p>\n<dl>\n  <dt id=\"var\"><a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>var</code></a></dt>\n  <dd>\n    <p>Declara una variable, opcionalmente la inicia a un valor.</p>\n  </dd>\n  <dt id=\"let\"><a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>let</code></a></dt>\n  <dd>\n    <p>Declara una variable local con ámbito de bloque, opcionalmente la inicia a un valor.</p>\n  </dd>\n  <dt id=\"const\"><a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>const</code></a></dt>\n  <dd>\n    <p>Declara un nombre de constante de solo lectura y ámbito de bloque.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"variables","title":"Variables","isH3":true,"content":"<p>Utiliza variables como nombres simbólicos para valores en tu aplicación. Los nombres de las variables, llamados <a href=\"/es/docs/Glossary/Identifier\">identificadores</a>, se ajustan a ciertas reglas.</p>\n<p>Un identificador de JavaScript debe comenzar con una letra, un guión bajo (<code>_</code>) o un signo de dólar (<code>$</code>). Los siguientes caracteres también pueden ser dígitos (<code>0</code>-<code>9</code>).</p>\n<p>Dado que JavaScript distingue entre mayúsculas y minúsculas, las letras incluyen los caracteres \"<code>A</code>\" a \"<code>Z</code>\" (mayúsculas), así como \"<code>a</code>\" a \"z\" (minúsculas).</p>\n<p>Puedes utilizar la mayoría de las letras ISO 8859-1 o Unicode como <code>å</code> y <code>ü</code> en los identificadores. (Para obtener más detalles, consulta <a href=\"https://mathiasbynens.be/notes/javascript-identifiers-es6\" class=\"external\" rel=\" noopener\">esta publicación del blog</a>). También puedes usar <a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>Secuencias de escape Unicode</code></a> como caracteres en identificadores.</p>\n<p>Algunos ejemplos de nombres legales son <code>Number_hits</code>, <code>temp99</code>, <code>$credit</code> y <code>_name</code>.</p>"}},{"type":"prose","value":{"id":"declaración_de_variables","title":"Declaración de variables","isH3":true,"content":"<p>Puedes declarar una variable de dos formas:</p>\n<ul>\n  <li>Con la palabra clave <a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>var</code></a>. Por ejemplo, <code>var x = 42</code>. Esta sintaxis se puede utilizar para declarar variables <strong>locales</strong> y <strong>globales</strong>, dependiendo del <em>contexto de ejecución</em>.</li>\n  <li>Con la palabra clave <a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>const</code></a> o <a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>let</code></a>. Por ejemplo, <code>let y = 13</code>. Esta sintaxis se puede utilizar para declarar una variable local con ámbito de bloque. (Ve el <a href=\"#ambito_de_variables\">Ámbito de variables</a> abajo.)</li>\n</ul>\n<p>También puedes simplemente asignar un valor a una variable. Por ejemplo, <code>x = 42</code>. Este formulario crea una variable <a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>global no declarada</code></a>. También genera una advertencia estricta de JavaScript. Las variables globales no declaradas a menudo pueden provocar un comportamiento inesperado. Por lo tanto, se desaconseja utilizar variables globales no declaradas.</p>"}},{"type":"prose","value":{"id":"evaluar_variables","title":"Evaluar variables","isH3":true,"content":"<p>Una variable declarada usando la instrucción <code>var</code> o <code>let</code> sin un valor asignado especificado tiene el valor de <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</p>\n<p>Un intento de acceder a una variable no declarada da como resultado el disparo de una excepción <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\"><code>ReferenceError</code></a>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'El valor de a es '</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// El valor de a es undefined</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'El valor de b es '</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// El valor de b es undefined</span>\n<span class=\"token keyword\">var</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Esto puede desconcertarte hasta que leas 'Elevación de variable' a continuación</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'El valor de c es '</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error de referencia no detectado: c no está definida</span>\n\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'El valor de x es '</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// El valor de x es undefined</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'El valor de y es '</span> <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error de referencia no detectada: y no está definida</span>\n<span class=\"token keyword\">let</span> y<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Puedes usar <code>undefined</code> para determinar si una variable tiene un valor. En el siguiente código, a la variable <code>input</code> no se le asigna un valor y la declaración <a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>if</code></a> evalúa a <code>true</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> input<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">doThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">doThat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>El valor <code>undefined</code> se comporta como <code>false</code> cuando se usa en un contexto booleano. Por ejemplo, el siguiente código ejecuta la función <code>myFunction</code> porque el elemento <code>myArray</code> es <code>undefined</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>myArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>El valor <code>undefined</code> se convierte en <code>NaN</code> cuando se usa en contexto numérico.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>\na <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Evalúa a NaN</span>\n</code></pre></div>\n<p>Cuando evalúas una variable <a href=\"/es/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>, el valor nulo se comporta como <code>0</code> en contextos numéricos y como <code>false</code> en contextos booleanos. Por ejemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Registrará 0 en la consola</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"ámbito_de_variables","title":"Ámbito de variables","isH3":true,"content":"<p>Cuando declaras una variable fuera de cualquier función, se denomina variable <em>global</em>, porque está disponible para cualquier otro código en el documento actual. Cuando declaras una variable dentro de una función, se llama variable <em>local</em>, porque solo está disponible dentro de esa función.</p>\n<p>JavaScript anterior a ECMAScript 2015 no tiene el ámbito de la <a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\">declaración de bloque</a>. Más bien, una variable declarada dentro de un bloque es local a la <em>función (o ámbito global)</em> en el que reside el bloque.</p>\n<p>Por ejemplo, el siguiente código registrará <code>5</code>, porque el ámbito de <code>x</code> es el contexto global (o el contexto de la función si el código es parte de una función). El ámbito de <code>x</code> no se limita al bloque de instrucciones <code>if</code> inmediato.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// x es 5</span>\n</code></pre></div>\n<p>Este comportamiento cambia cuando se usa la declaración <code>let</code> (introducida en ECMAScript 2015).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError: y no está definida</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"elevación_de_variables_hoisting","title":"Elevación de variables (<code>hoisting</code>)","isH3":true,"content":"<p>Otra cosa inusual acerca de las variables en JavaScript es que puedes hacer referencia a una variable declarada más tarde, sin obtener una excepción.</p>\n<p>Este concepto se conoce como <strong>elevación.</strong> Las variables en JavaScript son, en cierto sentido, \"elevadas\" (o \"izadas\") a la parte superior de la función o declaración. Sin embargo, las variables que se elevan devuelven un valor de <code>undefined</code>. Entonces, incluso si la declaras e inicias después de usarla o hacer referencia a esta variable, todavía devuelve <code>undefined</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/**\n * Ejemplo 1\n */</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Ejemplo 2\n */</span>\n<span class=\"token comment\">// devolverá un valor de undefined</span>\n<span class=\"token keyword\">var</span> myvar <span class=\"token operator\">=</span> <span class=\"token string\">'my value'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n  <span class=\"token keyword\">var</span> myvar <span class=\"token operator\">=</span> <span class=\"token string\">'valor local'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Los ejemplos anteriores se interpretarán de la misma manera que:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/**\n * Ejemplo 1\n */</span>\n<span class=\"token keyword\">var</span> x<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nx <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Ejemplo 2\n */</span>\n<span class=\"token keyword\">var</span> myvar <span class=\"token operator\">=</span> <span class=\"token string\">'my value'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> myVar<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n  myvar <span class=\"token operator\">=</span> <span class=\"token string\">'valor local'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Debido a la elevación, todas las declaraciones <code>var</code> en una función se deben colocar lo más cerca posible de la parte superior de la función. Esta buena práctica aumenta la claridad del código.</p>\n<p>En ECMAScript 2015, <code>let</code> y <code>const</code> <strong>se elevan pero no se inician</strong>. Hacer referencia a la variable en el bloque antes de la declaración de la variable da como resultado un <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\"><code>ReferenceError</code></a>, porque la variable está en una \"zona muerta temporal\" desde el inicio del bloque hasta que se procesa la declaración.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","titleAsText":"Elevación de variables (hoisting)"}},{"type":"prose","value":{"id":"elevación_de_función","title":"Elevación de función","isH3":true,"content":"<p>En el caso de las funciones, solo se incluyen <em>declaraciones</em> de función, pero <em>no</em> las <em>expresiones</em> de la función.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/* Declaración de función */</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"bar\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">/* Expresión de función */</span>\n\n<span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError: baz no es una función</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">baz</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"variables_globales","title":"Variables globales","isH3":true,"content":"<p>Las variables globales, de hecho, son propiedades del <em>objeto global</em>.</p>\n<p>En las páginas web, el objeto global es <a href=\"/es/docs/Web/API/Window\"><code>window</code></a>, por lo que puedes establecer y acceder a variables globales utilizando la sintaxis <code>window.variable</code>.</p>\n<p>En consecuencia, puedes acceder a las variables globales declaradas en una «ventana» o «marco» desde otra «ventana» o «marco» especificando el nombre de la <code>window</code> o el <code>frame</code>. Por ejemplo, si declaras una variable llamada <code>phoneNumber</code> en un documento, puedes hacer referencia a esta variable desde un <code>iframe</code> como <code>parent.phoneNumber</code>.</p>"}},{"type":"prose","value":{"id":"constantes","title":"Constantes","isH3":true,"content":"<p>Puedes crear una constante de solo lectura con nombre con la palabra clave <a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>const</code></a>.</p>\n<p>La sintaxis de un identificador de constante es la misma que la de cualquier identificador de variable: debe comenzar con una letra, un subrayado o un signo de dólar (<code>$</code>) y puede contener caracteres alfabéticos, numéricos o de subrayado.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token constant\">PI</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Una constante no puede cambiar el valor a través de la asignación o volver a declararla mientras se ejecuta el script. Se debe iniciar a un valor.</p>\n<p>Las reglas de ámbito para las constantes son las mismas que las de ámbito de bloque de las variables <code>let</code>. Si se omite la palabra clave <code>const</code>, se asume que el identificador representa una variable.</p>\n<p>No puedes declarar una constante con el mismo nombre que una función o una variable en el mismo ámbito. Por ejemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// ESTO CAUSARÁ UN ERROR</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ESTO TAMBIÉN CAUSARÁ UN ERROR</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> g <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> g<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// expresiones</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Sin embargo, las propiedades de los objetos asignados a constantes no son protegidas, es por esto que la siguiente declaración se ejecuta sin problemas.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token constant\">MY_OBJECT</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string-property property\">'key'</span><span class=\"token operator\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">MY_OBJECT</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> <span class=\"token string\">'otherValue'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Además, el contenido de los arreglos tampoco está protegido cuando es asignado a una constante, es por esto que la siguiente declaración se ejecuta sin problemas.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token constant\">MY_ARRAY</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'HTML'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'CSS'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">MY_ARRAY</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'JAVASCRIPT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MY_ARRAY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// registra ['HTML','CSS','JAVASCRIPT'];</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"estructuras_y_tipos_de_datos","title":"Estructuras y tipos de datos","isH3":false,"content":""}},{"type":"prose","value":{"id":"tipos_de_datos","title":"Tipos de datos","isH3":true,"content":"<p>El último estándar ECMAScript define ocho tipos de datos:</p>\n<ul>\n  <li>Siete tipos de datos que son <a href=\"/es/docs/Glossary/Primitive\">primitivos</a>:\n    <ol>\n      <li><a href=\"/es/docs/Glossary/Boolean\">Booleano</a>. <code>true</code> y <code>false</code>.</li>\n      <li><a href=\"/es/docs/Glossary/Null\">null</a>. Una palabra clave especial que denota un valor nulo. (Dado que JavaScript distingue entre mayúsculas y minúsculas, <code>null</code> no es lo mismo que <code>Null</code>, <code>NULL</code> o cualquier otra variante).</li>\n      <li><a href=\"/es/docs/Glossary/undefined\">undefined</a>. Una propiedad de alto nivel cuyo valor no está definido.</li>\n      <li><a href=\"/es/docs/Glossary/Number\">Number</a>. Un número entero o un número con coma flotante. Por ejemplo: <code>42</code> o <code>3.14159</code>.</li>\n      <li><a href=\"/es/docs/Glossary/BigInt\">BigInt</a>. Un número entero con precisión arbitraria. Por ejemplo: <code>9007199254740992n</code>.</li>\n      <li><a href=\"/es/docs/Glossary/String\">String</a>. Una secuencia de caracteres que representan un valor de texto. Por ejemplo: \"Hola\"</li>\n      <li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a> (nuevo en ECMAScript 2015). Un tipo de dato cuyas instancias son únicas e inmutables</li>\n    </ol>\n  </li>\n  <li>y <a href=\"/es/docs/Glossary/Object\">Object</a></li>\n</ul>\n<p>Aunque estos tipos de datos son una cantidad relativamente pequeña, permiten realizar funciones útiles con tus aplicaciones. Los otros elementos fundamentales en el lenguaje son los <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object\">Objetos</a> y las <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function\">funciones</a>. Puedes pensar en objetos como contenedores con nombre para los valores, y las funciones como procedimientos que puedes programar en tu aplicación.</p>"}},{"type":"prose","value":{"id":"conversión_de_tipos_de_datos","title":"Conversión de tipos de datos","isH3":true,"content":"<p>JavaScript es un lenguaje <em>tipado dinámicamente</em>. Esto significa que no tienes que especificar el tipo de dato de una variable cuando la declaras. También significa que los tipos de datos se convierten automáticamente según sea necesario durante la ejecución del script.</p>\n<p>Así, por ejemplo, puedes definir una variable de la siguiente manera:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Y luego, puedes asignarle una cadena a esa misma variable, por ejemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>answer <span class=\"token operator\">=</span> <span class=\"token string\">'Gracias por todo el pescado...'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Debido a que JavaScript se tipifica dinámicamente, esta asignación no genera un mensaje de error.</p>"}},{"type":"prose","value":{"id":"números_y_el_operador_","title":"Números y el operador '+'","isH3":true,"content":"<p>En expresiones que involucran valores numéricos y de cadena con el operador <code>+</code>, JavaScript convierte los valores numéricos en cadenas. Por ejemplo, considera las siguientes declaraciones:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>x <span class=\"token operator\">=</span> <span class=\"token string\">'La respuesta es '</span> <span class=\"token operator\">+</span> <span class=\"token number\">42</span> <span class=\"token comment\">// \"La respuesta es 42\"</span>\ny <span class=\"token operator\">=</span> <span class=\"token number\">42</span> <span class=\"token operator\">+</span> <span class=\"token string\">' es la respuesta'</span> <span class=\"token comment\">// \"42 es la respuesta\"</span>\n</code></pre></div>\n<p>Con todos los demás operadores, JavaScript <em>no</em> convierte valores numéricos en cadenas. Por ejemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">'37'</span> <span class=\"token operator\">-</span> <span class=\"token number\">7</span> <span class=\"token comment\">// 30</span>\n<span class=\"token string\">'37'</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span> <span class=\"token comment\">// \"377\"</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"convertir_texto_a_números","title":"Convertir texto a números","isH3":true,"content":"<p>En el caso que un valor representando un número está en memoria como texto, hay métodos para la conversión.</p>\n<ul>\n  <li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/parseInt\"><code>parseInt()</code></a></li>\n  <li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\"><code>parseFloat()</code></a></li>\n</ul>\n<p><code>parseInt</code> solo devuelve números enteros, por lo que su uso se reduce para decimales.</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Nota:</strong> Además, una práctica recomendada para <code>parseInt</code> es incluir siempre el parámetro <em>radix</em>. El parámetro <code>radix</code> se utiliza para especificar qué sistema numérico se utilizará.</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'101'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span>\n</code></pre></div>\n<p>Un método alternativo para recuperar un número de una cadena es con el operador <code>+</code> (más unario):</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">'1.1'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'1.1'</span> <span class=\"token comment\">// '1.11.1'</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token string\">'1.1'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token string\">'1.1'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2.2</span>\n<span class=\"token comment\">// Nota: los paréntesis se agregan para mayor claridad, no son necesarios.</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"literales","title":"Literales","isH3":false,"content":"<p>Los <em>literales</em> representan valores en JavaScript. Estos son valores fijos, no variables, que <em>literalmente</em> proporcionas en tu script. Esta sección describe los siguientes tipos de literales:</p>\n<ul>\n  <li><a href=\"#arreglos_literales\">Arreglos literales</a></li>\n  <li><a href=\"#booleanos_literales\">Booleanos literales</a></li>\n  <li><a href=\"#literales_de_coma_flotante\">Literales de coma flotante</a></li>\n  <li><a href=\"#literales_numericos\">Literales numéricos</a></li>\n  <li><a href=\"#objetos_literales\">Objetos literales</a></li>\n  <li><a href=\"#regexp_literales\">RegExp literales</a></li>\n  <li><a href=\"#cadenas_literales\">Cadenas literales</a></li>\n</ul>"}},{"type":"prose","value":{"id":"arreglos_literales","title":"Arreglos literales","isH3":true,"content":"<p>Un arreglo literal es una lista de cero o más expresiones, cada una de las cuales representa un elemento del arreglo, encerrada entre corchetes (<code>[]</code>). Cuando creas un arreglo utilizando un arreglo literal, se inicia con los valores especificados como sus elementos, y su <code>length</code> se establece en el número de argumentos especificado.</p>\n<p>El siguiente ejemplo crea el arreglo <code>coffees</code> con tres elementos y <code>length</code> de tres:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> coffees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'French Roast'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Colombian'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Kona'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Nota:</strong> Un arreglo literal es un tipo de <em>iniciador de objeto</em>. Consulta <a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>Uso de iniciadores de objetos</code></a>.</p>\n</div>\n<p>Si creas un arreglo utilizando un literal en un script de nivel superior, JavaScript interpreta el arreglo cada vez que evalúa la expresión que contiene el arreglo literal. Además, cada vez que llamas a una función se crea un literal usado en ella.</p>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>Nota:</strong> Los arreglos literales también son objetos <code>Array</code>. Consulta <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> y <a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>Colecciones indexadas</code></a> para obtener detalles sobre los objetos <code>Array</code>.</p>\n</div>\n<h4 id=\"comas_adicionales_en_arreglos_literales\">Comas adicionales en arreglos literales</h4>\n<p>No tienes que especificar todos los elementos en un arreglo literal. Si colocas dos comas en una fila, el arreglo completa el valor <code>undefined</code> para los elementos no especificados. El siguiente ejemplo crea el arreglo <code>fish</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> fish <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Lion'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'Angel'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Este arreglo tiene dos elementos con valores y un elemento vacío:</p>\n<ul>\n  <li><code>fish[0]</code> es \"Lion\"</li>\n  <li><code>fish[1]</code> es <code>undefined</code></li>\n  <li><code>fish[2]</code> es \"Angel\"</li>\n</ul>\n<p>Si incluyes una coma al final de la lista de los elementos, la coma es ignorada.</p>\n<p>En el siguiente ejemplo, el <code>length</code> del arreglo es tres. No hay <code>myList[3]</code>. Todas las demás comas de la lista indican un nuevo elemento.</p>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>Nota:</strong> Las comas finales pueden crear errores en versiones anteriores del navegador y se recomienda eliminarlas.</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> myList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'home'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'school'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>En el siguiente ejemplo, el <code>length</code> del arreglo es cuatro, y faltan <code>myList[0]</code> y <code>myList[2]</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> myList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">,</span><span class=\"token string\">'home'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'school'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>En el siguiente ejemplo, el <code>length</code> del arreglo es cuatro, y faltan <code>myList[1]</code> y <code>myList[3]</code>. <strong>Solo se ignora la última coma.</strong></p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> myList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'home'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'school'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Entender el comportamiento de las comas adicionales es importante para comprender JavaScript como lenguaje.</p>\n<p>Sin embargo, al escribir tu propio código, debes declarar explícitamente los elementos que faltan como <code>undefined</code>. Hacerlo así aumenta la claridad y la facilidad de mantenimiento de tu código.</p>"}},{"type":"prose","value":{"id":"booleanos_literales","title":"Booleanos literales","isH3":true,"content":"<p>El tipo booleano tiene dos valores literales: <code>true</code> y <code>false</code>.</p>\n<div class=\"notecard note\" id=\"sect7\">\n  <p><strong>Nota:</strong> <strong>Ten cuidado</strong>: No confundas los valores booleanos primitivos <code>true</code> y <code>false</code> con los valores <code>true</code> y <code>false</code> del objeto <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a>.El objeto <code>Boolean</code> es un contenedor alrededor del tipo de dato primitivo <code>Boolean</code>. Consulta <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> para obtener más información.</p>\n</div>"}},{"type":"prose","value":{"id":"literales_numéricos","title":"Literales numéricos","isH3":true,"content":"<p>Los tipos <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> y <a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>BigInt</code></a> se pueden escribir en decimal (base 10), hexadecimal (base 16), octal (base 8) y binario (base 2).</p>\n<ul>\n  <li>Un literal numérico <em>decimal</em> es una secuencia de dígitos sin un <code>0</code> (cero) inicial.</li>\n  <li>Un <code>0</code> (cero) inicial en un literal numérico, o un <code>0o</code> inicial (o <code>0O</code>) indica que está en <em>octal</em>. Los números octales pueden incluir solo los dígitos <code>0</code>-<code>7</code>.</li>\n  <li>Un <code>0x</code> inicial (o <code>0X</code>) indica un tipo numérico <em>hexadecimal</em>. Los números hexadecimales pueden incluir los dígitos (<code>0</code>-<code>9</code>) y las letras <code>a</code>-<code>f</code> y <code>A</code>-<code>F</code>. (Si un caracter está en mayúscula o minúscula no cambia su valor. Por lo tanto: <code>0xa</code> = <code>0xA</code> = <code>10</code> y <code>0xf</code> = <code>0xF</code> = <code>15</code>).</li>\n  <li>Un <code>0b</code> inicial (o <code>0B</code>) indica un literal numérico <em>binario</em>. Los números binarios solo pueden incluir los dígitos <code>0</code> y <code>1</code>.</li>\n</ul>\n<p>Aquí tienes algunos ejemplos de literales numéricos:</p>\n<pre class=\"notranslate\">0, 117, -345, 123456789123456789n             (decimal, base 10)\n015, 0001, -0o77, 0o777777777777n             (octal, base 8)\n0x1123, 0x00111, -0xF1A7, 0x123456789ABCDEFn  (hexadecimal, \"hex\" o base 16)\n0b11, 0b0011, -0b11, 0b11101001010101010101n  (binario, base 2)\n</pre>\n<p>Para obtener más información, consulta <a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>Literales numéricos en la referencia gramatical léxica</code></a>.</p>"}},{"type":"prose","value":{"id":"literales_de_coma_flotante","title":"Literales de coma flotante","isH3":true,"content":"<p>Un literal de coma flotante puede tener las siguientes partes:</p>\n<ul>\n  <li>Un entero decimal que puede tener un signo (precedido por \"<code>+</code>\" o \"<code>-</code>\"),</li>\n  <li>Un punto decimal (\"<code>.</code>\"),</li>\n  <li>Una fracción (otro número decimal),</li>\n  <li>Un exponente.</li>\n</ul>\n<p>La parte del exponente es una \"<code>e</code>\" o \"<code>E</code>\" seguida de un número entero, que puede tener signo (precedido por \"<code>+</code>\" o \"<code>-</code>\"). Un literal de coma flotante debe tener al menos un dígito y un punto decimal o \"<code>e</code>\" (o \"<code>E</code>\").</p>\n<p>Específicamente, la sintaxis es:</p>\n<pre class=\"notranslate\">[(+|-)][dígitos].[dígitos][(E|e)[(+|-)]dígitos]\n</pre>\n<p>Por ejemplo:</p>\n<pre class=\"notranslate\">3.1415926\n-.123456789\n-3.1E+12\n.1e-23\n</pre>"}},{"type":"prose","value":{"id":"objetos_literales","title":"Objetos literales","isH3":true,"content":"<p>Un objeto literal es una lista de cero o más pares de nombres de propiedad y valores asociados de un objeto, entre llaves (<code>{}</code>).</p>\n<div class=\"notecard warning\" id=\"sect8\">\n  <p><strong>Advertencia:</strong> <strong>¡No uses un objeto literal al comienzo de una declaración!</strong> Esto dará lugar a un error (o no se comportará como esperabas), porque la <code>{</code> se interpretará como el comienzo de un bloque.</p>\n</div>\n<p>El siguiente es un ejemplo de un objeto literal. El primer elemento del objeto <code>car</code> define una propiedad, <code>myCar</code>, y le asigna una nueva cadena, \"<code>Saturn</code>\"; al segundo elemento, la propiedad <code>getCar</code>, se le asigna inmediatamente el resultado de invocar a la función <code>(carTypes(\"Honda\"));</code> el tercer elemento, la propiedad <code>special</code>, utiliza una variable (<code>sales</code>) existente.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> sales <span class=\"token operator\">=</span> <span class=\"token string\">'Toyota'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">carTypes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'Honda'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Lo sentimos, no vendemos \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">myCar</span><span class=\"token operator\">:</span> <span class=\"token string\">'Saturn'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">getCar</span><span class=\"token operator\">:</span> <span class=\"token function\">carTypes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Honda'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">special</span><span class=\"token operator\">:</span> sales <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>myCar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Saturn</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>getCar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Honda</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>special<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Toyota</span>\n</code></pre></div>\n<p>Además, puedes utilizar un literal numérico o de cadena para el nombre de una propiedad o anidar un objeto dentro de otro. El siguiente ejemplo usa estas opciones.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">manyCars</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">'Saab'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token string\">'Jeep'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span> <span class=\"token string\">'Mazda'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>manyCars<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Jeep</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Mazda</span>\n</code></pre></div>\n<p>Los nombres de propiedad de los objetos pueden ser cualquier cadena, incluida la cadena vacía. Si el nombre de la propiedad no fuera un <a href=\"/es/docs/Glossary/Identifier\">identificador</a> o un número JavaScript válido, debe ir entre comillas.</p>\n<p>No se puede acceder a los nombres de propiedad que no sean identificadores válidos como un punto (<code>.</code>), propiedad, pero <em>se pueden</em> acceder y configurar con la notación tipo arreglo (\"<code>[]</code>\").</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> unusualPropertyNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">''</span><span class=\"token operator\">:</span> <span class=\"token string\">'Una cadena vacía'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'!'</span><span class=\"token operator\">:</span> <span class=\"token string\">'¡Bang!'</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inusualPropertyNames<span class=\"token punctuation\">.</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// SyntaxError: Cadena inesperada</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inusualPropertyNames<span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Una cadena vacía</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>unusualPropertyNames<span class=\"token punctuation\">.</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// SyntaxError: símbolo inesperado !</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>unusualPropertyNames<span class=\"token punctuation\">[</span><span class=\"token string\">'!'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ¡Bang!</span>\n</code></pre></div>\n<h4 id=\"objetos_literales_mejorados\">Objetos literales mejorados</h4>\n<p>En ES2015, los objeto literales se amplían para admitir la configuración del prototipo en la construcción, la abreviatura para asignaciones <code>foo: foo</code>, la definición de métodos, la realización de llamadas a <code>super</code> y el cálculo de nombres de propiedades con expresiones.</p>\n<p>Juntos, estos también acercan los objetos literales y las declaraciones de clase, y permiten que el diseño basado en objetos se beneficie de algunas de las mismas conveniencias.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// __proto__</span>\n    <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> theProtoObj<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Abreviatura de \"handler: handler\"</span>\n    handler<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Métodos</span>\n    <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// Llamadas a super</span>\n     <span class=\"token keyword\">return</span> <span class=\"token string\">'d '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Nombres de propiedad calculados (dinámicos)</span>\n    <span class=\"token punctuation\">[</span> <span class=\"token string\">'prop_'</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"expresiones_regulares_«regexp»_literales","title":"Expresiones regulares («RegExp») literales","isH3":true,"content":"<p>Un expresión regular literal (que se define en detalle <a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>más adelante</code></a>) es un patrón incluido entre barras. El siguiente es un ejemplo de una expresión regular literal.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">ab+c</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"cadenas_literales","title":"Cadenas literales","isH3":true,"content":"<p>Una cadena literal consta de cero o más caracteres encerrados entre comillas dobles (<code>\"</code>) o simples (<code>'</code>). Una cadena debe estar delimitada por comillas del mismo tipo (es decir, ambas comillas simples o, ambas comillas dobles).</p>\n<p>Los siguientes son ejemplos de cadenas literales:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">'foo'</span>\n<span class=\"token string\">\"bar\"</span>\n<span class=\"token string\">'1234'</span>\n<span class=\"token string\">\"una linea \\n otra linea\"</span>\n<span class=\"token string\">\"John's cat\"</span>\n</code></pre></div>\n<p>Puedes llamar a cualquiera de los métodos del objeto <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> en un valor de cadena literal. JavaScript automáticamente convierte la cadena literal en un objeto <code>String</code> temporal, llama al método y luego descarta el objeto <code>String</code> temporal. También puedes usar la propiedad <code>String.length</code> con una cadena literal:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Imprimirá el número de símbolos en la cadena, incluidos los espacios en blanco.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John's cat\"</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// En este caso, 10.</span>\n</code></pre></div>\n<p>En ES2015, también están disponibles las <em>plantillas literales</em>. Las plantillas literales están encerradas por la comilla invertida (<code>`</code>) (<a title=\"Acento_grave\" href=\"https://es.wikipedia.org/wiki/Acento_grave\" class=\"external\" rel=\" noopener\">Acento_grave</a>) en lugar de comillas simples o dobles.</p>\n<p>Las cadenas de las plantillas literales proporcionan azúcar sintáctica para construir cadenas. (Esto es similar a las funciones de interpolación de cadenas en Perl, Python y más).</p>\n<p>Opcionalmente, puedes agregar una etiqueta para permitirte personalizar la construcción de la cadena, evitando ataques de inyección o construyendo estructuras de datos de nivel superior a partir del contenido de la cadena.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Creación de cadenas literales básicas</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">en JavaScript '\\n' es un avance de línea.</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token comment\">// Cadenas multilínea</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">En JavaScript, las cadenas de plantilla pueden ocupar\n varias líneas, pero las cadenas entrecomillas dobles o\n simples no pueden.</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token comment\">// Interpolación de cadenas</span>\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> time <span class=\"token operator\">=</span> <span class=\"token string\">'today'</span><span class=\"token punctuation\">;</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hola </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, ¿cómo estás </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>time<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">?</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token comment\">// Construye un prefijo de petición HTTP utilizado para interpretar los reemplazos y la construcción</span>\n<span class=\"token constant\">POST</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://foo.org/bar?a=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;b=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n     Content-Type: application/json\n     X-Credentials: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>credentials<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n     { \"foo\": </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>foo<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,\n       \"bar\": </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>bar<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">}</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">(</span>myOnReadyStateChangeHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Debes usar cadenas literales a menos que específicamente necesites usar un objeto <code>String</code>. Consulta <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> para obtener detalles sobre los objetos <code>String</code>.</p>\n<h4 id=\"uso_de_caracteres_especiales_en_cadenas\">Uso de caracteres especiales en cadenas</h4>\n<p>Adicionalmente a los caracteres normales, también puedes incluir caracteres especiales en las cadenas, como muestra el siguiente ejemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"una linea \\n otra linea\"</span>\n</code></pre></div>\n<p>La siguiente tabla enumera los caracteres especiales que se pueden usar en una cadena JavaScript.</p>\n<table>\n  <thead>\n    <tr>\n      <th>Caracter</th>\n      <th>Significado</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>\\0</code></td>\n      <td>Byte nulo</td>\n    </tr>\n    <tr>\n      <td><code>\\b</code></td>\n      <td>Retroceso</td>\n    </tr>\n    <tr>\n      <td><code>\\f</code></td>\n      <td>Avance de Página</td>\n    </tr>\n    <tr>\n      <td><code>\\n</code></td>\n      <td>Nueva Línea</td>\n    </tr>\n    <tr>\n      <td><code>\\r</code></td>\n      <td>Retorno de carro</td>\n    </tr>\n    <tr>\n      <td><code>\\t</code></td>\n      <td>Tabulación</td>\n    </tr>\n    <tr>\n      <td><code>\\v</code></td>\n      <td>Tabulación vertical</td>\n    </tr>\n    <tr>\n      <td><code>\\'</code></td>\n      <td>Apóstrofo o comilla simple</td>\n    </tr>\n    <tr>\n      <td><code>\\\"</code></td>\n      <td>Comilla doble</td>\n    </tr>\n    <tr>\n      <td><code>\\\\</code></td>\n      <td>Caracter de barra invertida</td>\n    </tr>\n    <tr>\n      <td><code>\\XXX</code></td>\n      <td>El caracter con la codificación Latin-1 especificada por hasta tres dígitos octales <em>XXX</em> entre <code>0</code> y <code>377</code>. Por ejemplo, <code>\\251</code> es la secuencia octal del símbolo de copyright.</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>\\xXX</code></td>\n      <td>El caracter con la codificación Latin-1 especificada por los dos dígitos hexadecimales <em>XX</em> entre <code>00</code> y <code>FF</code>. Por ejemplo, <code>\\xA9</code> es la secuencia hexadecimal del símbolo de copyright.</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>\\uXXXX</code></td>\n      <td>El caracter Unicode especificado por los cuatro dígitos hexadecimales <em>XXXX</em>. Por ejemplo, <code>\\u00A9</code> es la secuencia Unicode para el símbolo de copyright. Consulta <a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>Secuencias de escape Unicode</code></a>.</td>\n    </tr>\n    <tr>\n      <td><code>\\u{XXXXX}</code></td>\n      <td>El punto de código escape Unicode. Por ejemplo, <code>\\u{2F804}</code> es el mismo que el escape Unicode simple <code>\\uD87E\\uDC04</code>.</td>\n    </tr>\n  </tbody>\n</table>\n<h4 id=\"escapar_caracteres\">Escapar caracteres</h4>\n<p>Para caracteres no enumerados en la tabla, la precedencia de la barra inversa es ignorada, pero su uso esta desaconsejado y se debe evitar.</p>\n<p>Puedes insertar comillas dobles dentro de una cadena anteponiendo un caracter de barra inversa. Esto se conoce como <em>escapar</em> las comillas. Por ejemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> quote <span class=\"token operator\">=</span> <span class=\"token string\">\"Él leyó \\\"La cremación de Sam McGee\\\" de R.W. Service.\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>quote<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>El resultado de esto sería:</p>\n<pre class=\"notranslate\">El leyó \"La cremación de Sam McGee\" de R.W. Service.\n</pre>\n<p>Para incluir una barra invertida literal dentro de una cadena, debes escapar el caracter de barra invertida. Por ejemplo, para asignar la ruta del archivo <code>c:\\temp</code> a una cadena, usa lo siguiente:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> home <span class=\"token operator\">=</span> <span class=\"token string\">'c:\\\\temp'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>También puedes escapar los saltos de línea precediéndolos con una barra invertida. La barra invertida y el salto de línea se eliminan del valor de la cadena.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'esta cadena \\\nse divide \\\nen múltiples \\\nlíneas.'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// esta cadena se divide en múltiples líneas.</span>\n</code></pre></div>\n<p>Aunque JavaScript no tiene sintaxis \"«heredoc»\" se puede acercar insertando una barra inversa y un salto de linea al final de cada linea:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> poem <span class=\"token operator\">=</span>\n<span class=\"token string\">'Las rosas son rojas,\\n\\\nLas violetas son azules.\\n\\\nEl azúcar es dulce,\\n\\\ny foo también.'</span>\n</code></pre></div>\n<p>ECMAScript 2015 introduce un nuevo tipo de literal, a saber, <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Template_literals\"><code>plantillas literales</code> <small>(en-US)</small></a>. Esto permite muchas nuevas funciones, ¡incluidas cadenas multilínea!</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> poem <span class=\"token operator\">=</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Las rosas son rojas,\nLas violetas son azules.\nEl azúcar es dulce,\ny foo también.</span><span class=\"token template-punctuation string\">`</span></span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"mas_información","title":"Mas información","isH3":false,"content":"<p>Este capítulo se enfoca en la sintaxis básica para los tipos y las declaraciones. Para aprender mas acerca de las construcciones en el lenguaje JavaScript, ve también los siguientes capítulos en esta guía:</p>\n<ul>\n  <li><a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>Control de flujo y manejo de errores</code></a></li>\n  <li><a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>Bucles e iteración</code></a></li>\n  <li><a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>Funciones</code></a></li>\n  <li><a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>Expresiones y operadores</code></a></li>\n</ul>\n<p>En el próximo capítulo, veremos las construcciones de control de flujo y el manejo de errores.</p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/es/docs/Web/JavaScript/Guide/Introduction\">« Anterior</a></li>\n    <li><a class=\"button minimal\" href=\"/es/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Siguiente  »</a></li>\n</ul>"}}],"toc":[{"text":"Conceptos básicos","id":"conceptos_básicos"},{"text":"Comentarios","id":"comentarios"},{"text":"Declaraciones","id":"declaraciones"},{"text":"Estructuras y tipos de datos","id":"estructuras_y_tipos_de_datos"},{"text":"Literales","id":"literales"},{"text":"Mas información","id":"mas_información"}],"summary":"Este capítulo analiza la gramática básica de JavaScript, la declaración de variables, los tipos de datos y literales.","popularity":0.0043,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Grammar and types","locale":"en-US","native":"English (US)"},{"title":"Types et grammaire","locale":"fr","native":"Français"},{"title":"文法とデータ型","locale":"ja","native":"日本語"},{"title":"문법과 자료형","locale":"ko","native":"한국어"},{"title":"Sintaxe e tipos","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Грамматика и типы","locale":"ru","native":"Русский"},{"title":"语法和数据类型","locale":"zh-CN","native":"中文 (简体)"},{"title":"語法與型別","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"es/web/javascript/guide/grammar_and_types","github_url":"https://github.com/mdn/translated-content/blob/main/files/es/web/javascript/guide/grammar_and_types/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/es/docs/Web","title":"Tecnología para desarrolladores web"},{"uri":"/es/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/es/docs/Web/JavaScript/Guide","title":"Guía de JavaScript"},{"uri":"/es/docs/Web/JavaScript/Guide/Grammar_and_types","title":"Gramática y Tipos"}],"pageTitle":"Gramática y Tipos - JavaScript | MDN","noIndexing":false}}