{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Expresiones y operadores","mdn_url":"/es/docs/Web/JavaScript/Guide/Expressions_and_Operators","locale":"es","native":"Espa√±ol","sidebarHTML":"\n <ol>\n  <li><a href=\"/es/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/es/docs/Web/JavaScript/Tutorials\"><strong>Tutorials:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Complete beginners</summary>\n      <ol>\n        <li><a href=\"/es/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript basics</a></li>\n        <li><a href=\"/es/docs/Learn/JavaScript/First_steps\">JavaScript first steps</a></li>\n        <li><a href=\"/es/docs/Learn/JavaScript/Building_blocks\">JavaScript building blocks</a></li>\n        <li><a href=\"/es/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>JavaScript Guide</summary>\n      <ol>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Introduction\">Introduction</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Grammar_and_Types\">Grammar and types</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Control flow and error handling</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Loops_and_iteration\">Loops and iteration</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Functions\">Functions</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressions and operators</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Numbers_and_dates\">Numbers and dates</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Text_formatting\">Text formatting</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Regular_Expressions\">Regular expressions</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Indexed_collections\">Indexed collections</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Keyed_collections\">Keyed collections</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Working_with_Objects\">Working with objects</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Details of the object model</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Iterators_and_generators\">Iterators and generators</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Meta_programming\">Meta programming</a></li>\n          <li><a href=\"/es/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Intermediate</summary>\n      <ol>\n        <li><a href=\"/es/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/es/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">A re-introduction to JavaScript</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Equality comparisons and sameness</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Closures\">Closures</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Advanced</summary>\n      <ol>\n        <li><a href=\"/es/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Inheritance and the prototype chain</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Typed_arrays\">JavaScript typed arrays</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Memory_Management\">Memory Management</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/EventLoop\">Concurrency model and Event Loop</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/es/docs/Web/JavaScript/Reference\">References:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Built-in objects</summary>\n        <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Expressions &amp; operators</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Statements &amp; declarations</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/es/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Functions</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/es/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Misc</summary>\n      <ol>\n        <li><a href=\"/es/docs/Web/JavaScript/JavaScript_technologies_overview\">JavaScript technologies overview</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Lexical_grammar\">Lexical grammar</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Enumerability and ownership of properties</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Iteration_protocols\">Iteration protocols</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Transitioning to strict mode</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Template_literals\">Template literals</a></li>\n        <li><a href=\"/es/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Deprecated features</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/es/docs/Web/JavaScript/Guide/Functions\">¬´ Anterior</a></li>\n    <li><a class=\"button minimal\" href=\"/es/docs/Web/JavaScript/Guide/Numbers_and_dates\">Siguiente  ¬ª</a></li>\n</ul>\n<p>Este cap√≠tulo describe las expresiones y los operadores de JavaScript, incluyendo los de asignaci√≥n, comparaci√≥n, aritm√©ticos, bit a bit, l√≥gicos, ternarios, de cadena y otros.</p>\n<p>Tambi√©n se encuentra disponible una lista completa y detallada de operadores y expresiones en la <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>referencia</code></a>.</p>"}},{"type":"prose","value":{"id":"operadores","title":"Operadores","isH3":false,"content":"<p>JavaScript tiene los siguientes tipos de operadores. Esta secci√≥n describe los operadores y contiene informaci√≥n sobre la precedencia de los mismos.</p>\n<ul>\n  <li><a href=\"#asignacion\">Operadores de asignaci√≥n</a></li>\n  <li><a href=\"#comparacion\">Operadores de comparaci√≥n</a></li>\n  <li><a href=\"#aritmeticos\">Operadores aritm√©ticos</a></li>\n  <li><a href=\"#bit_a_bit\">Operadores bit a bit</a></li>\n  <li><a href=\"#logico\">Operadores l√≥gicos</a></li>\n  <li><a href=\"#cadena\">Operadores de cadena</a></li>\n  <li><a href=\"#condicional\">Operador condicional (ternario)</a></li>\n  <li><a href=\"#coma\">Operador coma</a></li>\n  <li><a href=\"#unario\">Operadores unarios</a></li>\n  <li><a href=\"#relational\">Operadores relacionales</a></li>\n</ul>\n<p>JavaScript tiene ambos operadores <em>binarios</em> y <em>unarios</em>, y un operador ternario especial, el operador condicional. Un operador binario requiere dos operandos, uno antes del operando y otro despu√©s del operador:</p>\n<pre class=\"notranslate\">operando1 operador operando2\n</pre>\n<p>Por ejemplo, <code>3+4</code> o <code>x*y</code>.</p>\n<p>Un operador unario requiere un solo operando, ya sea antes o despu√©s del operador:</p>\n<pre class=\"notranslate\">operador operando\n</pre>\n<p>o</p>\n<pre class=\"notranslate\">operando operador\n</pre>\n<p>Por ejemplo, <code>x++</code> o <code>++x</code>.</p>"}},{"type":"prose","value":{"id":"operadores_de_asignaci√≥n","title":"Operadores de asignaci√≥n","isH3":true,"content":"<p>Un operador de asignaci√≥n asigna un valor a su operando izquierdo bas√°ndose en el valor de su operando derecho. El operador de asignaci√≥n simple es igual (<code>=</code>), que asigna el valor de su operando derecho a su operando izquierdo. Es decir, <code>x = y</code> asigna el valor de <code>y</code> a <code>x</code>.</p>\n<p>Tambi√©n hay operadores de asignaci√≥n compuestos que son una abreviatura de las operaciones enumeradas en la siguiente tabla:</p>\n<table>\n  <thead>\n    <tr>\n      <th>Nombre</th>\n      <th>Operador abreviado</th>\n      <th>Significado</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Asignaci√≥n</code></a></td>\n      <td><code>x = y</code></td>\n      <td><code>x = y</code></td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Asignaci√≥n de adici√≥n</code></a></td>\n      <td><code>x += y</code></td>\n      <td><code>x = x + y</code></td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Asignaci√≥n de resta</code></a></td>\n      <td><code>x -= y</code></td>\n      <td><code>x = x - y</code></td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Asignaci√≥n de multiplicaci√≥n</code></a></td>\n      <td><code>x *= y</code></td>\n      <td><code>x = x * y</code></td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Asignaci√≥n de divisi√≥n</code></a></td>\n      <td><code>x /= y</code></td>\n      <td><code>x = x / y</code></td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Asignaci√≥n de residuo</code></a></td>\n      <td><code>x %= y</code></td>\n      <td><code>x = x % y</code></td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Asignaci√≥n de exponenciaci√≥n</code></a></td>\n      <td><code>x **= y</code></td>\n      <td><code>x = x ** y</code></td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Asignaci√≥n de desplazamiento a la izquierda</code></a></td>\n      <td><code>x &lt;&lt;= y</code></td>\n      <td><code>x = x &lt;&lt; y</code></td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Asignaci√≥n de desplazamiento a la derecha</code></a></td>\n      <td><code>x &gt;&gt;= y</code></td>\n      <td><code>x = x &gt;&gt; y</code></td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Asignaci√≥n de desplazamiento a la derecha sin signo</code></a></td>\n      <td><code>x &gt;&gt;&gt;= y</code></td>\n      <td><code>x = x &gt;&gt;&gt; y</code></td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Asignaci√≥n AND bit a bit</code></a></td>\n      <td><code>x &amp;= y</code></td>\n      <td><code>x = x &amp; y</code></td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Asignaci√≥n XOR bit a bit</code></a></td>\n      <td><code>x ^= y</code></td>\n      <td><code>x = x ^ y</code></td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Asignaci√≥n OR bit a bit</code></a></td>\n      <td><code>x |= y</code></td>\n      <td><code>x = x | y</code></td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Asignaci√≥n AND l√≥gico</code></a></td>\n      <td><code>x &amp;&amp;= y</code></td>\n      <td><code>x &amp;&amp; (x = y)</code></td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Asignaci√≥n OR l√≥gico</code></a></td>\n      <td><code>x ||= y</code></td>\n      <td><code>x || (x = y)</code></td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Asignaci√≥n de anulaci√≥n l√≥gica</code></a></td>\n      <td><code>x ??= y</code></td>\n      <td><code>x ?? (x = y)</code></td>\n    </tr>\n  </tbody>\n</table>\n<h4 id=\"valor_de_retorno_y_encadenamiento\">Valor de retorno y encadenamiento</h4>\n<p>Como la mayor√≠a de las expresiones, asignaciones como <code>x = y</code> tienen un valor de retorno. Se puede recuperar p. ej. asignando la expresi√≥n o registr√°ndola:</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>const z <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // O de forma equivalente: const z <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n\nconsole.log<span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // Registra el valor de retorno de la asignaci√≥n x <span class=\"token operator\">=</span> y.\nconsole.log<span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // O registra el valor de retorno directamente.\n</code></pre></div>\n<p>El valor de retorno coincide con la expresi√≥n a la derecha del signo <code>=</code> en la columna \"Significado\" de la tabla anterior. Eso significa que <code>(x = y)</code> devuelve <code>y</code>, <code>(x += y)</code> devuelve la suma resultante <code>x + y</code>, <code>(x **= y)</code> devuelve la potencia resultante <code>x ** y</code>, y as√≠ sucesivamente.</p>\n<p>En el caso de asignaciones l√≥gicas, <code>(x &amp;&amp;= y)</code>, <code>(x || = y)</code> y <code>(x ??= y)</code>, el valor de retorno es el de la operaci√≥n l√≥gica sin la asignaci√≥n, entonces <code>x &amp;&amp; y</code>, <code>x || y</code> y <code>x ?? y</code>, respectivamente.</p>\n<p>Ten en cuenta que los valores de retorno siempre se basan en los valores de los operandos <em>antes</em> de la operaci√≥n.</p>\n<p>Al encadenar estas expresiones, cada asignaci√≥n se eval√∫a de <strong>derecha a izquierda</strong>. Considera estos ejemplos:</p>\n<ul>\n  <li><code>w = z = x = y</code> es equivalente a <code>w = (z = (x = y))</code> o <code>x = y; z = y; w = y</code></li>\n  <li><code>z += x *= y</code> es equivalente e <code>z += (x *= y)</code> o <code>tmp = x * y; x *= y; z += tmp</code> (salvo que sin <code>tmp</code>).</li>\n</ul>\n<h4 id=\"desestructuraci√≥n\">Desestructuraci√≥n</h4>\n<p>Para asignaciones m√°s complejas, la sintaxis de <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>asignaci√≥n de desestructuraci√≥n</code></a> es una expresi√≥n de JavaScript que hace posible extraer datos de arreglos u objetos usando una sintaxis que refleja la construcci√≥n de arreglos y objetos literales.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// sin desestructurar</span>\n<span class=\"token keyword\">var</span> one   <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> two   <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> three <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// con desestructuraci√≥n</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span>one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">,</span> three<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"operadores_de_comparaci√≥n","title":"Operadores de comparaci√≥n","isH3":true,"content":"<p>Un operador de comparaci√≥n compara sus operandos y devuelve un valor l√≥gico en funci√≥n de si la comparaci√≥n es verdadera (<code>true</code>) o falsa (<code>false</code>). Los operandos pueden ser valores num√©ricos, de cadena, l√≥gicos u objetos. Las cadenas se comparan seg√∫n el orden lexicogr√°fico est√°ndar, utilizando valores Unicode. En la mayor√≠a de los casos, si los dos operandos no son del mismo tipo, JavaScript intenta convertirlos a un tipo apropiado para la comparaci√≥n. Este comportamiento generalmente resulta en comparar los operandos num√©ricamente. Las √∫nicas excepciones a la conversi√≥n de tipos dentro de las comparaciones involucran a los operadores <code>===</code> y <code>!==</code>, que realizan comparaciones estrictas de igualdad y desigualdad. Estos operadores no intentan convertir los operandos a tipos compatibles antes de verificar la igualdad. La siguiente tabla describe los operadores de comparaci√≥n en t√©rminos de este c√≥digo de ejemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> var1 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> var2 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<table>\n  <thead>\n    <tr>\n      <th>Operador</th>\n      <th>Descripci√≥n</th>\n      <th>Ejemplos que devuelven <code>true</code></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Igual</code></a> (<code>==</code>)</td>\n      <td>Devuelve <code>true</code> si los operandos son iguales.</td>\n      <td><code>3 == var1</code><br><code>\"3\" == var1</code><br><code>3 == '3'</code></td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>No es igual</code></a> (<code>!=</code>)</td>\n      <td>Devuelve <code>true</code> si los operandos <em>no</em> son iguales.</td>\n      <td><code>var1 != 4</code><br><code>var2 != \"3\"</code></td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Estrictamente igual</code></a> (<code>===</code>)</td>\n      <td>Devuelve <code>true</code> si los operandos son iguales y del mismo tipo. Consulta tambi√©n <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is</code></a> y <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>similitud en JS</code></a>.</td>\n      <td><code>3 === var1</code></td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Desigualdad estricta</code></a> (<code>!==</code>)</td>\n      <td>Devuelve <code>true</code> si los operandos son del mismo tipo pero no iguales, o son de diferente tipo.</td>\n      <td><code>var1 !== \"3\"</code><br><code>3 !== '3'</code></td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Mayor que</code></a> (<code>&gt;</code>)</td>\n      <td>Devuelve <code>true</code> si el operando izquierdo es mayor que el operando derecho.</td>\n      <td><code>var2 &gt; var1 \"12\" &gt; 2</code></td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Mayor o igual que</code></a> (<code>&gt;=</code>)</td>\n      <td>Devuelve <code>true</code> si el operando izquierdo es mayor o igual que el operando derecho.</td>\n      <td><code>var2 &gt;= var1 var1 &gt;= 3</code></td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Menor que</code></a> (<code>&lt;</code>)</td>\n      <td>Devuelve <code>true</code> si el operando izquierdo es menor que el operando derecho.</td>\n      <td><code>var1 &lt; var2</code><br><code>\"2\" &lt; 12</code></td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Menor o igual</code></a> (<code>&lt;=</code>)</td>\n      <td>Devuelve <code>true</code> si el operando izquierdo es menor o igual que el operando derecho.</td>\n      <td><code>var1 &lt;= var2 var2 &lt;= 5</code></td>\n    </tr>\n  </tbody>\n</table>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Nota:</strong> <strong>Nota</strong>: (<strong>=&gt;</strong>) no es un operador, sino la notaci√≥n para <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Funciones flecha</code></a>.</p>\n</div>"}},{"type":"prose","value":{"id":"operadores_aritm√©ticos","title":"Operadores aritm√©ticos","isH3":true,"content":"<p>Un operador aritm√©tico toma valores num√©ricos (ya sean literales o variables) como sus operandos y devuelve un solo valor num√©rico. Los operadores aritm√©ticos est√°ndar son suma (<code>+</code>), resta (<code>-</code>), multiplicaci√≥n (<code>*</code>) y divisi√≥n (<code>/</code>). Estos operadores funcionan como lo hacen en la mayor√≠a de los otros lenguajes de programaci√≥n cuando se usan con n√∫meros de punto flotante (en particular, ten en cuenta que la divisi√≥n entre cero produce <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>). Por ejemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.5</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Esto es true</span>\n</code></pre></div>\n<p>Adem√°s de las operaciones aritm√©ticas est√°ndar (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>), JavaScript proporciona los operadores aritm√©ticos enumerados en la siguiente tabla:</p>\n<table>\n  <thead>\n    <tr>\n      <th>Operador</th>\n      <th>Descripci√≥n</th>\n      <th>Ejemplo</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Residuo</code></a> (<code>%</code>)</td>\n      <td>Operador binario. Devuelve el resto entero de dividir los dos operandos.</td>\n      <td>12 % 5 devuelve 2.</td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Incremento</code></a> (<code>++</code>)</td>\n      <td>Operador unario. Agrega uno a su operando. Si se usa como operador prefijo (<code>++x</code>), devuelve el valor de su operando despu√©s de agregar uno; si se usa como operador sufijo (<code>x++</code>), devuelve el valor de su operando antes de agregar uno.</td>\n      <td>Si <code>x</code> es 3, <code>++x</code> establece <code>x</code> en 4 y devuelve 4, mientras que <code>x++</code> devuelve 3 y , solo entonces, establece <code>x</code> en 4.</td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Decremento</code></a> (<code>--</code>)</td>\n      <td>Operador unario. Resta uno de su operando. El valor de retorno es an√°logo al del operador de incremento.</td>\n      <td>Si <code>x</code> es 3, entonces <code>--x</code> establece <code>x</code> en 2 y devuelve 2, mientras que <code>x--</code> devuelve 3 y, solo entonces, establece <code>x</code> en 2.</td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Negaci√≥n unaria</code></a> (<code>-</code>)</td>\n      <td>Operador unario. Devuelve la negaci√≥n de su operando.</td>\n      <td>Si <code>x</code> es 3, entonces <code>-x</code> devuelve -3.</td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Positivo unario</code></a> (<code>+</code>)</td>\n      <td>Operador unario. Intenta convertir el operando en un n√∫mero, si a√∫n no lo es.</td>\n      <td><code>+\"3\"</code> devuelve <code>3</code>. <code>+true</code> devuelve <code>1.</code></td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Operador de exponenciaci√≥n</code></a> (<code>**</code>)</td>\n      <td>Calcula la <code>base</code> a la potencia de <code>exponente</code>, es decir, <code>baseexponente</code></td>\n      <td><code>2 ** 3</code> returns <code>8</code>. <code>10 ** -1</code> returns <code>0.1</code>.</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"operadores_bit_a_bit","title":"Operadores bit a bit","isH3":true,"content":"<p>Un operador bit a bit trata a sus operandos como un conjunto de 32 bits (ceros y unos), en lugar de n√∫meros decimales, hexadecimales u octales. Por ejemplo, el n√∫mero decimal nueve tiene una representaci√≥n binaria de 1001. Los operadores bit a bit realizan sus operaciones en tales representaciones binarias, pero devuelven valores num√©ricos est√°ndar de JavaScript.</p>\n<p>La siguiente tabla resume los operadores bit a bit de JavaScript.</p>\n<table>\n  <thead>\n    <tr>\n      <th>Operador</th>\n      <th>Uso</th>\n      <th>Descripci√≥n</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>AND a nivel de bits</code></a></td>\n      <td><code>a &amp; b</code></td>\n      <td>Devuelve un uno en cada posici√≥n del bit para los que los bits correspondientes de ambos operandos son unos.</td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>OR a nivel de bits</code></a></td>\n      <td><code>a | b</code></td>\n      <td>Devuelve un cero en cada posici√≥n de bit para el cual los bits correspondientes de ambos operandos son ceros.</td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>XOR a nivel de bits</code></a></td>\n      <td><code>a ^ b</code></td>\n      <td>Devuelve un cero en cada posici√≥n de bit para la que los bits correspondientes son iguales. [Devuelve uno en cada posici√≥n de bit para la que los bits correspondientes son diferentes].</td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>NOT a nivel de bits</code></a></td>\n      <td><code>~ a</code></td>\n      <td>Invierte los bits de su operando.</td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Desplazamiento a la izquierda</code></a></td>\n      <td><code>a &lt;&lt; b</code></td>\n      <td>Desplaza <code>a</code> en representaci√≥n binaria <code>b</code> bits hacia la izquierda, desplaz√°ndose en ceros desde la derecha.</td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Desplazamiento a la derecha de propagaci√≥n de signo</code></a></td>\n      <td><code>a &gt;&gt; b</code></td>\n      <td>Desplaza <code>a</code> en representaci√≥n binaria <code>b</code> bits a la derecha, descartando los bits desplazados.</td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Desplazamiento a la derecha de relleno cero</code></a></td>\n      <td><code>a &gt;&gt;&gt; b</code></td>\n      <td>Desplaza <code>a</code> en representaci√≥n binaria <code>b</code> bits hacia la derecha, descartando los bits desplazados y desplaz√°ndose en ceros desde la izquierda.</td>\n    </tr>\n  </tbody>\n</table>\n<h4 id=\"operadores_l√≥gicos_bit_a_bit\">Operadores l√≥gicos bit a bit</h4>\n<p>Conceptualmente, los operadores l√≥gicos bit a bit funcionan de la siguiente manera:</p>\n<ul>\n  <li>Los operandos se convierten en enteros de treinta y dos bits y se expresan mediante una serie de bits (ceros y unos). A los n√∫meros con m√°s de 32 bits se les descartan los bits m√°s significativos. Por ejemplo, el siguiente n√∫mero entero con m√°s de 32 bits se convertir√° en un n√∫mero entero de 32 bits:\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>Antes:  <span class=\"token number\">1110</span>‚Äâ0110‚Äâ<span class=\"token number\">1111</span>‚Äâ<span class=\"token number\">1010</span>‚Äâ0000‚Äâ0000‚Äâ0000‚Äâ0110‚Äâ0000‚Äâ0000‚Äâ0001\nDespu√©s:               <span class=\"token number\">1010</span>‚Äâ0000‚Äâ0000‚Äâ0000‚Äâ0110‚Äâ0000‚Äâ0000‚Äâ0001\n</code></pre></div>\n  </li>\n  <li>Cada bit en el primer operando se empareja con el bit correspondiente en el segundo operando: primer bit al primer bit, segundo bit al segundo bit, y as√≠ sucesivamente.</li>\n  <li>El operador se aplica a cada par de bits y el resultado se construye bit a bit.</li>\n</ul>\n<p>Por ejemplo, la representaci√≥n binaria de nueve es 1001 y la representaci√≥n binaria de quince es 1111. Entonces, cuando los operadores bit a bit se aplican a estos valores, los resultados son los siguientes:</p>\n<table>\n  <thead>\n    <tr>\n      <th>Expresi√≥n</th>\n      <th>Resultado</th>\n      <th>Descripci√≥n binaria</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>15 &amp; 9</code></td>\n      <td><code>9</code></td>\n      <td><code>1111 &amp; 1001 = 1001</code></td>\n    </tr>\n    <tr>\n      <td><code>15 | 9</code></td>\n      <td><code>15</code></td>\n      <td><code>1111 | 1001 = 1111</code></td>\n    </tr>\n    <tr>\n      <td><code>15 ^ 9</code></td>\n      <td><code>6</code></td>\n      <td><code>1111 ^ 1001 = 0110</code></td>\n    </tr>\n    <tr>\n      <td><code>~15</code></td>\n      <td><code>-16</code></td>\n      <td><code>~ 0000 0000 ... 0000 1111 = 1111 1111 ... 1111 0000</code></td>\n    </tr>\n    <tr>\n      <td><code>~9</code></td>\n      <td><code>-10</code></td>\n      <td><code>~ 0000 0000 ... 0000 1001 = 1111 1111 ... 1111 0110</code></td>\n    </tr>\n  </tbody>\n</table>\n<p>Ten en cuenta que los 32 bits se invierten utilizando el operador <code>NOT</code> a nivel de bits y que los valores con el bit m√°s significativo (m√°s a la izquierda) establecido en 1 representan n√∫meros negativos (representaci√≥n en complemento a dos). <code>~x</code> eval√∫a al mismo valor que eval√∫a <code>-x - 1</code>.</p>\n<h4 id=\"operadores_de_desplazamiento_de_bits\">Operadores de desplazamiento de bits</h4>\n<p>Los operadores de desplazamiento bit a bit toman dos operandos: el primero es una cantidad que se va a desplazar y el segundo especifica el n√∫mero de posiciones de bit por las que se va a desplazar el primer operando. La direcci√≥n de la operaci√≥n de desplazamiento es controlada por el operador utilizado.</p>\n<p>Los operadores de desplazamiento convierten sus operandos en enteros de treinta y dos bits y devuelven un resultado del mismo tipo que el operando izquierdo.</p>\n<p>Los operadores de desplazamiento se enumeran en la siguiente tabla.</p>\n<table>\n  <thead>\n    <tr>\n      <th>Operador</th>\n      <th>Descripci√≥n</th>\n      <th>Ejemplo</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Desplazamiento a la izquierda</code></a> (<code>&lt;&lt;</code>)</td>\n      <td>Este operador desplaza el primer operando el n√∫mero especificado de bits a la izquierda. Los bits desplazados en exceso hacia la izquierda se descartan. Los bits cero se desplazan desde la derecha.</td>\n      <td><code>9&lt;&lt;2</code> produce 36, porque 1001 desplazado 2 bits a la izquierda se convierte en 100100, que es 36.</td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Desplazamiento a la derecha de propagaci√≥n de signo</code></a> (<code>&gt;&gt;</code>)</td>\n      <td>Este operador desplaza el primer operando el n√∫mero especificado de bits a la derecha. Los bits desplazados en exceso hacia la derecha se descartan. Las copias del bit m√°s a la izquierda se desplazan desde la izquierda.</td>\n      <td><code>9&gt;&gt;2</code> produce 2, porque 1001 desplazado 2 bits a la derecha se convierte en 10, que es 2. Del mismo modo, <code>-9&gt;&gt;2</code> produce -3, porque el signo se conserva.</td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Desplazamiento a la derecha de relleno cero</code></a> (<code>&gt;&gt;&gt;</code>)</td>\n      <td>Este operador desplaza el primer operando el n√∫mero especificado de bits a la derecha. Los bits desplazados en exceso hacia la derecha se descartan. Los bits cero se desplazan desde la izquierda.</td>\n      <td><code>19&gt;&gt;&gt;2</code> produce 4, porque 10011 desplazado 2 bits a la derecha se convierte en 100, que es 4. Para n√∫meros no negativos, el desplazamiento a la derecha de relleno con ceros y el desplazamiento a la derecha de propagaci√≥n del signo producen el mismo resultado.</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"operadores_l√≥gicos","title":"Operadores l√≥gicos","isH3":true,"content":"<p>Los operadores l√≥gicos se utilizan normalmente con valores booleanos (l√≥gicos); cuando lo son, devuelven un valor booleano. Sin embargo, los operadores <code>&amp;&amp;</code> y <code>||</code> en realidad devuelven el valor de uno de los operandos especificados, por lo que si estos operadores se utilizan con valores no booleanos, pueden devolver un valor no booleano. Los operadores l√≥gicos se describen en la siguiente tabla.</p>\n<table>\n  <thead>\n    <tr>\n      <th>Operador</th>\n      <th>Uso</th>\n      <th>Descripci√≥n</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>AND L√≥gico</code></a> (<code>&amp;&amp;</code>)</td>\n      <td><code>expr1 &amp;&amp; expr2</code></td>\n      <td>Devuelve <code>expr1</code> si se puede convertir a <code>false</code>; de lo contrario, devuelve <code>expr2</code>. Por lo tanto, cuando se usa con valores booleanos, <code>&amp;&amp;</code> devuelve <code>true</code> si ambos operandos son <code>true</code>; de lo contrario, devuelve <code>false</code>.</td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>OR l√≥gico</code></a> (<code>||</code>)</td>\n      <td><code>expr1 || expr2</code></td>\n      <td>Devuelve <code>expr1</code> si se puede convertir a <code>true</code>; de lo contrario, devuelve <code>expr2</code>. Por lo tanto, cuando se usa con valores booleanos, <code>||</code> devuelve <code>true</code> si alguno de los operandos es <code>true</code>; si ambos son falsos, devuelve <code>false</code>.</td>\n    </tr>\n    <tr>\n      <td><a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>NOT l√≥gico</code></a> (<code>!</code>)</td>\n      <td><code>!expr</code></td>\n      <td>Devuelve <code>false</code> si su √∫nico operando se puede convertir a <code>true</code>; de lo contrario, devuelve <code>true</code>.</td>\n    </tr>\n  </tbody>\n</table>\n<p>Ejemplos de expresiones que se pueden convertir a <code>false</code> son aquellos que se eval√∫an como <code>null</code>, 0, <code>NaN</code>, la cadena vac√≠a (\"\") o <code>undefined</code>.</p>\n<p>El siguiente c√≥digo muestra ejemplos del operador <code>&amp;&amp;</code> (<code>AND</code> l√≥gico).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a1 <span class=\"token operator\">=</span>  <span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// t &amp;&amp; t devuelve true</span>\n<span class=\"token keyword\">var</span> a2 <span class=\"token operator\">=</span>  <span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t &amp;&amp; f devuelve false</span>\n<span class=\"token keyword\">var</span> a3 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// f &amp;&amp; t devuelve false</span>\n<span class=\"token keyword\">var</span> a4 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f &amp;&amp; f devuelve false</span>\n<span class=\"token keyword\">var</span> a5 <span class=\"token operator\">=</span> <span class=\"token string\">'Cat'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'Dog'</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t &amp;&amp; t devuelve Dog</span>\n<span class=\"token keyword\">var</span> a6 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// f &amp;&amp; t devuelve false</span>\n<span class=\"token keyword\">var</span> a7 <span class=\"token operator\">=</span> <span class=\"token string\">'Cat'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t &amp;&amp; f devuelve false</span>\n</code></pre></div>\n<p>El siguiente c√≥digo muestra ejemplos del operador || (<code>OR</code> l√≥gico).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> o1 <span class=\"token operator\">=</span>  <span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// t || t devuelve true</span>\n<span class=\"token keyword\">var</span> o2 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// f || t devuelve true</span>\n<span class=\"token keyword\">var</span> o3 <span class=\"token operator\">=</span>  <span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t || f devuelve true</span>\n<span class=\"token keyword\">var</span> o4 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f || f devuelve false</span>\n<span class=\"token keyword\">var</span> o5 <span class=\"token operator\">=</span> <span class=\"token string\">'Cat'</span> <span class=\"token operator\">||</span> <span class=\"token string\">'Dog'</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t || t devuelve Cat</span>\n<span class=\"token keyword\">var</span> o6 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// f || t devuelve Cat</span>\n<span class=\"token keyword\">var</span> o7 <span class=\"token operator\">=</span> <span class=\"token string\">'Cat'</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t || f devuelve Cat</span>\n</code></pre></div>\n<p>El siguiente c√≥digo muestra ejemplos de el operador ! (<code>NOT</code> l√≥gico).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> n1 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// !t devuelve false</span>\n<span class=\"token keyword\">var</span> n2 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// !f devuelve true</span>\n<span class=\"token keyword\">var</span> n3 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token string\">'Cat'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// !t devuelve false</span>\n</code></pre></div>\n<h4 id=\"evaluaci√≥n_de_cortocircuito\">Evaluaci√≥n de cortocircuito</h4>\n<p>Debido a que las expresiones l√≥gicas se eval√∫an de izquierda a derecha, se prueban para una posible evaluaci√≥n de \"cortocircuito\" utilizando las siguientes reglas:</p>\n<ul>\n  <li><code>false</code> &amp;&amp; <em>anything</em> se eval√∫a en cortocircuito como <code>false</code>.</li>\n  <li><code>true</code> || <em>anything</em> se eval√∫a en cortocircuito como <code>true</code>.</li>\n</ul>\n<p>Las reglas de la l√≥gica garantizan que estas evaluaciones sean siempre correctas. Ten en cuenta que la parte <em>anything</em> de las expresiones anteriores no se eval√∫a, por lo que los efectos secundarios de hacerlo no surten efecto.</p>\n<p>Ten en cuenta que para el segundo caso, en el c√≥digo moderno puedes usar el nuevo <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>operador de fusi√≥n nulo</code></a> (<code>??</code>) que funciona como <code>||</code>, pero solo devuelve la segunda expresi√≥n, cuando la primera es \"<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Nullish\">nullish <small>(en-US)</small></a>\", es decir, <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>null</code></a>, el valor nulo representa la ausencia intencional de cualquier valor de objeto. Es uno de los valores primitivos de JavaScript y se trata como falso para las operaciones booleanas. o <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>undefined</code></a> la propiedad global undefined representa el valor \"<code>undefined</code>\" primitivo. Es uno de los tipos primitivos de JavaScript. Por tanto, es la mejor alternativa para proporcionar valores predeterminados, cuando valores como <code>''</code> o <code>0</code> tambi√©n son valores v√°lidos para la primera expresi√≥n.</p>"}},{"type":"prose","value":{"id":"operadores_de_cadena","title":"Operadores de cadena","isH3":true,"content":"<p>Adem√°s de los operadores de comparaci√≥n, que se pueden usar en valores de cadena, el operador de concatenaci√≥n (+) concatena dos valores de cadena, devolviendo otra cadena que es la uni√≥n de los dos operandos de cadena.</p>\n<p>Por ejemplo,</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mi '</span> <span class=\"token operator\">+</span> <span class=\"token string\">'cadena'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// la consola registra la cadena \"mi cadena\".</span>\n</code></pre></div>\n<p>El operador de asignaci√≥n abreviada <code>+=</code> tambi√©n se puede utilizar para concatenar cadenas.</p>\n<p>Por ejemplo,</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> mystring <span class=\"token operator\">=</span> <span class=\"token string\">'alpha'</span><span class=\"token punctuation\">;</span>\nmystring <span class=\"token operator\">+=</span> <span class=\"token string\">'bet'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// se eval√∫a como \"alphabet\" y asigna este valor a mystring.</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"operador_condicional_ternario","title":"Operador condicional (ternario)","isH3":true,"content":"<p>El <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>operador condicional</code></a> es el √∫nico operador de JavaScript que toma tres operandos. El operador puede tener uno de dos valores seg√∫n una condici√≥n. La sintaxis es:</p>\n<pre class=\"notranslate\">condition ? val1 : val2\n</pre>\n<p>Si <code>condition</code> es <code>true</code>, el operador tiene el valor de <code>val1</code>. De lo contrario, tiene el valor de <code>val2</code>. Puedes utilizar el operador condicional en cualquier lugar donde normalmente utilizas un operador est√°ndar.</p>\n<p>Por ejemplo,</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> status <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>age <span class=\"token operator\">&gt;=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'adult'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'minor'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Esta declaraci√≥n asigna el valor \"<code>adult</code>\" a la variable <code>status</code> si <code>age</code> es de dieciocho a√±os o m√°s. De lo contrario, asigna el valor \"<code>minor</code>\" a <code>status</code>.</p>"}},{"type":"prose","value":{"id":"operador_coma","title":"Operador coma","isH3":true,"content":"<p>El <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>operador coma</code></a> (<code>,</code>) simplemente eval√∫a ambos operandos y devuelve el valor del √∫ltimo operando. Este operador se utiliza principalmente dentro de un bucle <code>for</code>, para permitir que se actualicen m√∫ltiples variables cada vez a trav√©s del bucle. Se considera de mal estilo usarlo en otros lugares, cuando no es necesario. A menudo, en su lugar pueden y se deben utilizar dos declaraciones independientes.</p>\n<p>Por ejemplo, si <code>a</code> es un arreglo bidimensional con 10 elementos en un lado, el siguiente c√≥digo usa el operador <code>coma</code> para actualizar dos variables a la vez. El c√≥digo imprime los valores de los elementos diagonales en el arreglo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//                                ^</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a['</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">']['</span> <span class=\"token operator\">+</span> j <span class=\"token operator\">+</span> <span class=\"token string\">']= '</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"operadores_unarios","title":"Operadores unarios","isH3":true,"content":"<p>Una operaci√≥n unaria es una operaci√≥n con un solo operando.</p>\n<h4 id=\"delete\"><code>delete</code></h4>\n<p>El operador <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>delete</code></a> elimina la propiedad de un objeto. La sintaxis es:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">delete</span> object<span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> object<span class=\"token punctuation\">[</span>propertyKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> objectName<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> property<span class=\"token punctuation\">;</span> <span class=\"token comment\">// legal solo dentro de una declaraci√≥n with</span>\n</code></pre></div>\n<p>donde <code>object</code> es el nombre de un objeto, <code>property</code> es una propiedad existente y <code>propertyKey</code> es una cadena o s√≠mbolo que hace referencia a una propiedad existente.</p>\n<p>La cuarta forma es legal solo dentro de una declaraci√≥n <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>with</code></a>, para eliminar una propiedad de un objeto, y tambi√©n para las propiedades del objeto global.</p>\n<p>Si el operador <code>delete</code> tiene √©xito, elimina la propiedad del objeto. Intentar acceder a √©l despu√©s dar√° como resultado <code>undefined</code>. El operador <code>delete</code> devuelve <code>true</code> si la operaci√≥n es posible; devuelve <code>false</code> si la operaci√≥n no es posible.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>x <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// impl√≠citamente crea window.x</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">43</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myobj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">h</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// crea un objeto con la propiedad h</span>\n\n<span class=\"token keyword\">delete</span> x<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// devuelve true (se puede eliminar si se crea impl√≠citamente)</span>\n<span class=\"token keyword\">delete</span> y<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// devuelve false (no se puede borrar si se declara con var)</span>\n<span class=\"token keyword\">delete</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// devuelve false (no se pueden eliminar propiedades no configurables)</span>\n<span class=\"token keyword\">delete</span> myobj<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">;</span> <span class=\"token comment\">// devuelve true (puede eliminar propiedades definidas por el usuario)</span>\n</code></pre></div>\n<h5 id=\"eliminar_elementos_de_un_arreglo\">Eliminar elementos de un arreglo</h5>\n<p>Dado que los arreglos solo son objetos, t√©cnicamente es posible <code>delete</code> elementos de ellos. Sin embargo, esto se considera una mala pr√°ctica, trata de evitarlo. Cuando eliminas una propiedad de arreglo, la longitud del arreglo no se ve afectada y otros elementos no se vuelven a indexar. Para lograr ese comportamiento, es mucho mejor simplemente sobrescribir el elemento con el valor <code>undefined</code>. Para manipular realmente el arreglo, usa los diversos m√©todos de arreglo, como <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>splice</code></a>.</p>\n<h4 id=\"typeof\"><code>typeof</code></h4>\n<p>El <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>operador typeof</code></a> se utiliza de cualquiera de las siguientes formas:</p>\n<pre class=\"notranslate\">typeof operand\ntypeof (operand)\n</pre>\n<p>El operador <code>typeof</code> devuelve una cadena que indica el tipo de operando no evaluado. <code>operando</code> es la cadena, variable, palabra clave u objeto para el que se devolver√° el tipo. Los par√©ntesis son opcionales.</p>\n<p>Sup√≥n que defines las siguientes variables:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myFun <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'5 + 2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> shape <span class=\"token operator\">=</span> <span class=\"token string\">'round'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> size <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Mango'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Orange'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> today <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>El operador <code>typeof</code> devuelve los siguientes resultados para estas variables:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> myFun<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// devuelve \"function\"</span>\n<span class=\"token keyword\">typeof</span> shape<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// devuelve \"string\"</span>\n<span class=\"token keyword\">typeof</span> size<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// devuelve \"number\"</span>\n<span class=\"token keyword\">typeof</span> foo<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// devuelve \"object\"</span>\n<span class=\"token keyword\">typeof</span> today<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// devuelve \"object\"</span>\n<span class=\"token keyword\">typeof</span> doesntExist<span class=\"token punctuation\">;</span> <span class=\"token comment\">// devuelve \"undefined\"</span>\n</code></pre></div>\n<p>Para las palabras clave <code>true</code> y <code>null</code>, el operador <code>typeof</code> devuelve los siguientes resultados:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// devuelve \"boolean\"</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// devuelve \"object\"</span>\n</code></pre></div>\n<p>Para un n√∫mero o cadena, el operador <code>typeof</code> devuelve los siguientes resultados:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> <span class=\"token number\">62</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// devuelve \"number\"</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token string\">'Hola mundo'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// devuelve \"string\"</span>\n</code></pre></div>\n<p>Para los valores de propiedad, el operador <code>typeof</code> devuelve el tipo de valor que contiene la propiedad:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> document<span class=\"token punctuation\">.</span>lastModified<span class=\"token punctuation\">;</span> <span class=\"token comment\">// devuelve \"string\"</span>\n<span class=\"token keyword\">typeof</span> window<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// devuelve \"number\"</span>\n<span class=\"token keyword\">typeof</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">LN2</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// devuelve \"number\"</span>\n</code></pre></div>\n<p>Para m√©todos y funciones, el operador <code>typeof</code> devuelve los siguientes resultados:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> blur<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// devuelve \"function\"</span>\n<span class=\"token keyword\">typeof</span> eval<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// devuelve \"function\"</span>\n<span class=\"token keyword\">typeof</span> parseInt<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// devuelve \"function\"</span>\n<span class=\"token keyword\">typeof</span> shape<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">;</span> <span class=\"token comment\">// devuelve \"function\"</span>\n</code></pre></div>\n<p>Para objetos predefinidos, el operador <code>typeof</code> devuelve los siguientes resultados:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> Date<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// devuelve \"function\"</span>\n<span class=\"token keyword\">typeof</span> Function<span class=\"token punctuation\">;</span> <span class=\"token comment\">// devuelve \"function\"</span>\n<span class=\"token keyword\">typeof</span> Math<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// devuelve \"object\"</span>\n<span class=\"token keyword\">typeof</span> Option<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// devuelve \"function\"</span>\n<span class=\"token keyword\">typeof</span> String<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// devuelve \"function\"</span>\n</code></pre></div>\n<h4 id=\"void\"><code>void</code></h4>\n<p>El <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>operador void</code></a> se utiliza de cualquiera de las siguientes formas:</p>\n<pre class=\"notranslate\">void (expression)\nvoid expression\n</pre>\n<p>El operador <code>void</code> especifica una expresi√≥n que se evaluar√° sin devolver un valor. <code>expression</code> es una expresi√≥n de JavaScript para evaluar. Los par√©ntesis que rodean la expresi√≥n son opcionales, pero es un buen estilo usarlos.</p>"}},{"type":"prose","value":{"id":"operadores_relacionales","title":"Operadores relacionales","isH3":true,"content":"<p>Un operador relacional compara sus operandos y devuelve un valor <code>Boolean</code> basado en si la comparaci√≥n es verdadera.</p>\n<h4 id=\"in\"><code>in</code></h4>\n<p>El <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>operador in</code></a> devuelve <code>true</code> si la propiedad especificada est√° en el objeto especificado. La sintaxis es:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>propNameOrNumber <span class=\"token keyword\">in</span> objectName\n</code></pre></div>\n<p>donde <code>propNameOrNumber</code> es una expresi√≥n de cadena, num√©rica o de s√≠mbolo que representa un nombre de propiedad o √≠ndice de arreglo, y <code>objectName</code> es el nombre de un objeto.</p>\n<p>Los siguientes ejemplos muestran algunos usos del operador <code>in</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Arreglos</span>\n<span class=\"token keyword\">var</span> trees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'redwood'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bay'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cedar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oak'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'maple'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">0</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// devuelve true</span>\n<span class=\"token number\">3</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// devuelve true</span>\n<span class=\"token number\">6</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// devuelve false</span>\n<span class=\"token string\">'bay'</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// devuelve false (debes especificar el n√∫mero del √≠ndice,</span>\n                   <span class=\"token comment\">// no el valor en ese √≠ndice)</span>\n<span class=\"token string\">'length'</span> en trees<span class=\"token punctuation\">;</span> <span class=\"token comment\">// devuelve true (la longitud es una propiedad de Array)</span>\n\n<span class=\"token comment\">// objetos integrados</span>\n<span class=\"token string\">'PI'</span> <span class=\"token keyword\">in</span> Math<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// devuelve true</span>\n<span class=\"token keyword\">var</span> myString <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'coral'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">'length'</span> <span class=\"token keyword\">in</span> myString<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// devuelve true</span>\n\n<span class=\"token comment\">// Objetos personalizados</span>\n<span class=\"token keyword\">var</span> mycar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">make</span><span class=\"token operator\">:</span> <span class=\"token string\">'Honda'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token string\">'Accord'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token number\">1998</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">'make'</span> <span class=\"token keyword\">in</span> mycar<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// devuelve true</span>\n<span class=\"token string\">'model'</span> <span class=\"token keyword\">in</span> mycar<span class=\"token punctuation\">;</span> <span class=\"token comment\">// devuelve true</span>\n</code></pre></div>\n<h4 id=\"instanceof\"><code>instanceof</code></h4>\n<p>El <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>operador instanceof</code></a> devuelve <code>true</code> si el objeto especificado es del tipo de objeto especificado. La sintaxis es:</p>\n<pre class=\"notranslate\">objectName instanceof objectType\n</pre>\n<p>donde <code>objectName</code> es el nombre del objeto para comparar con <code>objectType</code>, y <code>objectType</code> es un tipo de objeto, como <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> o <a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>.</p>\n<p>Utiliza <code>instanceof</code> cuando necesites confirmar el tipo de un objeto en tiempo de ejecuci√≥n. Por ejemplo, al detectar excepciones, puedes ramificar a diferentes controladores seg√∫n el tipo de excepci√≥n lanzada.</p>\n<p>Por ejemplo, el siguiente c√≥digo usa <code>instanceof</code> para determinar si <code>theDay</code> es un objeto <code>Date</code>. Debido a que <code>theDay</code> es un objeto <code>Date</code>, las instrucciones de la expresi√≥n <code>if</code> se ejecutan.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> theDay <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">1995</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>theDay <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// instrucciones a ejecutar</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"precedencia_de_los_operadores","title":"Precedencia de los operadores","isH3":true,"content":"<p>La <em>precedencia</em> de los operadores determina el orden en que se aplican al evaluar una expresi√≥n. Puedes redefinir la precedencia de los operadores mediante el uso de par√©ntesis.</p>\n<p>La siguiente tabla describe la precedencia de los operadores, de mayor a menor.</p>\n<table>\n  <thead>\n    <tr>\n      <th>Tipo de operador</th>\n      <th>Operadores individuales</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>miembro</td>\n      <td><code>. []</code></td>\n    </tr>\n    <tr>\n      <td>llamar / crear instancia</td>\n      <td><code>() new</code></td>\n    </tr>\n    <tr>\n      <td>negaci√≥n / incremento</td>\n      <td><code>! ~ - + ++ -- typeof void delete</code></td>\n    </tr>\n    <tr>\n      <td>multiplicar / dividir</td>\n      <td><code>* / %</code></td>\n    </tr>\n    <tr>\n      <td>adici√≥n / sustracci√≥n</td>\n      <td><code>+ -</code></td>\n    </tr>\n    <tr>\n      <td>desplazamiento bit a bit</td>\n      <td><code>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</code></td>\n    </tr>\n    <tr>\n      <td>relacional</td>\n      <td><code>&lt; &lt;= &gt; &gt;= in instanceof</code></td>\n    </tr>\n    <tr>\n      <td>igualdad</td>\n      <td><code>== != === !==</code></td>\n    </tr>\n    <tr>\n      <td><code>AND</code> bit a bit</td>\n      <td><code>&amp;</code></td>\n    </tr>\n    <tr>\n      <td><code>XOR</code> bit a bit</td>\n      <td><code>^</code></td>\n    </tr>\n    <tr>\n      <td><code>OR</code> bit a bit</td>\n      <td><code>|</code></td>\n    </tr>\n    <tr>\n      <td><code>AND</code> l√≥gico</td>\n      <td><code>&amp;&amp;</code></td>\n    </tr>\n    <tr>\n      <td><code>OR</code> l√≥gico</td>\n      <td><code>||</code></td>\n    </tr>\n    <tr>\n      <td>condicional</td>\n      <td><code>?:</code></td>\n    </tr>\n    <tr>\n      <td>asignaci√≥n</td>\n      <td><code>= += -= *= /= %= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;= &amp;= ^= |= &amp;&amp;= ||= ??=</code></td>\n    </tr>\n    <tr>\n      <td>coma</td>\n      <td><code>,</code></td>\n    </tr>\n  </tbody>\n</table>\n<p>Puedes encontrar una versi√≥n m√°s detallada de esta tabla, completa con enlaces a detalles adicionales sobre cada operador, en <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>Referencia de JavaScript</code></a>.</p>"}},{"type":"prose","value":{"id":"expresiones","title":"Expresiones","isH3":false,"content":"<p>Una <em>expresi√≥n</em> es cualquier unidad de c√≥digo v√°lida que se resuelve en un valor.</p>\n<p>Toda expresi√≥n sint√°cticamente v√°lida se resuelve en alg√∫n valor, pero conceptualmente, hay dos tipos de expresiones: con efectos secundarios (por ejemplo: las que asignan valor a una variable) y las que en alg√∫n sentido eval√∫an y por lo tanto se resuelven en un valor.</p>\n<p>La expresi√≥n <code>x = 7</code> es un ejemplo del primer tipo. Esta expresi√≥n usa el <em>operador</em> = para asignar el valor siete a la variable <code>x</code>. La expresi√≥n en s√≠ se eval√∫a como siete.</p>\n<p>El c√≥digo <code>3 + 4</code> es un ejemplo del segundo tipo de expresi√≥n. Esta expresi√≥n usa el operador + para sumar tres y cuatro sin asignar el resultado, siete, a una variable.</p>\n<p>JavaScript tiene las siguientes categor√≠as de expresi√≥n:</p>\n<ul>\n  <li>Aritm√©ticas: se eval√∫a como un n√∫mero, por ejemplo 3.14159. (Generalmente usa <a href=\"##aritm%C3%A9ticos\">operadores aritm√©ticos</a>).</li>\n  <li>Cadenas: se eval√∫a como una cadena de caracteres, por ejemplo, \"Fred\" o \"234\". (Generalmente usa <a href=\"#cadena\">operadores de cadena</a>).</li>\n  <li>L√≥gicas: se eval√∫an como <code>true</code> o <code>false</code>. (A menudo implica <a href=\"#logico\">operadores l√≥gicos</a>).</li>\n  <li>Expresiones primarias: palabras clave b√°sicas y expresiones generales en JavaScript.</li>\n  <li>Expresiones del lado izquierdo: los valores del lado izquierdo son el destino de una asignaci√≥n.</li>\n</ul>"}},{"type":"prose","value":{"id":"expresiones_primarias","title":"Expresiones primarias","isH3":true,"content":"<p>Palabras clave b√°sicas y expresiones generales en JavaScript.</p>\n<h4 id=\"this\"><code>this</code></h4>\n<p>Utiliza la <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>palabra clave this</code></a> para hacer referencia al objeto actual. En general, <code>this</code> se refiere al objeto que llama en un m√©todo. Usa <code>this</code> con la notaci√≥n de punto o entre corchetes:</p>\n<pre class=\"notranslate\">this['propertyName']\nthis.propertyName\n</pre>\n<p>Supongamos que una funci√≥n llamada <code>validate</code> valida la propiedad <code>value</code> de un objeto, dado el objeto y los valores alto y bajo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> lowval<span class=\"token punctuation\">,</span> hival</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> lowval<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&gt;</span> hival<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'¬°Valor no v√°lido!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Puedes llamar a <code>validate</code> en el controlador de eventos <code>onChange</code> de cada elemento de formulario, utilizando <code>this</code> para pasarlo al elemento de formulario, como en el siguiente ejemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Ingresa un n√∫mero entre 18 y 99:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>3</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onChange</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"operador_de_agrupaci√≥n\">Operador de agrupaci√≥n</h4>\n<p>El operador de agrupaci√≥n <code>()</code> controla la precedencia de la evaluaci√≥n en las expresiones. Por ejemplo, puedes redefinir la multiplicaci√≥n y la divisi√≥n primero, luego la suma y la resta para evaluar la suma primero.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// precedencia predeterminada</span>\na <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> c     <span class=\"token comment\">// 7</span>\n<span class=\"token comment\">// evaluado por omisi√≥n as√≠</span>\na <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> c<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 7</span>\n\n<span class=\"token comment\">// ahora prevalece sobre la precedencia</span>\n<span class=\"token comment\">// suma antes de multiplicar</span>\n<span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> c   <span class=\"token comment\">// 9</span>\n\n<span class=\"token comment\">// que es equivalente a</span>\na <span class=\"token operator\">*</span> c <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> c <span class=\"token comment\">// 9</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"expresiones_del_lado_izquierdo","title":"Expresiones del lado izquierdo","isH3":true,"content":"<p>Los valores de la izquierda son el destino de una asignaci√≥n.</p>\n<h4 id=\"new\"><code>new</code></h4>\n<p>Puedes utilizar el <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>operador new</code></a> para crear una instancia de un tipo de objeto definido por el usuario o de uno de los tipos de objeto integrados. Utiliza <code>new</code> de la siguiente manera:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> objectName <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">objectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>param1<span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> paramN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"super\"><code>super</code></h4>\n<p>La <a class=\"page-not-created\" title=\"La documentaci√≥n acerca de este tema no ha sido escrita todav√≠a . ¬°Por favor  considera contribuir !\"><code>palabra clave super</code></a> se utiliza para llamar a funciones en el padre de un objeto. Es √∫til con <a href=\"/es/docs/Web/JavaScript/Reference/Classes\"><code>clases</code></a> llamar al constructor padre, por ejemplo.</p>\n<pre class=\"notranslate\">super([arguments]); // llama al constructor padre.\nsuper.functionOnParent([arguments]);\n</pre><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/es/docs/Web/JavaScript/Guide/Functions\">¬´ Anterior</a></li>\n    <li><a class=\"button minimal\" href=\"/es/docs/Web/JavaScript/Guide/Numbers_and_dates\">Siguiente  ¬ª</a></li>\n</ul>"}}],"toc":[{"text":"Operadores","id":"operadores"},{"text":"Expresiones","id":"expresiones"}],"summary":"Este cap√≠tulo describe las expresiones y los operadores de JavaScript, incluyendo los de asignaci√≥n, comparaci√≥n, aritm√©ticos, bit a bit, l√≥gicos, ternarios, de cadena y otros.","popularity":0.0121,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Expressions and operators","locale":"en-US","native":"English (US)"},{"title":"Expressions et op√©rateurs","locale":"fr","native":"Fran√ßais"},{"title":"Âºè„Å®ÊºîÁÆóÂ≠ê","locale":"ja","native":"Êó•Êú¨Ë™û"},{"title":"ÌëúÌòÑÏãùÍ≥º Ïó∞ÏÇ∞Ïûê","locale":"ko","native":"ÌïúÍµ≠Ïñ¥"},{"title":"Express√µes e operadores","locale":"pt-BR","native":"Portugu√™s (do¬†Brasil)"},{"title":"–í—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã","locale":"ru","native":"–†—É—Å—Å–∫–∏–π"},{"title":"Ë°®ËææÂºè‰∏éËøêÁÆóÁ¨¶","locale":"zh-CN","native":"‰∏≠Êñá (ÁÆÄ‰Ωì)"},{"title":"ÈÅãÁÆóÂºèËàáÈÅãÁÆóÂ≠ê","locale":"zh-TW","native":"Ê≠£È´î‰∏≠Êñá (ÁπÅÈ´î)"}],"source":{"folder":"es/web/javascript/guide/expressions_and_operators","github_url":"https://github.com/mdn/translated-content/blob/main/files/es/web/javascript/guide/expressions_and_operators/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/es/docs/Web","title":"Tecnolog√≠a para desarrolladores web"},{"uri":"/es/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/es/docs/Web/JavaScript/Guide","title":"Gu√≠a de JavaScript"},{"uri":"/es/docs/Web/JavaScript/Guide/Expressions_and_Operators","title":"Expresiones y operadores"}],"pageTitle":"Expresiones y operadores - JavaScript | MDN","noIndexing":false}}