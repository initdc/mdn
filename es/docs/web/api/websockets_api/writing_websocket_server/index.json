{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Escribiendo un servidor WebSocket en C#","mdn_url":"/es/docs/Web/API/WebSockets_API/Writing_WebSocket_server","locale":"es","native":"Español","sidebarHTML":"","body":[{"type":"prose","value":{"id":"introducción","title":"Introducción","isH3":false,"content":"<p>Si deseas utilizar la API WebSocket, es conveniente si tienes un servidor. En este artículo te mostraré como puedes escribir uno en C#. Tú puedes hacer esto en cualquier lenguaje del lado del servidor, pero para mantener las cosas simples y más comprensibles, elegí el lenguaje de Microsoft<span style=\"line-height: 1.5;\">.</span></p>\n\n<p>Este servidor se ajusta a <a href=\"https://tools.ietf.org/html/rfc6455\" class=\"external\" rel=\" noopener\">RFC 6455</a> por lo que solo manejará las conexiones de Chrome version 16, Firefox 11, IE 10 and superiores.</p>"}},{"type":"prose","value":{"id":"primeros_pasos","title":"Primeros pasos","isH3":false,"content":"<p>WebSocket se comunica a través de conexiones <a href=\"https://es.wikipedia.org/wiki/Transmission_Control_Protocol\" class=\"external\" rel=\" noopener\">TCP (Transmission Control Protocol)</a>, afortunadamente C# tiene una clase <a href=\"http://msdn.microsoft.com/es-es/library/system.net.sockets.tcplistener.aspx\" class=\"external\" rel=\" noopener\">TcpListener</a> la cual hace lo que su nombre sugiere. Esta se encuentra en el namespace <em>System.Net.Sockets</em>.</p>\n\n<div class=\"note notecard\" id=\"sect1\">\n<p><span style=\"line-height: 1.572;\">Es una buena idea usar la instrucción <code>using</code></span><span style=\"line-height: 1.572;\"> para escribir menos. Eso significa que no tendrás que re escribir el namespace de nuevo en cada ocasión.</span></p>\n</div>"}},{"type":"prose","value":{"id":"tcplistener","title":"TcpListener","isH3":true,"content":"<p>Constructor:</p>\n\n<div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code><span class=\"token function\">TcpListener</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>IPAddress localaddr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">)</span></code></pre></div>\n\n<p><code>localaddr</code> especifica la IP a escuchar y <code>port</code> especifica el puerto.</p>\n\n<div class=\"note notecard\" id=\"sect2\">\n<p>Para crear un objeto <code>IPAddress</code> desde un <code>string</code>, usa el método estático <code>Parse</code> de <code>IPAddres.</code></p>\n</div>\n\n<p><span style=\"line-height: 1.572;\">Métodos</span><span style=\"line-height: 1.572;\">:</span></p>\n\n<ul>\n <li><code><span style=\"line-height: 1.572;\">Start()</span></code></li>\n <li><span style=\"line-height: 1.572;\">S<code>ystem.Net.Sockets.<a href=\"http://msdn.microsoft.com/en-us/library/system.net.sockets.tcpclient.aspx\" class=\"external\" rel=\" noopener\">TcpClient</a> AcceptTcpClient()</code><br>\n  Espera por una conexión TCP, la acepta y la devuelve como un objeto TcpClient.</span></li>\n</ul>\n\n<p><span style=\"line-height: 1.572;\">Aquí está como utilizar lo que hemos aprendido:</span></p>\n\n<div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code>​<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Sockets<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Server</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        TcpListener server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TcpListener</span><span class=\"token punctuation\">(</span>IPAddress<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        server<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"El server se ha iniciado en 127.0.0.1:80.{0}Esperando una conexión...\"</span><span class=\"token punctuation\">,</span> Environment<span class=\"token punctuation\">.</span>NewLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        TcpClient client <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">AcceptTcpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Un cliente conectado.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"tcpclient","title":"<span style=\"line-height: 1.572;\">TcpClient</span>","isH3":true,"content":"<p>Métodos:</p>\n\n<ul>\n <li><code>System.Net.Sockets.<a href=\"http://msdn.microsoft.com/en-us/library/system.net.sockets.networkstream.aspx\" class=\"external\" rel=\" noopener\">NetworkStream</a> GetStream()</code><br>\n  Obtiene el stream del canal de comunicación. Ambos lados del canal tienen capacidad de lectura y escritura.</li>\n</ul>\n\n<p>Propiedades:</p>\n\n<ul>\n <li><code>int Available</code><br>\n  Este es el número de bytes de datos que han sido enviados. El valor es cero hasta que <code><em>NetworkStream.DataAvailable</em></code> es <code><em>true</em></code>.</li>\n</ul>","titleAsText":"TcpClient"}},{"type":"prose","value":{"id":"networkstream","title":"NetworkStream","isH3":true,"content":"<p>Métodos:</p>\n\n<div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>Byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span></code></pre></div>\n\n<p>Escribe bytes desde el <em>buffer;</em> el <em>offset</em> y el <em>size</em> determinan la longitud del mensaje.</p>\n\n<pre class=\"notranslate\"><span class=\"brush: cpp\" style=\"line-height: 1.572;\">Read(Byte[] buffer, int offset, int size)</span></pre>\n\n<p>Lee bytes al <em>buffer;</em> el <em>offset</em> y el <em>size </em>determinan la longitud del mensaje.</p>\n\n<p>Ampliemos nuestro ejemplo anterior.</p>\n\n<div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code>TcpClient client <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">AcceptTcpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Un cliente conectado.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nNetworkStream stream <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">GetStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//enter to an infinite cycle to be able to handle every change in stream</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stream<span class=\"token punctuation\">.</span>DataAvailable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Byte<span class=\"token punctuation\">[</span>client<span class=\"token punctuation\">.</span>Available<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    stream<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}},{"type":"prose","value":{"id":"handshaking","title":"Handshaking","isH3":false,"content":"<p>Cuando un cliente se conecta al servidor, envía una solicitud GET para actualizar la conexión al WebSocket desde una simple petición HTTP. Esto es conocido como <em>handshaking</em>.</p>\n\n<p>Este código de ejemplo detecta el GET desde el cliente. Nota que esto bloqueará hasta los 3 primeros bytes del mensaje disponible. Soluciones alternativas deben ser investigadas para ambientes de producción.</p>\n\n<pre class=\"notranslate\"><code>using System.Text;\nusing System.Text.RegularExpressions;\n\nwhile(client.Available &lt; 3)\n{\n   // wait for enough bytes to be available\n}\n\nByte[] bytes = new Byte[client.Available];\n\nstream.Read(bytes, 0, bytes.Length);\n\n//translate bytes of request to string\nString data = Encoding.UTF8.GetString(bytes);\n\nif (Regex.IsMatch(data, \"^GET\")) {\n\n} else {\n\n}</code></pre>\n\n<p>Esta respuesta es fácil de construir, pero puede ser un poco díficil de entender. La explicación completa del <em>handshake </em>al servidor puede encontrarse en  <a href=\"/es/docs/WebSockets-840092-dup/RFC%206455,%20section%204.2.2\">RFC 6455, section 4.2.2</a>. Para nuestros propósitos, solo construiremos una respuesta simple.</p>\n\n<p>Debes:</p>\n\n<ol>\n <li>Obtener el valor de \"<em>Sec-WebSocket-Key\" </em>sin espacios iniciales ni finales de el encabezado de la solicitud</li>\n <li>Concatenarlo con \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"</li>\n <li>Calcular el código SHA-1 y Base64</li>\n <li>Escribe el valor <em>Sec-WebSocket-Accept</em> en el encabezado como parte de la respuesta HTTP.</li>\n</ol>\n\n<div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">Regex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^GET\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsMatch</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> response <span class=\"token operator\">=</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HTTP/1.1 101 Switching Protocols\"</span> <span class=\"token operator\">+</span> Environment<span class=\"token punctuation\">.</span>NewLine\n        <span class=\"token operator\">+</span> <span class=\"token string\">\"Connection: Upgrade\"</span> <span class=\"token operator\">+</span> Environment<span class=\"token punctuation\">.</span>NewLine\n        <span class=\"token operator\">+</span> <span class=\"token string\">\"Upgrade: websocket\"</span> <span class=\"token operator\">+</span> Environment<span class=\"token punctuation\">.</span>NewLine\n        <span class=\"token operator\">+</span> <span class=\"token string\">\"Sec-WebSocket-Accept: \"</span> <span class=\"token operator\">+</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToBase64String</span> <span class=\"token punctuation\">(</span>\n            SHA1<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ComputeHash</span> <span class=\"token punctuation\">(</span>\n                Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span> <span class=\"token punctuation\">(</span>\n                    <span class=\"token keyword\">new</span> <span class=\"token function\">Regex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sec-WebSocket-Key: (.*)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Match</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Groups<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">Trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"</span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Environment<span class=\"token punctuation\">.</span>NewLine\n        <span class=\"token operator\">+</span> Environment<span class=\"token punctuation\">.</span>NewLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    stream<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"decoding_messages","title":"Decoding messages","isH3":false,"content":"<p>Luego de un <em>handshake</em> exitoso el cliente puede enviar mensajes al servidor, pero estos serán codificados.</p>\n\n<p>Si nosotros enviamos \"MDN\", obtendremos estos bytes:</p>\n\n<table>\n <tbody>\n  <tr>\n   <td>129</td>\n   <td>131</td>\n   <td>61</td>\n   <td>84</td>\n   <td>35</td>\n   <td>6</td>\n   <td>112</td>\n   <td>16</td>\n   <td>109</td>\n  </tr>\n </tbody>\n</table>\n\n<p>- 129:</p>\n\n<table>\n <thead>\n  <tr>\n   <th scope=\"col\">FIN (¿Es el mensaje completo?)</th>\n   <th scope=\"col\">RSV1</th>\n   <th scope=\"col\">RSV2</th>\n   <th scope=\"col\">RSV3</th>\n   <th scope=\"col\">Opcode</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td>1</td>\n   <td>0</td>\n   <td>0</td>\n   <td>0</td>\n   <td>0x1=0001</td>\n  </tr>\n </tbody>\n</table>\n\n<p>FIN: Puedes enviar tu mensaje en marcos, pero ahora debe mantener las cosas simples.<br>\n <span style=\"line-height: 1.572;\">Opcode </span><em>0x1</em><span style=\"line-height: 1.572;\"> significa que es un texto. </span><a href=\"https://tools.ietf.org/html/rfc6455#section-5.2\" style=\"line-height: 1.572;\" class=\"external\" rel=\" noopener\">Lista completa de Opcodes</a></p>\n\n<p>- 131:</p>\n\n<p>Si el segundo byte menos 128 se encuentra entre 0 y 125, esta es la longitud del mensaje. Si es 126, los siguientes 2 bytes (entero sin signo de 16 bits), si es 127, los siguientes 8 bytes (entero sin signo de 64 bits) son la longitud.</p>\n\n<div class=\"note notecard\" id=\"sect3\">\n<p>Puedo tomar 128, porque el primer bit siempre es 1.</p>\n</div>\n\n<p>- 61, 84, 35 y 6 son los bytes de la clave a decodificar. Cambian en cada oportunidad.</p>\n\n<p>- Los bytes codificados restantes son el mensaje<span style=\"line-height: 1.572;\">.</span></p>"}},{"type":"prose","value":{"id":"algoritmo_de_decodificación","title":"Algoritmo de decodificación","isH3":true,"content":"<p>byte decodificado = byte codificado XOR (posición del byte codificado Mod 4) byte de la clave</p>\n\n<p>Ejemplo en C#:</p>\n\n<div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code>Byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> decoded <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Byte<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nByte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> encoded <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Byte<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token number\">112</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">109</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nByte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> key <span class=\"token operator\">=</span> Byte<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token number\">61</span><span class=\"token punctuation\">,</span> <span class=\"token number\">84</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> encoded<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    decoded<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Byte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> key<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}},{"type":"prose","value":{"id":"relacionado","title":"Relacionado","isH3":false,"content":"<ul>\n <li><a href=\"/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Escribiendo servidores WebSocket (en-US)</a></li>\n</ul>"}}],"toc":[{"text":"Introducción","id":"introducción"},{"text":"Primeros pasos","id":"primeros_pasos"},{"text":"Handshaking","id":"handshaking"},{"text":"Decoding messages","id":"decoding_messages"},{"text":"Relacionado","id":"relacionado"}],"summary":"Si deseas utilizar la API WebSocket, es conveniente si tienes un servidor. En este artículo te mostraré como puedes escribir uno en C#. Tú puedes hacer esto en cualquier lenguaje del lado del servidor, pero para mantener las cosas simples y más comprensibles, elegí el lenguaje de Microsoft.","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Writing a WebSocket server in C#","locale":"en-US","native":"English (US)"},{"title":"C# で WebSocket サーバーを記述する","locale":"ja","native":"日本語"},{"title":"Escrevendo um servidor WebSocket em C #","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"用 C＃来编写 WebSocket 服务器","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"es/web/api/websockets_api/writing_websocket_server","github_url":"https://github.com/mdn/translated-content/blob/main/files/es/web/api/websockets_api/writing_websocket_server/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/es/docs/Web","title":"Tecnología para desarrolladores web"},{"uri":"/es/docs/Web/API","title":"Referencia de la API Web"},{"uri":"/es/docs/Web/API/WebSockets_API","title":"WebSockets"},{"uri":"/es/docs/Web/API/WebSockets_API/Writing_WebSocket_server","title":"Escribiendo un servidor WebSocket en C#"}],"pageTitle":"Escribiendo un servidor WebSocket en C# - Referencia de la API Web | MDN","noIndexing":false}}