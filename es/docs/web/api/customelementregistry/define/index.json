{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"CustomElementRegistry.define()","mdn_url":"/es/docs/Web/API/CustomElementRegistry/define","locale":"es","native":"Español","sidebarHTML":"<ol><li><strong><a href=\"/es/docs/Web/API/CustomElementRegistry\"><code>CustomElementRegistry</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Métodos</summary><ol><li><em><code>define()</code></em></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CustomElementRegistry/get\"><code>get()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CustomElementRegistry/upgrade\"><code>upgrade()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CustomElementRegistry/whenDefined\"><code>whenDefined()</code> <small>(en-US)</small></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><p></p>\n\n<p>El método <code><strong>define()</strong></code> de la interfaz <a href=\"/es/docs/Web/API/CustomElementRegistry\"><code>CustomElementRegistry</code></a> define un nuevo elemento personalizado.</p>\n\n<p>Se pueden crear dos tipos de elementos personalizados:</p>\n\n<ul>\n <li><strong>Elementos personalizados autónomos</strong>: Elementos autónomos; estos heredan de HTMLElement  (Elemento HTML genérico).</li>\n <li><strong>Elementos personalizados preconstruidos</strong>: Estos elementos heredan - y extienden - elementos HTML ya existentes (p.ej HTMLParagraphElement que es el elemento HTML <a href=\"/en-US/docs/Web/HTML/Element/p\" title=\"The HTML <p> element represents a paragraph.\"><code>&lt;p&gt;</code></a>).</li>\n</ul>"}},{"type":"prose","value":{"id":"sintaxis","title":"Sintaxis","isH3":false,"content":"<pre class=\"syntaxbox notranslate\">customElements.define(<em>name</em>, <em>constructor</em>, <em>options</em>);\n</pre>"}},{"type":"prose","value":{"id":"parámetros","title":"Parámetros","isH3":true,"content":"<dl>\n <dt id=\"name\">name</dt>\n <dd>Nombre del nuevo elemento personalizado. Fíjate en que los nombres de elementos personalizados deben contener un guión.</dd>\n <dt id=\"constructor\">constructor</dt>\n <dd>Constructor para el nuevo elemento personalizado</dd>\n <dt id=\"options\">options <span class=\"badge inline optional\">Opcional</span></dt>\n <dd>Objecto que controla cómo se define el elemento. Actualmente solo se permite una opción:\n <ul>\n  <li><code>extends</code>: Cadena que especifica el nombre del elemento preconstruido del cual se va a extender. Se usa para crear <em>elementos personalizados preconstruidos</em>.</li>\n </ul>\n </dd>\n</dl>"}},{"type":"prose","value":{"id":"valor_de_retorno","title":"Valor de retorno","isH3":true,"content":"<p>Void.</p>"}},{"type":"prose","value":{"id":"excepciones","title":"Excepciones","isH3":true,"content":"<table class=\"standard-table\">\n <thead>\n  <tr>\n   <th scope=\"col\">Excepción</th>\n   <th scope=\"col\">Descripción</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td><code>NotSupportedError</code></td>\n   <td>El <a href=\"/es/docs/Web/API/CustomElementRegistry\"><code>CustomElementRegistry</code></a> ya contiene una entrada con el mismo nombre o el mismo constructor (o se ha definido ya de alguna otra manera), o se ha especificado <code>extends</code> pero el elemento del que se está intentando extender es desconocido.</td>\n  </tr>\n  <tr>\n   <td><code>SyntaxError</code></td>\n   <td>El nombre proporcionado no es un <a href=\"https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\" class=\"external\" rel=\" noopener\">nombre válido de elemento personalizado</a>.</td>\n  </tr>\n  <tr>\n   <td><code>TypeError</code></td>\n   <td>El constructor referenciado no es un constructor</td>\n  </tr>\n </tbody>\n</table>\n\n<div class=\"note notecard\" id=\"sect1\">\n<p><strong>Nota</strong>: A menudo se obtienen excepciones <code>NotSupportedError</code>s cuando el método <code>define()</code> está fallando, pero realmente es un problema relacionado con <a href=\"/es/docs/Web/API/Element/attachShadow\"><code>Element.attachShadow()</code></a>.</p>\n</div>"}},{"type":"prose","value":{"id":"ejemplos","title":"Ejemplos","isH3":false,"content":""}},{"type":"prose","value":{"id":"elemento_personalizado_autónomo","title":"Elemento personalizado autónomo","isH3":true,"content":"<p>El siguiente código está tomado de nuestro ejemplo <a href=\"https://github.com/mdn/web-components-examples/tree/master/popup-info-box-web-component\" class=\"external\" rel=\" noopener\">popup-info-box-web-component</a>  (<a href=\"https://mdn.github.io/web-components-examples/popup-info-box-web-component/\" class=\"external\" rel=\" noopener\">verlo en vivo</a>).</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Crear una clase para el elemento</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PopUpInfo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Siempre lo primero es llamar a super en el constructor</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Crear una shadow root</span>\n    <span class=\"token keyword\">var</span> shadow <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Crear tres elementos span</span>\n    <span class=\"token keyword\">var</span> wrapper <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'wrapper'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> icon <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    icon<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'icon'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    icon<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tabindex'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> info <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    info<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Coger el contenido del atributo text y ponerlo en el span info</span>\n    <span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    info<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Coger el contenido del atributo img (si existe) y ponerlo en el span icon</span>\n    <span class=\"token keyword\">var</span> imgUrl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      imgUrl <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      imgUrl <span class=\"token operator\">=</span> <span class=\"token string\">'img/default.png'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// El span no puede tener directamente una imagen, pero si contener un elemento img</span>\n    <span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> imgUrl<span class=\"token punctuation\">;</span>\n    icon<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Crear los estilos CSS e incluirlos en el shadow DOM</span>\n    <span class=\"token keyword\">var</span> style <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    style<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'.wrapper {'</span> <span class=\"token operator\">+</span>\n                           <span class=\"token string\">'position: relative;'</span> <span class=\"token operator\">+</span>\n                        <span class=\"token string\">'}'</span> <span class=\"token operator\">+</span>\n\n                         <span class=\"token string\">'.info {'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'font-size: 0.8rem;'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'width: 200px;'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'display: inline-block;'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'border: 1px solid black;'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'padding: 10px;'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'background: white;'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'border-radius: 10px;'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'opacity: 0;'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'transition: 0.6s all;'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'position: absolute;'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'bottom: 20px;'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'left: 10px;'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'z-index: 3;'</span> <span class=\"token operator\">+</span>\n                          <span class=\"token string\">'}'</span> <span class=\"token operator\">+</span>\n\n                          <span class=\"token string\">'img {'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'width: 1.2rem'</span> <span class=\"token operator\">+</span>\n                          <span class=\"token string\">'}'</span> <span class=\"token operator\">+</span>\n\n                          <span class=\"token string\">'.icon:hover + .info, .icon:focus + .info {'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'opacity: 1;'</span> <span class=\"token operator\">+</span>\n                          <span class=\"token string\">'}'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// adjuntar los elementos creados (spans y estilo) al shadow DOM</span>\n    <span class=\"token comment\">// notese que el span wrapper contiene los spans icon e info</span>\n\n    shadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    shadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>icon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Definir el nuevo elemento</span>\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-info'</span><span class=\"token punctuation\">,</span> PopUpInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>popup-info</span> <span class=\"token attr-name\">img</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>img/alt.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Su código de validación de tarjeta (CVC) es una característica\n                                    extra de seguridad — consiste en 3 o 4\n                                    numeros en la parte posterior de su tarjeta.<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n\n<div class=\"note notecard\" id=\"sect2\">\n<p><strong>Nota</strong>: Los constructores de elementos personalizados autónomos deben extender <a href=\"/es/docs/Web/API/HTMLElement\"><code>HTMLElement</code></a>.</p>\n</div>"}},{"type":"prose","value":{"id":"elemento_personalizado_preconstruido","title":"Elemento personalizado preconstruido","isH3":true,"content":"<p>El siguiente código está tomado de nuestro ejemplo <a href=\"https://github.com/mdn/web-components-examples/tree/master/word-count-web-component\" class=\"external\" rel=\" noopener\">word-count-web-component</a> (<a href=\"https://mdn.github.io/web-components-examples/word-count-web-component/\" class=\"external\" rel=\" noopener\">verlo en vivo</a>).</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Crear una clase para el elemento</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WordCount</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLParagraphElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Siempre lo primero es llamar a super en el constructor</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// contar palabras del padre de este elemento</span>\n    <span class=\"token keyword\">var</span> wcParent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// la función countWords cuenta palabras (aunque estén separadas por más de un espacio)</span>\n    <span class=\"token comment\">// que existe en el nodo pasado como parámetro.</span>\n    <span class=\"token comment\">// innerText está definido para objetos HTMLElement, mientras que textContent para todos los objetos Node</span>\n    <span class=\"token comment\">// el operador || hace que obtengamos al menos uno de los dos</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">countWords</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">||</span> node<span class=\"token punctuation\">.</span>textContent\n      <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\s+</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token string\">'Words: '</span> <span class=\"token operator\">+</span> <span class=\"token function\">countWords</span><span class=\"token punctuation\">(</span>wcParent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// // Crear una shadow root</span>\n    <span class=\"token keyword\">var</span> shadow <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Crear un nodo span con el número de palabras</span>\n    <span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    text<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Añadirlo a la shadow root</span>\n    shadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token comment\">// Actualizar el contador cuando el contenido del elemento cambie</span>\n    <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token string\">'Words: '</span> <span class=\"token operator\">+</span> <span class=\"token function\">countWords</span><span class=\"token punctuation\">(</span>wcParent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      text<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Define the new element</span>\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'word-count'</span><span class=\"token punctuation\">,</span> WordCount<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token string\">'p'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">is</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>word-count<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>"}},{"type":"prose","value":{"id":"especificaciones","title":"Especificaciones","isH3":false,"content":"<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <th scope=\"col\">Especificación</th>\n   <th scope=\"col\">Estado</th>\n   <th scope=\"col\">Comentario</th>\n  </tr>\n  <tr>\n   <td><a href=\"https://html.spec.whatwg.org/multipage/custom-elements.html#dom-customelementregistry-define\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">HTML Living Standard<br><small lang=\"es\">La definición de 'customElements.define()' en esta especificación.</small></a></td>\n   <td><span class=\"spec-living\">Living Standard</span></td>\n   <td>Initial definition.</td>\n  </tr>\n </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"Compatibilidad navegadores","id":"compatibilidad_navegadores","isH3":false,"query":"api.CustomElementRegistry.define","dataURL":"/es/docs/Web/API/CustomElementRegistry/define/bcd.json"}},{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div id=\"sect3\">\n\n\n<p></p><p></p>\n</div>"}}],"toc":[{"text":"Sintaxis","id":"sintaxis"},{"text":"Ejemplos","id":"ejemplos"},{"text":"Especificaciones","id":"especificaciones"},{"text":"Compatibilidad navegadores","id":"compatibilidad_navegadores"}],"summary":"El método define() de la interfaz CustomElementRegistry define un nuevo elemento personalizado.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"CustomElementRegistry.define()","locale":"en-US","native":"English (US)"},{"title":"CustomElementRegistry.define()","locale":"ja","native":"日本語"},{"title":"CustomElementRegistry.define()","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"CustomElementRegistry.define()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"es/web/api/customelementregistry/define","github_url":"https://github.com/mdn/translated-content/blob/main/files/es/web/api/customelementregistry/define/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/es/docs/Web","title":"Tecnología para desarrolladores web"},{"uri":"/es/docs/Web/API","title":"Referencia de la API Web"},{"uri":"/es/docs/Web/API/CustomElementRegistry","title":"CustomElementRegistry"},{"uri":"/es/docs/Web/API/CustomElementRegistry/define","title":"CustomElementRegistry.define()"}],"pageTitle":"CustomElementRegistry.define() - Referencia de la API Web | MDN","noIndexing":false}}