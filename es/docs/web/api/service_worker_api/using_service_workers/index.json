{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Usar Service Workers","mdn_url":"/es/docs/Web/API/Service_Worker_API/Using_Service_Workers","locale":"es","native":"Español","sidebarHTML":"\n <ol>\n  <li><a href=\"/es/docs/Web/API/Service_Worker_API\"><strong>Service Worker API</strong></a></li>\n  <li class=\"toggle\">\n    <details open=\"\">\n        <summary>Service Worker guides</summary>\n        <ol>\n          <li><a href=\"/es/docs/Web/API/Service_Worker_API/Using_Service_Workers\">Using Service Workers</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n        <summary>Interfaces</summary>\n        <ol>\n          <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Cache\"><code>Cache</code> <small>(en-US)</small></a></li>\n          <li><a href=\"/es/docs/Web/API/CacheStorage\"><code>CacheStorage</code></a></li>\n          <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Client\"><code>Client</code> <small>(en-US)</small></a></li>\n          <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Clients\"><code>Clients</code> <small>(en-US)</small></a></li>\n          <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ExtendableEvent\"><code>ExtendableEvent</code> <small>(en-US)</small></a></li>\n          <li><a href=\"/es/docs/Web/API/FetchEvent\"><code>FetchEvent</code></a></li>\n          <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/InstallEvent\"><code>InstallEvent</code> <small>(en-US)</small></a></li>\n          <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Navigator/serviceWorker\"><code>Navigator.serviceWorker</code> <small>(en-US)</small></a></li>\n          <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/NotificationEvent\"><code>NotificationEvent</code> <small>(en-US)</small></a></li>\n          <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PeriodicSyncEvent\"><code>PeriodicSyncEvent</code> <small>(en-US)</small></a></li>\n          <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PeriodicSyncManager\"><code>PeriodicSyncManager</code> <small>(en-US)</small></a></li>\n          <li><a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>PeriodicSyncRegistration</code></a></li>\n          <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ServiceWorker\"><code>ServiceWorker</code> <small>(en-US)</small></a></li>\n          <li><a href=\"/es/docs/Web/API/ServiceWorkerContainer\"><code>ServiceWorkerContainer</code></a></li>\n          <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ServiceWorkerGlobalScope\"><code>ServiceWorkerGlobalScope</code> <small>(en-US)</small></a></li>\n          <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ServiceWorkerRegistration\"><code>ServiceWorkerRegistration</code> <small>(en-US)</small></a></li>\n          <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SyncEvent\"><code>SyncEvent</code> <small>(en-US)</small></a></li>\n          <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SyncManager\"><code>SyncManager</code> <small>(en-US)</small></a></li>\n          <li><a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>SyncRegistration</code></a></li>\n          <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WindowClient\"><code>WindowClient</code> <small>(en-US)</small></a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n        <summary>Related APIs</summary>\n        <ol>\n          <li><a href=\"/es/docs/Web/API/Channel_Messaging_API\">Channel Messaging API</a></li>\n          <li><a href=\"/es/docs/Web/API/Notifications_API\">Notifications API</a></li>\n          <li><a href=\"/es/docs/Web/API/Push_API\">Push API</a></li>\n          <li><a href=\"/es/docs/Web/API/Web_Workers_API\">Web Workers API</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/es/docs/MDN\">Documentation:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Contribute</summary>\n        <ol>\n          <li><a href=\"/es/docs/MDN\">The MDN project</a></li>\n        </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Este artículo brinda información sobre cómo comenzar con el <em>service worker</em>, incluida la arquitectura básica, el registro de un <em>service worker</em>, el proceso de instalación y activación de un nuevo <em>service worker</em>, la actualización de tu <em>service worker</em>, el control de caché y las respuestas personalizadas, todo en el contexto de una aplicación simple, con funcionalidad fuera de línea.</p>"}},{"type":"prose","value":{"id":"la_premisa_del_service_worker","title":"La premisa del <em>service worker</em>","isH3":false,"content":"<p>Un problema primordial del que los usuarios de la web han adolecido durante años es la pérdida de conectividad. La mejor aplicación web del mundo proporcionará una experiencia de usuario terrible si no la puedes descargar. Ha habido varios intentos de crear tecnologías para resolver este problema, y ​​algunos de los problemas se han resuelto. Pero el problema primordial es que todavía no existe un buen mecanismo de control general para el almacenamiento en caché de activos y las solicitudes de red personalizadas.</p>\n<p>El intento anterior, <em>AppCache</em>, parecía ser una buena idea porque te permitía especificar activos para almacenar en caché con mucha facilidad. Sin embargo, hizo muchas suposiciones sobre lo que estabas tratando de hacer y luego se rompió horriblemente cuando tu aplicación no siguió exactamente esas suposiciones. Lee el documento de Jake Archibald (desafortunadamente mal titulado pero bien escrito) <a href=\"https://alistapart.com/article/application-cache-is-a-douchebag/\" class=\"external\" rel=\" noopener\">Application Cache is a Douchebag</a> para obtener más detalles.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Nota:</strong> A partir de Firefox 84, se eliminó <em>AppCache</em> (<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1619673\" class=\"external\" rel=\" noopener\">error&nbsp;1619673</a>). También se ha <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=582750\" class=\"external\" rel=\" noopener\">eliminado</a> de Chromium 95 y está obsoleto en Safari.</p>\n</div>\n<p>El <em>service worker</em> finalmente debería solucionar estos problemas. La sintaxis del <em>service worker</em> es más compleja que la de <em>AppCache</em>, pero la compensación es que puedes usar JavaScript para controlar su comportamiento implícito en <em>AppCache</em> con un buen grado de fina granularidad, lo que te permite manejar este problema y muchos más. Al usar un <em>service worker</em>, puedes configurar fácilmente una aplicación para usar activos almacenados en caché primero, proporcionando así una experiencia predeterminada incluso cuando estás desconectado, antes de obtener más datos de la red (comúnmente conocido como <a href=\"https://offlinefirst.org/\" class=\"external\" rel=\" noopener\">Primero sin conexión</a>). Esto ya está disponible con las aplicaciones nativas, que es una de las principales razones por las que las aplicaciones nativas a menudo se eligen en lugar de las aplicaciones web.</p>","titleAsText":"La premisa del service worker"}},{"type":"prose","value":{"id":"configuración_para_jugar_con_el_service_worker","title":"Configuración para jugar con el <em>service worker</em>","isH3":false,"content":"<p>En estos días, el <em>service worker</em> está habilitado de forma predeterminada en todos los navegadores modernos. Para ejecutar código con el <em>service worker</em>, deberás entregar tu código a través de HTTPS: el <em>service worker</em>, por razones de seguridad, está restringido a ejecutarse a través de HTTPS. Por lo tanto, GitHub es un buen lugar para alojar experimentos, ya que admite HTTPS. Para facilitar el desarrollo local, los navegadores también consideran <code>localhost</code> como un origen seguro.</p>","titleAsText":"Configuración para jugar con el service worker"}},{"type":"prose","value":{"id":"arquitectura_básica","title":"Arquitectura básica","isH3":false,"content":"<p>Con el <em>service worker</em>, generalmente se observan los siguientes pasos para la configuración básica:</p>\n<ol>\n  <li>La URL del <em>service worker</em> se obtiene y registra a través de <a href=\"/es/docs/Web/API/ServiceWorkerContainer/register\"><code>serviceWorkerContainer.register()</code></a>.</li>\n  <li>Si tiene éxito, el <em>service worker</em> se ejecuta en <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ServiceWorkerGlobalScope\"><code>ServiceWorkerGlobalScope</code> <small>(en-US)</small></a>; esto es básicamente un tipo especial de contexto de trabajo, que se ejecuta fuera del hilo principal de ejecución del script, sin acceso al DOM.</li>\n  <li>El <em>service worker</em> ahora está listo para procesar eventos.</li>\n  <li>Se intenta la instalación del <em>worker</em> cuando se accede posteriormente a las páginas controladas por el <em>service worker</em>. Un evento de instalación siempre es el primero que se envía a un <em>service worker</em> (esto se puede usar para iniciar el proceso de completar una IndexedDB «base de datos indexada» y almacenar en caché los activos del sitio). Este es realmente el mismo tipo de procedimiento que instalar una aplicación nativa o Firefox OS: hace que todo esté disponible para usar sin conexión.</li>\n  <li>Cuando se completa el controlador <code>oninstall</code>, se considera que el <em>service worker</em> está instalado.</li>\n  <li>Lo siguiente es la activación. Cuando se instala el <em>service worker</em>, recibe un evento de activación. El uso principal de <code>onactivate</code> es para la limpieza de los recursos utilizados en versiones anteriores de un script del <em>service worker</em>.</li>\n  <li>El <em>service worker</em> ahora controlará las páginas, pero solo aquellas que se abran después de que <code>register()</code> tenga éxito. En otras palabras, los documentos se deberán volver a cargar para controlarlos realmente, porque un documento comienza con o sin un <em>service worker</em> y lo mantiene durante toda su vida.</li>\n</ol>\n<p>\n  <img src=\"/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers/sw-lifecycle.png\" alt=\"\" width=\"579\" height=\"867\" loading=\"lazy\">\n</p>\n<p>El siguiente gráfico muestra un resumen de los eventos de <em>service worker</em> disponibles:</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers/sw-events.png\" alt=\"install, activate, message, fetch, sync, push\" width=\"573\" height=\"167\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"demostración_del_service_worker","title":"Demostración del <em>service worker</em>","isH3":false,"content":"<p>Para demostrar los conceptos básicos de registro e instalación de un <em>service worker</em>, hemos creado una demostración simple llamada <a href=\"https://github.com/mdn/dom-examples/tree/main/service-worker/simple-service-worker\" class=\"external\" rel=\" noopener\"><em>service worker</em> simple</a>, que es una simple galería de imágenes de Star Wars Lego. Utiliza una función impulsada por promesas para leer datos de imagen de un objeto JSON y cargar las imágenes usando Ajax, antes de mostrar las imágenes en una línea hacia abajo en la página. Hemos mantenido las cosas estáticas y simples por ahora. También registra, instala y activa un <em>service worker</em>, y cuando los navegadores admiten más especificaciones, almacenará en caché todos los archivos necesarios para que funcione sin conexión.</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers/demo-screenshot.png\" alt=\"Las palabras Star Wars seguidas de una imagen de una versión Lego del personaje Darth Vader\" width=\"480\" height=\"410\" loading=\"lazy\">\n</p>\n<p>Puedes ver el <a href=\"https://github.com/mdn/dom-examples/tree/main/service-worker/simple-service-worker\" class=\"external\" rel=\" noopener\">código fuente en GitHub</a> y el <a href=\"https://bncb2v.csb.app/\" class=\"external\" rel=\" noopener\">Sencillo <em>service worker</em> ejecutándose en vivo</a>.</p>","titleAsText":"Demostración del service worker"}},{"type":"prose","value":{"id":"registra_a_tu_worker","title":"Registra a tu <em>worker</em>","isH3":true,"content":"<p>El primer bloque de código en el archivo JavaScript de nuestra aplicación, <code>app.js</code>, es el siguiente. Este es nuestro punto de entrada en el uso del <em>service worker</em>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">registerServiceWorker</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"serviceWorker\"</span> <span class=\"token keyword\">in</span> navigator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> registration <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>serviceWorker<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sw.js\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">scope</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>registration<span class=\"token punctuation\">.</span>installing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Instalando el Service worker\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>registration<span class=\"token punctuation\">.</span>waiting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Service worker instalado\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>registration<span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Service worker activo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Falló el registro con el </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>error<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// …</span>\n\n<span class=\"token function\">registerServiceWorker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<ol>\n  <li>El bloque if realiza una prueba de detección de características para asegurarse de que el <em>service worker</em> sea compatible antes de intentar registrar uno.</li>\n  <li>A continuación, usamos la función <a href=\"/es/docs/Web/API/ServiceWorkerContainer/register\"><code>ServiceWorkerContainer.register()</code></a> para registrar el <em>service worker</em> para este sitio, que solo es un archivo JavaScript que reside dentro de nuestra aplicación (ten en cuenta que esta es la URL del archivo relativa al origen , no el archivo JS que hace referencia a él).</li>\n  <li>El parámetro <code>scope</code> es opcional y se puede usar para especificar el subconjunto de tu contenido que deseas controle el <em>service worker</em>. En este caso, hemos especificado <code>'/'</code>, lo cual significa todo el contenido bajo el origen de la aplicación. Si lo omites, tendrá este valor predeterminado de todos modos, pero lo especificamos aquí con fines ilustrativos.</li>\n</ol>\n<p>Esto registra un <em>service worker</em>, que se ejecuta en un contexto de trabajador y, por lo tanto, no tiene acceso al DOM. Luego ejecuta el código en el <em>service worker</em> fuera de tus páginas normales para controlar su carga.</p>\n<p>Un solo <em>service worker</em> puede controlar muchas páginas. Cada vez que se carga una página dentro de su alcance, el <em>service worker</em> se instala en esa página y opera en ella. Por lo tanto, ten en cuenta que debes tener cuidado con las variables globales en el script del <em>service worker</em>: cada página no tiene su propio trabajador único.</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Nota:</strong> Tu <em>service worker</em> funciona como un servidor proxy, lo que te permite modificar solicitudes y respuestas, reemplazarlas con elementos de su propio caché y más.</p>\n</div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Nota:</strong> Una gran cosa acerca del <em>service worker</em> es que si usas la detección de funciones como se muestra arriba, los navegadores que no son compatibles con los <em>service workers</em> pueden usar tu aplicación en línea de la manera normal esperada. Además, si usas <em>AppCache</em> y <abbr title=\"ServiceWorker\">SW</abbr> en una página, los navegadores que no admiten <abbr title=\"ServiceWorker\">SW</abbr> pero sí <em>AppCache</em> lo usarán, y los navegadores que admiten ambos ignorarán <em>AppCache</em> y dejarán que <abbr title=\"ServiceWorker\">SW</abbr> tome el control.</p>\n</div>\n<h4 id=\"¿por_qué_mi_service_worker_no_se_registra\">¿Por qué mi <em>service worker</em>&nbsp;no se registra?</h4>\n<p>Esto se podría deber a las siguientes razones:</p>\n<ol>\n  <li>No estás ejecutando tu aplicación a través de HTTPS.</li>\n  <li>La ruta a tu archivo del <em>service worker</em> no está escrita correctamente — se debe escribir en relación con el origen, no con el directorio raíz de tu aplicación. En nuestro ejemplo, el trabajador está en <code>https://bncb2v.csb.app/sw.js</code> y la raíz de la aplicación es <code>https://bncb2v.csb.app/</code>. Pero la ruta se debe escribir como <code>/sw.js</code>.</li>\n  <li>Tampoco está permitido apuntar a un <em>service worker</em> de un origen diferente al de tu aplicación.</li>\n</ol>\n<p>\n  <img src=\"/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers/important-notes.png\" alt=\"\" width=\"574\" height=\"277\" loading=\"lazy\">\n</p>\n<p>También ten en cuenta:</p>\n<ul>\n  <li>El <em>service worker</em> solo capturará las solicitudes de los clientes bajo el alcance del <em>service worker</em>.</li>\n  <li>El alcance máximo para un <em>service worker</em> es la ubicación del trabajador.</li>\n  <li>Si tu <em>service worker</em> está activo en un cliente al que se atiende con el encabezado <code>Service-Worker-Allowed</code>, puedes especificar una lista de alcances máximos para ese trabajador.</li>\n  <li>En Firefox, las APIs de <em>Service Worker</em> están ocultas y no se pueden usar cuando el usuario está en <a href=\"https://support.mozilla.org/es/kb/private-browsing-use-firefox-without-history\" class=\"external\" rel=\" noopener\">modo de navegación privada</a>.</li>\n</ul>","titleAsText":"Registra a tu worker"}},{"type":"prose","value":{"id":"instalar_y_activar_llena_tu_caché","title":"Instalar y activar: llena tu caché","isH3":true,"content":"<p>Después de que tu <em>service worker</em> esté registrado, el navegador intentará instalar y luego activar el <em>service worker</em> para tu página/sitio.</p>\n<p>El evento <code>install</code> se activa cuando una instalación se completa con éxito. El evento <code>install</code> generalmente se usa para llenar las capacidades de almacenamiento en caché sin conexión de tu navegador con los activos que necesita para ejecutar tu aplicación sin conexión. Para hacer esto, usamos la API de almacenamiento de <em>Service Worker</em>: <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Cache\"><code>cache</code> <small>(en-US)</small></a> — un objeto global en <em>Service Worker</em> que nos permite almacenar los activos entregados por las respuestas y con clave de sus solicitudes. Esta API funciona de manera similar a la memoria caché estándar del navegador, pero es específica para tu dominio. Persiste hasta que le dices que no lo haga — nuevamente, tienes el control total.</p>\n<p>Así es como nuestro <em>service worker</em> maneja el evento <code>install</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addResourcesToCache</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resources</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>resources<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"install\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">addResourcesToCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/index.html\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/style.css\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/app.js\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/image-list.js\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/star-wars-logo.jpg\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/gallery/bountyHunters.jpg\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/gallery/myLittleVader.jpg\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/gallery/snowTroopers.jpg\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<ol>\n  <li>Aquí agregamos un detector de eventos <code>install</code> al <em>service worker</em> (por lo tanto, <code>self</code>), y luego encadenamos un método <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ExtendableEvent/waitUntil\"><code>ExtendableEvent.waitUntil()</code> <small>(en-US)</small></a> al evento; esto garantiza que el <em>service worker</em> no se instale hasta que el código dentro de <code>waitUntil()</code> haya ocurrido con éxito.</li>\n  <li>Dentro de <code>addResourcesToCache</code> usamos el método <a href=\"/es/docs/Web/API/CacheStorage/open\"><code>caches.open()</code></a> para crear un nuevo caché llamado <code>v1</code>, que será la versión 1 de nuestro caché de recursos del sitio. Luego llamamos a una función que llama a <code>addAll()</code> en el caché creado, que para su parámetro toma un arreglo de URLs relativas al origen de todos los recursos que deseas almacenar en caché.</li>\n  <li>Si se rechaza la promesa, la instalación falla y el trabajador no hará nada. Esto está bien, ya que puedes corregir tu código y luego intentarlo de nuevo la próxima vez que se registre.</li>\n  <li>Después de una instalación exitosa, el <em>service worker</em> se activa. Esto no tiene mucho de un uso distinto la primera vez que se instala/activa tu <em>service worker</em>, pero significa más cuando se actualiza el <em>service worker</em> (consulta la sección <a href=\"#actualizar_tu_service_worker\">Actualizar tu <em>service worker</em></a> más adelante).</li>\n</ol>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>Nota:</strong> <a href=\"/es/docs/Web/API/Web_Storage_API\">localStorage</a> funciona de manera similar a la memoria caché del <em>service worker</em>, pero es síncrono, por lo que no está permitido en el <em>service worker</em>.</p>\n</div>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>Nota:</strong> <a href=\"/es/docs/Web/API/IndexedDB_API\">IndexedDB</a> se puede usar dentro de un <em>service worker</em> para el almacenamiento de datos si lo requieres.</p>\n</div>"}},{"type":"prose","value":{"id":"respuestas_personalizadas_a_solicitudes","title":"Respuestas personalizadas a solicitudes","isH3":true,"content":"<p>Ahora que tienes los activos de tu sitio almacenados en caché, debes decir al <em>service worker</em> que haga algo con el contenido almacenado en caché. Esto se hace fácilmente con el evento <code>fetch</code>.</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers/sw-fetch.png\" alt=\"\" width=\"579\" height=\"494\" loading=\"lazy\">\n</p>\n<p>Un evento <code>fetch</code> se activa cada vez que se recupera cualquier recurso controlado por un <em>service worker</em>, lo que incluye los documentos dentro del alcance especificado y cualquier recurso al que se haga referencia en esos documentos (por ejemplo, si <code>index.html</code> hace una solicitud de origen cruzado para incrustar una imagen, que todavía pasa por su <em>service worker</em>).</p>\n<p>Puedes adjuntar un detector de eventos <code>fetch</code> al <em>service worker</em>, luego llamar al método <code>respondWith()</code> en el evento para capturar nuestras respuestas HTTP y actualizarlas con tu propia magia.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetch\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event\n    <span class=\"token punctuation\">.</span>respondWith\n    <span class=\"token comment\">// la magia va aquí</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Podríamos empezar respondiendo con el recurso cuya URL coincida con la de la solicitud de red, en cada caso:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetch\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>caches.match(event.request)</code> nos permite hacer coincidir cada recurso solicitado de la red con el recurso equivalente disponible en caché, si hay uno coincidente disponible. La coincidencia se realiza a través de URL y varios encabezados, al igual que con las solicitudes HTTP normales.</p>\n<p>Veamos algunas otras opciones que tenemos al definir nuestra magia (consulta nuestra <a href=\"/es/docs/Web/API/Fetch_API\">documentación de la API Fetch</a> para obtener más información sobre los objetos <a href=\"/es/docs/Web/API/Request\"><code>Request</code></a> y <a href=\"/es/docs/Web/API/Response\"><code>Response</code></a>.)</p>\n<ol>\n  <li>El constructor <a href=\"/es/docs/Web/API/Response/Response\" title=\"Response()\"><code>Response()</code></a> te permite crear una respuesta personalizada. En este caso, solo estamos devolviendo una cadena de texto simple:\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"¡Hola desde tu amigable vecindario del service worker!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>Esta <code>Response</code> más compleja a continuación muestra que, opcionalmente, puedes pasar un conjunto de encabezados con tu respuesta, emulando los encabezados de respuesta HTTP estándar. Aquí solo le estamos diciendo al navegador cuál es el tipo de contenido de nuestra respuesta sintética:\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"&lt;p&gt;¡Hola desde tu amigable vecindario del service worker!&lt;/p&gt;\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/html\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>Si no se encontró una coincidencia en caché, le puedes decir al navegador que <a href=\"/es/docs/Web/API/fetch\"><code>fetch()</code></a> la solicitud de red predeterminada para ese recurso, para obtener el nuevo recurso de la red si está disponible:\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>Si no se encontró una coincidencia en caché y la red no está disponible, puedes hacer coincidir la solicitud con algún tipo de página de respaldo predeterminada como respuesta usando <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CacheStorage/match\"><code>match() </code> <small>(en-US)</small></a>, como esta:\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./fallback.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>Puedes recuperar mucha información sobre cada solicitud llamando a los parámetros del objeto <a href=\"/es/docs/Web/API/Request\"><code>Request</code></a> devuelto por <a href=\"/es/docs/Web/API/FetchEvent\"><code>FetchEvent</code></a>:\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">;</span>\nevent<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">;</span>\nevent<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">;</span>\nevent<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n</ol>"}},{"type":"prose","value":{"id":"recuperar_solicitudes_fallidas","title":"Recuperar solicitudes fallidas","isH3":false,"content":"<p>Entonces <code>caches.match(event.request)</code> es excelente cuando hay una coincidencia en caché del <em>service worker</em>, pero ¿qué pasa con los casos en los que no hay una coincidencia? Si no proporcionamos ningún tipo de manejo de fallas, nuestra promesa se resolvería con <code>undefined</code> y no tendríamos nada devuelto.</p>\n<p>Afortunadamente, la estructura basada en promesas del <em>service worker</em> hace que sea trivial brindar más opciones hacia el éxito. Podríamos hacer esto:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cacheFirst</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> responseFromCache <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>responseFromCache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> responseFromCache<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetch\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">cacheFirst</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Si los recursos no están en la memoria caché, se solicitan desde la red.</p>\n<p>Si fuéramos realmente inteligentes, no solo solicitaríamos el recurso de la red; ¡también lo guardaríamos en caché para que las solicitudes posteriores de ese recurso también se puedan recuperar sin conexión! Esto significaría que si se agregaran imágenes adicionales a la galería de Star Wars, nuestra aplicación podría capturarlas automáticamente y almacenarlas en caché. Lo siguiente haría el truco:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">putInCache</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cacheFirst</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> responseFromCache <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>responseFromCache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> responseFromCache<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> responseFromNetwork <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">putInCache</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> responseFromNetwork<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> responseFromNetwork<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetch\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">cacheFirst</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Si la URL de la solicitud no está disponible en la memoria caché, solicitamos el recurso de la solicitud de red con <code>await fetch(request)</code>. Después de eso, colocamos en caché un clon de la respuesta. La función <code>putInCache</code> usa <code>caches.open('v1')</code> y <code>cache.put()</code> para agregar el recurso a la caché. La respuesta original se devuelve al navegador para que se proporcione a la página que la llamó.</p>\n<p>La clonación de la respuesta es necesaria porque los flujos de solicitud y respuesta solo se pueden leer una vez. Para devolver la respuesta al navegador y ponerla en caché la tenemos que clonar. Entonces, el original se devuelve al navegador y el clon se envía a caché. Cada uno se lee una vez.</p>\n<p>Lo que puede parecer un poco extraño es que no se espera la promesa devuelta por <code>putInCache</code>. Pero la razón es que no queremos esperar hasta que el clon de respuesta se haya agregado a la caché antes de devolver una respuesta.</p>\n<p>El único problema que tenemos ahora es que si la solicitud no coincide con nada en caché y la red no está disponible, nuestra solicitud seguirá fallando. Proporcionemos un respaldo predeterminado para que, pase lo que pase, el usuario al menos obtenga algo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">putInCache</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cacheFirst</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> preloadResponsePromise<span class=\"token punctuation\">,</span> fallbackUrl <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Primero intenta obtener el recurso desde caché</span>\n  <span class=\"token keyword\">const</span> responseFromCache <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>responseFromCache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> responseFromCache<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// A continuación, intenta obtener el recurso desde la red</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> responseFromNetwork <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// la respuesta solo se puede usar una vez</span>\n    <span class=\"token comment\">// necesitamos guardar el clon para poner una copia en caché</span>\n    <span class=\"token comment\">// y servir el segundo</span>\n    <span class=\"token function\">putInCache</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> responseFromNetwork<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> responseFromNetwork<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fallbackResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>fallbackUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fallbackResponse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> fallbackResponse<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// cuando incluso la respuesta alternativa no está disponible,</span>\n    <span class=\"token comment\">// no hay nada que podamos hacer, pero siempre debemos</span>\n    <span class=\"token comment\">// devolver un objeto Response</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ocurrió un error de red\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token number\">408</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/plain\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetch\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">cacheFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">request</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">fallbackUrl</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/gallery/myLittleVader.jpg\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Hemos optado por esta imagen alternativa porque las únicas actualizaciones que probablemente fallarán son las imágenes nuevas, ya que todo lo demás depende de la instalación en el detector de eventos <code>install</code> que vimos anteriormente.</p>"}},{"type":"prose","value":{"id":"precarga_de_navegación_del_service_worker","title":"Precarga de navegación del <em>service worker</em>","isH3":false,"content":"<p>\n  Si está habilitada, la función <a href=\"/en-US/docs/Web/API/NavigationPreloadManager\" class=\"only-in-en-us\" title=\"Actualmente solo disponible en inglés (US)\">precarga de navegación (en-US)</a> comienza a descargar recursos tan pronto como se realiza la solicitud de recuperación y en paralelo con el inicio del <em>service worker</em>.\n  Esto garantiza que la descarga comience de inmediato al navegar a una página, en lugar de tener que esperar hasta que se inicie el <em>service worker</em>.\n  Ese retraso ocurre en muy raras ocasiones, pero es inevitable cuando ocurre y puede ser significativo.\n</p>\n<p>Primero, la función debe estar habilitada durante la activación del <em>service worker</em>, usando <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/NavigationPreloadManager/enable\"><code>registration.navigationPreload.enable()</code> <small>(en-US)</small></a>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">enableNavigationPreload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>registration<span class=\"token punctuation\">.</span>navigationPreload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ¡Habilitar precargas de navegación!</span>\n    <span class=\"token keyword\">await</span> self<span class=\"token punctuation\">.</span>registration<span class=\"token punctuation\">.</span>navigationPreload<span class=\"token punctuation\">.</span><span class=\"token function\">enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"activate\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span><span class=\"token function\">enableNavigationPreload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Luego usa <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/FetchEvent/preloadResponse\"><code>event.preloadResponse</code> <small>(en-US)</small></a> para esperar a que el recurso precargado se termine de descargar en el controlador de eventos <code>fetch</code>.</p>\n<p>Continuando con el ejemplo de las secciones anteriores, insertamos el código para esperar el recurso precargado después de la verificación de la caché y antes de recuperarlo de la red si eso no tiene éxito.</p>\n<p>El nuevo proceso es:</p>\n<ol>\n  <li>Comprobar la caché</li>\n  <li>\n    Esperar en <code>event.preloadResponse</code>, que se pasa como <code>preloadResponsePromise</code> a la función <code>cacheFirst</code>.\n    Guardar en caché el resultado si regresa.\n  </li>\n  <li>Si ninguno de estos está definido, vamos a la red.</li>\n</ol>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addResourcesToCache</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resources</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>resources<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">putInCache</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cacheFirst</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> preloadResponsePromise<span class=\"token punctuation\">,</span> fallbackUrl <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Primero intenta obtener el recurso desde caché</span>\n  <span class=\"token keyword\">const</span> responseFromCache <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>responseFromCache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> responseFromCache<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// A continuación, intenta usar (y almacenar en caché) la respuesta precargada, si está allí</span>\n  <span class=\"token keyword\">const</span> preloadResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> preloadResponsePromise<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preloadResponse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"using preload response\"</span><span class=\"token punctuation\">,</span> preloadResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">putInCache</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> preloadResponse<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> preloadResponse<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// A continuación, intenta obtener el recurso desde la red</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> responseFromNetwork <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// la respuesta solo se puede usar una vez</span>\n    <span class=\"token comment\">// necesitamos guardar el clon para poner una copia en caché</span>\n    <span class=\"token comment\">// y servir el segundo</span>\n    <span class=\"token function\">putInCache</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> responseFromNetwork<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> responseFromNetwork<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fallbackResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>fallbackUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fallbackResponse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> fallbackResponse<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// cuando incluso la respuesta alternativa no está disponible,</span>\n    <span class=\"token comment\">// no hay nada que podamos hacer, pero siempre debemos</span>\n    <span class=\"token comment\">// devolver un objeto Response</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ocurrió un error de red\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token number\">408</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/plain\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Habilita la precarga de navegación</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">enableNavigationPreload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>registration<span class=\"token punctuation\">.</span>navigationPreload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ¡Habilitar precargas de navegación!</span>\n    <span class=\"token keyword\">await</span> self<span class=\"token punctuation\">.</span>registration<span class=\"token punctuation\">.</span>navigationPreload<span class=\"token punctuation\">.</span><span class=\"token function\">enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"activate\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span><span class=\"token function\">enableNavigationPreload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"install\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">addResourcesToCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/index.html\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/style.css\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/app.js\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/image-list.js\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/star-wars-logo.jpg\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/gallery/bountyHunters.jpg\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/gallery/myLittleVader.jpg\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/gallery/snowTroopers.jpg\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetch\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">cacheFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">request</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">preloadResponsePromise</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>preloadResponse<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">fallbackUrl</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/gallery/myLittleVader.jpg\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  Ten en cuenta que en este ejemplo descargamos y almacenamos en caché los mismos datos para el recurso, ya sea que se descargue \"normalmente\" o se precargue.\n  En su lugar, puedes optar por descargar y almacenar en caché un recurso diferente en la precarga.\n  Para obtener más información, consulta <a href=\"/en-US/docs/Web/API/NavigationPreloadManager#custom_responses\" class=\"only-in-en-us\" title=\"Actualmente solo disponible en inglés (US)\">NavigationPreloadManager &gt; Respuestas personalizadas (en-US)</a>.\n</p>","titleAsText":"Precarga de navegación del service worker"}},{"type":"prose","value":{"id":"actualizar_tu_service_worker","title":"Actualizar tu <em>service worker</em>","isH3":false,"content":"<p>Si tu <em>service worker</em> se instaló anteriormente, pero luego está disponible una nueva versión del trabajador al actualizar o cargar la página, la nueva versión se instala en segundo plano, pero aún no está activada. Solo se activa cuando ya no hay páginas cargadas que todavía estén usando el antiguo <em>service worker</em>. Tan pronto como no queden más páginas cargadas, se activa el nuevo <em>service worker</em>.</p>\n<p>Querrás actualizar tu escucha de eventos <code>install</code> en el nuevo <em>service worker</em> a algo como esto (observa el nuevo número de versión):</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addResourcesToCache</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resources</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"v2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>resources<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"install\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">addResourcesToCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/index.html\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/style.css\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/app.js\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"/image-list.js\"</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// ...</span>\n\n      <span class=\"token comment\">// incluir otros nuevos recursos para la nueva versión…</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Mientras esto sucede, la versión anterior sigue siendo responsable de las recuperaciones. La nueva versión se está instalando en segundo plano. Estamos llamando al nuevo caché <code>v2</code>, por lo que el caché anterior <code>v1</code> no se ve afectado.</p>\n<p>Cuando ninguna página está usando la versión actual, el nuevo trabajador se activa y se vuelve responsable de las recuperaciones.</p>","titleAsText":"Actualizar tu service worker"}},{"type":"prose","value":{"id":"eliminar_cachés_antiguos","title":"Eliminar cachés antiguos","isH3":true,"content":"<p>También obtienes un evento <code>activate</code>. Esto generalmente se usa para hacer cosas que habrían roto la versión anterior mientras aún se estaba ejecutando, por ejemplo, deshacerse de los cachés antiguos. Esto también es útil para eliminar datos que ya no se necesitan para evitar llenar demasiado espacio en disco: cada navegador tiene un límite estricto en la cantidad de almacenamiento en caché que puede usar un determinado <em>service worker</em>. El navegador hace todo lo posible para administrar el espacio en disco, pero puede eliminar el almacenamiento en caché de un origen. El navegador, generalmente, eliminará todos los datos de un origen o ninguno de los datos de un origen.</p>\n<p>Las promesas pasadas a <code>waitUntil()</code> bloquearán otros eventos hasta que se completen, por lo que puedes estar seguro de que tu operación de limpieza se habrá completado cuando obtengas tu primer evento <code>fetch</code> en el nuevo <em>service worker</em>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">deleteCache</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">deleteOldCaches</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cacheKeepList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"v2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> keyList <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> cachesToDelete <span class=\"token operator\">=</span> keyList<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">!</span>cacheKeepList<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>cachesToDelete<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>deleteCache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"activate\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span><span class=\"token function\">deleteOldCaches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"herramientas_de_desarrollo","title":"Herramientas de desarrollo","isH3":false,"content":"<p>Chrome tiene <code>chrome://inspect/#service-workers</code>, que muestra la actividad actual de los <em>service workers</em> y el almacenamiento en un dispositivo, y <code>chrome://serviceworker-internals</code>, que muestra más detalles y te permite iniciar/detener/depurar el proceso del trabajador. En el futuro, tendrán modos de limitación/desconexión para simular conexiones defectuosas o inexistentes, lo que será algo realmente bueno.</p>\n<p>Firefox también ha comenzado a implementar algunas herramientas útiles relacionadas con los <em>service workers</em>:</p>\n<ul>\n  <li>Puedes navegar a <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/about_colon_debugging/index.html\" class=\"external\" rel=\" noopener\"><code>about:debugging</code></a> para ver qué <abbr title=\"Service Workers\">SW</abbr>s están registrados y actualizarlos/eliminarlos.</li>\n  <li>Al realizar pruebas, puedes sortear la restricción de HTTPS marcando la opción \"Habilitar <em>service worker</em> a través de HTTP (cuando la caja de herramientas está abierta)\" en la <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/settings/index.html\" class=\"external\" rel=\" noopener\">Configuración de herramientas de desarrollo de Firefox</a>.</li>\n  <li>El botón \"Olvidar\", disponible en las opciones de personalización de Firefox, se puede usar para borrar los <em>service workers</em> y sus cachés (<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1252998\" class=\"external\" rel=\" noopener\">error&nbsp;1252998</a>).</li>\n</ul>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>Nota:</strong> Puedes servir tu aplicación desde <code>http://localhost</code> (por ejemplo, usando <code>me@localhost:/my/app$ python -m SimpleHTTPServer</code>) para el desarrollo local. Ve <a href=\"https://www.w3.org/TR/service-workers/#security-considerations\" class=\"external\" rel=\" noopener\">Consideraciones de seguridad</a></p>\n</div>"}},{"type":"prose","value":{"id":"véase_también","title":"Véase también","isH3":false,"content":"<ul>\n  <li><a href=\"https://github.com/mdn/serviceworker-cookbook\" class=\"external\" rel=\" noopener\">El manual del <em>service worker</em></a></li>\n  <li><a href=\"https://jakearchibald.github.io/isserviceworkerready/\" class=\"external\" rel=\" noopener\">¿Está listo ServiceWorker?</a></li>\n  <li>Descarga la <a href=\"sw101.png\">hoja de trucos de <em>service worker</em> 101</a>.</li>\n  <li><a href=\"/es/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promesas</a></li>\n  <li><a href=\"/es/docs/Web/API/Web_Workers_API/Using_web_workers\">Usar <em>web workers</em></a></li>\n</ul>"}}],"toc":[{"text":"La premisa del <em>service worker</em>","id":"la_premisa_del_service_worker"},{"text":"Configuración para jugar con el <em>service worker</em>","id":"configuración_para_jugar_con_el_service_worker"},{"text":"Arquitectura básica","id":"arquitectura_básica"},{"text":"Demostración del <em>service worker</em>","id":"demostración_del_service_worker"},{"text":"Recuperar solicitudes fallidas","id":"recuperar_solicitudes_fallidas"},{"text":"Precarga de navegación del <em>service worker</em>","id":"precarga_de_navegación_del_service_worker"},{"text":"Actualizar tu <em>service worker</em>","id":"actualizar_tu_service_worker"},{"text":"Herramientas de desarrollo","id":"herramientas_de_desarrollo"},{"text":"Véase también","id":"véase_también"}],"summary":"Este artículo brinda información sobre cómo comenzar con el service worker, incluida la arquitectura básica, el registro de un service worker, el proceso de instalación y activación de un nuevo service worker, la actualización de tu service worker, el control de caché y las respuestas personalizadas, todo en el contexto de una aplicación simple, con funcionalidad fuera de línea.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using Service Workers","locale":"en-US","native":"English (US)"},{"title":"Utiliser les Service Workers","locale":"fr","native":"Français"},{"title":"サービスワーカーの使用","locale":"ja","native":"日本語"},{"title":"Using Service Workers","locale":"ko","native":"한국어"},{"title":"Usando Service Workers","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Использование Service Worker","locale":"ru","native":"Русский"},{"title":"使用 Service Workers","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"es/web/api/service_worker_api/using_service_workers","github_url":"https://github.com/mdn/translated-content/blob/main/files/es/web/api/service_worker_api/using_service_workers/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/es/docs/Web","title":"Tecnología para desarrolladores web"},{"uri":"/es/docs/Web/API","title":"Referencia de la API Web"},{"uri":"/es/docs/Web/API/Service_Worker_API","title":"Service Worker API"},{"uri":"/es/docs/Web/API/Service_Worker_API/Using_Service_Workers","title":"Usar Service Workers"}],"pageTitle":"Usar Service Workers - Referencia de la API Web | MDN","noIndexing":false}}