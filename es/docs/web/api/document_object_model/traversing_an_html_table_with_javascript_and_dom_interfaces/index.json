{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Trazado de una tabla HTML mediante JavaScript y la Interface DOM","mdn_url":"/es/docs/Web/API/Document_Object_Model/Traversing_an_HTML_table_with_JavaScript_and_DOM_Interfaces","locale":"es","native":"Español","sidebarHTML":"","body":[{"type":"prose","value":{"id":"introduction","title":"Introducción","isH3":false,"content":"<p>Este artículo es un resumen de algunos métodos DOM nivel 1 poderosos y fundamentales así como una descripción de cómo utilizarlos utilizando Javascript.  Aprenderás a crear, accesar, controlar, y remover elementos HTML dinámicamente.  Los métodos DOM presentados aquí no son específicos de HTML; también aplican para XML. Las demostraciones aquí proporcionadas funcionarán en cualquier navegador moderno, incluyendo todas las versiones de Firefox e IE 5+.</p>\n\n<div class=\"note notecard\" id=\"sect1\">Los métodos DOM presentados aquí forman parte del Modelo de Documento basado en Objetos (DOM: Document Object Model por sus siglas en inglés) de especificación nivel 1.  DOM nivel 1 incluye métodos tanto para acceso genérico del documento (DOM 1 Core) así como métodos específicos para documentos HTML (DOM 1 HTML).</div>"}},{"type":"prose","value":{"id":"overview_of_sample1.html","title":"Ejemplo: Crear una tabla HTML dinámicamente (<code>Ejemplo1.html</code>)","isH3":false,"content":"","titleAsText":"Ejemplo: Crear una tabla HTML dinámicamente (Ejemplo1.html)"}},{"type":"prose","value":{"id":"contenido_html","title":"Contenido HTML","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Genera una tabla<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">genera_tabla</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"javascript_content","title":"JavaScript Content","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">genera_tabla</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Obtener la referencia del elemento body</span>\n  <span class=\"token keyword\">var</span> body <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Crea un elemento &lt;table&gt; y un elemento &lt;tbody&gt;</span>\n  <span class=\"token keyword\">var</span> tabla   <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"table\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> tblBody <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tbody\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Crea las celdas</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Crea las hileras de la tabla</span>\n    <span class=\"token keyword\">var</span> hilera <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Crea un elemento &lt;td&gt; y un nodo de texto, haz que el nodo de</span>\n      <span class=\"token comment\">// texto sea el contenido de &lt;td&gt;, ubica el elemento &lt;td&gt; al final</span>\n      <span class=\"token comment\">// de la hilera de la tabla</span>\n      <span class=\"token keyword\">var</span> celda <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"td\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> textoCelda <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"celda en la hilera \"</span><span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token string\">\", columna \"</span><span class=\"token operator\">+</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      celda<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>textoCelda<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      hilera<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>celda<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// agrega la hilera al final de la tabla (al final del elemento tblbody)</span>\n    tblBody<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>hilera<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// posiciona el &lt;tbody&gt; debajo del elemento &lt;table&gt;</span>\n  tabla<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>tblBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// appends &lt;table&gt; into &lt;body&gt;</span>\n  body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>tabla<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// modifica el atributo \"border\" de la tabla y lo fija a \"2\";</span>\n  tabla<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"border\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p><iframe class=\"sample-code-frame\" title=\"Overview of Sample1.html sample\" id=\"frame_overview_of_sample1.html\" src=\"https://yari-demos.prod.mdn.mozit.cloud/es/docs/Web/API/Document_Object_Model/Traversing_an_HTML_table_with_JavaScript_and_DOM_Interfaces/_sample_.overview_of_sample1.html.html\" loading=\"lazy\"></iframe></p>\n\n<p>Observa cuidadosamente el orden en el que se crearon los elementos en el nodo de texto:</p>\n\n<ol>\n <li>Primero se crea el elemento &lt;table&gt;.</li>\n <li>Posteriormente, creamos el elemento &lt;tbody&gt; , que es el hijo del elemento &lt;table&gt; .</li>\n <li>Después, utilizamos ciclos para crear los elementos &lt;tr&gt;, que son hijos del elemento &lt;tbody&gt;.</li>\n <li>Para cada elemento &lt;tr&gt;, utilizamos nuevamente ciclos para generar los elementos &lt;td&gt; que son hijos de los elementos &lt;tr&gt;.</li>\n <li>Para cada elemento &lt;td&gt;, creamos nodos de texto con el contenido de cada celda.</li>\n</ol>\n\n<p>Una vez creados los elementos &lt;table&gt;, &lt;tbody&gt;, &lt;tr&gt;, y &lt;td&gt; así como los nodos de texto, adicionamos a cada hijo bajo su padre en el órden opuesto:</p>\n\n<ol>\n <li>Primero, anexamos cada nodo de texto a su elemento padre &lt;td&gt; :\n  <pre class=\"notranslate\">celda.appendChild(textoCelda);</pre>\n </li>\n <li>Posteriormente, anexamos cada elemento &lt;td&gt; a su elemento padre &lt;tr&gt; :\n  <pre class=\"notranslate\">hilera.appendChild(celda);</pre>\n </li>\n <li>Posteriomente, anexamos cada elemento &lt;tr&gt; a su elemento padre &lt;tbody&gt;:\n  <pre class=\"notranslate\">tblBody.appendChild(hilera);</pre>\n </li>\n <li>Después, anexamos el elemento &lt;tbody&gt; a su elemento padre &lt;table&gt;:\n  <pre class=\"notranslate\">tabla.appendChild(tblBody);</pre>\n </li>\n <li>Finalmente, anexamos el elemento &lt;table&gt; a su elemento padre &lt;body&gt;:\n  <pre class=\"notranslate\">body.appendChild(tabla);</pre>\n </li>\n</ol>\n\n<p>Recuérda esta técnica. Te será muy útil en la programación bajo el estándar W3C DOM. Primero, creas los elementos de arriba a abajo; posteriormente adicionas los hijos a los padres de abajo a arriba.</p>\n\n<p>A continuación aparece el código HTML generado por el código JavaScript:</p>\n\n<pre class=\"notranslate\">...\n&lt;table border=\"2\"&gt;\n    &lt;tbody&gt;\n        &lt;tr&gt;&lt;td&gt;celda en la hilera 0, columna 0&lt;/td&gt;&lt;td&gt;celda en la hilera 0, columna 1&lt;/td&gt;&lt;/tr&gt;\n        &lt;tr&gt;&lt;td&gt;celda en la hilera 1, columna 0&lt;/td&gt;&lt;td&gt;celda en la hilera 1, columna 1&lt;/td&gt;&lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n...\n</pre>\n\n<p>Aquí está el árbol de objetos DOM generado por el código del elemento &lt;TABLE&gt; :</p>\n\n<p><img alt=\"Image:sample1-tabledom.jpg\" src=\"/@api/deki/files/833/=Sample1-tabledom.jpg\" loading=\"lazy\"></p>\n\n<p>Tú puedes construir esta tabla y sus elementos internos utilizando sólo algunos de los varios métodos del DOM. Recuerda tener en mente el modelo de la estructura que planeas crear; esto hará mucho más fácil la escritura del código necesario.</p>\n\n<p>En el árbol del elemento &lt;table&gt; de la Figura 1, el elemento &lt;table&gt; tiene solamente un hijo mientras que &lt;tbody&gt; tiene dos.  A su vez, cada hijo de &lt;tbody&gt; tiene dos hijos. Finalmente, cada elemento &lt;td&gt; tiene sólo uno, el nodo de texto.</p>"}},{"type":"prose","value":{"id":"setting_background_of_a_paragraph","title":"Ejemplo: Configuración del color de fondo de un párrafo","isH3":false,"content":"<p><code>getElementsByTagName(tagNameValue)</code> es un método disponible en cualquier elemento DOM o el elemento raíz del documento. Cuando se le llama, devolverá una matriz con todos los descendientes de elementos que coincidan con el nombre de la etiqueta. El primer elemento de la lista se encuentra en la posición [0] de la matriz.</p>"}},{"type":"prose","value":{"id":"html_content","title":"HTML Content","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Set paragraph background color<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">set_background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>hi<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>hello<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>"}},{"type":"prose","value":{"id":"javascript_content_2","title":"JavaScript Content","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">set_background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// get a list of all the body elements (there will only be one),</span>\n  <span class=\"token comment\">// and then select the zeroth (or first) such element</span>\n  myBody <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// now, get all the p elements that are descendants of the body</span>\n  myBodyElements <span class=\"token operator\">=</span> myBody<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// get the second item of the list of p elements</span>\n  myP <span class=\"token operator\">=</span> myBodyElements<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  myP<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> <span class=\"token string\">\"rgb(255,0,0)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n\n<p><iframe class=\"sample-code-frame\" title=\"Setting background of a paragraph sample\" id=\"frame_setting_background_of_a_paragraph\" src=\"https://yari-demos.prod.mdn.mozit.cloud/es/docs/Web/API/Document_Object_Model/Traversing_an_HTML_table_with_JavaScript_and_DOM_Interfaces/_sample_.setting_background_of_a_paragraph.html\" loading=\"lazy\"></iframe></p>\n\n<p>En este ejemplo, establecemos la variable <code>myP</code> en el objeto DOM para el segundo elemento<code>p</code> dentro del body:</p>\n\n<ol>\n <li>Primero, obtendremos una lista de todos los elementos body mediante\n  <pre class=\"notranslate\">myBody = document.getElementsByTagName(\"body\")[0]</pre>\n  Como en cualquier documento HTML sólo hay un elemento body válido, esta lista tendrá sólo un elemento, que recuperamos seleccionando el primer elemento de esa lista usando <code>[0]</code>.</li>\n <li>Luego, obtenemos todos los elementos p que son descendientes del body mediante\n  <pre class=\"notranslate\">myBodyElements = myBody.getElementsByTagName(\"p\");</pre>\n </li>\n <li>Finalmente, obtenemos el segundo item de la lista de elementos p mediante\n  <pre class=\"notranslate\">myP = myBodyElements[1];</pre>\n </li>\n</ol>\n\n<p><img alt=\"Image:sample2a2.jpg\" src=\"/@api/deki/files/834/=Sample2a2.jpg\" loading=\"lazy\"></p>\n\n<p>Una vez que haya obtenido el objeto DOM para un elemento HTML, puede establecer sus propiedades. Por ejemplo, si desea establecer la propiedad estilo de color de fondo, agregue:</p>\n\n<pre class=\"notranslate\">myP.style.background = \"rgb(255,0,0)\";\n// setting inline STYLE attribute\n</pre>"}},{"type":"prose","value":{"id":"creating_textnodes_with_document.createtextnode.28.22...22.29","title":"Creating TextNodes with <code>document.createTextNode(\"..\")</code>","isH3":true,"content":"<p>Use the document object to invoke the createTextNode method and create your text node. You just need to pass the text content. The return value is an object that represents the text node.</p>\n\n<pre class=\"notranslate\">myTextNode = document.createTextNode(\"world\");\n</pre>\n\n<p>This means that you have created a node of the type TEXT_NODE (a piece of text) whose text data is \"world\", and myTextNode is your reference to this node object. To insert this text into your HTML page, you need to make this text node a child of some other node element.</p>","titleAsText":"Creating TextNodes with document.createTextNode(\"..\")"}},{"type":"prose","value":{"id":"inserting_elements_with_appendchild.28...29","title":"Inserting Elements with appendChild(..)","isH3":true,"content":"<p>So, by calling myP.appendChild([node_element]), you are making the element a new child of the second &lt;p&gt; element.</p>\n\n<pre class=\"notranslate\">myP.appendChild(myTextNode);\n</pre>\n\n<p>After testing this sample, note that the words hello and world are together: helloworld. So visually, when you see the HTML page it seems like the two text nodes hello and world are a single node, but remember that in the document model, there are two nodes. The second node is a new node of type TEXT_NODE, and it is the second child of the second &lt;p&gt; tag. The following figure shows the recently created Text Node object inside the document tree.</p>\n\n<p><img alt=\"Image:sample2b2.jpg\" src=\"/@api/deki/files/835/=Sample2b2.jpg\" loading=\"lazy\"></p>\n\n<div class=\"note notecard\" id=\"sect2\">createTextNode and appendChild is a simple way to include white space between the words hello and world. Another important note is that the appendChild method will append the child after the last child, just like the word world has been added after the word hello. So if you want to append a Text Node between hello and world you will need to use insertBefore instead of appendChild.</div>"}},{"type":"prose","value":{"id":"creating_new_elements_with_the_document_object_and_the_createelement.28...29_method","title":"Creating New Elements with the document object and the <code>createElement(..)</code> method","isH3":true,"content":"<p>You can create new HTML elements or any other element you want with createElement. For example, if you want to create a new &lt;p&gt; element as a child of the &lt;body&gt; element, you can use the myBody in the previous example and append a new element node. To create a node simply call <code>document.createElement(\"tagname\")</code>. For example:</p>\n\n<pre class=\"notranslate\">myNewPTAGnode = document.createElement(\"p\");\nmyBody.appendChild(myNewPTAGnode);\n</pre>\n\n<p><img alt=\"Image:sample2c.jpg\" src=\"/@api/deki/files/836/=Sample2c.jpg\" loading=\"lazy\"></p>","titleAsText":"Creating New Elements with the document object and the createElement(..) method"}},{"type":"prose","value":{"id":"removing_nodes_with_the_removechild.28...29_method","title":"Removing nodes with the <code>removeChild(..)</code> method","isH3":true,"content":"<p>Nodes can be removed. The following code removes text node <code>myTextNode</code> (containing the word \"world\") from the second <code>&lt;p&gt;</code> element, <code>myP</code>.</p>\n\n<pre class=\"notranslate\">myP.removeChild(myTextNode);\n</pre>\n\n<p>Text node <code>myTextNode</code> (containing the word \"world\") still exists. The following code attaches <code>myTextNode</code> to the recently created <code>&lt;p&gt;</code> element, <code>myNewPTAGnode</code>.</p>\n\n<pre class=\"notranslate\">myNewPTAGnode.appendChild(myTextNode);\n</pre>\n\n<p>The final state for the modified object tree looks like this:</p>\n\n<p><img alt=\"Image:sample2d.jpg\" src=\"/@api/deki/files/837/=Sample2d.jpg\" loading=\"lazy\"></p>","titleAsText":"Removing nodes with the removeChild(..) method"}},{"type":"prose","value":{"id":"creating_a_table_dynamically_.28back_to_sample1.html.29","title":"Creating a table dynamically (back to Sample1.html)","isH3":false,"content":"<p>For the rest of this article we will continue working with sample1.html. The following figure shows the table object tree structure for the table created in the sample.</p>"}},{"type":"prose","value":{"id":"reviewing_the_html_table_structure","title":"Reviewing the HTML Table structure","isH3":true,"content":"<p><img alt=\"Image:sample1-tabledom.jpg\" src=\"/@api/deki/files/833/=Sample1-tabledom.jpg\" loading=\"lazy\"></p>"}},{"type":"prose","value":{"id":"creating_element_nodes_and_inserting_them_into_the_document_tree","title":"Creating element nodes and inserting them into the document tree","isH3":true,"content":"<p>The basic steps to create the table in sample1.html are:</p>\n\n<ul>\n <li>Get the body object (first item of the document object).</li>\n <li>Create all the elements.</li>\n <li>Finally, append each child according to the table structure (as in the above figure). The following source code is a commented version for the sample1.html.</li>\n</ul>\n\n<div class=\"note notecard\" id=\"sect3\">At the end of the start function there is a new line of code. The table's border property was set using another DOM method, <code>setAttribute</code>. setAttribute has two arguments: the attribute name and the attribute value. You can set any attribute of any element using the setAttribute method.</div>\n\n<div class=\"code-example\"><pre class=\"brush:html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Sample code - Traversing an HTML Table with JavaScript and DOM Interfaces<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">function</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// get the reference for the body</span>\n        <span class=\"token keyword\">var</span> mybody <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// creates &lt;table&gt; and &lt;tbody&gt; elements</span>\n        mytable     <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"table\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mytablebody <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tbody\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// creating all cells</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// creates a &lt;tr&gt; element</span>\n            mycurrent_row <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// creates a &lt;td&gt; element</span>\n                mycurrent_cell <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"td\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// creates a Text Node</span>\n                currenttext <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cell is row \"</span> <span class=\"token operator\">+</span> j <span class=\"token operator\">+</span> <span class=\"token string\">\", column \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// appends the Text Node we created into the cell &lt;td&gt;</span>\n                mycurrent_cell<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>currenttext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// appends the cell &lt;td&gt; into the row &lt;tr&gt;</span>\n                mycurrent_row<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>mycurrent_cell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// appends the row &lt;tr&gt; into &lt;tbody&gt;</span>\n            mytablebody<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>mycurrent_row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// appends &lt;tbody&gt; into &lt;table&gt;</span>\n        mytable<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>mytablebody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// appends &lt;table&gt; into &lt;body&gt;</span>\n        mybody<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>mytable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// sets the border attribute of mytable to 2;</span>\n        mytable<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"border\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onload</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>"}},{"type":"prose","value":{"id":"manipulating_the_table_with_dom_and_css","title":"Manipulating the table with DOM and CSS","isH3":false,"content":""}},{"type":"prose","value":{"id":"getting_a_text_node_from_the_table","title":"Getting a text node from the table","isH3":true,"content":"<p>This example introduces two new DOM attributes. First it uses the <code>childNodes</code> attribute to get the list of child nodes of mycel. The <code>childNodes</code> list includes all child nodes, regardless of what their name or type is. Like getElementsByTagName(), it returns a list of nodes. The differences are that (a) getElementsByTagName() only returns elements of the specified tag name; and (b) getElementsByTagName() returns descendants at any level, not just immediate children. Once you have the returned list, use <code>[x]</code> method to retrieve the desired child item. This example stores in myceltext the text node of the second cell in the second row of the table. Then, to display the results in this example, it creates a new text node whose content is the data of myceltext and appends it as a child of the &lt;body&gt; element.</p>\n\n<div class=\"note notecard\" id=\"sect4\">If your object is a text node, you can use the data attribute and retrieve the text content of the node.</div>\n\n<div class=\"code-example\"><pre class=\"brush:js notranslate\"><code>mybody      <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmytable     <span class=\"token operator\">=</span> mybody<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"table\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmytablebody <span class=\"token operator\">=</span> mytable<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tbody\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmyrow       <span class=\"token operator\">=</span> mytablebody<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmycel       <span class=\"token operator\">=</span> myrow<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"td\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// first item element of the childNodes list of mycel</span>\nmyceltext<span class=\"token operator\">=</span>mycel<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// content of currenttext is the data content of myceltext</span>\ncurrenttext<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>myceltext<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmybody<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>currenttext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"getting_an_attribute_value","title":"Getting an attribute value","isH3":true,"content":"<p>At the end of sample1 there is a call to setAttribute on the mytable object. This call was used to set the border property of the table. To retrieve the value of the attribute, use the getAttribute method:</p>\n\n<pre class=\"notranslate\">mytable.getAttribute(\"border\");\n</pre>"}},{"type":"prose","value":{"id":"hiding_a_column_by_changing_style_properties","title":"Hiding a column by changing style properties","isH3":true,"content":"<p>Once you have the object in your JavaScript variable, you can set style properties directly. The following code is a modified version of sample1.html in which each cell of the second column is hidden and each cell of the first column is changed to have a red background. Note that the style property was set directly.</p>\n\n<div class=\"code-example\"><pre class=\"brush:html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onload</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">function</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">var</span> mybody <span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n       mytable     <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"table\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       mytablebody <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tbody\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n       <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           mycurrent_row<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n               mycurrent_cell <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"td\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               currenttext <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cell is:\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               mycurrent_cell<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>currenttext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               mycurrent_row<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>mycurrent_cell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token comment\">// set the cell background color</span>\n               <span class=\"token comment\">// if the column is 0. If the column is 1 hide the cel</span>\n               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                   mycurrent_cell<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> <span class=\"token string\">\"rgb(255,0,0)\"</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                   mycurrent_cell<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">}</span>\n           <span class=\"token punctuation\">}</span>\n           mytablebody<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>mycurrent_row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n       mytable<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>mytablebody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       mybody<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>mytable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>"}}],"toc":[{"text":"Introducción","id":"introduction"},{"text":"Ejemplo: Crear una tabla HTML dinámicamente (<code>Ejemplo1.html</code>)","id":"overview_of_sample1.html"},{"text":"Ejemplo: Configuración del color de fondo de un párrafo","id":"setting_background_of_a_paragraph"},{"text":"Creating a table dynamically (back to Sample1.html)","id":"creating_a_table_dynamically_.28back_to_sample1.html.29"},{"text":"Manipulating the table with DOM and CSS","id":"manipulating_the_table_with_dom_and_css"}],"summary":"Este artículo es un resumen de algunos métodos DOM nivel 1 poderosos y fundamentales así como una descripción de cómo utilizarlos utilizando Javascript.  Aprenderás a crear, accesar, controlar, y remover elementos HTML dinámicamente.  Los métodos DOM presentados aquí no son específicos de HTML; también aplican para XML. Las demostraciones aquí proporcionadas funcionarán en cualquier navegador moderno, incluyendo todas las versiones de Firefox e IE 5+.","popularity":0.0028,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Traversing an HTML table with JavaScript and DOM Interfaces","locale":"en-US","native":"English (US)"},{"title":"Explorer un tableau HTML avec des interfaces DOM et JavaScript","locale":"fr","native":"Français"},{"title":"JavaScript と DOM インターフェイスによる HTML の表の操作","locale":"ja","native":"日本語"},{"title":"使用 Javascript 和 DOM Interfaces 来处理 HTML","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"es/web/api/document_object_model/traversing_an_html_table_with_javascript_and_dom_interfaces","github_url":"https://github.com/mdn/translated-content/blob/main/files/es/web/api/document_object_model/traversing_an_html_table_with_javascript_and_dom_interfaces/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/es/docs/Web","title":"Tecnología para desarrolladores web"},{"uri":"/es/docs/Web/API","title":"Referencia de la API Web"},{"uri":"/es/docs/Web/API/Document_Object_Model","title":"Referencia DOM de Gecko"},{"uri":"/es/docs/Web/API/Document_Object_Model/Traversing_an_HTML_table_with_JavaScript_and_DOM_Interfaces","title":"Trazado de una tabla HTML mediante JavaScript y la Interface DOM"}],"pageTitle":"Trazado de una tabla HTML mediante JavaScript y la Interface DOM - Referencia de la API Web | MDN","noIndexing":false}}