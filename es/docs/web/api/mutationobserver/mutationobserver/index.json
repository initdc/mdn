{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"MutationObserver.MutationObserver()","mdn_url":"/es/docs/Web/API/MutationObserver/MutationObserver","locale":"es","native":"Español","sidebarHTML":"<ol><li><strong><a href=\"/es/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><em><code>MutationObserver()</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Métodos</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MutationObserver/disconnect\"><code>disconnect()</code> <small>(en-US)</small></a></li><li><a href=\"/es/docs/Web/API/MutationObserver/observe\"><code>observe()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MutationObserver/takeRecords\"><code>takeRecords()</code> <small>(en-US)</small></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div id=\"sect1\"></div>\n\n<p><span class=\"seoSummary\">El constructor DOM <code><strong>MutationObserver()</strong></code> — parte del interface <a href=\"/es/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a> — </span>crea y devuelve un nuevo objeto <strong>observer </strong>que llamará a la función especificada (callback), cuando tengan lugar cambios sobre el DOM. Estos observadores no se inician inmediatamente; en primer lugar debemos llamar al método <a href=\"/es/docs/Web/API/MutationObserver/observe\" title=\"observe()\"><code>observe()</code></a> para establecer qué parte del DOM observar y que tipo de cambios comunicar.</p>"}},{"type":"prose","value":{"id":"sintaxis","title":"Sintaxis","isH3":false,"content":"<pre class=\"syntaxbox notranslate\">var <em>observer</em> = new MutationObserver(<em>callback</em>);</pre>"}},{"type":"prose","value":{"id":"parámetros","title":"Parámetros","isH3":true,"content":"<dl>\n <dt id=\"callback\"><code>callback</code></dt>\n <dd>La función que será llamada con cada cambio en el DOM, determinado por el nodo, subárbol y opciones. Esta función toma dos parámetros de entrada: un array de objetos <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MutationRecord\"><code>MutationRecord</code> <small>(en-US)</small></a>, con los cambios producidos, y el <code>MutationObserver</code> que llamó a la función. Para mas detalles vea <a href=\"#example\">example</a></dd>\n <dt id=\"sect2\"> </dt>\n</dl>"}},{"type":"prose","value":{"id":"valor_devuelto","title":"Valor devuelto","isH3":true,"content":"<p>Un nuevo objeto <a href=\"/es/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a>, configurado para llamar a una determinada función cuando se producca un cambio en el DOM.</p>"}},{"type":"prose","value":{"id":"ejemplo","title":"Ejemplo","isH3":false,"content":"<p>Este ejemplo crea un nuevo <code>MutationObserver</code> configurado para <em>observar </em>a un nodo y a sus hijos (subárbol), cuando se añadan o eliminen elementos al mismo; tambien observa cualquier cambio en los atributos de los elementos del árbol.</p>"}},{"type":"prose","value":{"id":"la_función_callback","title":"La función callback","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mutationList<span class=\"token punctuation\">,</span> observer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  mutationList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mutation</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>mutation<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'childList'</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">/* Uno o mas hijos han sido añadidos y/o eliminados del árbol;\n           vea mutation.addedNodes y mutation.removedNodes */</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'attributes'</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">/* El valor de un atributo en mutation.target ha cambiado;\n           El nombre del atributo esta en mutation.attributeName y\n           su valor anterior en mutation.oldValue */</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n\n<p>La función <code>callback()</code> es llamada cuando el <strong>observer </strong>detecta cambios que coinciden con la configuración de consulta especificada cuando llamamos a <a href=\"/es/docs/Web/API/MutationObserver/observe\" title=\"observe()\"><code>observe()</code></a> para que inicie la observación.</p>\n\n<p>El tipo de cambio que se produjo (tanto en la lista de hijos como en los atributos) es detectado observando la propiedad <a class=\"page-not-created\" title=\"La documentación acerca de este tema no ha sido escrita todavía . ¡Por favor  considera contribuir !\"><code>mutation.type</code></a></p>"}},{"type":"prose","value":{"id":"crear_e_iniciar_un_observer","title":"Crear e iniciar un  \"observer\"","isH3":true,"content":"<p>Este código establece el proceso de observación</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> targetNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#someElement\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> observerOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">childList</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">attributes</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">subtree</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">//Omita o ponga false si no quiere controlar los cambios en los hijos</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutationObserver</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>targetNode<span class=\"token punctuation\">,</span> observerOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>El subárbol deseado se localiza buscando un elemento cuyo ID es \"someElement\". Un conjunto de opciones para el \"observer\" es establecido en el registro <code>observerOptions</code>. En él, especificamos los valores <code>true </code>tanto para <code>childList</code> como <code>attributes</code>, para obtener la información deseada.</p>\n\n<p>Posteriormente instanciamos el objeto observer, especificando la función <code>callback()</code>, e iniciamos la observación de los nodos del DOM llamando al método <code>observe()</code>, pasandole el nodo y las opciones.</p>\n\n<p>Desde este momento y hasta que se llame al método <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MutationObserver/disconnect\"><code>disconnect()</code> <small>(en-US)</small></a>, la funcion <code>callback()</code> será llamada cada vez que un elemento sea añadido o eliminado del árbol del DOM, cuya raiz es  <code>targetNode</code>, o uno de sus atributos sea cambiado.</p>\n\n<p> </p>"}},{"type":"prose","value":{"id":"specifications","title":"Especificaciones","isH3":false,"content":"<table class=\"standard-table\">\n <thead>\n  <tr>\n   <th scope=\"col\">Especificación</th>\n   <th scope=\"col\">Estado</th>\n   <th scope=\"col\">Comentario</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td><a href=\"https://dom.spec.whatwg.org/#dom-mutationobserver-mutationobserver\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">DOM<br><small lang=\"es\">La definición de 'MutationObserver()' en esta especificación.</small></a></td>\n   <td><span class=\"spec-living\">Living Standard</span></td>\n   <td> </td>\n  </tr>\n </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"Compatibilidad","id":"compatibilidad","isH3":false,"query":"api.MutationObserver.MutationObserver","dataURL":"/es/docs/Web/API/MutationObserver/MutationObserver/bcd.json"}},{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><p></p>"}}],"toc":[{"text":"Sintaxis","id":"sintaxis"},{"text":"Ejemplo","id":"ejemplo"},{"text":"Especificaciones","id":"specifications"},{"text":"Compatibilidad","id":"compatibilidad"}],"summary":"El constructor DOM MutationObserver() — parte del interface MutationObserver — ","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"MutationObserver()","locale":"en-US","native":"English (US)"},{"title":"MutationObserver.MutationObserver()","locale":"ja","native":"日本語"},{"title":"MutationObserver.MutationObserver()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"es/web/api/mutationobserver/mutationobserver","github_url":"https://github.com/mdn/translated-content/blob/main/files/es/web/api/mutationobserver/mutationobserver/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/es/docs/Web","title":"Tecnología para desarrolladores web"},{"uri":"/es/docs/Web/API","title":"Referencia de la API Web"},{"uri":"/es/docs/Web/API/MutationObserver","title":"MutationObserver"},{"uri":"/es/docs/Web/API/MutationObserver/MutationObserver","title":"MutationObserver.MutationObserver()"}],"pageTitle":"MutationObserver.MutationObserver() - Referencia de la API Web | MDN","noIndexing":false}}