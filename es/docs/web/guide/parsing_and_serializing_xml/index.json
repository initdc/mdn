{"doc":{"isMarkdown":false,"isTranslated":true,"isActive":true,"flaws":{},"title":"Convertir código a cadena de texto (serializing) y visceversa (parsing) a un  XML","mdn_url":"/es/docs/Web/Guide/Parsing_and_serializing_XML","locale":"es","native":"Español","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>La plataforma web proveé Los siguientes objetos para hacer parsing (convertir una cadena de texto a código) y serializing (visceversa) a un XML:</p>\n\n<ul>\n <li><a href=\"/en-US/XMLSerializer\" title=\"en/XMLSerializer\">XMLSerializer</a> para convertir a tipo string el  arbol del DOM</li>\n <li><a class=\"internal\" href=\"/en-US/XPath\" title=\"en/XPath\">XPath</a> para apuntar  a diferentes partes de un documento<strong> <a href=\"/en-US/XML\" rel=\"internal\" title=\"en/XML\">XML</a> ( sin seguir la sintaxis XML)  y convertirlas a string.</strong></li>\n <li><a href=\"/en-US/DOM/DOMParser\" title=\"en/DOMParser\">DOMParser</a> para convertir a XML desde un tipo string (texto)<strong> dentro del árbol del DOM </strong></li>\n <li><a href=\"/en-US/nsIXMLHttpRequest\" title=\"en/XMLHttpRequest\">XMLHttpRequest</a> para convertit recursos URL direccionables <strong>en arboles del DOM </strong></li>\n</ul>"}},{"type":"prose","value":{"id":"parte_1_como_crear_un_documento_xml","title":"Parte 1: Como crear un documento XML ","isH3":false,"content":"<p>Usar una de la siguientes opciones para crear un documento XML  (el cual es una instancia de <code>Document</code>).</p>"}},{"type":"prose","value":{"id":"codificando_textos_al_árbol_del_dom","title":"Codificando textos al árbol del DOM","isH3":true,"content":"<div style=\"overflow: hidden;\" id=\"sect1\">\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> miTexto <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;a id=\"a\"&gt;&lt;b id=\"b\"&gt;Hey!&lt;/b&gt;&lt;/a&gt;'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> codigo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DOMParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> oDOM <span class=\"token operator\">=</span> codigo<span class=\"token punctuation\">.</span><span class=\"token function\">parseFromString</span><span class=\"token punctuation\">(</span>miTexto<span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Imprimir el nombre del elemento raiz o un mensaje de error</span>\n<span class=\"token function\">dump</span><span class=\"token punctuation\">(</span>oDOM<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>nodeName <span class=\"token operator\">==</span> <span class=\"token string\">\"parsererror\"</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"error mientras se codificaba\"</span> <span class=\"token operator\">:</span> oDOM<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</div>"}},{"type":"prose","value":{"id":"creando_un_documento_xml_empezando_desde_un_árbol_de_objetos_javascript_(jxon)","title":"Creando un documento XML empezando desde un árbol de Objetos JavaScript (JXON)","isH3":true,"content":"<p>Por favor vea JXON<a class=\"internal\" href=\"/en-US/JXON#reverse_algorithms\" title=\"en/JXON – Reverse Algorithms\"> algoritmos </a>de reversa.</p>"}},{"type":"prose","value":{"id":"codificando_rexursos_de_url_direccionables_en_árboles_del_dom","title":"Codificando rexursos de URL direccionables en árboles del DOM","isH3":true,"content":"<h4 id=\"usando_xmlhttprequest\">Usando XMLHttpRequest</h4>\n\n<p>Aquí hay un código de ejemplo que lee y codifica un archivo XML con  URL direccionable en un árbol del DOM:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseXML<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error mientras se tomaba el XML.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"example.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">\"document\"</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<p><code>xhr.responseXML</code> es una instancia de <a href=\"/es/docs/Web/API/Document\"><code>Document</code></a>.</p>"}},{"type":"prose","value":{"id":"parte_2_como_serializar_el_contenido_de_un_documento_xml","title":"Parte 2: Como serializar el contenido de un documento XML","isH3":false,"content":"<p>Use the following approaches to serialize the contents of the XML document you created in Part 1.</p>"}},{"type":"prose","value":{"id":"serializing_dom_trees_to_strings","title":"Serializing DOM trees to strings","isH3":true,"content":"<p>First, create a DOM tree as described in <a href=\"/en-US/How_to_create_a_DOM_tree\" title=\"en/How_to_create_a_DOM_tree\">How to Create a DOM tree</a>. Alternatively, use a DOM tree obtained from <a href=\"/es/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a>.</p>\n\n<p>Now, let's serialize <code>doc</code> — the DOM tree — to a string:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> oSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> sXML <span class=\"token operator\">=</span> oSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">serializeToString</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>The <code>new XMLSerializer()</code> constructor is not available from within a JS XPCOM component (or a <a class=\"internal\" href=\"/en-US/JavaScript_code_modules\" title=\"En/JavaScript modules\">JS module</a>). Instead, write:</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> oSerializer <span class=\"token operator\">=</span> Components<span class=\"token punctuation\">.</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">\"@mozilla.org/xmlextras/xmlserializer;1\"</span><span class=\"token punctuation\">]</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span>Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>nsIDOMSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> sXML <span class=\"token operator\">=</span> oSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">serializeToString</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n\n<h4 id=\"pretty_serialization_of_dom_trees_to_strings\">\"Pretty\" serialization of DOM trees to strings</h4>\n\n<p>You can <a class=\"external\" href=\"http://en.wikipedia.org/wiki/Pretty-print\" rel=\" noopener\">pretty print</a> a DOM tree using <a href=\"/en-US/XMLSerializer\" title=\"XMLSerializer\"><code>XMLSerializer</code></a> and <a href=\"/en-US/E4X\" title=\"en/E4X\">E4X</a>. First, create a DOM tree as described in the <a href=\"/en-US/How_to_create_a_DOM_tree\" title=\"en/How_to_create_a_DOM_tree\">How to Create a DOM tree</a> article. Alternatively, use a DOM tree obtained from <a href=\"/es/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a>. The <code>doc</code> variable contains the DOM tree.</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> oSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> sPrettyXML <span class=\"token operator\">=</span> <span class=\"token constant\">XML</span><span class=\"token punctuation\">(</span>oSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">serializeToString</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toXMLString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n\n<p>Indents consist of two spaces. To write a more efficient version or customize the indent string, use <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/TreeWalker\"><code>treeWalker</code> <small>(en-US)</small></a>.</p>\n\n<div class=\"note notecard\" id=\"sect2\"><strong>Note:</strong> When using the E4X <code>toXMLString</code> method, your <strong>CDATA elements will be lost</strong>, and only the containing text will remain. So if you have CDATA elements in your XML, <span style=\"background-color: #f5f6f5;\">using the preceding method might not be useful</span>.</div>\n\n<div class=\"code-example\"><pre class=\"brush: xml notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>content</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token cdata\">&lt;![CDATA[This is the content]]&gt;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>content</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n\n<p>Becomes</p>\n\n<div class=\"code-example\"><pre class=\"brush: xml notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>content</span><span class=\"token punctuation\">&gt;</span></span>This is the content<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>content</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>"}},{"type":"prose","value":{"id":"serializing_dom_trees_to_javascript_object_trees_(jxon)","title":"Serializing DOM trees to Javascript Object trees (JXON)","isH3":true,"content":"<p><a href=\"/en-US/JXON\" title=\"en/JXON\">JXON</a> (lossless <strong>J</strong>avaScript <strong>X</strong>ML <strong>O</strong>bject <strong>N</strong>otation) is a way to represent JavaScript Objects using XML. To address only parts of an XML document, use <a class=\"internal\" href=\"/en-US/XPath\" title=\"en/XPath\">XPath</a> instead of converting the whole document into JSON! Otherwise, read the <a class=\"internal\" href=\"/en-US/JXON\" title=\"en/JXON\">article about JXON</a>.</p>"}},{"type":"prose","value":{"id":"serializing_dom_trees_to_files","title":"Serializing DOM trees to files","isH3":true,"content":"<p>First, create a DOM tree as described in the <a href=\"/en-US/How_to_create_a_DOM_tree\" title=\"en/How_to_create_a_DOM_tree\">How to Create a DOM tree</a> article. If you already have a DOM tree from using <a href=\"/es/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a>, skip to the end of this section.</p>\n\n<p>Now, let's serialize <code>doc</code>, the DOM tree, to a file. For more information about files, see <a href=\"/en/Code_snippets/File_I_O\" title=\"en/Code_snippets/File_I//O\">about using files in Mozilla</a>):</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> oFOStream <span class=\"token operator\">=</span> Components<span class=\"token punctuation\">.</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">\"@mozilla.org/network/file-output-stream;1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span>Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>nsIFileOutputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> oFile <span class=\"token operator\">=</span> Components<span class=\"token punctuation\">.</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">\"@mozilla.org/file/directory_service;1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getService</span><span class=\"token punctuation\">(</span>Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>nsIProperties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ProfD\"</span><span class=\"token punctuation\">,</span> Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>nsILocalFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// get profile folder</span>\noFile<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"extensions\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// extensions sub-directory</span>\noFile<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{5872365E-67D1-4AFD-9480-FD293BEBD20D}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// GUID of your extension</span>\noFile<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myXMLFile.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// filename</span>\noFOStream<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>oFile<span class=\"token punctuation\">,</span> <span class=\"token number\">0x02</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x08</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0664</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// write, create, truncate</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">serializeToStream</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">,</span> oFOStream<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// rememeber, doc is the DOM tree</span>\noFOStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"serializing_xmlhttprequest_objects_to_files","title":"Serializing XMLHttpRequest objects to files","isH3":true,"content":"<p>If you already have a DOM tree from using <a href=\"/es/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a>, use the same code as above but replace <code>serializer.serializeToStream(doc, oFOStream, \"\")</code> with <code>serializer.serializeToStream(xmlHttpRequest.responseXML.documentElement, oFOStream, \"\")</code> where <code>xmlHttpRequest</code> is an instance of <code>XMLHttpRequest</code>.</p>\n\n<p>Note that this first parses the XML retrieved from the server, and then re-serializes it into a stream. Depending on your needs, you could just save the <code>xmlHttpRequest.responseText</code> directly.</p>"}},{"type":"prose","value":{"id":"serializing_html_documents","title":"Serializing HTML documents","isH3":true,"content":"<p>If the DOM you have is an HTML document, you can serialize it simply using</p>\n\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> serialized <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n <li><a class=\"internal\" href=\"/en-US/XPath\" title=\"en/XPath\">XPath</a></li>\n <li><a href=\"/en-US/nsIXMLHttpRequest\" title=\"en/XMLHttpRequest\">XMLHttpRequest</a></li>\n <li><a href=\"/en-US/JXON\" title=\"en/JXON\">JXO</a></li>\n</ul>"}}],"toc":[{"text":"Parte 1: Como crear un documento XML ","id":"parte_1_como_crear_un_documento_xml"},{"text":"Parte 2: Como serializar el contenido de un documento XML","id":"parte_2_como_serializar_el_contenido_de_un_documento_xml"},{"text":"See also","id":"see_also"}],"summary":"La plataforma web proveé Los siguientes objetos para hacer parsing (convertir una cadena de texto a código) y serializing (visceversa) a un XML:","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Parsing and serializing XML","locale":"en-US","native":"English (US)"},{"title":"XML のパースとシリアライズ","locale":"ja","native":"日本語"},{"title":"XML 파싱 및 직렬화","locale":"ko","native":"한국어"},{"title":"Прямая и обратная обработка XML","locale":"ru","native":"Русский"},{"title":"Parsing and serializing XML","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"es/web/guide/parsing_and_serializing_xml","github_url":"https://github.com/mdn/translated-content/blob/main/files/es/web/guide/parsing_and_serializing_xml/index.html","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.html"},"parents":[{"uri":"/es/docs/Web","title":"Tecnología para desarrolladores web"},{"uri":"/es/docs/Web/Guide","title":"Guía de Desarrollo Web"},{"uri":"/es/docs/Web/Guide/Parsing_and_serializing_XML","title":"Convertir código a cadena de texto (serializing) y visceversa (parsing) a un  XML"}],"pageTitle":"Convertir código a cadena de texto (serializing) y visceversa (parsing) a un  XML - Guía de Desarrollo Web | MDN","noIndexing":false}}