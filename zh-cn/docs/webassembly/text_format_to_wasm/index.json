{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"将 WebAssembly 文本格式转换为 wasm","mdn_url":"/zh-CN/docs/WebAssembly/Text_format_to_wasm","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/zh-CN/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>WebAssembly 有一个基于 S-表达式的文本表示形式，设计为在文本编辑器，浏览器开发人员工具等中暴露的一个中间形式。本文解释了它是如何工作的一些内容以及如何使用可用的工具把文本格式文件转换为.wasm 汇编格式文件。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 文本格式文件通常被保存为.wat 扩展名；有时.wast 也被使用，它是说文件包含了额外的测试命令（断言等）并且它们不需要转换到.wasm 中。</p>\n</div>"}},{"type":"prose","value":{"id":"初识文本格式","title":"初识文本格式","isH3":false,"content":"<p>让我们看一个简单的例子——下面的程序从一个叫做 imports 的模块中导入了一个叫做 imported_func 的函数并且导出了一个叫做 exported_func 的函数：</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$i</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span> <span class=\"token string\">\"imports\"</span> <span class=\"token string\">\"imported_func\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"exported_func\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">42</span>\n    <span class=\"token keyword\">call</span> <span class=\"token variable\">$i</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>WebAssembly 函数 exported_func 是被导出供我们的环境（比如，使用了 WebAssembly 模块的网络应用）使用。当被调用的时，它进而调用了一个被导入的叫做 imported_func 的函数并且向该函数传递了一个值（42）作为参数。</p>"}},{"type":"prose","value":{"id":"把.wat_文本文件转换为.wasm_二进制文件","title":"把.wat 文本文件转换为.wasm 二进制文件","isH3":false,"content":"<p>让我们尝试一下把前面提到的 wat 文本表示的例子转换为 wasm 汇编格式。</p>\n<ol>\n  <li>首先，把前面的清单内容复制到一个文本文件中；命名为 simple.wat。</li>\n  <li>在使用它之前，我们需要把这个文本表示汇编为浏览器能够识别的汇编语言。为了达到这个目的，我们可以使用 wabt 工具，该工具包括了在 WebAssembly 文本表示和 wasm 之间进行相互转化的编译器以及其他一些功能。访问 <a href=\"https://github.com/webassembly/wabt\" class=\"external\" rel=\" noopener\">https://github.com/webassembly/wabt</a>——按照该页面的指令来安装好工具。</li>\n  <li>当你安装好工具之后，将/wabt/out 目录添加到你的系统路径。</li>\n  <li>下一步，执行 wat2wasm 程序，把输入文件的路径传递给它，紧跟一个-o 参数，然后是输出文件的路径：\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>wat2wasm simple.wat -o simple.wasm\n</code></pre></div>\n  </li>\n</ol>\n<p>该命令会把 wasm 输出到一个叫做 simple.wasm 的文件，该文件包含了.wasm 汇编代码。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 你可以使用 wasm2wat 工具把汇编代码转换为文本表示；例如，wasm2wat simple.wasm -o text.wat。</p>\n</div>"}},{"type":"prose","value":{"id":"查看汇编输出","title":"查看汇编输出","isH3":false,"content":"<p>因为输出文件是基于汇编的，所以，它不能在常规的文本编辑器中查看。尽管如此，你可以使用 wat2wasm 工具的-v 选项来查看。试试这个：</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>wat2wasm simple.wat -v\n</code></pre></div>\n<p>这会在终端产生一个如下所示的输出：</p>\n<p>\n  <img src=\"/en-US/docs/WebAssembly/Text_format_to_wasm/assembly-output.png\" alt=\"several strings of binary with textual descriptions beside them. For example: 0000008: 01 ; section code \" width=\"585\" height=\"366\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"另见","title":"另见","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/WebAssembly/Understanding_the_text_format\">理解 WebAssembly 文本格式</a>——详细解释文本格式语法。</li>\n  <li><a href=\"/zh-CN/docs/WebAssembly/C_to_wasm\">从 C/C++编译为 WebAssembly</a>——诸如 Binaryen/Emscripten 的工具不但把你的代码编译为 wasm 而且创建必要的用来在一个 JavaScript 上下文中运行模块的 API 代码。关于如何使用它们，可以探究更多内容。</li>\n  <li>使用 WebAssembly 的 JavaScript API——如果你想探究关于 WebAssembly API 代码是如何工作的更多内容，可以阅读这篇文章。</li>\n  <li><a href=\"https://github.com/WebAssembly/design/blob/master/TextFormat.md\" class=\"external\" rel=\" noopener\">文本格式</a>——在 WebAssembly 的 GitHub 仓库上面关于文本格式的更多解释。</li>\n</ul>"}}],"toc":[{"text":"初识文本格式","id":"初识文本格式"},{"text":"把.wat 文本文件转换为.wasm 二进制文件","id":"把.wat_文本文件转换为.wasm_二进制文件"},{"text":"查看汇编输出","id":"查看汇编输出"},{"text":"另见","id":"另见"}],"summary":"WebAssembly 有一个基于 S-表达式的文本表示形式，设计为在文本编辑器，浏览器开发人员工具等中暴露的一个中间形式。本文解释了它是如何工作的一些内容以及如何使用可用的工具把文本格式文件转换为.wasm 汇编格式文件。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Converting WebAssembly text format to wasm","locale":"en-US","native":"English (US)"},{"title":"WebAssembly テキスト形式から wasm への変換","locale":"ja","native":"日本語"},{"title":"Converting WebAssembly text format to wasm","locale":"ko","native":"한국어"}],"source":{"folder":"zh-cn/webassembly/text_format_to_wasm","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/webassembly/text_format_to_wasm/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/WebAssembly","title":"WebAssembly"},{"uri":"/zh-CN/docs/WebAssembly/Text_format_to_wasm","title":"将 WebAssembly 文本格式转换为 wasm"}],"pageTitle":"将 WebAssembly 文本格式转换为 wasm - WebAssembly | MDN","noIndexing":false}}