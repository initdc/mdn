{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"WebAssembly.Table()","mdn_url":"/zh-CN/docs/WebAssembly/JavaScript_interface/Table","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects\">标准内置对象</a></strong></li><li><strong><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>方法</strong></a><ol><li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/compile\"><code>WebAssembly.compile()</code></a></li><li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/compileStreaming\"><code>WebAssembly.compileStreaming()</code></a></li><li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/instantiate\"><code>WebAssembly.instantiate()</code></a></li><li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code></a></li><li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/validate\"><code>WebAssembly.validate()</code></a></li></ol></li><li><strong>相关页面：</strong></li><li><strong><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></strong></li><li><strong><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></strong></li><li><strong><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></strong></li><li><strong><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></strong></li><li><strong><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></strong></li><li><strong><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></strong></li><li><strong><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code> <small>(en-US)</small></a></strong></li><li><strong><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></strong></li><li><strong>继承</strong></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>属性</strong></a><ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>方法</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>WebAssembly.Table()</code></strong> 构造函数根据给定的大小和元素类型创建一个 Table 对象。</p>\n<p>这是一个包装了 WebAssemble Table 的 Javascript 包装对象，具有类数组结构，存储了多个函数引用。在 Javascript 或者 WebAssemble 中创建 Table 对象可以同时被 Javascript 或 WebAssemble 访问和更改。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> Tables 对象目前只能存储函数引用，不过在将来可能会被扩展。</p>\n</div>"}},{"type":"prose","value":{"id":"语法","title":"语法","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: plain notranslate\">var myTable = new WebAssembly.Table(tableDescriptor);\n</pre></div>"}},{"type":"prose","value":{"id":"参数","title":"参数","isH3":true,"content":"<dl>\n  <dt id=\"tabledescriptor\"><em>tableDescriptor</em></dt>\n  <dd>\n    <p>该对象具有以下属性：</p>\n    <dl>\n      <dt id=\"element\"><em>element</em></dt>\n      <dd>\n        <p>一个表明储存在该 Table 中对象的类型。目前只能是： <code>\"anyfunc\"</code> (函数)。</p>\n      </dd>\n      <dt id=\"initial\"><em>initial</em></dt>\n      <dd>\n        <p>该 WebAssembly Table 初始大小。</p>\n      </dd>\n      <dt id=\"maximum_可选\"><em>maximum <span class=\"badge inline optional\">可选</span></em></dt>\n      <dd>\n        <p>该 WebAssembly Table 允许扩展到的最大大小。</p>\n      </dd>\n    </dl>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"异常","title":"异常","isH3":true,"content":"<ul>\n  <li>如果 <code>tableDescriptor</code> 不是对象类型，将会抛出 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> 异常。</li>\n  <li>如果申明了 <code>maximum</code> 属性并且比 <code>initial 小</code>, 将会抛出<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a> 异常。</li>\n</ul>"}},{"type":"prose","value":{"id":"table_instance","title":"<code>Table</code> Instance","isH3":false,"content":"<p>所有<code>Table</code>实例都继承自<code>Table()</code>构造函数的<a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">原型对象 (en-US)</a>-可以对其进行修改以影响所有<code>Table</code>实例。</p>","titleAsText":"Table Instance"}},{"type":"prose","value":{"id":"instance_属性","title":"Instance 属性","isH3":true,"content":"<dl>\n  <dt id=\"table.prototype.constructor\"><code>Table.prototype.constructor</code></dt>\n  <dd>\n    <p>返回创建该对象实例的函数。默认情况下，这是<a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Table\" aria-current=\"page\"><code>WebAssembly.Table()</code></a> 的构造函数。</p>\n  </dd>\n  <dt id=\"table.prototype.length\"><a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>Table.prototype.length</code></a></dt>\n  <dd>\n    <p>返回 Table 的长度，即元素数。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"instance_methods","title":"Instance methods","isH3":true,"content":"<dl>\n  <dt id=\"table.prototype.get\"><a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>Table.prototype.get()</code></a></dt>\n  <dd>\n    <p>Accessor function — gets the element stored at a given index.</p>\n  </dd>\n  <dt id=\"table.prototype.grow\"><a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>Table.prototype.grow()</code></a></dt>\n  <dd>\n    <p>Increases the size of the Table instance by a specified number of elements.</p>\n  </dd>\n  <dt id=\"table.prototype.set\"><a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>Table.prototype.set()</code></a></dt>\n  <dd>\n    <p>Sets an element stored at a given index to a given value.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<p>The following example (see table2.html <a href=\"https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table2.html\" class=\"external\" rel=\" noopener\">source code</a> and <a href=\"https://mdn.github.io/webassembly-examples/js-api-examples/table2.html\" class=\"external\" rel=\" noopener\">live version</a>) creates a new WebAssembly Table instance with an initial size of 2 elements. We then print out the table length and contents of the two indexes (retrieved via <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>Table.prototype.get()</code></a> to show that the length is two and both elements are <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> tbl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">initial</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span><span class=\"token string\">\"anyfunc\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"2\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"null\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"null\"</span>\n</code></pre></div>\n<p>We then create an import object that contains the table:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> importObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">js</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">tbl</span><span class=\"token operator\">:</span>tbl\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Finally, we load and instantiate a wasm module (table2.wasm) using the <a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code></a> method. The table2.wasm module contains two functions (one that returns 42 and another that returns 83) and stores both into elements 0 and 1 of the imported table (see <a href=\"https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table2.wat\" class=\"external\" rel=\" noopener\">text representation</a>). So after instantiation, the table still has length 2, but the elements now contain callable <a href=\"/zh-CN/docs/WebAssembly/Exported_functions\">Exported WebAssembly Functions</a> which we can call from JS.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'table2.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> importObject<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Note how you've got to include a second function invocation operator at the end of the accessor to actually invoke the referenced function and log the value stored inside it (e.g. <code>get(0)()</code> rather than <code>get(0)</code>) .</p>\n<p>This example shows that we're creating and accessing the table from JavaScript, but the same table is visible and callable inside the wasm instance too.</p>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://webassembly.github.io/spec/js-api/#tables","title":"WebAssembly JavaScript Interface"}],"query":"javascript.builtins.WebAssembly.Table"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"javascript.builtins.WebAssembly.Table","dataURL":"/zh-CN/docs/WebAssembly/JavaScript_interface/Table/bcd.json"}},{"type":"prose","value":{"id":"相关链接","title":"相关链接","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/WebAssembly\">WebAssembly</a> overview page</li>\n  <li><a href=\"/zh-CN/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n  <li><a href=\"/zh-CN/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n</ul>"}}],"toc":[{"text":"语法","id":"语法"},{"text":"<code>Table</code> Instance","id":"table_instance"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"相关链接","id":"相关链接"}],"summary":"WebAssembly.Table() 构造函数根据给定的大小和元素类型创建一个 Table 对象。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"WebAssembly.Table","locale":"en-US","native":"English (US)"},{"title":"WebAssembly.Table()","locale":"fr","native":"Français"},{"title":"WebAssembly.Table","locale":"ja","native":"日本語"},{"title":"WebAssembly.Table()","locale":"ko","native":"한국어"},{"title":"WebAssembly.Table","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/webassembly/javascript_interface/table","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/webassembly/javascript_interface/table/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/WebAssembly","title":"WebAssembly"},{"uri":"/zh-CN/docs/WebAssembly/JavaScript_interface","title":"WebAssembly"},{"uri":"/zh-CN/docs/WebAssembly/JavaScript_interface/Table","title":"WebAssembly.Table()"}],"pageTitle":"WebAssembly.Table() - WebAssembly | MDN","noIndexing":false}}