{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"编译 C/C++ 为 WebAssembly","mdn_url":"/zh-CN/docs/WebAssembly/C_to_wasm","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/zh-CN/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>当你在用 C/C++ 之类的语言编写模块时，你可以使用<a href=\"/zh-CN/docs/Mozilla/Projects/Emscripten\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Emscripten</a>来将它编译到 WebAssembly。让我们来看看它是如何工作的。</p>"}},{"type":"prose","value":{"id":"emscripten_环境安装","title":"Emscripten 环境安装","isH3":false,"content":"<p>首先，让我们来配置所需要的开发环境。</p>"}},{"type":"prose","value":{"id":"所需条件","title":"所需条件","isH3":true,"content":"<p>你需要将下列工具安装在您的电脑上，首先让我们确认下都有哪些。</p>\n<ul>\n  <li><a href=\"https://git-scm.com/\" class=\"external\" rel=\" noopener\">Git</a> — Linux 和 macOS 的机器一般已经预装了，在 Windows 下您可以从这里下载 <a href=\"https://git-scm.com/download/win\" class=\"external\" rel=\" noopener\">Git for Windows installer</a>。</li>\n  <li>CMake — 在 Linux 或者 macOS 上，使用类似 apt-get 或 <a href=\"https://brew.sh/\" class=\"external\" rel=\" noopener\">brew</a> 这样的包管理器来安装它，请确保依赖以及路径是否正确。在 Windows 上，使用 <a href=\"https://cmake.org/download/\" class=\"external\" rel=\" noopener\">CMake installer</a>。</li>\n  <li>主系统编译器 — 在 Linux 下，<a href=\"http://askubuntu.com/questions/154402/install-gcc-on-ubuntu-12-04-lts\" class=\"external\" rel=\" noopener\">安装 GCC</a>。在 macOS 下，<a href=\"https://itunes.apple.com/us/app/xcode/id497799835\" class=\"external\" rel=\" noopener\">安装 Xcode</a>。在 Windows 下，安装 <a href=\"https://www.microsoft.com/zh-CN/download/details.aspx?id=48146\" class=\"external\" rel=\" noopener\">Visual Studio Community 2015 with Update 3 or newer</a>。</li>\n  <li>Python 2.7.x — On Linux and macOS, this is most likely provided out of the box. 从 <a href=\"https://wiki.python.org/moin/BeginnersGuide/Downloadhere\" class=\"external\" rel=\" noopener\">初学者指南</a> 获取帮助。在 Windows 上，从 <a href=\"https://www.python.org/downloads/\" class=\"external\" rel=\" noopener\">Python 主页</a>获取安装包。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 在 Windows 下您可能需要<a href=\"https://sourceforge.net/projects/pywin32/files/pywin32/\" class=\"external\" rel=\" noopener\">pywin32</a>，为了降低安装 pywin32 可能遇到的错误，请使用管理员权限在 cmd 内运行安装程序。</p>\n</div>"}},{"type":"prose","value":{"id":"编译_emscripten","title":"编译 Emscripten","isH3":true,"content":"<p>接下来，您需要通过源码自己编译一个 Emscripten。运行下列命令来自动化地使用 Emscripten SDK。(在你想保存 Emscripten 的文件夹下运行)。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">git</span> clone https://github.com/juj/emsdk.git\n<span class=\"token builtin class-name\">cd</span> emsdk\n\n<span class=\"token comment\"># 在 Linux 或者 Mac macOS 上</span>\n./emsdk <span class=\"token function\">install</span> --build<span class=\"token operator\">=</span>Release sdk-incoming-64bit binaryen-master-64bit\n./emsdk activate --global --build<span class=\"token operator\">=</span>Release sdk-incoming-64bit binaryen-master-64bit\n<span class=\"token comment\"># 如果在你的 macos 上获得以下错误</span>\nError: No tool or SDK found by name <span class=\"token string\">'sdk-incoming-64bit'</span>\n<span class=\"token comment\"># 请执行</span>\n./emsdk <span class=\"token function\">install</span> latest\n<span class=\"token comment\"># 按照提示配置环境变量即可</span>\n./emsdk activate latest\n\n\n<span class=\"token comment\"># 在 Windows 上</span>\nemsdk <span class=\"token function\">install</span> --build<span class=\"token operator\">=</span>Release sdk-incoming-64bit binaryen-master-64bit\nemsdk activate --global --build<span class=\"token operator\">=</span>Release sdk-incoming-64bit binaryen-master-64bit\n\n<span class=\"token comment\"># 注意：Windows 版本的 Visual Studio 2017 已经被支持，但需要在 emsdk install 需要追加 --vs2017 参数。</span>\n</code></pre></div>\n<p>安装过程可以会花上一点时间，是时候去休息一下。安装程序会设置所有 Emscripten 运行所需要的环境变量。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> global 标识会让 PATH 变量在全局被设置，所以接下来所打开的终端或者命令行窗口都会被设置。如果您仅仅想让 Emscripten 在当前窗口生效，就删掉这个标识。</p>\n</div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 每当您想要使用 Emscripten 时，尝试从远程更新最新的 emscripten 代码是个很好的习惯（运行 git pull）。如果有更新，重新执行 install 和 activate 命令。这样就可以确保您使用的 Emscripten 一直保持最新。</p>\n</div>\n<p>现在让我们进入 emsdk 文件夹，输入以下命令来让你进入接下来的流程，编译一个样例 C 程序到 asm.js 或者 wasm。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token comment\"># on Linux or Mac macOS</span>\n<span class=\"token builtin class-name\">source</span> ./emsdk_env.sh\n\n<span class=\"token comment\"># on Windows</span>\nemsdk_env.bat\n</code></pre></div>"}},{"type":"prose","value":{"id":"编译样例代码","title":"编译样例代码","isH3":false,"content":"<p>现在环境配置完毕，让我们看看如何使用它把 C 代码编译到 Emscripten。当使用 Emscripten 来编译的时候有很多种不同的选择，我们介绍其中主要的 2 种：</p>\n<ul>\n  <li>编译到 wasm 并且生成一个用来运行我们代码的 HTML，将所有 wasm 在 web 环境下运行所需要的“胶水”JavaScript 代码都添加进去。</li>\n  <li>编译到 wasm 然后仅仅生成 JavaScript。</li>\n</ul>\n<p>让我们一个一个看看。</p>"}},{"type":"prose","value":{"id":"生成_html_和_javascript","title":"生成 HTML 和 JavaScript","isH3":true,"content":"<p>我们先来看一个最简单的例子，通过这个，你可以使用 Emscripten 来将任何代码生成到 WebAssembly，然后在浏览器上运行。</p>\n<ol>\n  <li>首先我们需要编译一段样例代码。将下方的 C 代码复制一份然后命名为 hello.c 保存在一个新的文件夹内。\n    <div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n  <li>现在，转到一个已经配置过 Emscripten 编译环境的终端窗口中，进入刚刚保存 hello.c 文件的文件夹中，然后运行下列命令：\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>emcc hello.c -s <span class=\"token assign-left variable\">WASM</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> -o hello.html\n</code></pre></div>\n  </li>\n</ol>\n<p>下面列出了我们命令中选项的细节：</p>\n<ul>\n  <li><code>-s WASM=1</code> — 指定我们想要的 wasm 输出形式。如果我们不指定这个选项，Emscripten 默认将只会生成<a href=\"http://asmjs.org/\" class=\"external\" rel=\" noopener\">asm.js</a>。</li>\n  <li><code>-o hello.html</code> — 指定这个选项将会生成 HTML 页面来运行我们的代码，并且会生成 wasm 模块，以及编译和实例化 wasm 模块所需要的“胶水”js 代码，这样我们就可以直接在 web 环境中使用了。</li>\n</ul>\n<p>这个时候在您的源码文件夹应该有下列文件：</p>\n<ul>\n  <li><code>hello.wasm</code> 二进制的 wasm 模块代码</li>\n  <li><code>hello.js</code> 一个包含了用来在原生 C 函数和 JavaScript/wasm 之间转换的胶水代码的 JavaScript 文件</li>\n  <li><code>hello.html</code> 一个用来加载，编译，实例化你的 wasm 代码并且将它输出在浏览器显示上的一个 HTML 文件</li>\n</ul>"}},{"type":"prose","value":{"id":"运行你的例子","title":"运行你的例子","isH3":true,"content":"<p>现在使用一个支持 WebAssembly 的浏览器，加载生成的 <code>hello.html</code> 。</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>备注：</strong> Firefox 52+ 和 Chrome 57+ 和最新版本的 Opera 已经默认启用，你也可以在 Firefox 47+ 中通过在 <em>about:config</em> 页面启用 <code>javascript.options.wasm</code> 字段获得支持，Chrome 51+ 和 Opera 38+ 可以在 <em>chrome://flags 页面启用 Experimental WebAssembly 选项以支持</em> WebAssembly*。*</p>\n</div>\n<p>如果一切顺利，你应该可以在页面上的 <code>Emscripten 控制台</code>和 <code>浏览器控制台</code> 中看到 \"Hello World\" 的输出。</p>\n<p>恭喜！你已经成功将 C 代码编译成 JavaScript 并且在浏览器中执行了！</p>"}},{"type":"prose","value":{"id":"使用自定义_html_模板","title":"使用自定义 HTML 模板","isH3":false,"content":"<p>有些时候你可能想要使用一个自定义的 HTML 模板。让我们看看怎么实现。</p>\n<ol>\n  <li>首先，在一个新文件夹中保存以下 C 代码到 hello2.c 中：\n    <div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n  <li>在 emsdk 中搜索一个叫做 <code>shell_minimal.html</code> 的文件，然后复制它到刚刚创建的目录下的 <code>html_template</code> 文件夹。\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">mkdir</span> html_template\n<span class=\"token function\">cp</span> ~/emsdk/emscripten/1.38.15/src/shell_minimal.html html_template\n</code></pre></div>\n  </li>\n  <li>现在使用你的 Emscripten 编译器环境的终端窗口进入你的新目录，然后运行下面的命令：\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>emcc -o hello2.html hello2.c -O3 -s <span class=\"token assign-left variable\">WASM</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> --shell-file html_template/shell_minimal.html\n</code></pre></div>这次使用的选项略有不同：\n    <ul>\n      <li>我们使用了 <code>-o hello2.html</code>，这意味编译器将仍然输出 js 胶水代码 和 html 文件。</li>\n      <li>我们还使用了 <code>--shell-file html_template/shell_minimal.html</code>，这指定了您要运行的例子使用 HTML 页面模板。</li>\n    </ul>\n  </li>\n  <li>下面让我们来运行这个例子。上面的命令已经生成了 hello2.html，内容和我们使用的模板非常相像，只不过多加了一些 js 胶水和加载 wasm 文件的代码。在浏览器中打开它，你会看到与上一个例子相同的输出。</li>\n</ol>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>备注：</strong> 通过用.js 取代.htm(l) 作为文件后缀名，你就可以得到只有 JavaScript 的输出文件，而不再是完整的 HTML 文件。例如：<code>emcc -o hello2.js hello2.c -O3 -s WASM=1</code>. 你可以完全从零开始创建你自己的 HTML 文件。尽管如此，不推荐这样做。因为 Emscripten 需要大量的 JavaScript“胶水”代码从而能够 处理内存分配、内存泄漏以及大量的其他问题。这些问题都已经在提供的模板中得到了处理。使用模板要比自己编写模板要容易得多。不过，当对模板所做的事情越来越熟悉的时候，你就能够按照自己的需要创建定制化的模板了。</p>\n</div>"}},{"type":"prose","value":{"id":"调用一个定义在_c_中的自定义方法","title":"调用一个定义在 C 中的自定义方法","isH3":false,"content":"<p>如果需要调用一个在 C 语言自定义的函数，你可以使用 Emscripten 中的 <code>ccall()</code> 函数，以及 <code>EMSCRIPTEN_KEEPALIVE</code> 声明（将你的函数添加到导出函数列表中（详见 <a href=\"https://kripken.github.io/emscripten-site/docs/getting_started/FAQ.html#why-do-functions-in-my-c-c-source-code-vanish-when-i-compile-to-javascript-and-or-i-get-no-functions-to-process\" class=\"external\" rel=\" noopener\">Why do functions in my C/C++ source code vanish when I compile to JavaScript, and/or I get No functions to process?</a>））。</p>\n<p>接下来让我们看看这是怎么实现的。</p>\n<ol>\n  <li>首先，将以下代码在新目录中保存为 <code>hello3.c</code> ：\n    <div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;emscripten/emscripten.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span>\n<span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token keyword\">int</span> EMSCRIPTEN_KEEPALIVE <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我的函数已被调用\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__cplusplus</span></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n</code></pre></div>默认情况下，Emscripten 生成的代码只会调用 <code>main()</code> 函数，其它的函数将被视为无用代码。在一个函数名之前添加 <code>EMSCRIPTEN_KEEPALIVE</code> 能够防止这样的事情发生。你需要导入 <code>emscripten.h</code> 库来使用 <code>EMSCRIPTEN_KEEPALIVE</code>。\n    <div class=\"notecard note\" id=\"sect6\">\n      <p><strong>备注：</strong> 为了保证万一你想在 C++ 代码中引用这些代码时代码可以正常工作，我们添加了 <code>#ifdef</code> 代码块。由于 C 与 C++ 中名字修饰规则的差异，添加的代码块有可能产生问题，但目前我们设置了这一额外的代码块以保证你使用 C++ 时，这些代码会被视为外部 C 语言函数。</p>\n    </div>\n  </li>\n  <li>为了方便起见，现在将 <code>html_template/shell_minimal.html</code> 也添加到这一目录（但在实际开发环境中你肯定需要将其放到某一特定位置）。</li>\n  <li>运行以下命令编译：(注意由于使用 ccall 函数，需要添加指定参数)\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>emcc -o hello3.html hello3.c -O3 -s <span class=\"token assign-left variable\">WASM</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> -s <span class=\"token string\">\"EXTRA_EXPORTED_RUNTIME_METHODS=['ccall']\"</span> --shell-file html_template/shell_minimal.html\n</code></pre></div>\n  </li>\n  <li>如果你在浏览器中在此加载实例，你将看到和之前相同的结果。</li>\n  <li>现在我们需要运行新的 <code>myFunction()</code> JavaScript 函数。首先，按照以下实例添加一个 <a href=\"/zh-CN/docs/Web/HTML/Element/button\"><code>&lt;button&gt;</code></a> ，就在 <code>&lt;script type='text/javascript'&gt;</code> 开头标签之前。\n    <div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mybutton<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>运行我的函数<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n  </li>\n  <li>现在在最后一个 <a href=\"/zh-CN/docs/Web/HTML/Element/script\"><code>&lt;script&gt;</code></a> 元素（就在 <code>&lt;/script&gt;</code> 关闭标签之前）中添加以下代码：\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.mybutton'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'检查控制台'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> Module<span class=\"token punctuation\">.</span><span class=\"token function\">ccall</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myFunction'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// name of C function</span>\n                             <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// return type</span>\n                             <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// argument types</span>\n                             <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// arguments</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n</ol>\n<p>以上就是如何使用 <code>ccall()</code> 调用导出的函数的方式。</p>"}},{"type":"prose","value":{"id":"参见","title":"参见","isH3":false,"content":"<ul>\n  <li><a href=\"http://emscripten.org/\" class=\"external\" rel=\" noopener\">emscripten.org</a> — 了解更多 Emscripten 以及它的多种设置</li>\n  <li><a href=\"https://kripken.github.io/emscripten-site/docs/porting/connecting_cpp_and_javascript/Interacting-with-code.html#calling-compiled-c-functions-from-javascript-using-ccall-cwrap\" class=\"external\" rel=\" noopener\">Calling compiled C functions from JavaScript using ccall/cwrap</a></li>\n  <li><a href=\"https://kripken.github.io/emscripten-site/docs/getting_started/FAQ.html#why-do-functions-in-my-c-c-source-code-vanish-when-i-compile-to-javascript-and-or-i-get-no-functions-to-process\" class=\"external\" rel=\" noopener\">Why do functions in my C/C++ source code vanish when I compile to JavaScript, and/or I get No functions to process?</a></li>\n  <li><a href=\"https://research.mozilla.org/webassembly/\" class=\"external\" rel=\" noopener\">WebAssembly on Mozilla Research</a></li>\n  <li><a href=\"/en-US/docs/WebAssembly/existing_C_to_wasm\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Compiling an Existing C Module to WebAssembly (en-US)</a></li>\n</ul>"}}],"toc":[{"text":"Emscripten 环境安装","id":"emscripten_环境安装"},{"text":"编译样例代码","id":"编译样例代码"},{"text":"使用自定义 HTML 模板","id":"使用自定义_html_模板"},{"text":"调用一个定义在 C 中的自定义方法","id":"调用一个定义在_c_中的自定义方法"},{"text":"参见","id":"参见"}],"summary":"当你在用 C/C++ 之类的语言编写模块时，你可以使用Emscripten来将它编译到 WebAssembly。让我们来看看它是如何工作的。","popularity":0.0008,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Compiling a New C/C++ Module to WebAssembly","locale":"en-US","native":"English (US)"},{"title":"Compiler un nouveau module C/C++ en WebAssembly","locale":"fr","native":"Français"},{"title":"C/C++ から WebAssembly へのコンパイル","locale":"ja","native":"日本語"},{"title":"C/C++ 모듈을 웹어셈블리로 컴파일하기","locale":"ko","native":"한국어"},{"title":"Компиляция кода C/C++ в WebAssembly","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/webassembly/c_to_wasm","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/webassembly/c_to_wasm/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/WebAssembly","title":"WebAssembly"},{"uri":"/zh-CN/docs/WebAssembly/C_to_wasm","title":"编译 C/C++ 为 WebAssembly"}],"pageTitle":"编译 C/C++ 为 WebAssembly - WebAssembly | MDN","noIndexing":false}}