{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"加载和运行 WebAssembly 代码","mdn_url":"/zh-CN/docs/WebAssembly/Loading_and_running","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/zh-CN/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>为了在 JavaScript 中使用 WebAssembly，在编译/实例化之前，你首先需要把模块放入内存。比如，通过<a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a>或<a href=\"/zh-CN/docs/Web/API/Fetch_API\">Fetch</a>，模块将会被初始化为带类型数组；不过，将来会开发更多的方式。本文提供了一篇关于获取 WebAssembly 字节码的不同机制以及如何编译/实例化并运行它的参考。</p>"}},{"type":"prose","value":{"id":"这里的主题是什么？","title":"这里的主题是什么？","isH3":false,"content":"<p>WebAssembly 还没有和&lt;script type='module'&gt;或 ES6 的 import 语句集成，也就是说，当前还没有内置的方式让浏览器为你获取模块。当前唯一的方式就是创建一个包含你的 WebAssembly 模块二进制代码的 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> 并且使用<a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/instantiate\"><code>WebAssembly.instantiate()</code></a>编译它。这与 new Function(string) 类似，除了使用一个包含了 WebAssembly 源代码的数组缓存替换掉包含了 JavaScript 源代码的字符串。</p>\n<p>那么，我们该如何获取这些字节并存入到一个数组缓存并编译它呢？下面进行解释。</p>"}},{"type":"prose","value":{"id":"使用_fetch","title":"使用 Fetch","isH3":false,"content":"<p><a href=\"/zh-CN/docs/Web/API/Fetch_API\">Fetch</a>是一个用来获取网络资源的方便现代的 API。</p>\n<p>假设网络上有一个叫做 simple.wasm 的 WebAssembly 模块：</p>\n<ul>\n  <li>我们可以使用<a href=\"/zh-CN/docs/Web/API/fetch\">fetch()</a>全局函数来轻松地获取它，该函数返回一个可以解析为<a href=\"/zh-CN/docs/Web/API/Response\">Response</a>对象的 promise。</li>\n  <li>我们可以使用<a href=\"/en-US/docs/Web/API/Response/arrayBuffer\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">arrayBuffer() (en-US)</a>函数把响应（response）转换为带类型数组，该函数返回一个可以解析为带类型数组的 promise。</li>\n  <li>最后，我们使用<a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/instantiate\"><code>WebAssembly.instantiate()</code></a>函数一步实现编译和实例化带类型数组。</li>\n</ul>\n<p>代码块看起来像这样：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=&gt;</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bytes</span> <span class=\"token operator\">=&gt;</span>\n  WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> importObject<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Do something with the compiled results!</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"顺便说一下_instantiate_重载","title":"顺便说一下 instantiate() 重载","isH3":true,"content":"<p><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/instantiate\"><code>WebAssembly.instantiate()</code></a>函数有两种重载形式——一种是前面展示的那样，接受待编译的字节码作为参数并且返回一个 promise 并且该 promise 可以解析为一个包含已编译的模块对象及其实例的对象。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">module</span> <span class=\"token operator\">:</span> Module <span class=\"token comment\">// 新编译的 WebAssembly.Module 对象，</span>\n  <span class=\"token literal-property property\">instance</span> <span class=\"token operator\">:</span> Instance <span class=\"token comment\">// 新的模块对象实例</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 通常，我们只关心实例，但是，当我们想缓存模块，使用 <a href=\"/en-US/docs/Web/API/MessagePort/postMessage\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">postMessage() (en-US)</a>与另外一个 worker 或 window 共享模块或者只是创建更多的实例的时候，拥有模块对象是很有用的。</p>\n</div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 这二种重载形式接受一个<a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Module\">WebAssembly.Module</a>对象作为参数，并且返回一个包含了一个实例对象的 promise。参考<a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/instantiate#second_overload_example\">第二种重载示例</a>。</p>\n</div>"}},{"type":"prose","value":{"id":"获取及实例化的实用函数","title":"获取及实例化的实用函数","isH3":true,"content":"<p>上面的代码样式可以工作，但是，每次都重新编写它们就显得啰嗦了，特别是当你想要加载多个模块的时候。为了简单起见，我们创建了一个叫做 fetchAndInstantiate() 的实用函数，它在后台工作并返回一个 promise。你可以在<a href=\"https://github.com/mdn/webassembly-examples/blob/master/wasm-utils.js\" class=\"external\" rel=\" noopener\">wasm-utils.js</a>中找到这个函数。它看起来像这样：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">fetchAndInstantiate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> importObject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=&gt;</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bytes</span> <span class=\"token operator\">=&gt;</span>\n    WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> importObject<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span> <span class=\"token operator\">=&gt;</span>\n    results<span class=\"token punctuation\">.</span>instance\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>把这个函数加入到 HTML 中，你就可以使用一行简单代码做到获取和实例化 WebAssembly 模块并且得到一个实例。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">fetchAndInstantiate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module.wasm'</span><span class=\"token punctuation\">,</span> importObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 在我们的文档中，你可以看到许多这么用的例子（例如，参考<a href=\"https://mdn.github.io/webassembly-examples/js-api-examples/\" class=\"external\" rel=\" noopener\">index.html</a>）——这是我们推荐的加载模块的标准方式。</p>\n</div>"}},{"type":"prose","value":{"id":"运行你的_webassembly_代码","title":"运行你的 WebAssembly 代码","isH3":true,"content":"<p>一旦在 JavaScript 中得到了可用的 WebAssembly 实例，你就可以开始使用那些通过 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Instance/exports\"><code>WebAssembly.Instance.exports</code> <small>(en-US)</small></a> 属性导出的特性了。你的代码可能看起来像这样：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">fetchAndInstantiate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myModule.wasm'</span><span class=\"token punctuation\">,</span> importObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 调用导出函数：</span>\n  instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">exported_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 或者获取导出内存的缓存内容：</span>\n  <span class=\"token keyword\">var</span> i32 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint32Array</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>memory<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 或者获取导出表格中的元素：</span>\n  <span class=\"token keyword\">var</span> table <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>备注：</strong> 关于从 WebAssembly 模块导出是如何工作的更多信息，请阅读使<a href=\"/zh-CN/docs/WebAssembly/Using_the_JavaScript_API\">用 WebAssembly 的 JavaScript API</a>和<a href=\"/zh-CN/docs/WebAssembly/Understanding_the_text_format\">理解 WebAssembly 文本格式</a>。</p>\n</div>"}},{"type":"prose","value":{"id":"使用_xmlhttprequest","title":"使用 XMLHttpRequest","isH3":false,"content":"<p><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a>在一定程度上而言要比 Fetch 老旧一些，但是，仍然可以很好地被用来获取带类型数组。仍然假设我们的模块叫做 simple.wasm：</p>\n<ol>\n  <li>创建一个 <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest()</code></a> 实例，然后使用它的<a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/open\" title=\"open()\"><code>open()</code></a> 方法来开启一个请求——设置请求方法为 GET 并且声明我们想要获取的文件路径。</li>\n  <li>关键之处在于使用<a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/responseType\" title=\"responseType\"><code>responseType</code></a>属性设置响应类型为'arraybuffer'。</li>\n  <li>接下来使用<a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/send\"><code>XMLHttpRequest.send()</code></a>发送请求。</li>\n  <li>当响应已经完成下载之后，我们使用<a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>onload</code></a>事件处理器来调用一个函数——在这个函数中，我们从<a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/response\" title=\"response\"><code>response</code></a>属性中得到数组缓存然后就像使用 Fetch 那样把它传递给<a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/instantiate\"><code>WebAssembly.instantiate()</code></a> 。</li>\n</ol>\n<p>最终代码看起来像这样：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'simple.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">'arraybuffer'</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrequest<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> bytes <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">;</span>\n  WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> importObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    results<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">exported_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>备注：</strong> 你可以在<a href=\"https://mdn.github.io/webassembly-examples/js-api-examples/xhr-wasm.html\" class=\"external\" rel=\" noopener\">xhr-wasm.html</a>看到实际使用的例子。</p>\n</div>"}}],"toc":[{"text":"这里的主题是什么？","id":"这里的主题是什么？"},{"text":"使用 Fetch","id":"使用_fetch"},{"text":"使用 XMLHttpRequest","id":"使用_xmlhttprequest"}],"summary":"为了在 JavaScript 中使用 WebAssembly，在编译/实例化之前，你首先需要把模块放入内存。比如，通过XMLHttpRequest或Fetch，模块将会被初始化为带类型数组；不过，将来会开发更多的方式。本文提供了一篇关于获取 WebAssembly 字节码的不同机制以及如何编译/实例化并运行它的参考。","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Loading and running WebAssembly code","locale":"en-US","native":"English (US)"},{"title":"Loading and running WebAssembly code","locale":"es","native":"Español"},{"title":"Loading and running WebAssembly code","locale":"fr","native":"Français"},{"title":"WebAssembly コードの読み込みと実行","locale":"ja","native":"日本語"},{"title":"Loading and running WebAssembly code","locale":"ko","native":"한국어"},{"title":"Загрузка и запуск кода WebAssembly","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/webassembly/loading_and_running","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/webassembly/loading_and_running/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/WebAssembly","title":"WebAssembly"},{"uri":"/zh-CN/docs/WebAssembly/Loading_and_running","title":"加载和运行 WebAssembly 代码"}],"pageTitle":"加载和运行 WebAssembly 代码 - WebAssembly | MDN","noIndexing":false}}