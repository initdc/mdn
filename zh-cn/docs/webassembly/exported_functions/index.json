{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"导出的 WebAssembly 函数","mdn_url":"/zh-CN/docs/WebAssembly/Exported_functions","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/zh-CN/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>导出 WebAssembly 函数的过程，其实就是指这些函数在 JavaScript 中如何用表示。本文更详细的介绍它们。</p>"}},{"type":"prose","value":{"id":"导出的...什么？","title":"导出的...什么？","isH3":false,"content":"<p>导出的 WebAssembly 函数只是用 JavaScript 来表示 WebAssembly 函数的封装而已。当你调用它们的时候，就会有一些后台活动把参数转换为 wasm 能够处理的类型（例如，把 JavaScript 数字转换为 Int32 类型），参数被传递到 wasm 模块中的函数，函数被调用，返回值被转换并传回到 JavaScript。</p>\n<p>你可以通过两种方式来获得导出的 WebAssembly 函数：</p>\n<ul>\n  <li>在一个已经存在的表格上调用<a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table/get\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Table.prototype.get() (en-US)</a>。</li>\n  <li>通过<a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Instance/exports\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Instance.exports (en-US)</a>从一个 wasm 模块实例获取导出的函数。</li>\n</ul>\n<p>无论哪种方式，你得到的都是底层函数的相同封装。从 JavaScript 的角度来看，每一个 wasm 函数看起来也是一个 JavaScript 函数——但是，它们被封装在导出的 wasm 函数对象实例中，并且只有有限的方式来获取它们。</p>"}},{"type":"prose","value":{"id":"一个例子","title":"一个例子","isH3":false,"content":"<p>让我们看个例子从而让事情更清晰（你可以在 GitHub 上找到这个例子<a href=\"https://github.com/mdn/webassembly-examples/blob/master/other-examples/table-set.html\" class=\"external\" rel=\" noopener\">table-set.html</a>；或者<a href=\"https://mdn.github.io/webassembly-examples/other-examples/table-set.html\" class=\"external\" rel=\" noopener\">实时运行</a>然后查看 wasm<a href=\"https://github.com/mdn/webassembly-examples/blob/master/text-format-examples/table.wat\" class=\"external\" rel=\" noopener\">文本表示</a>）：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> otherTable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">element</span><span class=\"token operator\">:</span> <span class=\"token string\">\"anyfunc\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">initial</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetchAndInstantiate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'table.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> tbl <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>tbl<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 13</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 42</span>\n  otherTable<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>tbl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  otherTable<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>tbl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>otherTable<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>otherTable<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在这里，我们使用<a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Table\">WebAssembly.Table</a>构造函数在 JavaScript 中创建了一个表格（otherTable），然后使用<a href=\"https://github.com/mdn/webassembly-examples/blob/master/wasm-utils.js\" class=\"external\" rel=\" noopener\">fetchAndInstantiate()</a>实用函数把 table.wasm 加载到我们的页面。</p>\n<p>然后，我们得到了从模块中导出的函数，通过<a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table/get\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">tbl.get() (en-US)</a>获取引用的函数并且把每一次的调用结果输出到控制台。接下来，我们使用 set() 使得 otherTable 表格包含了与 tbl 表格相同的函数。</p>\n<p>为了证明这一点，我们从 otherTable 中获取了这些引用并且也把他们的结果打印到控制台，结果是一样的。</p>"}},{"type":"prose","value":{"id":"它们确实是函数","title":"它们确实是函数","isH3":false,"content":"<p>在前面的例子中，每次<a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table/get\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Table.prototype.get() (en-US)</a>调用的返回值都是一个导出的 WebAssembly 函数——这正是我们一直在讨论的。</p>\n<p>它们确实是 JavaScript 函数也是对 WebAssembly 函数的封装。如果你把上面的例子加载到<a href=\"/zh-CN/docs/WebAssembly#browser_compatibility\">支持 WebAssembly 的浏览器</a>中，然后在你的控制台运行下面几行代码：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> testFunc <span class=\"token operator\">=</span> otherTable<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> testFunc<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>你得到的返回结果是 function。对于这个函数，你可以像对待其他 JavaScript<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function\">函数</a>那样做你想做的任何事——<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\">call()</a>、 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\">bind()</a>等等。testFunc.toString() 返回一个有趣的结果：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token number\">0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>native code<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>这带给你关于封装类型特征的更多理解。</p>\n<p>关于导出的 WebAssembly 函数的一些其他值得关注的特性：</p>\n<ul>\n  <li>它们的<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/length\">length</a>属性是在 wasm 函数签名中声明的参数的数量。</li>\n  <li>它们的<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/name\">name</a>属性是函数在 wasm 模块中的索引调用 toString() 的返回值。</li>\n  <li>如果你尝试调用一个接受或返回一个 i64 类型值的导出的 wasm 函数，目前它会抛出一个错误，因为 JavaScript 当前没有精确的方式来表示一个 i64。不过，这在将来可能会改变——在将来的标准中，新的 int64 类型正在考虑之中。到那时，wasm 可以使用它。</li>\n</ul>"}}],"toc":[{"text":"导出的...什么？","id":"导出的...什么？"},{"text":"一个例子","id":"一个例子"},{"text":"它们确实是函数","id":"它们确实是函数"}],"summary":"导出 WebAssembly 函数的过程，其实就是指这些函数在 JavaScript 中如何用表示。本文更详细的介绍它们。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Exported WebAssembly functions","locale":"en-US","native":"English (US)"},{"title":"Exported WebAssembly functions","locale":"fr","native":"Français"},{"title":"エクスポートされた WebAssembly 関数","locale":"ja","native":"日本語"},{"title":"Exported WebAssembly functions","locale":"ko","native":"한국어"},{"title":"Экспортируемые функции WebAssembly","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/webassembly/exported_functions","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/webassembly/exported_functions/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/WebAssembly","title":"WebAssembly"},{"uri":"/zh-CN/docs/WebAssembly/Exported_functions","title":"导出的 WebAssembly 函数"}],"pageTitle":"导出的 WebAssembly 函数 - WebAssembly | MDN","noIndexing":false}}