{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"使用 WebAssembly JavaScript API","mdn_url":"/zh-CN/docs/WebAssembly/Using_the_JavaScript_API","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/zh-CN/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>如果您已经使用 Emscripten 等工具编译了另一种语言的模块，或者自己加载并运行代码，那么下一步是了解如何使用 WebAssembly JavaScript API 的其他功能。这篇文章告诉你你需要知道什么。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 如果你不熟悉本文中提到到基础概念并且需要更多的解释，先阅读 <a href=\"/zh-CN/docs/WebAssembly/Concepts\">WebAssembly 概念</a> 然后再回来。</p>\n</div>"}},{"type":"prose","value":{"id":"一个简单的例子","title":"一个简单的例子","isH3":false,"content":"<p>让我们通过一步一步的例子来了解如何在 WebAssembly 中使用 Javascript API，和如何在网页中加载一个 wasm 模块。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 你可以发现同样的代码在 <a href=\"https://github.com/mdn/webassembly-examples\" class=\"external\" rel=\" noopener\">webassembly-examples</a> GitHub 仓库。</p>\n</div>"}},{"type":"prose","value":{"id":"准备工作","title":"准备工作","isH3":true,"content":"<ol>\n  <li>首先需要一个 wasm 模块！下载 <a href=\"https://github.com/mdn/webassembly-examples/raw/master/js-api-examples/simple.wasm\" class=\"external\" rel=\" noopener\">simple.wasm</a> 文件到本机的一个新的目录下。</li>\n  <li>确保本机使用的是支持 webassembly 的浏览器。Firefox 52+ 和 Chrome 57+ 是默认支持 webassembly 的。</li>\n  <li>然后，创建一个简单的 HTML 文件命名为 index.html 和并且你的本机的 wasm 文件处于同一目录下 ( 如果你没有模板可以使用我们提供的 <a href=\"https://github.com/mdn/webassembly-examples/blob/master/template/template.html\" class=\"external\" rel=\" noopener\">simple template</a> ).</li>\n  <li>现在，为了帮助我们理解发生了什么，让我们来看看这个 wasm 模块的文本表示 (也可以在<a href=\"/zh-CN/docs/WebAssembly/Text_format_to_wasm#%E5%88%9D%E8%AF%86%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F\">将 WebAssembly 文本格式转换为 wasm</a>见到):\n    <div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$i</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span> <span class=\"token string\">\"imports\"</span> <span class=\"token string\">\"imported_func\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"exported_func\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">42</span>\n        <span class=\"token keyword\">call</span> <span class=\"token variable\">$i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n  </li>\n  <li>在第二行，你将看到导入有一个两级命名空间 —— 内部函数 <code>$i</code> 是从 imports.imported_func 导入的。编写要导入到 wasm 模块的对象时，我们需要在 JavaScript 中反映这个两级命名空间。创建一个 <code>&lt;script&gt;&lt;/script&gt;</code> 节点在你的 HTML 文件中，并且添加下面的代码：\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> importObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">imports</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">imported_func</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n</ol>\n<p>如上所述，我们在 <code>imports.imported_func</code> 中有我们导入的函数。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 使用 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">ES6 箭头函数</a> 将会更加简洁：</p>\n  <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> importObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">imports</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">imported_func</span><span class=\"token operator\">:</span> <span class=\"token parameter\">arg</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</div>\n<p>具体哪种风格由你决定。</p>"}},{"type":"prose","value":{"id":"加载并使用_wasm_模块","title":"加载并使用 wasm 模块","isH3":true,"content":"<p>当我们导入了对象后，我们将获取 wasm 文件，使其在 array buffer 可用，然后就可以使用其导出的函数。</p>\n<p>在第一个块下面添加以下代码到你的脚本中：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'simple.wasm'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bytes</span> <span class=\"token operator\">=&gt;</span>\n  WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> importObject<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  results<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">exported_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>备注：</strong> 我们已经非常详细地解释了这种语法如何工作通过<a href=\"/zh-CN/docs/WebAssembly/Loading_and_running#使用fetch\">加载和运行 WebAssembly 代码</a>。如果不确定，请回到那里进行复习。</p>\n</div>\n<p>这样做的结果是执行我们导出的 WebAssembly 函数 exported_func，这样又调用了另一个我们导入的 JavaScript 函数 imported_func, 它将 WebAssembly 实例（42）中提供的值记录到控制台。如果你保存实例代码并且在支持 WebAssembly 的浏览器中运行，你将看到此操作。</p>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>备注：</strong> WebAssembly 在 Firefox 52+ 和 Chrome 57+/latest Opera 是默认支持的 (你也可以运行 wasm 代码 在 Firefox 47+ 通过将 <em>about:config</em> 中的 <code>javascript.options.wasm</code> flag 设置为 enabling , 或者在 Chrome (51+) 以及 Opera (38+) 通过访问 <em>chrome://flags</em> 并且将 <em>Experimental WebAssembly</em> flag 设置为 enabling.)</p>\n</div>\n<p>这是一个冗长的，令人费解的例子并且实现了很少的功能，但它确实有助于说明这是可能的 —— 在 Web 应用中与 JavaScript 一起使用 WebAssembly 代码。正如我们一直说的，WebAssembly 并不旨在替代 JavaScript; 两者可以一起工作，借鉴对方的优势。</p>"}},{"type":"prose","value":{"id":"在开发者工具查看_wasm","title":"在开发者工具查看 wasm","isH3":true,"content":"<p>在 Firefox 54+, Developer Tool Debugger Panel 有用于公开网页中包含的任何 wasm 代码的文本表示的功能。为了查看它们，要查看它，您可以转到 Debugger Panel 然后单击“xxx &gt; wasm”。</p>\n<p>\n  <img src=\"/en-US/docs/WebAssembly/Using_the_JavaScript_API/wasm-debug.png\" alt=\"\" width=\"2038\" height=\"633\" loading=\"lazy\">\n</p>\n<p>从 Firfox 开始，除了将 WebAssembly 视为文本，开发者可以使用文本格式调试 (打断点，检查调用堆栈，单步调试等等.) WebAssembly 代码。通过这个视频<a href=\"https://www.youtube.com/watch?v=R1WtBkMeGds\" class=\"external\" rel=\" noopener\">使用 Firefox 开发者工具调试 WebAssembly</a>预览。</p>"}},{"type":"prose","value":{"id":"内存","title":"内存","isH3":false,"content":"<p>在 WebAssembly 的底层内存模型中，内存被表示为称为 <a href=\"http://webassembly.org/docs/semantics/#linear-memory\" class=\"external\" rel=\" noopener\">线性内存</a> 的无类型字节的连续范围，通过模块中的<a href=\"http://webassembly.org/docs/semantics/#linear-memory-accesses\" class=\"external\" rel=\" noopener\">加载和存储指令</a>读取和写入。在这个内存模型中，任何加载或存储都可以访问整个线性存储器中的任何字节，这是忠实地表示 C/C++ 概念（如指针）所必需的。</p>\n<p>然后，和原生 C/C++ 程序不同的是可用内存范围跨越整个进程，特定 WebAssembly 实例可访问的内存被限制在由 WebAssembly Memory 对象包含的一个特定的 —— 可能非常小的范围内。</p>\n<p>在 JavaScript 中，内存实例可以被认为是可调整大小的 ArrayBuffer，就像 ArrayBuffers 一样，一个 Web 应用程序可以创建许多独立的内存对象。您可以使用 <a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory()</code></a> 构造函数创建一个，它将参数作为初始大小和（可选）最大大小）。</p>\n<p>我们通过一个快速的例子来开始探索。</p>\n<ol>\n  <li>创建另一个简单的 HTML 页面 (复制我们的 <a href=\"https://github.com/mdn/webassembly-examples/blob/master/template/template.html\" class=\"external\" rel=\" noopener\">simple template</a>) 并且命名为 <code>memory.html</code>。添加一个 <code>&lt;script&gt;&lt;/script&gt;</code> 节点到页面中。</li>\n  <li>\n    在脚本的顶部添加下面的一行代码来创建一个内存实例：\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> memory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Memory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">initial</span><span class=\"token operator\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">maximum</span><span class=\"token operator\">:</span><span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>初始和最大的单位是 WebAssembly pages ——这些页面的大小固定为 64KB。这意味着上述内存实例的初始大小为 640KB，最大大小为 6.4MB。\n    WebAssembly 内存通过简单地提供一个返回 ArrayBuffer 的缓冲区 getter / setter 来显示它的字节。例如，要直接将 42 写入线性内存的第一个单词，你可以这样做：\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint32Array</span><span class=\"token punctuation\">(</span>memory<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n</code></pre></div>你也可以得到刚才的值通过：\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint32Array</span><span class=\"token punctuation\">(</span>memory<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n</code></pre></div>\n  </li>\n  <li>现在尝试这个演示 —— 保存目前为止添加的内容，将其加载到浏览器中，然后尝试在 JavaScript 控制台中输入上述两行。</li>\n</ol>"}},{"type":"prose","value":{"id":"增加内存","title":"增加内存","isH3":true,"content":"<p>一个内存实例的大小可以通过 <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>Memory.prototype.grow()</code></a> 来增加，再次以 WebAssembly pages 为单位指定参数：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>memory<span class=\"token punctuation\">.</span><span class=\"token function\">grow</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>如果在创建内存实例时提供了最大值，则尝试超过此最大值将抛出 <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>WebAssembly.RangeError</code></a> 异常。引擎利用这个提供的上限来提前预留内存，这样可以使调整大小更有效率。</p>\n<p>Note: 由于 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> 的 byteLength 是不可变的，所以在成功 <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>Memory.prototype.grow()</code></a> 操作之后，缓冲区 getter 将返回一个新的 ArrayBuffer 对象 新的 byteLength）和任何先前的 ArrayBuffer 对象变成“分离”，或者与先前指向的底层内存断开连接。</p>\n<p>和函数一样，线性内存可以在模块内部进行定义或者导入。类似地，模块还可以可选地导出其内存。这这意味着 JavaScript 可以通过创建<code>new WebAssembly.Memory</code> 并将其作为导入或通过接收内存导出传递给 WebAssembly 实例的内存来访问 (通过 <a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Instance/exports\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Instance.prototype.exports (en-US)</a>).</p>"}},{"type":"prose","value":{"id":"更复杂的内存示例","title":"更复杂的内存示例","isH3":true,"content":"<p>让我们通过看一个更复杂的内存示例——一个对整数数组进行求和的 WebAssembly 模块——来明确上面的概念。你可以在这里<a href=\"https://github.com/mdn/webassembly-examples/raw/master/js-api-examples/memory.wasm\" class=\"external\" rel=\" noopener\">memory.wasm</a>找到示例。</p>\n<ol>\n  <li>像前面那样在相同的目录下复制一份 memory.wasm。\n    <div class=\"notecard note\" id=\"sect6\">\n      <p><strong>备注：</strong> 你可以在这里<a href=\"https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/memory.wat\" class=\"external\" rel=\" noopener\">memory.wat</a>找到模块的文本表示形式。</p>\n    </div>\n  </li>\n  <li>回到你的示例文件 memory.html，像前面那样获取、编译和实例化你的 wasm 模块——在你的脚本代码底部加入下面的代码：\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'memory.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=&gt;</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bytes</span> <span class=\"token operator\">=&gt;</span>\n  WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 在这里加入你的代码</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>因为该模块导出了它的内存，给定该模块的一个实例，我们可以使用一个导出函数 accumulate() 在该模块实例的线性内存（mem）中创建和填入一个输入数组。在前面指明的地方加入如下代码：\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> i32 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint32Array</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>mem<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  i32<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> results<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">accumulate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n</ol>\n<p>注意我们是如何在内存对象的缓存上创建了 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code> <small>(en-US)</small></a>视图，而不是在内存对象本身这么做。</p>\n<p>内存导入与函数导入很像，只是内存对象取代了 JavaScript 函数作为了传入值。内存导入在下面两方面很有用：</p>\n<ul>\n  <li>它们允许 JavaScript 在模块编译之前或者同时获取和创建内存的初始内容。</li>\n  <li>它们允许一个单一的内存对象被多个模块实例导入，对于实现 WebAssembly 动态链接来说，这是一个关键的构建模块。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect7\">\n  <p><strong>备注：</strong> 你可以在这里<a href=\"https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/memory.html\" class=\"external\" rel=\" noopener\">memory.html</a> (<a href=\"https://mdn.github.io/webassembly-examples/js-api-examples/memory.html\" class=\"external\" rel=\" noopener\">或实时运行</a>) 找到我们的完整例子——这个版本使用了<a href=\"https://github.com/mdn/webassembly-examples/blob/master/wasm-utils.js\" class=\"external\" rel=\" noopener\">fetchAndInstantiate()</a>函数。</p>\n</div>"}},{"type":"prose","value":{"id":"表格","title":"表格","isH3":false,"content":"<p>WebAssembly 表格是一个可变大小的带类型的引用数组，其中的引用可以被 JavaScript 和 WebAssembly 代码存取。然而，内存提供的是一个可变大小的带类型的原始字节数组。所以，把引用存储在内存中是不安全。由于安全、可移植性和稳定性等原因，作为引擎信任的引用值是千万不能被直接读写的。</p>\n<p>表格有一个元素类型，其限制了可以存储在表格的引用类型。在当前的 WebAssembly 版本中，只有一种 WebAssembly 代码所需要的引用类型——函数——也就是唯一合法的元素类型。在将来的版本中，更多的元素类型会被加入。</p>\n<p>函数引用对于编译诸如 C/C++这类拥有函数指针的语言来说是必要的。在 C/C++的原生实现中，函数指针是通过函数代码在进程的虚地址空间的原始地址表示的，并且由于前面提到的安全原因，它是不能被直接存储在线性内存中的。取而代之的是，函数引用被存储在表格之中。它们的整数索引可以存储在线性内存中并进行传递。</p>\n<p>当调用一个函数指针的时候，WebAssembly 调用函数提供索引。在进行索引和调用索引到的函数引用之前，可以对该索引进行表格的边界检查。因而，目前的表格是一个相当底层的用来安全地和可移植地编译底层编程语言特性的基本类型。</p>\n<p>表格可以通过<a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table/set\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Table.prototype.set() (en-US)</a>和 <a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table/grow\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Table.prototype.grow() (en-US)</a>进行更改，它们会更新表格中的一个值和增加可以存储在表格的大小。这允许间接可调用函数集合可以随着时间而改变，其对于<a href=\"http://webassembly.org/docs/dynamic-linking/\" class=\"external\" rel=\" noopener\">动态链接技术</a>来说是必要的。这些更改对于 JavaScript 和 wasm 模块来说是立即生效的。同时，在 JavaScript 可以通过<a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table/get\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Table.prototype.get() (en-US)</a>得到最新值。</p>"}},{"type":"prose","value":{"id":"表格示例","title":"表格示例","isH3":true,"content":"<p>让我们看一个简单的表格示例——一个 WebAssembly 模块，该模块创建并导出了一个带有两个元素的表格：元素 0 返回 13，元素 1 返回 42。你可以在<a href=\"https://github.com/mdn/webassembly-examples/raw/master/js-api-examples/table.wasm\" class=\"external\" rel=\" noopener\">table.wasm</a>中找到该示例。</p>\n<ol>\n  <li>在一个新的目录中复制一份 table.wasm。\n    <div class=\"notecard note\" id=\"sect8\">\n      <p><strong>备注：</strong> 你可以在<a href=\"https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table.wat\" class=\"external\" rel=\" noopener\">table.wat</a>中查看模块的文本表示。</p>\n    </div>\n  </li>\n  <li>创建一份<a href=\"https://github.com/mdn/webassembly-examples/blob/master/template/template.html\" class=\"external\" rel=\" noopener\">HTML 模板</a>的新副本并将其命名为<code>table.html</code>.</li>\n  <li>如前所示，获取、编译并且实例化你的 wasm 模块——将下面的代码放入到 HTML body 底部的<a href=\"/zh-CN/docs/Web/HTML/Element/script\">&lt;script&gt;</a>节点里面：\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'table.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=&gt;</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bytes</span> <span class=\"token operator\">=&gt;</span>\n  WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 在这里添加你的代码</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>现在，让我们获取表格中的数据——将下面的代码放入到指定的位置：\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> tbl <span class=\"token operator\">=</span> results<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>tbl<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 13</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tbl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 42</span>\n</code></pre></div>\n  </li>\n</ol>\n<p>这段代码获取获取了存储在表格中的每一个函数引用，然后实例化它们从而将它们拥有的值打印到控制台——注意每一个函数引用是如何使用<a href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table/get\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Table.prototype.get() (en-US)</a>函数获取的以及在其后面增加一对小括号从而真正的调用该函数。</p>\n<div class=\"notecard note\" id=\"sect9\">\n  <p><strong>备注：</strong> 你可以在<a href=\"https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/table.html\" class=\"external\" rel=\" noopener\">table.html</a> (<a href=\"https://mdn.github.io/webassembly-examples/js-api-examples/table.html\" class=\"external\" rel=\" noopener\">或实时查看运行</a>) 找到我们完整的示例——这个版本使用了<a href=\"https://github.com/mdn/webassembly-examples/blob/master/wasm-utils.js\" class=\"external\" rel=\" noopener\"><code>fetchAndInstantiate()</code></a>函数。</p>\n</div>"}},{"type":"prose","value":{"id":"多样性","title":"多样性","isH3":false,"content":"<p>现在，我们已经展示了 WebAssembly 的主要组成模块的使用，这里是提到多样性概念的好地方。这为 WebAssembly 提供了大量的关于架构效率的优势：</p>\n<ul>\n  <li>一个模块可以有 N 个实例，这与一个函数可以产生 N 个闭包值一样。</li>\n  <li>一个模块实例可以使用 0-1 个内存实例，它为这个实例提供了“地址空间”。将来的 WebAssembly 版本可能允许每个模块实例拥有 0-N 个内存实例（参考<a href=\"http://webassembly.org/docs/future-features/#multiple-tables-and-memories\" class=\"external\" rel=\" noopener\">多表格与内存</a>）。</li>\n  <li>一个模块实例可以使用 0-1 个表格实例——这是该实例的“函数地址空间”，可以用来实现 C 函数指针。将来的 WebAssembly 版本可能允许每个模块实例拥有 0-N 个表格实例。</li>\n  <li>一个内存或表格实例能够被 0-N 个模块实例使用——这些实例全部共享相同的地址空间，这使得<a href=\"http://webassembly.org/docs/dynamic-linking\" class=\"external\" rel=\" noopener\">动态链接</a>成为可能。</li>\n</ul>\n<p>你可以在我们的理解文本格式一本中看到多样性的应用——参考修改表格和动态链接部分（TBD）。</p>"}},{"type":"prose","value":{"id":"总结","title":"总结","isH3":false,"content":"<p>本文带你了解了使用 WebAssembly 的 JavaScript API 的基本知识，包括在 JavaScript 上下文中导入一个 WebAssembly 模块、使用该模块的函数以及在 JavaScript 中使用 WebAssembly 的内存和表格。同时，我们也介绍了多样性的概念。</p>"}},{"type":"prose","value":{"id":"另见","title":"另见","isH3":false,"content":"<ul>\n  <li><a href=\"http://webassembly.org/\" class=\"external\" rel=\" noopener\">webassembly.org</a></li>\n  <li><a href=\"/zh-CN/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n  <li><a href=\"https://research.mozilla.org/webassembly/\" class=\"external\" rel=\" noopener\">WebAssembly on Mozilla Research</a></li>\n</ul>"}}],"toc":[{"text":"一个简单的例子","id":"一个简单的例子"},{"text":"内存","id":"内存"},{"text":"表格","id":"表格"},{"text":"多样性","id":"多样性"},{"text":"总结","id":"总结"},{"text":"另见","id":"另见"}],"summary":"如果您已经使用 Emscripten 等工具编译了另一种语言的模块，或者自己加载并运行代码，那么下一步是了解如何使用 WebAssembly JavaScript API 的其他功能。这篇文章告诉你你需要知道什么。","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using the WebAssembly JavaScript API","locale":"en-US","native":"English (US)"},{"title":"Utiliser l'API JavaScript de WebAssembly","locale":"fr","native":"Français"},{"title":"WebAssembly JavaScript API の使用","locale":"ja","native":"日本語"},{"title":"웹어셈블리의 자바스크립트 API 사용하기","locale":"ko","native":"한국어"},{"title":"Usando a API JavaScript do WebAssembly","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Использование WebAssembly JavaScript API","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/webassembly/using_the_javascript_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/webassembly/using_the_javascript_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/WebAssembly","title":"WebAssembly"},{"uri":"/zh-CN/docs/WebAssembly/Using_the_JavaScript_API","title":"使用 WebAssembly JavaScript API"}],"pageTitle":"使用 WebAssembly JavaScript API - WebAssembly | MDN","noIndexing":false}}