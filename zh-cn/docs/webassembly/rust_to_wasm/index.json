{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"编译 Rust 为 WebAssembly","mdn_url":"/zh-CN/docs/WebAssembly/Rust_to_wasm","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/zh-CN/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/zh-CN/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>如果你写了一些 Rust 代码，你可以把它编译成 WebAssembly！这份教程将带你编译 Rust 项目为 wasm 并在一个现存的 web 应用中使用它。</p>"}},{"type":"prose","value":{"id":"rust_和_webassembly_用例","title":"Rust 和 WebAssembly 用例","isH3":false,"content":"<p>Rust 和 WebAssembly 有两大主要用例：</p>\n<ul>\n  <li>构建完整应用 —— 整个 Web 应用都基于 Rust 开发！</li>\n  <li>构建应用的组成部分 —— 在现存的 JavaScript 前端中使用 Rust。</li>\n</ul>\n<p>目前，Rust 团队正专注于第二种用例，因此我们也将着重介绍它。对于第一种用例，可以参阅 <a href=\"https://github.com/DenisKolodin/yew\" class=\"external\" rel=\" noopener\"><code>yew</code></a> 这类项目。</p>\n<p>在本教程中，我们将使用 Rust 的 npm 包构建工具 <code>wasm-pack</code> 来构建一个 npm 包。这个包只包含 WebAssembly 和 JavaScript 代码，以便包的用户无需安装 Rust 就能使用。他们甚至不需要知道这里包含 WebAssembly！</p>"}},{"type":"prose","value":{"id":"安装_rust_环境","title":"安装 Rust 环境","isH3":false,"content":"<p>让我们看看安装 Rust 环境的所有必要步骤。</p>"}},{"type":"prose","value":{"id":"安装_rust","title":"安装 Rust","isH3":true,"content":"<p>前往 <a href=\"https://www.rust-lang.org/install.html\" class=\"external\" rel=\" noopener\">Install Rust</a> 页面并跟随指示安装 Rust。这里会安装一个名为“rustup”的工具，这个工具能让你管理多个不同版本的 Rust。默认情况下，它会安装用于惯常 Rust 开发的 stable 版本 Rust Release。Rustup 会安装 Rust 的编译器 <code>rustc</code>、Rust 的包管理工具 <code>cargo</code>、Rust 的标准库 <code>rust-std</code> 以及一些有用的文档 <code>rust-docs</code>。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 需要注意，在安装完成后，你需要把 cargo 的 <code>bin</code> 目录添加到你系统的 <code>PATH</code> 。一般来说它会自动添加，但需要你重启终端后才会生效。</p>\n</div>"}},{"type":"prose","value":{"id":"wasm-pack","title":"wasm-pack","isH3":true,"content":"<p>要构建我们的包，我们需要一个额外工具 <code>wasm-pack</code>。它会帮助我们把我们的代码编译成 WebAssembly 并制造出正确的 <code>npm</code> 包。使用下面的命令可以下载并安装它：</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>cargo <span class=\"token function\">install</span> wasm-pack\n</code></pre></div>"}},{"type":"prose","value":{"id":"安装_node.js_并获取_npm_账户","title":"安装 Node.js 并获取 npm 账户","isH3":true,"content":"<p>在这个例子中我们将会构建一个 npm 包，因此你需要确保安装 Node.js 和 npm 已经安装。另外，我们将会把包发布到 npm 上，因此你还需要一个 npm 账号。它们是免费的。发布这个包并不是必须的，但是发布它非常简单，因此在本例中我们默认你会发布这个包。</p>\n<p>在 <a href=\"https://www.npmjs.com/get-npm\" class=\"external\" rel=\" noopener\">Get npm!</a> 页面按照说明下载并安装 Node.js 和 npm。在选择版本时，选择一个你喜欢的版本；本例不限定特定版本。</p>\n<p>在 <a href=\"https://www.npmjs.com/signup\" class=\"external\" rel=\" noopener\">npm signup page</a> 注册 npm 账户，并填写表格。</p>\n<p>接下来，在命令行中运行 <code>npm adduser</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token operator\">&gt;</span> <span class=\"token function\">npm</span> adduser\nUsername: yournpmusername\nPassword:\nEmail: <span class=\"token punctuation\">(</span>this IS public<span class=\"token punctuation\">)</span> you@example.com\n</code></pre></div>\n<p>你需要完善你的用户名，密码和邮箱。如果成功了，你将会看到：</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>Logged <span class=\"token keyword\">in</span> as yournpmusername on https://registry.npmjs.org/.\n</code></pre></div>\n<p>如果并未正常运行，请联系 npm 解决。</p>"}},{"type":"prose","value":{"id":"构建我们的_webassembly_npm_包","title":"构建我们的 WebAssembly npm 包","isH3":false,"content":"<p>万事俱备，来创建一个新的 Rust 包吧。打开你用来存放你私人项目的目录，做这些事：</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>$ cargo new --lib hello-wasm\n     Created library <span class=\"token variable\"><span class=\"token variable\">`</span>hello-wasm<span class=\"token variable\">`</span></span> project\n</code></pre></div>\n<p>这里会在名为 <code>hello-wasm</code> 的子目录里创建一个新的库，里面有下一步之前你所需要的一切：</p>\n<div class=\"code-example\"><pre class=\"brush: shell notranslate\"><code>+-- Cargo.toml\n+-- src\n    +-- lib.rs\n</code></pre></div>\n<p>首先，我们有一个 <code>Cargo.toml</code> 文件，这是我们配置构建的方式。如果你用过 Bundler 的 <code>Gemfile</code> 或者 npm 的 <code>package.json</code>，你应该会感到很熟悉。Cargo 的用法和它们类似。</p>\n<p>接下来，Cargo 在 <code>src/lib.rs</code> 生成了一些 Rust 代码：</p>\n<div class=\"code-example\"><pre class=\"brush: rust notranslate\"><code><span class=\"token attribute attr-name\">#[cfg(test)]</span>\n<span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">tests</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute attr-name\">#[test]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">it_works</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>我们完全不需要使用这些测试代码，所以继续吧，我们删掉它。</p>"}},{"type":"prose","value":{"id":"来写点_rust_代码吧！","title":"来写点 Rust 代码吧！","isH3":true,"content":"<p>让我们在 <code>src/lib.rs</code> 写一些代码替换掉原来的：</p>\n<div class=\"code-example\"><pre class=\"brush: rust notranslate\"><code><span class=\"token keyword\">extern</span> <span class=\"token keyword\">crate</span> <span class=\"token module-declaration namespace\">wasm_bindgen</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">wasm_bindgen<span class=\"token punctuation\">::</span>prelude<span class=\"token punctuation\">::</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[wasm_bindgen]</span>\n<span class=\"token keyword\">extern</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">alert</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[wasm_bindgen]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">greet</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, {}!\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>这就是我们这个 Rust 项目的内容。它有三个主要部分，让我们按顺序来讲。这里将会给出一个缺少部分细节的高级说明；如果想要了解更多 Rust 知识，请查看在线书籍 <a href=\"https://doc.rust-lang.org/book/\" class=\"external\" rel=\" noopener\">The Rust Programming Language</a>。</p>\n<h4 id=\"使用_wasm-bindgen_在_rust_与_javascript_之间通信\">使用 <code>wasm-bindgen</code> 在 Rust 与 JavaScript 之间通信</h4>\n<p>第一部分看起来像这样：</p>\n<div class=\"code-example\"><pre class=\"brush: rust notranslate\"><code><span class=\"token keyword\">extern</span> <span class=\"token keyword\">crate</span> <span class=\"token module-declaration namespace\">wasm_bindgen</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">wasm_bindgen<span class=\"token punctuation\">::</span>prelude<span class=\"token punctuation\">::</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>第一行就像在说“哇 Rust，我们在用一个叫做 wasm_bindgen 的库”。在 Rust 当中，库被称为“crates”，因为我们使用的是一个外部库，所以有 \"extern\"。</p>\n<p>明白了吗？ <strong>Cargo ships crates</strong>.</p>\n<p>第三行包括了一个将库中的代码引入到你的代码中的使用命令。在这个情况下，将会引入 <code>wasm_bindgen::prelude</code> 的全部模块。我们将在下一节中使用这些内容。</p>\n<p>在我们开始下一节之前，我们将讲一讲 <code>wasm-bindgen</code>。</p>\n<p><code>wasm-pack</code> 使用另一个工具 <code>wasm-bindgen</code> 来提供 JavaScript 和 Rust 类型之间的桥梁。它允许 JavaScript 使用字符串调用 Rust API，或调用 Rust 函数来捕获 JavaScript 异常。</p>\n<p>我们将在我们的包中使用 <code>wasm-bindgen</code> 的功能。事实上，这是下一节的内容！</p>\n<h4 id=\"在_rust_中调用来自_javascript_的外部函数\">在 Rust 中调用来自 JavaScript 的外部函数</h4>\n<p>接下来的部分看起来像这样：</p>\n<div class=\"code-example\"><pre class=\"brush: rust notranslate\"><code><span class=\"token attribute attr-name\">#[wasm_bindgen]</span>\n<span class=\"token keyword\">extern</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">alert</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>在 <code>#[]</code> 中的内容叫做 \"属性\"，并以某种方式改变下面的语句。在这种情况下，下面的语句是一个 <code>extern</code>，它将告诉 Rust that 我们想调用一些外部定义的函数。这个属性告诉我们 \"wasm-bindgen 知道如何找到这些函数\"。</p>\n<p>第三行是用 Rust 写的函数签名。它告诉我们 \"<code>alert</code> 函数接受一个叫做 s 的字符串作为参数。\"</p>\n<p>你可能会疑惑这个函数是什么，你的疑惑可能是正确的：这是 <a href=\"/zh-CN/docs/Web/API/Window/alert\">the <code>alert</code> function provided by JavaScript</a>！我们将在下一节中调用这个函数。</p>\n<p>当你想调用新的 JavaScript 函数时，你可以在这里写他们，<code>wasm-bindgen</code> 将负责为您设置一切。并非一切都得到支持，但我们正在努力！如果缺少某些内容，请 <a href=\"https://github.com/rustwasm/wasm-bindgen/issues/new\" class=\"external\" rel=\" noopener\">file bugs</a> 。</p>\n<h4 id=\"编写能够在_javascript_中调用的_rust_函数\">编写能够在 JavaScript 中调用的 Rust 函数</h4>\n<p>最后一部分是这样的：</p>\n<div class=\"code-example\"><pre class=\"brush: rust notranslate\"><code><span class=\"token attribute attr-name\">#[wasm_bindgen]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">greet</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, {}!\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>我们又看到了 <code>#[wasm_bindgen]</code> 属性。在这里，它并非定义一个 <code>extern</code> 块，而是 <code>fn，</code>这代表我们希望能够在 JavaScript 中使用这个 Rust 函数。这和 <code>extern</code> 正相反：我们并非引入函数，而是要把函数给外部世界使用。</p>\n<p>这个函数的名字是 <code>greet</code>，它需要一个参数，一个字符串（写作 <code>&amp;str</code>）。它调用了我们前面在 <code>extern</code> 块中引入的 <code>alert</code> 函数。它传递了一个让我们串联字符串的 <code>format!</code> 宏的调用。</p>\n<p><code>format!</code> 在这里有两个参数，一个格式化字符串和一个要填入的变量。格式化字符串是 <code>\"Hello, {}!\"</code> 部分。它可以包含一个或多个 <code>{}</code>，变量将会被填入其中。传递的变量是 <code>name</code>，也就是这个函数的参数。所以当我们调用 <code>greet(\"Steve\")</code>时我们就能看到 <code>\"Hello, Steve!\"</code>。</p>\n<p>这个传递到了 <code>alert()</code>，所以当我们调用这个函数时，我们应该能看到他谈弹出了一个带有 \"Hello, Steve!\" 的消息框。</p>\n<p>我们的库写完了，是时候构建它了。</p>"}},{"type":"prose","value":{"id":"把我们的代码编译到_webassembly","title":"把我们的代码编译到 WebAssembly","isH3":true,"content":"<p>为了能够正确的编译我们的代码，首先我们需要配置 <code>Cargo.toml</code>。打开这个文件，将内容改为如下所示：</p>\n<div class=\"code-example\"><pre class=\"brush: toml notranslate\"><code><span class=\"token punctuation\">[</span><span class=\"token table class-name\">package</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">name</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"hello-wasm\"</span>\n<span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.1.0\"</span>\n<span class=\"token key property\">authors</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Your Name &lt;you@example.com&gt;\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">description</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"A sample project with wasm-pack\"</span>\n<span class=\"token key property\">license</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"MIT/Apache-2.0\"</span>\n<span class=\"token key property\">repository</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"https://github.com/yourgithubusername/hello-wasm\"</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">lib</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">crate-type</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"cdylib\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">dependencies</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">wasm-bindgen</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.2\"</span>\n</code></pre></div>\n<p>你需要改为自己的仓库，同时 Cargo 需要通过 <code>git</code> 来完善 <code>authors</code> 部分。</p>\n<p>最重要的是添加底下的部分。第一个部分 — <code>[lib]</code> — 告诉 Rust 为我们的包建立一个 <code>cdylib</code> 版本；在本教程中我们不会讲解它的含义。有关更多信息，请参阅 <a href=\"https://doc.rust-lang.org/cargo/guide/\" class=\"external\" rel=\" noopener\">Cargo</a> 和 <a href=\"https://doc.rust-lang.org/reference/linkage.html\" class=\"external\" rel=\" noopener\">Rust Linkage</a> 文档。</p>\n<p>第二个部分是 <code>[dependencies]</code> 部分。在这里我们告诉 Cargo 我们需要依赖哪个版本的 <code>wasm-bindgen</code> ；在这个例子中，它是 <code>0.2.z</code> 版本的 (不是 <code>0.3.0</code> 或者其他版本)。</p>"}},{"type":"prose","value":{"id":"构建包","title":"构建包","isH3":true,"content":"<p>现在我们已经完成了所有配置项，开始构建吧！在命令行输入以下命令：</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>wasm-pack build --scope mynpmusername\n</code></pre></div>\n<p>这个命令将做一系列事情 (这会花一些时间，特别是当你第一次运行 <code>wasm-pack</code>)。想了解详细情况，查看<a href=\"https://hacks.mozilla.org/2018/04/hello-wasm-pack/\" class=\"external\" rel=\" noopener\">这篇在 Mozilla Hacks 上的文章</a>。简单来说，<code>wasm-pack build</code> 将做以下几件事：</p>\n<ol>\n  <li>将你的 Rust 代码编译成 WebAssembly。</li>\n  <li>在编译好的 WebAssembly 代码基础上运行 <code>wasm-bindgen</code>，生成一个 JavaScript 文件将 WebAssembly 文件包装成一个模块以便 npm 能够识别它。</li>\n  <li>创建一个 <code>pkg</code> 文件夹并将 JavaScript 文件和生成的 WebAssembly 代码移到其中。</li>\n  <li>读取你的 <code>Cargo.toml</code> 并生成相应的 <code>package.json</code>。</li>\n  <li>复制你的 <code>README.md</code> (如果有的话) 到文件夹中。</li>\n</ol>\n<p>最后的结果？你在 <code>pkg</code> 文件夹下有了一个 npm 包。</p>\n<h4 id=\"对代码体积的一些说明\">对代码体积的一些说明</h4>\n<p>如果你检查生成的 WebAssembly 文件体积，它可能有几百 kB。我们没有让 Rust 去压缩生成的代码，从而大大减少生成包的体积。这和本次教程主题无关，但如果你想了解更多，查看 Rust WebAssembly 工作组文档上关于 <a href=\"https://rustwasm.github.io/book/game-of-life/code-size.html#shrinking-wasm-size\" class=\"external\" rel=\" noopener\">减少 .wasm 体积</a> 的说明。</p>"}},{"type":"prose","value":{"id":"把我们的包发布到_npm","title":"把我们的包发布到 npm","isH3":true,"content":"<p>把我们的新包发布到 npm registry:</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token builtin class-name\">cd</span> pkg\n<span class=\"token function\">npm</span> publish --access<span class=\"token operator\">=</span>public\n</code></pre></div>\n<p>我们现在有了一个 npm 包，使用 Rust 编写，但已经被编译为 WebAssembly 了。现在这个包已经可以被 JavaScript 使用了，而且使用它完全不需要用户安装 Rust；包中的代码是 WebAssembly 代码，而不是 Rust 源码！</p>"}},{"type":"prose","value":{"id":"在网站上使用我们的包","title":"在网站上使用我们的包","isH3":false,"content":"<p>让我们建立一个使用我们包的网站！人们通过各种打包工具使用 npm 包，在本教程中，我们将使用 <code>webpack</code>。它比其他某些打包工具稍微复杂一点，但展示了更实际的用法。</p>\n<p>让我们离开<code>pkg</code>目录，并创建一个新目录<code>site</code>，尝试以下操作：</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>\n<span class=\"token function\">mkdir</span> site\n<span class=\"token builtin class-name\">cd</span> site\n</code></pre></div>\n<p>创建一个新文件 <code>package.json</code>，然后输入如下代码：</p>\n<div class=\"code-example\"><pre class=\"brush: json notranslate\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack-dev-server\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@mynpmusername/hello-wasm\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^0.1.0\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"webpack\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.25.1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"webpack-cli\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^3.1.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"webpack-dev-server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^3.1.10\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>请注意，您需要在依赖项部分的 <code>@</code> 之后填写自己的用户名。</p>\n<p>接下来，我们需要配置 Webpack。创建 <code>webpack.config.js</code> 并输入：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"development\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>现在我们需要一个 HTML 文件。创建一个<code>index.html</code>并写入如下内容：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>hello-wasm example<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./index.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>最后，从 HTML 文件中引用<code>index.js</code>：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> js <span class=\"token operator\">=</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./node_modules/@yournpmusername/hello-wasm/hello_wasm.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\njs<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">js</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  js<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WebAssembly\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>请注意，您需要再次填写您的 npm 用户名。</p>\n<p>这将从<code>node_modules</code>文件夹导入我们的模块。这不是最佳做法，但这里只做一个演示，因此暂时就这样用。加载后，它将从该模块调用<code>greet</code>函数，并传入字符串“WebAssembly”参数。注意这里看上去没有什么特别的，但是我们正在调用 Rust 代码！就 JavaScript 代码所知，这只是一个普通模块。</p>\n<p>我们已经完成了所有的文件！让我们试一下：</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n<span class=\"token function\">npm</span> run serve\n</code></pre></div>\n<p>这将启动一个 Web 服务器。访问 <a href=\"http://localhost:8080\" class=\"external\" rel=\" noopener\">http://localhost:8080</a>，您应该会在屏幕上看到一个警告框，其中包含 <code>Hello, WebAssembly!</code> ！我们已经成功地从 JavaScript 调用了 Rust，并从 Rust 调用了 JavaScript。</p>"}},{"type":"prose","value":{"id":"结论","title":"结论","isH3":false,"content":"<p>本教程到此结束。希望你觉得它有用。</p>\n<p>在这个领域，有很多工作正在推进当中。如果你希望它变得更好，可以参阅 <a href=\"https://fitzgeraldnick.com/2018/02/27/wasm-domain-working-group.html\" class=\"external\" rel=\" noopener\">Rust Webassembly 工作组</a>。</p>"}}],"toc":[{"text":"Rust 和 WebAssembly 用例","id":"rust_和_webassembly_用例"},{"text":"安装 Rust 环境","id":"安装_rust_环境"},{"text":"构建我们的 WebAssembly npm 包","id":"构建我们的_webassembly_npm_包"},{"text":"在网站上使用我们的包","id":"在网站上使用我们的包"},{"text":"结论","id":"结论"}],"summary":"如果你写了一些 Rust 代码，你可以把它编译成 WebAssembly！这份教程将带你编译 Rust 项目为 wasm 并在一个现存的 web 应用中使用它。","popularity":0.0006,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Compiling from Rust to WebAssembly","locale":"en-US","native":"English (US)"},{"title":"Rust から WebAssembly にコンパイルする","locale":"ja","native":"日本語"},{"title":"Rust를 WebAssembly로 컴파일하기","locale":"ko","native":"한국어"},{"title":"Компиляция Rust в WebAssembly","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/webassembly/rust_to_wasm","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/webassembly/rust_to_wasm/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/WebAssembly","title":"WebAssembly"},{"uri":"/zh-CN/docs/WebAssembly/Rust_to_wasm","title":"编译 Rust 为 WebAssembly"}],"pageTitle":"编译 Rust 为 WebAssembly - WebAssembly | MDN","noIndexing":false}}