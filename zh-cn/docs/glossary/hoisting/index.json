{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Hoisting（变量提升）","mdn_url":"/zh-CN/docs/Glossary/Hoisting","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>变量提升（Hoisting）被认为是，Javascript 中执行上下文（特别是创建和执行阶段）工作方式的一种认识。在 <a href=\"https://www.ecma-international.org/ecma-262/6.0/index.html\" class=\"external\" rel=\" noopener\">ECMAScript® 2015 Language Specification</a> 之前的 JavaScript 文档中找不到变量提升（Hoisting）这个词。不过，需要注意的是，开始时，这个概念可能比较难理解，甚至恼人。</p>\n<p>例如，从概念的字面意义上说，“变量提升”意味着变量和函数的声明会在物理层面移动到代码的最前面，但这么说并不准确。实际上变量和函数声明在代码里的位置是不会动的，而是在编译阶段被放入内存中。</p>"}},{"type":"prose","value":{"id":"了解更多","title":"了解更多","isH3":false,"content":""}},{"type":"prose","value":{"id":"技术范例","title":"技术范例","isH3":true,"content":"<p>JavaScript 在执行任何代码段之前，将函数声明放入内存中的优点之一是，你可以在声明一个函数之前使用该函数。例如：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/**\n* 正确的方式：先声明函数，再调用函数 (最佳实践)\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我的猫名叫 \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tigger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n以上代码的执行结果是：\"我的猫名叫 Tigger\"\n*/</span>\n</code></pre></div>\n<p>上面的代码片按照是你的正常思维（先声明，后调用）去书写的。现在，我们来看看当我们在写这个函数之前调用这个函数会发生什么：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/**\n* 不推荐的方式：先调用函数，再声明函数\n*/</span>\n\n<span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Chloe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我的猫名叫 \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n代码执行的结果是：\"我的猫名叫 Chloe\"\n*/</span>\n</code></pre></div>\n<p>即使我们在定义这个函数之前调用它，函数仍然可以工作。这是因为在 JavaScript 中<strong>执行上下文</strong>的工作方式造成的。</p>\n<p>变量提升也适用于其他数据类型和变量。变量可以在声明之前进行初始化和使用。但是如果没有初始化，就不能使用它们。</p>\n<p>译者注：函数和变量相比，会被优先提升。这意味着函数会被提升到更靠前的位置。</p>"}},{"type":"prose","value":{"id":"只有声明被提升","title":"只有声明被提升","isH3":true,"content":"<p>JavaScript 只会提升声明，不会提升其初始化。如果一个变量先被使用再被声明和赋值的话，使用时的值是 undefined。参见例子：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns undefined</span>\n<span class=\"token keyword\">var</span> num<span class=\"token punctuation\">;</span>\nnum <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>如果你先赋值、再使用、最后声明该变量，使用时能获取到所赋的值</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>num <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 6</span>\n<span class=\"token keyword\">var</span> num<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>再来看几个类似的例子：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Example 1 - only y is hoisted</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 声明 + 初始化 x</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// '1 undefined'</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 声明 + 初始化 y</span>\n\n<span class=\"token comment\">// Example 2 - Hoists</span>\n<span class=\"token keyword\">var</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// Declare and initialize num1</span>\nnum2 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// Initialize num2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'3 4'</span>\n<span class=\"token keyword\">var</span> num2<span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// Declare num2 for hoisting</span>\n\n<span class=\"token comment\">// Example 3 - Hoists</span>\na <span class=\"token operator\">=</span> <span class=\"token string\">'Cran'</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// Initialize a</span>\nb <span class=\"token operator\">=</span> <span class=\"token string\">'berry'</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// Initialize b</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Cranberry'</span>\n<span class=\"token keyword\">var</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>                <span class=\"token comment\">// Declare both a &amp; b for hoisting</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"技术参考","title":"技术参考","isH3":true,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/var\">var statement</a> - MDN</li>\n  <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/function\">function statement</a> - MDN</li>\n</ul>"}}],"toc":[{"text":"了解更多","id":"了解更多"}],"summary":"变量提升（Hoisting）被认为是，Javascript 中执行上下文（特别是创建和执行阶段）工作方式的一种认识。在 ECMAScript® 2015 Language Specification 之前的 JavaScript 文档中找不到变量提升（Hoisting）这个词。不过，需要注意的是，开始时，这个概念可能比较难理解，甚至恼人。","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Hoisting","locale":"en-US","native":"English (US)"},{"title":"Hoisting","locale":"es","native":"Español"},{"title":"Hoisting","locale":"fr","native":"Français"},{"title":"Hoisting (巻き上げ、ホイスティング)","locale":"ja","native":"日本語"},{"title":"호이스팅","locale":"ko","native":"한국어"},{"title":"Hoisting","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Поднятие","locale":"ru","native":"Русский"},{"title":"提升（Hoisting）","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/glossary/hoisting","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/glossary/hoisting/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Glossary","title":"术语表"},{"uri":"/zh-CN/docs/Glossary/Hoisting","title":"Hoisting（变量提升）"}],"pageTitle":"Hoisting（变量提升） - 术语表 | MDN","noIndexing":false}}