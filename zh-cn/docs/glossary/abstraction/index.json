{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"抽象编程（Abstraction）","mdn_url":"/zh-CN/docs/Glossary/Abstraction","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>在<a href=\"/zh-CN/docs/Glossary/Computer_Programming\">计算机编程</a>领域中，抽象编程指在研发大型复杂软件系统时，通过抽象的方法来降低编程复杂度，实现系统快速高效设计和开发的编程模式。它将系统各功能实现的技术细节隐藏在相对简单的 <a href=\"/zh-CN/docs/Glossary/API\">API 接口</a>之后。</p>"}},{"type":"prose","value":{"id":"数据抽象的好处","title":"数据抽象的好处","isH3":false,"content":"<ul>\n  <li>使用户避免撰写低等级代码。</li>\n  <li>避免代码重复，增加代码的复用性。</li>\n  <li>在不影响用户的前提下可以独立修改类的内部实现。</li>\n  <li>有效提升应用程序的安全性，因为只向用户提供重要的细节。</li>\n</ul>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">ImplementAbstraction</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 设置一系列内部成员的值的方法</span>\n  <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">b = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ImplementAbstraction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// a = 10</span>\n<span class=\"token comment\">// b = 20</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"参见","title":"参见","isH3":false,"content":"<ul>\n  <li>维基百科上的<a href=\"https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E5%8C%96_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)\" class=\"external\" rel=\" noopener\">抽象化</a></li>\n</ul>"}}],"toc":[{"text":"数据抽象的好处","id":"数据抽象的好处"},{"text":"示例","id":"示例"},{"text":"参见","id":"参见"}],"summary":"在计算机编程领域中，抽象编程指在研发大型复杂软件系统时，通过抽象的方法来降低编程复杂度，实现系统快速高效设计和开发的编程模式。它将系统各功能实现的技术细节隐藏在相对简单的 API 接口之后。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Abstraction","locale":"en-US","native":"English (US)"},{"title":"Abstracción","locale":"es","native":"Español"},{"title":"Abstraction","locale":"fr","native":"Français"},{"title":"Abstraction (抽象化)","locale":"ja","native":"日本語"},{"title":"추상화","locale":"ko","native":"한국어"},{"title":"Abstração","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Абстракция","locale":"ru","native":"Русский"},{"title":"抽象化","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/glossary/abstraction","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/glossary/abstraction/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Glossary","title":"术语表"},{"uri":"/zh-CN/docs/Glossary/Abstraction","title":"抽象编程（Abstraction）"}],"pageTitle":"抽象编程（Abstraction） - 术语表 | MDN","noIndexing":false}}