{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"对页面预解析进行优化","mdn_url":"/zh-CN/docs/Glossary/speculative_parsing","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>在传统的浏览器中，HTML 解析器运行于主线程之中，并且在遇到 &lt;/script&gt; 标签后会被阻塞，直到脚本从网络中被获取和执行。Firefox 4 和后续的版本支持从主线程中分离的预解析技术。当脚本在获取和执行的过程中，预解析技术能提前解析 HTML 文档。在 Firefox 3.5 和 3.6 中，HTML 解析器能够在文档流中预先加载脚本、层叠样式表和图片。然而，在 Firefox 4 和后续的版本中 HTML 解析器也预先运行 HTML 树构建算法。这一举措的优点是当预解析成功后，就没有必要再重新解析已经扫描过并且成功下载的脚本，层叠样式表和图片；缺点就是当预解析失败之后，有很多工作需要去做。</p>\n<p>这篇文档旨在帮助你避免预解析失败和页面加载变慢。</p>"}},{"type":"prose","value":{"id":"使预加载成功","title":"使预加载成功","isH3":false,"content":"<p>让脚本、层叠样式表和图片预加载成功的规则只有一条：</p>\n<ul>\n  <li>如果你使用 <code>&lt;base&gt;</code> 元素重载页面的基 URI，将这个元素放置到文档的非脚本部分。不要通过 <code>document.write()</code> 或者 <code>document.createElement() 添加</code>.</li>\n</ul>"}},{"type":"prose","value":{"id":"避免树构建器的输出丢失","title":"避免树构建器的输出丢失","isH3":false,"content":"<p>当 document.write() 改变了文档树的状态时，树构建器的预构建过程会失败。例如，当所有被<code>document.write() 插入的内容被解析之后&lt;/script&gt;</code> 标签后的预处理状态不再持有。然而，只有不寻常地使用 <code>document.write()</code> 才会产生问题。这些事情需要避免：</p>\n<ul>\n  <li>不要写不对称的文档树。<code>&lt;script&gt;document.write(\"&lt;div&gt;\");&lt;/script&gt;</code> 很糟糕。<code>&lt;script&gt;document.write(\"&lt;div&gt;&lt;/div&gt;\");&lt;/script&gt;</code> 则是可行的。</li>\n  <li>不要写未完成的标识。 <code>&lt;script&gt;document.write(\"&lt;div&gt;&lt;/div\");&lt;/script&gt;</code> 很糟糕。</li>\n  <li>不要以回车结束内容。 <code>&lt;script&gt;document.write(\"Hello World!\\r\");&lt;/script&gt;</code> 很糟糕。​​​​​​​ <code>&lt;script&gt;document.write(\"Hello World!\\n\");&lt;/script&gt;</code> 则是可行的。</li>\n  <li>注意即使对称的标签也可能导致文档的不对称。比如：<code>head</code> 元素中的<code>&lt;script&gt;document.write(\"&lt;div&gt;&lt;/div&gt;\");&lt;/script&gt;</code> i 会被解析成 <code>&lt;script&gt;document.write(\"&lt;/head&gt;&lt;body&gt;&lt;div&gt;&lt;/div&gt;\");&lt;/script&gt;</code> 因次文档是不对称的。</li>\n  <li>不要仅格式化部分表格。 <code>&lt;table&gt;&lt;script&gt;document.write(\"&lt;tr&gt;&lt;td&gt;Hello World!&lt;/td&gt;&lt;/tr&gt;\");&lt;/script&gt;&lt;/table&gt;</code> 很糟糕。然而， <code>&lt;script&gt;document.write(\"&lt;table&gt;&lt;tr&gt;&lt;td&gt;Hello World!&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;\");&lt;/script&gt;</code> 则是可行的。</li>\n  <li>TODO: 在其它格式化元素中使用 document.write。</li>\n</ul>"}}],"toc":[{"text":"使预加载成功","id":"使预加载成功"},{"text":"避免树构建器的输出丢失","id":"避免树构建器的输出丢失"}],"summary":"在传统的浏览器中，HTML 解析器运行于主线程之中，并且在遇到 </script> 标签后会被阻塞，直到脚本从网络中被获取和执行。Firefox 4 和后续的版本支持从主线程中分离的预解析技术。当脚本在获取和执行的过程中，预解析技术能提前解析 HTML 文档。在 Firefox 3.5 和 3.6 中，HTML 解析器能够在文档流中预先加载脚本、层叠样式表和图片。然而，在 Firefox 4 和后续的版本中 HTML 解析器也预先运行 HTML 树构建算法。这一举措的优点是当预解析成功后，就没有必要再重新解析已经扫描过并且成功下载的脚本，层叠样式表和图片；缺点就是当预解析失败之后，有很多工作需要去做。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Speculative parsing","locale":"en-US","native":"English (US)"},{"title":"Optimizar sus páginas para análisis especulativo","locale":"es","native":"Español"},{"title":"Optimisation des pages pour l'analyse spéculative","locale":"fr","native":"Français"},{"title":"Speculative parsing (投機的解析)","locale":"ja","native":"日本語"},{"title":"Optimizing your pages for speculative parsing","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Оптимизация ваших страниц для рискованного парсинга","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/glossary/speculative_parsing","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/glossary/speculative_parsing/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Glossary","title":"术语表"},{"uri":"/zh-CN/docs/Glossary/speculative_parsing","title":"对页面预解析进行优化"}],"pageTitle":"对页面预解析进行优化 - 术语表 | MDN","noIndexing":false}}