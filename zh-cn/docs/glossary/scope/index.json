{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Scope（作用域）","mdn_url":"/zh-CN/docs/Glossary/Scope","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>作用域</strong>是当前的执行上下文，<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Value\">值 <small>(en-US)</small></a>和表达式在其中“可见”或可被访问。如果一个<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Variable\">变量 <small>(en-US)</small></a>或表达式不在当前的作用域中，那么它是不可用的。作用域也可以堆叠成层次结构，子作用域可以访问父作用域，反过来则不行。</p>\n<p>JavaScript 的作用域分以下三种：</p>\n<ul>\n  <li>全局作用局：脚本模式运行所有代码的默认作用域</li>\n  <li>模块作用域：模块模式中运行代码的作用域</li>\n  <li>函数作用域：由<a href=\"/zh-CN/docs/Glossary/Function\">函数</a>创建的作用域</li>\n</ul>\n<p>此外，用 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code></a> 或 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/const\"><code>const</code></a> 声明的变量属于额外的作用域：</p>\n<ul>\n  <li>块级作用域：用一对花括号（一个<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/block\">代码块</a>）创建出来的作用域</li>\n</ul>\n<p>由于<a href=\"/zh-CN/docs/Glossary/Function\">函数</a>会创建作用域，因而在函数中定义的变量无法从该函数外部访问，也无法从其他函数内部访问，例如，下面的代码是无效的：</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">exampleFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"declared inside function\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// x 只能在 exampleFunction 函数中使用</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inside function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 报错</span>\n</code></pre></div>\n<p>但是，下面的代码是有效的，因为变量在函数外被声明，为全局变量：</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"declared outside function\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">exampleFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">exampleFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inside function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Outside function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>块级作用域只对 <code>let</code> 和 <code>const</code> 声明有效，对 <code>var</code> 声明无效。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError: x is not defined</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"参见","title":"参见","isH3":false,"content":"<ul>\n  <li>见维基百科词条：<a href=\"https://zh.wikipedia.org/wiki/%E4%BD%9C%E7%94%A8%E5%9F%9F\" class=\"external\" rel=\" noopener\">作用域</a></li>\n</ul>"}}],"toc":[{"text":"参见","id":"参见"}],"summary":"作用域是当前的执行上下文，值 (en-US)和表达式在其中“可见”或可被访问。如果一个变量 (en-US)或表达式不在当前的作用域中，那么它是不可用的。作用域也可以堆叠成层次结构，子作用域可以访问父作用域，反过来则不行。","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Scope","locale":"en-US","native":"English (US)"},{"title":"Scope","locale":"es","native":"Español"},{"title":"Portée","locale":"fr","native":"Français"},{"title":"Scope (スコープ)","locale":"ja","native":"日本語"},{"title":"스코프","locale":"ko","native":"한국어"},{"title":"Escopo","locale":"pt-BR","native":"Português (do Brasil)"}],"source":{"folder":"zh-cn/glossary/scope","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/glossary/scope/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Glossary","title":"术语表"},{"uri":"/zh-CN/docs/Glossary/Scope","title":"Scope（作用域）"}],"pageTitle":"Scope（作用域） - 术语表 | MDN","noIndexing":false}}