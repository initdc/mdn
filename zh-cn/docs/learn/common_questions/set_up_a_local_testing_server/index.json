{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"如何设置一个本地测试服务器？","mdn_url":"/zh-CN/docs/Learn/Common_questions/set_up_a_local_testing_server","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>本文将会介绍如何在你的计算机上安装一个简单的本地测试服务器，以及它的基本用法。</p>\n<table class=\"learn-box standard-table\">\n  <tbody>\n    <tr>\n      <th scope=\"row\">前提：</th>\n      <td>你需要知道<a href=\"/zh-CN/docs/Learn/Common_questions/How_does_the_Internet_work\">互联网是怎么工作的</a>，以及<a href=\"/zh-CN/docs/Learn/Common_questions/What_is_a_web_server\">什么是网络服务器</a>。</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">目标：</th>\n      <td>你将学习如何配置本地测试服务器。</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"本地文件与远程文件","title":"本地文件与远程文件","isH3":false,"content":"<p>在大多数示例中，我们告诉你只需在浏览器中直接打开您的示例，有很多方法可以实现这一点，你可以通过双击 HTML 文件或将其拖拽到浏览器窗口中，或者在浏览器中选择 <code>文件 &gt; 打开...</code> 选择 HTML 文件等。</p>\n<p>如果你打开的是本地示例的话，你可以在地址栏看到这个地址是以 <code>file://</code> 开头的，接着本地硬盘上该示例文件的路径。相比之下，如果你查看的是我们在 GitHub 上托管的示例（或其他远程服务器上的示例），Web 地址会以 <code>http://</code> 或 <code>https://</code> 开头，说明该文件是通过 HTTP 传输的。</p>"}},{"type":"prose","value":{"id":"测试本地文件存在的问题","title":"测试本地文件存在的问题","isH3":false,"content":"<p>某些示例如果你将其作为本地文件打开的话，它将不会运行。这可能是由于各种原因，最有可能是：</p>\n<ul>\n  <li><strong>它们具有异步请求。</strong> 如果你只是从本地文件运行示例，一些浏览器（包括 Chrome）将不会运行异步请求（请参阅 <a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data\">从服务器获取数据</a>）。这是因为安全限制（更多关于 Web 安全的信息，请参阅 <a href=\"/zh-CN/docs/Learn/Server-side/First_steps/Website_security\">站点安全</a>）。</li>\n  <li><strong>它们具有服务端代码。</strong> 服务器端语言（如 PHP 或 Python）需要一个特殊的服务器来解释代码并提供结果。</li>\n</ul>"}},{"type":"prose","value":{"id":"运行一个简单的本地_http_服务器","title":"运行一个简单的本地 HTTP 服务器","isH3":false,"content":"<p>为了解决异步请求的问题，我们需要通过在本地 Web 服务器上运行这些示例来测试这些示例。为我们的目的，最简单的方法之一就是使用 Python 的<code>SimpleHTTPServer</code>模块。</p>\n<p>我们需要：</p>\n<ol>\n  <li>安装 Python。如果您正在使用 Linux 或 Mac OS X，则应该已经在您的系统上可用。如果您是 Windows 用户，则可以从 Python 主页获取安装程序，并按照说明进行安装：\n    <ul>\n      <li>转到<a href=\"https://www.python.org/\" class=\"external\" rel=\" noopener\">python.org</a></li>\n      <li>在“下载”部分下，单击 Python“3.xxx”的链接。</li>\n      <li>在页面的底部，选择<em>Windows x86 可执行文件安装程序</em>并下载它。</li>\n      <li>当它已经下载，运行它。</li>\n      <li>在第一个安装程序页面上，确保选中了“将 Python 3.xxx 添加到 PATH”复选框。</li>\n      <li>单击<em>安装</em>，然后在安装完成后单击<em>关闭</em>。</li>\n    </ul>\n  </li>\n  <li>打开你的命令提示符（Windows）/终端（OS X / Linux）。要检查 Python 是否安装，请输入以下命令：\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>python -V\n</code></pre></div>\n  </li>\n  <li>下面应该给出你安装的版本号，使用<code>cd</code>命令导航到您的示例所在的目录。\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token comment\"># 输入你想要进入的目录，举例</span>\n<span class=\"token builtin class-name\">cd</span> Desktop\n<span class=\"token comment\"># 用两个点来表示进入上一层级的目录</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>\n</code></pre></div>\n  </li>\n  <li>输入命令在该目录中启动服务器：\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>＃如果上面返回的 Python 版本是 <span class=\"token number\">3</span>.X\npython -m http.server\n＃如果上面返回的 Python 版本是 <span class=\"token number\">2</span>.X\npython -m SimpleHTTPServer\n</code></pre></div>\n  </li>\n  <li>默认情况下，这将在本地 Web 服务器上的端口 8000 上运行目录的内容。您可以通过转到<code>localhost:8000</code>Web 浏览器中的 URL 来访问此服务器。在这里你会看到列出的目录的内容 - 点击你想运行的 HTML 文件。</li>\n</ol>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 如果您已经在端口 8000 上运行了某些东西，则可以通过运行 server 命令，然后选择另一个端口号（例如<code>python -m http.server 7800</code> （Python 3.x）或<code>python -m SimpleHTTPServer 7800</code> （Python 2.x））来选择另一个端口。然后您可以访问您的内容<code>localhost:7800</code>。</p>\n</div>"}},{"type":"prose","value":{"id":"在本地运行服务器端语言","title":"在本地运行服务器端语言","isH3":false,"content":"<p>Python 的<code>SimpleHTTPServer</code>模块是有用的，但它不知道如何运行用 PHP 或 Python 等语言编写的代码。为了处理这个问题，你需要更多的东西 - 正是你需要的东西取决于你正在运行的服务器端语言。这里有几个例子：</p>\n<ul>\n  <li>要运行 Python 服务器端代码，您需要使用 Python 网络框架。您可以通过阅读<a href=\"/zh-CN/docs/Learn/Server-side/Django\">Django Web Framework（Python）</a>来了解如何使用 Django 框架。<a href=\"http://flask.pocoo.org/\" class=\"external\" rel=\" noopener\">Flask</a>也是一个不错的选择（稍微轻量一点）。要运行 Flask，你需要先<a href=\"/zh-CN/docs/Learn/Server-side/Django/development_environment#installing_python_3\">安装 Python / PIP</a>，然后使用<code>pip3 install flask</code> 来安装 Flask。此时，您应该能够运行 Python Flask 示例<code>python3 python-example.py</code>，然后在您的浏览器中打开 <code>localhost:5000</code> 查看。</li>\n  <li>要运行 Node.js（JavaScript）服务器端代码，您可以直接使用 Node 或选择构建于其上的框架。Express 是一个不错的选择 - 请参阅<a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs\">Express Web Framework（Node.js / JavaScript）</a>。</li>\n  <li>要运行 PHP 服务器端代码，您需要一个可以解释 PHP 的服务器设置。本地 PHP 测试的好选择是<a href=\"https://www.mamp.info/en/downloads/\" class=\"external\" rel=\" noopener\">MAMP</a>（Mac 和 Windows）， <a href=\"http://ampps.com/download\" class=\"external\" rel=\" noopener\">AMPPS</a>（Mac，Windows，Linux）和<a href=\"https://www.linux.com/learn/easy-lamp-server-installation\" class=\"external\" rel=\" noopener\">LAMP</a>（Linux，Apache，MySQL 和 PHP / Python / Perl）。这些是完整的包，创建本地设置，允许您运行 Apache 服务器，PHP 和 MySQL 数据库。</li>\n</ul>"}}],"toc":[{"text":"本地文件与远程文件","id":"本地文件与远程文件"},{"text":"测试本地文件存在的问题","id":"测试本地文件存在的问题"},{"text":"运行一个简单的本地 HTTP 服务器","id":"运行一个简单的本地_http_服务器"},{"text":"在本地运行服务器端语言","id":"在本地运行服务器端语言"}],"summary":"本文将会介绍如何在你的计算机上安装一个简单的本地测试服务器，以及它的基本用法。","popularity":0.0015,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"How do you set up a local testing server?","locale":"en-US","native":"English (US)"},{"title":"¿Cómo se configura un servidor de prueba local?","locale":"es","native":"Español"},{"title":"Comment configurer un serveur de test local ?","locale":"fr","native":"Français"},{"title":"ローカルにテスト用サーバーを用意するには？","locale":"ja","native":"日本語"},{"title":"로컬 테스트 서버 설치하기","locale":"ko","native":"한국어"},{"title":"Como configurar um servidor de testes local","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Как настроить локальный сервер для тестирования?","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/learn/common_questions/set_up_a_local_testing_server","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/learn/common_questions/set_up_a_local_testing_server/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Learn","title":"学习 Web 开发"},{"uri":"/zh-CN/docs/Learn/Common_questions","title":"常见问题"},{"uri":"/zh-CN/docs/Learn/Common_questions/set_up_a_local_testing_server","title":"如何设置一个本地测试服务器？"}],"pageTitle":"如何设置一个本地测试服务器？ - 学习 Web 开发 | MDN","noIndexing":false}}