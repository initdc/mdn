{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"如何构建表单小工具","mdn_url":"/zh-CN/docs/Learn/Forms/How_to_build_custom_form_controls","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"\"><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web\"><strong>新手请从这开始！</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Web 入门</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web\">Web 概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/Installing_basic_software\">安装基本软件</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/What_will_your_website_look_like\">您的网站会是什么样？</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/Dealing_with_files\">处理文件</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/HTML_basics\">HTML 基础</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/CSS_basics\">CSS 基础</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript 基础</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/Publishing_your_website\">发布您的网站</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/How_the_Web_works\">Web 如何运作</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/zh-CN/docs/Learn/HTML\"><strong>HTML — 构建 Web</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>HTML 介绍</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML\">HTML 概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Getting_started\">HTML 入门</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML\">脑袋里是什么？HTML 中的元数据</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/HTML_text_fundamentals\">HTML 文字基础</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Creating_hyperlinks\">建立超链接</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Advanced_text_formatting\">高级文字格式</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure\">文档与网站架构</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML\">HTML 除错</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Marking_up_a_letter\">作业：标记字母</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Structuring_a_page_of_content\">作业：构建出有内容的网页</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>多媒体与嵌入</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding\">多媒体与嵌入概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Images_in_HTML\">HTML 中的图片</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Video_and_audio_content\">视频和音频内容</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Other_embedding_technologies\">从对象到 iframe — 其他嵌入技术</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Adding_vector_graphics_to_the_Web\">为 Web 新增向量图</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images\">自适应图片</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Mozilla_splash_page\">作业：Mozilla 醒目页面</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>HTML 表格</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Tables\">HTML 表格概览</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Tables/Basics\">HTML 表格基础</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Tables/Advanced\">HTML 高级表格特性和可访问性</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Tables/Structuring_planet_data\">作业：构建行星数据</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/zh-CN/docs/Learn/CSS\"><strong>CSS — 设计 Web</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS 第一步</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/First_steps\">CSS第一步概览</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/First_steps/What_is_CSS\">什么是CSS</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/First_steps/Getting_started\">让我们开始CSS之旅</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/First_steps/How_CSS_is_structured\">如何让构建CSS</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/First_steps/How_CSS_works\">CSS如何运行</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/First_steps/Using_your_new_knowledge\">运用你的新知识</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS 构建基础</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks\">CSS构建基础概览</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">层叠与继承</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Selectors\">CSS选择器</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/The_box_model\">盒模型</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Backgrounds_and_borders\">背景与边框</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Handling_different_text_directions\">处理不同方向的文本</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Overflowing_content\">溢出的内容</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Values_and_units\">值与单位</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Sizing_items_in_CSS\">在CSS中调整大小</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Images_media_form_elements\">图像、媒体和表单元素</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Styling_tables\">样式化表格</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Debugging_CSS\">调试CSS</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Organizing\">组织你的CSS</a></li>\n      </ol></details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>样式化文字</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Styling_text\">样式化文字概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Styling_text/Fundamentals\">基础文字与字体样式化</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Styling_text/Styling_lists\">样式化列表</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Styling_text/Styling_links\">样式化链接</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Styling_text/Web_fonts\">Web 字体</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Styling_text/Typesetting_a_homepage\">作业：排版社区大学首页</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS 排版</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout\">CSS 排版概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Introduction\">Introduction to CSS layout</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Normal_Flow\">正常布局流</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Flexbox\">弹性区块</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Grids\">网格</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Floats\">浮动</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Positioning\">定位</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Multiple-column_Layout\">多列布局</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Responsive_Design\">响应式布局</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Media_queries\">媒体查询</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Legacy_Layout_Methods\">传统的布局方法</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Supporting_Older_Browsers\">支持旧的浏览器</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Fundamental_Layout_Comprehension\">基础布局练习</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/zh-CN/docs/Learn/JavaScript\"><strong>JavaScript — 用户端动态脚本</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>JavaScript 第一步</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps\">JavaScript 第一步概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript\">什么是 JavaScript？</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/A_first_splash\">初次接触 JavaScript</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/What_went_wrong\">出现了什么问题？JavaScript 疑难解答</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/Variables\">储存你所需的信息 — 变量</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/Math\">JavaScript 基础概念 — 数字与运算符</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/Strings\">处理文字 — JavaScript 中的字符串</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/Useful_string_methods\">有用的字符串方法</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/Arrays\">数组</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/Silly_story_generator\">作业：傻瓜故事产生器</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>JavaScript 基础要件</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks\">JavaScript 基础要件概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/conditionals\">在代码中决策 — 条件</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Looping_code\">代码循环</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Functions\">函数 - 可重复利用的代码块</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Build_your_own_function\">建立自己的函数</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Return_values\">函数回传值</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Events\">事件介绍</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Image_gallery\">作业：图库</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>JavaScript 对象介绍</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects\">JavaScript 对象概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/Basics\">对象基础概念</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/Object_prototypes\">对象原型</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/Object-oriented_programming\">Object-oriented programming concepts</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/Classes_in_JavaScript\">Classes in JavaScript</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/JSON\">使用 JSON 资料</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/Object_building_practice\">对象构建实践</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/Adding_bouncing_balls_features\">作业：为弹跳球展示新增功能</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>异步JavaScript</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous\">异步JavaScript概览</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Concepts\">通用异步编程概念</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Introducing\">异步JavaScript简介</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Timeouts_and_intervals\">合作异步JavaScript: 超时和间隔</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Promises\">Promises: 优雅的异步处理</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Async_await\">async和await:让异步编程更简单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Choosing_the_right_approach\">选择正确的方法</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>客户端网页 API</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs\">客户端网页 API</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Introduction\">网页 API 介绍</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents\">操纵文档</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data\">从服务器获取数据</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Third_party_APIs\">第三方 API</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Drawing_graphics\">画图</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Video_and_audio_APIs\">视频与音频 API</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Client-side_storage\">客户端存储</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/zh-CN/docs/Learn/Forms\"><strong>Web表单 — 与用户数据打交道</strong></a></li>\n  <li class=\"toggle\">\n    <details open=\"\">\n        <summary>Web表单核心</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Forms\">Web表单概览</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Your_first_form\">你的第一个表单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/How_to_structure_a_web_form\">如何构造Web表单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Basic_native_form_controls\">原生表单控件</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/HTML5_input_types\">HTML5的input类型</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Other_form_controls\">其它表单控件</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Styling_web_forms\">样式化Web表单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Advanced_form_styling\">高级表单样式</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/UI_pseudo-classes\">UI 伪类</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Form_validation\">客户端表单验证</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Sending_and_retrieving_form_data\">发送表单数据</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n        <summary>Web表单进阶</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/How_to_build_custom_form_controls\">如何构造自定义表单控件</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Sending_forms_through_JavaScript\">使用JavaScript发送表单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Property_compatibility_table_for_form_controls\">表单组件兼容性列表</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/zh-CN/docs/Learn/Accessibility\"><strong>可访问性 — 使每个人都能使用 Web</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>可访问性指南</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility\">可访问性概览</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility/What_is_accessibility\">什么是可访问性</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility/HTML\">HTML: 可访问性的好基础</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility/CSS_and_JavaScript\">CSS 和 JavaScript 可访问性最佳实践</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility/WAI-ARIA_basics\">WAI-ARIA 基础</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility/Multimedia\">可访问性多媒体</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility/Mobile\">移动端可访问性</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>可访问性测评</summary>\n        <ol>\n            <li><a href=\"/zh-CN/docs/Learn/Accessibility/Accessibility_troubleshooting\">作业：可访问性疑难解答</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing\"><strong>工具与测试</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>客户端web开发工具</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools\">客户端web开发工具索引</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Overview\">客户端工具概览</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Command_line\">命令行速成课</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Package_management\">包管理基础</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Introducing_complete_toolchain\">一个完整的工具链</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Deployment\">发布你的应用</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>客户端框架介绍</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Introduction\">客户端框架概览</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Main_features\">框架的主要特性</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>React</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started\">Getting started with React</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_todo_list_beginning\">Beginning our React todo list</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_components\">Componentizing our React app</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state\">React interactivity: Events and state</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_filtering_conditional_rendering\">React interactivity: Editing, filtering, conditional rendering</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_accessibility\">Accessibility in React</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_resources\">React resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Ember</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_getting_started\">Getting started with Ember</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_structure_componentization\">Ember app structure and componentization</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_interactivity_events_state\">Ember interactivity: Events, classes and state</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_conditional_footer\">Ember Interactivity: Footer functionality, conditional rendering</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_routing\">Routing in Ember</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_resources\">Ember resources and troubleshooting</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Vue</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_getting_started\">开始使用Vue</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_first_component\">创建第一个Vue组件</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_rendering_lists\">渲染一个Vue组件列表</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_methods_events_models\">添加一个新的TODO表单: Vue事件、方法、模型</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_styling\">用CSS样式化Vue组件</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_computed_properties\">Using Vue computed properties</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_conditional_rendering  \">Vue conditional rendering: editing existing todos</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_refs_focus_management\">Focus management with Vue refs</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_resources\">Vue resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Svelte</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_getting_started\">Getting started with Svelte</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_Todo_list_beginning\">Starting our Svelte Todo list app</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_variables_props\">Dynamic behavior in Svelte: working with variables and props</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_components\">Componentizing our Svelte app</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_reactivity_lifecycle_accessibility\">Advanced Svelte: Reactivity, lifecycle, accessibility</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_stores\">Working with Svelte stores</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_TypeScript  \">TypeScript support in Svelte</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_deployment_next\">Deployment and next steps</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Angular</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_getting_started\">Getting started with Angular</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_todo_list_beginning\">Beginning our Angular todo list app</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_styling\">Styling our Angular app</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_item_component\">Creating an item component</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_filtering\">Filtering our to-do items</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_building\">Building Angular applications and further resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Git 和 GitHub</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/GitHub\">Git和GitHub 概览</a></li>\n          <li><a href=\"https://guides.github.com/activities/hello-world/\">Hello World</a></li>\n          <li><a href=\"https://guides.github.com/introduction/git-handbook/\">Git Handbook</a></li>\n          <li><a href=\"https://guides.github.com/activities/forking/\">Forking Projects</a></li>\n          <li><a href=\"https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests\">About pull requests</a></li>\n          <li><a href=\"https://guides.github.com/features/issues/\">Mastering Issues</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>跨浏览器测试</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing\">跨浏览器测试概述</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Introduction\">跨浏览器测试介绍</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Testing_strategies\">执行测试策略</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/HTML_and_CSS\">处理常见的 HTML 与 CSS 问题</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/JavaScript\">处理常见的 JavaScript 问题</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Accessibility\">处理常见的可访问性问题</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Feature_detection\">建置功能侦测</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Automated_testing\">自动测试介绍</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Your_own_automation_environment\">设置您的自动测试环境</a></li>\n        </ol>\n    </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/zh-CN/docs/Learn/Server-side\"><strong>服务端网页编程</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>第一步</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/First_steps\">第一步概述</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/First_steps/Introduction\">服务端介绍</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/First_steps/Client-Server_overview\">用户端概述</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/First_steps/Web_frameworks\">服务端网络框架</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/First_steps/Website_security\">网站安全</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Django 网站框架 (Python)</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django\">Django 网站框架 (Python) 概述</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Introduction\">介绍</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/development_environment\">搭建开发环境</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Tutorial_local_library_website\">在线教学：本地图书馆网站</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/skeleton_website\">在线教学 2：建立网站框架</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Models\">在线教学 3：使用模型</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Admin_site\">在线教学 4：Django 管理网站</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Home_page\">在线教学 5：建立我们的首页</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Generic_views\">在线教学 6：通用列表与细节检查</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Sessions\">在线教学 7：会话框架</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Authentication\">在线教学 8：用户授权与许可</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Forms\">在线教学 9：搭配表单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Testing\">在线教学 10：测试 Django 的 Web 应用</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Deployment\">在线教学 11：部署 Django 至产品</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/web_application_security\">Web 应用安全性</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/django_assessment_blog\">作业：DIY 博客</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Express 网页框架 (node.js/JavaScript)</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs\">Express 网页框架 (Node.js/JavaScript) 概览</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Introduction\">Express/Node 介绍</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/development_environment\">架设 Node (Express) 开发环境</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website\">Express 教程： 本地图书馆网站</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">Express 教程 2： 新建网站骨架</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/mongoose\">Express 教程 3： 使用数据库 (Mongoose)</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/routes\">Express 教程 4： 路由和控制器</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express 教程 5： 呈现图书馆数据</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/forms\">Express 教程 6： 使用表单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/deployment\">Express 教程 7： 部署至生产环境</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"#\"><strong>更多资源</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>常见问题</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/HTML/Howto\">HTML 问题</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/CSS/Howto\">CSS 问题</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Howto\">JavaScript questions</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Common_questions#Web_mechanics\">Web 是如何运作的</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Common_questions#Tools_and_setup\">工具与安装</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Common_questions#Design_and_accessibility\">设计与可访问性</a></li>\n        </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal only-in-en-us\" href=\"/en-US/docs/Learn/Forms/Form_validation\" title=\"Currently only available in English (US)\"> 上一页  (en-US)</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Learn/Forms\"> Overview: Forms</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Learn/Forms/Sending_forms_through_JavaScript\"> 下一页  </a></li>\n</ul>\n<p>在许多情况下，<a href=\"/en-US/docs/Learn/Forms/Basic_native_form_controls\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">可用的 HTML 表单小组件 (en-US)</a><em>是不够的</em>。如果要在某些小部件（例如 <a href=\"/zh-CN/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a>元素）上执行<a href=\"/en-US/docs/Learn/Forms/Advanced_form_styling\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">高级样式 (en-US)</a>，或者如果要提供自定义表现，则别无选择，只能构建自己的小部件。</p>\n<p>在本文中，我们会看到如何构建这样的组件。为此，我们将使用这样一个例子：重建 <a href=\"/zh-CN/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a>元素。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 我们将专注于构建小部件，而不是怎样让代码更通用或可复用；那会涉及一些非基础的 JavaScript 代码和未知环境下的 DOM 操作，这超过了这篇文章的范围。</p>\n</div>"}},{"type":"prose","value":{"id":"设计，结构，和语义","title":"设计，结构，和语义","isH3":false,"content":"<p>在构建一个自定义控件之前，首先你要确切的知道你要什么。这将为您节省宝贵的时间。特别地，清楚地定义控件的所有状态非常重要。为了做到这一点，从状态和行为表现都众所周知的现有小控件开始是很好的选择，这样你可以轻松的尽量模仿这些控件。</p>\n<p>在我们的示例中，我们将重建 HTML&lt;select&gt;元素，这是我们希望实现的结果：</p>\n<p>\n  <img src=\"/files/4481/custom-select.png\" alt=\"The three states of a select box\" loading=\"lazy\">\n</p>\n<p>上面图片显示了我们控件的三个主要状态：正常状态（左）; 活动状态（中）和打开状态（右）。</p>\n<p>在行为方面，我们希望我们的控件像任何原生控件一样对鼠标和键盘都可用。让我们从定义控件如何到达每个状态开始：</p>\n<ul>\n  <li>以下情况控件将会呈现正常状态：\n    <ul>\n      <li>页面加载</li>\n      <li>控件处于活动状态，但用户点击控件以外的任何位置</li>\n      <li>控件是活动状态，但用户使用键盘将焦点移动到另一个小部件</li>\n    </ul>\n    <div class=\"notecard note\" id=\"sect2\">\n      <p><strong>备注：</strong> 在页面上移动焦点通常是通过按 Tab 键来完成的，但这并不是哪都通用的标准。例如，在 Safari 中页面上的链接间的循环切换默认下是通过使用<a href=\"http://www.456bereastreet.com/archive/200906/enabling_keyboard_navigation_in_mac_os_x_web_browsers/\" class=\"external\" rel=\" noopener\">组合键 Option + Tab</a>完成的。</p>\n    </div>\n  </li>\n  <li>以下情况控件将会呈现活动状态：\n    <ul>\n      <li>用户点击</li>\n      <li>用户按下 tab 让控件获得了焦点。</li>\n      <li>控件呈现打开状态然后用户点击控件。</li>\n    </ul>\n  </li>\n  <li>以下情况控件将会呈现打开状态：\n    <ul>\n      <li>控件在非打开状态时被用户点击。</li>\n    </ul>\n  </li>\n</ul>\n<p>我们知道如何改变状态后，定义如何改变小工具的值还很重要：</p>\n<ul>\n  <li>以下情况控件的值将会被改变：\n    <ul>\n      <li>控件在打开状态下用户点击一个选项</li>\n      <li>控件在活动状态下用户按下键盘上方向键或者下方向键</li>\n    </ul>\n  </li>\n</ul>\n<p>最后，让我们定义控件的选项将要怎么表现：</p>\n<ul>\n  <li>当控件在打开状态时，被选中的选项将被突出显示</li>\n  <li>当鼠标悬停在某个选项上时，该选项将被突出显示，并且之前突出显示的选项将返回正常的状态</li>\n</ul>\n<p>对于我们的例子的目的，我们将就此结束；但是，如果你是一个认真的读者，你会注意到我们省略了一些东西，例如，你认为用户在小部件处于打开状态时点击 tab 键会发生什么？答案是：什么也不会发生。好吧，似乎很明显这就是正确的行为，但事实是，因为在我们的规范中没有定义这种情况，我们很容易忽略这种行为。在团队环境中尤其是这样，因为设计小部件行为的人与实现的人通常是不同的。</p>\n<p>另外一个有趣的例子是：当小部件处于打开状态时，用户按下键盘上方向键和下方向键将会发生什么？这个问题有些棘手，如果你认为活动状态和打开状态是完全不同的，那么答案就是“什么都不会发生”，因为我们没有定义任何在打开状态下键盘的交互行为。从另一个方面看，如果你认为活动状态和打开状态是有重叠的部分，那么控件的值可能会改变，但是被选中的选项肯定不会相应的进行突出显示，同样是因为我们没有定义在控件打开状态下的任何键盘交互事件（我们仅仅定义了控件打开会发生什么，而没有定义在其打开后会发生什么）</p>\n<p>在我们的例子中，缺失的规范是显而易见的，所以我们将着手处理他们，但是对于一些没有人想到去定义正确行为的小部件而言，这的确是一个问题。所以在设计阶段花费时间是值得的，因为如果你定义的行为不够好，或者忘记定义了一个行为，那么在用户开始实际使用时，将会很难去重新定义它们。如果你在定义时有疑问，请征询他人的意见，如果你有预算，请不要犹豫的去进行<a href=\"https://en.wikipedia.org/wiki/Usability_testing\" class=\"external\" rel=\" noopener\">用户可行性测试</a>，这个过程被称为 UX design (User Experience <em>Design</em>用户体验设计）,如果你想要深入的学习相关的内容，请查阅下面这些有用资源：</p>\n<ul>\n  <li><a href=\"http://www.uxmatters.com/\" class=\"external\" rel=\" noopener\">UXMatters.com</a></li>\n  <li><a href=\"http://uxdesign.com/\" class=\"external\" rel=\" noopener\">UXDesign.com</a></li>\n  <li><a href=\"http://uxdesign.smashingmagazine.com/\" class=\"external\" rel=\" noopener\">The UX Design section of SmashingMagazine</a></li>\n</ul>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 另外，在绝大多数系统中，还有一种方法能够打开<a href=\"/zh-CN/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a>元素来观察其所有的选项（这和用鼠标点击<a href=\"/zh-CN/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a>元素是一样的）。通过 Windows 下的 Alt + 向下箭头实现，在我们的例子中没有实现---但是这样做会很方便，因为鼠标点击事件就是由该原理实现的。</p>\n</div>"}},{"type":"prose","value":{"id":"定义语义化的_html_结构","title":"定义语义化的 HTML 结构","isH3":true,"content":"<p>现在控件的基本功能已经决定了，可以开始构建自定义控件了。第一步是要确定 HTML 结构并给予一些基本的语义规则。第一步就是去确定它的 HTML 结构并给予一些基本的语义。重构<a href=\"/zh-CN/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a>元素需要怎么做如下：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token comment\">&lt;!-- 这是我们小部件的主要容器。\n     tabindex 属性是用来让用户聚焦在小部件上的。\n     稍后我们会发现最好通过 JavaScript 来设定它的值。--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>select<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">tabindex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token comment\">&lt;!-- 这个容器用来显示组件现在的值 --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Cherry<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token comment\">&lt;!-- 这个容器包含我们的组件的所有可用选项。\n       因为他是一个列表，用 ul 元素是有意义的。--&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>optList<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 每个选项只包含用来显示的值，\n         稍后我们会知道如何处理和表单一起发送的真实值 --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Cherry<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Lemon<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Banana<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Strawberry<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Apple<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>注意类名的使用：不管实际使用了哪种底层 HTML 元素，它们都标识每个相关的部分。这很重要，因为这样做能确保我们的 CSS 和 JavaScript 不会和 HTML 结构强绑定，这样我们就可以在不破坏使用小部件的代码的情况下进行实现更改。比如，如果你希望增加一个等价的<a href=\"/zh-CN/docs/Web/HTML/Element/optgroup\"><code>&lt;optgroup&gt;</code></a>元素。</p>"}},{"type":"prose","value":{"id":"使用_css_创建外观","title":"使用 CSS 创建外观","isH3":true,"content":"<p>现在我们有了控件结构，我们可以开始设计我们的控件了。构建自定义控件的重点是能够完全按照我们的期望设置它的样式。为了达到这个目的，我们将 CSS 部分的工作分为两部分：第一部分是让我们的控件表现得像一个<a href=\"/zh-CN/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a>元素所必需的的 CSS 规则，第二部分包含了让组件看起来像我们所希望那样的精妙样式。</p>\n<h4 id=\"所需的样式\">所需的样式</h4>\n<p>所需的样式是那些用以处理我们组件的三种状态的必须样式。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.select</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 这将为选项列表创建一个上下文定位 */</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* 这将使我们的组件成为文本流的一部分，同时又可以调整大小 */</span>\n  <span class=\"token property\">display</span> <span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>我们需要一个额外的类 <code>active</code> 来定义我们的组件处于其激活状态时的的界面外观。因为我们的组件是可以聚焦的，我们通过<a href=\"/zh-CN/docs/Web/CSS/:focus\"><code>:focus</code></a> 伪类重复自定义样式来确保它们表现得一样。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.select .active,\n.select:focus</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* 这里的 box-shadow 属性并非必须，但确保活动状态能看出来非常重要---我们\n 将其作为一个默认值，你可以随意地覆盖掉它。*/</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0 0 3px 1px #227755<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>现在，让我们处理选项列表：</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token comment\">/* 这里的 .select 选择器是一个糖衣语法，用来确保我们定义的类是\n   在我们的组件里的那个。 */</span>\n<span class=\"token selector\">.select .optList</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 这可以确保我们的选项列表将会显示在值的下面，并且会处在\n     HTML 流之外*/</span>\n  <span class=\"token property\">position</span> <span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span>      <span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span>     <span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>我们需要一个额外的类来处理选项列表隐藏时的情况。为了管理没有完全匹配的活动状态和打开状态之间的差异，这是有必要的。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.select .optList.hidden</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 这是一个以可访问形式隐藏列表的简单方法，\n     对无障碍我们将在最后进一步拓展 */</span>\n  <span class=\"token property\">max-height</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">visibility</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"美化\">美化</h4>\n<p>所以现在我们的基本功能已经就位，有趣的事情就可以开始了。下面是一个可行的简单的例子，和本文开头的截图是相对应的。不管怎样，你可以随意的体验一下看看能收获什么。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.select</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 出于无障碍方面的原因，所有尺寸都会由 em 值表示\n     (用来确保用户在文本模式下使用浏览器缩放时组件的可缩放性).\n     在大多数浏览器下的默认换算是 1em == 16px.\n     如果你对 em 和 px 的转换感到疑惑，请参考 http://riddle.pl/emcalc/ */</span>\n  <span class=\"token property\">font-size</span>   <span class=\"token punctuation\">:</span> 0.625em<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 这个（=10px）是以 em 方式表达的这个环境里的字体大小 */</span>\n  <span class=\"token property\">font-family</span> <span class=\"token punctuation\">:</span> Verdana<span class=\"token punctuation\">,</span> Arial<span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">-moz-box-sizing</span> <span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-sizing</span> <span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* 我们需要为将要添加的向下箭头准备一些额外的空间 */</span>\n  <span class=\"token property\">padding</span> <span class=\"token punctuation\">:</span> .1em 2.5em .2em .5em<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 1px 25px 2px 5px */</span>\n  <span class=\"token property\">width</span>   <span class=\"token punctuation\">:</span> 10em<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 100px */</span>\n\n  <span class=\"token property\">border</span>        <span class=\"token punctuation\">:</span> .2em solid #000<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 2px */</span>\n  <span class=\"token property\">border-radius</span> <span class=\"token punctuation\">:</span> .4em<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 4px */</span>\n  <span class=\"token property\">box-shadow</span>    <span class=\"token punctuation\">:</span> 0 .1em .2em <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>.45<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 0 1px 2px */</span>\n\n  <span class=\"token comment\">/* 第一段声明是为了不支持线性梯度填充的浏览器准备的。\n     第二段声明是因为基于 WebKit 的浏览器没有预先定义它。\n     如果你想为过时的浏览器提供支持，请参阅 http://www.colorzilla.com/gradient-editor/ */</span>\n  <span class=\"token property\">background</span> <span class=\"token punctuation\">:</span> #F0F0F0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">-webkit-linear-gradient</span><span class=\"token punctuation\">(</span>90deg<span class=\"token punctuation\">,</span> #E3E3E3<span class=\"token punctuation\">,</span> #fcfcfc 50%<span class=\"token punctuation\">,</span> #f0f0f0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">linear-gradient</span><span class=\"token punctuation\">(</span>0deg<span class=\"token punctuation\">,</span> #E3E3E3<span class=\"token punctuation\">,</span> #fcfcfc 50%<span class=\"token punctuation\">,</span> #f0f0f0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.select .value</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 因为值的宽度可能超过组件的宽度，我们需要确保他不会改变组件的宽度 */</span>\n  <span class=\"token property\">display</span>  <span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span>    <span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span> <span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">vertical-align</span><span class=\"token punctuation\">:</span> top<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* 如果内容溢出了，最好有一个恰当的缩写。*/</span>\n  <span class=\"token property\">white-space</span>  <span class=\"token punctuation\">:</span> nowrap<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-overflow</span><span class=\"token punctuation\">:</span> ellipsis<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>我们不需要一个额外的元素来设计向下的箭头，而使用<a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>:after</code></a> 伪类来替代。然而，这也可以通过使用一张加在<code>select</code> class 上的简单的背景图像来实现。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.select:after</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"▼\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 我们使用了 unicode 编码的字符 U+25BC; 参阅 http://www.utf8-chartable.de */</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">z-index</span> <span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 这对于防止箭头覆盖选项列表很重要 */</span>\n  <span class=\"token property\">top</span>     <span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">right</span>   <span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">-moz-box-sizing</span> <span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-sizing</span> <span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">height</span>  <span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span>   <span class=\"token punctuation\">:</span> 2em<span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 20px */</span>\n  <span class=\"token property\">padding-top</span> <span class=\"token punctuation\">:</span> .1em<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 1px */</span>\n\n  <span class=\"token property\">border-left</span>  <span class=\"token punctuation\">:</span> .2em solid #000<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 2px */</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 0 .1em .1em 0<span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 0 1px 1px 0 */</span>\n\n  <span class=\"token property\">background-color</span> <span class=\"token punctuation\">:</span> #000<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span> <span class=\"token punctuation\">:</span> #FFF<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span> <span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>接下来，让我们定义选项列表的样式。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.select .optList</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">z-index</span> <span class=\"token punctuation\">:</span> 2<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 我们明确的表示选项列表会始终与向下箭头重叠 */</span>\n\n  <span class=\"token comment\">/* 这会重置 ul 元素的默认样式 */</span>\n  <span class=\"token property\">list-style</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span> <span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">-moz-box-sizing</span> <span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-sizing</span> <span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* 这会确保即使数值比组件小，选项列表仍能变得跟组件自身一样大*/</span>\n  <span class=\"token property\">min-width</span> <span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* 万一列表太长了，它的内容会从垂直方向溢出 (会自动添加一个竖向滚动条)\n     但是水平方向不会 (因为我们没有设定宽度，列表会自适应宽度。如果不能的话，内容会被截断) */</span>\n  <span class=\"token property\">max-height</span><span class=\"token punctuation\">:</span> 10em<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 100px */</span>\n  <span class=\"token property\">overflow-y</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow-x</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> .2em solid #000<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 2px */</span>\n  <span class=\"token property\">border-top-width</span> <span class=\"token punctuation\">:</span> .1em<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 1px */</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 0 0 .4em .4em<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 0 0 4px 4px */</span>\n\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0 .2em .4em <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>.4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 0 2px 4px */</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #f0f0f0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>对于选项，我们需要添加一个 <code>highlight</code> 类以便能标明用户将要选择的值或者已经选择的值。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.select .option</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> .2em .3em<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 2px 3px */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.select .highlight</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #000<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #FFFFFF<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>这是三种状态的结果：</p>\n<table>\n  <thead>\n    <tr>\n      <th scope=\"col\" style=\"text-align: center\">基本状态</th>\n      <th scope=\"col\" style=\"text-align: center\">活动状态</th>\n      <th scope=\"col\" style=\"text-align: center\">打开状态</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><iframe class=\"sample-code-frame\" title=\"Basic state sample\" id=\"frame_basic_state\" width=\"120\" height=\"130\" src=\"https://yari-demos.prod.mdn.mozit.cloud/zh-CN/docs/Learn/Forms/How_to_build_custom_form_controls/Example_1/_sample_.basic_state.html\" loading=\"lazy\"></iframe></td>\n      <td><iframe class=\"sample-code-frame\" title=\"Active state sample\" id=\"frame_active_state\" width=\"120\" height=\"130\" src=\"https://yari-demos.prod.mdn.mozit.cloud/zh-CN/docs/Learn/Forms/How_to_build_custom_form_controls/Example_1/_sample_.active_state.html\" loading=\"lazy\"></iframe></td>\n      <td><iframe class=\"sample-code-frame\" title=\"Open state sample\" id=\"frame_open_state\" width=\"120\" height=\"130\" src=\"https://yari-demos.prod.mdn.mozit.cloud/zh-CN/docs/Learn/Forms/How_to_build_custom_form_controls/Example_1/_sample_.open_state.html\" loading=\"lazy\"></iframe></td>\n    </tr>\n    <tr>\n      <td colspan=\"3\" style=\"text-align: center\"><a href=\"/zh-CN/docs/Learn/Forms/How_to_build_custom_form_controls/Example_1\">Check out the source code</a></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"通过_javascript_让您的小部件动起来","title":"通过 JavaScript 让您的小部件动起来","isH3":false,"content":"<p>现在我们的设计和结构已经完成了。我们可以写些 JavaScript 代码来让这个部件真正生效。</p>\n<div class=\"notecard warning\" id=\"sect4\">\n  <p><strong>警告：</strong> 下面的代码仅仅是教学性质的，并且不应该照搬使用。在许多方面，正如我们所看到的，这种方案不具有前瞻性，而且可能在旧浏览器上会不工作。这里面还有冗余的部分，在生产环境下，代码需要优化。</p>\n</div>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>备注：</strong> 创建可复用的组件可能是一件需要些技巧的事情。<a href=\"https://dvcs.w3.org/hg/webcomponents/raw-file/tip/explainer/index.html\" class=\"external\" rel=\" noopener\">W3C 网络组件草案</a> 是对这类特定问题的答案之一。<a href=\"http://x-tags.org/\" class=\"external\" rel=\" noopener\">X-Tag 项目</a> 是对这一规格的实验性实现；我们建议你看看它。</p>\n</div>"}},{"type":"prose","value":{"id":"它为什么不生效？","title":"它为什么不生效？","isH3":true,"content":"<p>在我们开始之前，要记住一件和 JavaScript 有关的非常重要的事情：在浏览器中，**这是一种不可靠的技术。**当你构建一个自定义组件时，你会不得不得依赖于 JavaScript，因为这是将所有的东西联系在一起的线索。但是，很多情况下，JavaScript 不能在浏览器中运行。</p>\n<ul>\n  <li>用户关掉了 JavaScript: 这是最不常见的情形。现在只有很少的人会关掉 JavaScript。</li>\n  <li>脚本没有加载。这是最常见的情形，特别是在移动端上，在那些网络非常不可靠的地方。</li>\n  <li>脚本是有问题的。你应该总是考虑这种可能性。</li>\n  <li>脚本和第三方脚本冲突。这可能会由用户使用的跟踪脚本和一些书签工具引发。</li>\n  <li>脚本与一个浏览器的拓展冲突，或者受其影响。 (比如 Firefox 的 <a href=\"https://addons.mozilla.org/fr/firefox/addon/noscript/\" class=\"external\" rel=\" noopener\">NoScript</a> 拓展 或者 Chrome 的 <a href=\"https://chrome.google.com/webstore/detail/notscripts/odjhifogjcknibkahlpidmdajjpkkcfn\" class=\"external\" rel=\" noopener\">NotScripts</a> 拓展)。</li>\n  <li>用户在使用老旧的浏览器，而且你需要的一些功能没有被支持。当你使用一些最新的 API 时，这种情况会经常发生。</li>\n</ul>\n<p>因为这些风险，认真考虑 JavaScript 不生效时会发生什么是很重要的。处理这个问题的细节超出了这篇文章的范围，因为这与你有多么想使你的脚本具有通用性和可复用性更加相关，不过我们将在我们的例子中考虑与其相关的基本内容。</p>\n<p>在我们的例子中，如果 JavaScript 代码没有运行，我们会回退到显示一个标准的 <a href=\"/zh-CN/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> 元素。为了实现这一点，我们需要两样东西。</p>\n<p>首先，在每次使用我们的自定义部件前，我们需要添加一个标准的 <a href=\"/zh-CN/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> 元素。实际上，为了能将来自我们自定义的表单组件和以及其他部分的表单数据发送出去，这个元素也是需要的。我们随后会详细的解释这一点。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>no-widget<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myFruit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">&gt;</span></span>Cherry<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">&gt;</span></span>Lemon<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">&gt;</span></span>Banana<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">&gt;</span></span>Strawberry<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">&gt;</span></span>Apple<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>select<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Cherry<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>optList hidden<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Cherry<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Lemon<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Banana<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Strawberry<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Apple<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>第二，我们需要两个新的 classes 来隐藏不需要的元素 (即，当我们的脚本没有运行时的自定义组件，或是脚本正常运行时的\"真正的\" <a href=\"/zh-CN/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> 元素)。注意默认情况下，我们的 HTML 代码会隐藏我们的自定义组件。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.widget select,\n.no-widget .select</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 这个 CSS 选择器大体上说的是：\n     - 要么我们将 body 的 class 设置为\"widget\"，隐藏真实的&lt;select&gt;元素\n     - 或是我们没有改变 body 的 class，这样 body 的 class 还是\"no-widget\",\n       因此 class 为\"select\"的元素需要被隐藏 */</span>\n  <span class=\"token property\">position</span> <span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span>     <span class=\"token punctuation\">:</span> -5000em<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span>   <span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span> <span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>接下来我们需要一个 JavaScript 开关来决定脚本是否运行。这个开关非常简单：如果页面加载时，我们的脚本运行了，它将会移除 <code>no-widget</code> class，并添加 <code>widget</code> class，由此切换 <a href=\"/zh-CN/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> 元素和自定义组件的可视性。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no-widget\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"widget\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<table>\n  <thead>\n    <tr>\n      <th scope=\"col\" style=\"text-align: center\">无 JS</th>\n      <th scope=\"col\" style=\"text-align: center\">有 JS</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><iframe class=\"sample-code-frame\" title=\"No JS sample\" id=\"frame_no_js\" width=\"120\" height=\"130\" src=\"https://yari-demos.prod.mdn.mozit.cloud/zh-CN/docs/Learn/Forms/How_to_build_custom_form_controls/Example_2/_sample_.no_js.html\" loading=\"lazy\"></iframe></td>\n      <td><iframe class=\"sample-code-frame\" title=\"JS sample\" id=\"frame_js\" width=\"120\" height=\"130\" src=\"https://yari-demos.prod.mdn.mozit.cloud/zh-CN/docs/Learn/Forms/How_to_build_custom_form_controls/Example_2/_sample_.js.html\" loading=\"lazy\"></iframe></td>\n    </tr>\n    <tr>\n      <td colspan=\"2\" style=\"text-align: center\"><a href=\"/en-US/docs/Learn/Forms/How_to_build_custom_form_controls/Example_2\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Check out the source code (en-US)</a></td>\n    </tr>\n  </tbody>\n</table>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>备注：</strong> 如果你真的想让你的代码变得通用和可重用，最好不要做一个 class 选择器开关，而是通过添加一个组件 class 的方式来隐藏<a href=\"/zh-CN/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> 元素，并且动态地在每一个<a href=\"/zh-CN/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> 元素后面添加代表页面中自定义组件的 DOM 树。</p>\n</div>"}},{"type":"prose","value":{"id":"让工作变得更简单","title":"让工作变得更简单","isH3":true,"content":"<p>在我们将要构建的代码之中，我们将会使用标准的 DOM API 来完成我们所要做的所有工作。尽管 DOM API 在浏览器中得到了更好支持，但是在旧的浏览器上还是会出现问题。( 特别是非常老的 Internet Explorer）。</p>\n<p>如果你想要避免旧浏览器带来的麻烦，这儿有两种解决方案：使用专门的框架，比如 <a href=\"https://jquery.com/\" class=\"external\" rel=\" noopener\">jQuery</a>, <a href=\"https://github.com/julienw/dollardom\" class=\"external\" rel=\" noopener\">$dom</a>, <a href=\"http://prototypejs.org/\" class=\"external\" rel=\" noopener\">prototype</a>, <a href=\"http://dojotoolkit.org/\" class=\"external\" rel=\" noopener\">Dojo</a>, <a href=\"http://yuilibrary.com/\" class=\"external\" rel=\" noopener\">YUI</a>, 或者类似的框架，或者通过填充你想使用的缺失的特性（这可以通过条件加载轻松完成——例如使用 <a href=\"http://yepnopejs.com/\" class=\"external\" rel=\" noopener\">yepnope</a> 这样的库。</p>\n<p>我们打算使用的特性如下所示（按照风险程度从高到低排列）：</p>\n<ol>\n  <li><a href=\"/zh-CN/docs/Web/API/Element/classList\" title=\"classList\"><code>classList</code></a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/EventTarget/addEventListener\" title=\"addEventListener\"><code>addEventListener</code></a></li>\n  <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>forEach</code></a> (这不是 DOM 而是现代 JavaScript )</li>\n  <li><a href=\"/zh-CN/docs/Web/API/Element/querySelector\" title=\"querySelector\"><code>querySelector</code></a> 和 <a href=\"/zh-CN/docs/Web/API/Element/querySelectorAll\" title=\"querySelectorAll\"><code>querySelectorAll</code></a></li>\n</ol>\n<p>除了那些特定特性的的可用性以外，在开始之前，仍然存在一个问题。由函数<a href=\"/zh-CN/docs/Web/API/Element/querySelectorAll\" title=\"querySelectorAll()\"><code>querySelectorAll()</code></a> 返回的对象是一个<a href=\"/zh-CN/docs/Web/API/NodeList\"><code>NodeList</code></a> 而不是 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>。这一点非常重要，因为 <code>Array</code> 对象支持 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>forEach</code></a> 函数，但是 <a href=\"/zh-CN/docs/Web/API/NodeList\"><code>NodeList</code></a> 不支持。由于 <a href=\"/zh-CN/docs/Web/API/NodeList\"><code>NodeList</code></a> 看起来实在是像一个 <code>Array</code> 并且因为 <code>forEach</code> 是这样的便于使用。我们可以轻易地添加对 <a href=\"/zh-CN/docs/Web/API/NodeList\"><code>NodeList</code></a>的支持，使我们的生活更轻松一些，像这样：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token class-name\">NodeList</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">forEach</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>我们没有开玩笑，这真的很容易实现。</p>"}},{"type":"prose","value":{"id":"构造事件回调","title":"构造事件回调","isH3":true,"content":"<p>基础已经准备好了，我们现在可以开始定义用户每次同我们的组件交互时会用到的所有函数了。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 这个函数会用在每当我们想要停用一个自定义组件的时候</span>\n<span class=\"token comment\">// 它需要一个参数：</span>\n<span class=\"token comment\">// select :要停用的带有 'select' 类的节点</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">deactivateSelect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">select</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// 如果组件没有运行，不用进行任何操作</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>select<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 我们需要获取自定义组件的选项列表</span>\n  <span class=\"token keyword\">var</span> optList <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.optList'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 关闭选项列表</span>\n  optList<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hidden'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 然后停用组件本身</span>\n  select<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 每当用户想要激活（或停用）这个组件的时候，会调用这个函数</span>\n<span class=\"token comment\">// 它需要 2 个参数：</span>\n<span class=\"token comment\">// select : 要激活的带有'select'类的 DOM 节点</span>\n<span class=\"token comment\">// selectList : 包含所有带'select'类的 DOM 节点的列表</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">activeSelect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">select<span class=\"token punctuation\">,</span> selectList</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// 如果组件已经激活了，不进行任何操作</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 我们需要关闭所有自定义组件的活动状态</span>\n  <span class=\"token comment\">// 因为 deactiveselect 函数满足 forEach 回调函数的所有请求，</span>\n  <span class=\"token comment\">// 我们直接使用它，不使用中间匿名函数</span>\n  selectList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>deactivateSelect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 然后我们激活特定的组件</span>\n  select<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 每当用户想要打开/关闭选项列表的时候，会调用这个函数</span>\n<span class=\"token comment\">// 它需要一个参数：</span>\n<span class=\"token comment\">// select : 要触发的列表的 DOM 节点</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">toggleOptList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">select</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// 该列表不包含在组件中</span>\n  <span class=\"token keyword\">var</span> optList <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.optList'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 我们改变列表的class去显示/隐藏它</span>\n  optList<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hidden'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 每当我们要高亮一个选项的时候，会调用该函数</span>\n<span class=\"token comment\">// 它需要两个参数：</span>\n<span class=\"token comment\">// select : 带有'select'类的 DOM 节点，包含了需要高亮强调的选项</span>\n<span class=\"token comment\">// option : 需要高亮强调的带有'option'类的 DOM 节点</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">highlightOption</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">select<span class=\"token punctuation\">,</span> option</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// 为我们的自定义 select 元素获取所有有效选项的列表</span>\n  <span class=\"token keyword\">var</span> optionList <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.option'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 我们移除所有选项的高亮强调</span>\n  optionList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">other</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    other<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'highlight'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 我们高亮强调正确的选项</span>\n  option<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'highlight'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这是你需要用来处理组件不同状态的所有代码。</p>\n<p>接下来，我们将这些函数绑定到合适的事件上：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 我们处理文档加载时的事件绑定。</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'load'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> selectList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.select'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 每个自定义组件都需要初始化</span>\n  selectList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">select</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 它的'option'元素也需要</span>\n    <span class=\"token keyword\">var</span> optionList <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.option'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 每当用户的鼠标悬停在一个选项上时，我们高亮这个指定的选项</span>\n    optionList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">option</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      option<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mouseover'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 注意:'select'和'option'变量是我们函数调用范围内有效的闭包。</span>\n        <span class=\"token function\">highlightOption</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">,</span> option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 每当用户点击一个自定义的 select 元素时</span>\n    select<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 注意:'select'变量是我们函数调用范围内有效的闭包。</span>\n\n      <span class=\"token comment\">// 我们改变选项列表的可见性</span>\n      <span class=\"token function\">toggleOptList</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 如果组件获得了焦点</span>\n    <span class=\"token comment\">// 每当用户点击它或是用 tab 键访问这个组件时，组件获得焦点</span>\n    select<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'focus'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 注意:'select'和'selectlist'变量是我们函数调用范围内有效的闭包。</span>\n\n      <span class=\"token comment\">// 我们激活这个组件</span>\n      <span class=\"token function\">activeSelect</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">,</span> selectList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 如果组件失去焦点</span>\n    select<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'blur'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 注意:'select'变量是我们函数调用范围内有效的闭包。</span>\n\n      <span class=\"token comment\">// 我们关闭这个组件</span>\n      <span class=\"token function\">deactivateSelect</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>此时，我们的组件会根据我们的设计改变状态，但是它的值仍然没有更新。我们接下来会处理这件事。</p>\n<table>\n  <thead>\n    <tr>\n      <th scope=\"col\" style=\"text-align: center\">Live example</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><iframe class=\"sample-code-frame\" title=\"Change states sample\" id=\"frame_change_states\" width=\"120\" height=\"130\" src=\"https://yari-demos.prod.mdn.mozit.cloud/zh-CN/docs/Learn/Forms/How_to_build_custom_form_controls/Example_3/_sample_.change_states.html\" loading=\"lazy\"></iframe></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><a href=\"/en-US/docs/Learn/Forms/How_to_build_custom_form_controls/Example_3\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Check out the source code (en-US)</a></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"处理组件的值","title":"处理组件的值","isH3":true,"content":"<p>既然我们的组件已经开始工作了，我们必须添加代码，使其能够根据用户的输入更新取值，并且能将取值随表单数据一同发送。</p>\n<p>实现这一点最简单的方法是使用后台原生组件。这样的一个组件会使用浏览器提供的所有内置控件跟踪值，并且在表单提交时，取值也会像往常一样发送。当有现成的功能时，我们再做重复工作就毫无意义了。</p>\n<p>像前面所看到的那样，出于无障碍的原因，我们已经使用了一个原生的选择组件作为后备显示内容；我们可轻松的将它的值与我们的自定义组件之间的值同步。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 这个函数更新显示的值并将其通过原生组件同步</span>\n<span class=\"token comment\">// 它需要 2 个参数：</span>\n<span class=\"token comment\">// select : 含有要更新的值的'select'类的 DOM 节点</span>\n<span class=\"token comment\">// index  : 要被选择的值的索引</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">select<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 我们需要为了给定的自定义组件获取原生组件</span>\n  <span class=\"token comment\">// 在我们的例子中，原生组件是自定义组件的‘同胞’</span>\n  <span class=\"token keyword\">var</span> nativeWidget <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span>previousElementSibling<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 我们也需要得到自定义组件的值占位符，</span>\n  <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 还有整个选项列表。</span>\n  <span class=\"token keyword\">var</span> optionList <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.option'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 我们将被选择的索引设定为我们的选择的索引</span>\n  nativeWidget<span class=\"token punctuation\">.</span>selectedIndex <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 更新相应的值占位符</span>\n  value<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> optionList<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 然后高亮我们自定义组件里对应的选项</span>\n  <span class=\"token function\">highlightOption</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">,</span> optionList<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 这个函数返回原生组件里当前选定的索引</span>\n<span class=\"token comment\">// 它需要 1 个参数：</span>\n<span class=\"token comment\">// select : 跟原生组件有关的'select'类 DOM 节点</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">select</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 我们需要为了给定的自定义组件访问原生组件</span>\n  <span class=\"token comment\">// 在我们的例子中，原生组件是自定义组件的一个“同胞”</span>\n  <span class=\"token keyword\">var</span> nativeWidget <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span>previousElementSibling<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> nativeWidget<span class=\"token punctuation\">.</span>selectedIndex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>通过这两个函数，我们可以将原生组件绑定到自定义的组件上。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 我们在文档加载时处理事件的绑定。</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'load'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> selectList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.select'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 每个自定义组件都需要初始化</span>\n  selectList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">select</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> optionList <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.option'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        selectedIndex <span class=\"token operator\">=</span> <span class=\"token function\">getIndex</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 使我们的自定义组件可以获得焦点</span>\n    select<span class=\"token punctuation\">.</span>tabIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 我们让原生组件无法获得焦点</span>\n    select<span class=\"token punctuation\">.</span>previousElementSibling<span class=\"token punctuation\">.</span>tabIndex <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 确保默认选中的值正确显示</span>\n    <span class=\"token function\">updateValue</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">,</span> selectedIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 每当用户点击一个选项的时候，更新相应的值</span>\n    optionList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">option<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      option<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">updateValue</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 每当用户在获得焦点的组件上用键盘操作时，更新相应的值</span>\n    select<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keyup'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> length <span class=\"token operator\">=</span> optionList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n          index  <span class=\"token operator\">=</span> <span class=\"token function\">getIndex</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 当用户点击向下箭头时，跳转到下一个选项</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>keyCode <span class=\"token operator\">===</span> <span class=\"token number\">40</span> <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// 当用户点击向上箭头时，跳转到上一个选项</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>keyCode <span class=\"token operator\">===</span> <span class=\"token number\">38</span> <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> index<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">updateValue</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在上面的代码里，值得注意的是 <a href=\"/en-US/docs/Web/API/HTMLElement/tabIndex\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">tabIndex (en-US)</a> 属性的使用。使用这个属性是很有必要的，这可以确保原生组件将永远不会获得焦点，而且还可以确保当用户用户使用键盘和鼠标时，我们的自定义组件能够获得焦点。</p>\n<p>做完上面这些后，我们就完成了！下面是结果：</p>\n<table>\n  <thead>\n    <tr>\n      <th scope=\"col\" style=\"text-align: center\">Live example</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><iframe class=\"sample-code-frame\" title=\"Change states sample\" id=\"frame_change_states\" width=\"120\" height=\"130\" src=\"https://yari-demos.prod.mdn.mozit.cloud/zh-CN/docs/Learn/Forms/How_to_build_custom_form_controls/Example_4/_sample_.change_states.html\" loading=\"lazy\"></iframe></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><a href=\"/en-US/docs/Learn/Forms/How_to_build_custom_form_controls/Example_4\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Check out the source code (en-US)</a></td>\n    </tr>\n  </tbody>\n</table>\n<p>但是等等，我们真的做完了嘛？</p>"}},{"type":"prose","value":{"id":"使其具有无障碍","title":"使其具有无障碍","isH3":false,"content":"<p>我们构建了一个能够生效的东西，尽管这离一个特性齐全的选择框还差得远，但是它效果不错。但是我们已经完成的事情只不过是摆弄 DOM。这个组件并没有真正的语义，即使它看起来像一个选择框，但是从浏览器的角度来看并不是，所以辅助技术并不能明白这是一个选择框。简单来说，这个全新的选择框并不具备无障碍！</p>\n<p>幸运的是，有一种解决方案叫做 <a href=\"/en-US/docs/Web/Accessibility/ARIA\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">ARIA (en-US)</a>。ARIA 代表\"无障碍富互联网应用\"。这是一个专为我们现在做的事情设计的 <a href=\"https://www.w3.org/TR/wai-aria/\" class=\"external\" rel=\" noopener\">W3C 规范</a>：使网络应用和自定义组件易于访问，它本质上是一组用来拓展 HTML 的属性集，以便我们能够更好的描述角色，状态和属性，就像我们刚才设计的元素是是它试图传递的原生元素一样。使用这些属性非常简单，所以让我们来试试看。</p>"}},{"type":"prose","value":{"id":"role_属性","title":"<code>role</code> 属性","isH3":true,"content":"<p><a href=\"/en-US/docs/Web/Accessibility/ARIA\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">ARIA (en-US)</a> 使用的关键属性是 <a href=\"/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">role (en-US)</a> 属性。<a href=\"/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">role (en-US)</a> 属性接受一个值，该值定义了一个元素的用途。每一个 role 定义了它自己的需求和行为。在我们的例子中，我们会使用 <a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/listbox_role\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">listbox (en-US)</a> 这一 role。这是一个 \"合成角色\"，表示具有该 role 的元素应该有子元素，每个子元素都有特定的角色。（在这个案例中，至少有一个具有<code>option</code> 角色的子元素）。</p>\n<p>同样值得注意的是，ARIA 定义了默认应用于标准 HTML 标记的角色。例如，<a href=\"/zh-CN/docs/Web/HTML/Element/table\"><code>&lt;table&gt;</code></a> 元素与角色 <code>grid</code> 相匹配，而 <a href=\"/zh-CN/docs/Web/HTML/Element/ul\"><code>&lt;ul&gt;</code></a> 元素与角色 <code>list</code> 相匹配。由于我们使用了一个 <a href=\"/zh-CN/docs/Web/HTML/Element/ul\"><code>&lt;ul&gt;</code></a> 元素，我们想要确保我们组件的 <code>listbox</code> 角色能替代 <a href=\"/zh-CN/docs/Web/HTML/Element/ul\"><code>&lt;ul&gt;</code></a> 元素的<code>list</code> 角色。为此，我们会使用角色 <code>presentation</code>。这个角色被设计成让我们来表示一个元素没有特殊的含义，并且仅仅用于提供信息。我们会将其应用到<a href=\"/zh-CN/docs/Web/HTML/Element/ul\"><code>&lt;ul&gt;</code></a> 元素上。</p>\n<p>为了支持 <a href=\"/en-US/docs/Web/Accessibility/ARIA/Roles/listbox_role\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">listbox (en-US)</a> 角色，我们只需要将我们 HTML 改成这样：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token comment\">&lt;!-- 我们把 role=\"listbox\" 属性添加到我们的顶部元素 --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>select<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>listbox<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Cherry<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token comment\">&lt;!-- 我们也把 role=\"presentation\" 添加到 ul 元素中 --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>optList<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>presentation<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 然后把 role=\"option\" 属性添加到所有 li 元素里 --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Cherry<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Lemon<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Banana<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Strawberry<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>option<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Apple<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect7\">\n  <p><strong>备注：</strong> 只有当你想要为不支持 <a href=\"/zh-CN/docs/Web/CSS/Attribute_selectors\">CSS 属性选择器的</a>旧浏览器提供支持时，才有必要同时包含 <code>role</code> 属性和一个<code>class</code> 属性。</p>\n</div>","titleAsText":"role 属性"}},{"type":"prose","value":{"id":"aria-selected_属性","title":"<code>aria-selected</code> 属性","isH3":true,"content":"<p>仅仅使用 <a href=\"/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">role (en-US)</a> 属性是不够的。 <a href=\"/en-US/docs/Web/Accessibility/ARIA\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">ARIA (en-US)</a> 还提供了许多状态和属性的内部特征。你能更好更充分的利用它们，你的组件就会能够被辅助技术更好的理解。在我们的例子中，我们会把使用限制在一个属性上：<code>aria-selected</code>。</p>\n<p><code>aria-selected</code> 属性被用来标记当前被选中的选项；这可以让辅助技术告知用户当前的选项是什么。我们会通过 JavaScript 动态地使用该属性，每当用户选择一个选项时标记选中的选项。为了达到这一目的，我们需要修正我们的 <code>updateValue()</code> 函数：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">updateValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">select<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> nativeWidget <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span>previousElementSibling<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> optionList <span class=\"token operator\">=</span> select<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.option'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 我们确保所有的选项都没有被选中</span>\n  optionList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">other</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    other<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aria-selected'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'false'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 我们确保选定的选项被选中了</span>\n  optionList<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aria-selected'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'true'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  nativeWidget<span class=\"token punctuation\">.</span>selectedIndex <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>\n  value<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> optionList<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">highlightOption</span><span class=\"token punctuation\">(</span>select<span class=\"token punctuation\">,</span> optionList<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这是经过所有的改变之后的最终结果。 ( 藉由 <a href=\"http://www.nvda-project.org/\" class=\"external\" rel=\" noopener\">NVDA</a> or <a href=\"https://www.apple.com/accessibility/voiceover/\" class=\"external\" rel=\" noopener\">VoiceOver</a> 这样的辅助技术尝试它，你会对此有更好的体会)：</p>\n<table>\n  <thead>\n    <tr>\n      <th scope=\"col\" style=\"text-align: center\">在线示例</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><iframe class=\"sample-code-frame\" title=\"Change states sample\" id=\"frame_change_states\" width=\"120\" height=\"130\" src=\"https://yari-demos.prod.mdn.mozit.cloud/en-US/docs/Learn/Forms/How_to_build_custom_form_controls/Example_5/_sample_.change_states.html\" loading=\"lazy\"></iframe></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><a href=\"/en-US/docs/Learn/Forms/How_to_build_custom_form_controls/Example_5\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Check out the final source code (en-US)</a></td>\n    </tr>\n  </tbody>\n</table>","titleAsText":"aria-selected 属性"}},{"type":"prose","value":{"id":"总结","title":"总结","isH3":false,"content":"<p>我们已经了解了所有和构建一个自定义表单组件相关的基础知识，但是如你所见做这件事非常繁琐，并且通常情况下依赖第三方库，而不是自己从头写起会更容易，也更好 (当然，除非你的目的就是构建一个这样的库）。</p>\n<p>这儿有一些库，在你编写自己的之前应该了解一下：</p>\n<ul>\n  <li><a href=\"http://jqueryui.com/\" class=\"external\" rel=\" noopener\">jQuery UI</a></li>\n  <li><a href=\"https://github.com/marghoobsuleman/ms-Dropdown\" class=\"external\" rel=\" noopener\">msDropDown</a></li>\n  <li><a href=\"http://www.emblematiq.com/lab/niceforms/\" class=\"external\" rel=\" noopener\">Nice Forms</a></li>\n  <li><a href=\"https://www.google.fr/search?q=HTML+custom+form+controls&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:fr:official&amp;client=firefox-a\" class=\"external\" rel=\" noopener\">And many more…</a></li>\n</ul>\n<p>如果你想更进一步，本例中的代码需要一些改进，才能变得更加通用和可重用。这是一个你可以尝试去做的练习。这里有两个提示可以帮到你：我们所有函数的第一个参数是相同的，这意味着这些函数需要相同的上下文。构建一个对象来共享那些上下文是更聪明的做法。还有，你需要让它的特性适用性更好；也就是说，它要能在一系列对 Web 标准的兼容性不同的浏览器上工作良好。祝愉快！</p><ul class=\"prev-next\">\n    <li><a class=\"button minimal only-in-en-us\" href=\"/en-US/docs/Learn/Forms/Form_validation\" title=\"Currently only available in English (US)\"> 上一页  (en-US)</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Learn/Forms\"> Overview: Forms</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Learn/Forms/Sending_forms_through_JavaScript\"> 下一页  </a></li>\n</ul>"}},{"type":"prose","value":{"id":"在本单元中","title":"在本单元中","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Learn/Forms/Your_first_form\">Your first HTML form</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Forms/How_to_structure_a_web_form\">How to structure an HTML form</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Forms/Basic_native_form_controls\">The native form widgets</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Forms/Sending_and_retrieving_form_data\">Sending form data</a></li>\n  <li><a href=\"/en-US/docs/Learn/Forms/Form_validation\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Form data validation (en-US)</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Forms/How_to_build_custom_form_controls\">How to build custom form widgets</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Forms/Sending_forms_through_JavaScript\">Sending forms through JavaScript</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Forms/HTML_forms_in_legacy_browsers\">HTML forms in legacy browsers</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Forms/Styling_web_forms\">Styling HTML forms</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Forms/Advanced_form_styling\">Advanced styling for HTML forms</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Forms/Property_compatibility_table_for_form_controls\">Property compatibility table for form widgets</a></li>\n</ul>"}}],"toc":[{"text":"设计，结构，和语义","id":"设计，结构，和语义"},{"text":"通过 JavaScript 让您的小部件动起来","id":"通过_javascript_让您的小部件动起来"},{"text":"使其具有无障碍","id":"使其具有无障碍"},{"text":"总结","id":"总结"},{"text":"在本单元中","id":"在本单元中"}],"summary":"在许多情况下，可用的 HTML 表单小组件 (en-US)是不够的。如果要在某些小部件（例如 <select>元素）上执行高级样式 (en-US)，或者如果要提供自定义表现，则别无选择，只能构建自己的小部件。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"How to build custom form controls","locale":"en-US","native":"English (US)"},{"title":"Cómo crear widgets de formularios personalizados","locale":"es","native":"Español"},{"title":"Comment construire des widgets de formulaires personnalisés","locale":"fr","native":"Français"},{"title":"カスタムフォームコントロールの作成方法","locale":"ja","native":"日本語"},{"title":"How to build custom form widgets","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Как создавать пользовательские виджеты форм","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/learn/forms/how_to_build_custom_form_controls","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/learn/forms/how_to_build_custom_form_controls/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Learn","title":"学习 Web 开发"},{"uri":"/zh-CN/docs/Learn/Forms","title":"Web 表单指南"},{"uri":"/zh-CN/docs/Learn/Forms/How_to_build_custom_form_controls","title":"如何构建表单小工具"}],"pageTitle":"如何构建表单小工具 - 学习 Web 开发 | MDN","noIndexing":false}}