{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"创建种类表单","mdn_url":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/forms/Create_genre_form","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>本章节演示如何定义我们的页面，创建<code>Genre</code> 物件（这是一个很好的起点，因为类型只有一个字段，它的名称<code>name</code>，没有依赖项）。像任何其他页面一样，我们需要设置路由，控制器和视图。</p>"}},{"type":"prose","value":{"id":"引入验证与无害化方法","title":"引入验证与无害化方法","isH3":false,"content":"<p>在我们的控制器中使用 <em>express-validator</em> 验证器，我們必須导入我们想要从 <strong>'express-validator/check</strong>' 和 <strong>'express-validator/filter</strong>' 模块中使用的函数。</p>\n<p>打开**/controllers/genreController.js**，并在文件顶部添加以下行：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> body<span class=\"token punctuation\">,</span>validationResult <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express-validator/check'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> sanitizeBody <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express-validator/filter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"控制器—get_路由","title":"控制器—get 路由","isH3":false,"content":"<p>找到导出的<code>genre_create_get()</code> 控制器方法，并将其替换为以下代码。这只是渲染<strong>genre_form.pug</strong>视图，传递一个 title 变量。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Display Genre create form on GET.</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">genre_create_get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'genre_form'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Create Genre'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"控制器—post_路由","title":"控制器—post 路由","isH3":false,"content":"<p>找到导出的<code>genre_create_post()</code>控制器方法，并将其替换为以下代码。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Handle Genre create on POST.</span>\nexports<span class=\"token punctuation\">.</span>genre_create_post <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span>\n\n    <span class=\"token comment\">// Validate that the name field is not empty.</span>\n    <span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Genre name required'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// Sanitize (trim and escape) the name field.</span>\n    <span class=\"token function\">sanitizeBody</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">escape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// Process request after validation and sanitization.</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// Extract the validation errors from a request.</span>\n        <span class=\"token keyword\">const</span> errors <span class=\"token operator\">=</span> <span class=\"token function\">validationResult</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Create a genre object with escaped and trimmed data.</span>\n        <span class=\"token keyword\">var</span> genre <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Genre</span><span class=\"token punctuation\">(</span>\n          <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>errors<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// There are errors. Render the form again with sanitized values/error messages.</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'genre_form'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Create Genre'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">genre</span><span class=\"token operator\">:</span> genre<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">errors</span><span class=\"token operator\">:</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Data from form is valid.</span>\n            <span class=\"token comment\">// Check if Genre with same name already exists.</span>\n            Genre<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'name'</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> found_genre</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n                     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>found_genre<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                         <span class=\"token comment\">// Genre exists, redirect to its detail page.</span>\n                         res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span>found_genre<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token punctuation\">}</span>\n                     <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\n                         genre<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n                           <span class=\"token comment\">// Genre saved. Redirect to genre detail page.</span>\n                           res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span>genre<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                     <span class=\"token punctuation\">}</span>\n\n                 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>首先要注意的是，控制器不是单个中间件函数（带参数（<code>req, res, next</code>）），而是指定一组中间件函数。数组传递给路由器函数，并按顺序调用每个方法。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 这种方法是必需的，因为消毒/验证器是中间件功能。</p>\n</div>\n<p>数组中的第一个方法定义了一个验证器（<code>body</code>），来检查 name 字段是否为空（在执行验证之前调用<code>trim()</code>，以删除任何尾随/前导空格）。</p>\n<p>数组中的第二个方法（<code>sanitizeBody()</code>），创建一个清理程序来调用<code>trim()</code>修剪名称字段和调用<code>escape()</code>转义任何危险的 HTML 字符。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Validate that the name field is not empty.</span>\n<span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Genre name required'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">// Sanitize (trim and escape) the name field.</span>\n<span class=\"token function\">sanitizeBody</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">escape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 验证期间运行的清洁器不会修改请求。这就是为什么我们必须在上面的两个步骤中调用<code>trim()</code>！</p>\n</div>\n<p>在指定验证器和清理器之后，我们创建了一个中间件函数，来提取任何验证错误。我们使用<code>isEmpty()</code> 来检查验证结果中，是否有任何错误。如果有，那么我们再次渲染表单，传入我们的已清理种类对象和错误消息的数组（<code>errors.array()</code>）。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Process request after validation and sanitization.</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// Extract the validation errors from a request.</span>\n    <span class=\"token keyword\">const</span> errors <span class=\"token operator\">=</span> <span class=\"token function\">validationResult</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Create a genre object with escaped and trimmed data.</span>\n    <span class=\"token keyword\">var</span> genre <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Genre</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>errors<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// There are errors. Render the form again with sanitized values/error messages.</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'genre_form'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Create Genre'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">genre</span><span class=\"token operator\">:</span> genre<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">errors</span><span class=\"token operator\">:</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Data from form is valid.</span>\n        <span class=\"token operator\">...</span> <span class=\"token operator\">&lt;</span>save the result<span class=\"token operator\">&gt;</span> <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>如果种类名称数据有效，那么我们检查，是否已存在具有相同名称的种类<code>Genre</code>（因为我们不想创建重复项）。</p>\n<p>如果是，我们会重定向到现有种类的详细信息页面。如果没有，我们保存新种类，并重定向到其详细信息页面。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Check if Genre with same name already exists.</span>\nGenre<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'name'</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> found_genre</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>found_genre<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Genre exists, redirect to its detail page.</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span>found_genre<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            genre<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n                    <span class=\"token comment\">// Genre saved. Redirect to genre detail page.</span>\n                    res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span>genre<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在我们所有的 <code>POST</code>控制器中，都使用了相同的模式：我们运行验证器，然后运行消毒器，然后检查错误，并使用错误信息重新呈现表单，或保存数据。</p>"}},{"type":"prose","value":{"id":"视图","title":"视图","isH3":false,"content":"<p>当我们创建一个新的种类<code>Genre</code>时，在<code>GET</code>和<code>POST</code>控制器/路由中，都会呈现相同的视图（稍后在我们更新种类<code>Genre</code>时也会使用它）。</p>\n<p>在<code>GET</code>情况下，表单为空，我们只传递一个 title 变量。在<code>POST</code>情况下，用户先前输入了无效数据 - 在种类变量<code>genre</code>中，我们传回了输入数据的已清理版本，并且在<code>errors</code>变量中，我们传回了一组错误消息。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'genre_form'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Create Genre'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'genre_form'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Create Genre'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">genre</span><span class=\"token operator\">:</span> genre<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">errors</span><span class=\"token operator\">:</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>创建 <strong>/views/genre_form.pug</strong>，并复制下面的文本。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">extends layout\n\nblock content\n  h1 #{title}\n\n  form(method='POST' action='')\n    div.form-group\n      label(for='name') Genre:\n      input#name.form-control(type='text', placeholder='Fantasy, Poetry etc.' name='name' value=(undefined===genre ? '' : genre.name))\n    button.btn.btn-primary(type='submit') Submit\n\n  if errors\n    ul\n      for error in errors\n        li!= error.msg\n</pre></div>\n<p>从我们之前的教程中，可以很好地理解这个模板的大部分内容。首先，我们扩展 <strong>layout.pug</strong>基本模板，并覆盖名为“<strong>content</strong>”的块<code>block</code>。然后我们有一个标题，我们从控制器传入的标题<code>title</code>（通过<code>render()</code> 方法）。</p>\n<p>接下来，我们有 HTML 表单的 Pug 代码，它使用<code>POST</code>方法将数据发送到服务器，并且因为操作<code>action</code>是空字符串，所以将数据发送到与页面相同的 URL。</p>\n<p>表单定义了一个名为“name”的“text”类型的必填字段。字段的默认值，取决于是否定义了种类变量<code>genre</code>。如果从<code>GET</code>路由调用，它将为空，因为这是一个新表单。如果从<code>POST</code>路由调用，它将包含用户最初输入的（无效）值。</p>\n<p>页面的最后一部分是错误代码。如果已定义错误变量，则只会打印错误列表（换句话说，当模板在<code>GET</code>路由上呈现时，此部分不会出现）。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 这只是呈现错误的一种方法。您还可以从错误变量中，获取受影响字段的名称，并使用这些，来控制错误消息的呈现位置，以及是否应用自定义 CSS 等。</p>\n</div>"}},{"type":"prose","value":{"id":"它看起來像是？","title":"它看起來像是？","isH3":false,"content":"<p>运行应用程序，打开浏览器到<a href=\"http://localhost:3000/\" class=\"external\" rel=\" noopener\">http://localhost:3000/</a>，然后选择 Create new genre 链接。如果一切设置正确，您的网站应该类似于以下屏幕截图。输入值后，应保存该值，您将进入种类详细信息页面。</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Express_Nodejs/forms/Create_genre_form/locallibary_express_genre_create_empty.png\" alt=\"Genre Create Page - Express Local Library site\" width=\"1079\" height=\"406\" loading=\"lazy\">\n</p>\n<p>我们针对服务器端，验证的唯一错误是种类字段不能为空。下面的屏幕截图，显示了如果您没有提供种类（以红色突出显示），错误列表会是什么样子。</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Express_Nodejs/forms/Create_genre_form/locallibary_express_genre_create_error.png\" alt=\"\" width=\"543\" height=\"338\" loading=\"lazy\">\n</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>备注：</strong> 我们的验证使用<code>trim()</code>，来确保不接受空格作为种类名称。我们还可以在表单中 ​​ 的字段定义中，添加值<code>required='true'</code>，来验证客户端字段不为空：</p>\n  <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>input#name<span class=\"token punctuation\">.</span>form<span class=\"token operator\">-</span><span class=\"token function\">control</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">=</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">'Fantasy, Poetry etc.'</span> name<span class=\"token operator\">=</span><span class=\"token string\">'name'</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token operator\">===</span>genre <span class=\"token operator\">?</span> <span class=\"token string\">''</span> <span class=\"token operator\">:</span> genre<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> required<span class=\"token operator\">=</span><span class=\"token string\">'true'</span> <span class=\"token punctuation\">)</span>\n</code></pre></div>\n</div>"}},{"type":"prose","value":{"id":"下一步","title":"下一步","isH3":false,"content":"<ul>\n  <li>回到 <a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/forms\">Express 教程 6: 使用表单</a></li>\n  <li>继续教程 6 下一个部分：<a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/forms/Create_author_form\">创建作者表单</a></li>\n</ul>"}}],"toc":[{"text":"引入验证与无害化方法","id":"引入验证与无害化方法"},{"text":"控制器—get 路由","id":"控制器—get_路由"},{"text":"控制器—post 路由","id":"控制器—post_路由"},{"text":"视图","id":"视图"},{"text":"它看起來像是？","id":"它看起來像是？"},{"text":"下一步","id":"下一步"}],"summary":"本章节演示如何定义我们的页面，创建Genre 物件（这是一个很好的起点，因为类型只有一个字段，它的名称name，没有依赖项）。像任何其他页面一样，我们需要设置路由，控制器和视图。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Create genre form","locale":"en-US","native":"English (US)"},{"title":"Create genre form","locale":"ru","native":"Русский"},{"title":"創建種類表單","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/learn/server-side/express_nodejs/forms/create_genre_form","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/learn/server-side/express_nodejs/forms/create_genre_form/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Learn","title":"学习 Web 开发"},{"uri":"/zh-CN/docs/Learn/Server-side","title":"服务器端网页编程"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs","title":"Express Web Framework (Node.js/JavaScript)"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/forms","title":"Express 教程 6: 使用表单"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/forms/Create_genre_form","title":"创建种类表单"}],"pageTitle":"创建种类表单 - 学习 Web 开发 | MDN","noIndexing":false}}