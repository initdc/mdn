{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"创建作者表单","mdn_url":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/forms/Create_author_form","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>本章节演示，如何为创建作者对象<code>Author</code>定义一个页面。</p>"}},{"type":"prose","value":{"id":"导入验证和清理方法","title":"导入验证和清理方法","isH3":false,"content":"<p>为了在种类表单使用 express 验证器，我们必须用 require 导入我们想用的函式。</p>\n<p>打开 <strong>/controllers/authorController.js</strong>，并在档案最上方加入底下几行：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> body<span class=\"token punctuation\">,</span>validationResult <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express-validator/check'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> sanitizeBody <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express-validator/filter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"控制器—get_路由","title":"控制器—get 路由","isH3":false,"content":"<p>找到导出的 <code>author_create_get()</code>控制器方法，并替换为底下代码。这里单纯呈现 <strong>author_form.pug</strong> 视图，传送 <code>title</code> 变数。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Display Author create form on GET.</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">author_create_get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'author_form'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Create Author'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"控制器—post_路由","title":"控制器—post 路由","isH3":false,"content":"<p>找到导出的 <code>author_create_post()</code> 控制器方法，并替换为底下代码。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Handle Author create on POST.</span>\nexports<span class=\"token punctuation\">.</span>author_create_post <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\n    <span class=\"token comment\">// Validate fields.</span>\n    <span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">'first_name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'First name must be specified.'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">isAlphanumeric</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'First name has non-alphanumeric characters.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">'family_name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Family name must be specified.'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">isAlphanumeric</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Family name has non-alphanumeric characters.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">'date_of_birth'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Invalid date of birth'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">optional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">checkFalsy</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isISO8601</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">'date_of_death'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Invalid date of death'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">optional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">checkFalsy</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isISO8601</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// Sanitize fields.</span>\n    <span class=\"token function\">sanitizeBody</span><span class=\"token punctuation\">(</span><span class=\"token string\">'first_name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">escape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">sanitizeBody</span><span class=\"token punctuation\">(</span><span class=\"token string\">'family_name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">escape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">sanitizeBody</span><span class=\"token punctuation\">(</span><span class=\"token string\">'date_of_birth'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">sanitizeBody</span><span class=\"token punctuation\">(</span><span class=\"token string\">'date_of_death'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// Process request after validation and sanitization.</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// Extract the validation errors from a request.</span>\n        <span class=\"token keyword\">const</span> errors <span class=\"token operator\">=</span> <span class=\"token function\">validationResult</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>errors<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// There are errors. Render form again with sanitized values/errors messages.</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'author_form'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Create Author'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">errors</span><span class=\"token operator\">:</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Data from form is valid.</span>\n\n            <span class=\"token comment\">// Create an Author object with escaped and trimmed data.</span>\n            <span class=\"token keyword\">var</span> author <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Author</span><span class=\"token punctuation\">(</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token literal-property property\">first_name</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>first_name<span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">family_name</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>family_name<span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">date_of_birth</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>date_of_birth<span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">date_of_death</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>date_of_death\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            author<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">// Successful - redirect to new author record.</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span>author<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>此代码的结构和行为，几乎与创建<code>Genre</code>对象完全相同。首先，我们验证并清理数据。如果数据无效，那么我们将重新显示表单，以及用户最初输入的数据，和错误消息列表。如果数据有效，那么我们保存新的作者记录，并将用户重定向到作者详细信息页面。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 与<code>Genre</code> post 处理程序不同，我们不会在保存之前，检查<code>Author</code>对象是否已存在。可以说，我们应该这样做，尽管现在我们可以有多个具有相同名称的作者。</p>\n</div>\n<p>验证代码演示了几个新功能：</p>\n<ul>\n  <li>我们可以用菊花链式连接验证器，使用<code>withMessage()</code>指定在前一个验证方法失败时，显示的错误消息。这使得在没有大量代码重复的情况下，提供特定的错误消息变得非常容易。\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Validate fields.</span>\n<span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">'first_name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'First name must be specified.'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">isAlphanumeric</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'First name has non-alphanumeric characters.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n  </li>\n  <li>我们可以使用<code>optional()</code>函数，仅在输入字段时运行后续验证（这允许我们验证可选字段）。例如，下面我们检查可选的出生日期是否符合 ISO8601 标准（<code>checkFalsy</code> 旗标，表示我们接受空字符串或<code>null</code>作为空值）。\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token string\">'date_of_birth'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Invalid date of birth'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">optional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">checkFalsy</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isISO8601</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n  </li>\n  <li>参数从请求中作为字符串接收。我们可以使用<code>toDate()</code>（或<code>toBoolean()</code>等）将这些转换为正确的 JavaScript 类型。\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">sanitizeBody</span><span class=\"token punctuation\">(</span><span class=\"token string\">'date_of_birth'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"视图","title":"视图","isH3":false,"content":"<p>创建 <strong>/views/author_form.pug</strong> 并复制贴上以下文字。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">extends layout\n\nblock content\n  h1=title\n\n  form(method='POST' action='')\n    div.form-group\n      label(for='first_name') First Name:\n      input#first_name.form-control(type='text' placeholder='First name (Christian) last' name='first_name' required='true' value=(undefined===author ? '' : author.first_name) )\n      label(for='family_name') Family Name:\n      input#family_name.form-control(type='text' placeholder='Family name (surname)' name='family_name' required='true' value=(undefined===author ? '' : author.family_name))\n    div.form-group\n      label(for='date_of_birth') Date of birth:\n      input#date_of_birth.form-control(type='date' name='date_of_birth' value=(undefined===author ? '' : author.date_of_birth) )\n    button.btn.btn-primary(type='submit') Submit\n  if errors\n    ul\n      for error in errors\n        li!= error.msg\n</pre></div>\n<p>此视图的结构和行为与<strong>genre_form.pug</strong>模板完全相同，因此我们不再对其进行描述。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 某些浏览器不支持 input <code>type=“date”</code>，因此您不会获得日期选取部件或默认的*<code>dd/mm/yyyy</code>*占位符，而是获取一个空的纯文本字段。一种解决方法，是明确添加属性<code>placeholder='dd/mm/yyyy'</code>，以便在功能较少的浏览器上，仍然可以获得有关所需文本格式的信息。</p>\n</div>"}},{"type":"prose","value":{"id":"自我挑战：加入死亡日期","title":"自我挑战：加入死亡日期","isH3":true,"content":"<p>上面的模板少了一个输入字段 <code>date_of_death</code> 。依照跟生日表单同样的模式，创建此字段！</p>"}},{"type":"prose","value":{"id":"它看起來像是？","title":"它看起來像是？","isH3":false,"content":"<p>运行本应用，打开浏览器访问网址<a href=\"http://localhost:3000/\" class=\"external\" rel=\" noopener\">http://localhost:3000/</a>，然后点击创建新作者 Create new author 连结。如果每个东西都设定正确了，你的网站看起应该像底下的截图。在你输入一个值之后，它应该会被储存，并且你将被带到作者详细信息页面。</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Express_Nodejs/forms/Create_author_form/locallibary_express_author_create_empty.png\" alt=\"Author Create Page - Express Local Library site\" width=\"1001\" height=\"551\" loading=\"lazy\">\n</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 如果您尝试使用日期的各种输入格式，您可能会发现格式<code>yyyy-mm-dd</code>行为不正常。这是因为 JavaScript 将日期字符串，视为包含 0 小时的时间，但另外将该格式的日期字符串（ISO 8601 标准）视为包括 0 小时 UTC 时间，而不是本地时间。如果您的时区在 UTC 以西，则日期显示（即本地）将在您输入的日期之前一天。这是我们在这里没有解决的几个复杂问题之一（例如多字姓和有多个作者的书本）。</p>\n</div>"}},{"type":"prose","value":{"id":"下一步","title":"下一步","isH3":false,"content":"<ul>\n  <li>回到 <a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/forms\">Express 教程 6: 使用表单</a></li>\n  <li>继续教程 6 的下一个部分：<a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/forms/Create_book_form\">创建书本表单</a></li>\n</ul>"}}],"toc":[{"text":"导入验证和清理方法","id":"导入验证和清理方法"},{"text":"控制器—get 路由","id":"控制器—get_路由"},{"text":"控制器—post 路由","id":"控制器—post_路由"},{"text":"视图","id":"视图"},{"text":"它看起來像是？","id":"它看起來像是？"},{"text":"下一步","id":"下一步"}],"summary":"本章节演示，如何为创建作者对象Author定义一个页面。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Create Author form","locale":"en-US","native":"English (US)"},{"title":"Create Author form","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/learn/server-side/express_nodejs/forms/create_author_form","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/learn/server-side/express_nodejs/forms/create_author_form/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Learn","title":"学习 Web 开发"},{"uri":"/zh-CN/docs/Learn/Server-side","title":"服务器端网页编程"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs","title":"Express Web Framework (Node.js/JavaScript)"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/forms","title":"Express 教程 6: 使用表单"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/forms/Create_author_form","title":"创建作者表单"}],"pageTitle":"创建作者表单 - 学习 Web 开发 | MDN","noIndexing":false}}