{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"删除作者表单","mdn_url":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/forms/Delete_author_form","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>此子文档显示，如何定义页面以删除<code>Author</code>对象。</p>\n<p>正如<a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/forms#form_design\">表单设计</a>部分所讨论的那样，我们的策略是，只允许删除“未被其他对象引用”的对象（在这种情况下，这意味着如果作者<code>Author</code>被一本书<code>Book</code>引用，我们将不允许删除作者）。在实现方面，这意味着，表单需要在删除作者之前，先确认没有关联的书籍。如果存在关联的书籍，则应显示它们，并说明在删除<code>Author</code>对象之前，必须删除它们。</p>"}},{"type":"prose","value":{"id":"控制器—get_路由","title":"控制器—get 路由","isH3":false,"content":"<p>打开 <strong>/controllers/authorController.js</strong>。找到导出的<code>author_delete_get()</code> 控制器方法，并将其替换为以下代码。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Display Author delete form on GET.</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">author_delete_get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    async<span class=\"token punctuation\">.</span><span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">author</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Author<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">authors_books</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          Book<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'author'</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>author<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// No results.</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/catalog/authors'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// Successful, so render.</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'author_delete'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Delete Author'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> results<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">author_books</span><span class=\"token operator\">:</span> results<span class=\"token punctuation\">.</span>authors_books <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>控制器从 URL 参数（<code>req.params.id</code>）中，获取要删除的<code>Author</code>实例的 id。它使用<code>async.parallel()</code> 方法，并行获取作者记录和所有相关书本。当两个操作都完成后，它将呈现 <strong>author_delete.pug</strong> 视图，为 <code>title</code>、<code>author</code> 和 <code>author_books</code> 传递变量。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 如果<code>findById()</code>返回“没有结果”，则作者不在数据库中。在这种情况下，没有什么可以删除，所以我们立即呈现所有作者的列表。</p>\n  <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>author<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// No results.</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/catalog/authors'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n</div>"}},{"type":"prose","value":{"id":"控制器—post_路由","title":"控制器—post 路由","isH3":false,"content":"<p>找到导出的 <code>author_delete_post()</code> 控制器方法，并将其替换为以下代码。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Handle Author delete on POST.</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">author_delete_post</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    async<span class=\"token punctuation\">.</span><span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">author</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          Author<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>authorid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">authors_books</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          Book<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'author'</span><span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>authorid <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// Success</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>authors_books<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Author has books. Render in same way as for GET route.</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'author_delete'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Delete Author'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> results<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">author_books</span><span class=\"token operator\">:</span> results<span class=\"token punctuation\">.</span>authors_books <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Author has no books. Delete object and redirect to the list of authors.</span>\n            Author<span class=\"token punctuation\">.</span><span class=\"token function\">findByIdAndRemove</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>authorid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">deleteAuthor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">// Success - go to author list</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/catalog/authors'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>首先，我们验证是否已提供 id（这是通过表单主体参数发送的，而不是使用 URL 中的版本）。然后我们以与<code>GET</code>路由相同的方式，获得作者及其相关书本。如果没有书本，那么我们删除作者对象，并重定向到所有作者的列表。如果还有书本，那么我们只需重新呈现表格，传递作者和要删除的书本列表。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 我们可以检查对 <code>findById()</code> 的调用，是否返回任何结果，如果没有，则立即呈现所有作者的列表。为简洁起见，我们将代码保留在上面（如果找不到 id，它仍会返回作者列表，但这将在<code>findByIdAndRemove()</code>之后发生）。</p>\n</div>"}},{"type":"prose","value":{"id":"视图","title":"视图","isH3":false,"content":"<p>创建 <strong>/views/author_delete.pug</strong> 并复制贴上底下文字。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">extends layout\n\nblock content\n  h1 #{title}: #{author.name}\n  p= author.lifespan\n\n  if author_books.length\n\n    p #[strong Delete the following books before attempting to delete this author.]\n\n    div(style='margin-left:20px;margin-top:20px')\n\n      h4 Books\n\n      dl\n      each book in author_books\n        dt\n          a(href=book.url) #{book.title}\n        dd #{book.summary}\n\n  else\n    p Do you really want to delete this Author?\n\n    form(method='POST' action='')\n      div.form-group\n        input#authorid.form-control(type='hidden',name='authorid', required='true', value=author._id )\n\n      button.btn.btn-primary(type='submit') Delete\n</pre></div>\n<p>视图扩展了布局模板，覆盖了名为 <code>content</code> 的区块。在顶部显示作者详细信息。然后它包含一个，基于**<code>author_books</code>**（<code>if</code>和<code>else</code>子句）数量的条件语句。</p>\n<ul>\n  <li>如果存在与作者相关联的书本，则该页面列出书本，并说明在删除该作者 <code>Author</code> 之前，必须删除这些书籍。</li>\n  <li>如果没有书本，则页面会显示确认提示。如果单击“删除”<strong>Delete</strong>按钮，则会在<code>POST</code>请求中，将作者 ID 发送到服务器，并且将删除该作者的记录。</li>\n</ul>"}},{"type":"prose","value":{"id":"加入一个删除控制器","title":"加入一个删除控制器","isH3":false,"content":"<p>接下来，我们将向 Author 详细视图添加 <strong>Delete</strong> 控件（详细信息页面是删除记录的好地方）。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 在完整实现中，控件将仅对授权用户可见。但是在这个时间点上，我们还没有一个授权系统！</p>\n</div>\n<p>打开 <strong>author_detail.pug</strong> 视图，并在底部添加以下行。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>hr\np\n  a(href=author.url+'/delete') Delete author\n</code></pre></div>\n<p>控件现在应显示为链接，如下面的作者详细信息页面所示。</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Express_Nodejs/forms/Delete_author_form/locallibary_express_author_detail_delete.png\" alt=\"\" width=\"694\" height=\"351\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"它看起來像是？","title":"它看起來像是？","isH3":false,"content":"<p>运行应用程序，并将浏览器打开，到<a href=\"http://localhost:3000/\" class=\"external\" rel=\" noopener\">http://localhost:3000/</a>。然后选择所有作者链接 <em>All authors</em>，然后选择一个特定作者。最后选择删除作者链接 <em>Delete</em> author。</p>\n<p>如果作者没有书本，您将看到这样的页面。按删除后，服务器将删除作者并重定向到作者列表。</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Express_Nodejs/forms/Delete_author_form/locallibary_express_author_delete_nobooks.png\" alt=\"\" width=\"813\" height=\"397\" loading=\"lazy\">\n</p>\n<p>如果作者确实有书本，那么您将看到如下视图。然后，您可以从其详细信息页面中，删除这些书本（一旦该代码被实现！）。</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Express_Nodejs/forms/Delete_author_form/locallibary_express_author_delete_withbooks.png\" alt=\"\" width=\"619\" height=\"337\" loading=\"lazy\">\n</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>备注：</strong> 其他删除对象的页面，可以用相同的方式实现。我们把它留下，作为挑战。</p>\n</div>"}},{"type":"prose","value":{"id":"下一步","title":"下一步","isH3":false,"content":"<ul>\n  <li>回到 <a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/forms\">Express 教程 6: 使用表单</a></li>\n  <li>继续教程 6 子文档的下一步：<a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/forms/Update_Book_form\">更新书本表单</a></li>\n</ul>"}}],"toc":[{"text":"控制器—get 路由","id":"控制器—get_路由"},{"text":"控制器—post 路由","id":"控制器—post_路由"},{"text":"视图","id":"视图"},{"text":"加入一个删除控制器","id":"加入一个删除控制器"},{"text":"它看起來像是？","id":"它看起來像是？"},{"text":"下一步","id":"下一步"}],"summary":"此子文档显示，如何定义页面以删除Author对象。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Delete Author form","locale":"en-US","native":"English (US)"},{"title":"Delete Author form","locale":"ru","native":"Русский"},{"title":"Delete Author form","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/learn/server-side/express_nodejs/forms/delete_author_form","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/learn/server-side/express_nodejs/forms/delete_author_form/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Learn","title":"学习 Web 开发"},{"uri":"/zh-CN/docs/Learn/Server-side","title":"服务器端网页编程"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs","title":"Express Web Framework (Node.js/JavaScript)"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/forms","title":"Express 教程 6: 使用表单"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/forms/Delete_author_form","title":"删除作者表单"}],"pageTitle":"删除作者表单 - 学习 Web 开发 | MDN","noIndexing":false}}