{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Express 教程 3：使用数据库  (Mongoose)","mdn_url":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/mongoose","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"\"><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web\"><strong>新手请从这开始！</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Web 入门</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web\">Web 概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/Installing_basic_software\">安装基本软件</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/What_will_your_website_look_like\">您的网站会是什么样？</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/Dealing_with_files\">处理文件</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/HTML_basics\">HTML 基础</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/CSS_basics\">CSS 基础</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript 基础</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/Publishing_your_website\">发布您的网站</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/How_the_Web_works\">Web 如何运作</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/zh-CN/docs/Learn/HTML\"><strong>HTML — 构建 Web</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>HTML 介绍</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML\">HTML 概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Getting_started\">HTML 入门</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML\">脑袋里是什么？HTML 中的元数据</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/HTML_text_fundamentals\">HTML 文字基础</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Creating_hyperlinks\">建立超链接</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Advanced_text_formatting\">高级文字格式</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure\">文档与网站架构</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML\">HTML 除错</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Marking_up_a_letter\">作业：标记字母</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Structuring_a_page_of_content\">作业：构建出有内容的网页</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>多媒体与嵌入</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding\">多媒体与嵌入概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Images_in_HTML\">HTML 中的图片</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Video_and_audio_content\">视频和音频内容</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Other_embedding_technologies\">从对象到 iframe — 其他嵌入技术</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Adding_vector_graphics_to_the_Web\">为 Web 新增向量图</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images\">自适应图片</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Mozilla_splash_page\">作业：Mozilla 醒目页面</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>HTML 表格</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Tables\">HTML 表格概览</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Tables/Basics\">HTML 表格基础</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Tables/Advanced\">HTML 高级表格特性和可访问性</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Tables/Structuring_planet_data\">作业：构建行星数据</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/zh-CN/docs/Learn/CSS\"><strong>CSS — 设计 Web</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS 第一步</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/First_steps\">CSS第一步概览</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/First_steps/What_is_CSS\">什么是CSS</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/First_steps/Getting_started\">让我们开始CSS之旅</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/First_steps/How_CSS_is_structured\">如何让构建CSS</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/First_steps/How_CSS_works\">CSS如何运行</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/First_steps/Using_your_new_knowledge\">运用你的新知识</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS 构建基础</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks\">CSS构建基础概览</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">层叠与继承</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Selectors\">CSS选择器</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/The_box_model\">盒模型</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Backgrounds_and_borders\">背景与边框</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Handling_different_text_directions\">处理不同方向的文本</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Overflowing_content\">溢出的内容</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Values_and_units\">值与单位</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Sizing_items_in_CSS\">在CSS中调整大小</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Images_media_form_elements\">图像、媒体和表单元素</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Styling_tables\">样式化表格</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Debugging_CSS\">调试CSS</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Organizing\">组织你的CSS</a></li>\n      </ol></details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>样式化文字</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Styling_text\">样式化文字概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Styling_text/Fundamentals\">基础文字与字体样式化</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Styling_text/Styling_lists\">样式化列表</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Styling_text/Styling_links\">样式化链接</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Styling_text/Web_fonts\">Web 字体</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Styling_text/Typesetting_a_homepage\">作业：排版社区大学首页</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS 排版</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout\">CSS 排版概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Introduction\">Introduction to CSS layout</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Normal_Flow\">正常布局流</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Flexbox\">弹性区块</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Grids\">网格</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Floats\">浮动</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Positioning\">定位</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Multiple-column_Layout\">多列布局</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Responsive_Design\">响应式布局</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Media_queries\">媒体查询</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Legacy_Layout_Methods\">传统的布局方法</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Supporting_Older_Browsers\">支持旧的浏览器</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Fundamental_Layout_Comprehension\">基础布局练习</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/zh-CN/docs/Learn/JavaScript\"><strong>JavaScript — 用户端动态脚本</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>JavaScript 第一步</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps\">JavaScript 第一步概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript\">什么是 JavaScript？</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/A_first_splash\">初次接触 JavaScript</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/What_went_wrong\">出现了什么问题？JavaScript 疑难解答</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/Variables\">储存你所需的信息 — 变量</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/Math\">JavaScript 基础概念 — 数字与运算符</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/Strings\">处理文字 — JavaScript 中的字符串</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/Useful_string_methods\">有用的字符串方法</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/Arrays\">数组</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/Silly_story_generator\">作业：傻瓜故事产生器</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>JavaScript 基础要件</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks\">JavaScript 基础要件概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/conditionals\">在代码中决策 — 条件</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Looping_code\">代码循环</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Functions\">函数 - 可重复利用的代码块</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Build_your_own_function\">建立自己的函数</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Return_values\">函数回传值</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Events\">事件介绍</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Image_gallery\">作业：图库</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>JavaScript 对象介绍</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects\">JavaScript 对象概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/Basics\">对象基础概念</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/Object_prototypes\">对象原型</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/Object-oriented_programming\">Object-oriented programming concepts</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/Classes_in_JavaScript\">Classes in JavaScript</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/JSON\">使用 JSON 资料</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/Object_building_practice\">对象构建实践</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/Adding_bouncing_balls_features\">作业：为弹跳球展示新增功能</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>异步JavaScript</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous\">异步JavaScript概览</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Concepts\">通用异步编程概念</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Introducing\">异步JavaScript简介</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Timeouts_and_intervals\">合作异步JavaScript: 超时和间隔</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Promises\">Promises: 优雅的异步处理</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Async_await\">async和await:让异步编程更简单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Choosing_the_right_approach\">选择正确的方法</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>客户端网页 API</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs\">客户端网页 API</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Introduction\">网页 API 介绍</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents\">操纵文档</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data\">从服务器获取数据</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Third_party_APIs\">第三方 API</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Drawing_graphics\">画图</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Video_and_audio_APIs\">视频与音频 API</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Client-side_storage\">客户端存储</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/zh-CN/docs/Learn/Forms\"><strong>Web表单 — 与用户数据打交道</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Web表单核心</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Forms\">Web表单概览</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Your_first_form\">你的第一个表单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/How_to_structure_a_web_form\">如何构造Web表单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Basic_native_form_controls\">原生表单控件</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/HTML5_input_types\">HTML5的input类型</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Other_form_controls\">其它表单控件</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Styling_web_forms\">样式化Web表单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Advanced_form_styling\">高级表单样式</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/UI_pseudo-classes\">UI 伪类</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Form_validation\">客户端表单验证</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Sending_and_retrieving_form_data\">发送表单数据</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Web表单进阶</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/How_to_build_custom_form_controls\">如何构造自定义表单控件</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Sending_forms_through_JavaScript\">使用JavaScript发送表单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Property_compatibility_table_for_form_controls\">表单组件兼容性列表</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/zh-CN/docs/Learn/Accessibility\"><strong>可访问性 — 使每个人都能使用 Web</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>可访问性指南</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility\">可访问性概览</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility/What_is_accessibility\">什么是可访问性</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility/HTML\">HTML: 可访问性的好基础</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility/CSS_and_JavaScript\">CSS 和 JavaScript 可访问性最佳实践</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility/WAI-ARIA_basics\">WAI-ARIA 基础</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility/Multimedia\">可访问性多媒体</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility/Mobile\">移动端可访问性</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>可访问性测评</summary>\n        <ol>\n            <li><a href=\"/zh-CN/docs/Learn/Accessibility/Accessibility_troubleshooting\">作业：可访问性疑难解答</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing\"><strong>工具与测试</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>客户端web开发工具</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools\">客户端web开发工具索引</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Overview\">客户端工具概览</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Command_line\">命令行速成课</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Package_management\">包管理基础</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Introducing_complete_toolchain\">一个完整的工具链</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Deployment\">发布你的应用</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>客户端框架介绍</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Introduction\">客户端框架概览</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Main_features\">框架的主要特性</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>React</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started\">Getting started with React</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_todo_list_beginning\">Beginning our React todo list</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_components\">Componentizing our React app</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state\">React interactivity: Events and state</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_filtering_conditional_rendering\">React interactivity: Editing, filtering, conditional rendering</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_accessibility\">Accessibility in React</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_resources\">React resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Ember</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_getting_started\">Getting started with Ember</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_structure_componentization\">Ember app structure and componentization</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_interactivity_events_state\">Ember interactivity: Events, classes and state</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_conditional_footer\">Ember Interactivity: Footer functionality, conditional rendering</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_routing\">Routing in Ember</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_resources\">Ember resources and troubleshooting</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Vue</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_getting_started\">开始使用Vue</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_first_component\">创建第一个Vue组件</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_rendering_lists\">渲染一个Vue组件列表</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_methods_events_models\">添加一个新的TODO表单: Vue事件、方法、模型</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_styling\">用CSS样式化Vue组件</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_computed_properties\">Using Vue computed properties</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_conditional_rendering  \">Vue conditional rendering: editing existing todos</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_refs_focus_management\">Focus management with Vue refs</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_resources\">Vue resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Svelte</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_getting_started\">Getting started with Svelte</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_Todo_list_beginning\">Starting our Svelte Todo list app</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_variables_props\">Dynamic behavior in Svelte: working with variables and props</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_components\">Componentizing our Svelte app</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_reactivity_lifecycle_accessibility\">Advanced Svelte: Reactivity, lifecycle, accessibility</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_stores\">Working with Svelte stores</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_TypeScript  \">TypeScript support in Svelte</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_deployment_next\">Deployment and next steps</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Angular</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_getting_started\">Getting started with Angular</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_todo_list_beginning\">Beginning our Angular todo list app</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_styling\">Styling our Angular app</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_item_component\">Creating an item component</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_filtering\">Filtering our to-do items</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_building\">Building Angular applications and further resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Git 和 GitHub</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/GitHub\">Git和GitHub 概览</a></li>\n          <li><a href=\"https://guides.github.com/activities/hello-world/\">Hello World</a></li>\n          <li><a href=\"https://guides.github.com/introduction/git-handbook/\">Git Handbook</a></li>\n          <li><a href=\"https://guides.github.com/activities/forking/\">Forking Projects</a></li>\n          <li><a href=\"https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests\">About pull requests</a></li>\n          <li><a href=\"https://guides.github.com/features/issues/\">Mastering Issues</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>跨浏览器测试</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing\">跨浏览器测试概述</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Introduction\">跨浏览器测试介绍</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Testing_strategies\">执行测试策略</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/HTML_and_CSS\">处理常见的 HTML 与 CSS 问题</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/JavaScript\">处理常见的 JavaScript 问题</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Accessibility\">处理常见的可访问性问题</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Feature_detection\">建置功能侦测</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Automated_testing\">自动测试介绍</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Your_own_automation_environment\">设置您的自动测试环境</a></li>\n        </ol>\n    </details>\n  </li>\n  <li data-default-state=\"open\"><a href=\"/zh-CN/docs/Learn/Server-side\"><strong>服务端网页编程</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>第一步</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/First_steps\">第一步概述</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/First_steps/Introduction\">服务端介绍</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/First_steps/Client-Server_overview\">用户端概述</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/First_steps/Web_frameworks\">服务端网络框架</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/First_steps/Website_security\">网站安全</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Django 网站框架 (Python)</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django\">Django 网站框架 (Python) 概述</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Introduction\">介绍</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/development_environment\">搭建开发环境</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Tutorial_local_library_website\">在线教学：本地图书馆网站</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/skeleton_website\">在线教学 2：建立网站框架</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Models\">在线教学 3：使用模型</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Admin_site\">在线教学 4：Django 管理网站</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Home_page\">在线教学 5：建立我们的首页</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Generic_views\">在线教学 6：通用列表与细节检查</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Sessions\">在线教学 7：会话框架</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Authentication\">在线教学 8：用户授权与许可</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Forms\">在线教学 9：搭配表单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Testing\">在线教学 10：测试 Django 的 Web 应用</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Deployment\">在线教学 11：部署 Django 至产品</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/web_application_security\">Web 应用安全性</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/django_assessment_blog\">作业：DIY 博客</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n        <summary>Express 网页框架 (node.js/JavaScript)</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs\">Express 网页框架 (Node.js/JavaScript) 概览</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Introduction\">Express/Node 介绍</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/development_environment\">架设 Node (Express) 开发环境</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website\">Express 教程： 本地图书馆网站</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">Express 教程 2： 新建网站骨架</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/mongoose\">Express 教程 3： 使用数据库 (Mongoose)</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/routes\">Express 教程 4： 路由和控制器</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express 教程 5： 呈现图书馆数据</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/forms\">Express 教程 6： 使用表单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/deployment\">Express 教程 7： 部署至生产环境</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"#\"><strong>更多资源</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>常见问题</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/HTML/Howto\">HTML 问题</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/CSS/Howto\">CSS 问题</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Howto\">JavaScript questions</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Common_questions#Web_mechanics\">Web 是如何运作的</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Common_questions#Tools_and_setup\">工具与安装</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Common_questions#Design_and_accessibility\">设计与可访问性</a></li>\n        </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website\"> 上一页 </a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs\"> Overview: Express Nodejs</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/routes\"> 下一页  </a></li>\n</ul>\n<p>本文简要介绍了数据库以及 Node/Express 应用的数据库集成。然后演示了 <a href=\"http://mongoosejs.com/\" class=\"external\" rel=\" noopener\">Mongoose</a> 为 <a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website\">LocalLibrary</a> 提供数据库访问的方式。还讲解了对象模式（Schema）和模型（Model）的声明方式、主要域的类型、基础验证机制。同时还简短演示了访问模型数据的一些方法。</p>\n<table class=\"learn-box standard-table\">\n  <tbody>\n    <tr>\n      <th scope=\"row\">预备知识：</th>\n      <td><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">Express 教程 2: 创建站点骨架</a>，了解数据库基础知识。</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">目标：</th>\n      <td>使用 Mongoose 设计建造模型。</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"概览","title":"概览","isH3":false,"content":"<p>图书馆的员工会使用 LocalLibrary 网站来保存藏书和借阅者的信息。会员会浏览和查找所需藏书，找到后预约或借阅。为了更高效地存取信息，网站将使用数据库。</p>\n<p>Express 应用支持多款数据库，执行新建（<strong>C</strong>reate）、读取（<strong>R</strong>ead）、更新（<strong>U</strong>pdate）和删除（<strong>D</strong>elete）操作 (CRUD) 操作也有诸多途径。本教程先做一个不完全简介，然后对教程选用的机制进行详细介绍。</p>"}},{"type":"prose","value":{"id":"我可以使用什么数据库？","title":"我可以使用什么数据库？","isH3":true,"content":"<p>Express 应用可以使用 Node 支持的所有数据库（Express 本身不支持数据库管理的任何具体行为/需求）。有许多 <a href=\"https://expressjs.com/en/guide/database-integration.html\" class=\"external\" rel=\" noopener\">流行的选择</a>，包括 PostgreSQL、MySQL、Redis、SQLite 和 MongoDB。</p>\n<p>选用数据库应考虑以下因素：进入生产状态用时/学习曲线、性能、复制/备份的易用度、成本、社区支持，等等。这些数据库各有千秋，但绝大多数都足以胜任 LocalLibrary 这样中小规模的网站了。</p>\n<p>更多信息请参阅：<a href=\"http://www.expressjs.com.cn/guide/database-integration.html\" class=\"external\" rel=\" noopener\">数据库集成</a>（Express 文档）。</p>"}},{"type":"prose","value":{"id":"与数据库交互的最佳方式是什么？","title":"与数据库交互的最佳方式是什么？","isH3":true,"content":"<p>与数据库交互有两种方法：</p>\n<ul>\n  <li>使用数据库的原生查询语言（例如 SQL）</li>\n  <li>使用对象数据模型（Object Data Model，简称 ODM）或对象关系模型（Object Relational Model，简称 ORM）。ODM / ORM 能将网站中的数据表示为 JavaScript 对象，然后将它们映射到底层数据库。一些 ORM 只适用某些特定数据库，还有一些是普遍适用的。</li>\n</ul>\n<p>使用 SQL 或其它受到支持的查询语言才能达到最佳性能。ODM 通常慢一些，因为在对象和数据库格式之间存在一层用于映射的翻译代码，使它不一定会选用最高性能的数据库查询（尤其是普遍使用级别的 ODM，它必须在各类数据库功能方面做出更大的折衷）。</p>\n<p>使用 ORM 的好处是：程序员可以继续用 JavaScript 对象的思维而不用转向数据库语义的思维。在（同一个或不同网站）使用不同数据库时尤为明显。使用 ORM 还可以更方便地对数据进行验证和检查。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 使用 ODM / ORM 通常可以降低开发和维护成本！除非你非常熟悉本地查询语言，或者项目对性能要求很高，否则强烈推荐使用 ODM。</p>\n</div>"}},{"type":"prose","value":{"id":"我应该使用哪种_ormodm_","title":"我应该使用哪种 ORM/ODM ?","isH3":true,"content":"<p>NPM 站点上有许多 ODM / ORM 解决方案（另请参阅 NPM 站点上的 <a href=\"https://www.npmjs.com/browse/keyword/odm\" class=\"external\" rel=\" noopener\">odm</a> 和 <a href=\"https://www.npmjs.com/browse/keyword/orm\" class=\"external\" rel=\" noopener\">orm</a> 标签列表）。</p>\n<p>以下是迄今（2018 年 12 月）几种流行的解决方案：</p>\n<ul>\n  <li><a href=\"https://www.npmjs.com/package/mongoose\" class=\"external\" rel=\" noopener\">Mongoose</a>：一款为异步工作环境设计的 <a href=\"https://www.mongodb.org/\" class=\"external\" rel=\" noopener\">MongoDB</a> 对象建模工具。</li>\n  <li><a href=\"https://www.npmjs.com/package/waterline\" class=\"external\" rel=\" noopener\">Waterline</a>：从基于 Express 的 <a href=\"http://sailsjs.com/\" class=\"external\" rel=\" noopener\">Sails</a> 框架中提取的 ORM。它提供了一套统一的 API 来访问众多不同的数据库，其中包括 Redis，mySQL，LDAP，MongoDB 和 Postgres。</li>\n  <li><a href=\"https://www.npmjs.com/package/bookshelf\" class=\"external\" rel=\" noopener\">Bookshelf</a>：同时提供基于 promise 和传统回调两套接口，支持事务处理、渴求式/嵌套渴求式关系加载、多态关联，以及对一对一，一对多和多对多关系。支持 PostgreSQL、MySQL 和 SQLite3。</li>\n  <li><a href=\"https://www.npmjs.com/package/objection\" class=\"external\" rel=\" noopener\">Objection</a>：以尽可能简单的方式使用 SQL 和底层数据库引擎的全部功能（支持 SQLite3、Postgres 和 MySQL）。</li>\n  <li><a href=\"https://www.npmjs.com/package/sequelize\" class=\"external\" rel=\" noopener\">Sequelize</a>：基于 promise 的 Node.js 版 ORM，它支持 PostgreSQL、MySQL、MariaDB、SQLite 和 MSSQL，并提供可靠的事务支持、关系、复本读取等功能。</li>\n  <li><a href=\"https://node-orm.readthedocs.io/en/latest/\" class=\"external\" rel=\" noopener\">Node ORM2</a>：一款 Node.js 对象关系管理系统。支持 MySQL、SQLite 以及 Progress，可以帮助你用面向对象的方法操作数据库。</li>\n  <li><a href=\"http://1602.github.io/jugglingdb/\" class=\"external\" rel=\" noopener\">JugglingDB</a>：一款 Node.js 版跨数据库的 ORM。它为多数流行数据库提供了统一接口，当前支持 MySQL、SQLite3、Postgres、MongoDB、Redis 和 js-memory-storage（自写引擎，仅供测试用）。</li>\n</ul>\n<p>一般来说，选择解决方案应该考虑功能和“社区活跃度”（下载量、贡献数、bug 报告、文档质量，等）。在撰写本文时，Mongoose 是最受欢迎的 ODM，选用 MongoDB 数据库时，它是一个合理的选择。</p>"}},{"type":"prose","value":{"id":"在_locallibrary_中使用_mongoose_和_mongodb","title":"在 LocalLibrary 中使用 Mongoose 和 MongoDb","isH3":true,"content":"<p>我们将在本地图书馆示例（以及本主题的其余部分）中使用 <a href=\"https://www.npmjs.com/package/mongoose\" class=\"external\" rel=\" noopener\">Mongoose ODM</a> 来访问图书馆数据。Mongoose 作为 <a href=\"https://www.mongodb.com/what-is-mongodb\" class=\"external\" rel=\" noopener\">MongoDB</a>（面向文档数据模型的开源 <a href=\"https://en.wikipedia.org/wiki/NoSQL\" class=\"external\" rel=\" noopener\">NoSQL</a> 数据库）的前端。MongoDB 数据库里，“集合”中的“文档” <a href=\"https://docs.mongodb.com/manual/core/databases-and-collections/#collections\" class=\"external\" rel=\" noopener\">类似于</a> 关系数据库里“表”中的“行”。</p>\n<p>这种 ODM 和数据库的结合方式在 Node 社区中非常流行，一定程度上是因为文档存储和查询系统与 JSON 十分相似，因此 JavaScript 开发人员会非常熟悉。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 使用 Mongoose 无需事先了解 MongoDB，但是部分 <a href=\"http://mongoosejs.com/docs/guide.html\" class=\"external\" rel=\" noopener\">Mongoose 文档</a> 对于熟悉 MongoDB 的朋友会更易于使用和理解。</p>\n</div>\n<p>下面将介绍如何为 <a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website\">LocalLibrary 网站</a> 定义和访问 Mongoose 模式和模型。</p>"}},{"type":"prose","value":{"id":"设计_locallibrary_模型","title":"设计 LocalLibrary 模型","isH3":false,"content":"<p>在开始投入模型编写之前，有必要先思考一下：本网站需要存储什么数据？不同对象之间的关系是怎样的？</p>\n<p>图书馆需要存储藏书信息（书名、摘要、作者、种类、ISBN），藏书副本信息（全站唯一 ID，借出状态，等）。还可能需要存储作者姓名之外的更多信息，以及多个作者的信息。还希望数据库内容能够根据书名、作者姓名、种类和编目进行排序。</p>\n<p>有必要为每个“对象”（一组相关信息）设计独立的模型。本示例的关键对象包括书籍、书籍副本和作者。</p>\n<p>也许还希望使用模型而不是站点代码来表示选项表（比如下拉列表），在选项无法预知或可能更改时更推荐模型方式。很明显，藏书类型（比如科幻小说、法语诗歌，等）就是这种情况。</p>\n<p>确定模型和字段后还要考虑它们之间的关系，以下 UML 图显示了本示例即将定义的模型（框图）。如上所述，我们为藏书（一般细节）、藏书副本（系统）和作者创建了模型。还有一个可以动态选择的书籍种类模型。对于 <code>BookInstance:status</code>，我们不会为它建立模型，而是将可能的值直接编入站点代码中，因为我们不希望这些值发生变化。下图每个框都包括模型名、字段名和类型，还有方法及其返回类型。</p>\n<p>下图还展示了模型之间的关系以及重复度（Multiplicity）。重复度就是图中两框间连线两端的数字，表示两个模型之间存在的关系的数量（最大值和最小值）。例如，<code>Book</code> 框和 <code>Genre</code> 框之间有连线说明二者之间存在关系，<code>Book</code> 模型端的数字（0..*）表示一个种类必包括零种或多种藏书（多少都可以），而 <code>Genre</code> 端的数字表示一种藏书可以有零个或多个种类。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 正如下文 <a href=\"#\">Mongoose 入门</a> 中所讲，通常应该把定义文档/模型关系的字段置于同一模型中（仍可通过在搜索相关 <code>_id</code> 来回寻模型间的关系）。以下的 Book 模式中定义了 Book/Genre 和 Book/Author 关系，BookInstance 模式中定义了 Book/BookInstance 关系。这样做是简便起见，但稍存歧义，让这些字段存在于其他模式中也是可以的。</p>\n</div>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Express_Nodejs/mongoose/library_website_-_mongoose_express.png\" alt=\"Mongoose Library Model  with correct cardinality\" width=\"737\" height=\"620\" loading=\"lazy\">\n</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>备注：</strong> 下面是一段入门知识，讲解如何定义和使用模型。请在阅读时想想将如何构建上图中的模型。</p>\n</div>"}},{"type":"prose","value":{"id":"mongoose_入门","title":"Mongoose 入门","isH3":false,"content":"<p>这一段将简要介绍如何将 Mongoose 连接到 MongoDB 数据库，如何定义模式和模型，以及如何进行基本查询。</p>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>备注：</strong> 本入门受到 npm 上的 <a href=\"https://www.npmjs.com/package/mongoose\" class=\"external\" rel=\" noopener\">Mongoose 快速入门</a> 和 <a href=\"http://mongoosejs.com/docs/guide.html\" class=\"external\" rel=\" noopener\">Mongoose 官方文档</a> 的“深度影响”。</p>\n</div>"}},{"type":"prose","value":{"id":"安装_mongoose_和_mongodb","title":"安装 Mongoose 和 MongoDB","isH3":true,"content":"<p>Mongoose 像任何其他依赖项一样，使用 NPM 将其安装在您的项目（<strong>package.json</strong>）中。请在项目文件夹中运行下面的命令以完成安装：</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> mongoose\n</code></pre></div>\n<p>安装 Mongoose 会添加所有依赖项，包括 MongoDB 数据库驱动程序，但不会安装 MongoDB 本身。要安装 MongoDB 服务器，可以 <a href=\"https://www.mongodb.com/download-center\" class=\"external\" rel=\" noopener\">点击下载</a> 各操作系统的安装程序在本地安装。也可以使用云端 MongoDB 实例。</p>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>备注：</strong> 本教程选用 mLab 提供的 <a href=\"https://mlab.com/plans/pricing/\" class=\"external\" rel=\" noopener\">沙箱级</a> 云端“数据库即服务”（Database as a Service，DBaaS）。它适用于开发环境，且部署过程与操作系统无关（DBaaS 也适用于生产环境）。</p>\n</div>"}},{"type":"prose","value":{"id":"连接到_mongodb","title":"连接到 MongoDB","isH3":true,"content":"<p>Mongoose 需要连接到 MongoDB 数据库。可以 <code>require()</code> 之，并通过 <code>mongoose.connect()</code> 连接到本地数据库，如下。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 导入 mongoose 模块</span>\n<span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 设置默认 mongoose 连接</span>\n<span class=\"token keyword\">const</span> mongoDB <span class=\"token operator\">=</span> <span class=\"token string\">'mongodb://127.0.0.1/my_database'</span><span class=\"token punctuation\">;</span>\nmongoose<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mongoDB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 让 mongoose 使用全局 Promise 库</span>\nmongoose<span class=\"token punctuation\">.</span>Promise <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>Promise<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 取得默认连接</span>\n<span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 将连接与错误事件绑定（以获得连接错误的提示）</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">,</span> <span class=\"token string\">'MongoDB 连接错误：'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>可以用 <code>mongoose.connection</code> 取得默认的 <code>Connection</code> 对象。一旦连接，<code>Connection</code> 实例将触发打开事件。</p>\n<div class=\"notecard note\" id=\"sect7\">\n  <p><strong>备注：</strong> 可以使用 <code>mongoose.createConnection()</code> 创建其它连接。该函数与 <code>connect()</code> 的参数（数据库 URI，包括主机地址、数据库名、端口、选项等）一致，并返回一个 <code>Connection</code> 对象。</p>\n</div>"}},{"type":"prose","value":{"id":"定义和添加模型","title":"定义和添加模型","isH3":true,"content":"<p>模型使用 <code>Schema</code> 接口进行定义。 <code>Schema</code> 可以定义每个文档中存储的字段，及字段的验证要求和默认值。还可以通过定义静态和实例辅助方法来更轻松地处理各种类型的数据，还可以像使用普通字段一样使用数据库中并不存在的虚拟属性（稍后讨论）。</p>\n<p><code>mongoose.model()</code> 方法将模式“编译”为模型。模型就可以用来查找、创建、更新和删除特定类型的对象。</p>\n<div class=\"notecard note\" id=\"sect8\">\n  <p><strong>备注：</strong> MongoDB 数据库中，每个模型都映射至一组文档。这些文档包含 <code>Schema</code> 模型定义的字段名/模式类型。</p>\n</div>\n<h4 id=\"定义模式\">定义模式</h4>\n<p>下面的代码片段中定义了一个简单的模式。首先 <code>require()</code> mongoose，然后使用 <code>Schema</code> 构造器创建一个新的模式实例，使用构造器的对象参数定义各个字段。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 获取 Mongoose</span>\n<span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 定义一个模式</span>\n<span class=\"token keyword\">var</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> SomeModelSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">a_string</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">a_date</span><span class=\"token operator\">:</span> Date\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>上面示例只有两个字段（一个字符串和一个日期），接下来将展示其它字段类型、验证和其它方法。</p>\n<h4 id=\"创建模型\">创建模型</h4>\n<p>使用 <code>mongoose.model()</code> 方法从模式创建模型：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 定义模式</span>\n<span class=\"token keyword\">const</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> SomeModelSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">a_string</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">a_date</span><span class=\"token operator\">:</span> Date\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 使用模式“编译”模型</span>\n<span class=\"token keyword\">const</span> SomeModel <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SomeModel'</span><span class=\"token punctuation\">,</span> SomeModelSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>第一个参数是为模型所创建集合的别名（Mongoose 将为 SomeModel 模型创建数据库集合），第二个参数是创建模型时使用的模式。</p>\n<div class=\"notecard note\" id=\"sect9\">\n  <p><strong>备注：</strong> 定义模型类后，可以使用它们来创建、更新或删除记录，以及通过查询来获取所有记录或特定子集。我们将在以下“<a href=\"#\">使用模型</a>”部分展示，包括创建视图的情况。</p>\n</div>\n<h4 id=\"模式类型（字段）\">模式类型（字段）</h4>\n<p>模式可以包含任意数量的字段，每个字段代表 MongoDB 文档中的一段存储区域。下面是一个模式的示例，其中有许多常见字段类型和声明方式：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">binary</span><span class=\"token operator\">:</span> Buffer<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">living</span><span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">updated</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span>now <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span> <span class=\"token number\">65</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mixed</span><span class=\"token operator\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>Mixed<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">_someId</span><span class=\"token operator\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">array</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">ofString</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 其他类型也可使用数组</span>\n  <span class=\"token literal-property property\">nested</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">stuff</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lowercase</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">trim</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>大多数 <a href=\"http://mongoosejs.com/docs/schematypes.html\" class=\"external\" rel=\" noopener\">模式类型</a>（ <a href=\"http://mongoosejs.com/docs/schematypes.html\" class=\"external\" rel=\" noopener\">SchemaType</a>，字段名之后的描述符）都是自解释的。除了：</p>\n<ul>\n  <li><code>ObjectId</code>：表示数据库中某一模型的特定实例。例如，一本书可能会使用它来表示其作者对象。它实际只包含指定对象的唯一 ID（<code>_id</code>） 。可以使用 <code>populate()</code> 方法在需要时提取相关信息。</li>\n  <li><a href=\"http://mongoosejs.com/docs/schematypes.html#mixed\" class=\"external\" rel=\" noopener\">Mixed</a>：任意模式类型。</li>\n  <li>[]：对象数组。以在此类模型上执行 JavaScript 数组操作（<code>push</code>、<code>pop</code>、<code>unshift</code>等）。上例中有一个没有指定类型的对象数组和一个 <code>String</code> 对象数组，数组中的对象可以是任意类型的。</li>\n</ul>\n<p>代码还展示了声明字段的两种方法：</p>\n<ul>\n  <li>字段名和类型名作为键 - 值对（就像 <code>name</code>、<code>binary</code> 和 <code>living</code>）。</li>\n  <li>字段名后跟一个对象，在对象中定义 <code>type</code> 和字段的其它选项，可以是：\n    <ul>\n      <li>默认值。</li>\n      <li>内置验证器（例如最大/最小值）和自定义验证函数。</li>\n      <li>该字段是否必需。</li>\n      <li>是否将 <code>String</code> 字段自动转换为小写、大写，或截断两端空格（例如<code>{ type: String, lowercase: true, trim: true }</code>)</li>\n    </ul>\n  </li>\n</ul>\n<p>关于选项的更多信息请参阅 <a href=\"http://mongoosejs.com/docs/schematypes.html\" class=\"external\" rel=\" noopener\">模式类型</a>（Mongoose 英文文档）。</p>\n<h4 id=\"验证\">验证</h4>\n<p>Mongoose 提供内置的和自定义的验证器，以及同步的和异步的验证器。你可以在所有情况下，指定可接受的范围或值，以及验证失败的错误消息。</p>\n<p>内置的验证器包括：</p>\n<ul>\n  <li>所有 <a href=\"http://mongoosejs.com/docs/schematypes.html\" class=\"external\" rel=\" noopener\">模式类型</a> 都具有内置的 <a href=\"http://mongoosejs.com/docs/api.html#schematype_SchemaType-required\" class=\"external\" rel=\" noopener\">required</a> 验证器。用于指定当前字段是否为保存文档所必需的。</li>\n  <li><a href=\"https://mongoosejs.com/docs/api.html#mongoose_Mongoose-Number\" class=\"external\" rel=\" noopener\">Number</a> 有数值范围验证器 <a href=\"http://mongoosejs.com/docs/api.html#schema_number_SchemaNumber-min\" class=\"external\" rel=\" noopener\">min</a> 和 <a href=\"http://mongoosejs.com/docs/api.html#schema_number_SchemaNumber-max\" class=\"external\" rel=\" noopener\">max</a>。</li>\n  <li><a href=\"http://mongoosejs.com/docs/api.html#schema-string-js\" class=\"external\" rel=\" noopener\">String</a> 有：\n    <ul>\n      <li><a href=\"http://mongoosejs.com/docs/api.html#schema_string_SchemaString-enum\" class=\"external\" rel=\" noopener\">enum</a>：指定当前字段允许值的集合。</li>\n      <li><a href=\"http://mongoosejs.com/docs/api.html#schema_string_SchemaString-match\" class=\"external\" rel=\" noopener\">match</a>：指定字符串必须匹配的正则表达式。</li>\n      <li>字符串的最大长度 <a href=\"http://mongoosejs.com/docs/api.html#schema_string_SchemaString-maxlength\" class=\"external\" rel=\" noopener\">maxlength</a> 和最小长度 <a href=\"http://mongoosejs.com/docs/api.html#schema_string_SchemaString-minlength\" class=\"external\" rel=\" noopener\">minlength</a></li>\n    </ul>\n  </li>\n</ul>\n<p>以下是类型验证器和错误消息的设定方法（从 Mongoose 文档稍作修改而来）：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> breakfastSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">eggs</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'鸡蛋太少'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">drink</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">enum</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'咖啡'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'茶'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>字段验证的完整信息请参阅 <a href=\"http://mongoosejs.com/docs/validation.html\" class=\"external\" rel=\" noopener\">验证</a>（Mongoose 英文文档）。</p>\n<h4 id=\"虚拟属性\">虚拟属性</h4>\n<p>虚拟属性是可以获取和设置、但不会保存到 MongoDB 的文档属性。getter 可用于格式化或组合字段，而 setter 可用于将单个值分解为多个值从而便于存储。文档中的示例，从名字和姓氏字段构造（并解构）一个全名虚拟属性，这比每次在模板中使用全名更简单，更清晰。</p>\n<div class=\"notecard note\" id=\"sect10\">\n  <p><strong>备注：</strong> 我们将使用库中的一个虚拟属性，用路径和记录的 <code>_id</code> 来为每个模型记录定义唯一的 URL。</p>\n</div>\n<p>更多信息请参阅 <a href=\"http://mongoosejs.com/docs/guide.html#virtuals\" class=\"external\" rel=\" noopener\">虚拟属性</a>（Mongoose 英文文档）。</p>\n<h4 id=\"方法和查询助手\">方法和查询助手</h4>\n<p>模式支持 <a href=\"http://mongoosejs.com/docs/guide.html#methods\" class=\"external\" rel=\" noopener\">实例方法</a>、<a href=\"http://mongoosejs.com/docs/guide.html#statics\" class=\"external\" rel=\" noopener\">静态方法</a> 和 <a href=\"http://mongoosejs.com/docs/guide.html#query-helpers\" class=\"external\" rel=\" noopener\">查询助手</a>。实例方法和静态方法外表很相似，但有本质区别，实例方法针对特定记录，且可以访问当前对象。查询助手可用于扩展 Mongoose 的 <a href=\"http://mongoosejs.com/docs/queries.html\" class=\"external\" rel=\" noopener\">链式查询 API</a>（例如，在 <code>find()</code>、<code>findOne()</code> 和 <code>findById()</code> 方法外还可以添加一个“<code>byName</code>”查询）。</p>"}},{"type":"prose","value":{"id":"使用模型","title":"使用模型","isH3":true,"content":"<p>就可以使用创建好的模式来创建模型。模型即数据库中可以搜索的一类文档，模型的实例即可以存取的单个文档。</p>\n<p>以下是简介。更多信息请参阅：<a href=\"http://mongoosejs.com/docs/models.html\" class=\"external\" rel=\" noopener\">模型</a>（Mongoose 英文文档）。</p>\n<h4 id=\"创建和修改文档\">创建和修改文档</h4>\n<p>可以通过定义模型的实例并调用 <code>save()</code> 来创建记录。以下示例假定 <code>SomeModel</code> 是用现有模式创建的模型（只有一个字段 \"<code>name</code>\" ）：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 创建一个 SomeModel 模型的实例</span>\n<span class=\"token keyword\">const</span> awesome_instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SomeModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'牛人'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 传递回调以保存这个新建的模型实例</span>\nawesome_instance<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 已保存</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>记录的创建（以及更新、删除和查询）操作是异步的，可以提供一个回调函数在操作完成时调用。由于 API 遵循错误参数优先的惯例，因此回调的第一个参数必为错误值（或 <code>null</code>）。如果 API 需要返回一些结果，则将结果作为第二个参数。</p>\n<p>还可以使用 <code>create()</code>，在定义模型实例的同时将其保存。回调的第一个参数返回错误，第二个参数返回新建的模型实例。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>SomeModel<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'也是牛人'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> awesome_instance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 已保存</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>每个模型都有一个相关的连接（使用 <code>mongoose.model()</code> 时将做为默认连接）。可以通过创建新连接并对其调用 <code>.model()</code>，从而在另一个数据库上创建文档。</p>\n<p>可以使用“圆点”加字段名来访问、修改新记录中的字段。操作后必须调用 <code>save()</code> 或 <code>update()</code> 以将改动保存回数据库。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 使用圆点来访问模型的字段值</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>awesome_instance<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 控制台将显示 '也是牛人'</span>\n\n<span class=\"token comment\">// 修改字段内容并调用 save() 以修改记录</span>\nawesome_instance<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"酷毙了的牛人\"</span><span class=\"token punctuation\">;</span>\nawesome_instance<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 已保存</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"搜索纪录\">搜索纪录</h4>\n<p>可以使用查询方法搜索记录，查询条件可列在 JSON 文档中。以下代码展示了如何在数据库中找到所有网球运动员，并返回运动员姓名和年龄字段。这里只指定了一个匹配字段（运动项目，<code>sport</code>），也可以添加更多条件，指定正则表达式，或去除所有条件以返回所有运动员。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> Athlete <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Athlete'</span><span class=\"token punctuation\">,</span> yourSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// SELECT name, age FROM Athlete WHERE sport='Tennis'</span>\nAthlete<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'sport'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tennis'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'name age'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> athletes</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 'athletes' 中保存一个符合条件的运动员的列表</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>若像上述代码那样指定回调，则查询将立即执行。搜索完成后将调用回调。</p>\n<div class=\"notecard note\" id=\"sect11\">\n  <p><strong>备注：</strong> Mongoose 中所有回调都使用 <code>callback(error, result)</code> 模式。如果查询时发生错误，则参数 <code>error</code> 将包含错误文档，<code>result</code> 为 <code>null</code>。如果查询成功，则 <code>error</code>为 <code>null</code>，查询结果将填充至 <code>result</code> 。</p>\n</div>\n<p>若未指定回调，则 API 将返回 <a href=\"http://mongoosejs.com/docs/api.html#query-js\" class=\"external\" rel=\" noopener\">Query</a> 类型的变量。可以使用该查询对象来构建查询，随后使用 <code>exec()</code> 方法执行（使用回调）。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 寻找所有网球运动员</span>\n<span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> Athlete<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'sport'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tennis'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 查找 name, age 两个字段</span>\nquery<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 只查找前 5 条记录</span>\nquery<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 按年龄排序</span>\nquery<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 以后某个时间运行该查询</span>\nquery<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> athletes</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token comment\">// athletes 中保存网球运动员列表，按年龄排序，共 5 条记录</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>上面的查询条件定义在 <code>find()</code> 方法中。也可以使用 <code>where()</code> 函数来执行此操作，可以使用点运算符（<code>.</code>）将所有查询链接在一起。以下代码与上述的查询基本相同，还添加了年龄范围的附加条件。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Athlete<span class=\"token punctuation\">.</span>\n  <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n  <span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sport'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tennis'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n  <span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">gt</span><span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">lt</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>  <span class=\"token comment\">// 附加 WHERE 查询</span>\n  <span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n  <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n  <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n  <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 回调函数的名字是 callback</span>\n</code></pre></div>\n<p><a href=\"http://mongoosejs.com/docs/api.html#query_Query-find\" class=\"external\" rel=\" noopener\"><code>find()</code></a> 方法会取得所有匹配记录，但通常你只想取得一个。以下方法可以查询单个记录：</p>\n<ul>\n  <li><a href=\"http://mongoosejs.com/docs/api.html#model_Model.findById\" class=\"external\" rel=\" noopener\"><code>findById()</code></a>：用指定 <code>id</code> 查找文档（每个文档都有一个唯一 <code>id</code>）。</li>\n  <li><a href=\"http://mongoosejs.com/docs/api.html#query_Query-findOne\" class=\"external\" rel=\" noopener\"><code>findOne()</code></a>：查找与指定条件匹配的第一个文档。</li>\n  <li><a href=\"http://mongoosejs.com/docs/api.html#model_Model.findByIdAndRemove\" class=\"external\" rel=\" noopener\"><code>findByIdAndRemove()</code></a>、<a href=\"http://mongoosejs.com/docs/api.html#model_Model.findByIdAndUpdate\" class=\"external\" rel=\" noopener\"><code>findByIdAndUpdate()</code></a>、<a href=\"http://mongoosejs.com/docs/api.html#query_Query-findOneAndRemove\" class=\"external\" rel=\" noopener\"><code>findOneAndRemove()</code></a>、 <a href=\"http://mongoosejs.com/docs/api.html#query_Query-findOneAndUpdate\" class=\"external\" rel=\" noopener\"><code>findOneAndUpdate()</code></a>：通过 <code>id</code> 或条件查找单个文档，并进行更新或删除。以上是更新和删除记录的便利函数。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect12\">\n  <p><strong>备注：</strong> 还有一个 <a href=\"http://mongoosejs.com/docs/api.html#model_Model.count\" class=\"external\" rel=\" noopener\"><code>count()</code></a> 方法，可获取匹配条件的项目的个数。在只期望获得记录的个数而不想获取实际的记录时可以使用。</p>\n</div>\n<p>查询还能做更多。请参阅 <a href=\"http://mongoosejs.com/docs/queries.html\" class=\"external\" rel=\" noopener\">查询</a>（Mongoose 英文文档）。</p>\n<h4 id=\"文档间协同_——_population\">文档间协同 —— population</h4>\n<p>可以使用 <code>ObjectId</code> 模式字段来创建两个文档/模型实例间一对一的引用，（一组 <code>ObjectIds</code> 可创建一对多的引用）。该字段存储相关模型的 id。如果需要相关文档的实际内容，可以在查询中使用 <a href=\"http://mongoosejs.com/docs/api.html#query_Query-populate\" class=\"external\" rel=\" noopener\"><code>populate()</code></a> 方法，将 id 替换为实际数据。</p>\n<p>例如，以下模式定义了作者和简介。每个作者可以有多条简介，我们将其表示为一个 <code>ObjectId</code> 数组。每条简介只对应一个作者。“<code>ref</code>”（黑体字）告知模式分配哪个模型给该字段。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Schema   <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> authorSchema <span class=\"token operator\">=</span> <span class=\"token function\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span>    <span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">stories</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token string\">'Story'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> storySchema <span class=\"token operator\">=</span> <span class=\"token function\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">author</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token string\">'Author'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">title</span>  <span class=\"token operator\">:</span> String\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Story  <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Story'</span><span class=\"token punctuation\">,</span> storySchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Author <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Author'</span><span class=\"token punctuation\">,</span> authorSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>可以通过分配 <code>_id</code> 值来保存对相关文档的引用。下面我们创建一个作者、一条简介，并将新简介的 <code>author</code> 字段设置为新建作者的 id。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> wxm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Author</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'司马迁'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nwxm<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 现在库中有了作者司马迁，我们来新建一条简介</span>\n  <span class=\"token keyword\">const</span> story <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Story</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"司马迁是历史学家\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> wxm<span class=\"token punctuation\">.</span>_id    <span class=\"token comment\">// author 设置为作者 司马迁 的 _id。ID 是自动创建的。</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  story<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>  <span class=\"token comment\">// 司马迁有了一条简介</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>现在简介文档通过作者文档的 ID 引用了作者。可使用 <code>populate()</code> 在简介中获取作者信息，如下所示。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Story\n  <span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'司马迁是历史学家'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'author'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用作者 id 填充实际作者信息</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> story</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'作者是 %s'</span><span class=\"token punctuation\">,</span> story<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 控制台将打印 \"作者是 司马迁\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect13\">\n  <p><strong>备注：</strong> 目光敏锐的读者可能会注意到，新的简介添加了作者，但并没有添加到 <code>stories</code> 数组中。那么怎样才能得到指定作者的所有简介？考虑把作者添加到 <code>stories</code> 数组中，但会导致作者和简介相关信息的要在两处进行维护。</p>\n  <p>更好的方法是获取作者的 <code>_id</code>，然后使用 <code>find()</code> 在所有简介的作者字段中搜索。</p>\n  <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Story\n  <span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">author</span> <span class=\"token operator\">:</span> wxm<span class=\"token punctuation\">.</span>_id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> stories</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 返回所有 author 字段的值为 司马迁 id 的简介</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</div>\n<p>以上是本教程中“项目间协同”需要了解的所有内容。更多详细信息请参阅 <a href=\"http://mongoosejs.com/docs/populate.html\" class=\"external\" rel=\" noopener\">Population</a>（Mongoose 英文文档）。</p>"}},{"type":"prose","value":{"id":"一模式（模型）一文件","title":"一模式（模型）一文件","isH3":true,"content":"<p>虽然创建模式和模型没有文件结构的限制，但强烈建议将单一模式定义在单一模块（文件）中，并通过导出方法来创建模型。如下所示：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 文件：./models/somemodel.js</span>\n\n<span class=\"token comment\">// Require Mongoose</span>\n<span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 定义一个模式</span>\n<span class=\"token keyword\">const</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> SomeModelSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">a_string</span> <span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">a_date</span>   <span class=\"token operator\">:</span> Date\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 导出函数来创建 \"SomeModel\" 模型类</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SomeModel'</span><span class=\"token punctuation\">,</span> SomeModelSchema <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>然后就可以在其它文件中，<code>require</code> 并使用该模型。下面是通过 <code>SomeModel</code> 模块来获取所有实例的方法。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 通过 require 模块来创建 SomeModel 模型</span>\n<span class=\"token keyword\">const</span> SomeModel <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/somemodel'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 使用 SomeModel 对象（模型）来查找所有的 SomeModel 记录</span>\nSomeModel<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>callback_function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"架设_mongodb_数据库","title":"架设 MongoDB 数据库","isH3":false,"content":"<p>我们已经初步了解了 Mongoose 以及设计模型的方法，现在该开始搭建 LocalLibrary 网站了。第一件事就是设置 MongoDB 数据库，来存储图书馆的数据。</p>\n<p>本教程将使用 <a href=\"https://mlab.com/welcome/\" class=\"external\" rel=\" noopener\">mLab</a> 免费版“<a href=\"https://mlab.com/plans/pricing/\" class=\"external\" rel=\" noopener\">沙盒</a>”云数据库。这一版不适用于生产环境，因为它没有冗余设计，但非常适合进行开发和原型设计。选用它是因为它免费且易于设置，并且 mLab 是一家流行的数据库服务供应商，也是生产环境数据库的理想选择（撰写本文时（2019 年 1 月），国内流行的云数据库解决方案有 <a href=\"https://www.aliyun.com/product/mongodb?spm=5176.10695662.778269.1.2e5b8cb3Hw9HUr\" class=\"external\" rel=\" noopener\">阿里云</a>、<a href=\"https://cloud.tencent.com/product/mongodb\" class=\"external\" rel=\" noopener\">腾讯云</a>、<a href=\"https://cloud.baidu.com/product/mongodb.html\" class=\"external\" rel=\" noopener\">百度云</a> 等）。</p>\n<div class=\"notecard note\" id=\"sect14\">\n  <p><strong>备注：</strong> 也可以下载并安装 <a href=\"https://www.mongodb.com/download-center\" class=\"external\" rel=\" noopener\">对应系统的安装包</a>，设置本地版 MongoDB 数据库。多数指令和使用云数据库是一样的，除了连接时数据库的 URL。</p>\n</div>\n<div class=\"notecard note\" id=\"sect15\">\n  <p><strong>备注：</strong> 目前 mLab 网站在国内速度很慢，若遇到无法正常注册或登录的情况可以考虑本地版 MongoDB。</p>\n</div>\n<p>首先 <a href=\"https://mlab.com/signup/\" class=\"external\" rel=\" noopener\">用 mLab 创建一个账户</a>（这是免费的，只需要输入基本联系信息，并同意服务条款）。</p>\n<p>登录后将进入 <a href=\"https://mlab.com/home\" class=\"external\" rel=\" noopener\">mLab 主屏幕</a>：</p>\n<ol>\n  <li>单击 <em>MongoDB Deployments</em>（MongoDB 部署）部分中的 <strong>Create New（新建）</strong>。\n    <img src=\"https://mdn.mozillademos.org/files/14446/mLabCreateNewDeployment.png\" alt=\"\" loading=\"lazy\">\n  </li>\n  <li>\n    将打开 Cloud Provider（云服务提供商）选择屏幕。\n    \n    <img src=\"https://mdn.mozillademos.org/files/15661/mLab_new_deployment_form_v2.png\" alt=\"MLab - screen for new deployment\" loading=\"lazy\">\n    <ul>\n      <li>在 Plan Type（方案类型）部分中，选择 SANDBOX（Free）免费沙箱方案。</li>\n      <li>从 <em>Cloud Provider</em>（云服务提供商）部分选择任意提供商。不同地区适用不同提供商（显示在选定的计划类型下面）。</li>\n      <li>点击 **Continue（继续）**按钮。</li>\n    </ul>\n  </li>\n  <li>\n    此时将打开 <em>Select Region</em>（选择区域）屏幕。\n    \n    <img src=\"https://mdn.mozillademos.org/files/15662/mLab_new_deployment_select_region_v2.png\" alt=\"Select new region screen\" loading=\"lazy\">\n    <ul>\n      <li>选择离你最近的地区，然后 <strong>Continue</strong>。</li>\n    </ul>\n  </li>\n  <li>\n    将打开 Final Details（最后的细节）屏幕。\n    \n    <img src=\"https://mdn.mozillademos.org/files/15663/mLab_new_deployment_final_details.png\" alt=\"New deployment database name\" loading=\"lazy\">\n    <ul>\n      <li>输入新数据库的名称 <code>local_library</code>，然后 <strong>Continue</strong>。</li>\n    </ul>\n  </li>\n  <li>\n    将打开 <em>Order Confirmation</em>（订单确认）屏幕。\n    \n    <img src=\"https://mdn.mozillademos.org/files/15664/mLab_new_deployment_order_confirmation.png\" alt=\"Order confirmation screen\" loading=\"lazy\">\n    <ul>\n      <li>点击 **Submit Order（提交订单）**以创建数据库。</li>\n    </ul>\n  </li>\n  <li>\n    将返回到主屏幕。点击刚创建的新数据库可以打开详细信息屏幕。当前数据库还没有任何数据。\n    \n    <img src=\"https://mdn.mozillademos.org/files/15665/mLab_new_deployment_database_details.png\" alt=\"mLab - Database details screen\" loading=\"lazy\">\n    表单显示了访问数据库的 URL（上图的红框）。此时可以创建一个用户，并在 URL 中指定用户名，就可以访问这个 URL 了。\n  </li>\n  <li>点击 <strong>Users</strong> 选项卡，点击 <strong>Add database user</strong> 按钮。</li>\n  <li>\n    输入用户名和密码（两次），然后按 <strong>Create</strong>。不要选择 Make <em>read-only</em>。\n    \n    <img src=\"https://mdn.mozillademos.org/files/14454/mLab_database_users.png\" alt=\"\" loading=\"lazy\">\n  </li>\n</ol>\n<p>现在数据库已经创建好了，并且有一个可访问的 URL（带有用户名和密码）：<code>mongodb://&lt;dbuser&gt;:&lt;dbpassword&gt;@ds019038.mlab.com:19038/local_library</code></p>"}},{"type":"prose","value":{"id":"安装_mongoose","title":"安装 Mongoose","isH3":false,"content":"<p>打开终端，并转到 <a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">LocalLibrary 站点骨架</a> 的目录。通过以下命令安装 Mongoose（及其依赖项），并将其添加至 <strong>package.json</strong> 文件，若你在阅读 <strong>Mongoose 入门</strong> 时已经完成这一操作，请忽略本段。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> mongoose\n</code></pre></div>"}},{"type":"prose","value":{"id":"连接到_mongodb_2","title":"连接到 MongoDB","isH3":false,"content":"<p>打开 <strong>/app.js</strong>（位于项目根目录），并将以下代码复制到声明 Express 应用对象的位置（<code>var app = express();</code> 之后）。将数据库 URL 字符串（'在此插入数据库_URL'）替换为真实的 URL（<a href=\"#架设_mongodb_数据库\">设置自 mLab</a>）。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 设置 Mongoose 连接</span>\n<span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mongoDB <span class=\"token operator\">=</span> <span class=\"token string\">'在此插入数据库_URL'</span><span class=\"token punctuation\">;</span>\nmongoose<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mongoDB<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">useNewUrlParser</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">useUnifiedTopology</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmongoose<span class=\"token punctuation\">.</span>Promise <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>Promise<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">;</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">,</span> <span class=\"token string\">'MongoDB 连接错误：'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>如上文 <a href=\"#mongoose_入门\">Mongoose 入门</a> 所讲，以上代码创建了与数据库的默认连接，并绑定了错误事件（错误信息将及时打印到控制台）。</p>"}},{"type":"prose","value":{"id":"定义_locallibrary_模式","title":"定义 LocalLibrary 模式","isH3":false,"content":"<p><a href=\"#%E4%B8%80%E6%A8%A1%E5%9E%8B%E4%B8%80%E6%96%87%E4%BB%B6\">如上文所述</a>，我们将为每个模型定义单独的模块。首先在项目根目录中创建一个文件夹用来保存模型（<strong>/models</strong>），然后为每个模型创建单独的文件：</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">/express-locallibrary-tutorial  // 项目根目录\n  /models\n    author.js\n    book.js\n    bookinstance.js\n    genre.js\n</pre></div>"}},{"type":"prose","value":{"id":"作者模型（author）","title":"作者模型（Author）","isH3":true,"content":"<p>将下方的 <code>Author</code> 模式代码复制粘贴至 <strong>./models/author.js</strong> 文件中。模式中定义了两个 <code>String</code> 模式类型来表示作者的姓氏和名字（这两个字段是必需的，且长度不能超过 100 字符），定义了两个 <code>Date</code> 字段做为作者的生卒日期。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> AuthorSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">first_name</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">family_name</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">date_of_birth</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">date_of_death</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 虚拟属性'name'：表示作者全名</span>\nAuthorSchema\n  <span class=\"token punctuation\">.</span><span class=\"token function\">virtual</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>family_name <span class=\"token operator\">+</span> <span class=\"token string\">', '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>first_name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 虚拟属性'lifespan'：作者寿命</span>\nAuthorSchema\n  <span class=\"token punctuation\">.</span><span class=\"token function\">virtual</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lifespan'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>date_of_death<span class=\"token punctuation\">.</span><span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>date_of_birth<span class=\"token punctuation\">.</span><span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 虚拟属性'url'：作者 URL</span>\nAuthorSchema\n  <span class=\"token punctuation\">.</span><span class=\"token function\">virtual</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'/catalog/author/'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 导出 Author 模型</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Author'</span><span class=\"token punctuation\">,</span> AuthorSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>我们还为 <code>AuthorSchema</code> 声明了一个 \"<code>url</code>\" 虚拟属性，以返回模型特定实例的绝对 URL。在模板中需要获取特定作者的链接时可使用该属性。</p>\n<div class=\"notecard note\" id=\"sect16\">\n  <p>\n    <strong>备注：</strong> 有必要将 URL 声明为虚拟属性，因为这样，项目的 URL 就只需在一处进行更改。\n    此时，使用此 URL 的链接还不能工作，因为目前还没有设置任何路由，无法处理特定模型实例的代码。这个问题下节再讲。\n  </p>\n</div>\n<p>模块的最后对模型进行导出。</p>"}},{"type":"prose","value":{"id":"藏书模型（book）","title":"藏书模型（Book）","isH3":true,"content":"<p>将下方的 <code>Book</code> 模式代码复制粘贴至 <strong>./models/book.js</strong> 文件中。大体结构与作者模型相似，有三个字符串字段，一个用于获取特定藏书记录 URL 的虚拟属性，代码最后对模型进行导出。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> BookSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token string\">'Author'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">summary</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">isbn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">genre</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token string\">'Genre'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 虚拟属性'url'：藏书 URL</span>\nBookSchema\n  <span class=\"token punctuation\">.</span><span class=\"token function\">virtual</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'/catalog/book/'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 导出 Book 模块</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Book'</span><span class=\"token punctuation\">,</span> BookSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>主要区别在于：此处有两个字段是对其他模型的引用（黑体字所示）：</p>\n<ul>\n  <li><code>author</code> 是对单一 <code>Author</code> 模型对象的引用，并且是必需的。</li>\n  <li><code>genre</code> 是对 <code>Genre</code> 模型（目前尚未声明）对象数组的引用。</li>\n</ul>"}},{"type":"prose","value":{"id":"藏书副本模型（bookinstance）","title":"藏书副本模型（BookInstance）","isH3":true,"content":"<p>最后将 <code>BookInstance</code> 模式代码复制粘贴至 <strong>./models/bookinstance.js</strong> 文件中。 <code>BookInstance</code> 表示可供借阅的藏书的特定副本，其中包含该副本是否可用、还书期限，“出版批次”或版本详细信息。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> BookInstanceSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 指向相关藏书的引用</span>\n    <span class=\"token literal-property property\">book</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token string\">'Book'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 出版项</span>\n    <span class=\"token literal-property property\">imprint</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">enum</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Available'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Maintenance'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Loaned'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Reserved'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">'Maintenance'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">due_back</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 虚拟属性'url'：藏书副本 URL</span>\nBookInstanceSchema\n  <span class=\"token punctuation\">.</span><span class=\"token function\">virtual</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'/catalog/bookinstance/'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 导出 BookInstancec 模型</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'BookInstance'</span><span class=\"token punctuation\">,</span> BookInstanceSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>以上代码有点儿新东西，即字段选项（黑体字）：</p>\n<ul>\n  <li><code>enum</code>：可以设置字符串允许的值。本例中可指定书籍的状态。（使用枚举可以避免状态中出现错误拼写或不允许的值）</li>\n  <li><code>default</code>：用默认值可以设定新 ​ 建藏书实例的默认状态（为'馆藏维护'），还可以将默认还书期限（<code>due_back</code>）日期设置为今天（<code>now</code>）。（设置日期时请注意 <code>Date</code> 函数的用法！）</li>\n</ul>\n<p>其他内容和之前的模式大同小异。</p>"}},{"type":"prose","value":{"id":"图书种类模型（genre）——挑战自我！","title":"图书种类模型（Genre）——挑战自我！","isH3":true,"content":"<p>打开 <strong>./models/genre.js</strong> 文件，并创建一个模式来存储 <code>Genre</code>（书本的类别，例如它是小说类还是纪实类，是爱情题材还是军事史题材，等）。</p>\n<p>与之前模型的定义方式相似：</p>\n<ul>\n  <li>该模型应该有一个 <code>String</code> 模式类型，命名为 <code>name</code> ，用来描述图书种类。</li>\n  <li><code>name</code> 字段应该是必需的，并且有 3 到 ​ ​100 个字符。</li>\n  <li>声明一个 <a href=\"#%E8%99%9A%E6%8B%9F%E5%B1%9E%E6%80%A7\">虚拟属性</a>，命名为 <code>url</code>，返回图书类型 URL。</li>\n  <li>导出模型。</li>\n</ul>"}},{"type":"prose","value":{"id":"测试——添加项目","title":"测试——添加项目","isH3":false,"content":"<p>好了，现在所有模型已准备完毕。</p>\n<p>为了测试这些模型（并添加一些示例藏书和项目，以便后续使用），我们来运行一个单独的脚本来为每种类型创建一些项目：</p>\n<ol>\n  <li>下载（或新建）文件 <a href=\"https://raw.githubusercontent.com/mdn/express-locallibrary-tutorial/master/populatedb.js\" class=\"external\" rel=\" noopener\">populatedb.js</a>，保存在 express-locallibrary-tutorial 目录（<code>package.json</code> 所在位置） 。\n    <div class=\"notecard note\" id=\"sect17\">\n      <p><strong>备注：</strong> 无需深究 <a href=\"https://raw.githubusercontent.com/mdn/express-locallibrary-tutorial/master/populatedb.js\" class=\"external\" rel=\" noopener\">populatedb.js</a>，它只是为数据库添加一些示例数据。</p>\n      <p>译注：针对 node.js3.0 及以后版本，mlab 使用“mongodb+srv://”链接而非“mongodb://”，请对<a href=\"https://raw.githubusercontent.com/mdn/express-locallibrary-tutorial/master/populatedb.js\" class=\"external\" rel=\" noopener\">populatedb.js</a>源码酌情修改，否则会报错而添加数据失败。</p>\n    </div>\n  </li>\n  <li>在项目根目录运行以下命令，以安装脚本所需的异步模块（后续教程再展开讲）\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> async\n</code></pre></div>\n  </li>\n  <li>在命令提示符下用 node 运行此脚本，并以 MongoDB 数据库的 URL 作为参数（同 <code>app.js</code> 中替换 <code>insert_your_database_url_here</code> 占位符的 URL）：\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">node</span> populatedb <span class=\"token operator\">&lt;</span>mongodb url<span class=\"token operator\">&gt;</span>​​​​\n</code></pre></div>\n  </li>\n  <li>该脚本应一路运行至完成，并在终端中记录所创建的项目。</li>\n</ol>\n<div class=\"notecard note\" id=\"sect18\">\n  <p><strong>备注：</strong> 打开 <a href=\"https://mlab.com/home\" class=\"external\" rel=\" noopener\">mLab</a> 数据库主页面，现在藏书、作者、种类和藏书副本的集合应该都可以打开了，也可以查看单个文档。</p>\n</div>"}},{"type":"prose","value":{"id":"小结","title":"小结","isH3":false,"content":"<p>本节介绍了数据库和 ORM（Node/Express 环境）的一些知识，以及定义 Mongoose 模式与模型的方法。随后为 LocalLibrary 网站设计并实现了 <code>Book</code>、<code>BookInstance</code>、<code>Author</code>、<code>Genre</code> 模型。</p>\n<p>本文最后（使用独立运行的脚本）创建了一些测试实例。下一节将关注如何创建页面以显示这些对象。</p>"}},{"type":"prose","value":{"id":"另请参阅","title":"另请参阅","isH3":false,"content":"<ul>\n  <li><a href=\"http://expressjs.com.cn/guide/database-integration.html\" class=\"external\" rel=\" noopener\">数据库集成</a> (Express 文档)</li>\n  <li><a href=\"http://mongoosejs.com/\" class=\"external\" rel=\" noopener\">Mongoose 站点</a> (Mongoose 文档)</li>\n  <li><a href=\"http://mongoosejs.com/docs/guide.html\" class=\"external\" rel=\" noopener\">Mongoose 指南</a> (Mongoose 文档)</li>\n  <li><a href=\"http://mongoosejs.com/docs/validation.html\" class=\"external\" rel=\" noopener\">验证</a> (Mongoose 文档)</li>\n  <li><a href=\"http://mongoosejs.com/docs/schematypes.html\" class=\"external\" rel=\" noopener\">模式类型</a> (Mongoose 文档)</li>\n  <li><a href=\"http://mongoosejs.com/docs/models.html\" class=\"external\" rel=\" noopener\">模型</a> (Mongoose 文档)</li>\n  <li><a href=\"http://mongoosejs.com/docs/queries.html\" class=\"external\" rel=\" noopener\">查询</a> (Mongoose 文档)</li>\n  <li><a href=\"http://mongoosejs.com/docs/populate.html\" class=\"external\" rel=\" noopener\">填充</a> (Mongoose 文档)</li>\n</ul><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website\"> 上一页 </a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs\"> Overview: Express Nodejs</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/routes\"> 下一页  </a></li>\n</ul>"}},{"type":"prose","value":{"id":"本章目录","title":"本章目录","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Introduction\">Express/Node 入门</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/development_environment\">设置 Node（Express）开发环境</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website\">Express 教程：本地图书馆网站</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">Express 教程 2：创建站点框架</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/mongoose\" aria-current=\"page\">Express 教程 3：使用数据库（Mongoose）</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/routes\">Express 教程 4：路由和控制器</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express 教程 5：显示图书馆数据</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/forms\">Express 教程 6：使用表单</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/deployment\">Express 教程 7：部署至生产环境</a></li>\n</ul>"}}],"toc":[{"text":"概览","id":"概览"},{"text":"设计 LocalLibrary 模型","id":"设计_locallibrary_模型"},{"text":"Mongoose 入门","id":"mongoose_入门"},{"text":"架设 MongoDB 数据库","id":"架设_mongodb_数据库"},{"text":"安装 Mongoose","id":"安装_mongoose"},{"text":"连接到 MongoDB","id":"连接到_mongodb_2"},{"text":"定义 LocalLibrary 模式","id":"定义_locallibrary_模式"},{"text":"测试——添加项目","id":"测试——添加项目"},{"text":"小结","id":"小结"},{"text":"另请参阅","id":"另请参阅"},{"text":"本章目录","id":"本章目录"}],"summary":"本文简要介绍了数据库以及 Node/Express 应用的数据库集成。然后演示了 Mongoose 为 LocalLibrary 提供数据库访问的方式。还讲解了对象模式（Schema）和模型（Model）的声明方式、主要域的类型、基础验证机制。同时还简短演示了访问模型数据的一些方法。","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Express Tutorial Part 3: Using a Database (with Mongoose)","locale":"en-US","native":"English (US)"},{"title":"Express チュートリアル Part 3: データベースの使用 (Mongoose を使用)","locale":"ja","native":"日本語"},{"title":"Express Tutorial Part 3: Using a Database (with Mongoose)","locale":"ko","native":"한국어"},{"title":"Tutorial Express Parte 3: Usando um banco de dados (com Mongoose)","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Учебник Express часть 3: Использование базы данных (с помощью Mongoose)","locale":"ru","native":"Русский"},{"title":"Express 教學 3: 使用資料庫 ( Mongoose)","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/learn/server-side/express_nodejs/mongoose","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/learn/server-side/express_nodejs/mongoose/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Learn","title":"学习 Web 开发"},{"uri":"/zh-CN/docs/Learn/Server-side","title":"服务器端网页编程"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs","title":"Express Web Framework (Node.js/JavaScript)"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/mongoose","title":"Express 教程 3：使用数据库  (Mongoose)"}],"pageTitle":"Express 教程 3：使用数据库  (Mongoose) - 学习 Web 开发 | MDN","noIndexing":false}}