{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"作者清单面页、分类清单页面、与自我挑战","mdn_url":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Author_list_page","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>作者列表页面，需要呈现数据库中所有作者的列表，有每位作者的名字，并连结到作者详细内容页面。出生与死亡日期应该在名字后面，并且在同一列。</p>"}},{"type":"prose","value":{"id":"控制器","title":"控制器","isH3":false,"content":"<p>作者列表控制器函数，需要获取所有作者实例的列表，然后将这些实例传递给模板进行渲染。</p>\n<p>打开**/controllers/authorController.js**。在文件顶部附近，找到导出的<code>author_list()</code> 控制器方法，并将其替换为以下代码（更改后的代码以粗体显示）。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Display list of all Authors.</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">author_list</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  Author<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'family_name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ascending'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> list_authors</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">//Successful, so render</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'author_list'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Author List'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">author_list</span><span class=\"token operator\">:</span> list_authors <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>该方法使用模型的 <code>find()</code>, <code>sort()</code> 和 <code>exec()</code> 函数，以返回所有<code>Author</code>对象，并按<code>family_name</code>的字母顺排列。传递给<code>exec()</code>方法的回调被调用，并将传入任何错误（或<code>null</code>）作为第一个参数，或者成功时，传入所有作者列表。如果出现错误，则调用带有错误值的下一个中间件函数，如果没有错误，则呈现 <strong>author_list</strong>（.pug）模板，传递页面标题<code>title，</code>和作者列表（<code>author_list</code>）。</p>"}},{"type":"prose","value":{"id":"视图","title":"视图","isH3":false,"content":"<p>打开 <strong>/views/author_list.pug</strong> ，用底下文字取代它的内容。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">extends</span> <span class=\"token class-name\">layout</span>\n\nblock content\n  h1<span class=\"token operator\">=</span> title\n\n  ul\n  each author <span class=\"token keyword\">in</span> author_list\n    li\n      <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>href<span class=\"token operator\">=</span>author<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span> #<span class=\"token punctuation\">{</span>author<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>#<span class=\"token punctuation\">{</span>author<span class=\"token punctuation\">.</span>date_of_birth<span class=\"token punctuation\">}</span> <span class=\"token operator\">-</span> #<span class=\"token punctuation\">{</span>author<span class=\"token punctuation\">.</span>date_of_death<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">else</span>\n    li There are no authors<span class=\"token punctuation\">.</span>\n</code></pre></div>\n<p>如同我们其它的模板，上面视图也依照着同样的模式。</p>"}},{"type":"prose","value":{"id":"它看起來像是？","title":"它看起來像是？","isH3":false,"content":"<p>运行本应用，并打开浏览器访问 <a href=\"http://localhost:3000/\" class=\"external\" rel=\" noopener\">http://localhost:3000/</a> 。然后选择所有作者 All authors 连结。如果每个东西都设定正确了，页面看起来应该像底下的截图。</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Author_list_page/locallibary_express_author_list.png\" alt=\"Author List Page - Express Local Library site\" width=\"1474\" height=\"557\" loading=\"lazy\">\n</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 作者生命日期的外观是丑陋的！您可以使用我们用于<code>BookInstance</code> 列表的<a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data#date_formatting\">相同方法</a>（将生命周期的虚拟属性，添加到 <code>Author</code> 模型），来改进此方法。</p>\n  <p>但是，这次缺少日期，除非严格模式生效，否则将忽略对不存在的属性的引用。<code>moment()</code>返回当前时间，并且您不希望将缺少的日期格式化为就像今天一样。</p>\n  <p>解决此问题的一种方法，是定义返回格式化日期的函数内容，以便返回空字符串，除非日期实际存在。例如：</p>\n  <p><code>return this.date_of_birth ? moment(this.date_of_birth).format('YYYY-MM-DD') : '';</code></p>\n</div>"}},{"type":"prose","value":{"id":"种类列表页面—自我挑战！","title":"种类列表页面—自我挑战！","isH3":false,"content":"<p>在这个部分，你应该实作你自己的种类列表页面。该页面应显示数据库中所有种类的列表，每个种类都链接到其关联的详细信息页面。预期结果的屏幕截图如下所示。</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Author_list_page/locallibary_express_genre_list.png\" alt=\"Genre List - Express Local Library site\" width=\"657\" height=\"379\" loading=\"lazy\">\n</p>\n<p>种类列表控制器功能，需要获取所有种类实例的列表，然后将这些实例传递给模板进行渲染。</p>\n<ol>\n  <li>您需要在 <strong>/controllers/genreController.js</strong> 中编辑<code>genre_list()</code>。</li>\n  <li>实现方式几乎与<code>author_list()</code>控制器完全相同。\n    <ul>\n      <li>按名称以上升顺序，对结果进行排序。</li>\n    </ul>\n  </li>\n  <li>要呈现的模板，应命名为 <strong>genre_list.pug</strong>。</li>\n  <li>要呈现的模板应该传递变量<code>title</code>（'Genre List'）和种类列表<code>genre_list</code>（从<code>Genre.find()</code>回调返回）。</li>\n  <li>该视图应与上面的屏幕截图/要求相匹配（这应该与作者列表视图具有非常相似的结构/格式，除了种类没有日期）。</li>\n</ol>"}},{"type":"prose","value":{"id":"下一步","title":"下一步","isH3":false,"content":"<p>回到 <a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express 教程 5: 呈现图书馆数据</a></p>\n<p>继续教程 5 下一個部分：<a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Genre_detail_page\">种类细节页面</a></p>"}}],"toc":[{"text":"控制器","id":"控制器"},{"text":"视图","id":"视图"},{"text":"它看起來像是？","id":"它看起來像是？"},{"text":"种类列表页面—自我挑战！","id":"种类列表页面—自我挑战！"},{"text":"下一步","id":"下一步"}],"summary":"作者列表页面，需要呈现数据库中所有作者的列表，有每位作者的名字，并连结到作者详细内容页面。出生与死亡日期应该在名字后面，并且在同一列。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Author list page and Genre list page challenge","locale":"en-US","native":"English (US)"},{"title":"著者リストページとジャンルリストページのチャレンジ","locale":"ja","native":"日本語"},{"title":"Список авторов. Тест - список жанров","locale":"ru","native":"Русский"},{"title":"Author list page and Genre list page challenge","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/learn/server-side/express_nodejs/displaying_data/author_list_page","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/learn/server-side/express_nodejs/displaying_data/author_list_page/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Learn","title":"学习 Web 开发"},{"uri":"/zh-CN/docs/Learn/Server-side","title":"服务器端网页编程"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs","title":"Express Web Framework (Node.js/JavaScript)"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data","title":"Express 教程 5: 呈现图书馆数据"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Author_list_page","title":"作者清单面页、分类清单页面、与自我挑战"}],"pageTitle":"作者清单面页、分类清单页面、与自我挑战 - 学习 Web 开发 | MDN","noIndexing":false}}