{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"主页","mdn_url":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Home_page","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>我们创建的第一个页面，是网站的主页面，可以从网站的根目录 (<code>'/'</code>) ，或者 catalog 的根目录 (<code>catalog/</code>) 访问。这将呈现一些网站的静态文字描述，以及动态计算数据库中不同记录类型的“计数”。</p>\n<p>我们已经为主页创建了一个路由。为了完成页面，我们需要更新控制器函数，以从数据库中提取记录的“计数”，并创建一个可用于呈现页面的视图（模板）。</p>"}},{"type":"prose","value":{"id":"路由","title":"路由","isH3":false,"content":"<p>在 <a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/routes\">前面的教程</a>，我们创建 index 页面路由。此处要提醒的是，所有的路由函式，都定义在 <strong>/routes/catalog.js</strong>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// GET catalog home page.</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> book_controller<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//This actually maps to /catalog/ because we import the route with a /catalog prefix</span>\n</code></pre></div>\n<p>在 <strong>/controllers/bookController.js</strong> 中，定义回调函数参数 (<code>book_controller.index</code>) ：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">index</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Site Home Page'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>我们扩展这个控制器函数，以从我们的模型获取信息，然后使用模板（视图）渲染它。</p>"}},{"type":"prose","value":{"id":"控制器","title":"控制器","isH3":false,"content":"<p>索引控制器函数需要获取以下有关信息，即数据库中有多少<code>Book</code>，<code>BookInstance</code>，可用的<code>BookInstance</code>，<code>Author</code>和<code>Genre</code>记录，将这些数据渲染到模板中，以创建 HTML 页面，然后将其返回到 HTTP 响应中。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 我们使用<a href=\"http://mongoosejs.com/docs/api.html#model_Model.count\" class=\"external\" rel=\" noopener\"><code>count()</code></a> 方法来获取每个模型的实例数量。这在具有一组可选条件的模型上进行调用，以匹配第一个参数，而回调放在第二个参数（如<a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/mongoose\">使用数据库</a><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/mongoose\">(Mongoose)</a>）中讨论的那样，并且还可以返回 <code>Query</code> ，然后稍后以回调执行它。当数据库返回计数时，将返回该回调，并将错误值（或空值<code>null</code>）作为第一个参数，并将记录计数（如果存在错误，则返回 null）作为第二个参数。</p>\n  <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>SomeModel<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a_model_field</span><span class=\"token operator\">:</span> <span class=\"token string\">'match_value'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// ... do something if there is an err</span>\n <span class=\"token comment\">// ... do something with the count if there was no error</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</div>\n<p>打开 <strong>/controllers/bookController.js</strong>. 在文件顶部附近，您应该看到导出的 <code>index()</code> 函数。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code>var Book <span class=\"token operator\">=</span> require<span class=\"token punctuation\">(</span><span class=\"token string\">'../models/book'</span><span class=\"token punctuation\">)</span>\n\nexports<span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> function<span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n res<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">'NOT IMPLEMENTED: Site Home Page'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>用以下代码片段替换上面的所有代码。这要做的第一件事，是导入 (<code>require()</code>) 所有模型（以粗体突出高亮显示）。我们需要这样做，是因为我们将使用它们来获取记录的计数。然后它会导入异步模块 <em>async</em>。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> Book <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/book'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> Author <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/author'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> Genre <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/genre'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> BookInstance <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/bookinstance'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> async <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">index</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    async<span class=\"token punctuation\">.</span><span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">book_count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Book<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Pass an empty object as match condition to find all documents of this collection</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">book_instance_count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            BookInstance<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">book_instance_available_count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            BookInstance<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span><span class=\"token string\">'Available'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">author_count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Author<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">genre_count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Genre<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Local Library Home'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> err<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> results <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>async.parallel()</code> 方法传递一个对象，其中包含用于获取每个模型计数的函数。这些函数都是在同一时间开始的。当这些函数全部完成时，最终回调将与结果参数中的计数（或错误）一起被调用。</p>\n<p>成功时，回调函数调用 <a href=\"https://expressjs.com/en/4x/api.html#res.render\" class=\"external\" rel=\" noopener\"><code>res.render()</code></a>，指定名为 '<strong>index</strong>' 的视图（模板），以及一个对象包含了要插入其中的数据（这包括我们模型计数的结果对象）。数据以键值对的形式提供，可以使用键在模板中访问。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 上面的<code>async.parallel()</code>裡的回调函数有点不寻常，因为不管是否出现错误，我们都会渲染页面（通常您可能使用单独的执行路径来处理错误的显示）。</p>\n</div>"}},{"type":"prose","value":{"id":"视图","title":"视图","isH3":false,"content":"<p>打开 <strong>/views/index.pug</strong>，并用底下文字取代它的内容。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">extends</span> <span class=\"token class-name\">layout</span>\n\nblock content\n  h1<span class=\"token operator\">=</span> title\n  p Welcome to #<span class=\"token punctuation\">[</span>em LocalLibrary<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a very basic Express website developed <span class=\"token keyword\">as</span> a tutorial example on the Mozilla Developer Network<span class=\"token punctuation\">.</span>\n\n  h1 Dynamic content\n\n  <span class=\"token keyword\">if</span> error\n    p Error getting dynamic content<span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">else</span>\n    p The library has the following record counts<span class=\"token operator\">:</span>\n\n    ul\n      li #<span class=\"token punctuation\">[</span>strong Books<span class=\"token operator\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>book_count<span class=\"token punctuation\">}</span>\n      li #<span class=\"token punctuation\">[</span>strong Copies<span class=\"token operator\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>book_instance_count<span class=\"token punctuation\">}</span>\n      li #<span class=\"token punctuation\">[</span>strong Copies available<span class=\"token operator\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>book_instance_available_count<span class=\"token punctuation\">}</span>\n      li #<span class=\"token punctuation\">[</span>strong Authors<span class=\"token operator\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>author_count<span class=\"token punctuation\">}</span>\n      li #<span class=\"token punctuation\">[</span>strong Genres<span class=\"token operator\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>genre_count<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>这个视图很简单。我们扩展了 <strong>layout.pug</strong> 基本模板，覆盖了名为 '<strong>content</strong>' 的模块 <code>block</code>。第一个<code>h1</code>标题，将是传递给<code>render()</code>函数的<code>title</code> 变量的转义文本 — 请注意 '<code>h1=</code>' 的使用方式，将使得接下來的文本，被视为 JavaScript 表达式。然后我们放入一个介绍本地图书馆的段落。</p>\n<p>在动态内容标题下，我们检查从<code>render()</code>函数传入的错误变量，是否已定义。如果是这样，我们列出这个错误。如果不是，我们从<code>data</code>变量中，获取并列出每个模型的副本数量。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 我们没有转义计数值 (i.e. 我们使用 <code>!{}</code> 语法) ，因为计数值已经被计算过了。如果信息是由终端用户提供的，那么我们就会转义該变量，以用于显示。</p>\n</div>"}},{"type":"prose","value":{"id":"它看起来像是？","title":"它看起来像是？","isH3":false,"content":"<p>此处，我们应该已经创建了呈现 index 页面，所需要的每样东西。运行本地图书馆应用，并打开浏览器访问 <a href=\"http://localhost:3000/\" class=\"external\" rel=\" noopener\">http://localhost:3000/</a>。如果每样东西都设定正确了，你的网站看起来应该像底下的截图。</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Home_page/locallibary_express_home.png\" alt=\"Home page - Express Local Library site\" width=\"1105\" height=\"486\" loading=\"lazy\">\n</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>备注：</strong> 您将无法使用侧边栏链接，因为这些网页的网址，视图和模板尚未定义。例如，如果您尝试，取决于您点击的链接，您将获取“尚未实作：图书清单”等错误。在“控制器”文件中的不同控制器中，會指定这些字符串文字（将被合适的数据替换）。</p>\n</div>"}},{"type":"prose","value":{"id":"下一步","title":"下一步","isH3":false,"content":"<ul>\n  <li>回到 <a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express 教程 5: 呈现图书馆数据</a></li>\n  <li>继续教程 5 下個部分：<a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Book_list_page\">书本列表页面</a></li>\n</ul>"}}],"toc":[{"text":"路由","id":"路由"},{"text":"控制器","id":"控制器"},{"text":"视图","id":"视图"},{"text":"它看起来像是？","id":"它看起来像是？"},{"text":"下一步","id":"下一步"}],"summary":"我们创建的第一个页面，是网站的主页面，可以从网站的根目录 ('/') ，或者 catalog 的根目录 (catalog/) 访问。这将呈现一些网站的静态文字描述，以及动态计算数据库中不同记录类型的“计数”。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Home page","locale":"en-US","native":"English (US)"},{"title":"ホームページ","locale":"ja","native":"日本語"},{"title":"Home page","locale":"ru","native":"Русский"},{"title":"主頁","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/learn/server-side/express_nodejs/displaying_data/home_page","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/learn/server-side/express_nodejs/displaying_data/home_page/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Learn","title":"学习 Web 开发"},{"uri":"/zh-CN/docs/Learn/Server-side","title":"服务器端网页编程"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs","title":"Express Web Framework (Node.js/JavaScript)"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data","title":"Express 教程 5: 呈现图书馆数据"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Home_page","title":"主页"}],"pageTitle":"主页 - 学习 Web 开发 | MDN","noIndexing":false}}