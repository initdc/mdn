{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"书本列表页面","mdn_url":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Book_list_page","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>接下做我们将实作书本列表页面。这个页面需要呈现数据库中所有书本的列表，包含每本书的作者、标题，标题将成为一个超连结，连到书本详细内容页面。</p>"}},{"type":"prose","value":{"id":"控制器","title":"控制器","isH3":false,"content":"<p>书本列表控制器函数，需要获取数据库中所有<code>Book</code>对象的列表，然后将这些对象传给模板进行呈现。</p>\n<p>打开 <strong>/controllers/bookController.js</strong>. 找到导出的 <code>book_list()</code> 控制器方法，并替换為下面的代码。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Display list of all Books.</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">book_list</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  Book<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'title author'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'author'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> list_books</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">//Successful, so render</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'book_list'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Book List'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">book_list</span><span class=\"token operator\">:</span> list_books <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>该方法使用模型的<code>find()</code>函数返回所有<code>Book</code>对象，选择仅返回标题<code>title</code>和作者<code>author</code>，因为我们不需要其他字段（它也会返回<code>_id</code>和虚拟字段）。这里我们还调用<code>Book</code>上的<code>populate()</code> ，指定作者<code>author</code>字段 — 这将用完整的作者信息，替换存储的书本作者 id。</p>\n<p>成功时，传递给查询的回调，将呈现 <strong>book_list</strong>(.pug) 模板，将标题<code>title</code>和<code>book_list</code>（包含作者的書本列表）作为变量传递。</p>"}},{"type":"prose","value":{"id":"视图","title":"视图","isH3":false,"content":"<p>创建 <strong>/views/book_list.pug</strong> 并复制底下的文字。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">extends</span> <span class=\"token class-name\">layout</span>\n\nblock content\n  h1<span class=\"token operator\">=</span> title\n\n  ul\n  each book <span class=\"token keyword\">in</span> book_list\n    li\n      <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>href<span class=\"token operator\">=</span>book<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span> #<span class=\"token punctuation\">{</span>book<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>#<span class=\"token punctuation\">{</span>book<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">else</span>\n    li There are no books<span class=\"token punctuation\">.</span>\n</code></pre></div>\n<p>這个视图扩展了 <strong>layout.pug</strong> 基本模板，并覆盖了名为 '<strong>content</strong>' 的區块 <code>block</code> 。它显示我们从控制器传入的标题<code>title</code>（通过<code>render()</code>方法），然后使用<code>each</code>-<code>in</code>-<code>else</code>语法，遍历<code>book_list</code>变量。为每本图书创建一个列表项，以显示书名，并作为书的详细信息页面的链接，后面跟着作者姓名。如果<code>book_list</code>中没有书，则执行<code>else</code>子句，并显示文字“没有书” 'There are no books.'。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 我们使用 <code>book.url</code> ，为每本书提供详细记录链接（我们已经实现了此路由，但尚未实现此页面）。这是 <code>Book</code> 模型的一个虚拟属性，它使用模型实例的 <code>_id</code> 字段，生成唯一的 URL 路径。</p>\n</div>\n<p>在这里，我們感兴趣的是，每本书被定义为两行，第二行使用管道（上面高亮显示）。这种方法是必要的，因为如果作者姓名位于上一行，那么它将成为超链接的一部分。</p>"}},{"type":"prose","value":{"id":"它看起來像是？","title":"它看起來像是？","isH3":false,"content":"<p>运行本应用 (参见 <a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/routes#testing_the_routes\">测试路由</a> 有相关的命令) ，并打开你的浏览器，访问 <a href=\"http://localhost:3000/\" class=\"external\" rel=\" noopener\">http://localhost:3000/</a>。然后选择 所有书本 连结。如果每样东西都设定正确了，你的网站看起来应该像底下的截图。</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Book_list_page/new_book_list.png\" alt=\"Book List Page - Express Local Library site\" width=\"752\" height=\"257\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"下一步","title":"下一步","isH3":false,"content":"<ul>\n  <li>回到 <a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express 教程 5: 呈现图书馆数据</a></li>\n  <li>继续教程 5 下个部分：<a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data/BookInstance_list_page\">书本实例列表页面</a></li>\n</ul>"}}],"toc":[{"text":"控制器","id":"控制器"},{"text":"视图","id":"视图"},{"text":"它看起來像是？","id":"它看起來像是？"},{"text":"下一步","id":"下一步"}],"summary":"接下做我们将实作书本列表页面。这个页面需要呈现数据库中所有书本的列表，包含每本书的作者、标题，标题将成为一个超连结，连到书本详细内容页面。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Book list page","locale":"en-US","native":"English (US)"},{"title":"ブックリストページ","locale":"ja","native":"日本語"},{"title":"Страница списка книг","locale":"ru","native":"Русский"},{"title":"書本清單頁面","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/learn/server-side/express_nodejs/displaying_data/book_list_page","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/learn/server-side/express_nodejs/displaying_data/book_list_page/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Learn","title":"学习 Web 开发"},{"uri":"/zh-CN/docs/Learn/Server-side","title":"服务器端网页编程"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs","title":"Express Web Framework (Node.js/JavaScript)"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data","title":"Express 教程 5: 呈现图书馆数据"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Book_list_page","title":"书本列表页面"}],"pageTitle":"书本列表页面 - 学习 Web 开发 | MDN","noIndexing":false}}