{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"模板入门","mdn_url":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Template_primer","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>模板是一个文字档，定义了一个输出档的结构或者排版，使用定位符号表示，当模板被绘制时，资料将插入到何处（在 Express，模板被称为视图）。</p>"}},{"type":"prose","value":{"id":"express_模板选择","title":"Express 模板选择","isH3":false,"content":"<p>Express 可以与许多不同的<a href=\"https://expressjs.com/en/guide/using-template-engines.html\" class=\"external\" rel=\" noopener\">模板渲染引擎</a>一起使用。在本教程中，我们使用<a href=\"https://pugjs.org/api/getting-started.html\" class=\"external\" rel=\" noopener\">Pug</a>（以前称为 Jade）作为模板。这是最流行的 Node 模板语言，并且官方将自身描述为“用于编写 HTML，语法干净且空格敏感，受 <a href=\"http://haml.info/\" class=\"external\" rel=\" noopener\">Haml</a>影响很大”。</p>\n<p>不同的模板语言使用不同的方法，来定义布局和标记数据的占位符 — 一些使用 HTML 来定义布局，而另一些则使用可以编译为 HTML 的不同标记格式。Pug 是第二种类型；它使用 HTML 的表示形式，其中任何行中的第一个单词，通常表示 HTML 元素，后续行中的缩进，用于表示嵌套在这些元素中的任何内容。结果是一个页面定义直接转换为 HTML，但可以说更简洁，更容易阅读。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 使用 Pug 的缺点，是它对缩进和空格敏感（如果在错误的位置添加额外的空格，可能会得到没什么帮助的错误代码）。但是，一旦您的模板到位，它们就很容易阅读和维护。</p>\n</div>"}},{"type":"prose","value":{"id":"模板组态","title":"模板组态","isH3":false,"content":"<p>在我们<a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">创建骨架网站</a>时，LocalLibrary 配置为使用 <a href=\"https://pugjs.org/api/getting-started.html\" class=\"external\" rel=\" noopener\">Pug</a>。您应该看到 Pug 模块作为依赖项，包含在网站的 <strong>package.json</strong>文件中，以及 <strong>app.js</strong>文件中的以下配置设置。设置告诉我们，使用 Pug 作为视图引擎，Express 应该在 <strong>/views</strong>子目录中搜索模板。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// View engine setup.</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'views'</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'views'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'view engine'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pug'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>如果查看 views 目录，您将看到项目默认视图的 .pug 文件。这包括需要用自己的内容替换的主页（<strong>index.pug</strong>）和基本模板（<strong>layout.pug</strong>）的视图。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">/express-locallibrary-tutorial  //the project root\n  /views\n    error.pug\n    index.pug\n    layout.pug\n</pre></div>"}},{"type":"prose","value":{"id":"模板语法","title":"模板语法","isH3":false,"content":"<p>下面的示例模板文件，展示了许多 Pug 最有用的功能。</p>\n<p>首先要注意的是，该文件映射典型 HTML 文件的结构，其中（几乎）每一行中的第一个单词是 HTML 元素，并且缩进用于指示嵌套元素。因此，例如，<code>body</code> 本文元素位于 <code>html</code> 元素内，而段落元素（<code>p</code>）位于 <code>body</code> 元素内等。非嵌套元素（例如，各个段落）位于不同的行上。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>doctype html\nhtml(lang=\"en\")\n  head\n    title= title\n    script(type='text/javascript').\n  body\n    h1= title\n\n    p This is a line with #[em some emphasis] and #[strong strong text] markup.\n    p This line has un-escaped data: !{'<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">&gt;</span></span> is emphasised<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">&gt;</span></span>'} and escaped data: #{'<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">&gt;</span></span> is not emphasised<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">&gt;</span></span>'}.\n      | This line follows on.\n    p= 'Evaluated and <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">&gt;</span></span>escaped expression<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">&gt;</span></span>:' + title\n\n    <span class=\"token comment\">&lt;!-- You can add HTML comments directly --&gt;</span>\n    // You can add single line JavaScript comments and they are generated to HTML comments\n    //- Introducing a single line JavaScript comment with \"//-\" ensures the comment isn't rendered to HTML\n\n    p A line with a link\n      a(href='/catalog/authors') Some link text\n      |  and some extra text.\n\n    #container.col\n      if title\n        p A variable named \"title\" exists.\n      else\n        p A variable named \"title\" does not exist.\n      p.\n        Pug is a terse and simple template language with a\n        strong focus on performance and powerful features.\n\n    h2 Generate a list\n\n    ul\n      each val in [1, 2, 3, 4, 5]\n        li= val\n</code></pre></div>\n<p>元素属性被定义在其关联元素之后的括号中。在括号内，属性定义在以逗号或空格分隔的属性名称和属性值对的列表中，例如：</p>\n<ul>\n  <li><code>script(type='text/javascript')</code>, <code>link(rel='stylesheet', href='/stylesheets/style.css')</code></li>\n  <li><code>meta(name='viewport' content='width=device-width initial-scale=1')</code></li>\n</ul>\n<p>所有属性的值都被转义（例如“<code>&gt;</code>”等字符转换为 HTML 代码等效项，如“<code>&amp;gt;</code>”），以防止注入 JavaScript 或跨站点脚本攻击。</p>\n<p>如果标记后跟着等号，则以下文本将被视为 JavaScript 表达式。因此，打个比方，在下面的第一行中，<code>h1</code>标记的内容将是标题变量<code>title</code>（在文件中定义，或从 Express 传递到模板中）。在第二行中，段落内容是与标题变量<code>title</code>连接的文本字符串。在这两种情况下，默认行为是转义该行。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>h1= title\np= 'Evaluated and <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">&gt;</span></span>escaped expression<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">&gt;</span></span>:' + title\n</code></pre></div>\n<p>如果标记后面没有等号，则将内容视为纯文本。在纯文本中，您可以使用<code>#{}</code> 和<code>!{}</code>语法，插入转义和非转义数据，如下所示。您还可以在纯文本中添加原始 HTML。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>p This is a line with #[em some emphasis] and #[strong strong text] markup.\np This line has an un-escaped string: !{'<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">&gt;</span></span> is emphasised<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">&gt;</span></span>'}, an escaped string: #{'<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">&gt;</span></span> is not emphasised<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">&gt;</span></span>'}, and escaped variables: #{title}.\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 您几乎总是希望转义来自用户的数据（通过 <strong><code>#{}</code></strong> 语法）。可信任的数据（例如，生成的记录计数等）可以不先转义就显示。</p>\n</div>\n<p>您可以在行的开头使用管道（“<strong>|</strong>”）字符来表示“<a href=\"https://pugjs.org/language/plain-text.html\" class=\"external\" rel=\" noopener\">纯文本</a>”。例如，下面显示的附加文本，将显示在与前一个锚点相同的行上，但不会链接。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>a(href='http://someurl/') Link text\n| Plain text\n</code></pre></div>\n<p>Pug 允许您使用<code>if</code>, <code>else</code> , <code>else if</code> 和 <code>unless</code>执行条件操作 - 例如：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>if title\n  p A variable named \"title\" exists\nelse\n  p A variable named \"title\" does not exist\n</code></pre></div>\n<p>以使用<code>each-in</code> 或 <code>while</code>语法执行循环/迭代操作。在下面的代码片段中，我们循环遍历数组，以显示变量列表（注意，使用 'li =' 来评估“val” ，以作为下面的变量。）迭代的值也可以传递给模板作为变量！</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>ul\n  each val in [1, 2, 3, 4, 5]\n    li= val\n</code></pre></div>\n<p>语法还支持注释（可以在输出中呈现 - 或者不是 - 可自行选择），支持 mixins 创建可重用的代码块，case 语句和许多其他功能。有关更多详细信息，请参阅<a href=\"https://pugjs.org/api/getting-started.html\" class=\"external\" rel=\" noopener\">Pug</a>文档。</p>"}},{"type":"prose","value":{"id":"扩展模板","title":"扩展模板","isH3":false,"content":"<p>在一个站点中，通常所有页面都有一个共同的结构，包括页首，页脚，导航等的标准 HTML 标记。比起强迫开发人员在每个页面中复制这个“样板”的做法，Pug 允许你声明一个基本模板，然后扩展它，只替换每个特定页面不同的地方。</p>\n<p>例如，在我们的<a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">骨架项目</a>中，创建的基本模板 <strong>layout.pug</strong>，如下所示：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>doctype html\nhtml\n  head\n    title= title\n    link(rel='stylesheet', href='/stylesheets/style.css')\n  body\n    block content\n</code></pre></div>\n<p>块标记<code>block</code>用于标记“可在派生模板中替换的内容部分“（如果未重新定义块，则使用其在基类中的实现）。</p>\n<p>默认的 <strong>index.pug</strong>（为我们的骨架项目所创建），显示了我们如何覆盖基本模板。<code>extends</code>标记，标识要使用的基本模板，然后我们使用 <code>block section_name</code> ，来指示我们将覆盖的部分的新内容。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>extends layout\n\nblock content\n  h1= title\n  p Welcome to #{title}\n</code></pre></div>"}},{"type":"prose","value":{"id":"下一步","title":"下一步","isH3":false,"content":"<ul>\n  <li>回到 <a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express 教程 5: 呈现图书馆数据</a></li>\n  <li>继续教程 5 下一个部分：<a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data/LocalLibrary_base_template\">图书馆基本模板</a></li>\n</ul>"}}],"toc":[{"text":"Express 模板选择","id":"express_模板选择"},{"text":"模板组态","id":"模板组态"},{"text":"模板语法","id":"模板语法"},{"text":"扩展模板","id":"扩展模板"},{"text":"下一步","id":"下一步"}],"summary":"模板是一个文字档，定义了一个输出档的结构或者排版，使用定位符号表示，当模板被绘制时，资料将插入到何处（在 Express，模板被称为视图）。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Template primer","locale":"en-US","native":"English (US)"},{"title":"テンプレートプライマー","locale":"ja","native":"日本語"},{"title":"Основы шаблонов","locale":"ru","native":"Русский"},{"title":"模板入門","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/learn/server-side/express_nodejs/displaying_data/template_primer","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/learn/server-side/express_nodejs/displaying_data/template_primer/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Learn","title":"学习 Web 开发"},{"uri":"/zh-CN/docs/Learn/Server-side","title":"服务器端网页编程"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs","title":"Express Web Framework (Node.js/JavaScript)"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data","title":"Express 教程 5: 呈现图书馆数据"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Template_primer","title":"模板入门"}],"pageTitle":"模板入门 - 学习 Web 开发 | MDN","noIndexing":false}}