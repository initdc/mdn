{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"书本实例列表页面","mdn_url":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data/BookInstance_list_page","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>接下来，我们将实作图书馆中所有书本实例 (<code>BookInstance</code>) 的列表页面。这个页面需要包含与每个 <code>BookInstance</code> (链接到其详细信息页面) 关联的书本 <code>Book</code> 标题，以及<code>BookInstance</code>模型中的其他信息，包含每个副本的状态，印记和唯一 ID。唯一 ID 的文字，应该链接到 <code>BookInstance</code> 详细信息页面。</p>"}},{"type":"prose","value":{"id":"控制器","title":"控制器","isH3":false,"content":"<p><code>BookInstance</code>列表控制器函数，需要获取所有书本实例的列表，填充关联的书本信息，然后将列表传递给模板以进行呈现。</p>\n<p>打开 <strong>/controllers/bookinstanceController.js</strong>。找到导出的 <code>bookinstance_list()</code> 控制器方法，并用以下代码替换它（更改后的代码以粗体显示）。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Display list of all BookInstances.</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">bookinstance_list</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  BookInstance<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'book'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> list_bookinstances</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// Successful, so render</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bookinstance_list'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Book Instance List'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">bookinstance_list</span><span class=\"token operator\">:</span> list_bookinstances <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>此方法使用模型的<code>find()</code>函数，返回所有<code>BookInstance</code>对象。然后它将一个调用，以菊花链方式连接到<code>populate()</code>，附加书本<code>book</code>字段，这将使用完整的<code>Book</code>文档，替换每个<code>BookInstance</code>存储的书本 ID。</p>\n<p>成功时，传递给查询的回调，会呈现 <strong>bookinstance_list</strong> (.pug) 模板，并将标题<code>title</code>和书籍实例列表<code>bookinstance_list</code>作为变量传递。</p>"}},{"type":"prose","value":{"id":"视图","title":"视图","isH3":false,"content":"<p>创建 <strong>/views/bookinstance_list.pug</strong> ，並複制貼上底下的文字。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">extends</span> <span class=\"token class-name\">layout</span>\n\nblock content\n  h1<span class=\"token operator\">=</span> title\n\n  ul\n  each val <span class=\"token keyword\">in</span> bookinstance_list\n    li\n      <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>href<span class=\"token operator\">=</span>val<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span> #<span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">.</span>book<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> #<span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">.</span>imprint<span class=\"token punctuation\">}</span> <span class=\"token operator\">-</span>\n      <span class=\"token keyword\">if</span> val<span class=\"token punctuation\">.</span>status<span class=\"token operator\">==</span><span class=\"token string\">'Available'</span>\n        span<span class=\"token punctuation\">.</span>text<span class=\"token operator\">-</span>success #<span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> val<span class=\"token punctuation\">.</span>status<span class=\"token operator\">==</span><span class=\"token string\">'Maintenance'</span>\n        span<span class=\"token punctuation\">.</span>text<span class=\"token operator\">-</span>danger #<span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span>\n        span<span class=\"token punctuation\">.</span>text<span class=\"token operator\">-</span>warning #<span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> val<span class=\"token punctuation\">.</span>status<span class=\"token operator\">!=</span><span class=\"token string\">'Available'</span>\n        <span class=\"token function\">span</span>  <span class=\"token punctuation\">(</span>Due<span class=\"token operator\">:</span> #<span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">.</span>due_back<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">else</span>\n    li There are no book copies <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span> library<span class=\"token punctuation\">.</span>\n</code></pre></div>\n<p>这个視图与其他視图非常相似。它扩展了布局，替换内容區块，显示从控制器传入的标题<code>title</code>，并遍历<code>bookinstance_list</code> 中的所有书籍副本。对于每个副本，我们都会显示它的状态（用颜色编码），如果书本不可用，则显示其预期返回日期。這裡引入了一个新功能 — 我们可以在标签之后使用点符号表示法，來指定一個类別。因此，<code>span.text-success</code> 将被编译为 <code>&lt;span class=\"text-success\"&gt;</code> (也可以用 Pug 编写为 <code>span(class=\"text-success\")</code>.</p>"}},{"type":"prose","value":{"id":"它看起來像是？","title":"它看起來像是？","isH3":false,"content":"<p>运行本应用，打开浏览器访问 <a href=\"http://localhost:3000/\" class=\"external\" rel=\" noopener\">http://localhost:3000/</a>，然后选择 All book-instances 连结。假如每个东西都设定正确了，你的网站看起来应该像是底下的截图。</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data/BookInstance_list_page/locallibary_express_bookinstance_list.png\" alt=\"BookInstance List Page - Express Local Library site\" width=\"1621\" height=\"435\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"下一步","title":"下一步","isH3":false,"content":"<ul>\n  <li>回到 <a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express 教程 5: 呈现图书馆数据</a></li>\n  <li>继续教程 5 下个部分：<a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Date_formatting_using_moment\">日期格式化与使用 moment</a></li>\n</ul>"}}],"toc":[{"text":"控制器","id":"控制器"},{"text":"视图","id":"视图"},{"text":"它看起來像是？","id":"它看起來像是？"},{"text":"下一步","id":"下一步"}],"summary":"接下来，我们将实作图书馆中所有书本实例 (BookInstance) 的列表页面。这个页面需要包含与每个 BookInstance (链接到其详细信息页面) 关联的书本 Book 标题，以及BookInstance模型中的其他信息，包含每个副本的状态，印记和唯一 ID。唯一 ID 的文字，应该链接到 BookInstance 详细信息页面。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"BookInstance list page","locale":"en-US","native":"English (US)"},{"title":"ブックインスタンスリストページ","locale":"ja","native":"日本語"},{"title":"Список экземпляров книг","locale":"ru","native":"Русский"},{"title":"書本實例清單頁面","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/learn/server-side/express_nodejs/displaying_data/bookinstance_list_page","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/learn/server-side/express_nodejs/displaying_data/bookinstance_list_page/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Learn","title":"学习 Web 开发"},{"uri":"/zh-CN/docs/Learn/Server-side","title":"服务器端网页编程"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs","title":"Express Web Framework (Node.js/JavaScript)"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data","title":"Express 教程 5: 呈现图书馆数据"},{"uri":"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data/BookInstance_list_page","title":"书本实例列表页面"}],"pageTitle":"书本实例列表页面 - 学习 Web 开发 | MDN","noIndexing":false}}