{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Django 教程 10: 测试 Django 网页应用","mdn_url":"/zh-CN/docs/Learn/Server-side/Django/Testing","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"\"><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web\"><strong>新手请从这开始！</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Web 入门</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web\">Web 概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/Installing_basic_software\">安装基本软件</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/What_will_your_website_look_like\">您的网站会是什么样？</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/Dealing_with_files\">处理文件</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/HTML_basics\">HTML 基础</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/CSS_basics\">CSS 基础</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript 基础</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/Publishing_your_website\">发布您的网站</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/How_the_Web_works\">Web 如何运作</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/zh-CN/docs/Learn/HTML\"><strong>HTML — 构建 Web</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>HTML 介绍</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML\">HTML 概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Getting_started\">HTML 入门</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML\">脑袋里是什么？HTML 中的元数据</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/HTML_text_fundamentals\">HTML 文字基础</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Creating_hyperlinks\">建立超链接</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Advanced_text_formatting\">高级文字格式</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure\">文档与网站架构</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML\">HTML 除错</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Marking_up_a_letter\">作业：标记字母</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Structuring_a_page_of_content\">作业：构建出有内容的网页</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>多媒体与嵌入</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding\">多媒体与嵌入概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Images_in_HTML\">HTML 中的图片</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Video_and_audio_content\">视频和音频内容</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Other_embedding_technologies\">从对象到 iframe — 其他嵌入技术</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Adding_vector_graphics_to_the_Web\">为 Web 新增向量图</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images\">自适应图片</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Mozilla_splash_page\">作业：Mozilla 醒目页面</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>HTML 表格</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Tables\">HTML 表格概览</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Tables/Basics\">HTML 表格基础</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Tables/Advanced\">HTML 高级表格特性和可访问性</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Tables/Structuring_planet_data\">作业：构建行星数据</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/zh-CN/docs/Learn/CSS\"><strong>CSS — 设计 Web</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS 第一步</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/First_steps\">CSS第一步概览</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/First_steps/What_is_CSS\">什么是CSS</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/First_steps/Getting_started\">让我们开始CSS之旅</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/First_steps/How_CSS_is_structured\">如何让构建CSS</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/First_steps/How_CSS_works\">CSS如何运行</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/First_steps/Using_your_new_knowledge\">运用你的新知识</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS 构建基础</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks\">CSS构建基础概览</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">层叠与继承</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Selectors\">CSS选择器</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/The_box_model\">盒模型</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Backgrounds_and_borders\">背景与边框</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Handling_different_text_directions\">处理不同方向的文本</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Overflowing_content\">溢出的内容</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Values_and_units\">值与单位</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Sizing_items_in_CSS\">在CSS中调整大小</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Images_media_form_elements\">图像、媒体和表单元素</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Styling_tables\">样式化表格</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Debugging_CSS\">调试CSS</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Organizing\">组织你的CSS</a></li>\n      </ol></details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>样式化文字</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Styling_text\">样式化文字概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Styling_text/Fundamentals\">基础文字与字体样式化</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Styling_text/Styling_lists\">样式化列表</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Styling_text/Styling_links\">样式化链接</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Styling_text/Web_fonts\">Web 字体</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Styling_text/Typesetting_a_homepage\">作业：排版社区大学首页</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS 排版</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout\">CSS 排版概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Introduction\">Introduction to CSS layout</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Normal_Flow\">正常布局流</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Flexbox\">弹性区块</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Grids\">网格</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Floats\">浮动</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Positioning\">定位</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Multiple-column_Layout\">多列布局</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Responsive_Design\">响应式布局</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Media_queries\">媒体查询</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Legacy_Layout_Methods\">传统的布局方法</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Supporting_Older_Browsers\">支持旧的浏览器</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Fundamental_Layout_Comprehension\">基础布局练习</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/zh-CN/docs/Learn/JavaScript\"><strong>JavaScript — 用户端动态脚本</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>JavaScript 第一步</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps\">JavaScript 第一步概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript\">什么是 JavaScript？</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/A_first_splash\">初次接触 JavaScript</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/What_went_wrong\">出现了什么问题？JavaScript 疑难解答</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/Variables\">储存你所需的信息 — 变量</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/Math\">JavaScript 基础概念 — 数字与运算符</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/Strings\">处理文字 — JavaScript 中的字符串</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/Useful_string_methods\">有用的字符串方法</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/Arrays\">数组</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/Silly_story_generator\">作业：傻瓜故事产生器</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>JavaScript 基础要件</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks\">JavaScript 基础要件概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/conditionals\">在代码中决策 — 条件</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Looping_code\">代码循环</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Functions\">函数 - 可重复利用的代码块</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Build_your_own_function\">建立自己的函数</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Return_values\">函数回传值</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Events\">事件介绍</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Image_gallery\">作业：图库</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>JavaScript 对象介绍</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects\">JavaScript 对象概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/Basics\">对象基础概念</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/Object_prototypes\">对象原型</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/Object-oriented_programming\">Object-oriented programming concepts</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/Classes_in_JavaScript\">Classes in JavaScript</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/JSON\">使用 JSON 资料</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/Object_building_practice\">对象构建实践</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/Adding_bouncing_balls_features\">作业：为弹跳球展示新增功能</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>异步JavaScript</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous\">异步JavaScript概览</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Concepts\">通用异步编程概念</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Introducing\">异步JavaScript简介</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Timeouts_and_intervals\">合作异步JavaScript: 超时和间隔</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Promises\">Promises: 优雅的异步处理</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Async_await\">async和await:让异步编程更简单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Choosing_the_right_approach\">选择正确的方法</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>客户端网页 API</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs\">客户端网页 API</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Introduction\">网页 API 介绍</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents\">操纵文档</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data\">从服务器获取数据</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Third_party_APIs\">第三方 API</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Drawing_graphics\">画图</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Video_and_audio_APIs\">视频与音频 API</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Client-side_storage\">客户端存储</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/zh-CN/docs/Learn/Forms\"><strong>Web表单 — 与用户数据打交道</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Web表单核心</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Forms\">Web表单概览</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Your_first_form\">你的第一个表单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/How_to_structure_a_web_form\">如何构造Web表单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Basic_native_form_controls\">原生表单控件</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/HTML5_input_types\">HTML5的input类型</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Other_form_controls\">其它表单控件</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Styling_web_forms\">样式化Web表单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Advanced_form_styling\">高级表单样式</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/UI_pseudo-classes\">UI 伪类</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Form_validation\">客户端表单验证</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Sending_and_retrieving_form_data\">发送表单数据</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Web表单进阶</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/How_to_build_custom_form_controls\">如何构造自定义表单控件</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Sending_forms_through_JavaScript\">使用JavaScript发送表单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Property_compatibility_table_for_form_controls\">表单组件兼容性列表</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/zh-CN/docs/Learn/Accessibility\"><strong>可访问性 — 使每个人都能使用 Web</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>可访问性指南</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility\">可访问性概览</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility/What_is_accessibility\">什么是可访问性</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility/HTML\">HTML: 可访问性的好基础</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility/CSS_and_JavaScript\">CSS 和 JavaScript 可访问性最佳实践</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility/WAI-ARIA_basics\">WAI-ARIA 基础</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility/Multimedia\">可访问性多媒体</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility/Mobile\">移动端可访问性</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>可访问性测评</summary>\n        <ol>\n            <li><a href=\"/zh-CN/docs/Learn/Accessibility/Accessibility_troubleshooting\">作业：可访问性疑难解答</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing\"><strong>工具与测试</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>客户端web开发工具</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools\">客户端web开发工具索引</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Overview\">客户端工具概览</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Command_line\">命令行速成课</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Package_management\">包管理基础</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Introducing_complete_toolchain\">一个完整的工具链</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Deployment\">发布你的应用</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>客户端框架介绍</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Introduction\">客户端框架概览</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Main_features\">框架的主要特性</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>React</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started\">Getting started with React</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_todo_list_beginning\">Beginning our React todo list</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_components\">Componentizing our React app</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state\">React interactivity: Events and state</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_filtering_conditional_rendering\">React interactivity: Editing, filtering, conditional rendering</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_accessibility\">Accessibility in React</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_resources\">React resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Ember</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_getting_started\">Getting started with Ember</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_structure_componentization\">Ember app structure and componentization</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_interactivity_events_state\">Ember interactivity: Events, classes and state</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_conditional_footer\">Ember Interactivity: Footer functionality, conditional rendering</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_routing\">Routing in Ember</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_resources\">Ember resources and troubleshooting</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Vue</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_getting_started\">开始使用Vue</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_first_component\">创建第一个Vue组件</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_rendering_lists\">渲染一个Vue组件列表</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_methods_events_models\">添加一个新的TODO表单: Vue事件、方法、模型</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_styling\">用CSS样式化Vue组件</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_computed_properties\">Using Vue computed properties</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_conditional_rendering  \">Vue conditional rendering: editing existing todos</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_refs_focus_management\">Focus management with Vue refs</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_resources\">Vue resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Svelte</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_getting_started\">Getting started with Svelte</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_Todo_list_beginning\">Starting our Svelte Todo list app</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_variables_props\">Dynamic behavior in Svelte: working with variables and props</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_components\">Componentizing our Svelte app</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_reactivity_lifecycle_accessibility\">Advanced Svelte: Reactivity, lifecycle, accessibility</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_stores\">Working with Svelte stores</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_TypeScript  \">TypeScript support in Svelte</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_deployment_next\">Deployment and next steps</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Angular</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_getting_started\">Getting started with Angular</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_todo_list_beginning\">Beginning our Angular todo list app</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_styling\">Styling our Angular app</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_item_component\">Creating an item component</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_filtering\">Filtering our to-do items</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_building\">Building Angular applications and further resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Git 和 GitHub</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/GitHub\">Git和GitHub 概览</a></li>\n          <li><a href=\"https://guides.github.com/activities/hello-world/\">Hello World</a></li>\n          <li><a href=\"https://guides.github.com/introduction/git-handbook/\">Git Handbook</a></li>\n          <li><a href=\"https://guides.github.com/activities/forking/\">Forking Projects</a></li>\n          <li><a href=\"https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests\">About pull requests</a></li>\n          <li><a href=\"https://guides.github.com/features/issues/\">Mastering Issues</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>跨浏览器测试</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing\">跨浏览器测试概述</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Introduction\">跨浏览器测试介绍</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Testing_strategies\">执行测试策略</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/HTML_and_CSS\">处理常见的 HTML 与 CSS 问题</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/JavaScript\">处理常见的 JavaScript 问题</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Accessibility\">处理常见的可访问性问题</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Feature_detection\">建置功能侦测</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Automated_testing\">自动测试介绍</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Your_own_automation_environment\">设置您的自动测试环境</a></li>\n        </ol>\n    </details>\n  </li>\n  <li data-default-state=\"open\"><a href=\"/zh-CN/docs/Learn/Server-side\"><strong>服务端网页编程</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>第一步</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/First_steps\">第一步概述</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/First_steps/Introduction\">服务端介绍</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/First_steps/Client-Server_overview\">用户端概述</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/First_steps/Web_frameworks\">服务端网络框架</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/First_steps/Website_security\">网站安全</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n        <summary>Django 网站框架 (Python)</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django\">Django 网站框架 (Python) 概述</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Introduction\">介绍</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/development_environment\">搭建开发环境</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Tutorial_local_library_website\">在线教学：本地图书馆网站</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/skeleton_website\">在线教学 2：建立网站框架</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Models\">在线教学 3：使用模型</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Admin_site\">在线教学 4：Django 管理网站</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Home_page\">在线教学 5：建立我们的首页</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Generic_views\">在线教学 6：通用列表与细节检查</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Sessions\">在线教学 7：会话框架</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Authentication\">在线教学 8：用户授权与许可</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Forms\">在线教学 9：搭配表单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Testing\">在线教学 10：测试 Django 的 Web 应用</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Deployment\">在线教学 11：部署 Django 至产品</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/web_application_security\">Web 应用安全性</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/django_assessment_blog\">作业：DIY 博客</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Express 网页框架 (node.js/JavaScript)</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs\">Express 网页框架 (Node.js/JavaScript) 概览</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Introduction\">Express/Node 介绍</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/development_environment\">架设 Node (Express) 开发环境</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website\">Express 教程： 本地图书馆网站</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">Express 教程 2： 新建网站骨架</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/mongoose\">Express 教程 3： 使用数据库 (Mongoose)</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/routes\">Express 教程 4： 路由和控制器</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express 教程 5： 呈现图书馆数据</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/forms\">Express 教程 6： 使用表单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/deployment\">Express 教程 7： 部署至生产环境</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"#\"><strong>更多资源</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>常见问题</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/HTML/Howto\">HTML 问题</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/CSS/Howto\">CSS 问题</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Howto\">JavaScript questions</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Common_questions#Web_mechanics\">Web 是如何运作的</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Common_questions#Tools_and_setup\">工具与安装</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Common_questions#Design_and_accessibility\">设计与可访问性</a></li>\n        </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Learn/Server-side/Django/Forms\"> 上一页 </a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Learn/Server-side/Django\"> Overview: Django</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Learn/Server-side/Django/Deployment\"> 下一页  </a></li>\n</ul>\n<p>随着网站的增长，他们越来越难以手动测试。不仅要进行更多的测试，而且随着组件之间的交互变得越来越复杂，一个区域的小改变可能会影响到其他区域，所以需要做更多的改变来确保一切正常运行，并且在进行更多更改时不会引入错误。减轻这些问题的一种方法是编写自动化测试，每当您进行更改时，都可以轻松可靠地运行测试。本教程演示如何使用 Django 的测试框架自动化您的网站的<em>单元测试</em>。</p>\n<table class=\"learn-box standard-table\">\n  <tbody>\n    <tr>\n      <th scope=\"row\">先决条件：</th>\n      <td>完成之前的所有教程主题，包括 Django 教程 9：使用表单。</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">目标：</th>\n      <td>了解如何为基于 Django 的网站编写单元测试。</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"概览","title":"概览","isH3":false,"content":"<p>LocalLibrary 目前有页面显示所有书本和作者的列表，书本和作者项目的详细视图，续借<code>BookInstances</code>的页面，以及创建，更新和删除作者项目的页面（如果您完成了<strong>Django 教程 9：使用表单</strong>中的自我挑战，也可以创建，更新和删除书本记录）。即使使用这个相对较小的站点，手动导航到每个页面，并且表面地检查一切是否按预期工作，可能需要几分钟。当我们进行更改，并扩展网站时，手动检查所有内容“正常”工作所需的时间只会增长。如果我们继续这样做，最终我们将花费大部分时间进行测试，并且很少有时间来改进我们的代码。</p>\n<p>自动化测试可以真正帮助解决这个问题！显而易见的好处，是它们可以比手动测试运行得更快，可以测试更底层级别的细节，并且每次都测试完全相同的功能（人类测试员远远没有这么可靠！）因为它们很快速，自动化的测试可以更频繁地执行，如果测试失败，他们会指出代码未按预期执行的位置。</p>\n<p>此外，自动化测试可以充当代码的第一个真实“用户”，迫使您严格定义和记录网站的行为方式。它们通常是您的代码示例，和文档的基础。由于这些原因，一些软件开发过程，从测试定义和实现开始，之后编写代码以匹配所需的行为（例如，测试驱动<a href=\"https://en.wikipedia.org/wiki/Test-driven_development\" class=\"external\" rel=\" noopener\">test-driven</a> 和行为驱动 <a href=\"https://en.wikipedia.org/wiki/Behavior-driven_development\" class=\"external\" rel=\" noopener\">behaviour-driven</a>的开发）。</p>\n<p>本教程通过向 LocalLibrary 网站添加大量测试，来演示如何为 Django 编写自动化测试。</p>"}},{"type":"prose","value":{"id":"测试的类型","title":"测试的类型","isH3":true,"content":"<p>测试和测试方法有许多类型，级别和分类。最重要的自动化测试是：</p>\n<dl>\n  <dt id=\"单元测试_unit_tests\">单元测试 Unit tests</dt>\n  <dd>\n    <p>验证各个组件的功能行为，通常是类别和功能级别。</p>\n  </dd>\n  <dt id=\"回归测试\">回归测试</dt>\n  <dd>\n    <p>测试重现历史错误。最初运行每个测试，以验证错误是否已修复，然后重新运行，以确保在以后更改代码之后，未重新引入该错误。</p>\n  </dd>\n  <dt id=\"集成测试\">集成测试</dt>\n  <dd>\n    <p>验证组件分组在一起使用时的工作方式。集成测试了解组件之间所需的交互，但不一定了解每个组件的内部操作。它们可能涵盖整个网站的简单组件分组。</p>\n  </dd>\n</dl>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 其他常见类型的测试，包括黑盒，白盒，手动，自动，金丝雀，烟雾，一致性，验收，功能，系统，性能，负载和压力测试。查找它们以获取更多信息。</p>\n</div>"}},{"type":"prose","value":{"id":"django_为测试提供了什么？","title":"Django 为测试提供了什么？","isH3":true,"content":"<p>测试网站是一项复杂的任务，因为它由多层逻辑组成 - 从 HTTP 级请求处理，查询模型，到表单验证和处理，以及模板呈现。</p>\n<p>Django 提供了一个测试框架，其中包含基于 Python 标准<a href=\"https://docs.python.org/3/library/unittest.html#module-unittest\" class=\"external\" rel=\" noopener\"><code>unittest</code></a>库的小型层次结构。尽管名称如此，但该测试框架适用于单元测试和集成测试。Django 框架添加了 API 方法和工具，以帮助测试 Web 和 Django 特定的行为。这允许您模拟请求，插入测试数据以及检查应用程序的输出。Django 还提供了一个 API（<a href=\"https://docs.djangoproject.com/en/2.0/topics/testing/tools/#liveservertestcase\" class=\"external\" rel=\" noopener\">LiveServerTestCase</a>）和<a href=\"https://docs.djangoproject.com/en/2.0/topics/testing/advanced/#other-testing-frameworks\" class=\"external\" rel=\" noopener\">使用不同测试框架</a>的工具，例如，您可以与流行的 <a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Your_own_automation_environment\">Selenium</a> 框架集成，以模拟用户与实时浏览器交互。</p>\n<p>要编写测试，您可以从任何 Django（或 unittest）测试基类（<a href=\"https://docs.djangoproject.com/en/2.0/topics/testing/tools/#simpletestcase\" class=\"external\" rel=\" noopener\">SimpleTestCase</a>, <a href=\"https://docs.djangoproject.com/en/2.0/topics/testing/tools/#transactiontestcase\" class=\"external\" rel=\" noopener\">TransactionTestCase</a>, <a href=\"https://docs.djangoproject.com/en/2.0/topics/testing/tools/#testcase\" class=\"external\" rel=\" noopener\">TestCase</a>, <a href=\"https://docs.djangoproject.com/en/2.0/topics/testing/tools/#liveservertestcase\" class=\"external\" rel=\" noopener\">LiveServerTestCase</a>）派生，然后编写单独的方法，来检查特定功能，是否按预期工作（测试使用“assert”方法来测试表达式导致 <code>True</code>或 <code>False</code>值，或者两个值相等，等等。）当您开始测试运行时，框架将在派生类中执行所选的测试方法。测试方法独立运行，具有在类中定义的常见设置和/或拆卸行为，如下所示。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">YourTestClass</span><span class=\"token punctuation\">(</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#Setup run before every test method.</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#Clean up run after every test method.</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_something_that_will_pass</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>assertFalse<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_something_that_will_fail</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>大多数测试的最佳基类是 <a href=\"https://docs.djangoproject.com/en/2.0/topics/testing/tools/#testcase\" class=\"external\" rel=\" noopener\">django.test.TestCase</a>。此测试类在运行测试之前，创建一个干净的数据库，并在自己的事务中，运行每个测试函数。该类还拥有一个<a href=\"https://docs.djangoproject.com/en/2.0/topics/testing/tools/#django.test.Client\" class=\"external\" rel=\" noopener\">测试客户端</a>，您可以使用该客户端，模拟在视图级别与代码交互的用户。在下面的部分中，我们将集中讨论使用此<a href=\"https://docs.djangoproject.com/en/2.0/topics/testing/tools/#testcase\" class=\"external\" rel=\" noopener\">TestCase</a> 基类创建的单元测试。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> <a href=\"https://docs.djangoproject.com/en/2.0/topics/testing/tools/#testcase\" class=\"external\" rel=\" noopener\">django.test.TestCase</a> 类非常方便，但可能会导致某些测试，比它们需要的速度慢（并非每个测试，都需要设置自己的数据库，或模拟视图交互）。一旦熟悉了这个类可以做什么，您可能希望用可以用更简单的测试类，替换一些测试。</p>\n</div>"}},{"type":"prose","value":{"id":"你应该测试什么？","title":"你应该测试什么？","isH3":true,"content":"<p>您应该测试自己代码的所有方面，但不要测试 Python 或 Django 的一部分提供的任何库或功能。</p>\n<p>例如，考虑下面定义的 <code>Author</code>模型。您不需要显式测试 <code>first_name</code> 和 <code>last_name</code> 是否已在数据库中正确储存为<code>CharField</code>，因为这是 Django 定义的内容（当然，在实践中，您将不可避免地在开发期间测试此功能）。你也不需要测试<code>date_of_birth</code>是否已被验证为日期字段，因为这也是 Django 中实现的东西。</p>\n<p>但是，您应该检查用于标签的文本（名字，姓氏，出生日期，死亡），以及为文本分配的字段大小（100 个字符），因为这些是您的设计的一部分，可能会在将来被打破/改变。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Author</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    first_name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    last_name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    date_of_birth <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span>null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    date_of_death <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span><span class=\"token string\">'Died'</span><span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_absolute_url</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'author-detail'</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'%s, %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>first_name<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>同样，您应该检查自定义方法 <code>get_absolute_url()</code> 和 <code>__str__()</code> 是否符合要求，因为它们是您的代码/业务逻辑。在<code>get_absolute_url()</code>的情况下，您可以相信 Django <code>reverse()</code>方法已经正确实现，因此您正在测试的是实际上已经定义了关联的视图。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 精明的读者可能会注意到，我们也希望将出生和死亡的日期限制在合理的值，并检查出生后是否死亡。在 Django 中，此约束将添加到表单类中（尽管您可以为字段定义验证器，这些字段似乎仅在表单级别使用，而不是在模型级别使用）。</p>\n</div>\n<p>考虑到这些，让我们开始研究如何定义和运行测试。</p>"}},{"type":"prose","value":{"id":"测试结构概述","title":"测试结构概述","isH3":false,"content":"<p>在我们详细讨论“测试内容”之前，让我们先简要介绍一下测试的定位和方式。</p>\n<p>Django 使用 unittest 模块的<a href=\"https://docs.python.org/3/library/unittest.html#unittest-test-discovery\" class=\"external\" rel=\" noopener\">内置测试查找</a>，它将在任何使用模式<strong>test*.py</strong> 命名的文件中，查找当前工作目录下的测试。如果您正确命名文件，则可以使用您喜欢的任何结构。我们建议您为测试代码创建一个模块，并为模型，视图，表单和您需要测试的任何其他类型的代码，分别创建文件。例如：</p>\n<pre class=\"notranslate\">catalog/\n    /tests/\n    __init__.py\n    test_models.py\n    test_forms.py\n    test_views.py\n</pre>\n<p>在 LocalLibrary 项目中，创建如上所示的文件结构。<strong>__init__.py</strong> 应该是一个空文件（这告诉 Python 该目录是一个套件包）。您可以通过复制和重命名框架测试文件 <strong>/catalog/tests.py</strong>，来创建三个测试文件。</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>备注：</strong> 我们构建 Django 骨架网站时，会自动创建骨架测试文件 <strong>/catalog/tests.py</strong>。将所有测试放入其中是完全“合法的”，但如果测试正确，您将很快得到一个非常庞大且难以管理的测试文件。</p>\n  <p>删除骨架文件，因为我们不需要它。</p>\n</div>\n<p>打开 <strong>/catalog/tests/test_models.py</strong>。该文件应导入<code>django.test.TestCase</code>，如下所示：</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>test <span class=\"token keyword\">import</span> TestCase\n\n<span class=\"token comment\"># Create your tests here.</span>\n</code></pre></div>\n<p>通常，您将为要测试的每个模型/视图/表单添加测试类别，并使用个别方法来测试特定功能。在其他情况下，您可能希望有一个分开的类别，来测试特定用例，使用个别的测试函数，来测试该用例的各个方面（例如，测试模型字段已正确验证的类，以及测试每个可能的失败案例的函数）。相同地，这样的结构非常适合您，但最好您能保持一致。</p>\n<p>将下面的测试类别，添加到文件的底部。该类别演示了，如何通过派生 <code>TestCase</code>，构建测试用例类。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">YourTestClass</span><span class=\"token punctuation\">(</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token decorator annotation punctuation\">@classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">setUpTestData</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setUpTestData: Run once to set up non-modified data for all class methods.\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setUp: Run once for every test method to setup clean data.\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_false_is_false</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Method: test_false_is_false.\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertFalse<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_false_is_true</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Method: test_false_is_true.\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_one_plus_one_equals_two</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Method: test_one_plus_one_equals_two.\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>新的类别定义了两个可用于测试之前的配置的方法（例如，创建测试所需的任何模型或其他对象）：</p>\n<ul>\n  <li><code>setUpTestData()</code> 用于类级别设置，在测试运行开始的时侯，会调用一次。您可以使用它来创建在任何测试方法中，都不会修改或更改的对象。</li>\n  <li><code>setUp()</code> 在每个测试函数之前被调用，以设置可能被测试修改的任何对象（每个测试函数，都将获得这些对象的“新”版本）。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>备注：</strong> 测试类别还有一个我们还没有使用的<code>tearDown()</code>方法。此方法对数据库测试不是特别有用，因为<code>TestCase</code>基类会为您处理数据库拆卸。</p>\n</div>\n<p>下面我们有一些测试方法，它们使用 <code>Assert</code> 函数来测试条件是真，假或相等（<code>AssertTrue</code>, <code>AssertFalse</code>, <code>AssertEqual</code>）。如果条件评估不如预期，则测试将失败，并将错误报告给控制台。</p>\n<p><code>AssertTrue</code>, <code>AssertFalse</code>, <code>AssertEqual</code> 是 <strong>unittest</strong> 提供的标准断言。框架中还有其他标准断言，还有 <a href=\"https://docs.djangoproject.com/en/2.0/topics/testing/tools/#assertions\" class=\"external\" rel=\" noopener\">Django 特定的断言</a>，来测试视图是否重定向（<code>assertRedirects</code>），或测试是否已使用特定模板（<code>assertTemplateUsed</code>）等。</p>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>备注：</strong> 您通常<strong>不应</strong>在测试中包含<strong>print()</strong> 函数，如上所示。我们这样做，只是为了让您可以看到在控制台中，调用设置功能的顺序（在下一节中）。</p>\n</div>"}},{"type":"prose","value":{"id":"如何运行测试","title":"如何运行测试","isH3":false,"content":"<p>要运行所有测试，最简单的方法，是使用以下命令：</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>python3 manage.py <span class=\"token builtin class-name\">test</span>\n</code></pre></div>\n<p>这将查找当前目录下，使用模式 <strong>test*.py</strong> 命名的所有文件，并运行使用适当基类定义的所有测试（这里我们有许多测试文件，但只有 <strong>/catalog/tests/test_models.py</strong> 目前包含任何测试。）。默认情况下，测试将仅单独报告测试失败，然后是测试摘要。</p>\n<div class=\"notecard note\" id=\"sect7\">\n  <p><strong>备注：</strong> 如果您收到类似于以下内容的错误：<code>ValueError: Missing staticfiles manifest entry ...</code> 这可能是因为默认情况下，测试不会运行 collectstatic，而您的应用程序正在使用需要它的储存类别（有关更多信息，请参阅 <a href=\"https://docs.djangoproject.com/en/2.0/ref/contrib/staticfiles/#django.contrib.staticfiles.storage.ManifestStaticFilesStorage.manifest_strict\" class=\"external\" rel=\" noopener\">manifest_strict</a>）。有许多方法可以解决这个问题 - 最简单的方法，是在运行测试之前，简单地运行 collectstatic：</p>\n  <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>python3 manage.py collectstatic\n</code></pre></div>\n</div>\n<p>在 LocalLibrary 的根目录中，运行测试。您应该看到如下所示的输出。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token operator\">&gt;</span>python3 manage.py <span class=\"token builtin class-name\">test</span>\n\nCreating <span class=\"token builtin class-name\">test</span> database <span class=\"token keyword\">for</span> <span class=\"token builtin class-name\">alias</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">..</span>.\nsetUpTestData: Run once to <span class=\"token builtin class-name\">set</span> up non-modified data <span class=\"token keyword\">for</span> all class methods.\nsetUp: Run once <span class=\"token keyword\">for</span> every <span class=\"token builtin class-name\">test</span> method to setup clean data.\nMethod: test_false_is_false.\n.setUp: Run once <span class=\"token keyword\">for</span> every <span class=\"token builtin class-name\">test</span> method to setup clean data.\nMethod: test_false_is_true.\nFsetUp: Run once <span class=\"token keyword\">for</span> every <span class=\"token builtin class-name\">test</span> method to setup clean data.\nMethod: test_one_plus_one_equals_two.\n<span class=\"token builtin class-name\">.</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\nFAIL: test_false_is_true <span class=\"token punctuation\">(</span>catalog.tests.tests_models.YourTestClass<span class=\"token punctuation\">)</span>\n----------------------------------------------------------------------\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"D:\\Github\\django_tmp\\library_w_t_2\\locallibrary<span class=\"token entity\" title=\"\\c\">\\c</span>atalog<span class=\"token entity\" title=\"\\t\">\\t</span>ests<span class=\"token entity\" title=\"\\t\">\\t</span>ests_models.py\"</span>, line <span class=\"token number\">22</span>, <span class=\"token keyword\">in</span> test_false_is_true\n    self.assertTrue<span class=\"token punctuation\">(</span>False<span class=\"token punctuation\">)</span>\nAssertionError: False is not <span class=\"token boolean\">true</span>\n\n----------------------------------------------------------------------\n\nRan <span class=\"token number\">3</span> tests <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.075s\n\nFAILED <span class=\"token punctuation\">(</span>failures<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nDestroying <span class=\"token builtin class-name\">test</span> database <span class=\"token keyword\">for</span> <span class=\"token builtin class-name\">alias</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">..</span>.\n</code></pre></div>\n<p>在这里，我们看到有一个测试失败，我们可以确切地看到哪个函数失败了、为什么失败（这个失败是预期的，因为 <code>False</code>不是 <code>True</code>！）。</p>\n<div class=\"notecard note\" id=\"sect8\">\n  <p><strong>备注：</strong> 从上面的测试输出中，学到的最重要事情是，如果为对象和方法使用描述性/信息性名称，它会更有价值。</p>\n</div>\n<p>上面以<strong>粗体</strong>显示的文本，通常不会出现在测试输出中（这是由我们的测试中的<code>print()</code>函数生成的）。这显示了如何为类调用<code>setUpTestData()</code>方法，并在每个方法之前调用<code>setUp()</code>。</p>\n<p>接下来的部分，将介绍如何运行特定测试，以及如何控制测试显示的信息量。</p>"}},{"type":"prose","value":{"id":"显示更多测试信息","title":"显示更多测试信息","isH3":true,"content":"<p>如果您想获得有关测试运行的更多信息，可以更改详细程度。例如，要列出测试成功和失败（以及有关如何设置测试数据库的大量信息），您可以将详细程度设置为“2”，如下所示：</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>python3 manage.py <span class=\"token builtin class-name\">test</span> --verbosity <span class=\"token number\">2</span>\n</code></pre></div>\n<p>允许的详细级别为 0, 1 ,2 和 3，默认值为“1”。</p>"}},{"type":"prose","value":{"id":"运行特定测试","title":"运行特定测试","isH3":true,"content":"<p>如果要运行测试的子集，可以通过指定包，模块，<code>TestCase</code>子类或方法的完整路径 ​​（包含点）来执行此操作：</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code>python3 manage.py <span class=\"token builtin class-name\">test</span> catalog.tests   <span class=\"token comment\"># Run the specified module</span>\npython3 manage.py <span class=\"token builtin class-name\">test</span> catalog.tests.test_models  <span class=\"token comment\"># Run the specified module</span>\npython3 manage.py <span class=\"token builtin class-name\">test</span> catalog.tests.test_models.YourTestClass <span class=\"token comment\"># Run the specified class</span>\npython3 manage.py <span class=\"token builtin class-name\">test</span> catalog.tests.test_models.YourTestClass.test_one_plus_one_equals_two  <span class=\"token comment\"># Run the specified method</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"locallibrary_测试","title":"LocalLibrary 测试","isH3":false,"content":"<p>现在我们知道，如何运行我们的测试，以及我们需要测试哪些东西，让我们看一些实际的例子。</p>\n<div class=\"notecard note\" id=\"sect9\">\n  <p><strong>备注：</strong> 我们不会编写所有可能的测试，但这应该可以让您了解测试的工作原理，以及您可以做些什么。</p>\n</div>"}},{"type":"prose","value":{"id":"模型","title":"模型","isH3":true,"content":"<p>如上所述，我们应该测试我们设计的任何内容，或由我们编写的代码定义的内容，而不是已经由 Django 或 Python 开发团队测试过的库/代码。</p>\n<p>例如，请考虑下面的作者模型 <code>Author</code>。在这里，我们应该测试所有字段的标签，因为即使我们没有明确指定它们中的大部分，我们也有一个设计，说明这些值应该是什么。如果我们不测试值，那么我们不知道字段标签，是否具有其预期值。同样，虽然我们相信 Django 会创建一个指定长度的字段，但值得为这个长度指定一个测试，以确保它按计划实现。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Author</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    first_name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    last_name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    date_of_birth <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span>null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    date_of_death <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span><span class=\"token string\">'Died'</span><span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_absolute_url</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'author-detail'</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'%s, %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>first_name<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>打开我们的 <strong>/catalog/tests/test_models.py</strong>，并用 <code>Author</code>模型的以下测试代码，替换任何现有代码。</p>\n<p>在这里，您将看到我们首先导入 <code>TestCase</code>，并使用描述性名称，从中派生我们的测试类（<code>AuthorModelTest</code>），以便我们可以轻松识别测试输出中的任何失败测试。然后我们调用<code>setUpTestData()</code>，来创建一个我们将使用，但不在任何测试中修改的作者对象。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>test <span class=\"token keyword\">import</span> TestCase\n\n<span class=\"token comment\"># Create your tests here.</span>\n\n<span class=\"token keyword\">from</span> catalog<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Author\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthorModelTest</span><span class=\"token punctuation\">(</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token decorator annotation punctuation\">@classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">setUpTestData</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#Set up non-modified objects used by all test methods</span>\n        Author<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>first_name<span class=\"token operator\">=</span><span class=\"token string\">'Big'</span><span class=\"token punctuation\">,</span> last_name<span class=\"token operator\">=</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_first_name_label</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        author<span class=\"token operator\">=</span>Author<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        field_label <span class=\"token operator\">=</span> author<span class=\"token punctuation\">.</span>_meta<span class=\"token punctuation\">.</span>get_field<span class=\"token punctuation\">(</span><span class=\"token string\">'first_name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>verbose_name\n        self<span class=\"token punctuation\">.</span>assertEquals<span class=\"token punctuation\">(</span>field_label<span class=\"token punctuation\">,</span><span class=\"token string\">'first name'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_date_of_death_label</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        author<span class=\"token operator\">=</span>Author<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        field_label <span class=\"token operator\">=</span> author<span class=\"token punctuation\">.</span>_meta<span class=\"token punctuation\">.</span>get_field<span class=\"token punctuation\">(</span><span class=\"token string\">'date_of_death'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>verbose_name\n        self<span class=\"token punctuation\">.</span>assertEquals<span class=\"token punctuation\">(</span>field_label<span class=\"token punctuation\">,</span><span class=\"token string\">'died'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_first_name_max_length</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        author<span class=\"token operator\">=</span>Author<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        max_length <span class=\"token operator\">=</span> author<span class=\"token punctuation\">.</span>_meta<span class=\"token punctuation\">.</span>get_field<span class=\"token punctuation\">(</span><span class=\"token string\">'first_name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>max_length\n        self<span class=\"token punctuation\">.</span>assertEquals<span class=\"token punctuation\">(</span>max_length<span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_object_name_is_last_name_comma_first_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        author<span class=\"token operator\">=</span>Author<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        expected_object_name <span class=\"token operator\">=</span> <span class=\"token string\">'%s, %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>author<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> author<span class=\"token punctuation\">.</span>first_name<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEquals<span class=\"token punctuation\">(</span>expected_object_name<span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>author<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_get_absolute_url</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        author<span class=\"token operator\">=</span>Author<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#This will also fail if the urlconf is not defined.</span>\n        self<span class=\"token punctuation\">.</span>assertEquals<span class=\"token punctuation\">(</span>author<span class=\"token punctuation\">.</span>get_absolute_url<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'/catalog/author/1'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>字段测试检查字段标签（<code>verbose_name</code>）的值，以及字符字段的大小，是否符合预期。这些方法都有描述性名称，并遵循相同的模式：</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code>author<span class=\"token operator\">=</span>Author<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># Get an author object to test</span>\nfield_label <span class=\"token operator\">=</span> author<span class=\"token punctuation\">.</span>_meta<span class=\"token punctuation\">.</span>get_field<span class=\"token punctuation\">(</span><span class=\"token string\">'first_name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>verbose_name   <span class=\"token comment\"># Get the metadata for the required field and use it to query the required field data</span>\nself<span class=\"token punctuation\">.</span>assertEquals<span class=\"token punctuation\">(</span>field_label<span class=\"token punctuation\">,</span><span class=\"token string\">'first name'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Compare the value to the expected result</span>\n</code></pre></div>\n<p>有趣的事情是：</p>\n<ul>\n  <li>我们无法使用 <code>author.first_name.verbose_name</code>直接获取 <code>verbose_name</code>，因为<code>author.first_name</code> 是一个字符串（不是我们可以用来访问其属性的<code>first_name</code> 对象的句柄）。取而代之的是，我们需要使用作者的 <code>_meta</code>属性，来获取字段的实例，并使用它来查询其他信息。</li>\n  <li>我们选择使用 <code>assertEquals(field_label,'first name')</code> ，而不是<code>assertTrue(field_label == 'first name')</code>。这样做的原因是，如果测试失败，前者的输出，会告诉您标签实际上是什么，这使得调试问题变得更容易一些。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect10\">\n  <p><strong>备注：</strong> 已省略对<code>last_name</code> 和 <code>date_of_birth</code>标签的测试，以及 <code>last_name</code>字段长度的测试。现在按照上面显示的命名约定和方法，添加您自己的版本。</p>\n</div>\n<p>我们还需要测试我们的自定义方法。这些基本上只是检查对象名称，是否按照我们的预期，使用“姓氏”，“名字”格式构建，并且我们为<code>Author</code>获取的 URL，是我们所期望的。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">def</span> <span class=\"token function\">test_object_name_is_last_name_comma_first_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    author<span class=\"token operator\">=</span>Author<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    expected_object_name <span class=\"token operator\">=</span> <span class=\"token string\">'%s, %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>author<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">,</span> author<span class=\"token punctuation\">.</span>first_name<span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>assertEquals<span class=\"token punctuation\">(</span>expected_object_name<span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>author<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_get_absolute_url</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    author<span class=\"token operator\">=</span>Author<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#This will also fail if the urlconf is not defined.</span>\n    self<span class=\"token punctuation\">.</span>assertEquals<span class=\"token punctuation\">(</span>author<span class=\"token punctuation\">.</span>get_absolute_url<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'/catalog/author/1'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>立即运行测试。如果您按照模型教程中的描述，创建了作者模型，则很可能会出现<code>date_of_death</code>标签的错误，如下所示。测试失败，是因为它写的是期望标签定义遵循 Django 的约定，即没有大写标签的第一个字母（Django 会为你做这个）。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\nFAIL: test_date_of_death_label <span class=\"token punctuation\">(</span>catalog.tests.test_models.AuthorModelTest<span class=\"token punctuation\">)</span>\n----------------------------------------------------------------------\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"D:\\...\\locallibrary<span class=\"token entity\" title=\"\\c\">\\c</span>atalog<span class=\"token entity\" title=\"\\t\">\\t</span>ests<span class=\"token entity\" title=\"\\t\">\\t</span>est_models.py\"</span>, line <span class=\"token number\">32</span>, <span class=\"token keyword\">in</span> test_date_of_death_label\n    self.assertEquals<span class=\"token punctuation\">(</span>field_label,<span class=\"token string\">'died'</span><span class=\"token punctuation\">)</span>\nAssertionError: <span class=\"token string\">'Died'</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'died'</span>\n- Died\n? ^\n+ died\n? ^\n</code></pre></div>\n<p>这是一个非常小的错误，但它确实强调了，编写测试如何能够更彻底地检查，您可能做出的任何假设。</p>\n<div class=\"notecard note\" id=\"sect11\">\n  <p><strong>备注：</strong> 将 date_of_death 字段（/catalog/models.py）的标签更改为“death”并重新运行测试。</p>\n</div>\n<p>用于测试其他模型的模式，也类似于此，因此我们不会继续进一步讨论这些模式。请随意为其他模型，创建您自己的测试。</p>"}},{"type":"prose","value":{"id":"表单","title":"表单","isH3":true,"content":"<p>测试表单的理念，与测试模型的理念相同；您需要测试您编码、或设计指定的任何内容，但不测试底层框架，和其他第三方库的行为。</p>\n<p>通常，这意味着您应该测试表单，是否包含您想要的字段，并使用适当的标签和帮助文本，显示这些字段。您无需验证 Django 是否正确验证了字段类型（除非您创建了自己的自定义字段和验证） - 即您不需要测试电子邮件字段，是否只接受电子邮件。但是，您需要测试，您希望在字段上执行的任何其他验证，以及您的代码将为错误生成的任何消息。</p>\n<p>考虑我们更新书本的表格。这只有一个继续借阅的日期字段，它将包含我们需要验证的标签，和帮助文本。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">RenewBookForm</span><span class=\"token punctuation\">(</span>forms<span class=\"token punctuation\">.</span>Form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Form for a librarian to renew books.\n    \"\"\"</span>\n    renewal_date <span class=\"token operator\">=</span> forms<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span>help_text<span class=\"token operator\">=</span><span class=\"token string\">\"Enter a date between now and 4 weeks (default 3).\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">clean_renewal_date</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        data <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>cleaned_data<span class=\"token punctuation\">[</span><span class=\"token string\">'renewal_date'</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\">#Check date is not in past.</span>\n        <span class=\"token keyword\">if</span> data <span class=\"token operator\">&lt;</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValidationError<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">(</span><span class=\"token string\">'Invalid date - renewal in past'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#Check date is in range librarian allowed to change (+4 weeks)</span>\n        <span class=\"token keyword\">if</span> data <span class=\"token operator\">&gt;</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>weeks<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValidationError<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">(</span><span class=\"token string\">'Invalid date - renewal more than 4 weeks ahead'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Remember to always return the cleaned data.</span>\n        <span class=\"token keyword\">return</span> data\n</code></pre></div>\n<p>打开我们的 <strong>/catalog/tests/test_forms.py</strong> 文件，并用<code>RenewBookForm</code>表单的以下测试代码，替换任何现有代码。我们首先导入我们的表单，和一些 Python 和 Django 库，以帮助测试与时间相关的功能。然后，我们以与模型相同的方式，声明我们的表单测试类，使用我们的 <code>TestCase</code> 派生测试类的描述性名称。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>test <span class=\"token keyword\">import</span> TestCase\n\n<span class=\"token comment\"># Create your tests here.</span>\n\n<span class=\"token keyword\">import</span> datetime\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>utils <span class=\"token keyword\">import</span> timezone\n<span class=\"token keyword\">from</span> catalog<span class=\"token punctuation\">.</span>forms <span class=\"token keyword\">import</span> RenewBookForm\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RenewBookFormTest</span><span class=\"token punctuation\">(</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_renew_form_date_field_label</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        form <span class=\"token operator\">=</span> RenewBookForm<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">[</span><span class=\"token string\">'renewal_date'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>label <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">or</span> form<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">[</span><span class=\"token string\">'renewal_date'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>label <span class=\"token operator\">==</span> <span class=\"token string\">'renewal date'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_renew_form_date_field_help_text</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        form <span class=\"token operator\">=</span> RenewBookForm<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">[</span><span class=\"token string\">'renewal_date'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>help_text<span class=\"token punctuation\">,</span><span class=\"token string\">'Enter a date between now and 4 weeks (default 3).'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_renew_form_date_in_past</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        date <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>days<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        form_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'renewal_date'</span><span class=\"token punctuation\">:</span> date<span class=\"token punctuation\">}</span>\n        form <span class=\"token operator\">=</span> RenewBookForm<span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span>form_data<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertFalse<span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_renew_form_date_too_far_in_future</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        date <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>weeks<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>days<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        form_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'renewal_date'</span><span class=\"token punctuation\">:</span> date<span class=\"token punctuation\">}</span>\n        form <span class=\"token operator\">=</span> RenewBookForm<span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span>form_data<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertFalse<span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_renew_form_date_today</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        date <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        form_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'renewal_date'</span><span class=\"token punctuation\">:</span> date<span class=\"token punctuation\">}</span>\n        form <span class=\"token operator\">=</span> RenewBookForm<span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span>form_data<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_renew_form_date_max</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        date <span class=\"token operator\">=</span> timezone<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>weeks<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n        form_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'renewal_date'</span><span class=\"token punctuation\">:</span> date<span class=\"token punctuation\">}</span>\n        form <span class=\"token operator\">=</span> RenewBookForm<span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span>form_data<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>前两个函数，测试字段的<code>label</code> 和 <code>help_text</code>，是否符合预期。我们必须使用字段字典访问该字段（例如<code>form.fields['renewal_date']</code>）。请注意，我们还必须测试标签值，是否为<code>None</code>，因为即使 Django 将呈现正确的标签，如果未明确设置该值，它也会返回<code>None</code>。</p>\n<p>其余函数，测试表单对于续借日期，在可接受范围内是否有效，对于范围外的值，是否无效。请注意我们如何使用<code>datetime.timedelta()</code>，在当前日期（<code>datetime.date.today()</code>）周围构建测试日期值（在这种情况下指定天数或周数）。然后我们只需创建表单，传入我们的数据，并测试它是否有效。</p>\n<div class=\"notecard note\" id=\"sect12\">\n  <p><strong>备注：</strong> 这里我们实际上并没有使用数据库，或测试客户端。考虑修改这些测试，以使用<a href=\"https://docs.djangoproject.com/en/2.0/topics/testing/tools/#django.test.SimpleTestCase\" class=\"external\" rel=\" noopener\">SimpleTestCase</a>。</p>\n  <p>如果表单无效，我们还需要验证是否引发了正确的错误，但这通常是作为视图处理的一部分完成的，因此我们将在下一节中处理。</p>\n</div>\n<p>这就是表单的全部；我们确实有其他一些的东西，但它们是由基于类的通用编辑视图自动创建的，应该在那里进行测试！运行测试，并确认我们的代码仍然通过！</p>"}},{"type":"prose","value":{"id":"视图","title":"视图","isH3":true,"content":"<p>为了验证我们的视图行为，我们使用 <a href=\"https://docs.djangoproject.com/en/2.0/topics/testing/tools/#django.test.Client\" class=\"external\" rel=\" noopener\">Django 的测试客户端</a>。这个类，就像一个虚拟的 Web 浏览器，我们可以使用它，来模拟 URL 上的<code>GET</code>和<code>POST</code>请求，并观察响应。我们几乎可以看到，关于响应的所有内容，从低层级的 HTTP（结果标头和状态代码），到我们用来呈现 HTML 的模板，以及我们传递给它的上下文数据。我们还可以看到重定向链（如果有的话），并在每一步检查 URL，和状态代码。这允许我们验证每个视图，是否正在执行预期的操作。</p>\n<p>让我们从最简单的视图开始，它提供了所有作者的列表。它显示在 URL <strong>/catalog/authors/</strong> 当中（URL 配置中，名为“authors”的 URL）。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthorListView</span><span class=\"token punctuation\">(</span>generic<span class=\"token punctuation\">.</span>ListView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Author\n    paginate_by <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n</code></pre></div>\n<p>由于这是一个通用列表视图，几乎所有内容，都由 Django 为我们完成。可以说，如果您信任 Django，那么您唯一需要测试的，是视图可以通过正确的 URL 访问，并且可以使用其名称进行访问。但是，如果您使用的是测试驱动的开发过程，则首先编写测试，确认视图显示所有作者，并将其分成 10 个。</p>\n<p>打开 <strong>/catalog/tests/test_views.py</strong> 文件，并用<code>AuthorListView</code>的以下测试代码，替换任何现有文本。和以前一样，我们导入模型，和一些有用的类。在<code>setUpTestData()</code>方法中，我们设置了许多<code>Author</code>对象，以便我们可以测试我们的分页。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>test <span class=\"token keyword\">import</span> TestCase\n\n<span class=\"token comment\"># Create your tests here.</span>\n\n<span class=\"token keyword\">from</span> catalog<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Author\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> reverse\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthorListViewTest</span><span class=\"token punctuation\">(</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token decorator annotation punctuation\">@classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">setUpTestData</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#Create 13 authors for pagination tests</span>\n        number_of_authors <span class=\"token operator\">=</span> <span class=\"token number\">13</span>\n        <span class=\"token keyword\">for</span> author_num <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>number_of_authors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            Author<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>first_name<span class=\"token operator\">=</span><span class=\"token string\">'Christian %s'</span> <span class=\"token operator\">%</span> author_num<span class=\"token punctuation\">,</span> last_name <span class=\"token operator\">=</span> <span class=\"token string\">'Surname %s'</span> <span class=\"token operator\">%</span> author_num<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_view_url_exists_at_desired_location</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        resp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'/catalog/authors/'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_view_url_accessible_by_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        resp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'authors'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_view_uses_correct_template</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        resp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'authors'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>assertTemplateUsed<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">,</span> <span class=\"token string\">'catalog/author_list.html'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_pagination_is_ten</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        resp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'authors'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span><span class=\"token string\">'is_paginated'</span> <span class=\"token keyword\">in</span> resp<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">[</span><span class=\"token string\">'is_paginated'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">[</span><span class=\"token string\">'author_list'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_lists_all_authors</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#Get second page and confirm it has (exactly) remaining 3 items</span>\n        resp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'authors'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'?page=2'</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span><span class=\"token string\">'is_paginated'</span> <span class=\"token keyword\">in</span> resp<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">[</span><span class=\"token string\">'is_paginated'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">[</span><span class=\"token string\">'author_list'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>所有测试，都使用客户端（属于我们的<code>TestCase</code>的派生类）来模拟<code>GET</code>请求，并获得响应（<code>resp</code>）。第一个版本检查特定 URL（注意，只是没有域名的特定路径），而第二个版本从 URL 配置中的名称生成 URL。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code>resp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'/catalog/authors/'</span><span class=\"token punctuation\">)</span>\nresp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'authors'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>获得响应后，我们会查询其状态代码，使用的模板，响应是否已分页，返回的项目数以及项目总数。</p>\n<p>我们在上面演示的最有趣的变量是<code>resp.context</code>，它是视图传递给模板的上下文变量。这对测试非常有用，因为它允许我们确认模板正在获取所需的所有数据。换句话说，我们可以检查是否正在使用预期的模板，以及模板获得的数据，这对于验证任何渲染问题，是否真的仅仅归因于模板有很大帮助。</p>\n<h4 id=\"仅限登录用户的视图\">仅限登录用户的视图</h4>\n<p>在某些情况下，您需要测试仅限登录用户的视图。例如，我们的<code>LoanedBooksByUserListView</code>与我们之前的视图非常相似，但仅供登录用户使用，并且仅显示当前用户借用的<code>BookInstance</code>记录，具有出借中“on loan”状态，并且排序方式为“旧的优先”。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>mixins <span class=\"token keyword\">import</span> LoginRequiredMixin\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LoanedBooksByUserListView</span><span class=\"token punctuation\">(</span>LoginRequiredMixin<span class=\"token punctuation\">,</span>generic<span class=\"token punctuation\">.</span>ListView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Generic class-based view listing books on loan to current user.\n    \"\"\"</span>\n    model <span class=\"token operator\">=</span> BookInstance\n    template_name <span class=\"token operator\">=</span><span class=\"token string\">'catalog/bookinstance_list_borrowed_user.html'</span>\n    paginate_by <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_queryset</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> BookInstance<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>borrower<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>status__exact<span class=\"token operator\">=</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token string\">'due_back'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>将以下测试代码，添加到 <strong>/catalog/tests/test_views.py</strong>。这里我们首先使用<code>SetUp()</code>创建一些用户登录帐户，和<code>BookInstance</code>对象（以及它们的相关书本，和其他记录），我们稍后将在测试中使用它们。每个测试用户都借用了一半的书本，但我们最初，将所有书本的状态设置为“维护”。我们使用了<code>SetUp()</code>而不是<code>setUpTestData()</code>，因为我们稍后会修改其中的一些对象。</p>\n<div class=\"notecard note\" id=\"sect13\">\n  <p><strong>备注：</strong> 下面的<code>setUp()</code>代码，会创建一个具有指定语言<code>Language</code>的书本，但您的代码可能不包含语言模型<code>Language</code>，因为它是作为挑战创建的。如果是这种情况，只需注释掉创建或导入语言对象的代码部分。您还应该在随后的<code>RenewBookInstancesViewTest</code>部分中，执行此操作。</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">import</span> datetime\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>utils <span class=\"token keyword\">import</span> timezone\n\n<span class=\"token keyword\">from</span> catalog<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> BookInstance<span class=\"token punctuation\">,</span> Book<span class=\"token punctuation\">,</span> Genre<span class=\"token punctuation\">,</span> Language\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> User <span class=\"token comment\">#Required to assign User as a borrower</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LoanedBookInstancesByUserListViewTest</span><span class=\"token punctuation\">(</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#Create two users</span>\n        test_user1 <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create_user<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string\">'testuser1'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'12345'</span><span class=\"token punctuation\">)</span>\n        test_user1<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        test_user2 <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create_user<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string\">'testuser2'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'12345'</span><span class=\"token punctuation\">)</span>\n        test_user2<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#Create a book</span>\n        test_author <span class=\"token operator\">=</span> Author<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>first_name<span class=\"token operator\">=</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> last_name<span class=\"token operator\">=</span><span class=\"token string\">'Smith'</span><span class=\"token punctuation\">)</span>\n        test_genre <span class=\"token operator\">=</span> Genre<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'Fantasy'</span><span class=\"token punctuation\">)</span>\n        test_language <span class=\"token operator\">=</span> Language<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'English'</span><span class=\"token punctuation\">)</span>\n        test_book <span class=\"token operator\">=</span> Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>title<span class=\"token operator\">=</span><span class=\"token string\">'Book Title'</span><span class=\"token punctuation\">,</span> summary <span class=\"token operator\">=</span> <span class=\"token string\">'My book summary'</span><span class=\"token punctuation\">,</span> isbn<span class=\"token operator\">=</span><span class=\"token string\">'ABCDEFG'</span><span class=\"token punctuation\">,</span> author<span class=\"token operator\">=</span>test_author<span class=\"token punctuation\">,</span> language<span class=\"token operator\">=</span>test_language<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># Create genre as a post-step</span>\n        genre_objects_for_book <span class=\"token operator\">=</span> Genre<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        test_book<span class=\"token punctuation\">.</span>genre<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>genre_objects_for_book<span class=\"token punctuation\">)</span> <span class=\"token comment\">#Direct assignment of many-to-many types not allowed.</span>\n        test_book<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#Create 30 BookInstance objects</span>\n        number_of_book_copies <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n        <span class=\"token keyword\">for</span> book_copy <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>number_of_book_copies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            return_date<span class=\"token operator\">=</span> timezone<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>days<span class=\"token operator\">=</span>book_copy<span class=\"token operator\">%</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> book_copy <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n                the_borrower<span class=\"token operator\">=</span>test_user1\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                the_borrower<span class=\"token operator\">=</span>test_user2\n            status<span class=\"token operator\">=</span><span class=\"token string\">'m'</span>\n            BookInstance<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>book<span class=\"token operator\">=</span>test_book<span class=\"token punctuation\">,</span>imprint<span class=\"token operator\">=</span><span class=\"token string\">'Unlikely Imprint, 2016'</span><span class=\"token punctuation\">,</span> due_back<span class=\"token operator\">=</span>return_date<span class=\"token punctuation\">,</span> borrower<span class=\"token operator\">=</span>the_borrower<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span>status<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_redirect_if_not_logged_in</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        resp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'my-borrowed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertRedirects<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">,</span> <span class=\"token string\">'/accounts/login/?next=/catalog/mybooks/'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_logged_in_uses_correct_template</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        login <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string\">'testuser1'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'12345'</span><span class=\"token punctuation\">)</span>\n        resp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'my-borrowed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#Check our user is logged in</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">[</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'testuser1'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#Check that we got a response \"success\"</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#Check we used correct template</span>\n        self<span class=\"token punctuation\">.</span>assertTemplateUsed<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">,</span> <span class=\"token string\">'catalog/bookinstance_list_borrowed_user.html'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>要验证如果用户未登录，视图将重定向到登录页面，我们使用<code>assertRedirects</code>，如<code>test_redirect_if_not_logged_in()</code>中所示。要验证是否已为登录用户显示该页面，我们首先登录我们的测试用户，然后再次访问该页面，并检查我们获得的<code>status_code</code>为 200（成功）。</p>\n<p>测试的其余部分，验证我们的观点，仅返回借给当前借用人的书本。复制上面测试类末尾的（自解释）代码。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code>    <span class=\"token keyword\">def</span> <span class=\"token function\">test_only_borrowed_books_in_list</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        login <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string\">'testuser1'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'12345'</span><span class=\"token punctuation\">)</span>\n        resp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'my-borrowed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#Check our user is logged in</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">[</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'testuser1'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#Check that we got a response \"success\"</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#Check that initially we don't have any books in list (none on loan)</span>\n        self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span><span class=\"token string\">'bookinstance_list'</span> <span class=\"token keyword\">in</span> resp<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">[</span><span class=\"token string\">'bookinstance_list'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#Now change all books to be on loan</span>\n        get_ten_books <span class=\"token operator\">=</span> BookInstance<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">for</span> copy <span class=\"token keyword\">in</span> get_ten_books<span class=\"token punctuation\">:</span>\n            copy<span class=\"token punctuation\">.</span>status<span class=\"token operator\">=</span><span class=\"token string\">'o'</span>\n            copy<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#Check that now we have borrowed books in the list</span>\n        resp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'my-borrowed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#Check our user is logged in</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">[</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'testuser1'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#Check that we got a response \"success\"</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span><span class=\"token string\">'bookinstance_list'</span> <span class=\"token keyword\">in</span> resp<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#Confirm all books belong to testuser1 and are on loan</span>\n        <span class=\"token keyword\">for</span> bookitem <span class=\"token keyword\">in</span> resp<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">[</span><span class=\"token string\">'bookinstance_list'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">[</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> bookitem<span class=\"token punctuation\">.</span>borrower<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> bookitem<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_pages_ordered_by_due_date</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token comment\">#Change all books to be on loan</span>\n        <span class=\"token keyword\">for</span> copy <span class=\"token keyword\">in</span> BookInstance<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            copy<span class=\"token punctuation\">.</span>status<span class=\"token operator\">=</span><span class=\"token string\">'o'</span>\n            copy<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        login <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string\">'testuser1'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'12345'</span><span class=\"token punctuation\">)</span>\n        resp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'my-borrowed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#Check our user is logged in</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">[</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'testuser1'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#Check that we got a response \"success\"</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#Confirm that of the items, only 10 are displayed due to pagination.</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">[</span><span class=\"token string\">'bookinstance_list'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n        last_date<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> copy <span class=\"token keyword\">in</span> resp<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">[</span><span class=\"token string\">'bookinstance_list'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> last_date<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                last_date<span class=\"token operator\">=</span>copy<span class=\"token punctuation\">.</span>due_back\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span>last_date <span class=\"token operator\">&lt;=</span> copy<span class=\"token punctuation\">.</span>due_back<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>你也可以添加分页测试，如果你愿意的话！</p>\n<h4 id=\"使用表单测试视图\">使用表单测试视图</h4>\n<p>使用表单测试视图，比上面的情况稍微复杂一些，因为您需要测试更多代码路径：初始显示，数据验证失败后显示，以及验证成功后显示。好消息是，我们使用客户端进行测试的方式，与我们对仅显示视图的方式，几乎完全相同。</p>\n<p>为了演示，让我们为用于续借书本的视图，编写一些测试（<code>renew_book_librarian()</code>）：</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>forms <span class=\"token keyword\">import</span> RenewBookForm\n\n<span class=\"token decorator annotation punctuation\">@permission_required</span><span class=\"token punctuation\">(</span><span class=\"token string\">'catalog.can_mark_returned'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">renew_book_librarian</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> pk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    View function for renewing a specific BookInstance by librarian\n    \"\"\"</span>\n    book_inst<span class=\"token operator\">=</span>get_object_or_404<span class=\"token punctuation\">(</span>BookInstance<span class=\"token punctuation\">,</span> pk <span class=\"token operator\">=</span> pk<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># If this is a POST request then process the Form data</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token comment\"># Create a form instance and populate it with data from the request (binding):</span>\n        form <span class=\"token operator\">=</span> RenewBookForm<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Check if the form is valid:</span>\n        <span class=\"token keyword\">if</span> form<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># process the data in form.cleaned_data as required (here we just write it to the model due_back field)</span>\n            book_inst<span class=\"token punctuation\">.</span>due_back <span class=\"token operator\">=</span> form<span class=\"token punctuation\">.</span>cleaned_data<span class=\"token punctuation\">[</span><span class=\"token string\">'renewal_date'</span><span class=\"token punctuation\">]</span>\n            book_inst<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># redirect to a new URL:</span>\n            <span class=\"token keyword\">return</span> HttpResponseRedirect<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'all-borrowed'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># If this is a GET (or any other method) create the default form</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        proposed_renewal_date <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>weeks<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        form <span class=\"token operator\">=</span> RenewBookForm<span class=\"token punctuation\">(</span>initial<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'renewal_date'</span><span class=\"token punctuation\">:</span> proposed_renewal_date<span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">'catalog/book_renew_librarian.html'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'form'</span><span class=\"token punctuation\">:</span> form<span class=\"token punctuation\">,</span> <span class=\"token string\">'bookinst'</span><span class=\"token punctuation\">:</span>book_inst<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>我们需要测试该视图，仅供具有<code>can_mark_returned</code>权限的用户使用，并且如果用户尝试续借不存在的<code>BookInstance</code>，则会将用户重定向到 HTTP 404 错误页面。我们应该检查表单的初始值，是否以未来三周的日期为参考值，如果验证成功，我们将被重定向到“所有借阅的书本”视图。作为验证 - 失败测试的一部分，我们还将检查我们的表单，是否发送了相应的错误消息。</p>\n<p>将测试类的第一部分（如下所示），添加到 <strong>/catalog/tests/test_views.py</strong> 的底部。这将创建两个用户和两个书本实例，但只为一个用户提供访问该视图所需的权限。在测试期间，授予权限的代码以<strong>粗体</strong>显示：</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Permission <span class=\"token comment\"># Required to grant the permission needed to set a book as returned.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RenewBookInstancesViewTest</span><span class=\"token punctuation\">(</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#Create a user</span>\n        test_user1 <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create_user<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string\">'testuser1'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'12345'</span><span class=\"token punctuation\">)</span>\n        test_user1<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        test_user2 <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create_user<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string\">'testuser2'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'12345'</span><span class=\"token punctuation\">)</span>\n        test_user2<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        permission <span class=\"token operator\">=</span> Permission<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'Set book as returned'</span><span class=\"token punctuation\">)</span>\n        test_user2<span class=\"token punctuation\">.</span>user_permissions<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>permission<span class=\"token punctuation\">)</span>\n        test_user2<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#Create a book</span>\n        test_author <span class=\"token operator\">=</span> Author<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>first_name<span class=\"token operator\">=</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> last_name<span class=\"token operator\">=</span><span class=\"token string\">'Smith'</span><span class=\"token punctuation\">)</span>\n        test_genre <span class=\"token operator\">=</span> Genre<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'Fantasy'</span><span class=\"token punctuation\">)</span>\n        test_language <span class=\"token operator\">=</span> Language<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'English'</span><span class=\"token punctuation\">)</span>\n        test_book <span class=\"token operator\">=</span> Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>title<span class=\"token operator\">=</span><span class=\"token string\">'Book Title'</span><span class=\"token punctuation\">,</span> summary <span class=\"token operator\">=</span> <span class=\"token string\">'My book summary'</span><span class=\"token punctuation\">,</span> isbn<span class=\"token operator\">=</span><span class=\"token string\">'ABCDEFG'</span><span class=\"token punctuation\">,</span> author<span class=\"token operator\">=</span>test_author<span class=\"token punctuation\">,</span> language<span class=\"token operator\">=</span>test_language<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># Create genre as a post-step</span>\n        genre_objects_for_book <span class=\"token operator\">=</span> Genre<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        test_book<span class=\"token punctuation\">.</span>genre<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>genre_objects_for_book<span class=\"token punctuation\">)</span> <span class=\"token comment\"># Direct assignment of many-to-many types not allowed.</span>\n        test_book<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#Create a BookInstance object for test_user1</span>\n        return_date<span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>days<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>test_bookinstance1<span class=\"token operator\">=</span>BookInstance<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>book<span class=\"token operator\">=</span>test_book<span class=\"token punctuation\">,</span>imprint<span class=\"token operator\">=</span><span class=\"token string\">'Unlikely Imprint, 2016'</span><span class=\"token punctuation\">,</span> due_back<span class=\"token operator\">=</span>return_date<span class=\"token punctuation\">,</span> borrower<span class=\"token operator\">=</span>test_user1<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#Create a BookInstance object for test_user2</span>\n        return_date<span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>days<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>test_bookinstance2<span class=\"token operator\">=</span>BookInstance<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>book<span class=\"token operator\">=</span>test_book<span class=\"token punctuation\">,</span>imprint<span class=\"token operator\">=</span><span class=\"token string\">'Unlikely Imprint, 2016'</span><span class=\"token punctuation\">,</span> due_back<span class=\"token operator\">=</span>return_date<span class=\"token punctuation\">,</span> borrower<span class=\"token operator\">=</span>test_user2<span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>将以下测试添加到测试类的底部。这些检查只有具有正确权限的用户（testuser2）才能访问该视图。我们检查所有情况：当用户没有登录时、当用户登录但没有正确的权限，当用户有权限但不是借用人（应该成功），以及当他们尝试访问不存在的<code>BookInstance</code>，会发生什么。我们还检查是否使用了正确的模板。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code>    <span class=\"token keyword\">def</span> <span class=\"token function\">test_redirect_if_not_logged_in</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        resp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'renew-book-librarian'</span><span class=\"token punctuation\">,</span> kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'pk'</span><span class=\"token punctuation\">:</span>self<span class=\"token punctuation\">.</span>test_bookinstance1<span class=\"token punctuation\">.</span>pk<span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">#Manually check redirect (Can't use assertRedirect, because the redirect URL is unpredictable)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span> resp<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span><span class=\"token number\">302</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span> resp<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'/accounts/login/'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_redirect_if_logged_in_but_not_correct_permission</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        login <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string\">'testuser1'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'12345'</span><span class=\"token punctuation\">)</span>\n        resp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'renew-book-librarian'</span><span class=\"token punctuation\">,</span> kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'pk'</span><span class=\"token punctuation\">:</span>self<span class=\"token punctuation\">.</span>test_bookinstance1<span class=\"token punctuation\">.</span>pk<span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#Manually check redirect (Can't use assertRedirect, because the redirect URL is unpredictable)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span> resp<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span><span class=\"token number\">302</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span> resp<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'/accounts/login/'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_logged_in_with_permission_borrowed_book</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        login <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string\">'testuser2'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'12345'</span><span class=\"token punctuation\">)</span>\n        resp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'renew-book-librarian'</span><span class=\"token punctuation\">,</span> kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'pk'</span><span class=\"token punctuation\">:</span>self<span class=\"token punctuation\">.</span>test_bookinstance2<span class=\"token punctuation\">.</span>pk<span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#Check that it lets us login - this is our book and we have the right permissions.</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span> resp<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_logged_in_with_permission_another_users_borrowed_book</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        login <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string\">'testuser2'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'12345'</span><span class=\"token punctuation\">)</span>\n        resp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'renew-book-librarian'</span><span class=\"token punctuation\">,</span> kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'pk'</span><span class=\"token punctuation\">:</span>self<span class=\"token punctuation\">.</span>test_bookinstance1<span class=\"token punctuation\">.</span>pk<span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#Check that it lets us login. We're a librarian, so we can view any users book</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span> resp<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_HTTP404_for_invalid_book_if_logged_in</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">import</span> uuid\n        test_uid <span class=\"token operator\">=</span> uuid<span class=\"token punctuation\">.</span>uuid4<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#unlikely UID to match our bookinstance!</span>\n        login <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string\">'testuser2'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'12345'</span><span class=\"token punctuation\">)</span>\n        resp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'renew-book-librarian'</span><span class=\"token punctuation\">,</span> kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'pk'</span><span class=\"token punctuation\">:</span>test_uid<span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span> resp<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_uses_correct_template</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        login <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string\">'testuser2'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'12345'</span><span class=\"token punctuation\">)</span>\n        resp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'renew-book-librarian'</span><span class=\"token punctuation\">,</span> kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'pk'</span><span class=\"token punctuation\">:</span>self<span class=\"token punctuation\">.</span>test_bookinstance1<span class=\"token punctuation\">.</span>pk<span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span> resp<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#Check we used correct template</span>\n        self<span class=\"token punctuation\">.</span>assertTemplateUsed<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">,</span> <span class=\"token string\">'catalog/book_renew_librarian.html'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>添加下一个测试方法，如下所示。这将检查表单的初始日期，是将来三周。请注意我们如何能够访问表单字段的初始值内的值（以<strong>粗体</strong>显示）。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code>    <span class=\"token keyword\">def</span> <span class=\"token function\">test_form_renewal_date_initially_has_date_three_weeks_in_future</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        login <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string\">'testuser2'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'12345'</span><span class=\"token punctuation\">)</span>\n        resp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'renew-book-librarian'</span><span class=\"token punctuation\">,</span> kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'pk'</span><span class=\"token punctuation\">:</span>self<span class=\"token punctuation\">.</span>test_bookinstance1<span class=\"token punctuation\">.</span>pk<span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span> resp<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n        date_3_weeks_in_future <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>weeks<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">[</span><span class=\"token string\">'form'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>initial<span class=\"token punctuation\">[</span><span class=\"token string\">'renewal_date'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> date_3_weeks_in_future <span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>下一个测试（将其添加到类中）会检查如果续借成功，视图会重定向到所有借书的列表。这里的不同之处在于，我们首次展示了，如何使用客户端发布（<code>POST</code>）数据。post 数据是 post 函数的第二个参数，并被指定为键/值的字典。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code>    <span class=\"token keyword\">def</span> <span class=\"token function\">test_redirects_to_all_borrowed_book_list_on_success</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        login <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string\">'testuser2'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'12345'</span><span class=\"token punctuation\">)</span>\n        valid_date_in_future <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>weeks<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        resp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'renew-book-librarian'</span><span class=\"token punctuation\">,</span> kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'pk'</span><span class=\"token punctuation\">:</span>self<span class=\"token punctuation\">.</span>test_bookinstance1<span class=\"token punctuation\">.</span>pk<span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'renewal_date'</span><span class=\"token punctuation\">:</span>valid_date_in_future<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertRedirects<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">,</span> reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'all-borrowed'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n</code></pre></div>\n<div class=\"notecard warning\" id=\"sect14\">\n  <p><strong>警告：</strong> 全部借用的视图作为额外挑战，您的代码可能会改为重定向到主页'/'。如果是这样，请将测试代码的最后两行，修改为与下面的代码类似。请求中的<code>follow=True</code>，确保请求返回最终目标 URL（因此检查<code>/catalog/</code>而不是<code>/</code>）。</p>\n  <div class=\"code-example\"><pre class=\"brush: python notranslate\"><code> resp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'renew-book-librarian'</span><span class=\"token punctuation\">,</span> kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'pk'</span><span class=\"token punctuation\">:</span>self<span class=\"token punctuation\">.</span>test_bookinstance1<span class=\"token punctuation\">.</span>pk<span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'renewal_date'</span><span class=\"token punctuation\">:</span>valid_date_in_future<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>follow<span class=\"token operator\">=</span><span class=\"token boolean\">True</span> <span class=\"token punctuation\">)</span>\n self<span class=\"token punctuation\">.</span>assertRedirects<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">,</span> <span class=\"token string\">'/catalog/'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n</div>\n<p>将最后两个函数，复制到类中，如下所示。这些再次测试<code>POST</code>请求，但在这种情况下具有无效的续借日期。我们使用<code>assertFormError()</code>，来验证错误消息是否符合预期。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code>    <span class=\"token keyword\">def</span> <span class=\"token function\">test_form_invalid_renewal_date_past</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        login <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string\">'testuser2'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'12345'</span><span class=\"token punctuation\">)</span>\n        date_in_past <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>weeks<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        resp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'renew-book-librarian'</span><span class=\"token punctuation\">,</span> kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'pk'</span><span class=\"token punctuation\">:</span>self<span class=\"token punctuation\">.</span>test_bookinstance1<span class=\"token punctuation\">.</span>pk<span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'renewal_date'</span><span class=\"token punctuation\">:</span>date_in_past<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span> resp<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertFormError<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">,</span> <span class=\"token string\">'form'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'renewal_date'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Invalid date - renewal in past'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_form_invalid_renewal_date_future</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        login <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string\">'testuser2'</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token string\">'12345'</span><span class=\"token punctuation\">)</span>\n        invalid_date_in_future <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>weeks<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n        resp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'renew-book-librarian'</span><span class=\"token punctuation\">,</span> kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'pk'</span><span class=\"token punctuation\">:</span>self<span class=\"token punctuation\">.</span>test_bookinstance1<span class=\"token punctuation\">.</span>pk<span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'renewal_date'</span><span class=\"token punctuation\">:</span>invalid_date_in_future<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span> resp<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertFormError<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">,</span> <span class=\"token string\">'form'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'renewal_date'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Invalid date - renewal more than 4 weeks ahead'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>可以使用相似的技术，来测试其他视图。</p>"}},{"type":"prose","value":{"id":"模板","title":"模板","isH3":true,"content":"<p>Django 提供测试 API 来检查您的视图，是否正在调用正确的模板，并允许您验证，是否正在发送正确的信息。但是，没有特定的 API，支持在 Django 中测试 HTML 输出，是否按预期呈现。</p>"}},{"type":"prose","value":{"id":"其他推荐的测试工具","title":"其他推荐的测试工具","isH3":false,"content":"<p>Django 的测试框架，可以帮助您编写有效的单元和集成测试 - 我们只涉及底层单元测试框架<strong>unittest</strong>可以做什么，而不去谈 Django 的其他部分（例如，查看如何使用<a href=\"https://docs.python.org/3.5/library/unittest.mock-examples.html\" class=\"external\" rel=\" noopener\">unittest.mock</a> 修补第三方库，以便您可以更彻底地测试自己的代码）。</p>\n<p>虽然您可以使用许多其他测试工具，但我们只重点介绍两个：</p>\n<ul>\n  <li><a href=\"http://coverage.readthedocs.io/en/latest/\" class=\"external\" rel=\" noopener\">Coverage</a>: 此 Python 工具报告您的测试，实际执行了多少代码。当开始使用时，你正试图找出你应该测试的确切内容，它会特别有用。</li>\n  <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Your_own_automation_environment\">Selenium</a> 是一个在真实浏览器中，自动化测试的框架。它允许您模拟与站点交互的真实用户，并为系统测试您的站点，提供了一个很好的框架（从集成测试开始的下一步）。</li>\n</ul>"}},{"type":"prose","value":{"id":"挑战自己","title":"挑战自己","isH3":false,"content":"<p>有许多模型与视图，我们可以用来测试。比如一个简单的任务，试着为<code>AuthorCreate</code>视图，创造一个测试案例。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthorCreate</span><span class=\"token punctuation\">(</span>PermissionRequiredMixin<span class=\"token punctuation\">,</span> CreateView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Author\n    fields <span class=\"token operator\">=</span> <span class=\"token string\">'__all__'</span>\n    initial<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'date_of_death'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'12/10/2016'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span>\n    permission_required <span class=\"token operator\">=</span> <span class=\"token string\">'catalog.can_mark_returned'</span>\n</code></pre></div>\n<p>请记住，您需要检查您指定的任何内容、或设计的一部分。这将包括谁有权访问，初始日期，使用的模板，以及视图在成功时，重定向的位置。</p>"}},{"type":"prose","value":{"id":"总结","title":"总结","isH3":false,"content":"<p>撰写测试代码既不有趣也不吸引人，因此在创造一个网站时，经常被留到最后才处理（或者完全不处理）。然而，它是一个基础的部分，以保证你的程式码，在更改之后是安全、可发布的，并且维护起来不会花费太多成本。</p>\n<p>本教程中，我們演示了如何为模型、表单和视图，编写并运行测试。最重要的是，我们已经提供给您，应该测试的内容的简短摘要，这通常是您开始时，最难解决的问题。还有很多东西要知道，但即使你已经学到了什么，你也应该能够为你的网站创建有效的单元测试。</p>\n<p>下一个、也是最后一个教程，展示了如何部署精彩的（并经过全面测试的！）Django 网站。</p>"}},{"type":"prose","value":{"id":"也可以参考","title":"也可以参考","isH3":false,"content":"<ul>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/topics/testing/overview/\" class=\"external\" rel=\" noopener\">Writing and running tests</a> (Django docs)</li>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/intro/tutorial05/\" class=\"external\" rel=\" noopener\">Writing your first Django app, part 5 &gt; Introducing automated testing</a> (Django docs)</li>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/topics/testing/tools/\" class=\"external\" rel=\" noopener\">Testing tools reference</a> (Django docs)</li>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/topics/testing/advanced/\" class=\"external\" rel=\" noopener\">Advanced testing topics</a> (Django docs)</li>\n  <li><a href=\"http://toastdriven.com/blog/2011/apr/10/guide-to-testing-in-django/\" class=\"external\" rel=\" noopener\">A Guide to Testing in Django</a> (Toast Driven Blog, 2011)</li>\n  <li><a href=\"http://test-driven-django-development.readthedocs.io/en/latest/index.html\" class=\"external\" rel=\" noopener\">Workshop: Test-Driven Web Development with Django</a> (San Diego Python, 2014)</li>\n  <li><a href=\"https://realpython.com/blog/python/testing-in-django-part-1-best-practices-and-examples/\" class=\"external\" rel=\" noopener\">Testing in Django (Part 1) - Best Practices and Examples</a> (RealPython, 2013)</li>\n</ul><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Learn/Server-side/Django/Forms\"> 上一页 </a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Learn/Server-side/Django\"> Overview: Django</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Learn/Server-side/Django/Deployment\"> 下一页  </a></li>\n</ul>"}},{"type":"prose","value":{"id":"本系列教程","title":"本系列教程","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Introduction\">Django introduction</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/development_environment\">Setting up a Django development environment</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Tutorial_local_library_website\">Django Tutorial: The Local Library website</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/skeleton_website\">Django Tutorial Part 2: Creating a skeleton website</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Models\">Django Tutorial Part 3: Using models</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Admin_site\">Django Tutorial Part 4: Django admin site</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Home_page\">Django Tutorial Part 5: Creating our home page</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Generic_views\">Django Tutorial Part 6: Generic list and detail views</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Sessions\">Django Tutorial Part 7: Sessions framework</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Authentication\">Django Tutorial Part 8: User authentication and permissions</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Forms\">Django Tutorial Part 9: Working with forms</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Testing\" aria-current=\"page\">Django Tutorial Part 10: Testing a Django web application</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Deployment\">Django Tutorial Part 11: Deploying Django to production</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/web_application_security\">Django web application security</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/django_assessment_blog\">DIY Django mini blog</a></li>\n</ul>"}}],"toc":[{"text":"概览","id":"概览"},{"text":"测试结构概述","id":"测试结构概述"},{"text":"如何运行测试","id":"如何运行测试"},{"text":"LocalLibrary 测试","id":"locallibrary_测试"},{"text":"其他推荐的测试工具","id":"其他推荐的测试工具"},{"text":"挑战自己","id":"挑战自己"},{"text":"总结","id":"总结"},{"text":"也可以参考","id":"也可以参考"},{"text":"本系列教程","id":"本系列教程"}],"summary":"随着网站的增长，他们越来越难以手动测试。不仅要进行更多的测试，而且随着组件之间的交互变得越来越复杂，一个区域的小改变可能会影响到其他区域，所以需要做更多的改变来确保一切正常运行，并且在进行更多更改时不会引入错误。减轻这些问题的一种方法是编写自动化测试，每当您进行更改时，都可以轻松可靠地运行测试。本教程演示如何使用 Django 的测试框架自动化您的网站的单元测试。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Django Tutorial Part 10: Testing a Django web application","locale":"en-US","native":"English (US)"},{"title":"Tutorial de Django Parte 10: Probando una aplicación web Django","locale":"es","native":"Español"},{"title":"Django Tutorial Part 10: Testing a Django web application","locale":"fr","native":"Français"},{"title":"Django 튜토리얼 파트 10: Django 웹 어플리케이션 테스트하기","locale":"ko","native":"한국어"},{"title":"Tutorial Django Parte 10: Testando uma aplicação web Django","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Руководство часть 10: Тестирование приложений Django","locale":"ru","native":"Русский"},{"title":"Django Tutorial Part 10: Testing a Django web application","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/learn/server-side/django/testing","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/learn/server-side/django/testing/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Learn","title":"学习 Web 开发"},{"uri":"/zh-CN/docs/Learn/Server-side","title":"服务器端网页编程"},{"uri":"/zh-CN/docs/Learn/Server-side/Django","title":"Django Web 框架 (python)"},{"uri":"/zh-CN/docs/Learn/Server-side/Django/Testing","title":"Django 教程 10: 测试 Django 网页应用"}],"pageTitle":"Django 教程 10: 测试 Django 网页应用 - 学习 Web 开发 | MDN","noIndexing":false}}