{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Django 教程 9: 使用表单","mdn_url":"/zh-CN/docs/Learn/Server-side/Django/Forms","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"\"><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web\"><strong>新手请从这开始！</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Web 入门</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web\">Web 概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/Installing_basic_software\">安装基本软件</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/What_will_your_website_look_like\">您的网站会是什么样？</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/Dealing_with_files\">处理文件</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/HTML_basics\">HTML 基础</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/CSS_basics\">CSS 基础</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript 基础</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/Publishing_your_website\">发布您的网站</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/How_the_Web_works\">Web 如何运作</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/zh-CN/docs/Learn/HTML\"><strong>HTML — 构建 Web</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>HTML 介绍</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML\">HTML 概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Getting_started\">HTML 入门</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML\">脑袋里是什么？HTML 中的元数据</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/HTML_text_fundamentals\">HTML 文字基础</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Creating_hyperlinks\">建立超链接</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Advanced_text_formatting\">高级文字格式</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure\">文档与网站架构</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML\">HTML 除错</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Marking_up_a_letter\">作业：标记字母</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Structuring_a_page_of_content\">作业：构建出有内容的网页</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>多媒体与嵌入</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding\">多媒体与嵌入概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Images_in_HTML\">HTML 中的图片</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Video_and_audio_content\">视频和音频内容</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Other_embedding_technologies\">从对象到 iframe — 其他嵌入技术</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Adding_vector_graphics_to_the_Web\">为 Web 新增向量图</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images\">自适应图片</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Mozilla_splash_page\">作业：Mozilla 醒目页面</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>HTML 表格</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Tables\">HTML 表格概览</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Tables/Basics\">HTML 表格基础</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Tables/Advanced\">HTML 高级表格特性和可访问性</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/HTML/Tables/Structuring_planet_data\">作业：构建行星数据</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/zh-CN/docs/Learn/CSS\"><strong>CSS — 设计 Web</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS 第一步</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/First_steps\">CSS第一步概览</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/First_steps/What_is_CSS\">什么是CSS</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/First_steps/Getting_started\">让我们开始CSS之旅</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/First_steps/How_CSS_is_structured\">如何让构建CSS</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/First_steps/How_CSS_works\">CSS如何运行</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/First_steps/Using_your_new_knowledge\">运用你的新知识</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS 构建基础</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks\">CSS构建基础概览</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">层叠与继承</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Selectors\">CSS选择器</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/The_box_model\">盒模型</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Backgrounds_and_borders\">背景与边框</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Handling_different_text_directions\">处理不同方向的文本</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Overflowing_content\">溢出的内容</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Values_and_units\">值与单位</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Sizing_items_in_CSS\">在CSS中调整大小</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Images_media_form_elements\">图像、媒体和表单元素</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Styling_tables\">样式化表格</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Debugging_CSS\">调试CSS</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Building_blocks/Organizing\">组织你的CSS</a></li>\n      </ol></details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>样式化文字</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Styling_text\">样式化文字概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Styling_text/Fundamentals\">基础文字与字体样式化</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Styling_text/Styling_lists\">样式化列表</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Styling_text/Styling_links\">样式化链接</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Styling_text/Web_fonts\">Web 字体</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/Styling_text/Typesetting_a_homepage\">作业：排版社区大学首页</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS 排版</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout\">CSS 排版概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Introduction\">Introduction to CSS layout</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Normal_Flow\">正常布局流</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Flexbox\">弹性区块</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Grids\">网格</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Floats\">浮动</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Positioning\">定位</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Multiple-column_Layout\">多列布局</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Responsive_Design\">响应式布局</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Media_queries\">媒体查询</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Legacy_Layout_Methods\">传统的布局方法</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Supporting_Older_Browsers\">支持旧的浏览器</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/CSS/CSS_layout/Fundamental_Layout_Comprehension\">基础布局练习</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/zh-CN/docs/Learn/JavaScript\"><strong>JavaScript — 用户端动态脚本</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>JavaScript 第一步</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps\">JavaScript 第一步概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/What_is_JavaScript\">什么是 JavaScript？</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/A_first_splash\">初次接触 JavaScript</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/What_went_wrong\">出现了什么问题？JavaScript 疑难解答</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/Variables\">储存你所需的信息 — 变量</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/Math\">JavaScript 基础概念 — 数字与运算符</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/Strings\">处理文字 — JavaScript 中的字符串</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/Useful_string_methods\">有用的字符串方法</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/Arrays\">数组</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps/Silly_story_generator\">作业：傻瓜故事产生器</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>JavaScript 基础要件</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks\">JavaScript 基础要件概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/conditionals\">在代码中决策 — 条件</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Looping_code\">代码循环</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Functions\">函数 - 可重复利用的代码块</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Build_your_own_function\">建立自己的函数</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Return_values\">函数回传值</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Events\">事件介绍</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Image_gallery\">作业：图库</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>JavaScript 对象介绍</summary>\n          <ol>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects\">JavaScript 对象概述</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/Basics\">对象基础概念</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/Object_prototypes\">对象原型</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/Object-oriented_programming\">Object-oriented programming concepts</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/Classes_in_JavaScript\">Classes in JavaScript</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/JSON\">使用 JSON 资料</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/Object_building_practice\">对象构建实践</a></li>\n            <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects/Adding_bouncing_balls_features\">作业：为弹跳球展示新增功能</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>异步JavaScript</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous\">异步JavaScript概览</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Concepts\">通用异步编程概念</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Introducing\">异步JavaScript简介</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Timeouts_and_intervals\">合作异步JavaScript: 超时和间隔</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Promises\">Promises: 优雅的异步处理</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Async_await\">async和await:让异步编程更简单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Choosing_the_right_approach\">选择正确的方法</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>客户端网页 API</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs\">客户端网页 API</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Introduction\">网页 API 介绍</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents\">操纵文档</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data\">从服务器获取数据</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Third_party_APIs\">第三方 API</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Drawing_graphics\">画图</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Video_and_audio_APIs\">视频与音频 API</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Client-side_storage\">客户端存储</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/zh-CN/docs/Learn/Forms\"><strong>Web表单 — 与用户数据打交道</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Web表单核心</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Forms\">Web表单概览</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Your_first_form\">你的第一个表单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/How_to_structure_a_web_form\">如何构造Web表单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Basic_native_form_controls\">原生表单控件</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/HTML5_input_types\">HTML5的input类型</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Other_form_controls\">其它表单控件</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Styling_web_forms\">样式化Web表单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Advanced_form_styling\">高级表单样式</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/UI_pseudo-classes\">UI 伪类</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Form_validation\">客户端表单验证</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Sending_and_retrieving_form_data\">发送表单数据</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Web表单进阶</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/How_to_build_custom_form_controls\">如何构造自定义表单控件</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Sending_forms_through_JavaScript\">使用JavaScript发送表单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Forms/Property_compatibility_table_for_form_controls\">表单组件兼容性列表</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/zh-CN/docs/Learn/Accessibility\"><strong>可访问性 — 使每个人都能使用 Web</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>可访问性指南</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility\">可访问性概览</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility/What_is_accessibility\">什么是可访问性</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility/HTML\">HTML: 可访问性的好基础</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility/CSS_and_JavaScript\">CSS 和 JavaScript 可访问性最佳实践</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility/WAI-ARIA_basics\">WAI-ARIA 基础</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility/Multimedia\">可访问性多媒体</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Accessibility/Mobile\">移动端可访问性</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>可访问性测评</summary>\n        <ol>\n            <li><a href=\"/zh-CN/docs/Learn/Accessibility/Accessibility_troubleshooting\">作业：可访问性疑难解答</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing\"><strong>工具与测试</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>客户端web开发工具</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools\">客户端web开发工具索引</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Overview\">客户端工具概览</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Command_line\">命令行速成课</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Package_management\">包管理基础</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Introducing_complete_toolchain\">一个完整的工具链</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Deployment\">发布你的应用</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>客户端框架介绍</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Introduction\">客户端框架概览</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Main_features\">框架的主要特性</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>React</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started\">Getting started with React</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_todo_list_beginning\">Beginning our React todo list</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_components\">Componentizing our React app</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state\">React interactivity: Events and state</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_filtering_conditional_rendering\">React interactivity: Editing, filtering, conditional rendering</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_accessibility\">Accessibility in React</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_resources\">React resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Ember</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_getting_started\">Getting started with Ember</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_structure_componentization\">Ember app structure and componentization</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_interactivity_events_state\">Ember interactivity: Events, classes and state</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_conditional_footer\">Ember Interactivity: Footer functionality, conditional rendering</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_routing\">Routing in Ember</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_resources\">Ember resources and troubleshooting</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Vue</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_getting_started\">开始使用Vue</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_first_component\">创建第一个Vue组件</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_rendering_lists\">渲染一个Vue组件列表</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_methods_events_models\">添加一个新的TODO表单: Vue事件、方法、模型</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_styling\">用CSS样式化Vue组件</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_computed_properties\">Using Vue computed properties</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_conditional_rendering  \">Vue conditional rendering: editing existing todos</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_refs_focus_management\">Focus management with Vue refs</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_resources\">Vue resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Svelte</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_getting_started\">Getting started with Svelte</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_Todo_list_beginning\">Starting our Svelte Todo list app</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_variables_props\">Dynamic behavior in Svelte: working with variables and props</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_components\">Componentizing our Svelte app</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_reactivity_lifecycle_accessibility\">Advanced Svelte: Reactivity, lifecycle, accessibility</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_stores\">Working with Svelte stores</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_TypeScript  \">TypeScript support in Svelte</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_deployment_next\">Deployment and next steps</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Angular</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_getting_started\">Getting started with Angular</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_todo_list_beginning\">Beginning our Angular todo list app</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_styling\">Styling our Angular app</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_item_component\">Creating an item component</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_filtering\">Filtering our to-do items</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_building\">Building Angular applications and further resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Git 和 GitHub</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/GitHub\">Git和GitHub 概览</a></li>\n          <li><a href=\"https://guides.github.com/activities/hello-world/\">Hello World</a></li>\n          <li><a href=\"https://guides.github.com/introduction/git-handbook/\">Git Handbook</a></li>\n          <li><a href=\"https://guides.github.com/activities/forking/\">Forking Projects</a></li>\n          <li><a href=\"https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests\">About pull requests</a></li>\n          <li><a href=\"https://guides.github.com/features/issues/\">Mastering Issues</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>跨浏览器测试</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing\">跨浏览器测试概述</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Introduction\">跨浏览器测试介绍</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Testing_strategies\">执行测试策略</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/HTML_and_CSS\">处理常见的 HTML 与 CSS 问题</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/JavaScript\">处理常见的 JavaScript 问题</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Accessibility\">处理常见的可访问性问题</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Feature_detection\">建置功能侦测</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Automated_testing\">自动测试介绍</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Cross_browser_testing/Your_own_automation_environment\">设置您的自动测试环境</a></li>\n        </ol>\n    </details>\n  </li>\n  <li data-default-state=\"open\"><a href=\"/zh-CN/docs/Learn/Server-side\"><strong>服务端网页编程</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>第一步</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/First_steps\">第一步概述</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/First_steps/Introduction\">服务端介绍</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/First_steps/Client-Server_overview\">用户端概述</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/First_steps/Web_frameworks\">服务端网络框架</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/First_steps/Website_security\">网站安全</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n        <summary>Django 网站框架 (Python)</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django\">Django 网站框架 (Python) 概述</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Introduction\">介绍</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/development_environment\">搭建开发环境</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Tutorial_local_library_website\">在线教学：本地图书馆网站</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/skeleton_website\">在线教学 2：建立网站框架</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Models\">在线教学 3：使用模型</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Admin_site\">在线教学 4：Django 管理网站</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Home_page\">在线教学 5：建立我们的首页</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Generic_views\">在线教学 6：通用列表与细节检查</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Sessions\">在线教学 7：会话框架</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Authentication\">在线教学 8：用户授权与许可</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Forms\">在线教学 9：搭配表单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Testing\">在线教学 10：测试 Django 的 Web 应用</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Deployment\">在线教学 11：部署 Django 至产品</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/web_application_security\">Web 应用安全性</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/django_assessment_blog\">作业：DIY 博客</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Express 网页框架 (node.js/JavaScript)</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs\">Express 网页框架 (Node.js/JavaScript) 概览</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Introduction\">Express/Node 介绍</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/development_environment\">架设 Node (Express) 开发环境</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website\">Express 教程： 本地图书馆网站</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">Express 教程 2： 新建网站骨架</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/mongoose\">Express 教程 3： 使用数据库 (Mongoose)</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/routes\">Express 教程 4： 路由和控制器</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express 教程 5： 呈现图书馆数据</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/forms\">Express 教程 6： 使用表单</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/deployment\">Express 教程 7： 部署至生产环境</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"#\"><strong>更多资源</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>常见问题</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Learn/HTML/Howto\">HTML 问题</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/CSS/Howto\">CSS 问题</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/JavaScript/Howto\">JavaScript questions</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Common_questions#Web_mechanics\">Web 是如何运作的</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Common_questions#Tools_and_setup\">工具与安装</a></li>\n          <li><a href=\"/zh-CN/docs/Learn/Common_questions#Design_and_accessibility\">设计与可访问性</a></li>\n        </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal only-in-en-us\" href=\"/en-US/docs/Learn/Server-side/Django/Authentication\" title=\"Currently only available in English (US)\"> 上一页  (en-US)</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Learn/Server-side/Django\"> Overview: Django</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Learn/Server-side/Django/Testing\"> 下一页  </a></li>\n</ul>\n<p>在本教程中，我们将向您展示如何在 Django 中使用 HTML 表单，特别是编写表单以创建，更新和删除模型实例的最简单方法。作为本演示的一部分，我们将扩展<a href=\"/zh-CN/docs/Learn/Server-side/Django/Tutorial_local_library_website\">LocalLibrary</a>网站，以便图书馆员可以使用我们自己的表单（而不是使用管理员应用程序）更新图书，创建，更新和删除作者。</p>\n<table class=\"learn-box standard-table\">\n  <tbody>\n    <tr>\n      <th scope=\"row\">前置条件：</th>\n      <td>\n        完成所有先前的教程主题，包含\n        <a href=\"/en-US/docs/Learn/Server-side/Django/Authentication\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Django 教程 8: 使用者授权与许可 (en-US)</a>。\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">目標：</th>\n      <td>了解如何撰写表单，向使用者取得资料，并更新资料库。了解通用类别表单编辑视图，如何大量地简化用于单一模型的新表单制作。</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"概览","title":"概览","isH3":false,"content":"<p>一张 <a href=\"/zh-CN/docs/Learn/Forms\">HTML 表单</a> ，是由一个或多个栏位/widget 在一个网页上组成的，以用于向使用者收集资料，并提交至伺服器。表单是一个弹性的机制，用于收集使用者输入，有合适的 widgets 可输入许多不同型态的资料，包含文字框、复选框、单选按钮、日期选取组件等等。若是允许我们用 <code>POST</code> 方式传送资料，并附加 CSRF 跨站要求伪造保护，表单也是与伺服器分享资料的一种相对安全的方式。</p>\n<p>在这个教程目前为止，我们还没有创造任何表单，但我们已经在 Django 管理站点遇到这些表单了— 例如以下的撷图展示了一张表单，用于编辑我们的一个 <a href=\"/zh-CN/docs/Learn/Server-side/Django/Models\">Book 书本</a>模型，包含一些选择列表以及文字编辑框。</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Django/Forms/admin_book_add.png\" alt=\"Admin Site - Book Add\" width=\"841\" height=\"780\" loading=\"lazy\">\n</p>\n<p>表单的使用可以很复杂！开发者需要为表单撰写 HTML 语法，在服务端验证输入的资料并经过充分的安全处理（并且可能在浏览器端也需要），回到表单呈现错误信息，告知使用者任何无效的栏位，当成功提交时处理资料，在最后用某些方式回应使用者表单提交成功的信息。经由提供一个框架，让你程序化定义表单以及其中的栏位，Django 表单接手处理了以上这些步骤的大量工作，比如使用这些物件，产生表单的 HTML 源码，并处理大量的验证、使用者互动的工作。</p>\n<p>在本教程中，我们将展示一些方法，用以创造并使用表单，特别是，当你创造用以操作资料模型的表单，通用编辑表单视图如何显著降低你的工作量。在此过程中，我们将通过添加表单，来扩展我们的 LocalLibrary 应用程序，以允许图书馆员更新图书馆书本，我们将创建页面来创建，编辑和删除书本和作者（复制上面显示的表格的基本版本，以便编辑书本）。</p>"}},{"type":"prose","value":{"id":"html_表单","title":"HTML 表单","isH3":false,"content":"<p>首先简要概述<a href=\"/zh-CN/docs/Learn/Forms\">HTML 表单</a>。考虑一个简单的 HTML 表单，其中包含一个文本字段，用于输入某些“团队”的名称及其相关标签：</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Django/Forms/form_example_name_field.png\" alt=\"Simple name field example in HTML form\" width=\"399\" height=\"44\" loading=\"lazy\">\n</p>\n<p>表单在 HTML 中定义为<code>&lt;form&gt;...&lt;/form&gt;</code> 标记内的元素集合，包含至少一个<code>type=\"submit\"</code>的<code>input</code> 输入元素。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/team_name_url/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>team_name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Enter name: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>team_name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name_field<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Default name for team.<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>OK<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>虽然在这里，我们只有一个文本字段，用于输入团队名称，但表单可能包含任意数量的其他输入元素，及其相关标签。字段的<code>type</code> 属性，定义将显示哪种窗口小部件。该字段的名称<code>name</code> 和 <code>id</code>，用于标识 JavaScript / CSS / HTML 中的字段，而<code>value</code> 定义字段首次显示时的初始值。匹配团队标签使用<code>label</code> 标签指定（请参阅上面的“输入名称”Enter name），其中<code>for</code> 字段包含相关<code>input</code>输入的<code>id</code> 值。</p>\n<p>提交输入<code>submit</code> 将显示为一个按钮（默认情况下），用户可以按下该按钮，将表单中所有其他输入元素中的数据，上传到服务器（在本例中，只有<code>team_name</code>）。表单属性定义用于发送数据的 HTTP <code>method</code> 方法，和服务器上数据的目标（<code>action</code>）：</p>\n<ul>\n  <li><code>action</code>: 提交表单时，要发送数据以进行处理的资源 /URL。如果未设置（或设置为空字符串），则表单将提交回当前页面 URL。</li>\n  <li><code>method</code>: 用于发送数据的 HTTP 方法：post 或 get。\n    <ul>\n      <li>如果数据将导致服务器数据库的更改，则应始终使用<code>POST</code> 方法，因为这可以更加抵抗跨站点伪造请求攻击。</li>\n      <li><code>GET</code> 方法，只应用于不更改用户数据的表单（例如搜索表单）。当您希望能够为 URL 添加书签、或共享时，建议使用此选项。</li>\n    </ul>\n  </li>\n</ul>\n<p>服务器的角色，首先是呈现初始表单状态 - 包含空白字段或预先填充初始值。在用户按下提交按钮之后，服务器将从 Web 浏览器，接收具有值的表单数据，并且必须验证该信息。如果表单包含无效数据，则服务器应再次显示表单，这次使用用户输入的数据在“有效”字段中，并使用消息来描述无效字段的问题。一旦服务器获得具有所有有效表单数据的请求，它就可以执行适当的操作（例如，保存数据，返回搜索结果，上载文件等），然后通知用户。</p>\n<p>可以想象，创建 HTML，验证返回的数据，根据需要重新显示输入的数据，和错误报告，以及对有效数据执行所需的操作，都需要花费很多精力才能“正确”。通过删除一些繁重的重复代码，Django 使这变得更容易！</p>"}},{"type":"prose","value":{"id":"django_表单处理流程","title":"Django 表单处理流程","isH3":false,"content":"<p>Django 的表单处理，使用了我们在之前的教程中，学到的所有相同技术（用于显示有关模型的信息）：视图获取请求，执行所需的任何操作，包括从模型中读取数据，然后生成并返回 HTML 页面（从模板中，我们传递一个包含要显示的数据的上下文。使事情变得更复杂的是，服务器还需要能够处理用户提供的数据，并在出现任何错误时，重新显示页面。</p>\n<p>下面显示了 Django 如何处理表单请求的流程图，从对包含表单的页面的请求开始（以绿色显示）。</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Django/Forms/form_handling_-_standard.png\" alt=\"Updated form handling process doc.\" width=\"1180\" height=\"840\" loading=\"lazy\">\n</p>\n<p>基于上图，Django 表单处理的主要内容是：</p>\n<ol>\n  <li>在用户第一次请求时，显示默认表单。\n    <ul>\n      <li>表单可能包含空白字段（例如，如果您正在创建新记录），或者可能预先填充了初始值（例如，如果您要更改记录，或者具有有用的默认初始值）。</li>\n      <li>此时表单被称为未绑定，因为它与任何用户输入的数据无关（尽管它可能具有初始值）。</li>\n    </ul>\n  </li>\n  <li>从提交请求接收数据，并将其绑定到表单。\n    <ul>\n      <li>将数据绑定到表单，意味着当我们需要重新显示表单时，用户输入的数据和任何错误都可取用。</li>\n    </ul>\n  </li>\n  <li>清理并验证数据。\n    <ul>\n      <li>清理数据会对输入执行清理（例如，删除可能用于向服务器发送恶意内容的无效字符）并将其转换为一致的 Python 类型。</li>\n      <li>验证检查值是否适合该字段（例如，在正确的日期范围内，不是太短或太长等）</li>\n    </ul>\n  </li>\n  <li>如果任何数据无效，请重新显示表单，这次使用任何用户填充的值，和问题字段的错误消息。</li>\n  <li>如果所有数据都有效，请执行必要的操作（例如保存数据，发送表单和发送电子邮件，返回搜索结果，上传文件等）</li>\n  <li>完成所有操作后，将用户重定向到另一个页面。</li>\n</ol>\n<p>Django 提供了许多工具和方法，来帮助您完成上述任务。最基本的是 <code>Form</code> 类，它简化了表单 HTML 和数据清理/验证的生成。在下一节中，我们将描述表单如何使用页面的实际示例，来允许图书馆员更新书本籍。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 在我们讨论 Django 更“高级”的表单框架类时，了解 <code>Form</code> 的使用方式，将对您有所帮助。</p>\n</div>"}},{"type":"prose","value":{"id":"续借表单_-_使用表单和功能视图","title":"续借表单 - 使用表单和功能视图","isH3":false,"content":"<p>接下来，我们将添加一个页面，以允许图书馆员，为被借用的书本办理续借。为此，我们将创建一个允许用户输入日期值的表单。我们将从当前日期（正常借用期）起 3 周内，为该字段设定初始值，并添加一些验证，以确保图书管理员无法输入过去的日期、或未来的日期。输入有效日期后，我们会将其写入当前记录的 <code>BookInstance.due_back</code>字段。</p>\n<p>该示例将使用基于函数的视图和<code>Form</code> 类。以下部分，说明了表单的工作方式，以及您需要对正在进行的 LocalLibrary 项目所做的更改。</p>"}},{"type":"prose","value":{"id":"表单","title":"表单","isH3":true,"content":"<p><code>Form</code> 类是 Django 表单处理系统的核心。它指定表单中的字段、其布局、显示窗口小部件、标签、初始值、有效值，以及（一旦验证）与无效字段关联的错误消息。该类还提供了使用预定义格式（表，列表等）在模板中呈现自身的方法，或者用于获取任何元素的值（启用细粒度手动呈现）的方法。</p>\n<h4 id=\"声明表单\">声明表单</h4>\n<p><code>Form</code> 的声明语法，与声明<code>Model</code>非常相似，并且共享相同的字段类型（以及一些类似的参数）。这是有道理的，因为在这两种情况下，我们都需要确保每个字段处理正确类型的数据，受限于有效数据，并具有显示/文档的描述。</p>\n<p>要创建表单，我们导入表单库，从<code>Form</code> 类派生，并声明表单的字段。我们的图书馆图书续借表单的一个非常基本的表单类如下所示：</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">from</span> django <span class=\"token keyword\">import</span> forms\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RenewBookForm</span><span class=\"token punctuation\">(</span>forms<span class=\"token punctuation\">.</span>Form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    renewal_date <span class=\"token operator\">=</span> forms<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span>help_text<span class=\"token operator\">=</span><span class=\"token string\">\"Enter a date between now and 4 weeks (default 3).\"</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h4 id=\"表单字段\">表单字段</h4>\n<p>在这种情况下，我们有一个 <a href=\"https://docs.djangoproject.com/zh-hans/2.0/ref/forms/fields//#datefield\" class=\"external\" rel=\" noopener\"><code>DateField</code></a> 用于输入续借日期，该日期将使用空白值在 HTML 中呈现，默认标签为“续借日期：”，以及一些有用的用法文本：“输入从现在到 4 周之间的日期（默认为 3）周）。”由于没有指定其他可选参数，该字段将使用 <a href=\"https://docs.djangoproject.com/zh-hans/2.0/ref/forms/fields/#django.forms.DateField.input_formats\" class=\"external\" rel=\" noopener\">input_formats</a> 接受日期：YYYY-MM-DD（2016-11-06）、MM/DD/YYYY（02/26/2016）、MM/DD/YY（10/25/16），并且将使用默认<a href=\"https://docs.djangoproject.com/zh-hans/2.0/ref/forms/fields/#widget\" class=\"external\" rel=\" noopener\">小部件</a>呈现：<a href=\"https://docs.djangoproject.com/zh-hans/2.0/ref/forms/widgets/#django.forms.DateInput\" class=\"external\" rel=\" noopener\">DateInput</a>。</p>\n<p>还有许多其他类型的表单字段，您可以从它们与等效模型字段类的相似性中大致认识到：</p>\n<p><a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#booleanfield\" class=\"external\" rel=\" noopener\"><code>BooleanField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#charfield\" class=\"external\" rel=\" noopener\"><code>CharField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#choicefield\" class=\"external\" rel=\" noopener\"><code>ChoiceField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#typedchoicefield\" class=\"external\" rel=\" noopener\"><code>TypedChoiceField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#datefield\" class=\"external\" rel=\" noopener\"><code>DateField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#datetimefield\" class=\"external\" rel=\" noopener\"><code>DateTimeField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#decimalfield\" class=\"external\" rel=\" noopener\"><code>DecimalField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#durationfield\" class=\"external\" rel=\" noopener\"><code>DurationField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#emailfield\" class=\"external\" rel=\" noopener\"><code>EmailField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#filefield\" class=\"external\" rel=\" noopener\"><code>FileField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#filepathfield\" class=\"external\" rel=\" noopener\"><code>FilePathField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#floatfield\" class=\"external\" rel=\" noopener\"><code>FloatField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#imagefield\" class=\"external\" rel=\" noopener\"><code>ImageField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#integerfield\" class=\"external\" rel=\" noopener\"><code>IntegerField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#genericipaddressfield\" class=\"external\" rel=\" noopener\"><code>GenericIPAddressField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#multiplechoicefield\" class=\"external\" rel=\" noopener\"><code>MultipleChoiceField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#typedmultiplechoicefield\" class=\"external\" rel=\" noopener\"><code>TypedMultipleChoiceField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#nullbooleanfield\" class=\"external\" rel=\" noopener\"><code>NullBooleanField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#regexfield\" class=\"external\" rel=\" noopener\"><code>RegexField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#slugfield\" class=\"external\" rel=\" noopener\"><code>SlugField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#timefield\" class=\"external\" rel=\" noopener\"><code>TimeField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#urlfield\" class=\"external\" rel=\" noopener\"><code>URLField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#uuidfield\" class=\"external\" rel=\" noopener\"><code>UUIDField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#combofield\" class=\"external\" rel=\" noopener\"><code>ComboField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#multivaluefield\" class=\"external\" rel=\" noopener\"><code>MultiValueField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#splitdatetimefield\" class=\"external\" rel=\" noopener\"><code>SplitDateTimeField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#modelmultiplechoicefield\" class=\"external\" rel=\" noopener\"><code>ModelMultipleChoiceField</code></a>, <a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#modelchoicefield\" class=\"external\" rel=\" noopener\"><code>ModelChoiceField</code></a>​​​​.</p>\n<p>下面列出了大多数字段共有的参数（这些参数具有合理的默认值）：</p>\n<ul>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#required\" class=\"external\" rel=\" noopener\">required</a>: 如果为<code>True</code>，则该字段不能留空或给出<code>None</code>值。默认情况下需要字段，因此您可以设置<code>required=False</code>以允许表单中的空白值。</li>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#label\" class=\"external\" rel=\" noopener\">label</a>: 在 HTML 中呈现字段时使用的标签。如果未指定<a href=\"https://docs.djangoproject.com/zh-hans/2.0/ref/forms/fields/#label\" class=\"external\" rel=\" noopener\">label</a>，则 Django 将通过大写第一个字母、并用空格替换下划线（例如续订日期）的方式，从字段名称创建一个。</li>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#label-suffix\" class=\"external\" rel=\" noopener\">label_suffix</a>: 默认情况下，标签后面会显示冒号（例如续借日期:)。此参数允许您指定包含其他字符的不同后缀。</li>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#initial\" class=\"external\" rel=\" noopener\">initial</a>: 显示表单时，字段的初始值。</li>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#widget\" class=\"external\" rel=\" noopener\">widget</a>: 要使用的显示小部件。</li>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#help-text\" class=\"external\" rel=\" noopener\">help_text</a> （如上例所示）：可以在表单中显示的附加文本，用于说明如何使用该字段。</li>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#error-messages\" class=\"external\" rel=\" noopener\">error_messages</a>: 字段的错误消息列表。如果需要，您可以使用自己的消息，覆盖这些消息。</li>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#validators\" class=\"external\" rel=\" noopener\">validators</a>: 验证时将在字段上调用的函数列表。</li>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#localize\" class=\"external\" rel=\" noopener\">localize</a>: 启用表单数据输入的本地化（有关详细信息，请参阅链接）。</li>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/#disabled\" class=\"external\" rel=\" noopener\">disabled</a>: 如果为<code>True</code>，该字段会被显示，但无法编辑其值。默认值为<code>False</code>。</li>\n</ul>\n<h4 id=\"验证\">验证</h4>\n<p>Django 提供了许多可以验证数据的地方。验证单个字段的最简单方法，是覆盖要检查的字段的方法<code>clean_&lt;fieldname&gt;()</code> 。因此，例如，我们可以通过实现<code>clean_renewal_date()</code>，验证输入的<code>renewal_date</code> 值是从现在到 4 周之间，如下所示。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">from</span> django <span class=\"token keyword\">import</span> forms\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>exceptions <span class=\"token keyword\">import</span> ValidationError\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>translation <span class=\"token keyword\">import</span> ugettext_lazy <span class=\"token keyword\">as</span> _\n<span class=\"token keyword\">import</span> datetime <span class=\"token comment\">#for checking renewal date range.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RenewBookForm</span><span class=\"token punctuation\">(</span>forms<span class=\"token punctuation\">.</span>Form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    renewal_date <span class=\"token operator\">=</span> forms<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span>help_text<span class=\"token operator\">=</span><span class=\"token string\">\"Enter a date between now and 4 weeks (default 3).\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">clean_renewal_date</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        data <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>cleaned_data<span class=\"token punctuation\">[</span><span class=\"token string\">'renewal_date'</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\">#Check date is not in past.</span>\n        <span class=\"token keyword\">if</span> data <span class=\"token operator\">&lt;</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValidationError<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">(</span><span class=\"token string\">'Invalid date - renewal in past'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">#Check date is in range librarian allowed to change (+4 weeks).</span>\n        <span class=\"token keyword\">if</span> data <span class=\"token operator\">&gt;</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>weeks<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> ValidationError<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">(</span><span class=\"token string\">'Invalid date - renewal more than 4 weeks ahead'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Remember to always return the cleaned data.</span>\n        <span class=\"token keyword\">return</span> data\n</code></pre></div>\n<p>有两件重要的事情需要注意。首先，我们使用<code>self.cleaned_data['renewal_date']</code> 获取数据，并且无论是否在函数末尾更改数据，我们都会返回此数据。此步骤使用默认验证器，将数据“清理”、并清除可能不安全的输入，并转换为数据的正确标准类型（在本例中为 Python <code>datetime.datetime</code>对象）。</p>\n<p>第二点是，如果某个值超出了我们的范围，我们会引发<code>ValidationError</code>，指定在输入无效值时，我们要在表单中显示的错误文本。上面的例子，也将这个文本包含在 <a href=\"https://docs.djangoproject.com/zh-hans/2.0/topics/i18n/translation/\" class=\"external\" rel=\" noopener\">Django 的翻译函数</a><code>ugettext_lazy()</code>中（导入为 <code>_()</code>），如果你想在稍后翻译你的网站，这是一个很好的做法。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 在<a href=\"https://docs.djangoproject.com/zh-hans/2.0/ref/forms/validation/\" class=\"external\" rel=\" noopener\">表单和字段验证</a>（Django docs）中验证表单还有其他很多方法和示例。例如，如果您有多个相互依赖的字段，则可以覆盖<a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/api/#django.forms.Form.clean\" class=\"external\" rel=\" noopener\">Form.clean()</a> 函数并再次引发<code>ValidationError</code>。</p>\n</div>\n<p>这就是我们在这个例子中，对表单所需要了解的全部内容！</p>\n<h4 id=\"复制表单\">复制表单</h4>\n<p>创建并打开文件 <strong>locallibrary/catalog/forms.py</strong>，并将前一个块中的整个代码清单，复制到其中。</p>"}},{"type":"prose","value":{"id":"url_配置","title":"URL 配置","isH3":true,"content":"<p>在创建视图之前，让我们为续借页面添加 URL 配置。将以下配置，复制到<strong>locallibrary/catalog/urls.py</strong> 的底部。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code>urlpatterns <span class=\"token operator\">+=</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'book/&lt;uuid:pk&gt;/renew/'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>renew_book_librarian<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'renew-book-librarian'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>URL 配置会将格式为 <strong>/catalog/book/&lt;bookinstance id&gt;/renew/</strong> 的 URL，重定向到 <strong>views.py</strong> 中，名为<code>renew_book_librarian()</code> 的函数，并将<code>BookInstance</code> id 作为名为 <code>pk</code>的参数发送。只有 <code>pk</code>是正确格式化的 <code>uuid</code>，该模式才会匹配。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 我们可以将捕获的 URL 数据，命名为“<code>pk</code>”，因为我们可以完全控制视图函数（我们不使用需要具有特定名称的参数的通用详细视图类）。然而，<code>pk</code>，“主键”primary key 的缩写，是一个合理的惯例！</p>\n</div>"}},{"type":"prose","value":{"id":"视图","title":"视图","isH3":true,"content":"<p>正如上面的 Django 表单处理过程中，所讨论的那样，视图必须在首次调用时呈现默认表单，然后在数据无效时，重新呈现它，并显示错误消息，或者数据有效时，处理数据，并重定向到新页面。为了执行这些不同的操作，视图必须能够知道，它是第一次被调用以呈现默认表单，还是后续处理以验证数据。</p>\n<p>对于使用<code>POST</code> 请求向服务器提交信息的表单，最常见的模式，是视图针对<code>POST</code> 请求类型进行测试（<code>if request.method == 'POST':</code>) 以识别表单验证请求和<code>GET</code> （使用一个<code>else</code> 条件）来识别初始表单创建请求。如果要使用<code>GET</code> 请求提交数据，则识别这是第一个、还是后续视图调用的典型方法，是读取表单数据（例如，读取表单中的隐藏值）。</p>\n<p>书本续借过程将写入我们的数据库，因此按照惯例，我们使用 <code>POST</code> 请求方法。下面的代码片段，显示了这种函数视图的（非常标准）模式。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> get_object_or_404\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HttpResponseRedirect\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> reverse\n<span class=\"token keyword\">import</span> datetime\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>forms <span class=\"token keyword\">import</span> RenewBookForm\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">renew_book_librarian</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> pk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    book_inst<span class=\"token operator\">=</span>get_object_or_404<span class=\"token punctuation\">(</span>BookInstance<span class=\"token punctuation\">,</span> pk <span class=\"token operator\">=</span> pk<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># If this is a POST request then process the Form data</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token comment\"># Create a form instance and populate it with data from the request (binding):</span>\n        form <span class=\"token operator\">=</span> RenewBookForm<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Check if the form is valid:</span>\n        <span class=\"token keyword\">if</span> form<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># process the data in form.cleaned_data as required (here we just write it to the model due_back field)</span>\n            book_inst<span class=\"token punctuation\">.</span>due_back <span class=\"token operator\">=</span> form<span class=\"token punctuation\">.</span>cleaned_data<span class=\"token punctuation\">[</span><span class=\"token string\">'renewal_date'</span><span class=\"token punctuation\">]</span>\n            book_inst<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># redirect to a new URL:</span>\n            <span class=\"token keyword\">return</span> HttpResponseRedirect<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'all-borrowed'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># If this is a GET (or any other method) create the default form.</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        proposed_renewal_date <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>weeks<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        form <span class=\"token operator\">=</span> RenewBookForm<span class=\"token punctuation\">(</span>initial<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'renewal_date'</span><span class=\"token punctuation\">:</span> proposed_renewal_date<span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">'catalog/book_renew_librarian.html'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'form'</span><span class=\"token punctuation\">:</span> form<span class=\"token punctuation\">,</span> <span class=\"token string\">'bookinst'</span><span class=\"token punctuation\">:</span>book_inst<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>首先，我们导入我们的表单（<code>RenewBookForm</code>）和视图函数中使用的许多其他有用的对象/方法：</p>\n<ul>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/topics/http/shortcuts/#get-object-or-404\" class=\"external\" rel=\" noopener\"><code>get_object_or_404()</code></a>: 根据模型的主键值，从模型返回指定的对象，如果记录不存在，则引发<code>Http404</code> 异常（未找到）。</li>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/ref/request-response/#django.http.HttpResponseRedirect\" class=\"external\" rel=\" noopener\"><code>HttpResponseRedirect</code></a>: 这将创建指向指定 URL 的重定向（HTTP 状态代码 302）。</li>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/ref/urlresolvers/#django.urls.reverse\" class=\"external\" rel=\" noopener\"><code>reverse()</code></a>: 这将从 URL 配置名称和一组参数生成 URL。它是我们在模板中使用的 <code>url</code> 标记的 Python 等价物。</li>\n  <li><a href=\"https://docs.python.org/3/library/datetime.html\" class=\"external\" rel=\" noopener\"><code>datetime</code></a>: 用于操作日期和时间的 Python 库。</li>\n</ul>\n<p>在视图中，我们首先使用 <code>get_object_or_404()</code>中的 <code>pk</code> 参数，来获取当前的 <code>BookInstance</code> （如果这不存在，视图将立即退出，页面将显示“未找到”错误）。如果这不是 <code>POST</code> 请求（由 <code>else</code> 子句处理），那么我们创建默认表单，传递 <code>renewal_date</code> 字段的<code>initial</code> 初始值（如下面的<strong>粗体</strong>所示，这是从当前日期起的 3 周）。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code>    book_inst<span class=\"token operator\">=</span>get_object_or_404<span class=\"token punctuation\">(</span>BookInstance<span class=\"token punctuation\">,</span> pk <span class=\"token operator\">=</span> pk<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># If this is a GET (or any other method) create the default form</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        proposed_renewal_date <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>weeks<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        form <span class=\"token operator\">=</span> RenewBookForm<span class=\"token punctuation\">(</span>initial<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'renewal_date'</span><span class=\"token punctuation\">:</span> proposed_renewal_date<span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">'catalog/book_renew_librarian.html'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'form'</span><span class=\"token punctuation\">:</span> form<span class=\"token punctuation\">,</span> <span class=\"token string\">'bookinst'</span><span class=\"token punctuation\">:</span>book_inst<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>创建表单后，我们调用 <code>render()</code> 来创建 HTML 页面，指定模板和包含表单的上下文。在这种情况下，上下文还包含我们的 <code>BookInstance</code>，我们将在模板中使用它，来提供有关我们正在续借的书本信息。</p>\n<p>但是，如果这是一个<code>POST</code> 请求，那么我们创建表单对象，并使用请求中的数据填充它。此过程称为“绑定”，并且允许我们验证表单。然后我们检查表单是否有效，它运行所有字段上的所有验证代码 - 包括用于检查我们的日期字段，实际上是有效日期的通用代码，以及用于检查日期的特定表单的<code>clean_renewal_date()</code>函数在合适的范围内。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code>    book_inst<span class=\"token operator\">=</span>get_object_or_404<span class=\"token punctuation\">(</span>BookInstance<span class=\"token punctuation\">,</span> pk <span class=\"token operator\">=</span> pk<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># If this is a POST request then process the Form data</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token comment\"># Create a form instance and populate it with data from the request (binding):</span>\n        form <span class=\"token operator\">=</span> RenewBookForm<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Check if the form is valid:</span>\n        <span class=\"token keyword\">if</span> form<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># process the data in form.cleaned_data as required (here we just write it to the model due_back field)</span>\n            book_inst<span class=\"token punctuation\">.</span>due_back <span class=\"token operator\">=</span> form<span class=\"token punctuation\">.</span>cleaned_data<span class=\"token punctuation\">[</span><span class=\"token string\">'renewal_date'</span><span class=\"token punctuation\">]</span>\n            book_inst<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># redirect to a new URL:</span>\n            <span class=\"token keyword\">return</span> HttpResponseRedirect<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'all-borrowed'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">'catalog/book_renew_librarian.html'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'form'</span><span class=\"token punctuation\">:</span> form<span class=\"token punctuation\">,</span> <span class=\"token string\">'bookinst'</span><span class=\"token punctuation\">:</span>book_inst<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>如果表单无效，我们再次调用<code>render()</code> ，但这次在上下文中传递的表单值将包含错误消息。</p>\n<p>如果表单有效，那么我们可以开始使用数据，通过 <code>form.cleaned_data</code>属性访问它（例如 <code>data = form.cleaned_data['renewal_date']</code>）。这里我们只将数据保存到关联的<code>BookInstance</code> 对象的<code>due_back</code> 值中。</p>\n<div class=\"notecard warning\" id=\"sect4\">\n  <p><strong>警告：</strong> 虽然您也可以通过请求直接访问表单数据（例如<code>request.POST['renewal_date']</code> 或 <code>request.GET['renewal_date']</code>（如果使用 GET 请求），但不建议这样做。清理后的数据是无害的、验证过的、并转换为 Python 友好类型。</p>\n</div>\n<p>视图的表单处理部分的最后一步，是重定向到另一个页面，通常是“成功”页面。在这种情况下，我们使用 <code>HttpResponseRedirect</code> 和 <code>reverse()</code> ，重定向到名为'<code>all-borrowed</code>'的视图（这是在 <a href=\"/zh-CN/docs/Learn/Server-side/Django/Authentication#challenge_yourself\">Django 教程第 8 部分中创建的“挑战”：用户身份验证和权限</a>）。如果您没有创建该页面，请考虑重定向到 URL'/'处的主页。</p>\n<p>这就是表单处理本身所需的一切，但我们仍然需要将视图，限制为图书馆员可以访问。我们应该在 <code>BookInstance</code> （“<code>can_renew</code>”）中创建一个新的权限，但为了简单起见，我们只需使用<code>@permission_required</code>函数装饰器，和我们现有的 <code>can_mark_returned</code> 权限。</p>\n<p>因此，最终视图如下所示。请将其复制到 <strong>locallibrary/catalog/views.py</strong> 的底部。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>decorators <span class=\"token keyword\">import</span> permission_required\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> get_object_or_404\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HttpResponseRedirect\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> reverse\n<span class=\"token keyword\">import</span> datetime\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>forms <span class=\"token keyword\">import</span> RenewBookForm\n\n<span class=\"token decorator annotation punctuation\">@permission_required</span><span class=\"token punctuation\">(</span><span class=\"token string\">'catalog.can_mark_returned'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">renew_book_librarian</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> pk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    View function for renewing a specific BookInstance by librarian\n    \"\"\"</span>\n    book_inst<span class=\"token operator\">=</span>get_object_or_404<span class=\"token punctuation\">(</span>BookInstance<span class=\"token punctuation\">,</span> pk <span class=\"token operator\">=</span> pk<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># If this is a POST request then process the Form data</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token comment\"># Create a form instance and populate it with data from the request (binding):</span>\n        form <span class=\"token operator\">=</span> RenewBookForm<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Check if the form is valid:</span>\n        <span class=\"token keyword\">if</span> form<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># process the data in form.cleaned_data as required (here we just write it to the model due_back field)</span>\n            book_inst<span class=\"token punctuation\">.</span>due_back <span class=\"token operator\">=</span> form<span class=\"token punctuation\">.</span>cleaned_data<span class=\"token punctuation\">[</span><span class=\"token string\">'renewal_date'</span><span class=\"token punctuation\">]</span>\n            book_inst<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># redirect to a new URL:</span>\n            <span class=\"token keyword\">return</span> HttpResponseRedirect<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'all-borrowed'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># If this is a GET (or any other method) create the default form.</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        proposed_renewal_date <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>weeks<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        form <span class=\"token operator\">=</span> RenewBookForm<span class=\"token punctuation\">(</span>initial<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'renewal_date'</span><span class=\"token punctuation\">:</span> proposed_renewal_date<span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">'catalog/book_renew_librarian.html'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'form'</span><span class=\"token punctuation\">:</span> form<span class=\"token punctuation\">,</span> <span class=\"token string\">'bookinst'</span><span class=\"token punctuation\">:</span>book_inst<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"模板","title":"模板","isH3":true,"content":"<p>创建视图中引用的模板（<strong>/catalog/templates/catalog/book_renew_librarian.html</strong>），并将下面的代码，复制到其中：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>{% extends \"base_generic.html\" %}\n{% block content %}\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>Renew: {{bookinst.book.title}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Borrower: {{bookinst.borrower}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n    &lt;p{% if bookinst.is_overdue %} class=\"text-danger\"{% endif %}&gt;Due date: {{bookinst.due_back}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        {% csrf_token %}\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span><span class=\"token punctuation\">&gt;</span></span>\n        {{ form }}\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n\n{% endblock %}\n</code></pre></div>\n<p>这里大部分内容，和以前的教程都是完全类似的。我们扩展基本模板，然后重新定义内容块。我们能够引用 <code>{{bookinst}}</code>（及其变量），因为它被传递到 <code>render()</code>函数中的上下文对象中，我们使用这些来列出书名，借阅者和原始截止日期。</p>\n<p>表单代码相对简单。首先，我们声明表单标签，指定表单的提交位置（<code>action</code>）和提交数据的方法（在本例中为“HTTP POST”） - 如果您回想一下页面顶部的 HTML 表单概述，如图所示的空<code>action</code> ，意味着表单数据将被发布回页面的当前 URL（这是我们想要的！）。在标签内部，我们定义了<code>submit</code> 提交输入，用户可以按这个输入来提交数据。在表单标签内添加的<code>{% csrf_token %}</code> ，是 Django 跨站点伪造保护的一部分。</p>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>备注：</strong> 将<code>{% csrf_token %}</code> 添加到您创建的每个使用 <code>POST</code> 提交数据的 Django 模板中。这将减少恶意用户劫持表单的可能性。</p>\n</div>\n<p>剩下的就是 <code>{{form}}</code>模板变量，我们将其传递给上下文字典中的模板。也许不出所料，当如图所示使用时，它提供了所有表单字段的默认呈现，包括它们的标签、小部件、和帮助文本 - 呈现如下所示：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id_renewal_date<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Renewal date:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id_renewal_date<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>renewal_date<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2016-11-08<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">required</span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>helptext<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Enter date between now and 4 weeks (default 3 weeks).<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>备注：</strong> 它可能并不明显，因为我们只有一个字段，但默认情况下，每个字段都在其自己的表格行中定义（这就是变量在上面的<code>table</code> 表格标记内部的原因）。如果您引用模板变量<code>{{ form.as_table }}</code>，会提供相同的渲染。</p>\n</div>\n<p>如果您输入无效日期，您还会获得页面中呈现的错误列表（下面以<strong>粗体</strong>显示）。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id_renewal_date<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Renewal date:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">&gt;</span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>errorlist<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Invalid date - renewal in past<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id_renewal_date<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>renewal_date<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2015-11-08<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">required</span> <span class=\"token punctuation\">/&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>helptext<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Enter date between now and 4 weeks (default 3 weeks).<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"使用表单模板变量的其他方法\">使用表单模板变量的其他方法</h4>\n<p>如上所示使用<code>{{form}}</code>，每个字段都呈现为表格行。您还可以将每个字段呈现为列表项（使用<code>{{form.as_ul}}</code> ）或作为段落（使用<code>{{form.as_p}}</code>）。</p>\n<p>更酷的是，您可以通过使用点表示法，索引其属性，来完全控制表单每个部分的呈现。例如，我们可以为<code>renewal_date</code> 字段访问许多单独的项目：</p>\n<ul>\n  <li><code>{{form.renewal_date}}</code>: 整个领域。</li>\n  <li><code>{{form.renewal_date.errors}}</code>: 错误列表。</li>\n  <li><code>{{form.renewal_date.id_for_label}}</code>: 标签的 id。</li>\n  <li><code>{{form.renewal_date.help_text}}</code>: 字段帮助文本。</li>\n  <li>其他等等！</li>\n</ul>\n<p>有关如何在模板中，手动呈现表单，并动态循环模板字段的更多示例，请参阅<a href=\"https://docs.djangoproject.com/zh-hans/2.0/topics/forms/#rendering-fields-manually\" class=\"external\" rel=\" noopener\">使用表单&gt;手动呈现字段</a>（Django 文档）。</p>"}},{"type":"prose","value":{"id":"测试页面","title":"测试页面","isH3":true,"content":"<p>如果您接受了<a href=\"/zh-CN/docs/Learn/Server-side/Django/Authentication#challenge_yourself\">Django 教程第 8 部分中的“挑战”：用户身份验证和权限</a>，您将获得图书馆中借出的所有书本的列表，这只有图书馆工作人员才能看到。我们可以使用下面的模板代码，为每个项目旁边的续借页面，添加链接。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>{% if perms.catalog.can_mark_returned %}- <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{% url <span class=\"token punctuation\">'</span>renew-book-librarian<span class=\"token punctuation\">'</span> bookinst.id %}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Renew<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>  {% endif %}\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect7\">\n  <p><strong>备注：</strong> 请记住，您的测试登录需要具有“<code>catalog.can_mark_returned</code>”权限，才能访问续借书本页面（可能使用您的超级用户帐户）。</p>\n</div>\n<p>您也可以手动构建这样的测试 URL - <a href=\"http://127.0.0.1:8000/catalog/book/%3Cbookinstance%20id%3E/renew/\" class=\"external\" rel=\" noopener\">http://127.0.0.1:8000/catalog/book/<em>&lt;bookinstance_id&gt;</em>/renew/</a> （可以通过导航到图书馆中的书本详细信息页面，获取有效的 bookinstance id，并复制<code>id</code> 字段）。</p>"}},{"type":"prose","value":{"id":"它看起来是什么样子？","title":"它看起来是什么样子？","isH3":true,"content":"<p>如果您成功，默认表单将如下所示：</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Django/Forms/forms_example_renew_default.png\" alt=\"\" width=\"680\" height=\"292\" loading=\"lazy\">\n</p>\n<p>输入无效值的表单将如下所示：</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Django/Forms/forms_example_renew_invalid.png\" alt=\"\" width=\"658\" height=\"290\" loading=\"lazy\">\n</p>\n<p>所有包含续借链接的图书清单如下所示：</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Django/Forms/forms_example_renew_allbooks.png\" alt=\"\" width=\"613\" height=\"256\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"模型表单","title":"模型表单","isH3":false,"content":"<p>使用上述方法创建<code>Form</code> 类非常灵活，允许您创建任何类型的表单页面，并将其与任何单一模型、或多个模型相关联。</p>\n<p>但是，如果您只需要一个表单，来映射单个模型的字段，那么您的模型，将已经定义了表单中所需的大部分信息：字段、标签、帮助文本等。而不是在表单中重新创建模型定义，使用 <a href=\"https://docs.djangoproject.com/en/2.0/topics/forms/modelforms/\" class=\"external\" rel=\" noopener\">ModelForm</a> 帮助程序类从模型创建表单更容易。然后，可以在视图中使用此<code>ModelForm</code> ，其方式与普通<code>Form</code>完全相同。</p>\n<p>包含与原始<code>RenewBookForm</code> 相同的字段的基本 <code>ModelForm</code> 如下所示。创建表单所需要做的，就是添加带有相关模型（<code>BookInstance</code>）的<code>class Meta</code>、和要包含在表单中的模型字段列表（您可以使用 <code>fields = '__all__'</code>，以包含所有字段，或者您可以使用 <code>exclude</code> （而不是字段），指定不包含在模型中的字段）。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>forms <span class=\"token keyword\">import</span> ModelForm\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> BookInstance\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RenewBookModelForm</span><span class=\"token punctuation\">(</span>ModelForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        model <span class=\"token operator\">=</span> BookInstance\n        fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'due_back'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect8\">\n  <p><strong>备注：</strong> 这可能看起来不像使用<code>Form</code> 那么简单（在这种情况下不是这样，因为我们只有一个字段）。但是，如果你有很多字段，它可以显着减少代码量！</p>\n</div>\n<p>其余信息来自模型字段的定义（例如标签、小部件、帮助文本、错误消息）。如果这些不太正确，那么我们可以在 <code>Meta</code>类中覆盖它们，指定包含要更改的字段、及其新值的字典。例如，在这种形式中，我们可能需要“更新日期”<em>Renewal date</em> 字段的标签（而不是基于字段名称的默认值：截止日期 <em>Due date</em>），并且我们还希望我们的帮助文本，特定于此用例。下面的<code>Meta</code> 显示了如何覆盖这些字段，如果默认值不够，您可以类似地方式设置<code>widgets</code> 窗口小部件和<code>error_messages</code> 。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> BookInstance\n    fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'due_back'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span>\n    labels <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'due_back'</span><span class=\"token punctuation\">:</span> _<span class=\"token punctuation\">(</span><span class=\"token string\">'Renewal date'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span>\n    help_texts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'due_back'</span><span class=\"token punctuation\">:</span> _<span class=\"token punctuation\">(</span><span class=\"token string\">'Enter a date between now and 4 weeks (default 3).'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>要添加验证，您可以使用与普通表单相同的方法 - 定义名为 <code>clean_field_name()</code>的函数，并为无效值引发<code>ValidationError</code> 异常。与我们原始形式的唯一区别，是模型字段名为<code>due_back</code> 而不是“<code>renewal_date</code>”。</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>forms <span class=\"token keyword\">import</span> ModelForm\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> BookInstance\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RenewBookModelForm</span><span class=\"token punctuation\">(</span>ModelForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">clean_due_back</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n       data <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>cleaned_data<span class=\"token punctuation\">[</span><span class=\"token string\">'due_back'</span><span class=\"token punctuation\">]</span>\n\n       <span class=\"token comment\">#Check date is not in past.</span>\n       <span class=\"token keyword\">if</span> data <span class=\"token operator\">&lt;</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n           <span class=\"token keyword\">raise</span> ValidationError<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">(</span><span class=\"token string\">'Invalid date - renewal in past'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n       <span class=\"token comment\">#Check date is in range librarian allowed to change (+4 weeks)</span>\n       <span class=\"token keyword\">if</span> data <span class=\"token operator\">&gt;</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>weeks<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n           <span class=\"token keyword\">raise</span> ValidationError<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">(</span><span class=\"token string\">'Invalid date - renewal more than 4 weeks ahead'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n       <span class=\"token comment\"># Remember to always return the cleaned data.</span>\n       <span class=\"token keyword\">return</span> data\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        model <span class=\"token operator\">=</span> BookInstance\n        fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'due_back'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span>\n        labels <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'due_back'</span><span class=\"token punctuation\">:</span> _<span class=\"token punctuation\">(</span><span class=\"token string\">'Renewal date'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span>\n        help_texts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'due_back'</span><span class=\"token punctuation\">:</span> _<span class=\"token punctuation\">(</span><span class=\"token string\">'Enter a date between now and 4 weeks (default 3).'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>下面的 <code>RenewBookModelForm</code> 类现在在功能上等同于我们原来的 <code>RenewBookForm</code>。您可以在当前使用<code>RenewBookForm</code> 的任何地方导入和使用它。</p>"}},{"type":"prose","value":{"id":"通用编辑视图","title":"通用编辑视图","isH3":false,"content":"<p>我们在上面的函数视图示例中，使用的表单处理算法，表示表单编辑视图中非常常见的模式。Django 通过创建基于模型创建、编辑和删除视图的<a href=\"https://docs.djangoproject.com/zh-hans/2.0/ref/class-based-views/generic-editing/\" class=\"external\" rel=\" noopener\">通用编辑视图</a>，为您抽象出大部分“样板”。这些不仅处理“视图”行为，而且它们会自动从模型中为您创建表单类（<code>ModelForm</code>）。</p>\n<div class=\"notecard note\" id=\"sect9\">\n  <p><strong>备注：</strong> 除了这里描述的编辑视图之外，还有一个 <a href=\"https://docs.djangoproject.com/zh-hans/2.0/ref/class-based-views/generic-editing/#formview\" class=\"external\" rel=\" noopener\">FormView</a>类，它位于我们的函数视图，和其他通用视图之间的“灵活性”与“编码工作”之间。使用 <code>FormView</code> ，您仍然需要创建表单，但不必实现所有标准表单处理模式。相反，您只需提供一个函数的实现，一旦知道提交有效，就会调用该函数。</p>\n</div>\n<p>在本节中，我们将使用通用编辑视图，来创建页面，以添加从我们的库中创建、编辑和删除<code>Author</code> 作者记录的功能 - 有效地提供管理站点一部分的基本重新实现（这可能很有用，如果您需要比管理站点能提供的、更加灵活的管理功能）。</p>"}},{"type":"prose","value":{"id":"视图_2","title":"视图","isH3":true,"content":"<p>打开视图文件（<strong>locallibrary/catalog/views.py</strong>），并将以下代码块，附加到其底部：</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>generic<span class=\"token punctuation\">.</span>edit <span class=\"token keyword\">import</span> CreateView<span class=\"token punctuation\">,</span> UpdateView<span class=\"token punctuation\">,</span> DeleteView\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> reverse_lazy\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Author\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthorCreate</span><span class=\"token punctuation\">(</span>CreateView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Author\n    fields <span class=\"token operator\">=</span> <span class=\"token string\">'__all__'</span>\n    initial<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'date_of_death'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'05/01/2018'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthorUpdate</span><span class=\"token punctuation\">(</span>UpdateView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Author\n    fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'first_name'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'last_name'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'date_of_birth'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'date_of_death'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthorDelete</span><span class=\"token punctuation\">(</span>DeleteView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model <span class=\"token operator\">=</span> Author\n    success_url <span class=\"token operator\">=</span> reverse_lazy<span class=\"token punctuation\">(</span><span class=\"token string\">'authors'</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>如您所见，要创建视图，您需要从<code>CreateView</code>, <code>UpdateView</code>, 和 <code>DeleteView</code>（分别）派生，然后定义关联的模型。</p>\n<p>对于“创建”和“更新”的情况，您还需要指定要在表单中显示的字段（使用与<code>ModelForm</code>相同的语法）。在这种情况下，我们将说明两者的语法，如何显示“所有”字段，以及如何单独列出它们。您还可以使用 field_name / value 对的字典，为每个字段指定初始值（此处我们为了演示目的，而任意设置死亡日期 - 您可能希望删除它！）。默认情况下，这些视图会在成功时，重定向到显示新创建/编辑的模型项的页面，在我们的示例中，这将是我们在上一个教程中，创建的作者详细信息视图。您可以通过显式声明参数<code>success_url</code> ，指定备用重定向位置（与<code>AuthorDelete</code> 类一样）。</p>\n<p><code>AuthorDelete</code> 类不需要显示任何字段，因此不需要指定这些字段。但是你需要指定<code>success_url</code>，因为 Django 没有明显的默认值。在这种情况下，我们使用<a href=\"https://docs.djangoproject.com/en/2.0/ref/urlresolvers/#reverse-lazy\" class=\"external\" rel=\" noopener\"><code>reverse_lazy()</code></a>函数，在删除作者后，重定向到我们的作者列表 - <code>reverse_lazy()</code>是一个延迟执行的<code>reverse()</code>版本，在这里使用，是因为我们提供了一个基于类的 URL 查看属性。</p>"}},{"type":"prose","value":{"id":"模板_2","title":"模板","isH3":true,"content":"<p>“创建”和“更新”视图默认使用相同的模板，它将以您的模型命名：<strong>model_name_form.html</strong>（您可以使用视图中的<code>template_name_suffix</code> 字段，将后缀更改为 <strong>form</strong> 以外的其他内容，例如，<code>template_name_suffix = '_other_suffix'</code>）</p>\n<p>创建模板文件 <strong>locallibrary/catalog/templates/catalog/author_form.html</strong>，并复制到下面的文本中。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>{% extends \"base_generic.html\" %}\n\n{% block content %}\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    {% csrf_token %}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span><span class=\"token punctuation\">&gt;</span></span>\n    {{ form.as_table }}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n{% endblock %}\n</code></pre></div>\n<p>这与我们之前的表单类似，并使用表单呈现字段。另请注意我们如何声明<code>{% csrf_token %}</code>，以确保我们的表单能够抵抗 CSRF 攻击。</p>\n<p>“删除”视图需要查找以 <strong>model_name_confirm_delete.html</strong> 格式命名的模板（同样，您可以在视图中，使用<code>template_name_suffix</code> 更改后缀）。创建模板文件 <strong>locallibrary/catalog/templates/catalog/author_confirm_delete.html</strong> ，并复制到下面的文本中。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>{% extends \"base_generic.html\" %}\n\n{% block content %}\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>Delete Author<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Are you sure you want to delete the author: {{ author }}?<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POST<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  {% csrf_token %}\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Yes, delete.<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n\n{% endblock %}\n</code></pre></div>"}},{"type":"prose","value":{"id":"url_配置_2","title":"URL 配置","isH3":true,"content":"<p>打开 URL 配置文件（<strong>locallibrary/catalog/urls.py</strong>），并将以下配置，添加到文件的底部：</p>\n<div class=\"code-example\"><pre class=\"brush: python notranslate\"><code>urlpatterns <span class=\"token operator\">+=</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'author/create/'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>AuthorCreate<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'author_create'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'author/&lt;int:pk&gt;/update/'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>AuthorUpdate<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'author_update'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'author/&lt;int:pk&gt;/delete/'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>AuthorDelete<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'author_delete'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>这里没有什么特别的新东西！您可以看到视图是类，因此必须通过<code>.as_view()</code>调用，并且您应该能够识别每种情况下的 URL 模式。我们必须使用 <code>pk</code> 作为捕获的主键值的名称，因为这是视图类所期望的参数名称。</p>\n<p>作者的创建，更新和删除页面，现在已准备好进行测试（在这种情况下，我们不会将它们连接到站点侧栏，尽管如果您愿意，也可以这样做）。</p>\n<div class=\"notecard note\" id=\"sect10\">\n  <p><strong>备注：</strong> 敏锐的用户会注意到，我们没有采取任何措施，来防止未经授权的用户访问这些页面！我们将其作为练习留给您（提示：您可以使用<code>PermissionRequiredMixin</code> ，并创建新权限，或重用我们的<code>can_mark_returned</code>权限）。</p>\n</div>"}},{"type":"prose","value":{"id":"测试页面_2","title":"测试页面","isH3":true,"content":"<p>首先，使用具有访问作者编辑页面权限的帐户（由您决定），登录该站点。</p>\n<p>然后导航到作者创建页面： <a href=\"http://127.0.0.1:8000/catalog/author/create/\" class=\"external\" rel=\" noopener\">http://127.0.0.1:8000/catalog/author/create/</a>，它应该如下面的截图。</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Django/Forms/forms_example_create_author.png\" alt=\"Form Example: Create Author\" width=\"645\" height=\"184\" loading=\"lazy\">\n</p>\n<p>输入字段的值，然后按“提交” <strong>Submit</strong> ，保存作者记录。现在，您应该进入新作者的详细视图，其 URL 为 <code>http://127.0.0.1:8000/catalog/author/10</code>。</p>\n<p>您可以通过将 /update/ ，附加到详细视图 URL 的末尾，来测试编辑记录（例如 <code>http://127.0.0.1:8000/catalog/author/10/update/</code>） - 我们不显示截图，因为它看起来就像“创建”页面！</p>\n<p>最后，我们可以删除页面，方法是将删除，附加到作者详细信息视图 URL 的末尾（例如 <code>http://127.0.0.1:8000/catalog/author/10/delete/</code>）。Django 应该显示如下所示的删除页面。按 \"是，删除\" <strong>(Yes, delete)</strong>。删除记录，并将其带到所有作者的列表中。</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Django/Forms/forms_example_delete_author.png\" alt=\"\" width=\"561\" height=\"194\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"挑战自己","title":"挑战自己","isH3":false,"content":"<p>创建一些表单，来创建、编辑和删除书本记录<code>Book</code>。您可以使用与作者<code>Authors</code>完全相同的结构。如果您的 <strong>book_form.html</strong> 模板只是 <strong>author_form.html</strong> 模板的复制重命名版本，则新的“创建图书”页面，将如下所示：</p>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Django/Forms/forms_example_create_book.png\" alt=\"\" width=\"595\" height=\"521\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"总结","title":"总结","isH3":false,"content":"<p>创建和处理表单可能是一个复杂的过程！Django 通过提供声明、呈现和验证表单的编程机制，使其变得更加容易。此外，Django 提供了通用的表单编辑视图，几乎可以完成所有工作，以定义可以创建，编辑和删除与单个模型实例关联的记录的页面。</p>\n<p>表单可以完成更多工作（请参阅下面的“请参阅”列表），但您现在应该了解，如何将基本表单和表单处理代码，添加到您自己的网站。</p>"}},{"type":"prose","value":{"id":"也可以参考","title":"也可以参考","isH3":false,"content":"<ul>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/topics/forms/\" class=\"external\" rel=\" noopener\">Working with forms</a> (Django docs)</li>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/intro/tutorial04/#write-a-simple-form\" class=\"external\" rel=\" noopener\">Writing your first Django app, part 4 &gt; Writing a simple form</a> (Django docs)</li>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/api/\" class=\"external\" rel=\" noopener\">The Forms API</a> (Django docs)</li>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/fields/\" class=\"external\" rel=\" noopener\">Form fields</a> (Django docs)</li>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/ref/forms/validation/\" class=\"external\" rel=\" noopener\">Form and field validation</a> (Django docs)</li>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/topics/class-based-views/generic-editing/\" class=\"external\" rel=\" noopener\">Form handling with class-based views</a> (Django docs)</li>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/topics/forms/modelforms/\" class=\"external\" rel=\" noopener\">Creating forms from models</a> (Django docs)</li>\n  <li><a href=\"https://docs.djangoproject.com/en/2.0/ref/class-based-views/generic-editing/\" class=\"external\" rel=\" noopener\">Generic editing views</a> (Django docs)</li>\n</ul><ul class=\"prev-next\">\n    <li><a class=\"button minimal only-in-en-us\" href=\"/en-US/docs/Learn/Server-side/Django/Authentication\" title=\"Currently only available in English (US)\"> 上一页  (en-US)</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Learn/Server-side/Django\"> Overview: Django</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Learn/Server-side/Django/Testing\"> 下一页  </a></li>\n</ul>"}},{"type":"prose","value":{"id":"本系列教程","title":"本系列教程","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Introduction\">Django introduction</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/development_environment\">Setting up a Django development environment</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Tutorial_local_library_website\">Django Tutorial: The Local Library website</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/skeleton_website\">Django Tutorial Part 2: Creating a skeleton website</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Models\">Django Tutorial Part 3: Using models</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Admin_site\">Django Tutorial Part 4: Django admin site</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Home_page\">Django Tutorial Part 5: Creating our home page</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Generic_views\">Django Tutorial Part 6: Generic list and detail views</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Sessions\">Django Tutorial Part 7: Sessions framework</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Authentication\">Django Tutorial Part 8: User authentication and permissions</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Forms\" aria-current=\"page\">Django Tutorial Part 9: Working with forms</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Testing\">Django Tutorial Part 10: Testing a Django web application</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/Deployment\">Django Tutorial Part 11: Deploying Django to production</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/web_application_security\">Django web application security</a></li>\n  <li><a href=\"/zh-CN/docs/Learn/Server-side/Django/django_assessment_blog\">DIY Django mini blog</a></li>\n</ul>"}}],"toc":[{"text":"概览","id":"概览"},{"text":"HTML 表单","id":"html_表单"},{"text":"Django 表单处理流程","id":"django_表单处理流程"},{"text":"续借表单 - 使用表单和功能视图","id":"续借表单_-_使用表单和功能视图"},{"text":"模型表单","id":"模型表单"},{"text":"通用编辑视图","id":"通用编辑视图"},{"text":"挑战自己","id":"挑战自己"},{"text":"总结","id":"总结"},{"text":"也可以参考","id":"也可以参考"},{"text":"本系列教程","id":"本系列教程"}],"summary":"在本教程中，我们将向您展示如何在 Django 中使用 HTML 表单，特别是编写表单以创建，更新和删除模型实例的最简单方法。作为本演示的一部分，我们将扩展LocalLibrary网站，以便图书馆员可以使用我们自己的表单（而不是使用管理员应用程序）更新图书，创建，更新和删除作者。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Django Tutorial Part 9: Working with forms","locale":"en-US","native":"English (US)"},{"title":"Tutorial de Django Parte 9: Trabajo con formularios","locale":"es","native":"Español"},{"title":"Django didactique - Section 9 : Travailler avec des formulaires","locale":"fr","native":"Français"},{"title":"Django 튜토리얼 파트 9: 폼(form)으로 작업하기","locale":"ko","native":"한국어"},{"title":"Tutorial Django Parte 9: Trabalhando com formulários","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Руководство часть 9: Работа с формами","locale":"ru","native":"Русский"},{"title":"Django Tutorial Part 9: Working with forms","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/learn/server-side/django/forms","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/learn/server-side/django/forms/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Learn","title":"学习 Web 开发"},{"uri":"/zh-CN/docs/Learn/Server-side","title":"服务器端网页编程"},{"uri":"/zh-CN/docs/Learn/Server-side/Django","title":"Django Web 框架 (python)"},{"uri":"/zh-CN/docs/Learn/Server-side/Django/Forms","title":"Django 教程 9: 使用表单"}],"pageTitle":"Django 教程 9: 使用表单 - 学习 Web 开发 | MDN","noIndexing":false}}