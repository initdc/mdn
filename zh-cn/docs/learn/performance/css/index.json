{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"CSS performance optimization","mdn_url":"/zh-CN/docs/Learn/Performance/CSS","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>页面在样式没有渲染完毕的情况下被绘制，在样式渲染完毕后又被刷新，这大概是很糟糕的用户体验。因此，除非浏览器知道当前不需要 该 CSS，否则 该 CSS 将阻止渲染。浏览器只会在下载 CSS 和构建 CSSOM 之后绘制页面。浏览器遵循特定的渲染路径：绘制 paint 仅在布局 layout 之后进行，布局 layout 则在创建渲染树 render tree 之后进行，创建渲染树则需要在 DOM 和 CSSOM 树解析完成后进行。为了优化 CSSOM 的构造，请删除不必要的样式，对 CSS 进行最小化，压缩和缓存，并将页面加载时不需要的 CSS 拆分为其他文件，以减少 CSS 渲染阻塞。</p>"}},{"type":"prose","value":{"id":"阻塞渲染优化","title":"阻塞渲染优化","isH3":true,"content":"<p>CSS 可以使用媒体查询将样式应用在特定条件下。媒体查询对于响应式 Web 设计非常重要，可以帮助我们优化关键渲染路径。浏览器会阻塞渲染，直到它解析完全部的样式，但不会阻塞渲染它认为不会使用的样式，例如打印样式表。通过基于媒体查询将 CSS 分成多个文件，可以防止在下载未使用的 CSS 期间阻止渲染。为了创建非阻塞 CSS 链接，将不会立即使用的样式（例如打印样式）移动到单独的文件中，将 <a href=\"/zh-CN/docs/Web/HTML/Element/link\"><code>&lt;link&gt;</code></a> 添加到 HTML 中，并添加媒体查询，在这种情况下说明它是打印样式表。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>styles.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token comment\">&lt;!-- blocking --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>print.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>print<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token comment\">&lt;!-- not blocking --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mobile.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>screen and (max-width: 480px)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token comment\">&lt;!-- not blocking on large screens --&gt;</span>\n</code></pre></div>\n<p>默认情况下，浏览器假设每个指定的样式表都是阻塞渲染的。通过添加 media 属性附加媒体查询，告诉浏览器何时应用样式表。当浏览器看到一个它知道只会用于特定场景的样式表时，它仍会下载样式，但不会阻塞渲染。通过将 CSS 分成多个文件，主要的 阻塞渲染 文件（本例中为 <code>styles.css</code>）的大小变得更小，从而减少了渲染被阻塞的时间。</p>"}},{"type":"prose","value":{"id":"在_gpu_上呈现动画","title":"在 GPU 上呈现动画","isH3":true,"content":"<p>浏览器针对处理 CSS 动画和不会很好地触发重排（因此也导致重新绘制）的动画属性进行了优化。为了提高性能，可以将被动画化的节点从主线程移到 GPU 上。将导致合成的属性包括 3D transforms (<a href=\"/zh-CN/docs/Web/CSS/transform\"><code>transform: translateZ()</code></a>, <a href=\"/zh-CN/docs/Web/CSS/transform-function/rotate3d\"><code>rotate3d()</code></a>，etc.)，animating transform 和 <a href=\"/zh-CN/docs/Web/CSS/opacity\"><code>opacity</code></a>, <a href=\"/zh-CN/docs/Web/CSS/position\"><code>position: fixed</code></a>，<a href=\"/zh-CN/docs/Web/CSS/will-change\"><code>will-change</code></a>，和 <a href=\"/zh-CN/docs/Web/CSS/filter\"><code>filter</code></a>。一些元素，例如 <a href=\"/zh-CN/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a>, <a href=\"/zh-CN/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> 和 <a href=\"/zh-CN/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a>，也位于各自的图层上。将元素提升为图层（也称为合成）时，动画转换属性将在 GPU 中完成，从而改善性能，尤其是在移动设备上。</p>"}},{"type":"prose","value":{"id":"will-change_属性","title":"<code>will-change</code> 属性","isH3":true,"content":"<p>CSS <a href=\"/zh-CN/docs/Web/CSS/will-change\"><code>will-change</code></a> 属性告诉浏览器元素的哪些属性需要修改，使浏览器能够在元素实际更改之前设置优化，通过在实际更改前执行耗时的工作以提升性能。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token property\">will-change</span><span class=\"token punctuation\">:</span> opacity<span class=\"token punctuation\">,</span> transform<span class=\"token punctuation\">;</span>\n</code></pre></div>","titleAsText":"will-change 属性"}},{"type":"prose","value":{"id":"font-display_属性","title":"<code>font-display</code> 属性","isH3":true,"content":"<p>根据 <a href=\"/zh-CN/docs/Web/CSS/@font-face\">@font-face</a> 规则，<a href=\"/zh-CN/docs/Web/CSS/@font-face/font-display\">font-display</a> 属性定义了浏览器如何加载和显示字体文件，允许文本在字体加载或加载失败时显示回退字体。可以通过依靠折中无样式文本闪现使文本可见替代白屏来提高性能。</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token atrule\"><span class=\"token rule\">@font-face</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> someFont<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">src</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>/path/to/fonts/someFont.woff<span class=\"token punctuation\">)</span></span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'woff'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> 400<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-style</span><span class=\"token punctuation\">:</span> normal<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-display</span><span class=\"token punctuation\">:</span> fallback<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","titleAsText":"font-display 属性"}},{"type":"prose","value":{"id":"contain_属性","title":"<code>contain</code> 属性","isH3":true,"content":"<p>CSS 的 <code>contain</code>属性允许作者指示元素及其内容尽可能独立于文档树的其余部分。这允许浏览器针对 DOM 的有限区域而不是整个页面重新计算布局，样式，绘画，大小或它们的任意组合。</p>","titleAsText":"contain 属性"}}],"toc":[],"summary":"页面在样式没有渲染完毕的情况下被绘制，在样式渲染完毕后又被刷新，这大概是很糟糕的用户体验。因此，除非浏览器知道当前不需要 该 CSS，否则 该 CSS 将阻止渲染。浏览器只会在下载 CSS 和构建 CSSOM 之后绘制页面。浏览器遵循特定的渲染路径：绘制 paint 仅在布局 layout 之后进行，布局 layout 则在创建渲染树 render tree 之后进行，创建渲染树则需要在 DOM 和 CSSOM 树解析完成后进行。为了优化 CSSOM 的构造，请删除不必要的样式，对 CSS 进行最小化，压缩和缓存，并将页面加载时不需要的 CSS 拆分为其他文件，以减少 CSS 渲染阻塞。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"CSS performance optimization","locale":"en-US","native":"English (US)"},{"title":"Optimisation des performances en CSS","locale":"fr","native":"Français"}],"source":{"folder":"zh-cn/learn/performance/css","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/learn/performance/css/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Learn","title":"学习 Web 开发"},{"uri":"/zh-CN/docs/Learn/Performance","title":"Web Performance"},{"uri":"/zh-CN/docs/Learn/Performance/CSS","title":"CSS performance optimization"}],"pageTitle":"CSS performance optimization - 学习 Web 开发 | MDN","noIndexing":false}}