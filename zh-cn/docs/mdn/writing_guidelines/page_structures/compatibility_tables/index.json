{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"兼容性表格和浏览器兼容性数据仓库（BCD）","mdn_url":"/zh-CN/docs/MDN/Writing_guidelines/Page_structures/Compatibility_tables","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n  <ol>\n    <li><a href=\"/zh-CN/docs/MDN/About\">关于 MDN</a></li>\n    <li class=\"toggle\">\n        <details>\n            <summary>为 MDN 做贡献</summary>\n            <ol>\n                <li><a href=\"/zh-CN/docs/MDN/Contribute/Getting_started\">初识MDN</a></li>\n                <li><a href=\"/zh-CN/docs/MDN/Contribute\">为 MDN 做贡献</a></li>\n                <li><a href=\"/zh-CN/docs/MDN/Contribute/Howto\">MDN 使用指南</a></li>\n                <li><a href=\"/zh-CN/docs/MDN/Contribute/Localize\">MDN 本地化</a></li>\n                <li><a href=\"/zh-CN/docs/MDN/Guidelines\">Guidelines</a></li>\n                <li><a href=\"/zh-CN/docs/MDN/Structures\">文档结构</a></li>\n             </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>MDN 为我们的开放 web 文档提供了兼容性表格的标准格式；它是对比所有浏览器之间，包含 DOM、HTML、CSS、JavaScript、SVG 等技术的文档。本文将介绍如何添加和维护生成兼容性表格的数据库，以及如何将表格添加到文章中。</p>\n<p>有关更高级的文档，以及最新的用于表示数据的流程和 JSON 格式的更改，请参考数据仓库的 <a href=\"https://github.com/mdn/browser-compat-data/blob/main/docs/contributing.md\" class=\"external\" rel=\" noopener\">contributor guide</a> 和 <a href=\"https://github.com/mdn/browser-compat-data/blob/main/docs/data-guidelines.md\" class=\"external\" rel=\" noopener\">data guidelines guide</a>。</p>\n<p>如果你有疑问或是发现了问题，欢迎<a href=\"/zh-CN/docs/MDN/Community/Contributing/Getting_started#%E7%AC%AC%E5%9B%9B%E6%AD%A5%EF%BC%9A%E5%AF%BB%E6%B1%82%E5%B8%AE%E5%8A%A9\">与我们联系</a>。</p>"}},{"type":"prose","value":{"id":"如何访问数据仓库","title":"如何访问数据仓库","isH3":false,"content":"<p>数据存储在一个 GitHub 仓库中，请查看 <a href=\"https://github.com/mdn/browser-compat-data\" class=\"external\" rel=\" noopener\">https://github.com/mdn/browser-compat-data</a>。想要访问它，你必须拥有一个 GitHub 账号，fork 浏览器兼容性数据仓库到你自己的账户，然后克隆你的 fork 到你的本地机器。</p>"}},{"type":"prose","value":{"id":"为添加数据做好准备","title":"为添加数据做好准备","isH3":false,"content":"<p>在添加新数据之前，你应该保证你的 fork 已与主仓库同步（它们应包含相同的内容），在你的 fork 里创建一个包含你的更改的分支，再将这个分支 pull 到你本地的仓库。现在，这样你就可以开始贡献了：</p>\n<p>让我们来看一下一个简单的确保你的 fork 与主仓库同步的方法：</p>"}},{"type":"prose","value":{"id":"将浏览器兼容性数据的主仓库添加到远端服务器列表中","title":"将浏览器兼容性数据的主仓库添加到远端服务器列表中","isH3":true,"content":"<p>通过终端或命令行进入你本地克隆的 fork 仓库，并添加一个连接到主（upstream）仓库的远程，就像这样（你只需要做一次）：</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> upstream https://github.com/mdn/browser-compat-data.git\n</code></pre></div>\n<p>如果你不确定你是否完成了这一步，你可以通过命令确认你的仓库在用的远端服务器列表：</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">git</span> remote -v\n</code></pre></div>"}},{"type":"prose","value":{"id":"使用服务器上的内容更新你的_fork","title":"使用服务器上的内容更新你的 fork","isH3":true,"content":"<p>现在，你可以通过以下步骤更新你的 fork：</p>\n<ol>\n  <li>确保你在主分支中：\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">git</span> checkout main\n</code></pre></div>\n  </li>\n  <li>使用以下命令拉取最新的仓库内容：\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">git</span> fetch upstream\n</code></pre></div>\n  </li>\n  <li>使用 rebase 将官方仓库的内容合并到你的主分支：\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">git</span> rebase upstream/main\n</code></pre></div>\n  </li>\n  <li>将更新推送回你在服务器上的 fork 仓库：\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">git</span> push\n</code></pre></div>\n  </li>\n</ol>"}},{"type":"prose","value":{"id":"创建你用于工作的分支","title":"创建你用于工作的分支","isH3":true,"content":"<p>接下来，打开你在服务器上的 fork（它的地址可能是 <code>https://github.com/your-username/browser-compat-data</code>）并且创建一个新分支来存储你的改动。步骤如下：</p>\n<ol>\n  <li>点击“Branch: Main”按钮；</li>\n  <li>在“Find or create a branch…”文本输入框中输入一个新的分支名；</li>\n  <li>点击下方出现的“Create branch <em>name-of-branch</em> from Main”按钮。</li>\n</ol>\n<p>举个例子，如果你想补充 WebVR API 的信息，你可以创建一个名为“webvr”的分支。</p>"}},{"type":"prose","value":{"id":"切换到新分支","title":"切换到新分支","isH3":true,"content":"<p>此时，回到你的终端或命令行，用以下命令将你的新分支同步到你本地的 fork 中：</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">git</span> pull\n</code></pre></div>\n<p>现在用以下命令切换到你的新分支：</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">git</span> checkout name-of-branch\n</code></pre></div>\n<p>现在你可以开始进行你对浏览器兼容信息的补充和修改了。</p>"}},{"type":"prose","value":{"id":"添加数据","title":"添加数据","isH3":false,"content":"<p>为添加新的数据，你需要新建文件以存储你的兼容性数据。对于不同技术的数据，你需要创建的文件也有所不同：</p>\n<ul>\n  <li><strong><a href=\"/zh-CN/docs/Web/HTML\">HTML</a></strong>：被包含在 <a href=\"https://github.com/mdn/browser-compat-data/tree/main/html/elements\" class=\"external\" rel=\" noopener\">browser-compat-data/html/elements</a> 中。每个 HTML 元素对应一个文件。文件需要以元素的小写的名称命名，例如 <code>div.json</code>。</li>\n  <li><strong><a href=\"/zh-CN/docs/Web/CSS\">CSS</a></strong>：每个 CSS 属性或选择器对应一个文件。它们被包含在对应的目录中（请参考 <a href=\"https://github.com/mdn/browser-compat-data/tree/main/css\" class=\"external\" rel=\" noopener\">browser-compat-data/css</a>）。文件需要以 CSS 特性的小写的名称命名，如 <code>background-color.json</code> 或者 <code>hover.json</code>。</li>\n  <li><strong><a href=\"/zh-CN/docs/Web/JavaScript\">JS</a></strong>：被包含在 <a href=\"https://github.com/mdn/browser-compat-data/tree/main/javascript/builtins\" class=\"external\" rel=\" noopener\">browser-compat-data/javascript/builtins</a> 中，每个 JavaScript 对象对应一个文件。文件要以 JavaScript 对象的准确名称命名，保留其大小写，如 <code>Date.json</code> 或 <code>InternalError.json</code>。</li>\n  <li><strong><a href=\"/zh-CN/docs/Web/API\">API</a></strong>：API 中的每个接口对应一个文件。它们在 <a href=\"https://github.com/mdn/browser-compat-data/tree/main/api\" class=\"external\" rel=\" noopener\">browser-compat-data/api</a> 中。每个文件要以接口的准确名称命名，保留其大小写，例如 WebVR API 的文件为 <code>VRDisplay.json</code>、<code>VRDisplayCapabilities.json</code>，等等。</li>\n</ul>\n<p>你创建的每一个文件都必循遵循我们存储库架构中定义的模式；你可以参考<a href=\"https://github.com/mdn/browser-compat-data/blob/main/schemas/compat-data-schema.md\" class=\"external\" rel=\" noopener\">详细的模式描述</a>。</p>"}},{"type":"prose","value":{"id":"基本的兼容性数据的结构","title":"基本的兼容性数据的结构","isH3":true,"content":"<p>让我们来看一下如下的例子。一个 CSS 属性 JSON 文件需要以下的基础结构：</p>\n<div class=\"code-example\"><pre class=\"brush: json notranslate\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"css\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"properties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"border-width\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"__compat\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// …</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>首先有一个 <code>css</code> 对象，其中包含了一个 <code>properties</code> 对象。每个你要设定兼容性数据的特性都对应一个 <code>properties</code> 对象中的成员。而每一个这些成员都有一个 <code>__compat</code> 成员，<code>__compat</code> 成员中则是实际的数据。</p>\n<p>以上的数据能在 <a href=\"https://github.com/mdn/browser-compat-data/blob/main/css/properties/border-width.json\" class=\"external\" rel=\" noopener\">browser-width.json</a> 文件中找到——可将这与 <a href=\"/zh-CN/docs/Web/CSS/border-width#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7\">MDN 上渲染后的浏览器兼容性表格</a>相比较。</p>\n<p>对于其它特性类型，写法是类似的，但对象的名称不同：</p>\n<ul>\n  <li>对于 CSS 选择器，它与 CSS 属性的写法基本相同，不同之处在于顶级对象结构是是 <code>css.selectors</code> 而不是<code>css.properties</code>。请以 <a href=\"https://github.com/mdn/browser-compat-data/blob/main/css/selectors/cue.json\" class=\"external\" rel=\" noopener\">cue.json</a> 作为参考示例。</li>\n  <li>对于 HTML 数据，它的写法基本相同，不同之处在于顶级对象结构是 <code>html.elements</code>。请以 <a href=\"https://github.com/mdn/browser-compat-data/blob/main/html/elements/article.json\" class=\"external\" rel=\" noopener\">article.json</a> 作为参考示例。</li>\n  <li>JS 内置对象对应的顶级结构是 <code>javascript.builtins</code>；请以 <a href=\"https://github.com/mdn/browser-compat-data/blob/main/javascript/builtins/Array.json\" class=\"external\" rel=\" noopener\">Array.json</a> 作为参考示例。</li>\n</ul>\n<p>在一个 HTML、CSS 和 JS 页面中，通常你只需要有一个特性。API 则有些不同——它们总是包含多个子特性（参见下边的<a href=\"#%E5%AD%90%E7%89%B9%E6%80%A7\">子特性</a>）。</p>"}},{"type":"prose","value":{"id":"一个特性中的基础结构","title":"一个特性中的基础结构","isH3":true,"content":"<p>在一个特性的 <code>__compat</code> 成员中，你需要包含以下成员：</p>\n<ul>\n  <li><code>mdn_url</code>：MDN 上这个特性的页面的 URL。注意，这个 URL 不可以带上本地化文件夹名称，例如：是 <code>/docs/…</code> 而不是 <code>/en-US/docs/…</code>。本地化文件夹名称会在页面加载时被添加。</li>\n  <li><code>spec_url</code>：指向定义该特性的规范的 URL 或 URL 数组。</li>\n  <li><code>support</code>：所有不同浏览器对这个特性的浏览器支持的信息。</li>\n  <li><code>status</code>：报告了此特性的标准跟踪状态。</li>\n</ul>\n<p>模式中定义了浏览器成员的名称（参见<a href=\"https://github.com/mdn/browser-compat-data/blob/main/schemas/compat-data-schema.md#browser-identifiers\" class=\"external\" rel=\" noopener\">浏览器标识符</a>）。你应该使用现有定义的标识符的完整列表。如果你希望添加其它浏览器，请先联系我们，因为这可能会产生广泛的影响，不应该在未经认真考虑的情况下就这么做。</p>\n<p>在一个基本的浏览器兼容数据文件中，你只需要在浏览器标识符成员中包含“version_added”（以下我们会说到<a href=\"#%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE%EF%BC%9A%E9%AB%98%E7%BA%A7%E5%9C%BA%E6%99%AF\">高级场景</a>）。其它你可能使用的值还包括：</p>\n<ul>\n  <li>一个版本号：如果你知道一个浏览器开始支持这个特性的准确版本，用一个字符串表述版本号，例如 <code>\"47\"</code>。</li>\n  <li><code>true</code>：如果一个浏览器支持这个特性，但你不知道准确的版本号，取值用 <code>true</code>。</li>\n  <li><code>false</code>：如果一个浏览器不支持这个特性，取值用 <code>false</code>。</li>\n  <li><code>null</code>：如果你不知道某个浏览器是否支持这个特性，取值用 <code>null</code>。</li>\n</ul>\n<p>在 <code>status</code> 成员中，你需要包含三个子成员：</p>\n<ul>\n  <li><code>experimental</code>：如果这个特性是<a href=\"/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#experimental\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">实验性 (en-US)</a>的，取值为 <code>true</code> ，否则为 <code>false</code> 。</li>\n  <li><code>standard_track</code>：如果这个特性是个在某些规范里的标准的属性（最常见的是 W3C/WHATWG，但有其它规范如 Khronos 或 TC39 等），取值为<code>true</code> ，否则为 <code>false</code> 。</li>\n  <li><code>deprecated</code>：如果这个特性已经<a href=\"/en-US/docs/MDN/Writing_guidelines/Experimental_deprecated_obsolete#deprecated_and_obsolete\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">废弃 (en-US)</a>，取值为 <code>true</code>，否则为 <code>false</code>。</li>\n</ul>\n<p>作为例子，以下是 <a href=\"/zh-CN/docs/Web/CSS/border-width#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7\">border-width</a> 特性的数据（参见 <a href=\"https://github.com/mdn/browser-compat-data/blob/main/css/properties/border-width.json\" class=\"external\" rel=\" noopener\">border-width.json</a>）：</p>\n<div class=\"code-example\"><pre class=\"brush: json notranslate\"><code><span class=\"token property\">\"__compat\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"mdn_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://developer.mozilla.org/docs/Web/CSS/border-width\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"spec_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://drafts.csswg.org/css-backgrounds/#the-border-width\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"support\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"chrome\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version_added\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"webview_android\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version_added\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"edge\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version_added\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"edge_mobile\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version_added\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"firefox\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version_added\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"firefox_android\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version_added\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"ie\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version_added\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"4\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"ie_mobile\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version_added\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"6\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"opera\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version_added\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3.5\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"opera_android\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version_added\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"11\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"safari\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version_added\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"safari_ios\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version_added\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"experimental\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"standard_track\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"deprecated\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"添加描述说明\">添加描述说明</h4>\n<p>这是第四个、可选的 <code>__compat</code> 成员——<code>description</code>。可用于包含该特性人类可读的描述。仅当通过浏览数据很难看出该特性是什么时，才应该包含此内容。例如，通过查看数据结构可能不太明白构造函数是什么，因此，你可以像这样包含描述：</p>\n<div class=\"code-example\"><pre class=\"brush: json notranslate\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"api\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"AbortController\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"__compat\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// …</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"AbortController\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"__compat\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"mdn_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://developer.mozilla.org/docs/Web/API/AbortController/AbortController\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;code&gt;AbortController()&lt;/code&gt; constructor\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"support\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            …\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// …</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"子特性","title":"子特性","isH3":true,"content":"<p>在兼容性表格包含多行内容时，你需要在每个特性中使用多个子特性来定义每一行的内容。例如，当你获得了对存储在一行中的特性的基本支持而这一特性还有在规范快要确定时才添加的、仅被部分浏览器支持的新的属性或值时，可能会发生这种情况。</p>\n<p>作为例子，参见 <code>background-color</code> 属性的<a href=\"https://github.com/mdn/browser-compat-data/blob/main/css/properties/background-color.json\" class=\"external\" rel=\" noopener\">兼容性数据</a>和<a href=\"/zh-CN/docs/Web/CSS/background-color\">对应的 MDN 页面</a>。正如上面解释的，该属性的基本支持存在于 <code>__compat</code> 对象内，而其中还有附加的用于浏览器对“alpha 通道对十六进制值”的支持的一行内容。</p>\n<div class=\"code-example\"><pre class=\"brush: json notranslate\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"css\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"properties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"background-color\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"__compat\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// …</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"alpha_ch_for_hex\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"__compat\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// …</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>对于一个 API，你需要将顶层的两个层级定义为 <code>api.name-of-the-interface</code>，然后是定义该接口的浏览器兼容性的顶层的 <code>__compat</code> 部分，然后是接口中包含的每个方法、属性和构造函数这些子特性。基本的结构如下所示：</p>\n<div class=\"code-example\"><pre class=\"brush: json notranslate\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"api\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"VRDisplay\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"__compat\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// …</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"cancelAnimationFrame\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"__compat\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// …</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"capabilities\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"__compat\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// …</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// …</span>\n\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>参见 <a href=\"https://github.com/mdn/browser-compat-data/blob/main/api/VRDisplay.json\" class=\"external\" rel=\" noopener\">VRDisplay.json</a> 以获取完整示例。</p>"}},{"type":"prose","value":{"id":"添加数据：高级场景","title":"添加数据：高级场景","isH3":false,"content":"<p>本节列出了你可能会在浏览器兼容性数据中使用的一些高级功能。这里列出的是最常见的高级功能，并提供了如何在兼容性数据中实现它们的示例。</p>"}},{"type":"prose","value":{"id":"包含一个脚注","title":"包含一个脚注","isH3":true,"content":"<p>通常，兼容性表格会包含某些于条目相关的脚注，这些脚注解释了一些有用的信息或者特性的一些奇怪的行为，这对开发人员会非常有用。例如，<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplay/capabilities\"><code>VRDisplay.capabilities</code> <small>(en-US)</small></a> 的 Chrome Android 条目（参见 <a href=\"https://github.com/mdn/browser-compat-data/blob/main/api/VRDisplay.json\" class=\"external\" rel=\" noopener\">VRDisplay.json</a>）（在撰写本文时）有一个脚注“Currently supported only by Google Daydream.”为了将其包含在兼容性数据中，我们需要在“chrome_android”子成员中添加一个“notes”子成员，就像这样：</p>\n<div class=\"code-example\"><pre class=\"brush: json notranslate\"><code><span class=\"token property\">\"chrome_android\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"version_added\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"notes\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Currently supported only by Google Daydream.\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"包含浏览器厂商的前缀","title":"包含浏览器厂商的前缀","isH3":true,"content":"<p>如果某个特性需要在添加浏览器厂商的前缀后才被支持，你需要在浏览器兼容性数据中明确说明。例如你可能有一个特性在 Firefox 浏览器中要用 <code>-moz-</code> 前缀才被支持，要在兼容性数据中指明这一点，你需在对应的“firefox”子成员中增加一个“prefix”子成员。就像这样：</p>\n<div class=\"code-example\"><pre class=\"brush: json notranslate\"><code><span class=\"token property\">\"firefox\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"version_added\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"prefix\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"-moz-\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"包含浏览器首选项或实验性标志","title":"包含浏览器首选项或实验性标志","isH3":true,"content":"<p>有些特性虽然被某些浏览器所支持，但其是实验性的且默认处于关闭状态。如果用户想要使用此特性，它们需要使用首选项或实验性标志（flags）来启用它。</p>\n<p>为了在兼容性数据中表示这一点，需要在相关的浏览器标识子成员中添加“flags”子成员。“flags”的值是一个对象数组，其中的每个对象包含三个成员：</p>\n<ul>\n  <li><code>type</code>：标志或首选项的类型。最常见的值是“preference”，表示它是在浏览器内部设置的（例如：Firefox 的 <code>about:config</code> 和 Chrome 的 <code>chrome://flags</code>），但有时会使用“compile_flag”，这是在编译浏览器时设置的首选项。</li>\n  <li><code>name</code>：一个表示设置的首选项的名称。例如，“Enable Experimental Web Platform Features”是 Chrome 的 <code>chrome://flags</code> 中存在的一个首选项。</li>\n  <li><code>value_to_set</code>：一个表示需要在首选项中设置的值的字符串，例如“true”。</li>\n</ul>\n<p>因此，若要为 Chrome 支持的某个特性添加首选项或实验性标志，你可以这样编写：</p>\n<div class=\"code-example\"><pre class=\"brush: json notranslate\"><code><span class=\"token property\">\"chrome\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"version_added\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"50\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"flags\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preference\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Enable Experimental Web Platform Features\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"value_to_set\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"true\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p>如果某个特性的开启需要设定多个实验性标志，你可以在“flags”数组中添加额外的对象，就像这样：</p>\n<div class=\"code-example\"><pre class=\"brush: json notranslate\"><code><span class=\"token property\">\"firefox\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"version_added\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"57\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"flags\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preference\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dom.streams.enabled\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"value_to_set\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"true\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preference\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"javascript.options.streams\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"value_to_set\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"true\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"包含特性不再被支持的版本","title":"包含特性不再被支持的版本","isH3":true,"content":"<p>有时一个特性在浏览器的某个版本被加进去，然后又因为该特性被弃用而被移除掉。这可以在“version_removed”子成员中体现。该子成员是一个代表特性被移除的版本的字符串。例如：</p>\n<div class=\"code-example\"><pre class=\"brush: json notranslate\"><code><span class=\"token property\">\"firefox\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"version_added\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"35\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version_removed\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"47\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"包含同一浏览器条目的多个支持数据点","title":"包含同一浏览器条目的多个支持数据点","isH3":true,"content":"<p>有时，我们需要为同一特性中的一个浏览器条目添加多个支持的数据点。</p>\n<p>以 <a href=\"/zh-CN/docs/Web/CSS/text-align-last\"><code>text-align-last</code></a> 属性（参见 <a href=\"https://github.com/mdn/browser-compat-data/blob/main/css/properties/text-align-last.json\" class=\"external\" rel=\" noopener\">text-align-last.json</a>）为例，其中添加了 Chrome 在 35 版本中添加了需要通过首选项开启的对该特性的支持。</p>\n<p>而上述支持在 47 版本中被移除，但同时添加了对 <code>text-align-last</code> 的默认支持。</p>\n<p>要包含这两个数据点，你需要将“chrome”子成员的值设置为包含两个支持信息对象的数组，而不是一个单独的支持信息对象：</p>\n<div class=\"code-example\"><pre class=\"brush: json notranslate\"><code><span class=\"token property\">\"chrome\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"version_added\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"47\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"version_added\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"35\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"version_removed\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"47\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"flags\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preference\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Enable Experimental Web Platform Features\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"value_to_set\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"true\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 你应该将最新或最重要的支持数据点放在数组的最前面——这将帮助只想要了解最新信息的人更容易地阅读这些数据。</p>\n</div>"}},{"type":"prose","value":{"id":"包含一个代替名称","title":"包含一个代替名称","isH3":true,"content":"<p>有时，浏览器会以与规范中不同的名称支持某个特性。例如，浏览器很早就添加了对某个特性的实验性支持，但规范在确定之前使用了一个不同的名称。</p>\n<p>要在浏览器兼容性数据中包含这类特殊的情况，你可以在“alternative_name”成员中添加一个有关代替名称的支持数据点。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 代替名称不一定是别名——这意味着它的行为可能与标准定义的行为不同。</p>\n</div>\n<p>让我们看一个示例。Firefox 支持的 <a href=\"/zh-CN/docs/Web/CSS/border-top-right-radius\"><code>border-top-right-radius</code></a> 属性（参见 <a href=\"https://github.com/mdn/browser-compat-data/blob/2a0cc3f6bb17aa4345441bed47a059dffd847793/css/properties/border-top-right-radius.json\" class=\"external\" rel=\" noopener\">border-top-right-radius.json</a>）：</p>\n<ul>\n  <li>从 4 版本开始，使用标准的名称 <code>border-top-right-radius</code>.</li>\n  <li>从 49 版本开始，使用带有 <code>-webkit-</code> 前缀的名称，处于浏览器兼容性目的。</li>\n  <li>从 1 版本开始，使用代替名称 <code>-moz-border-radius-topright</code>。该别名的支持在 12 版本中被移除。</li>\n</ul>\n<p>要在数据中表示这些内容，我们需要使用以下的 JSON：</p>\n<div class=\"code-example\"><pre class=\"brush: json notranslate\"><code><span class=\"token property\">\"firefox\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"version_added\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"notes\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Prior to Firefox 50.0, border styles of rounded corners were always rendered as if &lt;code&gt;border-style&lt;/code&gt; was solid. This has been fixed in Firefox 50.0.\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"prefix\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"-webkit-\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"version_added\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"49\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"notes\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"From Firefox 44 to 48, the &lt;code&gt;-webkit-&lt;/code&gt; prefix was available with the &lt;code&gt;layout.css.prefixes.webkit&lt;/code&gt; preference. Starting with Firefox 49, the preference defaults to &lt;code&gt;true&lt;/code&gt;.\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"alternative_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"-moz-border-radius-topright\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"version_added\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"version_removed\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"12\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"将变更推送回主仓库","title":"将变更推送回主仓库","isH3":false,"content":"<p>在你添加完你的兼容性数据之后，你应该先用以下命令测试一下：</p>\n<ul>\n  <li><code>npm run lint</code>——测试所有兼容性数据以确保 JSON 的格式和书写风格正确，例如正确的缩进和没有遗漏逗号等等。该命令会打印出一个很长的文件名和测试结果的列表；如果发现了一个错误，代码错误检查工具会抛出文件中的错误，并提供有用的调试信息（如：行号、错误信息，等等）。</li>\n  <li><code>npm run show-errors</code>——根据数据模式验证 JSON 是否正确，并突出显示存在的错误，例如：使用的浏览器版本号无效。</li>\n</ul>\n<p>如果没有发现问题，那么你需要提交它，并将其推送回你在 GitHub 上的远程分支。你可以使用以下终端命令完成这一操作：</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">'adding compat data for name-of-feature'</span>\n<span class=\"token function\">git</span> push\n</code></pre></div>\n<p>现在，转到你的远程分支（例如 <code>https://github.com/your-username/browser-compat-data</code>），你应该会在文件列表的顶部（在“Your recently pushed branches”下）看到有关你的推送的信息。你可以按下“Compare &amp; pull request”按钮以创建拉取请求（pull request）（开始将其推送到主仓库的流程），然后按照屏幕上的提示进行后续的操作。</p>\n<p>现在，你只需要等待。审查员会审查你的拉取请求，然后将其合并到主仓库或要求你作出一些修改。如果需要修改，请进行相应的修改并再次提交，直至拉取请求被接受。</p>"}},{"type":"prose","value":{"id":"将数据插入_mdn_页面","title":"将数据插入 MDN 页面","isH3":false,"content":"<p>一旦你创建的兼容性数据被包含在 <a href=\"https://github.com/mdn/browser-compat-data\" class=\"external\" rel=\" noopener\">browser-compat-data</a> 主仓库中，你就可以开始根据 MDN 页面上的数据动态生成浏览器兼容性表格和规范表格。</p>\n<p>首先，你需要确定你希望包含的相关兼容性数据的查询字符串。可以通过检查其源文件来确定。例如：</p>\n<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/AbortController\"><code>AbortController</code></a> 的兼容性数据在 <a href=\"https://github.com/mdn/browser-compat-data/blob/main/api/AbortController.json\" class=\"external\" rel=\" noopener\">AbortController.json</a> 中定义，可以使用 <code>api.AbortController</code> 来引用它。</li>\n  <li><a href=\"/zh-CN/docs/Web/HTTP/Headers/Content-Type\"><code>Content-Type</code></a> HTTP 标头的兼容性数据在 <a href=\"https://github.com/mdn/browser-compat-data/blob/main/http/headers/content-type.json\" class=\"external\" rel=\" noopener\">content-type.json</a> 中定义，可以使用 <code>http.headers.Content-Type</code> 来引用它。</li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplay/capabilities\"><code>VRDisplay.capabilities</code> <small>(en-US)</small></a> 属性的兼容性数据在 <a href=\"https://github.com/mdn/browser-compat-data/blob/main/api/VRDisplay.json\" class=\"external\" rel=\" noopener\">VRDisplay.json</a> 中定义，可以使用 <code>api.VRDisplay.capabilities</code> 来引用它。</li>\n</ul>\n<p>兼容性数据的查询字符串应在页面的元数据（front-matter）中使用 <code>browser-compat</code> 这个键来指定。例如，对于 <a href=\"/zh-CN/docs/Web/API/AbortController\"><code>AbortController</code></a>，应该这样添加：</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">---\ntitle: AbortController\nslug: Web/API/AbortController\n\n…\n\nbrowser-compat: api.AbortController\n---\n\n</pre></div>\n<p>然后源码中的 <code>{{Compat}}</code> 和 <code>{{Specifications}}</code> 宏将会被自动渲染为与元数据对应的兼容性表格和规范表格。</p>\n<p>你还可以将宏的第一个参数指定为需要的 API，就像这样：<code>{{Compat(\"api.AbortController\")}}</code>。如果需要在同一页面中插入多个兼容性表格，这会非常有用。</p>\n<p>宏的调用会生成以下的表格（以及对应的备注）：</p>\n<h4 id=\"兼容性表格示例\">兼容性表格示例</h4>"}},{"type":"browser_compatibility","value":{"title":null,"id":null,"isH3":false,"query":"api.AbortController","dataURL":"/zh-CN/docs/MDN/Writing_guidelines/Page_structures/Compatibility_tables/bcd.json"}},{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<h4 id=\"规范表格示例\">规范表格示例</h4>"}},{"type":"specifications","value":{"title":null,"id":null,"isH3":false,"specifications":[{"bcdSpecificationURL":"https://dom.spec.whatwg.org/#interface-abortcontroller","title":"DOM Standard"}],"query":"api.AbortController"}}],"toc":[{"text":"如何访问数据仓库","id":"如何访问数据仓库"},{"text":"为添加数据做好准备","id":"为添加数据做好准备"},{"text":"添加数据","id":"添加数据"},{"text":"添加数据：高级场景","id":"添加数据：高级场景"},{"text":"将变更推送回主仓库","id":"将变更推送回主仓库"},{"text":"将数据插入 MDN 页面","id":"将数据插入_mdn_页面"}],"summary":"MDN 为我们的开放 web 文档提供了兼容性表格的标准格式；它是对比所有浏览器之间，包含 DOM、HTML、CSS、JavaScript、SVG 等技术的文档。本文将介绍如何添加和维护生成兼容性表格的数据库，以及如何将表格添加到文章中。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Compatibility tables and the browser compatibility data repository (BCD)","locale":"en-US","native":"English (US)"},{"title":"互換性一覧表とブラウザー互換性データリポジトリー (BCD)","locale":"ja","native":"日本語"}],"source":{"folder":"zh-cn/mdn/writing_guidelines/page_structures/compatibility_tables","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/mdn/writing_guidelines/page_structures/compatibility_tables/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/MDN","title":"MDN 项目"},{"uri":"/zh-CN/docs/MDN/Writing_guidelines","title":"撰写指南"},{"uri":"/zh-CN/docs/MDN/Writing_guidelines/Page_structures","title":"文档结构"},{"uri":"/zh-CN/docs/MDN/Writing_guidelines/Page_structures/Compatibility_tables","title":"兼容性表格和浏览器兼容性数据仓库（BCD）"}],"pageTitle":"兼容性表格和浏览器兼容性数据仓库（BCD） - MDN 项目 | MDN","noIndexing":false}}