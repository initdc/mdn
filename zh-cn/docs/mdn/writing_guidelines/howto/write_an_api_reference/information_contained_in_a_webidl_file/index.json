{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Information contained in a WebIDL file","mdn_url":"/zh-CN/docs/MDN/Writing_guidelines/Howto/Write_an_API_reference/Information_contained_in_a_WebIDL_file","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n  <ol>\n    <li><a href=\"/zh-CN/docs/MDN/About\">关于 MDN</a></li>\n    <li class=\"toggle\">\n        <details>\n            <summary>为 MDN 做贡献</summary>\n            <ol>\n                <li><a href=\"/zh-CN/docs/MDN/Contribute/Getting_started\">初识MDN</a></li>\n                <li><a href=\"/zh-CN/docs/MDN/Contribute\">为 MDN 做贡献</a></li>\n                <li><a href=\"/zh-CN/docs/MDN/Contribute/Howto\">MDN 使用指南</a></li>\n                <li><a href=\"/zh-CN/docs/MDN/Contribute/Localize\">MDN 本地化</a></li>\n                <li><a href=\"/zh-CN/docs/MDN/Guidelines\">Guidelines</a></li>\n                <li><a href=\"/zh-CN/docs/MDN/Structures\">文档结构</a></li>\n             </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>在编写有关 API 的文档时，信息来源很多：规范描述了应该实现的内容以及模型，实现描述了实际放在浏览器中的内容。WebIDL 文件是一种非常简洁的方式，可以提供很多（但不是全部）有关 API 的信息。本文档提供了有助于理解 WebIDL 语法的参考。</p>\n<p>IDL 代表**<em>接口定义语言</em>**，它用于描述 API。在更广泛的计算领域，有几种 IDL。在浏览器领域，我们使用的 IDL 称为<em>WebIDL</em>。有两种 WebIDL 可用：WebIDL 规范中给出的一种，以及在浏览器中实现的一种。规范是规范引用，浏览器 WebIDL 描述了在特定浏览器中实际实现的内容，并包含其他内容，例如注释和有关非标准元素的信息。</p>"}},{"type":"prose","value":{"id":"在哪里可以找到_webidl_文件","title":"在哪里可以找到 WebIDL 文件","isH3":false,"content":"<p>WebIDL 可以在多个位置找到：</p>\n<ul>\n  <li>每个规范在文本中都包含 WebIDL：它是一种传达精确定义的非常方便的方法。这些描述了 API 的语法。虽然是规范参考，但我们必须记住，它们可能与实际实施不同。在 MDN 上，我们希望实用并记录 Web 平台的真正含义，而不是理想应该是什么。因此，请仔细检查实现中的内容（如果发现错误，请不要犹豫，立即提交）。</li>\n  <li>三个浏览器引擎使用（修改）WebIDL 作为其工具链的一部分：Gecko，Chromium / Blink 和 WebCore / WebKit。Edge 在内部使用它，但遗憾的是它们不公开（它会帮助我们很多）。\n    <ul>\n      <li>对于 Gecko，所有 WebIDL 文件都分组在一个目录中：<a href=\"https://dxr.mozilla.org/mozilla-central/source/dom/webidl/\" class=\"external\" rel=\" noopener\">https://dxr.mozilla.org/mozilla-central/source/dom/webidl/</a></li>\n      <li>他们的延伸是<code>.webidl</code>。<code>*.idl</code>Gecko 源代码树中还有其他 文件，但它们不是 WebIDL，因此您可以忽略它们。旧版本的 Gecko 有一些 WebIDL 分散在某些地方，甚至可能使用 Mozilla 的 IDL 而不是 WebIDL 来描述一些 Web 界面，但这在任何最近的 Gecko 代码中都不会成为问题。</li>\n      <li>对于 Chromium，它们分散在源代码中，所以你需要多花点功夫：例如<a href=\"http://src.chromium.org/viewvc/blink/trunk/Source/modules/mediastream/MediaStream.idl\" class=\"external\" rel=\" noopener\">http://src.chromium.org/viewvc/blink/trunk/Source/modules/mediastream/MediaStream.idl</a></li>\n      <li>同样，WebCore 正如预期的那样，因为 Chromium 是从它分叉出来的，例如<a href=\"https://github.com/WebKit/webkit/blob/master/Source/WebCore/html/DOMTokenList.idl\" class=\"external\" rel=\" noopener\">https://github.com/WebKit/webkit/blob/master/Source/WebCore/html/DOMTokenList.idl</a></li>\n    </ul>\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"different_dialects_of_webidl","title":"Different dialects of WebIDL","isH3":false,"content":"<p>WebIDL is defined in <a href=\"https://heycam.github.io/webidl/\" class=\"external\" rel=\" noopener\">its specification</a>. But it has been designed to be extended to convey more information, and browser vendors have done so:</p>\n<ul>\n  <li>For Gecko, MDN has the <a href=\"/zh-CN/docs/Mozilla/WebIDL_bindings\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">documentation</a> of its dialectal WebIDL.</li>\n  <li>For Chromium, Google also created a <a href=\"https://www.chromium.org/blink/webidl\" class=\"external\" rel=\" noopener\">document</a> to describe its extensions.</li>\n  <li>For WebCore, Apple also made available a <a href=\"https://trac.webkit.org/wiki/WebKitIDL\" class=\"external\" rel=\" noopener\">page</a> for its dialect.</li>\n</ul>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> We describe here only the subset of WebIDL which is most useful when writing documentation. There are many more annotations useful for implementers; refer to the four documents linked above to have a complete overview.</p>\n</div>"}},{"type":"prose","value":{"id":"interfaces","title":"Interfaces","isH3":false,"content":"<p>This section explains the WebIDL syntax that describes overall API features.</p>"}},{"type":"prose","value":{"id":"name_of_the_interface","title":"Name of the interface","isH3":true,"content":"<p>The interface name is the string that appears after the keyword <code>interface</code> and before the next opening bracket (<code>'{'</code>) or colon (<code>':'</code>).</p>\n<pre class=\"notranslate\">interface URL {};\n</pre>\n<p>Each WebIDL interface, being a true interface or a mixin, has its own page in the documentation, listing every constructor, property and method defined for it.</p>"}},{"type":"prose","value":{"id":"inheritance_chain","title":"Inheritance chain","isH3":true,"content":"<p>The parent, if any, of a given interface is defined after the interface name, following a colon (<code>':'</code>). There can be only one parent per interface.</p>\n<pre class=\"notranslate\">interface HTMLMediaElement : HTMLElement {…}\n</pre>\n<p>The inheritance chain is listed automatically in the sidebar (using the {{APIRef}} macro). It can also be added as an SVG image via the macro {{InheritanceDiagram}}.</p>"}},{"type":"prose","value":{"id":"mixins","title":"Mixins","isH3":true,"content":"<p>Some properties or methods are available to several interfaces. To prevent redefinition they are defined in special WebIDL interfaces called <em>mixins</em>. In the WebIDL, they are prefixed using the <code>[NoInterfaceObject]</code> annotation. The name of a mixin, <code>Body</code> in the following example, doesn't appear in JavaScript.</p>\n<pre class=\"notranslate\">[NoInterfaceObject]\n  interface Body {…}\n</pre>\n<p>For documentation purposes, we create a mixin page, with the same structure as an interface page. As they are not true interfaces, the word <em>interface</em> is not used — <em>mixin</em> is used instead.</p>\n<p>Mixin methods and properties are listed in the same way as regular methods and properties:</p>\n<ul>\n  <li>They have their own pages, prefixed with the mixin name. E.g <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Response/bodyUsed\"><code>Body.bodyUsed</code> <small>(en-US)</small></a> or <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Response/blob\"><code>Body.blob()</code> <small>(en-US)</small></a>.</li>\n  <li>They are listed on the interface page when the interface <em>implements</em> the mixin. Unlike regular properties and methods, they are prefixed with the mixin name and not the interface name. You can see <code>Body</code> properties and methods listed on both <a href=\"/zh-CN/docs/Web/API/Request\"><code>Request</code></a> and <a href=\"/zh-CN/docs/Web/API/Response\"><code>Response</code></a> interfaces, as they both implement the <code>Body</code> mixin.</li>\n</ul>\n<p>Mixins implemented on an interface are defined using the <code>implements</code> keyword.</p>\n<pre class=\"notranslate\">Request implements Body;\nResponse implements Body;\n</pre>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> Mixin names do not appear in a Web developer console. We shouldn't show them, but we currently do this as it saves us from duplicating content, which would lead to a maintenance issue. We do this if the mixin is only used in one interface (such cases are bugs in the relevant specs — they shouldn't be defined as mixins, but as partial interfaces.)</p>\n</div>"}},{"type":"prose","value":{"id":"availability_in_workers","title":"Availability in workers","isH3":true,"content":"<p>Availability in Web workers (of any type) and on the Window scope is defined using an annotation: <code>[Exposed=(Window,Worker)]</code>. The annotation applies to the partial interface it is listed with. If no annotation is available, the default value is <code>Window</code>.</p>\n<pre class=\"notranslate\">[Exposed=(Window,Worker)]\ninterface Performance {\n    [DependsOn=DeviceState, Affects=Nothing]\n    DOMHighResTimeStamp now();\n};\n\n[Exposed=Window]\npartial interface Performance {\n    [Constant]\n    readonly attribute PerformanceTiming timing;\n    [Constant]\n    readonly attribute PerformanceNavigation navigation;\n\n    jsonifier;\n};\n</pre>\n<p>In this case <code>Performance.now()</code> is available on the <code>Window</code> scope and to any worker, while <code>Performance.timing</code>, <code>Performance.navigation</code> and <code>Performance.toJSON()</code> are not available to Web workers.</p>\n<p>The most common values for the <code>[Exposed]</code> are:</p>\n<dl>\n  <dt id=\"window\"><code>Window</code></dt>\n  <dd>\n    <p>The partial interface is available to the <a href=\"/zh-CN/docs/Web/API/Window\"><code>Window</code></a> global scope.</p>\n  </dd>\n  <dt id=\"worker\"><code>Worker</code></dt>\n  <dd>\n    <p>The partial interface is available to any kind of worker, that is if the global scope is a descendant of <a href=\"/zh-CN/docs/Web/API/WorkerGlobalScope\"><code>WorkerGlobalScope</code></a> — <a href=\"/zh-CN/docs/Web/API/DedicatedWorkerGlobalScope\"><code>DedicatedWorkerGlobalScope</code></a>, <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorkerGlobalScope\"><code>SharedWorkerGlobalScope</code> <small>(en-US)</small></a>, or <a href=\"/zh-CN/docs/Web/API/ServiceWorkerGlobalScope\"><code>ServiceWorkerGlobalScope</code></a> (It also is available to <code>ChromeWorker</code>, but we don't document this as they are not visible on the Web and are internal to Firefox.)</p>\n  </dd>\n  <dt id=\"dedicatedworker\"><code>DedicatedWorker</code></dt>\n  <dd>\n    <p>The partial interface is available to the <a href=\"/zh-CN/docs/Web/API/DedicatedWorkerGlobalScope\"><code>DedicatedWorkerGlobalScope</code></a> only.``</p>\n  </dd>\n  <dt id=\"sharedworker\"><code>SharedWorker</code></dt>\n  <dd>\n    <p>The partial interface is available to the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorkerGlobalScope\"><code>SharedWorkerGlobalScope</code> <small>(en-US)</small></a> only.</p>\n  </dd>\n  <dt id=\"serviceworker\"><code>ServiceWorker</code></dt>\n  <dd>\n    <p>The partial interface is available to the <a href=\"/zh-CN/docs/Web/API/ServiceWorkerGlobalScope\"><code>ServiceWorkerGlobalScope</code></a> only.</p>\n  </dd>\n</dl>\n<p>Another value is possible, like <code>System</code>, but this has a <a href=\"/zh-CN/docs/Mozilla/WebIDL_bindings#Exposed\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">special meaning</a> and doesn't need to be documented.</p>\n<p>Note that these possible values are themselves defined in WebIDL files. Interfaces may have a <code>[Global=xyz]</code> annotation. It means that when an object of this type is used as a global scope, any interface, property or method, with <code>xyz</code> as a value of <code>[Exposed]</code> is available.</p>\n<pre class=\"notranslate\">[Global=(Worker,DedicatedWorker), Exposed=DedicatedWorker]\ninterface DedicatedWorkerGlobalScope : WorkerGlobalScope {…}\n</pre>\n<p>Here, it is defined that when the global scope is of type <code>DedicatedWorkerGlobalScope</code>, that is if we are in a dedicated worker, any interface, property or method exposed – using the <code>[Exposed]</code> annotation – to <code>Worker</code> or <code>DedicatedWorker</code> is available.</p>\n<p>Even the primary global is defined in WebIDL. The primary global is the value of an <code>[Exposed]</code> annotation when not present. This is defined using the <code>[PrimaryGlobal]</code> annotation and is present on <a href=\"/zh-CN/docs/Web/API/Window\"><code>Window</code></a>:</p>\n<pre class=\"notranslate\">[PrimaryGlobal, NeedResolve]\n/*sealed*/ interface Window : EventTarget {…}\n</pre>"}},{"type":"prose","value":{"id":"preferences","title":"Preferences","isH3":true,"content":"<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> this information is specific to Gecko and should only be used in the Browser compatibility section.</p>\n</div>\n<p>In Gecko, the availability of a partial interface, including its constructor, properties and methods may be controlled by a preference (usually called a \"pref\"). This is marked in the WebIDL too.</p>\n<pre class=\"notranslate\">[Pref=\"media.webspeech.synth.enabled\"]\ninterface SpeechSynthesis {\n    readonly attribute boolean pending;\n    readonly attribute boolean speaking;\n    readonly attribute boolean paused;\n};\n</pre>\n<p>Here <code>media.webspeech.synth.enabled</code> controls the <code>SpeechSynthesis</code> interface and its properties (the full listing has more than 3.)</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>备注：</strong> the default value of the preference is not available directly in the WebIDL (it can be different from one product using Gecko to another.)</p>\n</div>"}},{"type":"prose","value":{"id":"properties","title":"Properties","isH3":false,"content":"<p>You can recognize the definition of a property by the presence of the <code>attribute</code> keyword.</p>"}},{"type":"prose","value":{"id":"name_of_the_property","title":"Name of the property","isH3":true,"content":"<pre class=\"notranslate\">readonly attribute MediaError? error;\n</pre>\n<p>In the above example the name of the property is <code>error</code>; in the docs we will refer to it as <code>HTMLMediaElement.error</code> as it belongs to the <code>HTMLMediaElement</code> interface. Linking to the page is either done <strong>with</strong> the interface prefix using {{domxref('HTMLMediaElement.error')}} or <strong>without</strong> the prefix using {{domxref('HTMLMediaElement.error', 'error')}} when the context is obvious and unambiguous.</p>"}},{"type":"prose","value":{"id":"type_of_the_property","title":"Type of the property","isH3":true,"content":"<pre class=\"notranslate\">readonly attribute MediaError? error;\n</pre>\n<p>The property value is an object of type <code>MediaError</code>. The question mark (<code>'?'</code>) indicates that it can take a value of <code>null</code>, and the documentation must explain <em>when</em> this may occur. If no question mark is present, the <code>error</code> property can't be <code>null</code>.</p>"}},{"type":"prose","value":{"id":"writing_permissions_on_the_property","title":"Writing permissions on the property","isH3":true,"content":"<pre class=\"notranslate\">readonly attribute MediaError? error;\n</pre>\n<p>If the keyword <code>readonly</code> is present, the property can't be modified. It must be marked as read-only:</p>\n<ul>\n  <li>In the interface, by adding the {{ReadOnlyInline}} macro next to its definition term.</li>\n  <li>In the first sentence of its own page, by starting the description with: <em>The read-only <strong><code>HTMLMediaElement.error</code></strong> property…</em></li>\n  <li>By adding the <code>Read-only</code> tag to its own page.</li>\n  <li>By starting its description in the interface page with <em>Returns…</em></li>\n</ul>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>备注：</strong> Only read-only properties can be described as 'returning' a value. Non read-only properties can also be used to set a value.</p>\n</div>"}},{"type":"prose","value":{"id":"throwing_exceptions","title":"Throwing exceptions","isH3":true,"content":"<pre class=\"notranslate\">[SetterThrows]\nattribute DOMString src;\n</pre>\n<p>In some cases, like when some values are illegal, setting a new value can lead to an exception being raised. This is marked using the <code>[SetterThrows]</code> annotation. When this happens, the Syntax section of the property page <em>must</em> have an Exceptions subsection. The list of exceptions and the conditions to have them thrown are listed, as textual information, in the specification of that API.</p>\n<p>Note that some exceptions are not explicitly marked but are defined by the JavaScript bindings. <a href=\"http://heycam.github.io/webidl/#es-enumeration\" class=\"external\" rel=\" noopener\">Trying to set an illegal enumerated value</a> (mapped to a JavaScript <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>) raises a <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> exception. This must be documented, but is only implicitly marked in the WebIDL document.</p>\n<p>It is uncommon to have getters throwing exceptions, though it happens in a few cases. In this case the <code>[GetterThrows]</code> annotation is used. Here also, the Syntax section of the property page <em>must</em> have an Exceptions subsection.</p>\n<pre class=\"notranslate\">partial interface Blob {\n  [GetterThrows]\n  readonly attribute unsigned long long size;\n};\n</pre>"}},{"type":"prose","value":{"id":"not_throwing_exceptions","title":"Not throwing exceptions","isH3":true,"content":"<p>When the semantics of Webidl is not followed, an exception is often thrown, even without <code>[SetterThrows]</code> or <code>[GetterThrows]</code> set. For example, in strict mode, if we try to set a read-only property to a new value, that is to call its implicit setter, a read-only property will throw in strict mode.</p>\n<p>Mostly for compatibility purpose, this behavior is sometimes annoying. To prevent this by creating a no-op setter (that is by silently ignoring any attempt to set the property to a new value), the <code>[LenientSetter]</code> annotation can be used.</p>\n<pre class=\"notranslate\">partial interface Document {\n  [LenientSetter]\n  readonly attribute boolean fullscreen;\n  [LenientSetter]\n  readonly attribute boolean fullscreenEnabled;\n};\n</pre>\n<p>In these cases, an extra sentence is added to the description of the property. E.g</p>\n<p><em>Although this property is read-only, it will not throw if it is modified (even in strict mode); the setter is a no-operation and it will be ignored.</em></p>"}},{"type":"prose","value":{"id":"new_objects_or_references","title":"New objects or references","isH3":true,"content":"<p>The return value of a property can be either a copy of an internal object, a newly created synthetic object, or a reference to an internal object.</p>\n<p>Basic objects with types like <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> (being an IDL <code>DOMString</code>, or other), <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> (being an IDL <code>byte</code>, <code>octet</code>, <code>unsigned int</code>, or other), and <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> are always copied and nothing special has to be noted about them (it is natural behavior expected by a JavaScript developer.)</p>\n<p>For interface objects, the default is to return a <em>reference</em> to the internal object. This has to be mentioned both in the short description in the interface page, and in the description in the specific sub-pages.</p>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>备注：</strong> The keyword <code>readonly</code> used with a property returning an object applies to the <em>reference</em> (the internal object cannot be changed.) The properties of the returned object can be changed, even if they are marked as read-only in the relevant interface.</p>\n</div>\n<p>Sometimes an API must return a <em>new</em> object, or a <em>copy</em> of an internal one. This case is indicated in the WebIDL using the <code>[NewObject]</code> annotation.</p>\n<pre class=\"notranslate\">[NewObject]\nreadonly attribute TimeRanges buffered;\n</pre>\n<p>In this case, each call to <code>buffered</code> returns a different object: changing it will not change the internal value, and a change in the internal value will not affect each object instance. In the documentation, we will mark it by using the adjective <em>new</em> next to object:</p>\n<p><em>The <strong><code>HTMLMediaElement.buffered</code></strong> read-only property returns a new {{domxref(\"TimeRanges\")}} object that…</em></p>\n<p>and</p>\n<dl>\n  <dt id=\"domxrefhtmlmediaelement.bufferedreadonlyinline\"><em>{{domxref(\"HTMLMediaElement.buffered\")}}{{readonlyinline}}</em></dt>\n  <dd>\n    <p><em>Returns a new {{domxref(\"TimeRanges\")}} object that …</em></p>\n  </dd>\n</dl>\n<p>In the case of a reference to a collection object (like <code>HTMLCollection</code>, <code>HTMLFormElementsCollection</code>, or <code>HTMLOptionsCollection</code>, always without <code>[NewObject]</code>), we make it explicit that changes to the underlying object will be available via the returned reference. To mark this, we qualify the collection as a <strong>live</strong> <code>HTMLCollection</code> (or <code>HTMLFormElementsCollections</code>, or <code>HTMLOptionsCollection</code>), both in the interface description and in the subpage.</p>\n<p>E.g.</p>\n<dl>\n  <dt id=\"domxrefhtmlformelement.elementsreadonlyinline\">{{domxref(\"HTMLFormElement.elements\")}}{{readonlyinline}}</dt>\n  <dd>\n    <p>Returns a live {{domxref(\"HTMLFormControlsCollection\")}} containing…</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"availability_in_workers_2","title":"Availability in workers","isH3":true,"content":"<p>Individual property availability in workers is also found in the WebIDL. For a property, the default is the same availability as the <code>interface</code> (that is available to <a href=\"/zh-CN/docs/Web/API/Window\"><code>Window</code></a> context only if nothing special is marked) or as the <code>partial interface</code> it is defined in.</p>\n<p>For documentation, the subpage must contain a sentence indicating if it is available or not in Web workers, right before the \"Syntax\" section.</p>"}},{"type":"prose","value":{"id":"preferences_2","title":"Preferences","isH3":true,"content":"<div class=\"notecard note\" id=\"sect7\">\n  <p><strong>备注：</strong> This information is specific to Gecko and should only be used in the Browser compatibility section.</p>\n</div>\n<p>In Gecko, the availability of some properties may be controlled by a preference. This is marked in the WebIDL too.</p>\n<pre class=\"notranslate\">[Pref=\"media.webvtt.enabled\"]\nreadonly attribute TextTrackList? textTracks;\n</pre>\n<p>Here <code>media.webvtt.enabled</code> controls the <code>textTracks</code> property.</p>\n<div class=\"notecard note\" id=\"sect8\">\n  <p><strong>备注：</strong> The default value of the preference is not available directly in the WebIDL (it can be different from one product using Gecko to another).</p>\n</div>"}},{"type":"prose","value":{"id":"methods","title":"Methods","isH3":false,"content":"<p>You can recognize the definition of a method by the presence of parentheses after the name.</p>"}},{"type":"prose","value":{"id":"name_of_the_method","title":"Name of the method","isH3":true,"content":"<pre class=\"notranslate\">DOMString canPlayType(DOMString type);\n</pre>\n<p>The name of the method is <code>canPlayType</code>, and we will refer to it as <code>HTMLMediaElement.canPlayType()</code> (with the parentheses that indicate that it is a method) in the docs, as it belongs to the <code>HTMLMediaElement</code> interface. Linking to the page is either done <strong>with</strong> the interface prefix using {{domxref('HTMLMediaElement.canPlayType()')}}, or <strong>without</strong> the prefix using {{domxref('HTMLMediaElement.canPlayType', 'canPlayType()')}} when the context is obvious and unambiguous. The parentheses should always be included.</p>"}},{"type":"prose","value":{"id":"parameters","title":"Parameters","isH3":true,"content":"<pre class=\"notranslate\">TextTrack addTextTrack(TextTrackKind kind,\n                        optional DOMString label = \"\",\n                        optional DOMString language = \"\");\n</pre>\n<p>The parameters of a method are listed in the Syntax section of the method sub-page. They are listed in the WebIDL in order, between the parenthesis, as a comma-separated list. Each parameter has a name (indicated above) and a type (e.g. a <code>'?'</code> means that the <code>null</code> value is valid.) If marked <code>optional</code>, the parameter is optional to include in a method call and must have the {{OptionalInline}} flag included when it is listed in the Syntax section. The parameter's default value is listed after the equality sign (<code>'='</code>).</p>"}},{"type":"prose","value":{"id":"type_of_the_return_value","title":"Type of the return value","isH3":true,"content":"<pre class=\"notranslate\">DOMString canPlayType(DOMString type);\n</pre>\n<p>The return value type is indicated first inside the parentheses — in the above case the value is an object of type <code>DOMString</code>. if followed by a question mark (<code>'?'</code>), a value of <code>null</code> can be returned too, and the documentation must explain <em>when</em> this may happen. If no question mark is present, like here, the return value can't be <code>null</code>.</p>\n<p>The keyword <code>void</code> means that there is no return value. It is not a return value type. If the WebIDL entry reads <code>void</code>, the <em>Return value</em> section in the docs should contain only a simple <em>None</em>.</p>"}},{"type":"prose","value":{"id":"throwing_exceptions_2","title":"Throwing exceptions","isH3":true,"content":"<pre class=\"notranslate\">[Throws]\nvoid fastSeek(double time);\n</pre>\n<p>Some methods can throw exceptions. This is marked using the <code>[Throws]</code> annotation. When this happens, the Syntax section of the method page <em>must</em> have an Exceptions subsection. The list of exceptions and the conditions to have them thrown are listed, as textual information, in the specification of that API.</p>\n<p>Note that some exceptions are not explicitly marked but are defined by the JavaScript bindings. <a href=\"http://heycam.github.io/webidl/#es-enumeration\" class=\"external\" rel=\" noopener\">Trying to set an illegal enumerated value</a> (mapped to a JavaScript <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>) as a parameter will raise a <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> exception. This must be documented, but it is only implicitly marked in the WebIDL document.</p>\n<p>Have a look at one of these <a href=\"/en-US/docs/Web/API/SubtleCrypto/importKey\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Exceptions sections (en-US)</a>.</p>"}},{"type":"prose","value":{"id":"availability_in_workers_3","title":"Availability in workers","isH3":true,"content":"<p>Individual method availability in workers is also found in the WebIDL. For a method, the default is the same availability as the <code>interface</code> (that is available to <a href=\"/zh-CN/docs/Web/API/Window\"><code>Window</code></a> context only if nothing special is marked) or as the <code>partial interface</code> it is defined it.</p>\n<p>For the documentation, the sub-page must contain a sentence indicating if it is available in Web workers, right before the Syntax section.</p>"}},{"type":"prose","value":{"id":"preferences_3","title":"Preferences","isH3":true,"content":"<div class=\"notecard note\" id=\"sect9\">\n  <p><strong>备注：</strong> this information is specific to Gecko and should only be used in the Browser compatibility section.</p>\n</div>\n<p>In Gecko, the availability of some properties may be controlled by a preference. This is marked in the WebIDL too.</p>\n<pre class=\"notranslate\">[Pref=\"media.webvtt.enabled\"]\nTextTrack addTextTrack(TextTrackKind kind,\n                      optional DOMString label = \"\",\n                      optional DOMString language = \"\");\n</pre>\n<p>Here <code>media.webvtt.enabled</code> controls the <code>addTextTrack()</code> method.</p>\n<div class=\"notecard note\" id=\"sect10\">\n  <p><strong>备注：</strong> The default value of the preference is not available directly in the WebIDL (it can be different from one product using Gecko to another.)</p>\n</div>"}},{"type":"prose","value":{"id":"special_methods","title":"Special methods","isH3":false,"content":"<p>Some methods are not listed as regular methods in WebIDL but instead as special keywords, which translate to specific standard JavaScript methods.</p>"}},{"type":"prose","value":{"id":"tostring_and_tojson","title":"toString() and toJSON()","isH3":true,"content":"<p>A stringifier is mapped to <code>toString()</code> and defined as:</p>\n<pre class=\"notranslate\">stringifier;\n</pre>\n<p>The <code>toString()</code> method is listed just like any other method of the interface and has its own sub-page (E.g. <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Range/toString\"><code>Range.toString()</code> <small>(en-US)</small></a>)</p>\n<p>A jsonifier is mapped to <code>toJSON()</code> and defined as:</p>\n<pre class=\"notranslate\">jsonifier; // Gecko version\nserializer; // Standard version\n</pre>\n<p>The <code>toJSON()</code> method is listed just like any other method of the interface and has its own sub-page (E.g. <a href=\"/zh-CN/docs/Web/API/Performance/toJSON\"><code>Performance.toJSON()</code></a>)</p>\n<div class=\"notecard note\" id=\"sect11\">\n  <p><strong>备注：</strong> the WebIDL specification uses <code>serializer</code> instead of <code>jsonifier</code>. This is not used in Gecko — only the non-standard likely early proposal <code>jsonifier</code> is found in mozilla-central.</p>\n</div>"}},{"type":"prose","value":{"id":"iterator-like_methods","title":"Iterator-like methods","isH3":true,"content":"<p>An interface may be defined as <em>iterable</em>, meaning that it will have the following methods: <code>entries()</code>, <code>keys()</code>, <code>values()</code> and <code>forEach()</code>. They also supports the use of <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> on an object implementing this interface.</p>\n<p>There are two kinds of iteration possible: the <em>value iterator</em> and the <em>pair iterator.</em></p>\n<h4 id=\"value_iterator\">Value iterator</h4>\n<pre class=\"notranslate\">iterable&lt;valueType&gt;\n</pre>\n<p>The iterator will iterate over values of type <em>valueType</em>. The generated methods will be:</p>\n<ul>\n  <li><code>entries()</code>, which returns an <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>iterator</code></a> on the indexes (that are <code>unsigned long</code>).</li>\n  <li><code>values()</code>, which returns an <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>iterator</code></a> on the values.</li>\n  <li><code>keys()</code>, which returns an <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>iterator</code></a> on the keys, that are its indexes (that are <code>unsigned long</code>). In the case of value iterators, <code>keys()</code> and <code>entries()</code> are identical.</li>\n  <li><code>forEach()</code>, which returns an <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>iterator</code></a> on the keys that calls a given callback function one for each entry in the list.</li>\n</ul>\n<p>Such an iterator allows to use the syntax <code>for (var p in object)</code> as a shorthand of <code>for (var p in object.entries())</code>. We add a sentence about it in the interface description.</p>\n<div class=\"notecard note\" id=\"sect12\">\n  <p><strong>备注：</strong> the value pairs to iterate over can be defined in two different ways:</p>\n  <ol>\n    <li>Outside the webidl file, in the prose accompanying it. Such a prose is in the spec and usually starts with: <em>\"The <a href=\"https://heycam.github.io/webidl/#dfn-values-to-iterate-over\" class=\"external\" rel=\" noopener\">values to iterate over</a>…\"</em>.</li>\n    <li>In the webidl file, implicitly, if the interface supports indexed properties, that is when the interface has a <code>getter</code> methods with a parameter of type <code>unsigned long</code>.</li>\n  </ol>\n</div>\n<h4 id=\"pair_iterator\">Pair iterator</h4>\n<pre class=\"notranslate\">iterable&lt;keyType, valueType&gt;\n</pre>\n<p>The iterator will iterate over values of type <em>valueType</em>, with keys of type <em>keyType</em>. The generated methods will be:</p>\n<ul>\n  <li><code>entries()</code> that returns an <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>iterator</code></a> on the indexes (of type <em>keyType</em>). E.g. <a href=\"/zh-CN/docs/Web/API/FormData/entries\"><code>FormData.entries()</code></a></li>\n  <li><code>values()</code> that returns an <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>iterator</code></a> on the values. E.g. <a href=\"/zh-CN/docs/Web/API/FormData/values\"><code>FormData.values()</code></a></li>\n  <li><code>keys()</code> that returns an <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>iterator</code></a> on the keys. E.g. <a href=\"/zh-CN/docs/Web/API/FormData/keys\"><code>FormData.keys()</code></a></li>\n  <li>Once <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1216751\" class=\"external\" rel=\" noopener\">bug&nbsp;1216751</a> lands, <code>forEach()</code>.</li>\n</ul>\n<p>Such an iterator allows to use the syntax <code>for (var p in object)</code> as a shorthand of <code>for (var p in object.entries())</code>. We add a sentence about it in the interface description. E.g. <a href=\"/zh-CN/docs/Web/API/FormData\"><code>FormData</code></a>.</p>\n<div class=\"notecard note\" id=\"sect13\">\n  <p>\n    <strong>备注：</strong> the value pairs to iterate over are <em>not</em> defined in the webidl file, but in the prose accompanying it. Such a prose is in the spec and usually starts with: <em>\"The <a href=\"https://heycam.github.io/webidl/#dfn-value-pairs-to-iterate-over\" class=\"external\" rel=\" noopener\">value pairs to iterate over</a>…\"</em>\n    E.g, for <a href=\"/zh-CN/docs/Web/API/FormData\"><code>FormData</code></a> you find in the spec: <em>\"The <a href=\"https://heycam.github.io/webidl/#dfn-value-pairs-to-iterate-over\" class=\"external\" rel=\" noopener\">value pairs to iterate over</a> are the <a href=\"https://xhr.spec.whatwg.org/#concept-formdata-entry\" class=\"external\" rel=\" noopener\">entries</a> with the key being the <a href=\"https://xhr.spec.whatwg.org/#concept-formdata-entry-name\" class=\"external\" rel=\" noopener\">name</a> and the value the <a href=\"https://xhr.spec.whatwg.org/#concept-formdata-entry-value\" class=\"external\" rel=\" noopener\">value</a>. \"</em>\n  </p>\n</div>"}},{"type":"prose","value":{"id":"set-like_methods","title":"Set-like methods","isH3":true,"content":"<p>An interface may be defined as <em>set-like</em>, meaning that it represents an <em>ordered set of values</em> will have the following methods: <code>entries()</code>, <code>keys()</code>, <code>values()</code>, <code>forEach()</code>, and <code>has()</code> (it also has the <code>size</code> property). They also supports the use of <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> on an object implementing this interface. The set-like can be prefixed <code>readonly</code> or not. If not read-only, the methods to modify the set are also implemented: <code>add()</code>, <code>clear()</code>, and <code>delete()</code>.</p>\n<pre class=\"notranslate\">setlike&lt;valueType&gt;\n</pre>\n<p>The generated properties will be:</p>\n<ul>\n  <li><code>entries()</code> that returns an <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>iterator</code></a> on the indexes. E.g. <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/FontFaceSet/entries\"><code>FontFaceSet.entries()</code> <small>(en-US)</small></a>.</li>\n  <li><code>values()</code> that returns an <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>iterator</code></a> on the values. E.g. <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/FontFaceSet/values\"><code>FontFaceSet.values()</code> <small>(en-US)</small></a>.</li>\n  <li><code>keys()</code> that returns an <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>iterator</code></a> on the keys. E.g. <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/FontFaceSet/keys\"><code>FontFaceSet.keys()</code> <small>(en-US)</small></a>,</li>\n  <li><code>forEach()</code>.</li>\n</ul>\n<p>In the case, the set-like declaration is not prefixed by read-only, the following methods are also generated:</p>\n<ul>\n  <li><code>add()</code> that adds an entry. E.g. <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/FontFaceSet/add\"><code>FontFaceSet.add()</code> <small>(en-US)</small></a>.</li>\n  <li><code>clear()</code> that empty the set-like. E.g. <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/FontFaceSet/clear\"><code>FontFaceSet.clear()</code> <small>(en-US)</small></a>.</li>\n  <li><code>delete()</code> that remove an entry. E.g. <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/FontFaceSet/delete\"><code>FontFaceSet.delete()</code> <small>(en-US)</small></a>.</li>\n</ul>\n<p>Such an set interface also allows to use the syntax <code>for (var p in object)</code> as a shorthand of <code>for (var p in object.entries())</code>. We add a sentence about it in the interface description. E.g. <a href=\"/zh-CN/docs/Web/API/FontFaceSet\"><code>FontFaceSet</code></a>.</p>"}},{"type":"prose","value":{"id":"constructors","title":"Constructors","isH3":false,"content":"<p>Constructors are a little bit hidden in WebIDL: they are listed as annotations of the main interface.</p>"}},{"type":"prose","value":{"id":"unnamed_constructors","title":"Unnamed constructors","isH3":true,"content":"<p>This is the most common case for constructors. The constructor of a given interface A, can be used as <code>a = new A(parameters);</code></p>\n<pre class=\"notranslate\">[Constructor, Func=\"MessageChannel::Enabled\",\nExposed=(Window,Worker)]\n  interface MessageChannel {…};\n</pre>\n<p>A constructor with the same interface is defined using the <code>Constructor</code> annotation on the interface. There can be parenthesis and a list of parameters or not (like in the above example.) We document all the unnamed constructors on a sub-page — for example the above is given the slug <em>Web/API/MessageChannel/MessageChannel</em> and the title <code>MessageChannel()</code>.</p>\n<p>Another example of an unnamed constructor, with parameters:</p>\n<pre class=\"notranslate\">[Constructor(DOMString type, optional MessageEventInit eventInitDict),\n  Exposed=(Window,Worker,System)]\n    interface MessageEvent : Event {…};\n</pre>\n<p>There can also be several unnamed constructors, differing by their parameter lists. All syntax is documented in one single sub-page.</p>\n<pre class=\"notranslate\">[Constructor(DOMString url, URL base),\n  Constructor(DOMString url, optional DOMString base),\n  Exposed=(Window,Worker)]\n    interface URL {};\n</pre>"}},{"type":"prose","value":{"id":"named_constructors","title":"Named constructors","isH3":true,"content":"<pre class=\"notranslate\">[NamedConstructor=Image(optional unsigned long width, optional unsigned long height)]\n    interface HTMLImageElement : HTMLElement {…\n</pre>\n<p>A named constructor is a constructor that has a different name than that of its interface. For example<code>new Image(…)</code> creates a new <code>HTMLImageElement</code> object. They are defined in the WebIDL using the <code>NamedConstructor</code> annotation on the interface, followed by the name of the constructor after the equality sign (<code>'='</code>) and the parameter inside the parenthesis, in the same format as you'll see for methods.</p>\n<p>There can be several named constructors for a specific interface, but this is extremely rare; in such a case we include one sub-page per name.</p>"}},{"type":"prose","value":{"id":"availability_in_workers_4","title":"Availability in workers","isH3":true,"content":"<p>Constructors have the same availability as the interface, or partial interface, they are defined on. The sub-page provides this information in the same way as for a method.</p>"}},{"type":"prose","value":{"id":"preferences_4","title":"Preferences","isH3":true,"content":"<p>Constructors are controlled by the same preference as the interface, or partial interface, they are defined on. The sub-page provides this information in the same way as for a method.</p>"}}],"toc":[{"text":"在哪里可以找到 WebIDL 文件","id":"在哪里可以找到_webidl_文件"},{"text":"Different dialects of WebIDL","id":"different_dialects_of_webidl"},{"text":"Interfaces","id":"interfaces"},{"text":"Properties","id":"properties"},{"text":"Methods","id":"methods"},{"text":"Special methods","id":"special_methods"},{"text":"Constructors","id":"constructors"}],"summary":"在编写有关 API 的文档时，信息来源很多：规范描述了应该实现的内容以及模型，实现描述了实际放在浏览器中的内容。WebIDL 文件是一种非常简洁的方式，可以提供很多（但不是全部）有关 API 的信息。本文档提供了有助于理解 WebIDL 语法的参考。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Information contained in a WebIDL file","locale":"en-US","native":"English (US)"},{"title":"WebIDL ファイルに含まれる情報","locale":"ja","native":"日本語"}],"source":{"folder":"zh-cn/mdn/writing_guidelines/howto/write_an_api_reference/information_contained_in_a_webidl_file","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/mdn/writing_guidelines/howto/write_an_api_reference/information_contained_in_a_webidl_file/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/MDN","title":"MDN 项目"},{"uri":"/zh-CN/docs/MDN/Writing_guidelines","title":"撰写指南"},{"uri":"/zh-CN/docs/MDN/Writing_guidelines/Howto/Write_an_API_reference","title":"How to write an API reference"},{"uri":"/zh-CN/docs/MDN/Writing_guidelines/Howto/Write_an_API_reference/Information_contained_in_a_WebIDL_file","title":"Information contained in a WebIDL file"}],"pageTitle":"Information contained in a WebIDL file - MDN 项目 | MDN","noIndexing":false}}