{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"MediaDevices.getUserMedia()","mdn_url":"/zh-CN/docs/Web/API/MediaDevices/getUserMedia","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/WebRTC_API\">WebRTC API</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/MediaDevices\"><code>MediaDevices</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/MediaDevices/enumerateDevices\"><code>enumerateDevices()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/MediaDevices/getDisplayMedia\"><code>getDisplayMedia()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/MediaDevices/getSupportedConstraints\"><code>getSupportedConstraints()</code></a></li><li><em><code>getUserMedia()</code></em></li><li><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaDevices/selectAudioOutput\"><code>selectAudioOutput()</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>事件</summary><ol><li><a href=\"/zh-CN/docs/Web/API/MediaDevices/devicechange_event\"><code>devicechange</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>继承</summary><ol><li><a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>WebRTC 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/MediaDevices/getUserMedia\"><code>MediaDevices.getUserMedia()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Navigator/mediaDevices\"><code>Navigator.mediaDevices</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCCertificate\"><code>RTCCertificate</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCDTMFSender\"><code>RTCDTMFSender</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCDTMFToneChangeEvent\"><code>RTCDTMFToneChangeEvent</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCDataChannelEvent\"><code>RTCDataChannelEvent</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCDtlsTransport\"><code>RTCDtlsTransport</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCErrorEvent\"><code>RTCErrorEvent</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCIceCandidate\"><code>RTCIceCandidate</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCIceTransport\"><code>RTCIceTransport</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnectionIceErrorEvent\"><code>RTCPeerConnectionIceErrorEvent</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnectionIceEvent\"><code>RTCPeerConnectionIceEvent</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpReceiver\"><code>RTCRtpReceiver</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpSender\"><code>RTCRtpSender</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCRtpTransceiver\"><code>RTCRtpTransceiver</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCSctpTransport\"><code>RTCSctpTransport</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCSessionDescription\"><code>RTCSessionDescription</code></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCStatsReport\"><code>RTCStatsReport</code></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCTrackEvent\"><code>RTCTrackEvent</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>MediaDevices.getUserMedia()</code></strong> 会提示用户给予使用媒体输入的许可，媒体输入会产生一个<a href=\"/zh-CN/docs/Web/API/MediaStream\"><code>MediaStream</code></a>，里面包含了请求的媒体类型的轨道。此流可以包含一个视频轨道（来自硬件或者虚拟视频源，比如相机、视频采集设备和屏幕共享服务等等）、一个音频轨道（同样来自硬件或虚拟音频源，比如麦克风、A/D 转换器等等），也可能是其它轨道类型。</p>\n<p>它返回一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> 对象，成功后会<code>resolve</code>回调一个 <a href=\"/zh-CN/docs/Web/API/MediaStream\"><code>MediaStream</code></a> 对象。若用户拒绝了使用权限，或者需要的媒体源不可用，<code>promise</code>会<code>reject</code>回调一个 <code>PermissionDeniedError</code> 或者 <code>NotFoundError</code> 。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 返回的 promise 对象可能既不会 resolve 也不会 reject，因为用户不是必须选择允许或拒绝。</p>\n</div>\n<p>通常你可以使用 <a href=\"/zh-CN/docs/Web/API/Navigator/mediaDevices\"><code>navigator.mediaDevices</code></a> 来获取 <a href=\"/zh-CN/docs/Web/API/MediaDevices\"><code>MediaDevices</code></a> ，例如：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span>constraints<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stream</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 使用这个 stream stream */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 处理 error */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"语法","title":"语法","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> promise <span class=\"token operator\">=</span> navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span>constraints<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"参数","title":"参数","isH3":true,"content":"<dl>\n  <dt id=\"constraints\"><code>constraints</code></dt>\n  <dd>\n    <p>作为一个<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaDevices/getUserMedia\"><code>MediaStreamConstraints</code> <small>(en-US)</small></a> 对象，指定了请求的媒体类型和相对应的参数。</p>\n    <p>constraints 参数是一个包含了<code>video</code> 和 <code>audio</code>两个成员的<code>MediaStreamConstraints</code> 对象，用于说明请求的媒体类型。必须至少一个类型或者两个同时可以被指定。如果浏览器无法找到指定的媒体类型或者无法满足相对应的参数要求，那么返回的 Promise 对象就会处于 rejected［失败］状态，<code>NotFoundError</code>作为 rejected［失败］回调的参数。</p>\n    <p>以下同时请求不带任何参数的音频和视频：</p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>\n    <p>如果为某种媒体类型设置了 <code>true</code> ，得到的结果的流中就需要有此种类型的轨道。如果其中一个由于某种原因无法获得，<code>getUserMedia()</code> 将会产生一个错误。</p>\n    <p>当由于隐私保护的原因，无法访问用户的摄像头和麦克风信息时，应用可以使用额外的 constraints 参数请求它所需要或者想要的摄像头和麦克风能力。下面演示了应用想要使用 1280x720 的摄像头分辨率：</p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">1280</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">720</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n    <p>浏览器会试着满足这个请求参数，但是如果无法准确满足此请求中参数要求或者用户选择覆盖了请求中的参数时，有可能返回其它的分辨率。</p>\n    <p>强制要求获取特定的尺寸时，可以使用关键字<code>min</code>、<code>max</code> 或者 <code>exact</code>（就是 min == max）。以下参数表示要求获取最低为 1280x720 的分辨率。</p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">1280</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">720</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n    <p>如果摄像头不支持请求的或者更高的分辨率，返回的 Promise 会处于 rejected 状态，<code>NotFoundError 作为</code>rejected 回调的参数，而且用户将不会得到要求授权的提示。</p>\n    <p>造成不同表现的原因是，相对于简单的请求值和<code>ideal</code>关键字而言，关键字<code>min</code>, <code>max</code>, 和 <code>exact</code>有着内在关联的强制性，请看一个更详细的例子：</p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ideal</span><span class=\"token operator\">:</span> <span class=\"token number\">1280</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span> <span class=\"token number\">1920</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">776</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ideal</span><span class=\"token operator\">:</span> <span class=\"token number\">720</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span> <span class=\"token number\">1080</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n    <p>当请求包含一个 ideal（应用最理想的）值时，这个值有着更高的权重，意味着浏览器会先尝试找到最接近指定的理想值的设定或者摄像头（如果设备拥有不止一个摄像头）。</p>\n    <p>简单的请求值也可以理解为是应用理想的值，因此我们的第一个指定分辨率的请求也可以写成如下：</p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">ideal</span><span class=\"token operator\">:</span> <span class=\"token number\">1280</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">ideal</span><span class=\"token operator\">:</span> <span class=\"token number\">720</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n    <p>并不是所有的 constraints 都是数字。例如，在移动设备上面，如下的例子表示优先使用前置摄像头（如果有的话）：</p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">facingMode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>\n    <p>强制使用后置摄像头，请用：</p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">facingMode</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">exact</span><span class=\"token operator\">:</span> <span class=\"token string\">\"environment\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"返回值","title":"返回值","isH3":true,"content":"<p>返回一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>，这个 Promise 成功后的回调函数带一个 <a href=\"/zh-CN/docs/Web/API/MediaStream\"><code>MediaStream</code></a> 对象作为其参数。</p>"}},{"type":"prose","value":{"id":"异常","title":"异常","isH3":true,"content":"<p>返回一个失败状态的 Promise，这个 Promise 失败后的回调函数带一个<a href=\"/zh-CN/docs/Web/API/DOMException\"><code>DOMException</code></a>对象作为其参数。可能的异常有：</p>\n<dl>\n  <dt id=\"aborterror\"><code>AbortError</code>［中止错误］</dt>\n  <dd>\n    <p>尽管用户和操作系统都授予了访问设备硬件的权利，而且未出现可能抛出<code>NotReadableError</code>异常的硬件问题，但仍然有一些问题的出现导致了设备无法被使用。</p>\n  </dd>\n  <dt id=\"notallowederror\"><code>NotAllowedError</code>［拒绝错误］</dt>\n  <dd>\n    <p>用户拒绝了当前的浏览器实例的访问请求；或者用户拒绝了当前会话的访问；或者用户在全局范围内拒绝了所有媒体访问请求。</p>\n    <div class=\"notecard note\" id=\"sect2\">\n      <p><strong>备注：</strong> 较旧版本的规范使用了<code>SecurityError</code>，但在新版本当中<code>SecurityError</code>被赋予了新的意义。</p>\n    </div>\n  </dd>\n  <dt id=\"notfounderror\"><code>NotFoundError</code>［找不到错误］</dt>\n  <dd>\n    <p>找不到满足请求参数的媒体类型。</p>\n  </dd>\n  <dt id=\"notreadableerror\"><code>NotReadableError</code>［无法读取错误］</dt>\n  <dd>\n    <p>尽管用户已经授权使用相应的设备，操作系统上某个硬件、浏览器或者网页层面发生的错误导致设备无法被访问。</p>\n  </dd>\n  <dt id=\"overconstrainederror\"><code>OverconstrainedError</code>［无法满足要求错误］</dt>\n  <dd>\n    <p>指定的要求无法被设备满足，此异常是一个类型为<code>OverconstrainedError</code>的对象，拥有一个<code>constraint</code>属性，这个属性包含了当前无法被满足的<code>constraint</code>对象，还拥有一个<code>message</code>属性，包含了阅读友好的字符串用来说明情况。</p>\n    <div class=\"notecard note\" id=\"sect3\">\n      <p><strong>备注：</strong> 因为这个异常甚至可以在用户尚未授权使用当前设备的情况下抛出，所以应当可以当作一个探测设备能力属性的手段［fingerprinting surface］。</p>\n    </div>\n  </dd>\n  <dt id=\"securityerror\"><code>SecurityError</code>［安全错误］</dt>\n  <dd>\n    <p>在<code>getUserMedia()</code> 被调用的 <a href=\"/zh-CN/docs/Web/API/Document\"><code>Document</code></a> 上面，使用设备媒体被禁止。这个机制是否开启或者关闭取决于单个用户的偏好设置。</p>\n  </dd>\n  <dt id=\"typeerror\"><code>TypeError</code>［类型错误］</dt>\n  <dd>\n    <p>constraints 对象未设置［空］，或者都被设置为<code>false</code>。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":""}},{"type":"prose","value":{"id":"宽度和高度","title":"宽度和高度","isH3":true,"content":"<p>这个例子设置了摄像头分辨率，并把结果的 <a href=\"/zh-CN/docs/Web/API/MediaStream\"><code>MediaStream</code></a> 分配给了一个 video 元素。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 想要获取一个最接近 1280x720 的相机分辨率</span>\n<span class=\"token keyword\">var</span> constraints <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">1280</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">720</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nnavigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span>constraints<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mediaStream</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> video <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'video'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  video<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> mediaStream<span class=\"token punctuation\">;</span>\n  video<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onloadedmetadata</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    video<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 总是在最后检查错误</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"在旧的浏览器中使用新的_api","title":"在旧的浏览器中使用新的 API","isH3":true,"content":"<p>这是一个使用 <code>navigator.mediaDevices.getUserMedia()</code>的例子，带一个 polyfill 以适应旧的浏览器。要注意的是这个 polyfill 并不能修正一些约束语法上的遗留差异，这表示约束在某些浏览器上可能不会很好地运行。推荐使用处理了约束的 <a href=\"https://github.com/webrtc/adapter\" class=\"external\" rel=\" noopener\">adapter.js</a> polyfill 来替代。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 老的浏览器可能根本没有实现 mediaDevices，所以我们可以先设置一个空的对象</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>mediaDevices <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  navigator<span class=\"token punctuation\">.</span>mediaDevices <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 一些浏览器部分支持 mediaDevices。我们不能直接给对象设置 getUserMedia</span>\n<span class=\"token comment\">// 因为这样可能会覆盖已有的属性。这里我们只会在没有 getUserMedia 属性的时候添加它。</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span>getUserMedia <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getUserMedia</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">constraints</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 首先，如果有 getUserMedia 的话，就获得它</span>\n    <span class=\"token keyword\">var</span> getUserMedia <span class=\"token operator\">=</span> navigator<span class=\"token punctuation\">.</span>webkitGetUserMedia <span class=\"token operator\">||</span> navigator<span class=\"token punctuation\">.</span>mozGetUserMedia<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 一些浏览器根本没实现它 - 那么就返回一个 error 到 promise 的 reject 来保持一个统一的接口</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>getUserMedia<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getUserMedia is not implemented in this browser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 否则，为老的 navigator.getUserMedia 方法包裹一个 Promise</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">,</span> constraints<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nnavigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stream</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> video <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'video'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 旧的浏览器可能没有 srcObject</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"srcObject\"</span> <span class=\"token keyword\">in</span> video<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    video<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 防止在新的浏览器里使用它，应为它已经不再支持了</span>\n    video<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  video<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onloadedmetadata</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    video<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"帧率","title":"帧率","isH3":true,"content":"<p>在某些情况下，比如 WebRTC 上使用受限带宽传输时，低帧率可能更适宜。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> constraints <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">frameRate</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">ideal</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"前置或者后置摄像头","title":"前置或者后置摄像头","isH3":true,"content":"<p>在移动设备（电话）上</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> front <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flip-button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> front <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>front<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> constraints <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">facingMode</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>front<span class=\"token operator\">?</span> <span class=\"token string\">\"user\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"environment\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"权限","title":"权限","isH3":false,"content":"<p>在一个可安装的 app（如<a href=\"/zh-CN/docs/Web/Apps/Build/Building_apps_for_Firefox_OS/Firefox_OS_app_beginners_tutorial\">Firefox OS app</a>）中使用 <code>getUserMedia()</code> ，你需要在声明文件中指定以下的权限：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string-property property\">\"permissions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"audio-capture\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Required to capture audio using getUserMedia()\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"video-capture\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Required to capture video using getUserMedia()\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>参见 <a href=\"/zh-CN/docs/Web/Apps/Developing/App_permissions#audio-capture\">permission: audio-capture</a> 和 <a href=\"/zh-CN/docs/Web/Apps/Developing/App_permissions#video-capture\">permission: video-capture</a> 来获取更多信息。</p>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/mediacapture-main/#dom-mediadevices-getusermedia","title":"Media Capture and Streams"}],"query":"api.MediaDevices.getUserMedia"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.MediaDevices.getUserMedia","dataURL":"/zh-CN/docs/Web/API/MediaDevices/getUserMedia/bcd.json"}},{"type":"prose","value":{"id":"参考","title":"参考","isH3":false,"content":"<ul>\n  <li>旧的 <a href=\"/zh-CN/docs/Web/API/Navigator/getUserMedia\">navigator.getUserMedia</a> 遗留 API</li>\n  <li><a href=\"/zh-CN/docs/Web/API/MediaDevices/enumerateDevices\">navigator.enumerateDevices</a> - 获取用户可用的设备类型和数量</li>\n  <li><a href=\"/en-US/docs/Web/API/WebRTC_API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">WebRTC (en-US)</a> - WebRTC API 的介绍页面</li>\n  <li><a href=\"/en-US/docs/Web/API/Media_Capture_and_Streams_API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">MediaStream API (en-US)</a> - 媒体流对象的 API</li>\n  <li><a href=\"/en-US/docs/Web/API/Media_Capture_and_Streams_API/Taking_still_photos\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Taking webcam photos (en-US)</a> - 一个关于使用 <code>getUserMedia()</code> 拍照而非录视频的教程</li>\n</ul>"}}],"toc":[{"text":"语法","id":"语法"},{"text":"示例","id":"示例"},{"text":"权限","id":"权限"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"参考","id":"参考"}],"summary":"MediaDevices.getUserMedia() 会提示用户给予使用媒体输入的许可，媒体输入会产生一个MediaStream，里面包含了请求的媒体类型的轨道。此流可以包含一个视频轨道（来自硬件或者虚拟视频源，比如相机、视频采集设备和屏幕共享服务等等）、一个音频轨道（同样来自硬件或虚拟音频源，比如麦克风、A/D 转换器等等），也可能是其它轨道类型。","popularity":0.0032,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"MediaDevices.getUserMedia()","locale":"en-US","native":"English (US)"},{"title":"MediaDevices.getUserMedia()","locale":"es","native":"Español"},{"title":"MediaDevices.getUserMedia()","locale":"fr","native":"Français"},{"title":"MediaDevices.getUserMedia()","locale":"ja","native":"日本語"},{"title":"MediaDevices.getUserMedia()","locale":"ko","native":"한국어"},{"title":"MediaDevices.getUserMedia()","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/api/mediadevices/getusermedia","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/mediadevices/getusermedia/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/MediaDevices","title":"MediaDevices"},{"uri":"/zh-CN/docs/Web/API/MediaDevices/getUserMedia","title":"MediaDevices.getUserMedia()"}],"pageTitle":"MediaDevices.getUserMedia() - Web API 接口参考 | MDN","noIndexing":false}}