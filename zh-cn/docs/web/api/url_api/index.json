{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"URL API","mdn_url":"/zh-CN/docs/Web/API/URL_API","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/URL_API\">URL API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>接口</summary><ol><li><a href=\"/zh-CN/docs/Web/API/URL\"><code>URL</code></a></li><li><a href=\"/zh-CN/docs/Web/API/URLSearchParams\"><code>URLSearchParams</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>URL API 是一个 URL 标准的组件，它定义了有效的<a href=\"/zh-CN/docs/Glossary/URL\">Uniform Resource Locator</a>和访问、操作 URL 的 API。URL 标准还定义了像域名、主机和 IP 地址等概念，并尝试以标准的方式去描述用于以键/值对的形式提交 web 表单内容的遗留<code>application/x-www-form-urlencoded</code> <a href=\"/zh-CN/docs/Glossary/MIME_type\">MIME type</a> 。</p>"}},{"type":"prose","value":{"id":"url_的概念和用法","title":"URL 的概念和用法","isH3":false,"content":"<p>URL 标准的主要内容是由 URL 的定义以及它的结构和解析方式决定的。还介绍了与网络上计算机寻址有关的各种术语的定义，并指定了解析 IP 地址和 DOM 地址的算法。大多数开发人员更感兴趣的是 API 本身。</p>"}},{"type":"prose","value":{"id":"使用_url_组件","title":"使用 URL 组件","isH3":true,"content":"<p>给指定的 URL 创建一个 <a href=\"/zh-CN/docs/Web/API/URL\"><code>URL</code></a> 对象将解析 URL 并通过其属性对其组成部分的快速访问。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> addr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://developer.mozilla.org/en-US/docs/Web/API/URL_API\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> host <span class=\"token operator\">=</span> addr<span class=\"token punctuation\">.</span>host<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> path <span class=\"token operator\">=</span> addr<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>上面的代码片段为您正在阅读的文章创建一个<code>URL</code>对象，然后获取 <a href=\"/zh-CN/docs/Web/API/URL/host\" title=\"host\"><code>host</code></a> 和 <a href=\"/zh-CN/docs/Web/API/URL/pathname\" title=\"pathname\"><code>pathname</code></a> 属性。在本例中，这些字符串的值分别是<code>developer.mozilla.org</code> 和<code>/en-US/docs/Web/API/URL_API</code>。</p>"}},{"type":"prose","value":{"id":"修改_url","title":"修改 URL","isH3":true,"content":"<p><code>URL</code>对象的大部分属性都是可设置的；您可以向它们写入新值来更改对象所表示的 URL。例如，要创建一个 URL 对象并设置它的用户名：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> myUsername <span class=\"token operator\">=</span> <span class=\"token string\">\"someguy\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> addr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://mysite.com/login\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\naddr<span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> myUsername<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>设置 <a href=\"/zh-CN/docs/Web/API/URL/username\" title=\"username\"><code>username</code></a> 值不仅是设置该属性的值，而且更新整个 URL。执行上面的代码片段后， <a href=\"/zh-CN/docs/Web/API/URL/href\" title=\"addr.href\"><code>addr.href</code></a> 的返回值是<code>https://someguy@mysite.com/login</code>。对于任何可写属性都是如此。</p>"}},{"type":"prose","value":{"id":"查询","title":"查询","isH3":true,"content":"<p><a href=\"/zh-CN/docs/Web/API/URL/search\" title=\"search\"><code>search</code></a> 属性在 URL 上包含 URL 的查询字符串部分。例如，如果 URL 是<code>https://mysite.com/login?user=someguy&amp;page=news</code>，那么<code>search</code> 属性的值是<code>?user=someguy&amp;page=news</code>。您还可以使用 <a href=\"/zh-CN/docs/Web/API/URLSearchParams\"><code>URLSearchParams</code></a> 对象的 <a href=\"/zh-CN/docs/Web/API/URLSearchParams/get\" title=\"get()\"><code>get()</code></a> 查找单个参数的值：</p>\n<pre class=\"notranslate\">let addr = new URL(\"https://mysite.com/login?user=someguy&amp;page=news\");\ntry {\n  loginUser(addr.searchParams.get(\"user\"));\n  gotoPage(addr.searchParams.get(\"page\"));\n} catch(err) {\n  showErrorMessage(err);\n}\n</pre>\n<p>例如，在上面的代码片段中，从查询中提取用户名和目标页面，并将其传递给适当的函数，站点代码使用这些函数登录并将用户路由到站点的目的页面。</p>\n<p><code>URLSearchParams</code>中的其他函数允许修改改、添加和删除键和值，甚至对参数列表进行排序。</p>"}},{"type":"prose","value":{"id":"url_api_接口","title":"URL API 接口","isH3":false,"content":"<p>URL API 是一个简单的 API，它的名字只有几个接口：</p>\n<ul>\n  <li></li>\n  <li><a href=\"/zh-CN/docs/Web/API/URL\"><code>URL</code></a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/URLSearchParams\"><code>URLSearchParams</code></a></li>\n  <li></li>\n</ul>\n<p>该规范的旧版本包括一个名为<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WorkerLocation\"><code>URLUtilsReadOnly</code> <small>(en-US)</small></a>的接口，该接口已经合并到<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WorkerLocation\"><code>WorkerLocation</code> <small>(en-US)</small></a> 接口中。</p>"}},{"type":"prose","value":{"id":"例子","title":"例子","isH3":false,"content":"<p>如果希望处理 URL 中包含的参数，可以手动进行处理，但是创建一个 URL 对象更容易。下面的<code>fillTableWithParameters()</code>函数接受一个表示<a href=\"/zh-CN/docs/Web/HTML/Element/table\"><code>&lt;table&gt;</code></a>的 <a href=\"/zh-CN/docs/Web/API/HTMLTableElement\"><code>HTMLTableElement</code></a> 对象作为输入。将行添加到表中，每个行对应参数中找到的键，第一列包含键，第二列包含值。</p>\n<p>注意，在生成表之前调用 <a href=\"/zh-CN/docs/Web/API/URLSearchParams/sort\"><code>URLSearchParams.sort()</code></a> 对参数列表进行排序。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">fillTableWithParameters</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tbl</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  url<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> keys <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">of</span> keys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> val <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> row <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> cell <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"td\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cell<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n    row<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>cell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cell <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"td\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cell<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n    row<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>cell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tbl<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>在 <a href=\"https://url-api.glitch.me/\" class=\"external\" rel=\" noopener\">found on Glitch</a>上可以找到这个例子的工作版本。只要在加载页面时向 URL 添加参数，就可以在表中看到它们。例如，试试<a href=\"https://url-api.glitch.me/?from=mdn&amp;excitement=high&amp;likelihood=inconceivable\" class=\"external\" rel=\" noopener\"><code>https://url-api.glitch.me?from=mdn&amp;excitement=high&amp;likelihood=inconceivable</code></a>。</p>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://url.spec.whatwg.org/#api","title":"URL Standard"}],"query":"api.URL"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.URL","dataURL":"/zh-CN/docs/Web/API/URL_API/bcd.json"}},{"type":"prose","value":{"id":"另见","title":"另见","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/Fetch_API\">Fetch API</a></li>\n  <li>CSS <a href=\"/zh-CN/docs/Web/CSS/url\"><code>&lt;url&gt;</code></a> type</li>\n</ul>"}}],"toc":[{"text":"URL 的概念和用法","id":"url_的概念和用法"},{"text":"URL API 接口","id":"url_api_接口"},{"text":"例子","id":"例子"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"另见","id":"另见"}],"summary":"URL API 是一个 URL 标准的组件，它定义了有效的Uniform Resource Locator和访问、操作 URL 的 API。URL 标准还定义了像域名、主机和 IP 地址等概念，并尝试以标准的方式去描述用于以键/值对的形式提交 web 表单内容的遗留application/x-www-form-urlencoded MIME type 。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"URL API","locale":"en-US","native":"English (US)"},{"title":"URL API","locale":"ja","native":"日本語"}],"source":{"folder":"zh-cn/web/api/url_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/url_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/URL_API","title":"URL API"}],"pageTitle":"URL API - Web API 接口参考 | MDN","noIndexing":false}}