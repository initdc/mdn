{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"fetch()","mdn_url":"/zh-CN/docs/Web/API/fetch","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/fetch\"><code>Fetch</code></a></strong></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>全局的 <strong><code>fetch()</code></strong> 方法用于发起获取资源的请求。它返回一个 promise，这个 promise 会在请求响应后被 resolve，并传回 <a href=\"/zh-CN/docs/Web/API/Response\"><code>Response</code></a> 对象。</p>\n<p><a href=\"/zh-CN/docs/Web/API/Window\"><code>Window</code></a> 和 <a href=\"/zh-CN/docs/Web/API/WorkerGlobalScope\"><code>WorkerGlobalScope</code></a> 都实现了 WorkerOrGlobalScope。 ——这意味着基本在任何场景下只要你想获取资源，都可以使用 位于 WorkerOrGlobalScope 中的 <code>fetch()</code> 方法。</p>\n<p>当遇到网络错误时，<a href=\"/zh-CN/docs/Web/API/fetch\" aria-current=\"page\"><code>fetch()</code></a> 返回的 promise 会被 reject，并传回 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>，虽然这也可能因为权限或其它问题导致。成功的 fetch() 检查不仅要包括 promise 被 resolve，还要包括 <a href=\"/zh-CN/docs/Web/API/Response/ok\"><code>Response.ok</code></a> 属性为 true。HTTP 404 状态并不被认为是网络错误。</p>\n<p><code>fetch()</code> 方法由 <a href=\"/en-US/docs/Web/HTTP/Headers/Content-Security-Policy\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Content Security Policy (en-US)</a> 的 <code>connect-src</code>指令控制，而不是它请求的资源。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> <a href=\"/zh-CN/docs/Web/API/fetch\" aria-current=\"page\"><code>fetch()</code></a> 方法的参数与 <a href=\"/zh-CN/docs/Web/API/Request/Request\" title=\"Request()\"><code>Request()</code></a> 构造器是一样的。</p>\n</div>"}},{"type":"prose","value":{"id":"语法","title":"语法","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: plain notranslate\">Promise&lt;Response&gt; fetch(input[, init]);\n</pre></div>"}},{"type":"prose","value":{"id":"参数","title":"参数","isH3":true,"content":"<dl>\n  <dt id=\"input\"><em>?input</em></dt>\n  <dd>\n    <p>定义要获取的资源。这可能是：</p>\n    <ul>\n      <li>一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>USVString</code></a> 字符串，包含要获取资源的 URL。一些浏览器会接受 <code>blob:</code> 和 <code>data:</code> 作为 schemes.</li>\n      <li>一个 <a href=\"/zh-CN/docs/Web/API/Request\"><code>Request</code></a> 对象。</li>\n    </ul>\n  </dd>\n  <dt id=\"init\"><em>init</em> <span class=\"badge inline optional\">可选</span></dt>\n  <dd>\n    <p>一个配置项对象，包括所有对请求的设置。可选的参数有：</p>\n    <ul>\n      <li><code>method</code>: 请求使用的方法，如 <code>GET</code>、<code>POST</code>。</li>\n      <li><code>headers</code>: 请求的头信息，形式为 <a href=\"/zh-CN/docs/Web/API/Headers\"><code>Headers</code></a> 的对象或包含 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>ByteString</code></a> 值的对象字面量。</li>\n      <li><code>body</code>: 请求的 body 信息：可能是一个 <a href=\"/zh-CN/docs/Web/API/Blob\"><code>Blob</code></a>、<a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>BufferSource</code></a>、<a href=\"/zh-CN/docs/Web/API/FormData\"><code>FormData</code></a>、<a href=\"/zh-CN/docs/Web/API/URLSearchParams\"><code>URLSearchParams</code></a> 或者 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>USVString</code></a> 对象。注意 GET 或 HEAD 方法的请求不能包含 body 信息。</li>\n      <li><code>mode</code>: 请求的模式，如 <code>cors</code>、<code>no-cors</code> 或者 <code>same-origin</code>。</li>\n      <li><code>credentials</code>: 请求的 credentials，如 <code>omit</code>、<code>same-origin</code> 或者 <code>include</code>。为了在当前域名内自动发送 cookie，必须提供这个选项，从 Chrome 50 开始，这个属性也可以接受 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/FederatedCredential\"><code>FederatedCredential</code> <small>(en-US)</small></a> 实例或是一个 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PasswordCredential\"><code>PasswordCredential</code> <small>(en-US)</small></a> 实例。</li>\n      <li><code>cache</code>: 请求的 cache 模式：<code>default</code>、 <code>no-store</code>、 <code>reload</code> 、 <code>no-cache</code>、 <code>force-cache</code> 或者 <code>only-if-cached</code>。</li>\n      <li><code>redirect</code>: 可用的 redirect 模式：<code>follow</code> (自动重定向), <code>error</code> (如果产生重定向将自动终止并且抛出一个错误），或者 <code>manual</code> (手动处理重定向)。在 Chrome 中默认使用 <code>follow</code>（Chrome 47 之前的默认值是 <code>manual</code>）。</li>\n      <li><code>referrer</code>: 一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>USVString</code></a> 可以是 <code>no-referrer</code>、<code>client</code> 或一个 URL。默认是 <code>client</code>。</li>\n      <li><code>referrerPolicy</code>: 指定了 HTTP 头部 referer 字段的值。可能为以下值之一：<code>no-referrer</code>、 <code>no-referrer-when-downgrade</code>、<code>origin</code>、<code>origin-when-cross-origin</code>、 <code>unsafe-url</code>。</li>\n      <li><code>integrity</code>: 包括请求的 <a href=\"/zh-CN/docs/Web/Security/Subresource_Integrity\">subresource integrity</a> 值（例如： <code>sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=</code>）。</li>\n    </ul>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"返回值","title":"返回值","isH3":true,"content":"<p>一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>，resolve 时回传 <a href=\"/zh-CN/docs/Web/API/Response\"><code>Response</code></a> 对象。</p>"}},{"type":"prose","value":{"id":"例外","title":"例外","isH3":true,"content":"<table>\n  <thead>\n    <tr>\n      <th>类型</th>\n      <th><strong>描述</strong></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>AbortError</code></td>\n      <td>请求被<a href=\"/zh-CN/docs/Web/API/AbortController/abort\"><code>AbortController.abort()</code></a>终止。</td>\n    </tr>\n    <tr>\n      <td><code>TypeError</code></td>\n      <td>从<a href=\"/en-US/docs/Mozilla/Firefox/Releases/43\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Firefox 43 (en-US)</a>开始，如果<code>fetch()</code>接收到含有用户名和密码的 URL（例如<code>http://user:password@example.com</code>），它将会抛出一个<code>TypeError</code> 。</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<p>在 <a href=\"https://github.com/mdn/fetch-examples/tree/gh-pages/fetch-request\" class=\"external\" rel=\" noopener\">Fetch Request 示例</a> (参见 <a href=\"https://mdn.github.io/fetch-examples/fetch-request/\" class=\"external\" rel=\" noopener\">Fetch Request live</a>) 中，我们使用对应的构造器创建了一个新的 <a href=\"/zh-CN/docs/Web/API/Request\"><code>Request</code></a> 对象，然后调用 fetch() 方法获取资源。因为我们是在请求一个图片，为了解析正常，我们对响应执行 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Response/blob\"><code>Body.blob</code> <small>(en-US)</small></a> 来设置相应的 MIME 类型。然后创建一个 Object URL，并在 <a href=\"/zh-CN/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a> 元素中把它显示出来。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myImage <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>myRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> objectURL <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myImage<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> objectURL<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在 <a href=\"https://github.com/mdn/fetch-examples/tree/gh-pages/fetch-with-init-then-request\" class=\"external\" rel=\" noopener\">Fetch with init then Request 示例</a> (参见 <a href=\"https://mdn.github.io/fetch-examples/fetch-with-init-then-request/\" class=\"external\" rel=\" noopener\">Fetch Request init live</a>) 中，我们做同样的操作，除了在调用 fetch() 时传入一个 init 对象：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myImage <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myHeaders <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'image/jpeg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myInit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> myHeaders<span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'cors'</span><span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">'default'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>myRequest<span class=\"token punctuation\">,</span>myInit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>你也可以传入同样的 init 对象到 Request 构造器，来实现同样的效果，如：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">,</span>myInit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>init</code> 对象中的 <code>headers</code> 也可以是一个对象字面量：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myInit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                   <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'image/jpeg'</span>\n               <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'cors'</span><span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">'default'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">,</span> myInit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://fetch.spec.whatwg.org/#fetch-method","title":"Fetch Standard"}],"query":"api.fetch"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.fetch","dataURL":"/zh-CN/docs/Web/API/fetch/bcd.json"}},{"type":"prose","value":{"id":"相关链接","title":"相关链接","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/Fetch_API\">Fetch API</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Service_Worker_API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">ServiceWorker API (en-US)</a></li>\n  <li><a href=\"/zh-CN/docs/Web/HTTP/CORS\">HTTP access control (CORS)</a></li>\n  <li><a href=\"/zh-CN/docs/Web/HTTP\">HTTP</a></li>\n</ul>"}}],"toc":[{"text":"语法","id":"语法"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"相关链接","id":"相关链接"}],"summary":"全局的 fetch() 方法用于发起获取资源的请求。它返回一个 promise，这个 promise 会在请求响应后被 resolve，并传回 Response 对象。","popularity":0.0022,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"fetch()","locale":"en-US","native":"English (US)"},{"title":"WindowOrWorkerGlobalScope.fetch()","locale":"es","native":"Español"},{"title":"GlobalFetch.fetch()","locale":"fr","native":"Français"},{"title":"WindowOrWorkerGlobalScope.fetch()","locale":"ja","native":"日本語"},{"title":"fetch()","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"WindowOrWorkerGlobalScope.fetch()","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/api/fetch","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/fetch/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/fetch","title":"fetch()"}],"pageTitle":"fetch() - Web API 接口参考 | MDN","noIndexing":false}}