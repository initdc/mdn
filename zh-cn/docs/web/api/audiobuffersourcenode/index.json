{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"AudioBufferSourceNode","mdn_url":"/zh-CN/docs/Web/API/AudioBufferSourceNode","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Web_Audio_API\">Web Audio API</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>构造函数</summary><ol><li><a href=\"/zh-CN/docs/Web/API/AudioBufferSourceNode/AudioBufferSourceNode\"><code>AudioBufferSourceNode()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a href=\"/zh-CN/docs/Web/API/AudioBufferSourceNode/buffer\"><code>buffer</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBufferSourceNode/detune\"><code>detune</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBufferSourceNode/loop\"><code>loop</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBufferSourceNode/loopEnd\"><code>loopEnd</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBufferSourceNode/loopStart\"><code>loopStart</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBufferSourceNode/playbackRate\"><code>playbackRate</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/AudioBufferSourceNode/start\"><code>start()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>继承</summary><ol><li><a href=\"/zh-CN/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioNode\"><code>AudioNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Web Audio API 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/AnalyserNode\"><code>AnalyserNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioContext\"><code>AudioContext</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioDestinationNode\"><code>AudioDestinationNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioListener\"><code>AudioListener</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioNode\"><code>AudioNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioParam\"><code>AudioParam</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioProcessingEvent\"><code>AudioProcessingEvent</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioWorklet\"><code>AudioWorklet</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioWorkletGlobalScope\"><code>AudioWorkletGlobalScope</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a></li><li><a href=\"/zh-CN/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a></li><li><a href=\"/zh-CN/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ChannelMergerNode\"><code>ChannelMergerNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ChannelSplitterNode\"><code>ChannelSplitterNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ConstantSourceNode\"><code>ConstantSourceNode</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/ConvolverNode\"><code>ConvolverNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DelayNode\"><code>DelayNode</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/DynamicsCompressorNode\"><code>DynamicsCompressorNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/GainNode\"><code>GainNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IIRFilterNode\"><code>IIRFilterNode</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStreamAudioDestinationNode\"><code>MediaStreamAudioDestinationNode</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/MediaStreamAudioSourceNode\"><code>MediaStreamAudioSourceNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioCompletionEvent\"><code>OfflineAudioCompletionEvent</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/OfflineAudioContext\"><code>OfflineAudioContext</code></a></li><li><a href=\"/zh-CN/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PannerNode\"><code>PannerNode</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/StereoPannerNode\"><code>StereoPannerNode</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/WaveShaperNode\"><code>WaveShaperNode</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>AudioBufferSourceNode</code></strong> 接口继承自 <a href=\"/zh-CN/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a>，表现为一个音频源，它包含了一些写在内存中的音频数据，通常储存在一个 ArrayBuffer 对象中。在处理有严格的时间精确度要求的回放的情形下它尤其有用。比如播放那些需要满足一个指定节奏的声音或者那些储存在内存而不是硬盘或者来自网络的声音。为了播放那些有时间精确度需求但来自网络的流文件或者来自硬盘，则使用 <a href=\"/zh-CN/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a> 来实现回放。</p><svg viewBox=\"-1 -1 650 42\" preserveAspectRatio=\"xMinYMin meet\">\n  <a style=\"text-decoration: none;\" xlink:href=\"/zh-CN/docs/Web/API/EventTarget\">\n    <rect x=\"0\" y=\"0\" width=\"88\" height=\"25\" fill=\"#fff\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"44\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      EventTarget\n    </text>\n  </a>\n  <line x1=\"88\" y1=\"14\" x2=\"118\" y2=\"14\" stroke=\"#D4DDE4\" \"=\"\"></line>\n  <polyline points=\"88,14 98,9 98,19 88,14\" stroke=\"#D4DDE4\" fill=\"#fff\"></polyline>\n  <a style=\"text-decoration: none;\" xlink:href=\"/zh-CN/docs/Web/API/AudioNode\">\n    <rect x=\"118\" y=\"0\" width=\"75\" height=\"25\" fill=\"#fff\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"155.5\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      AudioNode\n    </text>\n  </a>\n  <line x1=\"193\" y1=\"14\" x2=\"223\" y2=\"14\" stroke=\"#D4DDE4\" \"=\"\"></line>\n  <polyline points=\"193,14 203,9 203,19 193,14\" stroke=\"#D4DDE4\" fill=\"#fff\"></polyline>\n  <a style=\"text-decoration: none;\" xlink:href=\"/zh-CN/docs/Web/API/AudioScheduledSourceNode\">\n    <rect x=\"223\" y=\"0\" width=\"192\" height=\"25\" fill=\"#fff\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"319\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      AudioScheduledSourceNode\n    </text>\n  </a>\n  <line x1=\"415\" y1=\"14\" x2=\"445\" y2=\"14\" stroke=\"#D4DDE4\" \"=\"\"></line>\n  <polyline points=\"415,14 425,9 425,19 415,14\" stroke=\"#D4DDE4\" fill=\"#fff\"></polyline>\n  <a style=\"text-decoration: none;\" xlink:href=\"/zh-CN/docs/Web/API/AudioBufferSourceNode\" aria-current=\"page\">\n    <rect x=\"445\" y=\"0\" width=\"168\" height=\"25\" fill=\"#F4F7F8\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"529\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      AudioBufferSourceNode\n    </text>\n  </a></svg>\n<p><code>AudioBufferSourceNode</code> 没有输入却有一个输出，其通道数与其 <a href=\"/zh-CN/docs/Web/API/AudioBufferSourceNode/buffer\" title=\"buffer\"><code>buffer</code></a> 属性所指定的 <code>AudioBuffer</code> 相同。如果没有设置 buffer，也就是说 <code>buffer</code> 属性是 <code>null</code> 的话，输出将包含一个无声的单通道（每个采样点均为 0）。</p>\n<p>一个 <a href=\"/zh-CN/docs/Web/API/AudioBufferSourceNode\" aria-current=\"page\"><code>AudioBufferSourceNode</code></a> 只能被播放一次，也就是说，每次调用 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioScheduledSourceNode/start\"><code>start()</code> <small>(en-US)</small></a> 之后，如果还想再播放一遍同样的声音，那么就需要再创建一个 <code>AudioBufferSourceNode</code>。庆幸的是，创建该节点的代价并不大，并且想要多次播放声音的话，实际上 <code>AudioBuffer</code> 也可以被重用。事实上，你可以用一种“阅后即焚”的方式来使用这些节点：创建节点，调用 <code>start()</code> 开始播放声音，然后，你甚至不需要再保留这个节点的引用了。声音播放完成之后，垃圾收集器会找个恰当的时机回收资源。</p>\n<p><code>多次调用 AudioBufferSourceNode.stop()</code> 是允许的。如果这时候 <code>AudioBufferSourceNode</code> 还没有到达缓冲区末尾的话，最近一次的调用将替换上一次的调用。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/AudioBufferSourceNode/webaudioaudiobuffersourcenode.png\" alt=\"The AudioBufferSourceNode takes the content of an AudioBuffer and m\" width=\"365\" height=\"193\" loading=\"lazy\">\n</p>\n<table class=\"properties\">\n  <tbody>\n    <tr>\n      <th scope=\"row\">输入数量</th>\n      <td><code>0</code></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">输出数量</th>\n      <td><code>1</code></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">频道数量</th>\n      <td>由相关的 <a href=\"/zh-CN/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a> 定义</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"属性","title":"属性","isH3":false,"content":"<p><em>从父级的</em> <em><a href=\"/zh-CN/docs/Web/API/AudioNode\"><code>AudioNode</code></a> 继承属性</em>.</p>\n<dl>\n  <dt id=\"audiobuffersourcenode.buffer\"><a href=\"/zh-CN/docs/Web/API/AudioBufferSourceNode/buffer\"><code>AudioBufferSourceNode.buffer</code></a></dt>\n  <dd>\n    <p>是一个 <a href=\"/zh-CN/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a> 它定义了要播放的音频，当设置它的值为 0 时，它会定义一个静默的单通道。</p>\n  </dd>\n  <dt id=\"audiobuffersourcenode.detune_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBufferSourceNode/detune\"><code>AudioBufferSourceNode.detune</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Is a <a href=\"/en-US/docs/Web/API/AudioParam#k-rate\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">k-rate (en-US)</a> <a href=\"/zh-CN/docs/Web/API/AudioParam\"><code>AudioParam</code></a> representing detuning of oscillation in <a href=\"http://en.wikipedia.org/wiki/Cent_%28music%29\" class=\"external\" rel=\" noopener\">cents</a>. Its default value is <code>0</code>.</p>\n  </dd>\n  <dt id=\"audiobuffersourcenode.loop_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBufferSourceNode/loop\"><code>AudioBufferSourceNode.loop</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Is a Boolean attribute indicating if the audio asset must be replayed when the end of the <a href=\"/zh-CN/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a> is reached. Its default value is <code>false</code>.</p>\n  </dd>\n  <dt id=\"audiobuffersourcenode.loopstart_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBufferSourceNode/loopStart\"><code>AudioBufferSourceNode.loopStart</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Is a double value indicating, in seconds, where in the <a href=\"/zh-CN/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a> the restart of the play must happen. Its default value is <code>0</code>.</p>\n  </dd>\n  <dt id=\"audiobuffersourcenode.loopend_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBufferSourceNode/loopEnd\"><code>AudioBufferSourceNode.loopEnd</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Is a double value indicating, in seconds, where in the <a href=\"/zh-CN/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a> the replay of the play must stop (and eventually loop again). Its default value is <code>0</code>.</p>\n  </dd>\n  <dt id=\"audiobuffersourcenode.playbackrate_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioBufferSourceNode/playbackRate\"><code>AudioBufferSourceNode.playbackRate</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Is an <a href=\"/zh-CN/docs/Web/API/AudioParam#a-rate\">a-rate</a> <a href=\"/zh-CN/docs/Web/API/AudioParam\"><code>AudioParam</code></a> that defines the speed factor at which the audio asset will be played. Since no pitch correction is applied on the output, this can be used to change the pitch of the sample.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"事件","title":"事件","isH3":true,"content":"<dl>\n  <dt id=\"audiobuffersourcenode.onended_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioScheduledSourceNode/ended_event\"><code>AudioBufferSourceNode.onended</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>是一个 <code><a href=\"/zh-CN/docs/Web/Reference/Events/Event_handlers\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">event handler</a></code> 类型，包含了与 <code><a href=\"/en-US/docs/Web/API/HTMLMediaElement/ended_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">ended (en-US)</a></code> 相关联的结束事件。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"方法","title":"方法","isH3":false,"content":"<p><em>从父级的</em> <em><a href=\"/zh-CN/docs/Web/API/AudioNode\"><code>AudioNode</code></a> 继承方法</em>.</p>\n<dl>\n  <dt id=\"audiobuffersourcenode.start\"><a href=\"/zh-CN/docs/Web/API/AudioBufferSourceNode/start\"><code>AudioBufferSourceNode.start()</code></a></dt>\n  <dd>\n    <p>Schedules the start of the playback of the audio asset.</p>\n  </dd>\n  <dt id=\"audiobuffersourcenode.stop_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioScheduledSourceNode/stop\"><code>AudioBufferSourceNode.stop()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Schedules the end of the playback of an audio asset.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例子","title":"例子","isH3":false,"content":"<p>在这个例子中，我们将会创建一个 2 秒的缓冲器，并用白噪音填充它，然后通过<a href=\"/zh-CN/docs/Web/API/AudioBufferSourceNode\" aria-current=\"page\"><code>AudioBufferSourceNode</code></a>来播放它。注释里说明了它的功能。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 你可以 <a href=\"https://mdn.github.io/audio-buffer/\" class=\"external\" rel=\" noopener\">查看在线演示</a> 或 <a href=\"https://github.com/mdn/audio-buffer\" class=\"external\" rel=\" noopener\">查看源代码</a>.</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> audioCtx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>AudioContext <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>webkitAudioContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> pre <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pre'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myScript <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npre<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> myScript<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Stereo</span>\n<span class=\"token keyword\">var</span> channels <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Create an empty two-second stereo buffer at the</span>\n<span class=\"token comment\">// sample rate of the AudioContext</span>\n<span class=\"token keyword\">var</span> frameCount <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span>sampleRate <span class=\"token operator\">*</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myArrayBuffer <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> frameCount<span class=\"token punctuation\">,</span> audioCtx<span class=\"token punctuation\">.</span>sampleRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbutton<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Fill the buffer with white noise;</span>\n  <span class=\"token comment\">//just random values between -1.0 and 1.0</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> channel <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> channel <span class=\"token operator\">&lt;</span> channels<span class=\"token punctuation\">;</span> channel<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// This gives us the actual ArrayBuffer that contains the data</span>\n   <span class=\"token keyword\">var</span> nowBuffering <span class=\"token operator\">=</span> myArrayBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">getChannelData</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> frameCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// Math.random() is in [0; 1.0]</span>\n     <span class=\"token comment\">// audio needs to be in [-1.0; 1.0]</span>\n     nowBuffering<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Get an AudioBufferSourceNode.</span>\n  <span class=\"token comment\">// This is the AudioNode to use when we want to play an AudioBuffer</span>\n  <span class=\"token keyword\">var</span> source <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createBufferSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// set the buffer in the AudioBufferSourceNode</span>\n  source<span class=\"token punctuation\">.</span>buffer <span class=\"token operator\">=</span> myArrayBuffer<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// connect the AudioBufferSourceNode to the</span>\n  <span class=\"token comment\">// destination so we can hear the sound</span>\n  source<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// start the source playing</span>\n  source<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 音频数据解码的例子请查看 <a href=\"/zh-CN/docs/Web/API/BaseAudioContext/decodeAudioData\"><code>AudioContext.decodeAudioData</code></a> 页面。</p>\n</div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://webaudio.github.io/web-audio-api/#AudioBufferSourceNode","title":"Web Audio API"}],"query":"api.AudioBufferSourceNode"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.AudioBufferSourceNode","dataURL":"/zh-CN/docs/Web/API/AudioBufferSourceNode/bcd.json"}},{"type":"prose","value":{"id":"相关页面","title":"相关页面","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/Web_Audio_API/Using_Web_Audio_API\">Using the Web Audio API</a></li>\n</ul>"}}],"toc":[{"text":"属性","id":"属性"},{"text":"方法","id":"方法"},{"text":"例子","id":"例子"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"相关页面","id":"相关页面"}],"summary":"AudioBufferSourceNode 接口继承自 AudioScheduledSourceNode，表现为一个音频源，它包含了一些写在内存中的音频数据，通常储存在一个 ArrayBuffer 对象中。在处理有严格的时间精确度要求的回放的情形下它尤其有用。比如播放那些需要满足一个指定节奏的声音或者那些储存在内存而不是硬盘或者来自网络的声音。为了播放那些有时间精确度需求但来自网络的流文件或者来自硬盘，则使用 AudioWorkletNode 来实现回放。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"AudioBufferSourceNode","locale":"en-US","native":"English (US)"},{"title":"AudioBufferSourceNode","locale":"fr","native":"Français"},{"title":"AudioBufferSourceNode","locale":"ja","native":"日本語"},{"title":"AudioBufferSourceNode","locale":"ko","native":"한국어"}],"source":{"folder":"zh-cn/web/api/audiobuffersourcenode","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/audiobuffersourcenode/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/AudioBufferSourceNode","title":"AudioBufferSourceNode"}],"pageTitle":"AudioBufferSourceNode - Web API 接口参考 | MDN","noIndexing":false}}