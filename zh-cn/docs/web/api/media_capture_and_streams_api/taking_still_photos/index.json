{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Taking still photos with WebRTC","mdn_url":"/zh-CN/docs/Web/API/Media_Capture_and_Streams_API/Taking_still_photos","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n <ol>\n  <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API\"><strong>WebRTC API</strong></a></li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>WebRTC Guides</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API/Architecture\">WebRTC Architecture</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API/WebRTC_Basics\">WebRTC Basics</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API/Protocols\">WebRTC Protocols</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API/Connectivity\">Dealing with connectivity</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API/Overview\">Overview of WebRTC interfaces</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API/Session_lifetime\">Lifetime of a WebRTC Session</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API/Using_data_channels\">Using data channels</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>WebRTC Tutorials</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API/adapter.js\">Interoperability with adapter.js</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API/Taking_still_photos\">Taking still photos from the camera</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API/Simple_RTCDataChannel_sample\">A simple data channel example</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs\">Building an internet-connected phone with Peer.js</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Interfaces</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/API/MediaDevices\"><code>MediaDevices</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/MediaStream\"><code>MediaStream</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/MediaStreamEvent\"><code>MediaStreamEvent</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/MessageEvent\"><code>MessageEvent</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCIceCandidate\"><code>RTCIceCandidate</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnectionIceEvent\"><code>RTCPeerConnectionIceEvent</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/RTCSessionDescription\"><code>RTCSessionDescription</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/RTCStatsReport\"><code>RTCStatsReport</code></a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/zh-CN/docs/MDN\">Documentation:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Contribute</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/MDN\">The MDN project</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>本文介绍如何使用 WebRTC 在 支持 WebRTC 的计算机或手机上访问摄像机，并用其拍照。 <a href=\"https://mdn-samples.mozilla.org/s/webrtc-capturestill\" class=\"external\" rel=\" noopener\">尝试一下这个示例</a>，然后继续阅读，了解它的工作原理。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Media_Capture_and_Streams_API/Taking_still_photos/web-rtc-demo.png\" alt=\"WebRTC-based image capture app — on the left we have a video stream taken from a webcam and a take photo button, on the right we have the still image output from taking the photo\" width=\"677\" height=\"252\" loading=\"lazy\">\n</p>\n<p>如果你喜欢，你也可以直接跳转到 <a href=\"https://github.com/mdn/samples-server/tree/master/s/webrtc-capturestill\" class=\"external\" rel=\" noopener\">GitHub 上的代码</a>。</p>"}},{"type":"prose","value":{"id":"html_标记","title":"HTML 标记","isH3":false,"content":"<p><a href=\"https://github.com/mdn/samples-server/tree/master/s/webrtc-capturestill/index.html\" class=\"external\" rel=\" noopener\">我们的 HTML 界面</a>有两个主要的操作区域：流和捕获面板以及演示面板。它们俩都在它们自己的 <a href=\"/zh-CN/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a> 中并排呈现，以便于造型和控制。</p>\n<p>左边的面板包含两个组件：一个 <a href=\"/zh-CN/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a> 元素，它将接收来自 WebRTC 的流，以及用户点击捕获视频帧的 <a href=\"/zh-CN/docs/Web/HTML/Element/button\"><code>&lt;button&gt;</code></a>。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>camera<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Video stream not available.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>startbutton<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Take photo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>这很简单，当我们进入 JavaScript 代码时，我们将看到他们是如何紧密联系在一起的。</p>\n<p>接下来，我们有一个 <a href=\"/zh-CN/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> 元素，捕获的帧被存储到其中，可能以某种方式进行操作，然后转换为输出图像文件。通过使用样式 <a href=\"/zh-CN/docs/Web/CSS/display\"><code>display</code></a><code>:none</code> 将画布保持隐藏，以避免画面的混乱 —— 用户不需要看到这个中间过程。</p>\n<p>我们还有一个 <a href=\"/zh-CN/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a> 元素，我们将涌起绘制图像——这是让用户看到的最终显示。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>canvas</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>canvas<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>canvas</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>output<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>photo<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>The screen capture will appear in this box.<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>这是所有相关的 HTML。其余的只是一些页面布局和提供一个返回页面链接的些许文本。</p>"}},{"type":"prose","value":{"id":"javascript_代码","title":"JavaScript 代码","isH3":false,"content":"<p>现在来看看 <a href=\"https://github.com/mdn/samples-server/tree/master/s/webrtc-capturestill/capture.js\" class=\"external\" rel=\" noopener\">JavaScript</a> 代码。我们将把它分解成几个小的部分，使其更容易解释。</p>"}},{"type":"prose","value":{"id":"初始化","title":"初始化","isH3":true,"content":"<p>我们首先将整个脚本包装在匿名函数中，以避免使用全局变量，然后设置我们将要使用的各种变量。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> width <span class=\"token operator\">=</span> <span class=\"token number\">320</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// We will scale the photo width to this</span>\n  <span class=\"token keyword\">var</span> height <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// This will be computed based on the input stream</span>\n\n  <span class=\"token keyword\">var</span> streaming <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> video <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> photo <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> startbutton <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>那些变量是：</p>\n<dl>\n  <dt id=\"width\"><strong><code>width</code></strong></dt>\n  <dd>\n    <p>无论输入视频的尺寸如何，我们将把所得到的图像缩放到 320 像素宽。</p>\n  </dd>\n  <dt id=\"height\"><strong><code>height</code></strong></dt>\n  <dd>\n    <p>给定流的 <code>width</code> 和宽高比，计算出图像的输出高度。</p>\n  </dd>\n  <dt id=\"streaming\"><strong><code>streaming</code></strong></dt>\n  <dd>\n    <p>指示当前是否有活动的视频流正在运行。</p>\n  </dd>\n  <dt id=\"video\"><strong><code>video</code></strong></dt>\n  <dd>\n    <p>这将是页面加载完成后对 <a href=\"/zh-CN/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a> 元素的引用。</p>\n  </dd>\n  <dt id=\"canvas\"><strong><code>canvas</code></strong></dt>\n  <dd>\n    <p>这将是页面加载完成后对 <a href=\"/zh-CN/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> 元素的引用。</p>\n  </dd>\n  <dt id=\"photo\"><strong><code>photo</code></strong></dt>\n  <dd>\n    <p>这将在页面加载完成后引用 <a href=\"/zh-CN/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a> 元素。</p>\n  </dd>\n  <dt id=\"startbutton\"><strong><code>startbutton</code></strong></dt>\n  <dd>\n    <p>这将引用用于触发捕获的 <a href=\"/zh-CN/docs/Web/HTML/Element/button\"><code>&lt;button&gt;</code></a> 元素。我们会在页面加载完成之后得到。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"startup_函数","title":"startup( ) 函数","isH3":true,"content":"<p>当页面加载完成时，<code>startup( )</code> 函数运行，由 window.addEventListener( ) 提供。此功能的作用是请求访问用户的网络摄像头，将输出&lt;img&gt;初始化为默认状态，并建立从相机接收每帧视频所需的事件侦听器，并在点击按钮捕获图像时作出反应。</p>\n<h4 id=\"获取元素引用\">获取元素引用</h4>\n<p>首先，我们参考我们需要访问的主要内容。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">function</span> <span class=\"token function\">startup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    video <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'video'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    photo <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'photo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    startbutton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'startbutton'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"获取流媒体\">获取流媒体</h4>\n<p>接下来的任务是获取媒体流：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>    navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stream</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        video<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">;</span>\n        video<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"An error occured! \"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在这里，我们正在调用 <a href=\"/zh-CN/docs/Web/API/MediaDevices/getUserMedia\"><code>MediaDevices.getUserMedia()</code></a> 并请求视频流（无音频）。它返回一个 promise，我们给它附加成功和失败情况下的回调方法。</p>\n<p>成功回调接收一个 stream 对象作为输入。它是新视频的 <a href=\"/zh-CN/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a> 元素的源。</p>\n<p>一旦流被链接到 <code><a href=\"/zh-CN/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a></code> 元素，我们通过调用 <a href=\"/zh-CN/docs/Web/API/HTMLMediaElement#play\"><code>HTMLMediaElement.play()</code></a> 开始播放。</p>\n<p>如果打开流失败，则调用失败回调函数。在没有连接兼容的相机，或者用户拒绝访问时，则会发生这种情况。</p>"}},{"type":"prose","value":{"id":"监听视频开始播放","title":"监听视频开始播放","isH3":true,"content":"<p>在 <code><a href=\"/zh-CN/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a></code> 上调用 <a href=\"/zh-CN/docs/Web/API/HTMLMediaElement#play\"><code>HTMLMediaElement.play()</code></a> 之后，在视频流开始流动之前，有一段（希望简短）的时间段过去了。为了避免在此之前一直阻塞，我们为 <code><a href=\"/zh-CN/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a></code> 加上一个 <code><a href=\"/en-US/docs/Web/API/HTMLMediaElement/canplay_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">canplay (en-US)</a></code> 事件的监听器，当视频播放实际开始时会触发该事件。那时，视频对象中的所有属性都已基于流的格式进行配置。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>    video<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canplay'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ev</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>streaming<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        height <span class=\"token operator\">=</span> video<span class=\"token punctuation\">.</span>videoHeight <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>video<span class=\"token punctuation\">.</span>videoWidth<span class=\"token operator\">/</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        video<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'width'</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        video<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'height'</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        canvas<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'width'</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        canvas<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'height'</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        streaming <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这个回调什么都不做，除非它是第一次被调用; 这是通过查看我们的流变量的值进行测试，这是第一次运行此方法时为 false。</p>\n<p>如果这是第一次运行，我们会根据视频的实际大小，video.videoWidth 和要渲染视频宽度的宽度之间的大小差异来设置视频的高度。</p>\n<p>最后，通过在每个元素的两个属性的每一个上调用 Element.setAttribute（）来设置视频和画布的宽度和高度，并根据需要设置宽度和高度。最后，我们将流变量设置为 true，以防止我们再次无意中运行此设置代码。</p>\n<h4 id=\"处理按钮上的点击\">处理按钮上的点击</h4>\n<p>为了在每次用户单击启动按钮时捕获静态照片，我们需要向按钮添加一个事件侦听器，以便在发出点击事件时被调用：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>    startbutton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ev</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">takepicture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      ev<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这个方法很简单：它只是调用我们的 takepicture（）函数，在从流中捕获一个帧的部分中定义，然后在接收的事件上调用 Event.preventDefault（），以防止点击被多次处理。</p>\n<p>包装 startup（）方法</p>\n<p>startup（）方法中只有两行代码：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>    <span class=\"token function\">clearphoto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>这就是我们在 Clearflow（）方法中，我们将在下面的清理照片框中进行描述。</p>"}},{"type":"prose","value":{"id":"清除照片框","title":"清除照片框","isH3":true,"content":"<p>清除照片框包括创建一个图像，然后将其转换为可以显示最近捕获的帧的&lt;img&gt;元素使用的格式。该代码如下所示：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">function</span> <span class=\"token function\">clearphoto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> context <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">\"#AAA\"</span><span class=\"token punctuation\">;</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">toDataURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image/png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    photo<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>我们首先得到对我们用于屏幕外渲染的隐藏的&lt;canvas&gt;元素的引用。接下来，我们将 fillStyle 设置为#AAA（相当浅灰色），并通过调用 fillRect（）来填充整个画布。</p>\n<p>最后在此功能中，我们将画布转换为 PNG 图像，并调用 photo.setAttribute（）以使我们捕获的静止框显示图像。</p>"}},{"type":"prose","value":{"id":"从流中捕获帧","title":"从流中捕获帧","isH3":true,"content":"<p>最后一个定义的功能是整个练习的重点：takepicture（）函数，其捕获当前显示的视频帧的作业将其转换为 PNG 文件，并将其显示在捕获的帧框中。代码如下所示：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">function</span> <span class=\"token function\">takepicture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> context <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>width <span class=\"token operator\">&amp;&amp;</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width<span class=\"token punctuation\">;</span>\n      canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height<span class=\"token punctuation\">;</span>\n      context<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>video<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">toDataURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image/png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      photo<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">clearphoto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>正如我们需要处理画布内容的情况一样，我们首先得到隐藏画布的 2D 绘图上下文。</p>\n<p>然后，如果宽度和高度都是非零（意味着至少有潜在有效的图像数据），我们将画布的宽度和高度设置为与捕获帧的宽度和高度相匹配，然后调用 drawImage（）来绘制当前的 将视频帧放入上下文中，用帧图像填充整个画布。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 这可以利用 HTMLVideoElement 接口看起来像任何接受 HTMLImageElement 作为参数的 API 的 HTMLImageElement，将视频的当前帧呈现为图像的内容。</p>\n</div>\n<p>一旦画布包含捕获的图像，我们通过调用它的 HTMLCanvasElement.toDataURL（）将它转换为 PNG 格式; 最后，我们调用 photo.setAttribute（）来使我们捕获的静态框显示图像。</p>\n<p>如果没有可用的有效图像（即宽度和高度均为 0），则通过调用 clearphoto（）清除捕获帧框的内容。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 加载完毕后开始运行</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> startup<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"过滤器的乐趣","title":"过滤器的乐趣","isH3":false,"content":"<p>由于我们通过从&lt;video&gt;元素中抓取帧来捕获用户网络摄像头的图像，因此我们可以非常轻松地将过滤器和有趣的效果应用于视频。事实证明，使用过滤器属性应用于元素的任何 CSS 过滤器都会影响捕获的照片。这些过滤器可以从简单（使图像黑白）到极限（高斯模糊和色调旋转）。</p>\n<p>您可以使用例如 Firefox 开发人员工具的风格编辑器来播放此效果; 有关如何执行此操作的详细信息，请参阅编辑 CSS 过滤器。</p>"}},{"type":"prose","value":{"id":"另请参阅","title":"另请参阅","isH3":false,"content":"<ul>\n  <li><a href=\"https://mdn-samples.mozilla.org/s/webrtc-capturestill\" class=\"external\" rel=\" noopener\">Try this sample</a></li>\n  <li><a href=\"https://github.com/mdn/samples-server/tree/master/s/webrtc-capturestill\" class=\"external\" rel=\" noopener\">Sample code on Github</a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/Navigator/getUserMedia\"><code>Navigator.getUserMedia()</code></a></li>\n  <li>\"<a href=\"/zh-CN/docs/Web/API/Canvas_API/Tutorial/Using_images#using_frames_from_a_video\">Using frames from a video</a>\" in <a href=\"/zh-CN/docs/Web/API/Canvas_API/Tutorial/Using_images\">Using images</a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage\"><code>CanvasRenderingContext2D.drawImage()</code></a></li>\n</ul>"}}],"toc":[{"text":"HTML 标记","id":"html_标记"},{"text":"JavaScript 代码","id":"javascript_代码"},{"text":"过滤器的乐趣","id":"过滤器的乐趣"},{"text":"另请参阅","id":"另请参阅"}],"summary":"本文介绍如何使用 WebRTC 在 支持 WebRTC 的计算机或手机上访问摄像机，并用其拍照。 尝试一下这个示例，然后继续阅读，了解它的工作原理。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Taking still photos with getUserMedia()","locale":"en-US","native":"English (US)"},{"title":"Capturar fotografías con la cámara web","locale":"es","native":"Español"},{"title":"Prendre des photos avec la webcam","locale":"fr","native":"Français"},{"title":"Захват кадров с WebRTC","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/api/media_capture_and_streams_api/taking_still_photos","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/media_capture_and_streams_api/taking_still_photos/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/Media_Capture_and_Streams_API","title":"MediaStream API"},{"uri":"/zh-CN/docs/Web/API/Media_Capture_and_Streams_API/Taking_still_photos","title":"Taking still photos with WebRTC"}],"pageTitle":"Taking still photos with WebRTC - Web API 接口参考 | MDN","noIndexing":false}}