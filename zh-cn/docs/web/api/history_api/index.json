{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"History API","mdn_url":"/zh-CN/docs/Web/API/History_API","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/History_API\">History API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>指南</summary><ol><li><a href=\"/zh-CN/docs/Web/API/History_API/Working_with_the_History_API\">Working with the History API</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>接口</summary><ol><li><a href=\"/zh-CN/docs/Web/API/History\"><code>History</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>DOM <a href=\"/zh-CN/docs/Web/API/Window\"><code>window</code></a> 对象通过 <a href=\"/zh-CN/docs/Web/API/Window/history\" title=\"history\"><code>history</code></a> 对象提供了对浏览器的会话历史的访问 (不要与 <a href=\"/zh-CN/docs/Mozilla/Add-ons/WebExtensions/API/history\">WebExtensions history</a>搞混了)。它暴露了很多有用的方法和属性，允许你在用户浏览历史中向前和向后跳转，同时——从 HTML5 开始——提供了对 history 栈中内容的操作。</p>"}},{"type":"prose","value":{"id":"意义及使用","title":"意义及使用","isH3":false,"content":"<p>使用 <a href=\"/zh-CN/docs/Web/API/History/back\" title=\"back()\"><code>back()</code></a>, <a href=\"/zh-CN/docs/Web/API/History/forward\" title=\"forward()\"><code>forward()</code></a>和 <a href=\"/zh-CN/docs/Web/API/History/go\" title=\"go()\"><code>go()</code></a> 方法来完成在用户历史记录中向后和向前的跳转。</p>"}},{"type":"prose","value":{"id":"向前和向后跳转","title":"向前和向后跳转","isH3":true,"content":"<p>在 history 中向后跳转：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这和用户点击浏览器回退按钮的效果相同。</p>\n<p>类似地，你可以向前跳转（如同用户点击了前进按钮）：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"跳转到_history_中指定的一个点","title":"跳转到 history 中指定的一个点","isH3":true,"content":"<p>你可以用 <code>go()</code> 方法载入到会话历史中的某一特定页面， 通过与当前页面相对位置来标志 (当前页面的相对位置标志为 0).</p>\n<p>向后移动一个页面 (等同于调用 <code>back()</code>):</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>向前移动一个页面，等同于调用了 <code>forward()</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>类似地，你可以传递参数值 2 并向前移动 2 个页面，等等。</p>\n<p>您可以通过查看长度属性的值来确定的历史堆栈中页面的数量：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code> <span class=\"token keyword\">let</span> numberOfEntries <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> IE 支持传递 URLs 作为参数给 go()；这在 Gecko 是不标准且不支持的。</p>\n</div>"}},{"type":"prose","value":{"id":"添加和修改历史记录中的条目","title":"添加和修改历史记录中的条目","isH3":false,"content":"<p>HTML5 引入了 <a href=\"/zh-CN/docs/Web/API/History/pushState\">history.pushState()</a> 和 <a href=\"/zh-CN/docs/Web/API/History_API#The_replaceState()_method\" aria-current=\"page\">history.replaceState()</a> 方法，它们分别可以添加和修改历史记录条目。这些方法通常与<a href=\"/zh-CN/docs/Web/API/Window/popstate_event\"><code>window.onpopstate</code></a> 配合使用。</p>\n<p>使用 <code>history.pushState()</code> 可以改变 referrer，它在用户发送 <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> 请求时在 HTTP 头部使用，改变 state 后创建的 <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> 对象的 referrer 都会被改变。因为 referrer 是标识创建 <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> 对象时 <code>this</code> 所代表的 window 对象中 document 的 URL。</p>"}},{"type":"prose","value":{"id":"pushstate_方法的例子","title":"pushState() 方法的例子","isH3":true,"content":"<p>假设在 <code>http://mozilla.org/foo.html</code> 页面的 console 中执行了以下 JavaScript 代码：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onpopstate</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> stateObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span>stateObj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"page 2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这将使浏览器地址栏显示为 <code>http://mozilla.org/bar.html</code>，但并不会导致浏览器加载 <code>bar.html</code> ，甚至不会检查<code>bar.html</code> 是否存在。</p>\n<p>假如现在用户在 bar.html 点击了返回按钮，将会执行 alert(2)。</p>\n<p>假设现在用户在 bar.html 又访问了 <code>http://google.com</code>，然后点击了返回按钮。此时，地址栏将显示 <code>http://mozilla.org/bar.html</code>， <code>history.state</code> 中包含了 <code>stateObj</code> 的一份拷贝。页面此时展现为<code>bar.html</code>。且因为页面被重新加载了，所以 <code>popstate</code> 事件将不会被触发，也不会执行 alert(2)。</p>\n<p>如果我们再次点击返回按钮，页面 URL 会变为 <code>http://mozilla.org/foo.html</code>，文档对象 document 会触发另外一个 <code>popstate</code> 事件 (如果有 bar.html，且 bar.html 注册了 onpopstate 事件，将会触发此事件，因此也不会执行 foo 页面注册的 onpopstate 事件，也就是不会执行 alert(2))，这一次的事件对象 state object 为 null。 这里也一样，返回并不改变文档的内容，尽管文档在接收 <code>popstate</code> 事件时可能会改变自己的内容，其内容仍与之前的展现一致。</p>\n<p>如果我们再次点击返回按钮，页面 URL 变为其他页面的 url，依然不会执行 alert(2)。因为在返回到 foo 页面的时候并没有 pushState。</p>"}},{"type":"prose","value":{"id":"pushstate_方法","title":"pushState() 方法","isH3":true,"content":"<p><code>pushState()</code> 需要三个参数：一个状态对象，一个标题 (目前被忽略), 和 (可选的) 一个 URL. 让我们来解释下这三个参数详细内容：</p>\n<ul>\n  <li>\n    <strong>状态对象</strong> — 状态对象 state 是一个 JavaScript 对象，通过 pushState () 创建新的历史记录条目。无论什么时候用户导航到新的状态，popstate 事件就会被触发，且该事件的 state 属性包含该历史记录条目状态对象的副本。\n    状态对象可以是能被序列化的任何东西。原因在于 Firefox 将状态对象保存在用户的磁盘上，以便在用户重启浏览器时使用，我们规定了状态对象在序列化表示后有 640k 的大小限制。如果你给 <code>pushState()</code> 方法传了一个序列化后大于 640k 的状态对象，该方法会抛出异常。如果你需要更大的空间，建议使用 <code>sessionStorage</code> 以及 <code>localStorage</code>.\n  </li>\n  <li><strong>标题</strong> — Firefox 目前忽略这个参数，但未来可能会用到。在此处传一个空字符串应该可以安全的防范未来这个方法的更改。或者，你可以为跳转的 state 传递一个短标题。</li>\n  <li><strong>URL</strong> — 该参数定义了新的历史 URL 记录。注意，调用 <code>pushState()</code> 后浏览器并不会立即加载这个 URL，但可能会在稍后某些情况下加载这个 URL，比如在用户重新打开浏览器时。新 URL 不必须为绝对路径。如果新 URL 是相对路径，那么它将被作为相对于当前 URL 处理。新 URL 必须与当前 URL 同源，否则 <code>pushState()</code> 会抛出一个异常。该参数是可选的，缺省为当前 URL。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 从 Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1) 到 Gecko 5.0 (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2)，传递的对象是使用 JSON 进行序列化的。 从 Gecko 6.0 (Firefox 6.0 / Thunderbird 6.0 / SeaMonkey 2.3)开始，该对象的序列化将使用<a href=\"/zh-CN/docs/DOM/The_structured_clone_algorithm\">结构化克隆算法</a>。这将会使更多对象可以被安全的传递。</p>\n</div>\n<p>在某种意义上，调用 <code>pushState()</code> 与 设置 <code>window.location = \"#foo\"</code> 类似，二者都会在当前页面创建并激活新的历史记录。但 <code>pushState()</code> 具有如下几条优点：</p>\n<ul>\n  <li>新的 URL 可以是与当前 URL 同源的任意 URL 。相反，只有在修改哈希时，设置 <code>window.location</code> 才能是同一个 <a href=\"/zh-CN/docs/Web/API/Document\"><code>document</code></a>。</li>\n  <li>如果你不想改 URL，就不用改。相反，设置 <code>window.location = \"#foo\";</code>在当前哈希不是 <code>#foo</code> 时， 才能创建新的历史记录项。</li>\n  <li>你可以将任意数据和新的历史记录项相关联。而基于哈希的方式，要把所有相关数据编码为短字符串。</li>\n  <li>如果 <code>标题</code> 随后还会被浏览器所用到，那么这个数据是可以被使用的（哈希则不是）。</li>\n</ul>\n<p>注意 <code>pushState()</code> 绝对不会触发 <code>hashchange</code> 事件，即使新的 URL 与旧的 URL 仅哈希不同也是如此。</p>\n<p>在 <a href=\"/zh-CN/docs/Mozilla/Tech/XUL\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">XUL</a> 文档中，它创建指定的 XUL 元素。</p>\n<p>在其它文档中，它创建一个命名空间 URI 为<code>null</code>的元素。</p>"}},{"type":"prose","value":{"id":"replacestate_方法","title":"replaceState() 方法","isH3":true,"content":"<p><code>history.replaceState()</code> 的使用与 <code>history.pushState()</code> 非常相似，区别在于 <code>replaceState()</code> 是修改了当前的历史记录项而不是新建一个。 注意这并不会阻止其在全局浏览器历史记录中创建一个新的历史记录项。</p>\n<p><code>replaceState()</code> 的使用场景在于为了响应用户操作，你想要更新状态对象 state 或者当前历史记录的 URL。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 从 Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1) 到 Gecko 5.0 (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2)，传递的对象是使用 JSON 进行序列化的。 从 Gecko 6.0 (Firefox 6.0 / Thunderbird 6.0 / SeaMonkey 2.3) 开始，该对象的序列化将使用<a href=\"/zh-CN/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\">结构化克隆算法</a>。这将会使更多对象可以被安全的传递。</p>\n</div>"}},{"type":"prose","value":{"id":"replacestate_方法示例","title":"replaceState() 方法示例","isH3":true,"content":"<p>假设 <code>http://mozilla.org/foo.html</code> 执行了如下 JavaScript 代码：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> stateObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span>stateObj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"page 2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>上文 2 行代码可以在 \"pushState() 方法示例\" 部分找到。然后，假设 <code>http://mozilla.org/bar.html</code> 执行了如下 JavaScript：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>history<span class=\"token punctuation\">.</span><span class=\"token function\">replaceState</span><span class=\"token punctuation\">(</span>stateObj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"page 3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar2.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这将会导致地址栏显示 <code>http://mozilla.org/bar2.html</code>，但是浏览器并不会去加载<code>bar2.html</code> 甚至都不需要检查 <code>bar2.html</code> 是否存在。</p>\n<p>假设现在用户重新导向到了 <code>http://www.microsoft.com</code>，然后点击了回退按钮。这里，地址栏会显示 <code>http://mozilla.org/bar2.html</code>。假如用户再次点击回退按钮，地址栏会显示 <code>http://mozilla.org/foo.html</code>，完全跳过了 bar.html。</p>"}},{"type":"prose","value":{"id":"popstate_事件","title":"popstate 事件","isH3":true,"content":"<p>每当活动的历史记录项发生变化时， <code>popstate</code> 事件都会被传递给 window 对象。如果当前活动的历史记录项是被 <code>pushState</code> 创建的，或者是由 <code>replaceState</code> 改变的，那么 <code>popstate</code> 事件的状态属性 <code>state</code> 会包含一个当前历史记录状态对象的拷贝。</p>\n<p>使用示例请参见 <a href=\"/zh-CN/docs/Web/API/Window/popstate_event\"><code>window.onpopstate</code></a> 。</p>"}},{"type":"prose","value":{"id":"获取当前状态","title":"获取当前状态","isH3":true,"content":"<p>页面加载时，或许会有个非 null 的状态对象。这是有可能发生的，举个例子，假如页面（通过<code>pushState()</code> 或 <code>replaceState()</code> 方法）设置了状态对象而后用户重启了浏览器。那么当页面重新加载时，页面会接收一个 onload 事件，但没有 popstate 事件。然而，假如你读取了 history.state 属性，你将会得到如同 popstate 被触发时能得到的状态对象。</p>\n<p>你可以读取当前历史记录项的状态对象 state，而不必等待<code>popstate</code> 事件， 只需要这样使用<code>history.state</code> 属性：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token comment\">// 尝试通过 pushState 创建历史条目，然后再刷新页面查看 state 状态对象变化;</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'load'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> currentState <span class=\"token operator\">=</span> history<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'currentState'</span><span class=\"token punctuation\">,</span>currentState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"例子","title":"例子","isH3":false,"content":"<p>完整的 AJAX 网站示例，请参阅： <a href=\"/en-US/docs/Web/API/History_API/Example\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Ajax navigation example (en-US)</a>.</p>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://html.spec.whatwg.org/multipage/history.html#the-history-interface","title":"HTML Standard"}],"query":"api.History"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.History","dataURL":"/zh-CN/docs/Web/API/History_API/bcd.json"}},{"type":"prose","value":{"id":"另见","title":"另见","isH3":false,"content":""}},{"type":"prose","value":{"id":"参考","title":"参考","isH3":true,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/Window/history\"><code>window.history</code></a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/Window/popstate_event\"><code>window.onpopstate</code></a></li>\n</ul>"}},{"type":"prose","value":{"id":"guides","title":"Guides","isH3":true,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/History_API/Working_with_the_History_API\">Working with the History API</a></li>\n</ul>"}}],"toc":[{"text":"意义及使用","id":"意义及使用"},{"text":"添加和修改历史记录中的条目","id":"添加和修改历史记录中的条目"},{"text":"例子","id":"例子"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"另见","id":"另见"}],"summary":"DOM window 对象通过 history 对象提供了对浏览器的会话历史的访问 (不要与 WebExtensions history搞混了)。它暴露了很多有用的方法和属性，允许你在用户浏览历史中向前和向后跳转，同时——从 HTML5 开始——提供了对 history 栈中内容的操作。","popularity":0.0015,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"History API","locale":"en-US","native":"English (US)"},{"title":"Manipulando el historial del navegador","locale":"es","native":"Español"},{"title":"Manipuler l'historique du navigateur","locale":"fr","native":"Français"},{"title":"History API","locale":"ja","native":"日本語"},{"title":"History API","locale":"ko","native":"한국어"},{"title":"Manipulando o histórico do navegador","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"History API","locale":"ru","native":"Русский"},{"title":"操控瀏覽器歷史紀錄","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/web/api/history_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/history_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/History_API","title":"History API"}],"pageTitle":"History API - Web API 接口参考 | MDN","noIndexing":false}}