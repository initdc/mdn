{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"EventTarget.addEventListener()","mdn_url":"/zh-CN/docs/Web/API/EventTarget/addEventListener","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Document_Object_Model\">Document Object Model</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>构造函数</summary><ol><li><a href=\"/zh-CN/docs/Web/API/EventTarget/EventTarget\"><code>EventTarget()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><em><code>addEventListener()</code></em></li><li><a href=\"/zh-CN/docs/Web/API/EventTarget/dispatchEvent\"><code>dispatchEvent()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/EventTarget/removeEventListener\"><code>removeEventListener()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>DOM 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/AbortController\"><code>AbortController</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AbortSignal\"><code>AbortSignal</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AbstractRange\"><code>AbstractRange</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/Attr\"><code>Attr</code></a></li><li><a href=\"/zh-CN/docs/Web/API/CDATASection\"><code>CDATASection</code></a></li><li><a href=\"/zh-CN/docs/Web/API/CharacterData\"><code>CharacterData</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Comment\"><code>Comment</code></a></li><li><a href=\"/zh-CN/docs/Web/API/CustomEvent\"><code>CustomEvent</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMError\"><code>DOMError</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMException\"><code>DOMException</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMImplementation\"><code>DOMImplementation</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMParser\"><code>DOMParser</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMPoint\"><code>DOMPoint</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DOMPointReadOnly\"><code>DOMPointReadOnly</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMRect\"><code>DOMRect</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMTimeStamp\"><code>DOMTimeStamp</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMTokenList\"><code>DOMTokenList</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Document\"><code>Document</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DocumentFragment\"><code>DocumentFragment</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DocumentType\"><code>DocumentType</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Element\"><code>Element</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Event\"><code>Event</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLCollection\"><code>HTMLCollection</code></a></li><li><a href=\"/zh-CN/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a></li><li><a href=\"/zh-CN/docs/Web/API/NamedNodeMap\"><code>NamedNodeMap</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node\"><code>Node</code></a></li><li><a href=\"/zh-CN/docs/Web/API/NodeIterator\"><code>NodeIterator</code></a></li><li><a href=\"/zh-CN/docs/Web/API/NodeList\"><code>NodeList</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ProcessingInstruction\"><code>ProcessingInstruction</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/Range\"><code>Range</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/StaticRange\"><code>StaticRange</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/Text\"><code>Text</code></a></li><li><a href=\"/zh-CN/docs/Web/API/TextDecoder\"><code>TextDecoder</code></a></li><li><a href=\"/zh-CN/docs/Web/API/TextEncoder\"><code>TextEncoder</code></a></li><li><a href=\"/zh-CN/docs/Web/API/TimeRanges\"><code>TimeRanges</code></a></li><li><a href=\"/zh-CN/docs/Web/API/TreeWalker\"><code>TreeWalker</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>EventTarget.addEventListener()</strong> 方法将指定的监听器注册到 <a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a> 上，当该对象触发指定的事件时，指定的回调函数就会被执行。事件目标可以是一个文档上的元素 <a href=\"/zh-CN/docs/Web/API/Element\"><code>Element</code></a>、<a href=\"/zh-CN/docs/Web/API/Document\"><code>Document</code></a> 和 <a href=\"/zh-CN/docs/Web/API/Window\"><code>Window</code></a>，也可以是任何支持事件的对象（比如 <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a>）。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> <em>推荐</em>使用 <code>addEventListener()</code> 来注册一个事件监听器，理由如下：</p>\n  <ul>\n    <li>它允许为一个事件添加多个监听器。特别是对库、JavaScript 模块和其他需要兼容第三方库/插件的代码来说，这一功能很有用。</li>\n    <li>相比于 <code>onXYZ</code> 属性绑定来说，它提供了一种更精细的手段来控制 <code>listener</code> 的触发阶段。（即可以选择捕获或者冒泡）。</li>\n    <li>它对任何事件都有效，而不仅仅是 HTML 或 SVG 元素。</li>\n  </ul>\n</div>\n<p><code>addEventListener()</code> 的工作原理是将实现 <a href=\"/zh-CN/docs/Web/API/EventTarget/addEventListener\" aria-current=\"page\"><code>EventListener</code></a> 的函数或对象添加到调用它的 <a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a> 上的指定事件类型的事件侦听器列表中。如果要绑定的函数或对象已经被添加到列表中，该函数或对象不会被再次添加。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 如果先前向事件侦听器列表中添加过一个匿名函数，并且在之后的代码中调用 <code>addEventListener</code> 来添加一个功能完全相同的匿名函数，那么之后的这个匿名函数<em>也会</em>被添加到列表中。</p>\n  <p>实际上，即使使用<em>完全相同</em>的代码来定义一个匿名函数，这两个函数仍然存在区别，<strong>在循环中也是如此</strong>。在使用该方法的情况下，匿名函数的重复定义会带来许多麻烦，详见下文中的<a href=\"#%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98\">内存问题</a>一节。</p>\n</div>\n<p>当一个 <code>EventListener</code> 在 <code>EventTarget</code> 正在处理事件的时候被注册到 <code>EventTarget</code> 上，它不会被立即触发，但可能在事件流后面的事件触发阶段被触发，例如可能在捕获阶段添加，然后在冒泡阶段被触发。</p>"}},{"type":"prose","value":{"id":"语法","title":"语法","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">,</span> useCapture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"参数","title":"参数","isH3":true,"content":"<ul>\n  <li><code>type</code>\n    <ul>\n      <li>: 表示监听<a href=\"/zh-CN/docs/Web/Events\">事件类型</a>的大小写敏感的字符串。</li>\n    </ul>\n  </li>\n  <li><code>listener</code>\n    <ul>\n      <li>: 当所监听的事件类型触发时，会接收到一个事件通知（实现了 <a href=\"/zh-CN/docs/Web/API/Event\"><code>Event</code></a> 接口的对象）对象。<code>listener</code> 必须是一个实现了 <a href=\"/zh-CN/docs/Web/API/EventTarget/addEventListener\" aria-current=\"page\"><code>EventListener</code></a> 接口的对象，或者是一个<a href=\"/zh-CN/docs/Web/JavaScript/Guide/Functions\">函数</a>。有关回调本身的详细信息，请参阅<a href=\"#%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E5%9B%9E%E8%B0%83\">事件监听回调</a></li>\n    </ul>\n  </li>\n  <li><code>options</code> <span class=\"badge inline optional\">可选</span>\n    <ul>\n      <li>: 一个指定有关 <code>listener</code> 属性的可选参数对象。可用的选项如下：\n        <dl>\n          <dt id=\"capture\"><code>capture</code> <span class=\"badge inline optional\">可选</span></dt>\n          <dd>\n            <p>一个布尔值，表示 <code>listener</code> 会在该类型的事件捕获阶段传播到该 <code>EventTarget</code> 时触发。</p>\n          </dd>\n          <dt id=\"once\"><code>once</code> <span class=\"badge inline optional\">可选</span></dt>\n          <dd>\n            <p>一个布尔值，表示 <code>listener</code> 在添加之后最多只调用一次。如果为 <code>true</code>，<code>listener</code> 会在其被调用之后自动移除。</p>\n          </dd>\n          <dt id=\"passive\"><code>passive</code> <span class=\"badge inline optional\">可选</span></dt>\n          <dd>\n            <p>一个布尔值，设置为 <code>true</code> 时，表示 <code>listener</code> 永远不会调用 <code>preventDefault()</code>。如果 listener 仍然调用了这个函数，客户端将会忽略它并抛出一个控制台警告。查看<a href=\"#%E4%BD%BF%E7%94%A8_passive_%E6%94%B9%E5%96%84%E6%BB%9A%E5%B1%8F%E6%80%A7%E8%83%BD\">使用 passive 改善滚屏性能</a>以了解更多。</p>\n          </dd>\n          <dt id=\"signal\"><code>signal</code> <span class=\"badge inline optional\">可选</span></dt>\n          <dd>\n            <p><a href=\"/zh-CN/docs/Web/API/AbortSignal\"><code>AbortSignal</code></a>，该 <code>AbortSignal</code> 的 <a href=\"/zh-CN/docs/Web/API/AbortController/abort\" title=\"abort()\"><code>abort()</code></a> 方法被调用时，监听器会被移除。</p>\n          </dd>\n        </dl>\n      </li>\n    </ul>\n  </li>\n  <li><code>useCapture</code> <span class=\"badge inline optional\">可选</span>\n    <ul>\n      <li>: 一个布尔值，表示在 DOM 树中注册了 <code>listener</code> 的元素，是否要先于它下面的 <code>EventTarget</code> 调用该 <code>listener</code>。当 useCapture（设为 true）时，沿着 DOM 树向上冒泡的事件不会触发 listener。当一个元素嵌套了另一个元素，并且两个元素都对同一事件注册了一个处理函数时，所发生的事件冒泡和事件捕获是两种不同的事件传播方式。事件传播模式决定了元素以哪个顺序接收事件。进一步的解释可以查看 <a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#event-flow\" class=\"external\" rel=\" noopener\">DOM Level 3 事件</a>及 <a href=\"https://www.quirksmode.org/js/events_order.html#link4\" class=\"external\" rel=\" noopener\">JavaScript 事件顺序</a>文档。如果没有指定，<code>useCapture</code> 默认为 <code>false</code>。</li>\n    </ul>\n    <div class=\"notecard note\" id=\"sect3\">\n      <p><strong>备注：</strong> 对于事件目标上的事件监听器来说，事件会处于“目标阶段”，而不是冒泡阶段或者捕获阶段。捕获阶段的事件监听器会在任何非捕获阶段的事件监听器之前被调用。</p>\n    </div>\n  </li>\n  <li><code>wantsUntrusted</code> <span class=\"badge inline optional\">可选</span> <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg>\n    <ul>\n      <li>: 如果为 <code>true</code>，则事件处理程序会接收网页自定义的事件。此参数只适用于 Gecko（<a href=\"/zh-CN/docs/Glossary/Chrome\">chrome</a> 的默认值为 <code>false</code>，其它常规网页的默认值为 <code>true</code>），主要用于附加组件的代码和浏览器本身。</li>\n    </ul>\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"返回值","title":"返回值","isH3":true,"content":"<p>无（<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>）。</p>"}},{"type":"prose","value":{"id":"用法说明","title":"用法说明","isH3":false,"content":""}},{"type":"prose","value":{"id":"事件监听回调","title":"事件监听回调","isH3":true,"content":"<p>事件监听器可以被指定为回调函数或一个对象（其 <code>handleEvent()</code> 方法用作回调函数）。</p>\n<p>回调函数本身具有与 <code>handleEvent()</code> 方法相同的参数和返回值；也就是说，回调接受一个参数：一个基于 <a href=\"/zh-CN/docs/Web/API/Event\"><code>Event</code></a> 的对象，描述已发生的事件，并且它不返回任何内容。</p>\n<p>例如，一个可同时处理 <a href=\"/zh-CN/docs/Web/API/Element/fullscreenchange_event\" title=\"fullscreenchange\"><code>fullscreenchange</code></a> 和 <a href=\"/zh-CN/docs/Web/API/Element/fullscreenerror_event\" title=\"fullscreenerror\"><code>fullscreenerror</code></a> 事件的函数如下：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">eventHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> fullscreenchange<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* 处理 fullscreenchange 事件 */</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token comment\">/* fullscreenerror */</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* 处理 fullscreenerror 事件 */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"option_支持的安全检测","title":"option 支持的安全检测","isH3":true,"content":"<p>在旧版本的 DOM 的规定中，<code>addEventListener()</code> 的第三个参数是一个布尔值，表示是否在捕获阶段调用事件处理程序。随着时间的推移，很明显需要更多的选项。与其在方法之中添加更多参数（传递可选值将会变得异常复杂），倒不如把第三个参数改为一个包含了各种属性的对象，这些属性的值用来被配置删除事件侦听器的过程。</p>\n<p>因为旧版本的浏览器（以及一些相对不算古老的）仍然假定第三个参数是布尔值，你需要编写一些代码来有效地处理这种情况。你可以对每一个你感兴趣的 options 值进行特性检测。</p>\n<p>如果你想检测 <code>passive</code> 值，可以参考下面这个例子：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> passiveSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">passive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 该函数会在浏览器尝试访问 passive 值时被调用。</span>\n      passiveSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  passiveSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>这段代码为 <code>passive</code> 属性创建了一个带有 getter 函数的 <code>options</code> 对象；getter 设定了一个标识 <code>passiveSupported</code>，被调用后就会把其设为 <code>true</code>。那意味着如果浏览器检查 <code>options</code> 对象上的 <code>passive</code> 值时，<code>passiveSupported</code> 将会被设置为 <code>true</code>；否则它将保持 <code>false</code>。然后我们调用 <code>addEventListener()</code> 去设置一个指定这些选项的空事件处理器，这样如果浏览器将第三个参数认定为对象的话，这些选项值就会被检查。我们再调用 <a href=\"/zh-CN/docs/Web/API/EventTarget/removeEventListener\"><code>removeEventListener()</code></a> 来移除事件处理器（注意：未被调用的事件处理器上的 <code>handleEvent()</code> 会被忽略）。</p>\n<p>你可以利用这个方法检查 options 之中任一个值。只需使用与上面类似的代码，为选项设定一个 getter。</p>\n<p>然后，当你想实际创建一个是否支持 options 的事件侦听器时，你可以这样做：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>someElement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"mouseup\"</span><span class=\"token punctuation\">,</span>\n  handleMouseUp<span class=\"token punctuation\">,</span>\n  passiveSupported <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">passive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>我们在 <code>someElement</code> 这里添加了一个 <a href=\"/zh-CN/docs/Web/API/Element/mouseup_event\" title=\"mouseup\"><code>mouseup</code></a>。对于第三个参数，如果 <code>passiveSupported</code> 是 <code>true</code>，我们传递了一个 <code>passive</code> 值为 <code>true</code> 的 <code>options</code> 对象；如果相反的话，我们知道要传递一个布尔值，于是就传递 <code>false</code> 作为 <code>useCapture</code> 的参数。</p>\n<p>如果你愿意，你可以用一个类似 <a href=\"https://modernizr.com/docs\" class=\"external\" rel=\" noopener\">Modernizr</a> 或 <a href=\"https://github.com/rafrex/detect-it\" class=\"external\" rel=\" noopener\">Detect It</a> 的第三方库来帮助你做这项测试。</p>\n<p>你可以在 <a href=\"https://wicg.github.io/admin/charter.html\" class=\"external\" rel=\" noopener\">Web Incubator Community Group</a> 里关于<a href=\"https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection\" class=\"external\" rel=\" noopener\"><code>EventListenerOptions</code></a> 的文章中了解更多。</p>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":""}},{"type":"prose","value":{"id":"添加一个简单的监听器","title":"添加一个简单的监听器","isH3":true,"content":"<p>这个例子用来展示如何使用 <code>addEventListener()</code> 监听鼠标点击一个元素的事件。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>outside<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>one<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>two<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 改变 t2 内容的函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">modifyText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> t2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> isNodeThree <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">===</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">;</span>\n  t2<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">=</span> isNodeThree <span class=\"token operator\">?</span> <span class=\"token string\">\"two\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 为 table 添加事件监听器</span>\n<span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"outside\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nel<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> modifyText<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在这个例子中，<code>modifyText()</code> 是一个 <code>click</code> 事件的监听器，通过使用 <code>addEventListenter()</code> 注册到 table 对象上。在表格中任何位置单击都会触发事件并执行 <code>modifyText()</code>。</p>\n<h4 id=\"结果\">结果</h4><iframe class=\"sample-code-frame\" title=\"添加一个简单的监听器 sample\" id=\"frame_添加一个简单的监听器\" src=\"https://yari-demos.prod.mdn.mozit.cloud/zh-CN/docs/Web/API/EventTarget/addEventListener/_sample_.%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%9B%91%E5%90%AC%E5%99%A8.html\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"添加一个可被移除的监听器","title":"添加一个可被移除的监听器","isH3":true,"content":"<p>这个例子用来展示如何使用 <code>addEventListenter()</code> 添加一个可被 <a href=\"/zh-CN/docs/Web/API/AbortSignal\"><code>AbortSignal</code></a> 移除的侦听器。</p>\n<h4 id=\"html\">HTML</h4>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>outside<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>one<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>two<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"javascript\">JavaScript</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 为 table 添加可被移除的事件监听器</span>\n<span class=\"token keyword\">const</span> controller <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"outside\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nel<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> modifyText<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">signal</span><span class=\"token operator\">:</span> controller<span class=\"token punctuation\">.</span>signal <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 改变 t2 内容的函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">modifyText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> t2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">===</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    t2<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">=</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    t2<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">=</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">;</span>\n    controller<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当值变为 \"three\" 后，移除监听器</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>在这个例子中，我们修改了上一个例子的代码。在第二行的内容变为 three 时，我们调用了传入 <code>addEventListener()</code> 的 <a href=\"/zh-CN/docs/Web/API/AbortController\"><code>AbortController</code></a> 中的 <code>abort()</code> 方法。如此，无论如何点击表格，第二行的内容都不会再发生改变，因为表格中的点击事件监听器已被移除。</p>\n<h4 id=\"结果_2\">结果</h4><iframe class=\"sample-code-frame\" title=\"添加一个可被移除的监听器 sample\" id=\"frame_添加一个可被移除的监听器\" src=\"https://yari-demos.prod.mdn.mozit.cloud/zh-CN/docs/Web/API/EventTarget/addEventListener/_sample_.%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E5%8F%AF%E8%A2%AB%E7%A7%BB%E9%99%A4%E7%9A%84%E7%9B%91%E5%90%AC%E5%99%A8.html\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"带有匿名函数的监听器","title":"带有匿名函数的监听器","isH3":true,"content":"<p>现在我们来看看如何使用匿名函数来为事件监听器进行传参。</p>\n<h4 id=\"html_2\">HTML</h4>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>outside<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>one<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>two<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"javascript_2\">JavaScript</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 改变 t2 内容的函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">modifyText</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">new_text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> t2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  t2<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">=</span> new_text<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 用匿名函数为 table 添加事件监听器</span>\n<span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"outside\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nel<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">modifyText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"four\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>请注意，侦听器是一个匿名函数，它封装了代码，然后代码可以将参数发送到 <code>modifyText()</code> 函数，该函数负责实际响应事件。</p>\n<h4 id=\"结果_3\">结果</h4><iframe class=\"sample-code-frame\" title=\"带有匿名函数的监听器 sample\" id=\"frame_带有匿名函数的监听器\" src=\"https://yari-demos.prod.mdn.mozit.cloud/zh-CN/docs/Web/API/EventTarget/addEventListener/_sample_.%E5%B8%A6%E6%9C%89%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E7%9A%84%E7%9B%91%E5%90%AC%E5%99%A8.html\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"带有箭头函数的监听器","title":"带有箭头函数的监听器","isH3":true,"content":"<p>这个例子用来展示如何通过箭头函数来实现一个监听器。</p>\n<h4 id=\"html_3\">HTML</h4>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>outside<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>one<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>t2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>two<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"javascript_3\">JavaScript</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 改变 t2 内容的函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">modifyText</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">new_text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> t2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  t2<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue <span class=\"token operator\">=</span> new_text<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 用箭头函数为 table 添加事件监听器</span>\n<span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"outside\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nel<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">modifyText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"four\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"结果_4\">结果</h4><iframe class=\"sample-code-frame\" title=\"带有箭头函数的监听器 sample\" id=\"frame_带有箭头函数的监听器\" src=\"https://yari-demos.prod.mdn.mozit.cloud/zh-CN/docs/Web/API/EventTarget/addEventListener/_sample_.%E5%B8%A6%E6%9C%89%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84%E7%9B%91%E5%90%AC%E5%99%A8.html\" loading=\"lazy\"></iframe>\n<p>请注意尽管匿名函数和箭头函数有些类似，但是他们绑定不同的 <code>this</code> 对象。匿名函数（和所有传统的 Javascript 函数）创建他们独有的 <code>this</code> 对象，而箭头函数则继承绑定他所在函数的 <code>this</code> 对象。</p>\n<p>这意味着在使用箭头函数时，原函数中可用的变量和常量在事件处理器中同样可用。</p>"}},{"type":"prose","value":{"id":"options_用法示例","title":"options 用法示例","isH3":true,"content":"<h4 id=\"html_4\">HTML</h4>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>outer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  outer, once &amp; none-once\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>middle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    middle, capture &amp; none-capture\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>inner1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://www.mozilla.org<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      inner1, passive &amp; preventDefault(which is not allowed)\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>inner2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://developer.mozilla.org/<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      inner2, none-passive &amp; preventDefault(not open new page)\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"css\">CSS</h4>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.outer, .middle, .inner1, .inner2</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>   520px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span>  15px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.outer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid red<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>  red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.middle</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid green<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>  green<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>  460px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.inner1, .inner2</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid purple<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>  purple<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>  400px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"javascript_4\">JavaScript</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> outer  <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.outer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> middle <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.middle'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> inner1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.inner1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> inner2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.inner2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> capture <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">capture</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> noneCapture <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">capture</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> once <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">once</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> noneOnce <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">once</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> passive <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">passive</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> nonePassive <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">passive</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nouter<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> onceHandler<span class=\"token punctuation\">,</span> once<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nouter<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> noneOnceHandler<span class=\"token punctuation\">,</span> noneOnce<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmiddle<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> captureHandler<span class=\"token punctuation\">,</span> capture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmiddle<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> noneCaptureHandler<span class=\"token punctuation\">,</span> noneCapture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninner1<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> passiveHandler<span class=\"token punctuation\">,</span> passive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninner2<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> nonePassiveHandler<span class=\"token punctuation\">,</span> nonePassive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">onceHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'outer, once'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">noneOnceHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'outer, none-once, default'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">captureHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//event.stopImmediatePropagation();</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'middle, capture'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">noneCaptureHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'middle, none-capture, default'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">passiveHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 在 passive 事件调用中不支持 preventDefault。</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inner1, passive, open new page'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">nonePassiveHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//event.stopPropagation();</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inner2, none-passive, default, not open new page'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"结果_5\">结果</h4>\n<p>分别点击 outer、middle 和 inner 以查看选项的工作方式。</p><iframe class=\"sample-code-frame\" title=\"options 用法示例 sample\" id=\"frame_options_用法示例\" width=\"600\" height=\"310\" src=\"https://yari-demos.prod.mdn.mozit.cloud/zh-CN/docs/Web/API/EventTarget/addEventListener/_sample_.options_%E7%94%A8%E6%B3%95%E7%A4%BA%E4%BE%8B.html\" loading=\"lazy\"></iframe>\n<p>在使用 <code>options</code> 对象中具体的值前，最好确保用户的浏览器支持它，因为这些是历史上并非所有浏览器都支持的附加功能。你可以查看 <a href=\"#option_%E6%94%AF%E6%8C%81%E7%9A%84%E5%AE%89%E5%85%A8%E6%A3%80%E6%B5%8B\">option 支持的安全检测</a>以了解更多</p>"}},{"type":"prose","value":{"id":"拥有多个_option_的监听器","title":"拥有多个 option 的监听器","isH3":true,"content":"<p>你可以在 <code>options</code> 参数中设置多个 option。在以下示例中，我们将设置两个 option：</p>\n<ul>\n  <li><code>passive</code>，以确保 <a href=\"/zh-CN/docs/Web/API/Event/preventDefault\" title=\"preventDefault()\"><code>preventDefault()</code></a> 不会被调用</li>\n  <li><code>once</code>，以确保事件处理函数只会被调用一次。</li>\n</ul>\n<h4 id=\"html_5\">HTML</h4>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example-button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>You have not clicked this button.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>reset-button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Click this button to reset the first button.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"javascript_5\">JavaScript</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> buttonToBeClicked <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example-button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> resetButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reset-button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 示例按钮的初始文本</span>\n<span class=\"token keyword\">const</span> initialText <span class=\"token operator\">=</span> buttonToBeClicked<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 点击示例按钮后显示的文本</span>\n<span class=\"token keyword\">const</span> clickedText <span class=\"token operator\">=</span> <span class=\"token string\">\"You have clicked this button.\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 我们将事件监听器函数单独提出，以防止重复添加监听函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">eventListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  buttonToBeClicked<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> clickedText<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  buttonToBeClicked<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span>\n    eventListener<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">passive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">once</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 当点击重置按钮后，示例按钮将被重置，并可以再次更新它自身的状态</span>\nresetButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    buttonToBeClicked<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> initialText<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"结果_6\">结果</h4><iframe class=\"sample-code-frame\" title=\"拥有多个 option 的监听器 sample\" id=\"frame_拥有多个_option_的监听器\" src=\"https://yari-demos.prod.mdn.mozit.cloud/zh-CN/docs/Web/API/EventTarget/addEventListener/_sample_.%E6%8B%A5%E6%9C%89%E5%A4%9A%E4%B8%AA_option_%E7%9A%84%E7%9B%91%E5%90%AC%E5%99%A8.html\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"备注","title":"备注","isH3":false,"content":""}},{"type":"prose","value":{"id":"处理过程中_this_的值的问题","title":"处理过程中 <code>this</code> 的值的问题","isH3":true,"content":"<p>通常来说 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/this\"><code>this</code></a> 的值是触发事件的元素的引用，这种特性在多个相似的元素使用同一个通用事件监听器时非常让人满意。</p>\n<p>当使用 <code>addEventListener()</code> 为一个元素注册事件的时候，事件处理器里的 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/this\"><code>this</code></a> 值是该元素的引用。其与传递给句柄的 event 参数的 <code>currentTarget</code> 属性的值一样。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>my_element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">)</span>           <span class=\"token comment\">// 输出 my_element 的 className</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>currentTarget <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出 `true`</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>需要注意的是，<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions#%E6%B2%A1%E6%9C%89%E5%8D%95%E7%8B%AC%E7%9A%84this\">箭头函数没有它自己的 <code>this</code> 上下文</a>。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>my_element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">)</span>           <span class=\"token comment\">// 警告：`this` 并不指向 `my_element`</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>currentTarget <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出 `false`</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>如果一个事件的属性（例如 <a href=\"/zh-CN/docs/Web/API/Element/click_event\" title=\"onclick\"><code>onclick</code></a>）是在 HTML 代码中指定的，则这个属性中的 JavaScript 语句实际上会被包裹在一个处理函数中，在这个处理函数中使用 <code>this</code> 的效果和使用 <code>addEventListener()</code> 来绑定事件的效果是一样的；<code>this</code> 的出现代表了元素的引用。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my_table<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token comment\">&lt;!-- `this` 指向 table 元素；输出 'my_table' --&gt;</span>\n  …\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>注意到在一个函数里 <code>this</code> 调用的效果和<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/this\">标准规则</a>里面是一样的。请看下面一个例子：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">function</span> <span class=\"token function\">logID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my_table<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">logID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token comment\">&lt;!-- 被调用时，`this` 指向全局（window）对象 --&gt;</span>\n  …\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>这时，<code>logID()</code> 中的 <code>this</code> 的值会变成全局（<a href=\"/zh-CN/docs/Web/API/Window\"><code>Window</code></a>）对象的引用（在<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Strict_mode\">严格模式</a>中为 <code>undefined</code>）。</p>\n<h4 id=\"使用_bind_指定_this_的值\">使用 bind() 指定 <code>this</code> 的值</h4>\n<p><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a> 方法可以让你为所有后续的调用建立一个固定的 <code>this</code> 上下文，以此解决因不同位置的函数调用带来的 <code>this</code> 指向不明晰的问题。然而，你仍然需要保持一份对监听器的引用，以便你可以在后续的代码中将其移除。</p>\n<p>下面是一个使用/不使用 <code>bind()</code> 的例子：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Something</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// |this| is a newly created object</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Something Good'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined, as |this| is the element</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Something Good', as |this| is bound to newly created object</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// bind causes a fixed `this` context to be assigned to onclick2</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onclick2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onclick2</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onclick1<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onclick2<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Trick</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Something</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>另一种方法是使用 <code>handleEvent()</code> 这个特殊函数来捕获任何事件：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Something</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// |this| is a newly created object</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Something Good'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handleEvent</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Something Good', as this is bound to newly created object</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'click'</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">// some code here…</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'dblclick'</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">// some code here…</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Note that the listeners in this case are |this|, not this.handleEvent</span>\n  element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dblclick'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// You can properly remove the listeners</span>\n  element<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  element<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dblclick'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Something</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>还有一种控制 <em>this</em> 指向的方法，是给 <code>EventListener</code> 传递一个函数，来调用想要访问的对应作用域对象：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeClass</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Something Good'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keydown'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> that<span class=\"token punctuation\">.</span><span class=\"token function\">someMethod</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">someMethod</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>keyCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">// some code here…</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">// some code here…</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> myObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SomeClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","titleAsText":"处理过程中 this 的值的问题"}},{"type":"prose","value":{"id":"在使用监听器时进行数据交换","title":"在使用监听器时进行数据交换","isH3":true,"content":"<p>事件监听器看起来就像一个“孤岛”，要向它传入数据非常困难，更别说是要在它被调用后获取任何数据了。事件监听器仅仅接受<a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks/Events#%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1\">事件对象</a>这一个自动传入的参数，并且它的返回值还会被忽略。那怎样才能与事件监听器交换数据呢？其实有很多种方法可以做到。</p>\n<h4 id=\"使用_this_传入数据\">使用 <code>this</code> 传入数据</h4>\n<p><a href=\"#%E4%BD%BF%E7%94%A8_bind_%E6%8C%87%E5%AE%9A_this_%E7%9A%84%E5%80%BC\">上文</a>提到，你可以使用 <code>Function.prototype.bind()</code> 来以 <code>this</code> 作为媒介向监听器传值。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-button-id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> someString <span class=\"token operator\">=</span> <span class=\"token string\">'Data'</span><span class=\"token punctuation\">;</span>\n\nmyButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 预期输出：'Data'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>someString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这个方法适合在你无需关心监听器是在哪个 HTML 元素上触发的时候使用，好处是这样传值就好像是你在使用参数列表向监听器传值一样。</p>\n<h4 id=\"巧用变量作用域传值\">巧用变量作用域传值</h4>\n<p>当外部作用域包含一个（使用 <code>const</code>、<code>let</code> 的）变量声明时，所有该作用域内声明的函数都可以访问该变量（查看<a href=\"/zh-CN/docs/Glossary/Function#%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%87%BD%E6%95%B0\">此链接</a>以了解外部/内部函数，以及<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/var#%E9%9A%90%E5%BC%8F%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%92%8C%E5%A4%96%E9%83%A8%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F\">此链接</a>以了解变量作用域）。因此，最简单的传入数据的方法就是使监听器所在的作用域可以访问到你所声明的变量。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-button-id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> someString <span class=\"token operator\">=</span> <span class=\"token string\">'Data'</span><span class=\"token punctuation\">;</span>\n\nmyButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>someString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 预期输出：'Data'</span>\n\n  someString <span class=\"token operator\">=</span> <span class=\"token string\">'Data Again'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>someString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 预期输出：'Data'（不可能是 'Data Again'）</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>备注：</strong> 虽然内部作用域可以访问到外部 <code>const</code> 和 <code>let</code> 所声明的变量，但你在事件监听器内对变量所做的任何修改都不能在外部作用域内体现。为什么呢？因为在事件监听器被执行时，其外部作用域已经执行完毕了。</p>\n</div>\n<h4 id=\"使用对象进行数据交换\">使用对象进行数据交换</h4>\n<p>与 JavaScript 中的大部分函数不同，一个对象只要有被引用计数，它就会一直存在于内存之中。并且，对象可以拥有自己的属性，属性又可以被引用形式传递，使得它有潜力成为在作用域间传值的候选。让我们来试试。</p>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>备注：</strong> 实际上，在 JavaScript 中，函数也是对象的一种。（因此，函数也可以有自己的对象，甚至可以在其执行结束后依旧存在于内存中，只要将其分配到一个永久存在于内存中的变量即可。）</p>\n</div>\n<p>因为只需一个变量引用就可以使对象的属性将数据存储在内存之中，你可以使用它与事件监听器进行数据交换，并且更改后的数据会被保留。请看下面这个例子：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-button-id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> someObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">aProperty</span><span class=\"token operator\">:</span> <span class=\"token string\">'Data'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmyButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>someObject<span class=\"token punctuation\">.</span>aProperty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 预期输出：'Data'</span>\n\n  someObject<span class=\"token punctuation\">.</span>aProperty <span class=\"token operator\">=</span> <span class=\"token string\">'Data Again'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 更改值</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>someObject<span class=\"token punctuation\">.</span>aProperty <span class=\"token operator\">===</span> <span class=\"token string\">'Data Again'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Data Again: True'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    someObject<span class=\"token punctuation\">.</span>aProperty <span class=\"token operator\">=</span> <span class=\"token string\">'Data'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 将值重置以等待下次事件调用</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在这一例子中，虽然事件监听器和定时函数的作用域都在 <code>someObject.aProperty</code> 的值变更前执行完毕，但 <code>someObject</code> 仍被事件监听器和定时函数所<em>引用</em>而存在于内存中，这两个函数依然能访问到同样的数据（也就是说，当其中一方改变了数据，另一方可以对这一改变做出响应）。</p>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>备注：</strong> 对象的是以引用方式存储于变量中的，也即变量中存储的只是对象的内存地址而已。在其他方面上，这也意味着“存储”这个对象的变量可以对其它引用（或“存储”）同一个对象的变量产生影响。当两个变量引用同一对象时（比如 <code>let a = b = {aProperty: 'Yeah'};</code>），仅对其中一个变量进行更改仍然会影响到另一个变量。</p>\n</div>\n<div class=\"notecard note\" id=\"sect7\">\n  <p><strong>备注：</strong> 基于对象存储于变量中的“引用”逻辑，你可以在一个函数执行完毕后返回一个对象以使其“保活”（使其保留在内存中且不丢失数据）。</p>\n</div>"}},{"type":"prose","value":{"id":"内存问题","title":"内存问题","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> els <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 例一</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> els<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  els<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/* 处理点击事件 */</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 例二</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">processEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 处理同样的点击事件 */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> els<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  els<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> processEvent<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>在上面的第一个例子中，一个新的（匿名）函数在每次循环中被创建一次。在第二个例子中，与之前的匿名函数功能相同的函数被用作事件监听器，但后者所带来的内存开销要更小一点，因为函数只被声明过一次。此外，在第一个例子中，我们不能调用 <a href=\"/zh-CN/docs/Web/API/EventTarget/removeEventListener\" title=\"removeEventListener()\"><code>removeEventListener()</code></a>，因为我们没有保留任何对匿名函数的引用（在例子的情况中，是没有保存对循环中创建的多个匿名函数的引用）。而在第二个例子中，<code>processEvent</code> 是一个可被引用的函数，因此可以调用 <code>myElement.removeEventListener(\"click\", processEvent, false)</code>。</p>\n<p>实际上，真正影响内存的并不是没有保持函数引用，而是没有保持<em>静态</em>的函数引用。</p>"}},{"type":"prose","value":{"id":"使用_passive_改善滚屏性能","title":"使用 passive 改善滚屏性能","isH3":true,"content":"<p>将 <code>passive</code> 设为 <code>true</code> 可以启用性能优化，并可大幅改善应用性能，正如下面这个例子：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/* 检测浏览器是否支持该特性 */</span>\n<span class=\"token keyword\">let</span> passiveIfSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"passive\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> passiveIfSupported <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">passive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* do something */</span>\n  <span class=\"token comment\">// 不能使用 event.preventDefault();</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> passiveIfSupported <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>根据规范，<code>addEventListener()</code> 的 <code>passive</code> 默认值始终为 <code>false</code>。然而，这引入了触摸事件和滚轮事件的事件监听器在浏览器尝试滚动页面时阻塞浏览器主线程的可能性——这可能会大大降低浏览器处理页面滚动时的性能。</p>\n<p>为了避免这一问题，大部分浏览器（Safari 和 Internet Explorer 除外）将文档级节点 <a href=\"/zh-CN/docs/Web/API/Window\"><code>Window</code></a>、<a href=\"/zh-CN/docs/Web/API/Document\"><code>Document</code></a> 和 <a href=\"/zh-CN/docs/Web/API/Document/body\"><code>Document.body</code></a> 上的 <a href=\"/zh-CN/docs/Web/API/Element/wheel_event\" title=\"wheel\"><code>wheel</code></a>、<a href=\"/zh-CN/docs/Web/API/Element/mousewheel_event\" title=\"mousewheel\"><code>mousewheel</code></a>、<a href=\"/zh-CN/docs/Web/API/Element/touchstart_event\" title=\"touchstart\"><code>touchstart</code></a> 和 <a href=\"/zh-CN/docs/Web/API/Element/touchmove_event\" title=\"touchmove\"><code>touchmove</code></a> 事件的 <code>passive</code> 默认值更改为 <code>true</code>。如此，事件监听器便不能<a href=\"/zh-CN/docs/Web/API/Event/preventDefault\">取消事件</a>，也不会在用户滚动页面时阻止页面呈现。</p>\n<div class=\"notecard note\" id=\"sect8\">\n  <p><strong>备注：</strong> 若你想要了解哪些浏览器（或特定浏览器的哪一个版本）具体实现了上述功能，请参见下方的浏览器兼容性表。</p>\n</div>\n<p>因此，当你想要覆盖这一行为并确认 <code>passive</code> 在所有浏览器中都被设为 <code>false</code>，你必须显式地将其设为 <code>false</code>，而不是依赖浏览器的默认设置。</p>\n<p>不过，你无需担心基本 <a href=\"/zh-CN/docs/Web/API/Element/scroll_event\" title=\"scroll\"><code>scroll</code></a> 事件的 <code>passive</code> 值。因为该事件不能被取消，事件监听器也就无法阻止页面的渲染。</p>"}},{"type":"prose","value":{"id":"旧版本浏览器","title":"旧版本浏览器","isH3":true,"content":"<p>在不支持 <code>addEventListener()</code> 的 <code>options</code> 参数的旧浏览器上，尝试使用它会阻止使用 <code>useCapture</code> 参数而不正确使用<a href=\"#option_%E6%94%AF%E6%8C%81%E7%9A%84%E5%AE%89%E5%85%A8%E6%A3%80%E6%B5%8B\">特征检测</a>。</p>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://dom.spec.whatwg.org/#ref-for-dom-eventtarget-addeventlistener③","title":"DOM Standard"}],"query":"api.EventTarget.addEventListener"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.EventTarget.addEventListener","dataURL":"/zh-CN/docs/Web/API/EventTarget/addEventListener/bcd.json"}},{"type":"prose","value":{"id":"参见","title":"参见","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/EventTarget/removeEventListener\"><code>EventTarget.removeEventListener()</code></a></li>\n  <li><a href=\"/zh-CN/docs/Web/Events/Creating_and_triggering_events\">创建和触发自定义事件</a></li>\n  <li><a href=\"https://www.quirksmode.org/js/this.html\" class=\"external\" rel=\" noopener\">More details on the use of <code>this</code> in event handlers</a></li>\n</ul>"}}],"toc":[{"text":"语法","id":"语法"},{"text":"用法说明","id":"用法说明"},{"text":"示例","id":"示例"},{"text":"备注","id":"备注"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"参见","id":"参见"}],"summary":"EventTarget.addEventListener() 方法将指定的监听器注册到 EventTarget 上，当该对象触发指定的事件时，指定的回调函数就会被执行。事件目标可以是一个文档上的元素 Element、Document 和 Window，也可以是任何支持事件的对象（比如 XMLHttpRequest）。","popularity":0.0119,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"EventTarget.addEventListener()","locale":"en-US","native":"English (US)"},{"title":"element.addEventListener","locale":"es","native":"Español"},{"title":"EventTarget.addEventListener()","locale":"fr","native":"Français"},{"title":"EventTarget.addEventListener()","locale":"ja","native":"日本語"},{"title":"EventTarget.addEventListener()","locale":"ko","native":"한국어"},{"title":"Element.addEventListener()","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Метод EventTarget.addEventListener()","locale":"ru","native":"Русский"},{"title":"EventListener","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/web/api/eventtarget/addeventlistener","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/eventtarget/addeventlistener/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/EventTarget","title":"EventTarget"},{"uri":"/zh-CN/docs/Web/API/EventTarget/addEventListener","title":"EventTarget.addEventListener()"}],"pageTitle":"EventTarget.addEventListener() - Web API 接口参考 | MDN","noIndexing":false}}