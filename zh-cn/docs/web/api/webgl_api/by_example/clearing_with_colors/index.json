{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"清除画布","mdn_url":"/zh-CN/docs/Web/API/WebGL_API/By_example/Clearing_with_colors","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/API/WebGL_API/By_example/Detect_WebGL\">« 上一页</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/API/WebGL_API/By_example/Clearing_by_clicking\">下一页  »</a></li>\n</ul>\n<p>这个例子将展示如何用一个单色清除画布</p><iframe class=\"sample-code-frame\" title=\"clearing-with-colors-source sample\" id=\"frame_clearing-with-colors-source\" width=\"660\" height=\"425\" src=\"https://yari-demos.prod.mdn.mozit.cloud/zh-CN/docs/Web/API/WebGL_API/By_example/Clearing_with_colors/_sample_.clearing-with-colors-source.html\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"清除画布（使用单一颜色清除_webgl_区域）","title":"清除画布（使用单一颜色清除 WebGl 区域）","isH3":true,"content":"<p>这是一个最简单的 WebGL 代码。通过<a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext\" title=\"rendering context\">rendering context</a>设置好状态后，直接将整个区域清除为绿色。要注意 css 已经将 canvas 画布设置为黑色了，所以当画布变为绿色时，我们就知道神奇的 WebGL 魔法起作用了！</p>\n<p>此外，你需要注意用单色绘制图像是两个步骤：首先，通过使用<a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/clearColor\" title=\"clearColor()\"><code>clearColor()</code></a>设置清除色为绿色。这只会改变 Webgl 内部的一个状态，但并不会绘制任何东西。接下来，我们就真的开始绘制了，使用<a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/clear\" title=\"clear()\"><code>clear()</code></a>方法，这是一个典型的用 webgl 绘制的方法，webgl 实际上只有少数的几个绘制方法 (clear() 就是其中之一)。其他方法大多都是类似设置或改变 WebGl 状态和变量的（例如设置 clearcolor）。</p>\n<p>这里有许多属性和方法作用于 Webgl，清除方法只是你第一个掌握的，这也就是为什么 WebGL／OpenGl 经常被叫做状态机，通过调整这些属性和方法可以修改 WebGL 内部的状态，从而进行输出（例如先设置好绿色，在清除画布的时候像素点都变成了绿色）</p>\n<p>最后，我们知道在 WebGl 中颜色格式是由 RGBA（红，绿，蓝，透明度）组成的，因此 clearColor() 方法接受四个参数</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>A very simple WebGL program that shows some color.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token comment\">&lt;!-- Text within a canvas element is displayed\n    only if canvas is not supported. --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>canvas</span><span class=\"token punctuation\">&gt;</span></span>Your browser does not seem to support\n    HTML5 canvas.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>canvas</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">text-align</span> <span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">canvas</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span> <span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span> <span class=\"token punctuation\">:</span> 280px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span> <span class=\"token punctuation\">:</span> 210px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span> <span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span> <span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span> <span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span> <span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Run everything inside window load event handler, to make sure</span>\n<span class=\"token comment\">// DOM is fully loaded and styled before trying to manipulate it,</span>\n<span class=\"token comment\">// and to not mess up the global scope. We are giving the event</span>\n<span class=\"token comment\">// handler a name (setupWebGL) so that we can refer to the</span>\n<span class=\"token comment\">// function object within the function itself.</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setupWebGL</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"use strict\"</span>\n\n  <span class=\"token comment\">// Cleaning after ourselves. The event handler removes</span>\n  <span class=\"token comment\">// itself, because it only needs to run once.</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span>evt<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">,</span> setupWebGL<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// References to the document elements.</span>\n  <span class=\"token keyword\">var</span> paragraph <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Getting the WebGL rendering context.</span>\n  <span class=\"token keyword\">var</span> gl <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webgl\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">||</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"experimental-webgl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// If failed, inform user of failure. Otherwise, initialize</span>\n  <span class=\"token comment\">// the drawing buffer (the viewport) and clear the context</span>\n  <span class=\"token comment\">// with a solid color.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gl<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    paragraph<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"Failed to get WebGL context. \"</span>\n      <span class=\"token operator\">+</span> <span class=\"token string\">\"Your browser or device may not support WebGL.\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  paragraph<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span>\n    <span class=\"token string\">\"Congratulations! Your browser supports WebGL. \"</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">viewport</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    gl<span class=\"token punctuation\">.</span>drawingBufferWidth<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span>drawingBufferHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Set the clear color to darkish green.</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">clearColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Clear the context with the newly set color. This is</span>\n  <span class=\"token comment\">// the function call that actually does the drawing.</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">COLOR_BUFFER_BIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这个例子的代码可以在 <a href=\"https://github.com/idofilin/webgl-by-example/tree/master/clearing-with-colors\" class=\"external\" rel=\" noopener\">GitHub</a> 上下载。</p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/API/WebGL_API/By_example/Detect_WebGL\">« 上一页</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/API/WebGL_API/By_example/Clearing_by_clicking\">下一页  »</a></li>\n</ul>"}}],"toc":[],"summary":"这个例子将展示如何用一个单色清除画布","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Clearing with colors","locale":"en-US","native":"English (US)"},{"title":"Appliquer des couleurs","locale":"fr","native":"Français"}],"source":{"folder":"zh-cn/web/api/webgl_api/by_example/clearing_with_colors","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/webgl_api/by_example/clearing_with_colors/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/WebGL_API","title":"WebGL"},{"uri":"/zh-CN/docs/Web/API/WebGL_API/By_example","title":"WebGL 的例子"},{"uri":"/zh-CN/docs/Web/API/WebGL_API/By_example/Clearing_with_colors","title":"清除画布"}],"pageTitle":"清除画布 - Web API 接口参考 | MDN","noIndexing":false}}