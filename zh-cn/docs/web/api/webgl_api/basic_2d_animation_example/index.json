{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"一个 2D WebGL 动画的基础示例","mdn_url":"/zh-CN/docs/Web/API/WebGL_API/Basic_2D_animation_example","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n <ol>\n  <li><a href=\"/zh-CN/docs/Web/API/WebGL_API\"><strong>WebGL API</strong></a></li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>WebGL tutorial</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\">Getting started with WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context\">Adding 2D content to a WebGL context</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL\">Using shaders to apply color in WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Animating_objects_with_WebGL\">Animating objects with WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Creating_3D_objects_using_WebGL\">Creating 3D objects using WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\">Using textures in WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL\">Lighting in WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Animating_textures_in_WebGL\">Animating textures in WebGL</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Examples and articles</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Matrix_math_for_the_web\">Matrix math for the web</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/WebGL_model_view_projection\">WebGL model view projection</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/WebGL_best_practices\">WebGL best practices</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Using_Extensions\">Using WebGL extensions</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Basic_2D_animation_example\">A basic 2D WebGL animation example</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/By_example\">WebGL by example</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Interfaces</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext\"><code>WebGLRenderingContext</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL2RenderingContext\"><code>WebGL2RenderingContext</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLActiveInfo\"><code>WebGLActiveInfo</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLBuffer\"><code>WebGLBuffer</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLContextEvent\"><code>WebGLContextEvent</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLFramebuffer\"><code>WebGLFramebuffer</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLProgram\"><code>WebGLProgram</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLQuery\"><code>WebGLQuery</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLRenderbuffer\"><code>WebGLRenderbuffer</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLSampler\"><code>WebGLSampler</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLShader\"><code>WebGLShader</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLShaderPrecisionFormat\"><code>WebGLShaderPrecisionFormat</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLSync\"><code>WebGLSync</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLTexture\"><code>WebGLTexture</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLTransformFeedback\"><code>WebGLTransformFeedback</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLUniformLocation\"><code>WebGLUniformLocation</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLVertexArrayObject\"><code>WebGLVertexArrayObject</code></a></li>\n      </ol>\n    </details>\n  </li>\n\n  <li><strong><a href=\"/zh-CN/docs/MDN\">Documentation:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Contribute</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/MDN\">The MDN project</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>在这个 WebGL 示例中，我们创建一个画布，并在其中使用 WebGL 渲染旋转正方形。我们用来表示场景的坐标系与画布的坐标系相同。也就是说，（0, 0）这个坐标在左上角，右下角是坐标在（600, 460）。</p>"}},{"type":"prose","value":{"id":"vertex_shader","title":"Vertex shader","isH3":false,"content":"<p>首先，让我们看一下顶点着色器。它的工作如同以往，是将我们用于场景的坐标转换为剪贴空间的坐标（即系统中的（0，0）位于上下文的中心，每个轴从-1.0 扩展到 1.0，而不管上下文的实际大小）。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>vertex-shader<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x-shader/x-vertex<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  attribute vec2 aVertexPosition<span class=\"token punctuation\">;</span>\n\n  uniform vec2 uScalingFactor<span class=\"token punctuation\">;</span>\n  uniform vec2 uRotationVector<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    vec2 rotatedPosition <span class=\"token operator\">=</span> <span class=\"token function\">vec2</span><span class=\"token punctuation\">(</span>\n      aVertexPosition<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> uRotationVector<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span>\n            aVertexPosition<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> uRotationVector<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>\n      aVertexPosition<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> uRotationVector<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span>\n            aVertexPosition<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> uRotationVector<span class=\"token punctuation\">.</span>x\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    gl_Position <span class=\"token operator\">=</span> <span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span>rotatedPosition <span class=\"token operator\">*</span> uScalingFactor<span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>主程序与我们共享属性 aVertexPosition，它是顶点在其使用的任何坐标系中的位置。我们需要转换这些值，以便位置的两个组件都在-1.0 到 1.0 的范围内。通过乘以基于上下文宽高比的缩放因子，可以很容易地完成此操作。我们很快就会看到这个计算。</p>\n<p>我们也可以通过一次变换来旋转这个图形。 The rotated position of the vertex is computed by applying the rotation vector, found in the uniform <code>uRotationVector</code>, that's been computed by the JavaScript code.</p>\n<p>Then the final position is computed by multiplying the rotated position by the scaling vector provided by the JavaScript code in <code>uScalingFactor</code>. The values of <code>z</code> and <code>w</code> are fixed at 0.0 and 1.0, respectively, since we're drawing in 2D.</p>\n<p>The standard WebGL global <code>gl_Position</code> is then set to the transformed and rotated vertex's position.</p>"}},{"type":"prose","value":{"id":"fragment_shader","title":"Fragment shader","isH3":false,"content":"<p>Next comes the fragment shader. Its role is to return the color of each pixel in the shape being rendered. Since we're drawing a solid, untextured object with no lighting applied, this is exceptionally simple:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fragment-shader<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x-shader/x-fragment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  #ifdef <span class=\"token constant\">GL_ES</span>\n    precision highp float<span class=\"token punctuation\">;</span>\n  #endif\n\n  uniform vec4 uGlobalColor<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    gl_FragColor <span class=\"token operator\">=</span> uGlobalColor<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>This starts by specifying the precision of the <code>float</code> type, as required. Then we set the global <code>gl_FragColor</code> to the value of the uniform <code>uGlobalColor</code>, which is set by the JavaScript code to the color being used to draw the square.</p>"}},{"type":"prose","value":{"id":"html","title":"HTML","isH3":false,"content":"<p>The HTML consists solely of the <a href=\"/zh-CN/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> that we'll obtain a WebGL context on.</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>canvas</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>glcanvas<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>600<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>460<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  Oh no! Your browser doesn't support canvas!\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>canvas</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"javascript","title":"JavaScript","isH3":false,"content":""}},{"type":"prose","value":{"id":"globals_and_initialization","title":"Globals and initialization","isH3":true,"content":"<p>First, the global variables. We won't discuss these here; instead, we'll talk about them as they're used in the code to come.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> gl <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> glCanvas <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Aspect ratio and coordinate system</span>\n<span class=\"token comment\">// details</span>\n\n<span class=\"token keyword\">let</span> aspectRatio<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> currentRotation <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> currentScale <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Vertex information</span>\n\n<span class=\"token keyword\">let</span> vertexArray<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> vertexBuffer<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> vertexNumComponents<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> vertexCount<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Rendering data shared with the</span>\n<span class=\"token comment\">// scalers.</span>\n\n<span class=\"token keyword\">let</span> uScalingFactor<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> uGlobalColor<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> uRotationVector<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> aVertexPosition<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Animation timing</span>\n\n<span class=\"token keyword\">let</span> previousTime <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> degreesPerSecond <span class=\"token operator\">=</span> <span class=\"token number\">90.0</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Initializing the program is handled through a <code><a href=\"/en-US/docs/Web/API/Window/load_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">load (en-US)</a></code> event handler called <code>startup()</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> startup<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">startup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  glCanvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"glcanvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl <span class=\"token operator\">=</span> glCanvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webgl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> shaderSet <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">VERTEX_SHADER</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vertex-shader\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FRAGMENT_SHADER</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fragment-shader\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  shaderProgram <span class=\"token operator\">=</span> <span class=\"token function\">buildShaderProgram</span><span class=\"token punctuation\">(</span>shaderSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  aspectRatio <span class=\"token operator\">=</span> glCanvas<span class=\"token punctuation\">.</span>width<span class=\"token operator\">/</span>glCanvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n  currentRotation <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  currentScale <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> aspectRatio<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  vertexArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token operator\">-</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n      <span class=\"token operator\">-</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.5</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  vertexBuffer <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> vertexBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bufferData</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> vertexArray<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">STATIC_DRAW</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  vertexNumComponents <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  vertexCount <span class=\"token operator\">=</span> vertexArray<span class=\"token punctuation\">.</span>length<span class=\"token operator\">/</span>vertexNumComponents<span class=\"token punctuation\">;</span>\n\n  currentAngle <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n  rotationRate <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">animateScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>After getting the WebGL context, <code>gl</code>, we need to begin by building the shader program. Here, we're using code designed to let us add multiple shaders to our program quite easily. The array <code>shaderSet</code> contains a list of objects, each describing one shader function to be compiled into the program. Each function has a type (one of <code>gl.VERTEX_SHADER</code> or <code>gl.FRAGMENT_SHADER</code>) and an ID (the ID of the <a href=\"/zh-CN/docs/Web/HTML/Element/script\"><code>&lt;script&gt;</code></a> element containing the shader's code).</p>\n<p>The shader set is passed into the function <code>buildShaderProgram()</code>, which returns the compiled and linked shader program. We'll look at how this works next.</p>\n<p>Once the shader program is built, we compute the aspect ratio of our context by dividing its width by its height. Then we set the current rotation vector for the animation to <code>[0, 1]</code>, and the scaling vector to <code>[1.0, aspectRatio]</code>. The scaling vector, as we saw in the vertex shader, is used to scale the coordinates to fit the -1.0 to 1.0 range.</p>\n<p>The array of vertices is created next, as a <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\"><code>Float32Array</code></a> with six coordinates (three 2D vertices) per triangle to be drawn, for a total of 12 values.</p>\n<p>As you can see, we're using a coordinate system of -1.0 to 1.0 for each axis. Why, you may ask, do we need to do any adjustments at all? This is simply because our context is not square. We're using a context that's 600 pixels wide and 460 tall. Each of those dimensions is mapped to the range -1.0 to 1.0. Since the two axes aren't the same length, if we don't adjust the values of one of the two axes, the square will get stretched out in one direction or the other. So we need to normalize these values.</p>\n<p>Once the vertex array has been created, we create a new GL buffer to contain them by calling <a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/createBuffer\" title=\"gl.createBuffer()\"><code>gl.createBuffer()</code></a>. We bind the standard WebGL array buffer reference to that by calling <a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/bindBuffer\" title=\"gl.bindBuffer()\"><code>gl.bindBuffer()</code></a> and then copy the vertex data into the buffer using <a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/bufferData\" title=\"gl.bufferData()\"><code>gl.bufferData()</code></a>. The usage hint <code>gl.STATIC_DRAW</code> is specified, telling WebGL that the data will be set only one time and never modified, but will be used repeatedly. This lets WebGL consider any optimizations it can apply that may improve performance based on that information.</p>\n<p>With the vertex data now provided to WebGL, we set <code>vertexNumComponents</code> to the number of components in each vertex (2, since they're 2D vertexes) and <code>vertexCount</code> to the number of vertexes in the vertex list.</p>\n<p>Then the current rotation angle (in degrees) is set to 0.0, since we haven't performed any rotation yet, and the rotation speed (in degrees per screen refresh period, typically 60 FPS) is set to 6.</p>\n<p>Finally, <code>animateScene()</code> is called to render the first frame and schedule the rendering of the next frame of the animation.</p>"}},{"type":"prose","value":{"id":"compiling_and_linking_the_shader_program","title":"Compiling and linking the shader program","isH3":true,"content":"<h4 id=\"constructing_and_linking_the_program\">Constructing and linking the program</h4>\n<p>The <code>buildShaderProgram()</code> function accepts as input an array of objects describing a set of shader functions to be compiled and linked into the shader program and returns the shader program after it's been built and linked.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">buildShaderProgram</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">shaderInfo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> program <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  shaderInfo<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">desc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> shader <span class=\"token operator\">=</span> <span class=\"token function\">compileShader</span><span class=\"token punctuation\">(</span>desc<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      gl<span class=\"token punctuation\">.</span><span class=\"token function\">attachShader</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">linkProgram</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gl<span class=\"token punctuation\">.</span><span class=\"token function\">getProgramParameter</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">LINK_STATUS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error linking shader program:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token function\">getProgramInfoLog</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> program<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>First, <a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/createProgram\" title=\"gl.createProgram()\"><code>gl.createProgram()</code></a> is called to create a new, empty, GLSL program.</p>\n<p>Then, for each shader in the specified list of shaders, we call a <code>compileShader()</code> function to compile it, passing into it the ID and type of the shader function to build. Each of those objects includes, as mentioned before, the ID of the <code>&lt;script&gt;</code> element the shader code is found in and the type of shader it is. The compiled shader is attached to the shader program by passing it into <a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/attachShader\" title=\"gl.attachShader()\"><code>gl.attachShader()</code></a>.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> We could go a step farther here, actually, and look at the value of the <code>&lt;script&gt;</code> element's <code>type</code> attribute to determine the shader type.</p>\n</div>\n<p>Once all of the shaders are compiled, the program is linked using <a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/linkProgram\" title=\"gl.linkProgram()\"><code>gl.linkProgram()</code></a>.</p>\n<p>If an error occurrs while linking the program, the error message is logged to console.</p>\n<p>Finally, the compiled program is returned to the caller.</p>\n<h4 id=\"compiling_an_individual_shader\">Compiling an individual shader</h4>\n<p>The <code>compileShader()</code> function, below, is called by <code>buildShaderProgram()</code> to compile a single shader.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">compileShader</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> code <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>nodeValue<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> shader <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createShader</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">shaderSource</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">compileShader</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gl<span class=\"token punctuation\">.</span><span class=\"token function\">getShaderParameter</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">COMPILE_STATUS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Error compiling </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>type <span class=\"token operator\">===</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">VERTEX_SHADER</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"vertex\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"fragment\"</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> shader:</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token function\">getShaderInfoLog</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> shader<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The code is fetched from the HTML document by obtaining the value of the text node contained within the <a href=\"/zh-CN/docs/Web/HTML/Element/script\"><code>&lt;script&gt;</code></a> element with the specified ID. Then a new shader of the specified type is created using <a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/createShader\" title=\"gl.createShader()\"><code>gl.createShader()</code></a>.</p>\n<p>The source code is sent into the new shader by passing it into <a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/shaderSource\" title=\"gl.shaderSource()\"><code>gl.shaderSource()</code></a>, and then the shader is compiled using <a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/compileShader\" title=\"gl.compileShader()\"><code>gl.compileShader()</code></a></p>\n<p>Compile errors are logged to the console. Note the use of a <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Template_literals\">template literal</a> string to insert the correct shader type string into the message that gets generated. The actual error details are obtained by calling <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderingContext/getShaderInfoLog\"><code>gl.getShaderInfoLog()</code> <small>(en-US)</small></a>.</p>\n<p>Finally, the compiled shader is returned to the caller (which is the <code>buildShaderProgram()</code> function.</p>"}},{"type":"prose","value":{"id":"drawing_and_animating_the_scene","title":"Drawing and animating the scene","isH3":true,"content":"<p>The <code>animateScene()</code> function is called to render each animation frame.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">animateScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">viewport</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> glCanvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> glCanvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">clearColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">COLOR_BUFFER_BIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> radians <span class=\"token operator\">=</span> currentAngle <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">/</span> <span class=\"token number\">180.0</span><span class=\"token punctuation\">;</span>\n  currentRotation<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>radians<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  currentRotation<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>radians<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">useProgram</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  uScalingFactor <span class=\"token operator\">=</span>\n      gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"uScalingFactor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  uGlobalColor <span class=\"token operator\">=</span>\n      gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"uGlobalColor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  uRotationVector <span class=\"token operator\">=</span>\n      gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"uRotationVector\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniform2fv</span><span class=\"token punctuation\">(</span>uScalingFactor<span class=\"token punctuation\">,</span> currentScale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniform2fv</span><span class=\"token punctuation\">(</span>uRotationVector<span class=\"token punctuation\">,</span> currentRotation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniform4fv</span><span class=\"token punctuation\">(</span>uGlobalColor<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> vertexBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  aVertexPosition <span class=\"token operator\">=</span>\n      gl<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"aVertexPosition\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">enableVertexAttribArray</span><span class=\"token punctuation\">(</span>aVertexPosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">vertexAttribPointer</span><span class=\"token punctuation\">(</span>aVertexPosition<span class=\"token punctuation\">,</span> vertexNumComponents<span class=\"token punctuation\">,</span>\n        gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FLOAT</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">drawArrays</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TRIANGLES</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> vertexCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentTime</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> deltaAngle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>currentTime <span class=\"token operator\">-</span> previousTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000.0</span><span class=\"token punctuation\">)</span>\n          <span class=\"token operator\">*</span> degreesPerSecond<span class=\"token punctuation\">;</span>\n\n    currentAngle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>currentAngle <span class=\"token operator\">+</span> deltaAngle<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">360</span><span class=\"token punctuation\">;</span>\n\n    previousTime <span class=\"token operator\">=</span> currentTime<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">animateScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The first thing that needs to be done in order to draw a frame of the animation is to clear the background to the desired color. In this case, we set the viewport based on the size of the <a href=\"/zh-CN/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a>, call <a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/clearColor\" title=\"clearColor()\"><code>clearColor()</code></a> to set the color to use when clearing content, then we clear the buffer with <a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/clear\" title=\"clear()\"><code>clear()</code></a>.</p>\n<p>Next, the current rotation vector is computed by converting the current rotation in degrees (<code>currentAngle</code>) into <a href=\"https://zh.wikipedia.org/wiki/radians\" class=\"external\" rel=\" noopener\">radians</a>, then setting the first component of the rotation vector to the <a href=\"https://zh.wikipedia.org/wiki/sine\" class=\"external\" rel=\" noopener\">sine</a> of that value and the second component to the <a href=\"https://zh.wikipedia.org/wiki/cosine\" class=\"external\" rel=\" noopener\">cosine</a>. The <code>currentRotation</code> vector is now the location of the point on the <a href=\"https://zh.wikipedia.org/wiki/unit_circle\" class=\"external\" rel=\" noopener\">unit circle</a> located at the angle <code>currentAngle</code>.</p>\n<p><a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/useProgram\" title=\"useProgram()\"><code>useProgram()</code></a> is called to activate the GLSL shading program we established previously. Then we obtain the locations of each of the uniforms used to share information between the JavaScript code and the shaders (with <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderingContext/getUniformLocation\"><code>getUniformLocation()</code> <small>(en-US)</small></a>).</p>\n<p>The uniform named <code>uScalingFactor</code> is set to the <code>currentScale</code> value previously computed; this, as you may recall, is the value used to adjust the coordinate system based on the aspect ratio of the context. This is done using <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderingContext/uniform\"><code>uniform2fv()</code> <small>(en-US)</small></a> (since this is a 2-value floating-point vector).</p>\n<p><code>uRotationVector</code> is set to the current rotation vector (<code>currentRotation)</code>, also using <code>uniform2fv()</code>.</p>\n<p><code>uGlobalColor</code> is set using <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderingContext/uniform\"><code>uniform4fv()</code> <small>(en-US)</small></a> to the color we wish to use when drawing the square. This is a 4-component floating-point vector (one component each for red, green, blue, and alpha).</p>\n<p>Now that that's all out of the way, we can set up the vertex buffer and draw our shape, first, the buffer of vertexes that will be used to draw the triangles of the shape is set by calling <a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/bindBuffer\" title=\"bindBuffer()\"><code>bindBuffer()</code></a>. Then the vertex position attribute's index is obtained from the shader program by calling <a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/getAttribLocation\" title=\"getAttribLocation()\"><code>getAttribLocation()</code></a>.</p>\n<p>With the index of the vertex position attribute now available in <code>aVertexPosition</code>, we call <code>enableVertexAttribArray()</code> to enable the position attribute so it can be used by the shader program (in particular, by the vertex shader).</p>\n<p>Then the vertex buffer is bound to the <code>aVertexPosition</code> attribute by calling <a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\" title=\"vertexAttribPointer()\"><code>vertexAttribPointer()</code></a>. This step is not obvious, since this binding is almost a side effect. But as a result, accessing <code>aVertexPosition</code> now obtains data from the vertex buffer.</p>\n<p>With the association in place between the vertex buffer for our shape and the <code>aVertexPosition</code> attribute used to deliver vertexes one by one into the vertex shader, we're ready to draw the shape by calling <a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/drawArrays\" title=\"drawArrays()\"><code>drawArrays()</code></a>.</p>\n<p>At this point, the frame has been drawn. All that's left to do is to schedule to draw the next one. That's done here by calling <a href=\"/zh-CN/docs/Web/API/Window/requestAnimationFrame\" title=\"requestAnimationFrame()\"><code>requestAnimationFrame()</code></a>, which asks that a callback function be executed the next time the browser is ready to update the screen.</p>\n<p>Our <code>requestAnimationFrame()</code> callback receives as input a single parameter, <code>currentTime</code>, which specifies the time at which the frame drawing began. We use that and the saved time at which the last frame was drawn, <code>previousTime</code>, along with the number of degrees per second the square should rotate (<code>degreesPerSecond</code>) to calculate the new value of <code>currentAngle</code>. Then the value of <code>previousTime</code> is updated and we call <code>animateScene()</code> to draw the next frame (and in turn schedule the next frame to be drawn, ad infinitum).</p>"}},{"type":"prose","value":{"id":"result","title":"Result","isH3":false,"content":"<p>This is a pretty simple example, since it's just drawing one simple object, but the concepts used here extend to much more complex animations.</p><iframe class=\"sample-code-frame\" title=\"live-sample sample\" id=\"frame_live-sample\" width=\"660\" height=\"500\" src=\"https://yari-demos.prod.mdn.mozit.cloud/zh-CN/docs/Web/API/WebGL_API/Basic_2D_animation_example/_sample_.live-sample.html\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/WebGL_API\">WebGL API</a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial\">WebGL tutorial</a></li>\n</ul>"}}],"toc":[{"text":"Vertex shader","id":"vertex_shader"},{"text":"Fragment shader","id":"fragment_shader"},{"text":"HTML","id":"html"},{"text":"JavaScript","id":"javascript"},{"text":"Result","id":"result"},{"text":"See also","id":"see_also"}],"summary":"在这个 WebGL 示例中，我们创建一个画布，并在其中使用 WebGL 渲染旋转正方形。我们用来表示场景的坐标系与画布的坐标系相同。也就是说，（0, 0）这个坐标在左上角，右下角是坐标在（600, 460）。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"A basic 2D WebGL animation example","locale":"en-US","native":"English (US)"},{"title":"基本的な 2D WebGL アニメーションの例","locale":"ja","native":"日本語"}],"source":{"folder":"zh-cn/web/api/webgl_api/basic_2d_animation_example","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/webgl_api/basic_2d_animation_example/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/WebGL_API","title":"WebGL"},{"uri":"/zh-CN/docs/Web/API/WebGL_API/Basic_2D_animation_example","title":"一个 2D WebGL 动画的基础示例"}],"pageTitle":"一个 2D WebGL 动画的基础示例 - Web API 接口参考 | MDN","noIndexing":false}}