{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"使用 WebGL 创建 2D 内容","mdn_url":"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n <ol>\n  <li><a href=\"/zh-CN/docs/Web/API/WebGL_API\"><strong>WebGL API</strong></a></li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>WebGL tutorial</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\">Getting started with WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context\">Adding 2D content to a WebGL context</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL\">Using shaders to apply color in WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Animating_objects_with_WebGL\">Animating objects with WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Creating_3D_objects_using_WebGL\">Creating 3D objects using WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\">Using textures in WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL\">Lighting in WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Animating_textures_in_WebGL\">Animating textures in WebGL</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Examples and articles</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Matrix_math_for_the_web\">Matrix math for the web</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/WebGL_model_view_projection\">WebGL model view projection</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/WebGL_best_practices\">WebGL best practices</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Using_Extensions\">Using WebGL extensions</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Basic_2D_animation_example\">A basic 2D WebGL animation example</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/By_example\">WebGL by example</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Interfaces</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext\"><code>WebGLRenderingContext</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL2RenderingContext\"><code>WebGL2RenderingContext</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLActiveInfo\"><code>WebGLActiveInfo</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLBuffer\"><code>WebGLBuffer</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLContextEvent\"><code>WebGLContextEvent</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLFramebuffer\"><code>WebGLFramebuffer</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLProgram\"><code>WebGLProgram</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLQuery\"><code>WebGLQuery</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLRenderbuffer\"><code>WebGLRenderbuffer</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLSampler\"><code>WebGLSampler</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLShader\"><code>WebGLShader</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLShaderPrecisionFormat\"><code>WebGLShaderPrecisionFormat</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLSync\"><code>WebGLSync</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLTexture\"><code>WebGLTexture</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLTransformFeedback\"><code>WebGLTransformFeedback</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLUniformLocation\"><code>WebGLUniformLocation</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLVertexArrayObject\"><code>WebGLVertexArrayObject</code></a></li>\n      </ol>\n    </details>\n  </li>\n\n  <li><strong><a href=\"/zh-CN/docs/MDN\">Documentation:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Contribute</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/MDN\">The MDN project</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\">« 上一页</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL\">下一页  »</a></li>\n</ul>\n<p>一旦创建 WebGL 上下文创建成功，你就可以在这个上下文里渲染画图了。而对我们而言最简单的事，莫过于绘制一个没有纹理的 2D 图形了。那就让我们从画出一个正方形开始吧。</p>"}},{"type":"prose","value":{"id":"渲染场景","title":"渲染场景","isH3":false,"content":"<p>在开始前，我们首先需要明确最重要的一点，虽然我们的例子只是画一个二维物体，但我们仍然是在把它画在一个三维空间里。所以，我们依然需要创建着色器，通过它来渲染我们的简单场景并画出我们的物体。往下，我们将展示正方形是怎样一步步被画出来的。</p>"}},{"type":"prose","value":{"id":"着色器","title":"着色器","isH3":true,"content":"<p><strong>着色器是</strong>使用 <a href=\"https://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf\" class=\"external\" rel=\" noopener\">OpenGL ES 着色语言</a>(<strong>GLSL</strong>) 编写的程序，它携带着绘制形状的顶点信息以及构造绘制在屏幕上像素的所需数据，换句话说，它负责记录着像素点的位置和颜色。</p>\n<p>绘制 WebGL 时候有两种不同的着色器函数，<strong>顶点着色器和片段着色器。<strong>你需要通过用 GLSL 编写这些着色器，并将代码文本传递给 WebGL ， 使之在 GPU 执行时编译。顺便一提，顶点着色器和片段着色器的集合我们通常称之为</strong>着色器程序。</strong></p>\n<p>下面我们通过在 WebGL 环境绘制一个 2D 图像的例子快速介绍这两种着色器。</p>\n<h4 id=\"顶点着色器\">顶点着色器</h4>\n<p>每次渲染一个形状时，顶点着色器会在形状中的每个顶点运行。 它的工作是将输入顶点从原始坐标系转换到 WebGL 使用的缩放空间 (<strong>clipspace</strong>) 坐标系，其中每个轴的坐标范围从-1.0 到 1.0，并且不考虑纵横比，实际尺寸或任何其他因素。</p>\n<p>顶点着色器需要对顶点坐标进行必要的转换，在每个顶点基础上进行其他调整或计算，然后通过将其保存在由 GLSL 提供的特殊变量（我们称为 gl_Position）中来返回变换后的顶点</p>\n<p>顶点着色器根据需要， 也可以完成其他工作。例如，决定哪个包含 <a href=\"https://zh.wikipedia.org/wiki/texel_(graphics)\" class=\"external\" rel=\" noopener\">texel</a>面部纹理的坐标，可以应用于顶点；通过法线来确定应用到顶点的光照因子等。然后将这些信息存储在<a href=\"/zh-CN/docs/XUL_%E7%A8%8B%E5%BA%8F%E6%89%93%E5%8C%85\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">变量（varyings)</a>或<a href=\"/zh-CN/docs/Web/API/WebGL_API/Data#attributes\">属性 (attributes)</a>属性中，以便与片段着色器共享</p>\n<p>以下的顶点着色器接收一个我们定义的属性（aVertexPosition）的顶点位置值。之后这个值与两个 4x4 的矩阵（uProjectionMatrix 和 uModelMatrix）相乘; 乘积赋值给 gl_Position。有关投影和其他矩阵的更多信息，<a href=\"https://webglfundamentals.org/webgl/lessons/webgl-3d-perspective.html\" class=\"external\" rel=\" noopener\">在这里您可能可以找到有帮助的文章</a>.。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Vertex shader program</span>\n\n  <span class=\"token keyword\">const</span> vsSource <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    attribute vec4 aVertexPosition;\n\n    uniform mat4 uModelViewMatrix;\n    uniform mat4 uProjectionMatrix;\n\n    void main() {\n      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n    }\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这个例子中，我们没有计算任何光照效果，因为我们还没有应用到场景，它将后面的 <a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL\">WebGL 光照</a>章节介绍。同样我们也还没应用任何纹理，这将在<a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\">WebGL 添加纹理</a>章节补充。</p>\n<h4 id=\"片段着色器\">片段着色器</h4>\n<p><strong>片段着色器</strong>在顶点着色器处理完图形的顶点后，会被要绘制的每个图形的每个像素点调用一次。它的职责是确定像素的颜色，通过指定应用到像素的纹理元素（也就是图形纹理中的像素），获取纹理元素的颜色，然后将适当的光照应用于颜色。之后颜色存储在特殊变量 gl_FragColor 中，返回到 WebGL 层。该颜色将最终绘制到屏幕上图形对应像素的对应位置。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fsSource <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    void main() {\n      gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n    }\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"初始化着色器","title":"初始化着色器","isH3":true,"content":"<p>现在我们已经定义了两个着色器，我们需要将它们传递给 WebGL，编译并将它们连接在一起。下面的代码通过调用 loadShader（），为着色器传递类型和来源，创建了两个着色器。然后创建一个附加着色器的程序，将它们连接在一起。如果编译或链接失败，代码将弹出 alert。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">//</span>\n<span class=\"token comment\">//  初始化着色器程序，让 WebGL 知道如何绘制我们的数据</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">initShaderProgram</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gl<span class=\"token punctuation\">,</span> vsSource<span class=\"token punctuation\">,</span> fsSource</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> vertexShader <span class=\"token operator\">=</span> <span class=\"token function\">loadShader</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">VERTEX_SHADER</span><span class=\"token punctuation\">,</span> vsSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> fragmentShader <span class=\"token operator\">=</span> <span class=\"token function\">loadShader</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FRAGMENT_SHADER</span><span class=\"token punctuation\">,</span> fsSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 创建着色器程序</span>\n\n  <span class=\"token keyword\">const</span> shaderProgram <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">attachShader</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> vertexShader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">attachShader</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> fragmentShader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">linkProgram</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 创建失败， alert</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gl<span class=\"token punctuation\">.</span><span class=\"token function\">getProgramParameter</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">LINK_STATUS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Unable to initialize the shader program: '</span> <span class=\"token operator\">+</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getProgramInfoLog</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> shaderProgram<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// 创建指定类型的着色器，上传 source 源码并编译</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">loadShader</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gl<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> source</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> shader <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createShader</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Send the source to the shader object</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">shaderSource</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Compile the shader program</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">compileShader</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// See if it compiled successfully</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gl<span class=\"token punctuation\">.</span><span class=\"token function\">getShaderParameter</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">COMPILE_STATUS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'An error occurred compiling the shaders: '</span> <span class=\"token operator\">+</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getShaderInfoLog</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">deleteShader</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> shader<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>loadShader 函数将 WebGL 上下文，着色器类型和<code>源码</code>作为参数输入，然后按如下步骤创建和编译着色器：</p>\n<ol>\n  <li>调用<a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/createShader\" title=\"gl.createShader()\"><code>gl.createShader()</code></a>.创建一个新的着色器。</li>\n  <li>调用<a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/shaderSource\" title=\"gl.shaderSource()\"><code>gl.shaderSource()</code></a>.将源代码发送到着色器。</li>\n  <li>一旦着色器获取到源代码，就使用<a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/compileShader\" title=\"gl.compileShader()\"><code>gl.compileShader()</code></a>.进行编译。</li>\n  <li>为了检查是否成功编译了着色器，将检查着色器参数 gl.COMPILE_STATUS 状态。通过调用<a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/getShaderParameter\" title=\"gl.getShaderParameter()\"><code>gl.getShaderParameter()</code></a>获得它的值，并指定着色器和我们想要检查的参数的名字（gl.COMPILE_STATUS）。如果返回错误，则着色器无法编译，因此通过<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderingContext/getShaderInfoLog\"><code>gl.getShaderInfoLog()</code> <small>(en-US)</small></a>从编译器中获取日志信息并 alert，然后删除着色器返回 null，表明加载着色器失败。</li>\n  <li>如果着色器被加载并成功编译，则返回编译的着色器。</li>\n</ol>\n<p>我们可以像这样调用这段代码</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">const</span> shaderProgram <span class=\"token operator\">=</span> <span class=\"token function\">initShaderProgram</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> vsSource<span class=\"token punctuation\">,</span> fsSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在创建着色器程序之后，我们需要查找 WebGL 返回分配的输入位置。在上述情况下，我们有一个属性和两个 uniforms。属性从缓冲区接收值。顶点着色器的每次迭代都从分配给该属性的缓冲区接收下一个值。uniforms 类似于 JavaScript 全局变量。它们在着色器的所有迭代中保持相同的值。由于属性和统一的位置是特定于单个着色器程序的，因此我们将它们存储在一起以使它们易于传递</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> programInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">program</span><span class=\"token operator\">:</span> shaderProgram<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">attribLocations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">vertexPosition</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">'aVertexPosition'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">uniformLocations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">projectionMatrix</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">'uProjectionMatrix'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">modelViewMatrix</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">'uModelViewMatrix'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"创建对象","title":"创建对象","isH3":false,"content":"<p>在画正方形前，我们需要创建一个缓冲器来存储它的顶点。我们会用到名字为 initBuffers() 的函数。当我们了解到更多 WebGL 的高级概念时，这段代码会将有更多参数，变得更加复杂，并且用来创建更多的三维物体。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">initBuffers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gl</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> positionBuffer <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> positionBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> vertices <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bufferData</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span>vertices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                gl<span class=\"token punctuation\">.</span><span class=\"token constant\">STATIC_DRAW</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">position</span><span class=\"token operator\">:</span> positionBuffer<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>这段代码简单给出了绘画场景的本质。首先，它调用 gl 的成员函数 <a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/createBuffer\" title=\"createBuffer()\"><code>createBuffer()</code></a> 得到了缓冲对象并存储在顶点缓冲器。然后调用 <a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/bindBuffer\" title=\"bindBuffer()\"><code>bindBuffer()</code></a> 函数绑定上下文。</p>\n<p>当上一步完成，我们创建一个 Javascript 数组去记录每一个正方体的每一个顶点。然后将其转化为 WebGL 浮点型类型的数组，并将其传到 gl 对象的 <a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/bufferData\" title=\"bufferData()\"><code>bufferData()</code></a> 方法来建立对象的顶点。</p>\n<p><strong>绘制场景</strong></p>\n<p>当着色器和物体都创建好后，我们可以开始渲染这个场景了。因为我们这个例子不会产生动画，所以 drawScene() 方法非常简单。它还使用了几个工具函数，稍后我们会介绍。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 你可能会得到这样一段错误报告：“ mat4 is not defined”，意思是说你缺少<code>glmatrix</code>库。该库的 js 文件<a href=\"https://mdn.github.io/webgl-examples/tutorial/gl-matrix.js\" class=\"external\" rel=\" noopener\">gl-matrix.js</a>可以从<a href=\"https://github.com/mdn/webgl-examples/issues/20\" class=\"external\" rel=\" noopener\">这里</a>获得。</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">drawScene</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gl<span class=\"token punctuation\">,</span> programInfo<span class=\"token punctuation\">,</span> buffers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">clearColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Clear to black, fully opaque</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">clearDepth</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// Clear everything</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">enable</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">DEPTH_TEST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// Enable depth testing</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">depthFunc</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">LEQUAL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// Near things obscure far things</span>\n\n  <span class=\"token comment\">// Clear the canvas before we start drawing on it.</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">COLOR_BUFFER_BIT</span> <span class=\"token operator\">|</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">DEPTH_BUFFER_BIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Create a perspective matrix, a special matrix that is</span>\n  <span class=\"token comment\">// used to simulate the distortion of perspective in a camera.</span>\n  <span class=\"token comment\">// Our field of view is 45 degrees, with a width/height</span>\n  <span class=\"token comment\">// ratio that matches the display size of the canvas</span>\n  <span class=\"token comment\">// and we only want to see objects between 0.1 units</span>\n  <span class=\"token comment\">// and 100 units away from the camera.</span>\n\n  <span class=\"token keyword\">const</span> fieldOfView <span class=\"token operator\">=</span> <span class=\"token number\">45</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">/</span> <span class=\"token number\">180</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// in radians</span>\n  <span class=\"token keyword\">const</span> aspect <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">.</span>clientWidth <span class=\"token operator\">/</span> gl<span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">.</span>clientHeight<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> zNear <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> zFar <span class=\"token operator\">=</span> <span class=\"token number\">100.0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> projectionMatrix <span class=\"token operator\">=</span> mat4<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// note: glmatrix.js always has the first argument</span>\n  <span class=\"token comment\">// as the destination to receive the result.</span>\n  mat4<span class=\"token punctuation\">.</span><span class=\"token function\">perspective</span><span class=\"token punctuation\">(</span>projectionMatrix<span class=\"token punctuation\">,</span>\n                   fieldOfView<span class=\"token punctuation\">,</span>\n                   aspect<span class=\"token punctuation\">,</span>\n                   zNear<span class=\"token punctuation\">,</span>\n                   zFar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Set the drawing position to the \"identity\" point, which is</span>\n  <span class=\"token comment\">// the center of the scene.</span>\n  <span class=\"token keyword\">const</span> modelViewMatrix <span class=\"token operator\">=</span> mat4<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Now move the drawing position a bit to where we want to</span>\n  <span class=\"token comment\">// start drawing the square.</span>\n\n  mat4<span class=\"token punctuation\">.</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>modelViewMatrix<span class=\"token punctuation\">,</span>     <span class=\"token comment\">// destination matrix</span>\n                 modelViewMatrix<span class=\"token punctuation\">,</span>     <span class=\"token comment\">// matrix to translate</span>\n                 <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">6.0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// amount to translate</span>\n\n  <span class=\"token comment\">// Tell WebGL how to pull out the positions from the position</span>\n  <span class=\"token comment\">// buffer into the vertexPosition attribute.</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> numComponents <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// pull out 3 values per iteration</span>\n    <span class=\"token keyword\">const</span> type <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FLOAT</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// the data in the buffer is 32bit floats</span>\n    <span class=\"token keyword\">const</span> normalize <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// don't normalize</span>\n    <span class=\"token keyword\">const</span> stride <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// how many bytes to get from one set of values to the next</span>\n                              <span class=\"token comment\">// 0 = use type and numComponents above</span>\n    <span class=\"token keyword\">const</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// how many bytes inside the buffer to start from</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> buffers<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">vertexAttribPointer</span><span class=\"token punctuation\">(</span>\n        programInfo<span class=\"token punctuation\">.</span>attribLocations<span class=\"token punctuation\">.</span>vertexPosition<span class=\"token punctuation\">,</span>\n        numComponents<span class=\"token punctuation\">,</span>\n        type<span class=\"token punctuation\">,</span>\n        normalize<span class=\"token punctuation\">,</span>\n        stride<span class=\"token punctuation\">,</span>\n        offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">enableVertexAttribArray</span><span class=\"token punctuation\">(</span>\n        programInfo<span class=\"token punctuation\">.</span>attribLocations<span class=\"token punctuation\">.</span>vertexPosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Tell WebGL to use our program when drawing</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">useProgram</span><span class=\"token punctuation\">(</span>programInfo<span class=\"token punctuation\">.</span>program<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Set the shader uniforms</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniformMatrix4fv</span><span class=\"token punctuation\">(</span>\n      programInfo<span class=\"token punctuation\">.</span>uniformLocations<span class=\"token punctuation\">.</span>projectionMatrix<span class=\"token punctuation\">,</span>\n      <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      projectionMatrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniformMatrix4fv</span><span class=\"token punctuation\">(</span>\n      programInfo<span class=\"token punctuation\">.</span>uniformLocations<span class=\"token punctuation\">.</span>modelViewMatrix<span class=\"token punctuation\">,</span>\n      <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      modelViewMatrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> vertexCount <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">drawArrays</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TRIANGLE_STRIP</span><span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> vertexCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>第一步，用背景色擦除画布，接着建立摄像机透视矩阵。设置 45 度的视图角度，并且设置一个适合实际图像的宽高比。 指定在摄像机距离 0.1 到 100 单位长度的范围内的物体可见。</p>\n<p>接着加载特定位置，并把正方形放在距离摄像机 6 个单位的的位置。然后，我们绑定正方形的顶点缓冲到上下文，并配置好，再通过调用 <a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/drawArrays\" title=\"drawArrays()\"><code>drawArrays()</code></a> 方法来画出对象。</p><iframe width=\"670\" height=\"510\" src=\"https://mdn.github.io/webgl-examples/tutorial/sample2/index.html\" loading=\"lazy\"></iframe>\n<p>如果你的浏览器支持 WebGL 的话，<a href=\"http://mdn.github.io/webgl-examples/tutorial/sample2\" class=\"external\" rel=\" noopener\">可以点击这里看看 DEMO</a>。完整的源代码从<a href=\"https://github.com/mdn/webgl-examples/tree/gh-pages/tutorial/sample2\" class=\"external\" rel=\" noopener\">这里</a>获得</p>"}},{"type":"prose","value":{"id":"矩阵通用计算","title":"矩阵通用计算","isH3":false,"content":"<p>矩阵计算是一个很复杂的运算。 没人会想去自己写完所有代码来处理这些运算。通常人们使用一个矩阵运算库，而不会自己实现矩阵运算。在这个例子中我们使用的是<a href=\"https://glmatrix.net/\" class=\"external\" rel=\" noopener\">glMatrix library</a>.</p>"}},{"type":"prose","value":{"id":"相关资料","title":"相关资料","isH3":false,"content":"<ul>\n  <li><a href=\"https://mathworld.wolfram.com/Matrix.html\" class=\"external\" rel=\" noopener\">Matrices</a> 线上数学百科全书</li>\n  <li><a href=\"http://en.wikipedia.org/wiki/Matrix_(mathematics)\" class=\"external\" rel=\" noopener\">Matrix</a> 维基百科</li>\n</ul><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\">« 上一页</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL\">下一页  »</a></li>\n</ul>"}}],"toc":[{"text":"渲染场景","id":"渲染场景"},{"text":"创建对象","id":"创建对象"},{"text":"矩阵通用计算","id":"矩阵通用计算"},{"text":"相关资料","id":"相关资料"}],"summary":"一旦创建 WebGL 上下文创建成功，你就可以在这个上下文里渲染画图了。而对我们而言最简单的事，莫过于绘制一个没有纹理的 2D 图形了。那就让我们从画出一个正方形开始吧。","popularity":0.0008,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Adding 2D content to a WebGL context","locale":"en-US","native":"English (US)"},{"title":"Agregando Contenido 2D en el Contexto WebGL","locale":"es","native":"Español"},{"title":"Ajouter du contenu à WebGL","locale":"fr","native":"Français"},{"title":"WebGL コンテキストへの平面コンテンツの追加","locale":"ja","native":"日本語"},{"title":"WebGL 컨텍스트에 2D 컨텐츠 추가하기","locale":"ko","native":"한국어"},{"title":"Adicionando conteúdo 2D a um contexto WebGL","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Добавление двухмерного контента в контекст WebGL","locale":"ru","native":"Русский"},{"title":"增加一個 2D 物件到 WebGL 環境","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/web/api/webgl_api/tutorial/adding_2d_content_to_a_webgl_context","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/webgl_api/tutorial/adding_2d_content_to_a_webgl_context/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/WebGL_API","title":"WebGL"},{"uri":"/zh-CN/docs/Web/API/WebGL_API/Tutorial","title":"WebGL 教程"},{"uri":"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context","title":"使用 WebGL 创建 2D 内容"}],"pageTitle":"使用 WebGL 创建 2D 内容 - Web API 接口参考 | MDN","noIndexing":false}}