{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Using textures in WebGL","mdn_url":"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n <ol>\n  <li><a href=\"/zh-CN/docs/Web/API/WebGL_API\"><strong>WebGL API</strong></a></li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>WebGL tutorial</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\">Getting started with WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context\">Adding 2D content to a WebGL context</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL\">Using shaders to apply color in WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Animating_objects_with_WebGL\">Animating objects with WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Creating_3D_objects_using_WebGL\">Creating 3D objects using WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\">Using textures in WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL\">Lighting in WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Animating_textures_in_WebGL\">Animating textures in WebGL</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Examples and articles</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Matrix_math_for_the_web\">Matrix math for the web</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/WebGL_model_view_projection\">WebGL model view projection</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/WebGL_best_practices\">WebGL best practices</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Using_Extensions\">Using WebGL extensions</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Basic_2D_animation_example\">A basic 2D WebGL animation example</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/By_example\">WebGL by example</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Interfaces</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext\"><code>WebGLRenderingContext</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL2RenderingContext\"><code>WebGL2RenderingContext</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLActiveInfo\"><code>WebGLActiveInfo</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLBuffer\"><code>WebGLBuffer</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLContextEvent\"><code>WebGLContextEvent</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLFramebuffer\"><code>WebGLFramebuffer</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLProgram\"><code>WebGLProgram</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLQuery\"><code>WebGLQuery</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLRenderbuffer\"><code>WebGLRenderbuffer</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLSampler\"><code>WebGLSampler</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLShader\"><code>WebGLShader</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLShaderPrecisionFormat\"><code>WebGLShaderPrecisionFormat</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLSync\"><code>WebGLSync</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLTexture\"><code>WebGLTexture</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLTransformFeedback\"><code>WebGLTransformFeedback</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLUniformLocation\"><code>WebGLUniformLocation</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLVertexArrayObject\"><code>WebGLVertexArrayObject</code></a></li>\n      </ol>\n    </details>\n  </li>\n\n  <li><strong><a href=\"/zh-CN/docs/MDN\">Documentation:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Contribute</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/MDN\">The MDN project</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Creating_3D_objects_using_WebGL\">« 上一页</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL\">下一页  »</a></li>\n</ul>\n<p>现在我们已经创建好了一个可以旋转的 3D 的立方体，接下来是时候使用贴图来代替每个面的单一的颜色了。</p>"}},{"type":"prose","value":{"id":"加载纹理","title":"加载纹理","isH3":false,"content":"<p>首先加入加载纹理的代码。现在我们只使用一张单一的纹理贴到立方体的 6 个面上，但是同样的方法可以用来加载任意数量的纹理贴图。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 值得注意的一点是对纹理的加载同样需要遵循<a href=\"zh-CN/docs/Web/HTTP/Access_control_CORS\">跨域访问规则</a>；也就是说你只能从允许跨域访问的网址加载你需要的纹理。下面的例子就是支持跨域访问的。</p>\n</div>\n<p>加载纹理的代码如下：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">initTextures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  cubeTexture <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cubeImage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cubeImage<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">handleTextureLoaded</span><span class=\"token punctuation\">(</span>cubeImage<span class=\"token punctuation\">,</span> cubeTexture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  cubeImage<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">\"cubetexture.png\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">handleTextureLoaded</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">image<span class=\"token punctuation\">,</span> texture</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindTexture</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> texture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">texImage2D</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">RGBA</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">RGBA</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">UNSIGNED_BYTE</span><span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">texParameteri</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_MAG_FILTER</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">LINEAR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">texParameteri</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_MIN_FILTER</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">LINEAR_MIPMAP_NEAREST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">generateMipmap</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindTexture</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>函数 <code>initTextures()</code> 首先调用 GL <a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/createTexture\" title=\"createTexture()\"><code>createTexture()</code></a> 函数来创建一个 GL 纹理对象 cubeTexture 。为了把图片文件加载到纹理，代码首先创建了一个 <code>Image</code> 对象然后把需要当作纹理使用的图形文件加载了进来。当图片加载完成后回调函数 <code>handleTextureLoaded()</code> 就会执行。</p>\n<p>接下来为了真正地形成纹理，我们通过把新创建的纹理对象绑定到 <code>gl.TEXTURE_2D 来让它成为当前操作纹理。然后通过调用</code> <a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/texImage2D\" title=\"texImage2D()\"><code>texImage2D()</code></a> 把已经加载的图片图形数据写到纹理。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 在多数情况下，纹理的宽和高都必须是 2 的幂（如：1，2，4，8，16 等等）。如果有什么特殊情况请参考下面的“<a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL#%E9%9D%9E2%E7%9A%84%E5%B9%82%E7%BA%B9%E7%90%86\" aria-current=\"page\">非 2 的幂纹理</a>”小节。</p>\n</div>\n<p>代码的接下来两行设置了纹理过滤器，过滤器用来控制当图片缩放时像素如何生成如何插值。在这个例子里，我们对图片放大使用的是线性过滤，而对图片缩小使用的是多级渐进纹理过滤。接下来我们通过调用 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderingContext/generateMipmap\"><code>generateMipMap()</code> <small>(en-US)</small></a> 来生成多级渐进纹理，接着通过给 <code>gl.TEXTURE_2D</code> 绑定值 <code>null</code> 来告诉 WebGL 我们对当前纹理的操作已经结束了。</p>"}},{"type":"prose","value":{"id":"非_2_的幂纹理","title":"非 2 的幂纹理","isH3":true,"content":"<p>一般来说，宽和高都是 2 的幂的纹理使用是最理想的。2 的幂纹理在渲染内存里的存储更高效，而且对它们的使用限制也更少。由美术工作人员生成的纹理最终在用来渲染前都应该使用放大或缩小的方式把它生成为 2 的幂纹理，其实事实上来说，在创作纹理之初就应该直接使用大小是 2 的幂的宽和高。纹理的每一边都应该是像 1，2，4，8，16，32，64，128，256，512，1024 或 2048 这样的值。当然也要注意尺寸的大小，因为虽说现在的大部分设置都已经可以支持 4096 像素的图片，但也不是全部；而有一些设备甚至可以支持 8192 或更高像素呢。</p>\n<p>有的时候从你的特定情况出发，使用 2 的幂纹理会比较困难。当使用到第三方的资源时，一般来说最好的方式就是先使用 HTML5 的画布把图片修正成 2 的幂然后再放到 WebGL 中进行渲染使用，这样一来，如果图片拉伸比较明显的话纹理坐标的值可需要适当地进行修正。</p>\n<p>但是，如果你一定要使用非 2 的幂纹理的话，WebGL 也有原生支持，不过这些支持是受限的。当然在某些情况下使用非 2 的幂纹理也是很有用的，比如这张纹理刚好与你的显示器的分辨率相匹配，或者使用画布重新生成纹理的方式并不值得时。但是要特别注意的是：这种非 2 的幂纹理不能用来生成多级渐进纹理，而且不能使用纹理重复（重复纹理寻址等）。</p>\n<p>使用重复纹理寻址的一个例子就是使用一张砖块的纹理来平铺满一面墙壁。</p>\n<p>多级渐进纹理和纹理坐标重复可以通过调用 <a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/texParameter\" title=\"texParameteri()\"><code>texParameteri()</code></a> 来禁用，当然首先你已经通过调用 <a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext/bindTexture\" title=\"bindTexture()\"><code>bindTexture()</code></a> 绑定过纹理了。这样虽然已经可以使用非 2 的幂纹理了，但是你将无法使用多级渐进纹理，纹理坐标包装，纹理坐标重复，而且无法控制设备如何处理你的纹理。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// gl.NEAREST is also allowed, instead of gl.LINEAR, as neither mipmap.</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token function\">texParameteri</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_MIN_FILTER</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">LINEAR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Prevents s-coordinate wrapping (repeating).</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token function\">texParameteri</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_WRAP_S</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">CLAMP_TO_EDGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Prevents t-coordinate wrapping (repeating).</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token function\">texParameteri</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_WRAP_T</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">CLAMP_TO_EDGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>现在，当使用以上参数时，兼容 WebGL 的设备就会自动变得可以使用任何分辨率的纹理（当然还要考虑像素上限）。如果不使用上面这些参数的话，任何非 2 的幂纹理使用都会失败然后返回一张纯黑图片。</p>"}},{"type":"prose","value":{"id":"映射纹理到面","title":"映射纹理到面","isH3":false,"content":"<p>现在，纹理已经加载好了，而且已经可以使用了。但是在使用之前我们还要创建好纹理坐标到立方体各个面的顶点的映射关系。下面的代码通过替换之前的设置每个面颜色的代码，当然还是在 <code>initBuffers()</code> 函数里。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>cubeVerticesTextureCoordBuffer <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> cubeVerticesTextureCoordBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> textureCoordinates <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token comment\">// Front</span>\n  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Back</span>\n  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Top</span>\n  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Bottom</span>\n  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Right</span>\n  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Left</span>\n  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\ngl<span class=\"token punctuation\">.</span><span class=\"token function\">bufferData</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span>textureCoordinates<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              gl<span class=\"token punctuation\">.</span><span class=\"token constant\">STATIC_DRAW</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>首先，代码创建了一个 GL 缓存区，用来保存每个面的纹理坐标信息，然后把这个缓存区绑定到 GL 以方便我们写入数据。</p>\n<p><code>数组变量 textureCoordinates</code> 中定义好了与每个面上的每个顶点一一对应的纹理坐标。请注意，纹理坐标的取值范围只能从 0.0 到 1.0，所以不论纹理贴图的实际大小是多少，为了实现纹理映射，我们要使用的纹理坐标只能规范化到 0.0 到 1.0 的范围内。</p>\n<p>纹理坐标信息给定了之后，把这个数组里的数据都写到 GL 缓存区，这样 GL 就能使用这个坐标数据了。</p>"}},{"type":"prose","value":{"id":"更新着色器","title":"更新着色器","isH3":false,"content":"<p>为了使用纹理来代替单一的颜色，着色器程序和着色器程序的初始化代码都需要进行修改。</p>\n<p>先让我们看一看需要加入函数 initShaders() 里的非常简单的改变：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>textureCoordAttribute <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"aTextureCoord\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token function\">enableVertexAttribArray</span><span class=\"token punctuation\">(</span>textureCoordAttribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token function\">vertexAttribPointer</span><span class=\"token punctuation\">(</span>texCoordAttribute<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FLOAT</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这段代码中我们使用包含纹理坐标信息的属性替换之前使用的顶点颜色属性。</p>"}},{"type":"prose","value":{"id":"顶点着色器","title":"顶点着色器","isH3":true,"content":"<p>接下来我们会修改顶点着色器代码，现在不再需要获取顶点颜色数据，而是获取纹理坐标数据。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shader-vs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x-shader/x-vertex<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  attribute vec3 aVertexPosition<span class=\"token punctuation\">;</span>\n  attribute vec2 aTextureCoord<span class=\"token punctuation\">;</span>\n\n  uniform mat4 uMVMatrix<span class=\"token punctuation\">;</span>\n  uniform mat4 uPMatrix<span class=\"token punctuation\">;</span>\n\n  varying highp vec2 vTextureCoord<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">void</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    gl_Position <span class=\"token operator\">=</span> uPMatrix <span class=\"token operator\">*</span> uMVMatrix <span class=\"token operator\">*</span> <span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span>aVertexPosition<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    vTextureCoord <span class=\"token operator\">=</span> aTextureCoord<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>代码的关键更改在于不再获取顶点颜色数据转而获取和设置纹理坐标数据；这样就能把顶点与其对应的纹理联系在一起了。</p>"}},{"type":"prose","value":{"id":"片段着色器","title":"片段着色器","isH3":true,"content":"<p>那么片段着色器也要相应地进行更改：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shader-fs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x-shader/x-fragment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  varying highp vec2 vTextureCoord<span class=\"token punctuation\">;</span>\n\n  uniform sampler2D uSampler<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">void</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    gl_FragColor <span class=\"token operator\">=</span> <span class=\"token function\">texture2D</span><span class=\"token punctuation\">(</span>uSampler<span class=\"token punctuation\">,</span> <span class=\"token function\">vec2</span><span class=\"token punctuation\">(</span>vTextureCoord<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">,</span> vTextureCoord<span class=\"token punctuation\">.</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>现在的代码不会再使用一个简单的颜色值填充片段颜色，片段的颜色是通过采样器使用最好的映射方式从纹理中的每一个像素计算出来的。</p>"}},{"type":"prose","value":{"id":"绘制具体纹理贴图的立方体","title":"绘制具体纹理贴图的立方体","isH3":false,"content":"<p>接下来是对 <code>drawScene()</code> 函数的更改，为了使整体的代码看起来更简洁，我们去掉了让立方体位置变化的代码，现在它只会随着时间的变化进行旋转，而为了使用纹理，所要进行的代码更改确是很少的。</p>\n<p>使用下面的代码代替映射颜色到纹理的代码：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>gl<span class=\"token punctuation\">.</span><span class=\"token function\">activeTexture</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token function\">bindTexture</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> cubeTexture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token function\">uniform1i</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"uSampler\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>GL 最多可同时注册 32 张纹理；<code>gl.TEXTURE0 是第一张。我们把我们之前加载的纹理绑定到了第一个寄存器，然后着色器程序里的采样器 uSampler</code> 就会完成它的功能：使用纹理。</p>\n<p>好，现在我们的立方体就会像这样旋转起来了。</p><iframe width=\"670\" height=\"510\" src=\"https://mdn.github.io/webgl-examples/tutorial/sample6/index.html\" loading=\"lazy\"></iframe>\n<p><a href=\"https://github.com/mdn/webgl-examples/tree/gh-pages/tutorial/sample6\" class=\"external\" rel=\" noopener\">查看完整示例代码</a> | <a href=\"https://mdn.github.io/webgl-examples/tutorial/sample6/\" class=\"external\" rel=\" noopener\">在新窗口里打开示例</a></p>"}},{"type":"prose","value":{"id":"关于跨域纹理","title":"关于跨域纹理","isH3":false,"content":"<p>加载 WebGL 纹理应该也可以说是跨域访问控制里的一个话题。为了在我们的显示内容里使用其它域名里的纹理图片，允许跨域访问也是要考虑的。可以通过查看<a href=\"/zh-CN/docs/Web/HTTP/CORS\">HTTP 访问控制</a>来获取到更多的相关细节。</p>\n<p><a href=\"https://hacks.mozilla.org/2011/11/using-cors-to-load-webgl-textures-from-cross-domain-images/\" class=\"external\" rel=\" noopener\">这篇文章</a>也对跨域加载纹理到 WebGL 做出了解释。而且文章里面还包含了一个使用的<a href=\"https://people.mozilla.org/~bjacob/webgltexture-cors-js.html\" class=\"external\" rel=\" noopener\">例子</a>。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 对跨域加载 WebGL 纹理的支持和对 image 元素的 <code>crossOrigin</code> 的属性的支持都是在 <span title=\"(Firefox 8.0 / Thunderbird 8.0 / SeaMonkey 2.5)\">Gecko&nbsp;8.0</span> 版本中实现的。</p>\n</div>\n<p>被污染过的（只写）画布是不能拿来当作 WebGL 纹理来使用的。举个例子来说，当把一张跨域的图片画到一个 2D 的 <a href=\"/zh-CN/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> 中时，这个画布就是“被污染过的”。</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>备注：</strong> 对 Canvas 2D 的 <code>drawImage</code> 的跨域支持已经在 <span title=\"(Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6)\">Gecko&nbsp;9.0</span> 版本实现的。这就意味着使用支持跨域的图片来污染一个 2D 的画布，这张画布也已经可以作为 WebGL 的纹理来使用了。</p>\n</div>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>备注：</strong> 视频对跨域的支持以及 <a href=\"/zh-CN/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a> 元素的 <code>crossorigin</code> 属性的支持是在 <span title=\"(Firefox 12.0 / Thunderbird 12.0 / SeaMonkey 2.9)\">Gecko&nbsp;12.0</span> 版本中实现的。</p>\n</div><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Creating_3D_objects_using_WebGL\">« 上一页</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL\">下一页  »</a></li>\n</ul>"}}],"toc":[{"text":"加载纹理","id":"加载纹理"},{"text":"映射纹理到面","id":"映射纹理到面"},{"text":"更新着色器","id":"更新着色器"},{"text":"绘制具体纹理贴图的立方体","id":"绘制具体纹理贴图的立方体"},{"text":"关于跨域纹理","id":"关于跨域纹理"}],"summary":"现在我们已经创建好了一个可以旋转的 3D 的立方体，接下来是时候使用贴图来代替每个面的单一的颜色了。","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using textures in WebGL","locale":"en-US","native":"English (US)"},{"title":"Utilizando texturas en WebGL","locale":"es","native":"Español"},{"title":"Utilisation des textures en WebGL","locale":"fr","native":"Français"},{"title":"WebGL でのテクスチャの使用","locale":"ja","native":"日本語"},{"title":"WebGL에서 텍스쳐 사용하기","locale":"ko","native":"한국어"},{"title":"Using textures in WebGL","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/api/webgl_api/tutorial/using_textures_in_webgl","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/webgl_api/tutorial/using_textures_in_webgl/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/WebGL_API","title":"WebGL"},{"uri":"/zh-CN/docs/Web/API/WebGL_API/Tutorial","title":"WebGL 教程"},{"uri":"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL","title":"Using textures in WebGL"}],"pageTitle":"Using textures in WebGL - Web API 接口参考 | MDN","noIndexing":false}}