{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"使用着色器将颜色应用于 WebGL","mdn_url":"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n <ol>\n  <li><a href=\"/zh-CN/docs/Web/API/WebGL_API\"><strong>WebGL API</strong></a></li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>WebGL tutorial</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\">Getting started with WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context\">Adding 2D content to a WebGL context</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL\">Using shaders to apply color in WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Animating_objects_with_WebGL\">Animating objects with WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Creating_3D_objects_using_WebGL\">Creating 3D objects using WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\">Using textures in WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL\">Lighting in WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Animating_textures_in_WebGL\">Animating textures in WebGL</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Examples and articles</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Matrix_math_for_the_web\">Matrix math for the web</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/WebGL_model_view_projection\">WebGL model view projection</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/WebGL_best_practices\">WebGL best practices</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Using_Extensions\">Using WebGL extensions</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Basic_2D_animation_example\">A basic 2D WebGL animation example</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/By_example\">WebGL by example</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Interfaces</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext\"><code>WebGLRenderingContext</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL2RenderingContext\"><code>WebGL2RenderingContext</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLActiveInfo\"><code>WebGLActiveInfo</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLBuffer\"><code>WebGLBuffer</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLContextEvent\"><code>WebGLContextEvent</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLFramebuffer\"><code>WebGLFramebuffer</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLProgram\"><code>WebGLProgram</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLQuery\"><code>WebGLQuery</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLRenderbuffer\"><code>WebGLRenderbuffer</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLSampler\"><code>WebGLSampler</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLShader\"><code>WebGLShader</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLShaderPrecisionFormat\"><code>WebGLShaderPrecisionFormat</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLSync\"><code>WebGLSync</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLTexture\"><code>WebGLTexture</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLTransformFeedback\"><code>WebGLTransformFeedback</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLUniformLocation\"><code>WebGLUniformLocation</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLVertexArrayObject\"><code>WebGLVertexArrayObject</code></a></li>\n      </ol>\n    </details>\n  </li>\n\n  <li><strong><a href=\"/zh-CN/docs/MDN\">Documentation:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Contribute</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/MDN\">The MDN project</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context\">« 上一页</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Animating_objects_with_WebGL\">下一页  »</a></li>\n</ul>\n<p>在<a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context\">之前的展示</a>中我们已经创建好了一个正方形，接下来我们要做的就是给它添加一抹色彩。添加颜色可以通过修改着色器来实现。</p>"}},{"type":"prose","value":{"id":"给顶点着色","title":"给顶点着色","isH3":false,"content":"<p>在 GL 中，物体是由一系列顶点组成的，每一个顶点都有位置和颜色信息。在默认情况下，所有像素的颜色（以及它所有的属性，包括位置）都由线性插值计算得来，自动形成平滑的渐变。我们以前的顶点着色器没有给顶点添加任何特定的颜色——在顶点着色器与片段着色器之间给每个像素着白色，于是整个正方形被渲染成纯白。</p>\n<p>现在我们假设正方形的每个顶点使用不同的颜色：红，黄，绿，白，以此渲染一个渐变的色彩。第一步，要给这些顶点建立相应的颜色。首先我们要创建一个顶点颜色数组，然后将它们存在 WebGL 的缓冲区中。为实现这一功能，我们在 initBuffers() 函数中加入如下代码：</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">initBuffers() {\n  const positionBuffer = gl.createBuffer();\n  const positions = [\n     1.0,  1.0,\n    -1.0,  1.0,\n     1.0, -1.0,\n    -1.0, -1.0,\n  ];\n  gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER, positionBuffer);\n  gl.bufferData(WebGLRenderingContext.ARRAY_BUFFER,\n    new Float32Array(positions),\n    WebGLRenderingContext.STATIC_DRAW\n  );\n\n  const colorBuffer = gl.createBuffer();\n  const colors = [\n    1.0,  1.0,  1.0,  1.0,    // 白\n    1.0,  0.0,  0.0,  1.0,    // 红\n    0.0,  1.0,  0.0,  1.0,    // 绿\n    0.0,  0.0,  1.0,  1.0,    // 蓝\n  ];\n\n  gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER, colorBuffer);\n  gl.bufferData(WebGLRenderingContext.ARRAY_BUFFER,\n    new Float32Array(colors),\n    WebGLRenderingContext.STATIC_DRAW\n  );\n\n  return {\n    position: positionBuffer,\n    color: colorBuffer,\n  };\n}\n</pre></div>\n<p>这段代码首先建立了一个 JavaScript 的数组，此数组中包含四组四值向量，每一组向量代表一个顶点的颜色。然后，创建一个 WebGL 缓冲区用来存储这些颜色——将数组中的值转换成 WebGL 所规定的浮点型后，存储在该缓冲区中。</p>\n<p>为了实际使用这些颜色，我们继续修改顶点着色器，使得着色器可以从颜色缓冲区中正确取出颜色：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shader-vs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x-shader/x-vertex<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      attribute vec3 aVertexPosition<span class=\"token punctuation\">;</span>\n      attribute vec4 aVertexColor<span class=\"token punctuation\">;</span>\n\n      uniform mat4 uModelViewMatrix<span class=\"token punctuation\">;</span>\n      uniform mat4 uProjectionMatrix<span class=\"token punctuation\">;</span>\n\n      varying lowp vec4 vColor<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">void</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        gl_Position <span class=\"token operator\">=</span> uProjectionMatrix<span class=\"token operator\">*</span> uModelViewMatrix <span class=\"token operator\">*</span> <span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span>aVertexPosition<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vColor <span class=\"token operator\">=</span> aVertexColor<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>与之前相比，这段代码的关键不同点在于：每个顶点都与一个颜色数组中的数值相连接。</p>"}},{"type":"prose","value":{"id":"给片段着色","title":"给片段着色","isH3":false,"content":"<p>我们先来复习一下之前构造的片段着色器：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shader-fs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x-shader/x-fragment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">void</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        gl_FragColor <span class=\"token operator\">=</span> <span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>为使每个像素都得到插值后的颜色，我们只需要在此从 <code>vColor</code> 变量中获取这个颜色的值：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shader-fs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x-shader/x-fragment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      varying lowp vec4 vColor<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">void</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        gl_FragColor <span class=\"token operator\">=</span> vColor<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>这是一个非常简单的改变，每个片段只是根据其相对于顶点的位置得到一个插值过的颜色，而不是一个指定的颜色值。</p>"}},{"type":"prose","value":{"id":"带颜色的绘制","title":"带颜色的绘制","isH3":false,"content":"<p>接下来，我们要在 <code>initShader()</code> 中初始化颜色属性，以便着色器程序使用</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  vertexColorAttribute <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"aVertexColor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">enableVertexAttribArray</span><span class=\"token punctuation\">(</span>vertexColorAttribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>然后，我们便可以修改 <code>drawScene()</code> 使之在绘制正方形时使用这些颜色：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> squareVerticesColorBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">vertexAttribPointer</span><span class=\"token punctuation\">(</span>vertexColorAttribute<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FLOAT</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><iframe width=\"670\" height=\"510\" src=\"https://mdn.github.io/webgl-examples/tutorial/sample3/index.html\" loading=\"lazy\"></iframe>\n<p><a href=\"https://github.com/mdn/webgl-examples/tree/gh-pages/tutorial/sample3\" class=\"external\" rel=\" noopener\">查看完整代码</a> | <a href=\"https://mdn.github.io/webgl-examples/tutorial/sample3/\" class=\"external\" rel=\" noopener\">在新页面中打开示例</a></p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context\">« 上一页</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Animating_objects_with_WebGL\">下一页  »</a></li>\n</ul>"}}],"toc":[{"text":"给顶点着色","id":"给顶点着色"},{"text":"给片段着色","id":"给片段着色"},{"text":"带颜色的绘制","id":"带颜色的绘制"}],"summary":"在之前的展示中我们已经创建好了一个正方形，接下来我们要做的就是给它添加一抹色彩。添加颜色可以通过修改着色器来实现。","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using shaders to apply color in WebGL","locale":"en-US","native":"English (US)"},{"title":"Utilizar los shaders para aplicar color en WebGL","locale":"es","native":"Español"},{"title":"Ajouter des couleurs avec les nuanceurs","locale":"fr","native":"Français"},{"title":"シェーダーを用いた WebGL での色の指定","locale":"ja","native":"日本語"},{"title":"WebGL에서 셰이더를 사용하여 색상 적용하기","locale":"ko","native":"한국어"},{"title":"Использование шейдеров для задания цвета в WebGL","locale":"ru","native":"Русский"},{"title":"使用 shaders 在 WebGL 上色","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/web/api/webgl_api/tutorial/using_shaders_to_apply_color_in_webgl","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/webgl_api/tutorial/using_shaders_to_apply_color_in_webgl/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/WebGL_API","title":"WebGL"},{"uri":"/zh-CN/docs/Web/API/WebGL_API/Tutorial","title":"WebGL 教程"},{"uri":"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL","title":"使用着色器将颜色应用于 WebGL"}],"pageTitle":"使用着色器将颜色应用于 WebGL - Web API 接口参考 | MDN","noIndexing":false}}