{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"WebGL model view projection","mdn_url":"/zh-CN/docs/Web/API/WebGL_API/WebGL_model_view_projection","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n <ol>\n  <li><a href=\"/zh-CN/docs/Web/API/WebGL_API\"><strong>WebGL API</strong></a></li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>WebGL tutorial</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\">Getting started with WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context\">Adding 2D content to a WebGL context</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL\">Using shaders to apply color in WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Animating_objects_with_WebGL\">Animating objects with WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Creating_3D_objects_using_WebGL\">Creating 3D objects using WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\">Using textures in WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL\">Lighting in WebGL</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Tutorial/Animating_textures_in_WebGL\">Animating textures in WebGL</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Examples and articles</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Matrix_math_for_the_web\">Matrix math for the web</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/WebGL_model_view_projection\">WebGL model view projection</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/WebGL_best_practices\">WebGL best practices</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Using_Extensions\">Using WebGL extensions</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/Basic_2D_animation_example\">A basic 2D WebGL animation example</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL_API/By_example\">WebGL by example</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Interfaces</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLRenderingContext\"><code>WebGLRenderingContext</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGL2RenderingContext\"><code>WebGL2RenderingContext</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLActiveInfo\"><code>WebGLActiveInfo</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLBuffer\"><code>WebGLBuffer</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLContextEvent\"><code>WebGLContextEvent</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLFramebuffer\"><code>WebGLFramebuffer</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLProgram\"><code>WebGLProgram</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLQuery\"><code>WebGLQuery</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLRenderbuffer\"><code>WebGLRenderbuffer</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLSampler\"><code>WebGLSampler</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLShader\"><code>WebGLShader</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLShaderPrecisionFormat\"><code>WebGLShaderPrecisionFormat</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLSync\"><code>WebGLSync</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLTexture\"><code>WebGLTexture</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLTransformFeedback\"><code>WebGLTransformFeedback</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLUniformLocation\"><code>WebGLUniformLocation</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebGLVertexArrayObject\"><code>WebGLVertexArrayObject</code></a></li>\n      </ol>\n    </details>\n  </li>\n\n  <li><strong><a href=\"/zh-CN/docs/MDN\">Documentation:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Contribute</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/MDN\">The MDN project</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>本文探讨如何在 WebGL 项目中获取数据，并将其投影到适当的空间以在屏幕上显示。 它假定了你具备用于平移，缩放和旋转的基本矩阵数学知识。它解释了组成 3D 场景时通常使用的三个核心矩阵：模型，视图和投影矩阵。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 本文还可作为 <a href=\"https://github.com/TatumCreative/mdn-model-view-projection\" class=\"external\" rel=\" noopener\">MDN 内容套件</a> 提供。它还使用 <code>MDN</code>全局对象下可用的 <a href=\"https://github.com/TatumCreative/mdn-webgl\" class=\"external\" rel=\" noopener\">实用函数</a> 集合。</p>\n</div>"}},{"type":"prose","value":{"id":"模型、视图、投影矩阵","title":"模型、视图、投影矩阵","isH3":false,"content":"<p>WebGL 空间中的点和多边形的个体转化由基本的转换矩阵（例如平移，缩放和旋转）处理。可以将这些矩阵组合在一起并以特殊方式分组，以使其用于渲染复杂的 3D 场景。这些组合成的矩阵最终将原始数据类型移动到一个称为裁剪空间的特殊坐标空间中。这是一个中心点位于 (0, 0, 0)，角落范围在 (-1, -1, -1) 到 (1, 1, 1) 之间，2 个单位宽的立方体。该剪裁空间被压缩到一个二维空间并栅格化为图像。</p>\n<p>下面讨论的第一个矩阵是<strong>模型矩阵</strong>，它定义了如何获取原始模型数据并将其在 3D 世界空间中移动。<strong>投影矩阵</strong>用于将世界空间坐标转换为剪裁空间坐标。常用的投影矩阵（<strong>透视矩阵</strong>）用于模拟充当 3D 虚拟世界中观看者的替身的典型相机的效果。<strong>视图矩阵</strong>负责移动场景中的对象以模拟相机位置的变化，改变观察者当前能够看到的内容。</p>\n<p>以下的几个部分提供了对模型，视图和投影矩阵背后的思想及实现的深入理解。这些矩阵是在屏幕上移动数据的核心，是胜过各个框架和引擎的概念。</p>"}},{"type":"prose","value":{"id":"裁剪空间","title":"裁剪空间","isH3":false,"content":"<p>在 WebGL 程序中，数据通常上传到具有自己的坐标系统的 GPU 上，然后顶点着色器将这些点转换到一个称为<strong>裁剪空间</strong>的特殊坐标系上。延展到裁剪空间之外的任何数据都会被剪裁并且不会被渲染。如果一个三角形超出了该空间的边界，则将其裁切成新的三角形，并且仅保留新三角形在裁剪空间中的部分。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection/clip-space-graph.svg\" alt=\"A 3d graph showing clip space in WebGL.\" width=\"500\" height=\"432\" loading=\"lazy\">\n</p>\n<p>上面的图像裁剪空间的可视化，所有点都必须被包含在其中。它是一个角在 (-1, -1, -1)，对角在 (1, 1, 1)，中心点在 (0, 0, 0) 的每边 2 个单位的立方体。裁剪空间使用的这个两个立方米坐标系称为归一化设备坐标（NDC）。在研究和使用 WebGL 代码时，你可能时不时的会使用这个术语。</p>\n<p>在本节中，我们将直接将数据放入裁剪空间坐标系中。通常使用位于任意坐标系中的模型数据，然后使用矩阵进行转换，将模型坐标转换为裁剪空间系下的坐标。这个例子，通过简单地使用从 (-1，-1，-1) 到 (1,1,1) 的模型坐标值来说明剪辑空间的工作方式是最简单的。下面的代码将创建 2 个三角形，这些三角形将在屏幕上绘制一个正方形。正方形中的 Z 深度确定当前正方形共享同一个空间时在顶部绘制的内容，较小的 Z 值将呈现在较大的 Z 值之上。</p>"}},{"type":"prose","value":{"id":"webglbox_例子","title":"WebGLBox 例子","isH3":true,"content":"<p>本示例将创建一个自定义 WebGL 对象，该对象将在屏幕上绘制一个 2D 框。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 每一个 WebGL 示例代码在此 <a href=\"https://github.com/TatumCreative/mdn-model-view-projection/tree/master/lessons\" class=\"external\" rel=\" noopener\">github repo</a> 中可找到，并按章节组织。此外，每个章节底部都有一个 JSFiddle 链接。</p>\n</div>\n<h4 id=\"webglbox_constructor\">WebGLBox Constructor</h4>\n<p>构造函数看起来像这样：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">WebGLBox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// 设置 canvas 和 WebGL 上下文</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>innerHeight<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gl <span class=\"token operator\">=</span> <span class=\"token constant\">MDN</span><span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> gl <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gl<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 设置一个 WebGL 程序，任何 MDN 对象相关的部分在本文之外定义</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>webglProgram <span class=\"token operator\">=</span> <span class=\"token constant\">MDN</span><span class=\"token punctuation\">.</span><span class=\"token function\">createWebGLProgramFromIds</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> <span class=\"token string\">'vertex-shader'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fragment-shader'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">useProgram</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>webglProgram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 保存 attribute 和 uniform 位置</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>positionLocation <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribLocation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>webglProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">'position'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>colorLocation <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>webglProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">'color'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 告诉 WebGL 在绘制时测试深度，所以如果一个正方形后面有另一个正方形</span>\n  <span class=\"token comment\">// 另一个正方形不会被绘制</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">enable</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">DEPTH_TEST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"webglbox_绘制\">WebGLBox 绘制</h4>\n<p>现在，我们将创建一个在屏幕上绘制框的方法。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token class-name\">WebGLBox</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">draw</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">settings</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// 创建一下 attribute 数据; 这些是最终绘制到屏幕上的三角形</span>\n  <span class=\"token comment\">// 有两个形成一个正方形</span>\n\n  <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n\n    <span class=\"token comment\">//Triangle 1</span>\n    settings<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>  settings<span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>depth<span class=\"token punctuation\">,</span>\n    settings<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>depth<span class=\"token punctuation\">,</span>\n    settings<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>  settings<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">,</span>    settings<span class=\"token punctuation\">.</span>depth<span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">//Triangle 2</span>\n    settings<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>  settings<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">,</span>    settings<span class=\"token punctuation\">.</span>depth<span class=\"token punctuation\">,</span>\n    settings<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>depth<span class=\"token punctuation\">,</span>\n    settings<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">,</span>    settings<span class=\"token punctuation\">.</span>depth\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 使用 WebGL 将其绘制到屏幕上</span>\n\n  <span class=\"token comment\">// 性能要点：为每个绘制创建新的缓冲器很慢</span>\n  <span class=\"token comment\">// 这个方法仅用于说明</span>\n\n  <span class=\"token keyword\">var</span> gl <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gl<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 创建一个缓冲区并绑定数据</span>\n  <span class=\"token keyword\">var</span> buffer <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bufferData</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">STATIC_DRAW</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 设置指向 attribute 数据的指针（三角形）</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">enableVertexAttribArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>positionLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">vertexAttribPointer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>positionLocation<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FLOAT</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 设置将在所有三角形之间共享的 color uniform</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniform4fv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>colorLocation<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 在屏幕上绘制该三角形</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">drawArrays</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TRIANGLES</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>着色器是用 GLSL 编写的代码片段，它接收我们的点数据并最终将它们渲染到屏幕上。为了方便起见，这些着色器存储在 <a href=\"/zh-CN/docs/Web/HTML/Element/script\"><code>&lt;script&gt;</code></a> 元素之中，该元素通过自定义函数 <code>MDN.createWebGLProgramFromIds()</code> 引入程序中。这个方法是为这些教程编写的 <a href=\"https://github.com/TatumCreative/mdn-webgl\" class=\"external\" rel=\" noopener\">实用函数</a> 集合的一部分，此处不再赘述。此函数用于处理获取一些 GLSL 源代码并将其编译为 WebGL 程序的基础操作。该函数具有三个参数 - 用于渲染程序的上下文，包含顶点着色器的 <a href=\"/zh-CN/docs/Web/HTML/Element/script\"><code>&lt;script&gt;</code></a> 元素的 ID 和包含片段着色器的 <a href=\"/zh-CN/docs/Web/HTML/Element/script\"><code>&lt;script&gt;</code></a> 元素的 ID。顶点着色器放置顶点，片段着色器为每个像素着色。</p>\n<p>首先看一下将在屏幕上移动顶点的顶点着色器：</p>\n<div class=\"code-example\"><pre class=\"brush: glsl notranslate\"><code><span class=\"token comment\">// 一个顶点位置</span>\n<span class=\"token keyword\">attribute</span> <span class=\"token keyword\">vec3</span> position<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// gl_Position 是顶点着色器对其修改后在裁剪空间的最终位置</span>\n  gl_Position <span class=\"token operator\">=</span> <span class=\"token keyword\">vec4</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>接下来，要实际将数据栅格化为像素，片段着色器将在每个像素的基础上计算评估一切，设置一个单一颜色。GPU 为需要渲染的每个像素调用着色器方法。着色器的工作是返回要用于该像素的颜色。</p>\n<div class=\"code-example\"><pre class=\"brush: glsl notranslate\"><code><span class=\"token keyword\">precision</span> <span class=\"token keyword\">mediump</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">uniform</span> <span class=\"token keyword\">vec4</span> color<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  gl_FragColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>有了这些设置，是时候使用裁剪空间坐标直接绘制到屏幕了。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> box <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebGLBox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>首先在中间画一个红色框。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>box<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token literal-property property\">top</span>    <span class=\"token operator\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\">// x</span>\n  <span class=\"token literal-property property\">bottom</span> <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">// x</span>\n  <span class=\"token literal-property property\">left</span>   <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">// y</span>\n  <span class=\"token literal-property property\">right</span>  <span class=\"token operator\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\">// y</span>\n\n  <span class=\"token literal-property property\">depth</span>  <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>               <span class=\"token comment\">// z</span>\n  <span class=\"token literal-property property\">color</span>  <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// red</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>接下来，在上面的红色框的后面绘制一个绿色框。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>box<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token literal-property property\">top</span>    <span class=\"token operator\">:</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\">// x</span>\n  <span class=\"token literal-property property\">bottom</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>               <span class=\"token comment\">// x</span>\n  <span class=\"token literal-property property\">left</span>   <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">// y</span>\n  <span class=\"token literal-property property\">right</span>  <span class=\"token operator\">:</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\">// y</span>\n\n  <span class=\"token literal-property property\">depth</span>  <span class=\"token operator\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\">// z</span>\n  <span class=\"token literal-property property\">color</span>  <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// green</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>最后，为了演示裁剪实际上发生了，这个框没有被绘制，因为它完全在裁剪空间之外，深度超出 -1.0 到 1.0 的范围。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>box<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token literal-property property\">top</span>    <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>               <span class=\"token comment\">// x</span>\n  <span class=\"token literal-property property\">bottom</span> <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">// x</span>\n  <span class=\"token literal-property property\">left</span>   <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">// y</span>\n  <span class=\"token literal-property property\">right</span>  <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>               <span class=\"token comment\">// y</span>\n\n  <span class=\"token literal-property property\">depth</span>  <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">// z</span>\n  <span class=\"token literal-property property\">color</span>  <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// blue</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"结果\">结果</h4>\n<p><a href=\"https://jsfiddle.net/2x03hdc8\" class=\"external\" rel=\" noopener\">在 JSFiddle 中查看</a></p>\n<p>\n  <img src=\"/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection/part1.png\" alt=\"The results of drawing to clip space using WebGL.\" width=\"800\" height=\"530\" loading=\"lazy\">\n</p>\n<h4 id=\"练习\">练习</h4>\n<p>在这一点上一个有用的练习是通过更改代码来使框在裁剪空间中移动，感受点是如何在裁剪空间中被剪切和移动的。尝试画一张有背景的方形笑脸。</p>"}},{"type":"prose","value":{"id":"齐次坐标","title":"齐次坐标","isH3":false,"content":"<p>之前的裁剪空间顶点着色器主要包含以下代码：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>gl_Position <span class=\"token operator\">=</span> <span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>位置变量是在 <code>draw()</code> 方法中定义的，并作为 attribute 传递给着色器。这是一个三维点，但最终通过管线传递的 <code>gl_Position</code> 变量实际上是四维的 - 是 <code>(x,y,z,w)</code> 而不是 <code>(x,y,z)</code> 。 <code>z</code> 后面没有字母了，因此习惯上将第四维标记为 <code>w</code>。在上面的示例中， <code>w</code> 坐标设置为 1.0。</p>\n<p>显而易见的问题是：“为什么要增加维度？”。事实证明，这种增加允许使用许多不错的技术来处理 3D 数据。这个增加的维度将透视的概念引入坐标系中。将其放置在适当的位置后，我们可以将 3D 坐标映射到 2D 空间中，从而允许两条平行线当它们延伸到远方时相交。 <code>w</code> 的值被用作该坐标的其他分量放除数，因此 <code>x</code>, <code>y</code> 和 <code>z</code> 的真实值被计算为 <code>x/w</code> , <code>y/w</code> 和 <code>z/w</code>（然后 <code>w</code> 也 <code>w/w</code> , 变成 1）。</p>\n<p>三维点定义在典型的笛卡尔坐标系中。增加的第四维将这一点变为 <a href=\"https://zh.wikipedia.org/wiki/homogeneous_coordinates\" class=\"external\" rel=\" noopener\">齐次坐标</a> 。它仍然代表 3D 空间中的一个点，并且可以通过一对简单的函数轻松地演示如何构造这种类型的坐标。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">cartesianToHomogeneous</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> point<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> point<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> z <span class=\"token operator\">=</span> point<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">homogeneousToCartesian</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">point</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> point<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> point<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> z <span class=\"token operator\">=</span> point<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> w <span class=\"token operator\">=</span> point<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>x<span class=\"token operator\">/</span>w<span class=\"token punctuation\">,</span> y<span class=\"token operator\">/</span>w<span class=\"token punctuation\">,</span> z<span class=\"token operator\">/</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>正如前面提到的和上面展示的函数，w 分量将和 x, y 和 z 相除。当 w 分量为非零实数时，齐次坐标很容易转换回笛卡尔空间中。现在，如果 w 分量为零会发生什么？在 JavaScript 中，返回值如下：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">homogeneousToCartesian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>计算结果为： <code>[Infinity, Infinity, Infinity]</code>.</p>\n<p>该齐次坐标表示无穷大的某个点。这是一种方便的方式表示从原点向特定方向发射的射线。除了射线，还可以将其视为方向矢量的表示。如果将此齐次坐标和带有平移的矩阵相乘，则该平移将被有效地消去了。</p>\n<p>当计算机上的数字非常大（或非常小）时，它们的精确度将越来越低，因为仅用这么多的“1”和“0”来表示它们。对较大的数字执行的操作越多，结果中就会积累越来越多的错误。当除以 w 时，这可以通过两个可能更小，更不易出错的数字进行运算来有效地提高非常大的数字的精度。</p>\n<p>使用齐次坐标的最终好处是，它们非常适合与 4x4 矩阵相乘。一个顶点必须至少与矩阵的一个维数（行/列）匹配，才能与其相乘。4x4 矩阵可用于编码各种转换。实际上，典型的透视矩阵使用 w 分量除法来实现其变换。</p>\n<p>实际上，在将齐次坐标转换回笛卡尔坐标之后（通过除以 w），会发生从裁剪空间中裁剪点和多边形的情况。该最终空间称为<strong>归一化设备坐标</strong>或 NDC。</p>\n<p>为了开始使用这个思想，可以修改前面的示例，以允许使用 <code>w</code> 分量。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 重新定义三角形以使用 W 分量</span>\n<span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n\n  <span class=\"token comment\">//Triangle 1</span>\n  settings<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>  settings<span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>depth<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">,</span>\n  settings<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>depth<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">,</span>\n  settings<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>  settings<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">,</span>    settings<span class=\"token punctuation\">.</span>depth<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">//Triangle 2</span>\n  settings<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>  settings<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">,</span>    settings<span class=\"token punctuation\">.</span>depth<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">,</span>\n  settings<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>bottom<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>depth<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">,</span>\n  settings<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">,</span>    settings<span class=\"token punctuation\">.</span>depth<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>w\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>然后，顶点着色器使用传入的 4 维点。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>attribute vec4 position<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  gl_Position <span class=\"token operator\">=</span> position<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>首先，我们在中间绘制一个红色框，但将 W 设置为 0.7。但坐标除以 0.7 时，它们全部会被放大。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>box<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token literal-property property\">top</span>    <span class=\"token operator\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\">// x</span>\n  <span class=\"token literal-property property\">bottom</span> <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">// x</span>\n  <span class=\"token literal-property property\">left</span>   <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">// y</span>\n  <span class=\"token literal-property property\">right</span>  <span class=\"token operator\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\">// y</span>\n  <span class=\"token literal-property property\">w</span>      <span class=\"token operator\">:</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\">// w - 放大这个盒子</span>\n\n  <span class=\"token literal-property property\">depth</span>  <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>               <span class=\"token comment\">// z</span>\n  <span class=\"token literal-property property\">color</span>  <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// red</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>现在，我们在上面绘制一个绿色框，但是通过将 w 分量设置为 1.1 来缩小它。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>box<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token literal-property property\">top</span>    <span class=\"token operator\">:</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\">// x</span>\n  <span class=\"token literal-property property\">bottom</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>               <span class=\"token comment\">// x</span>\n  <span class=\"token literal-property property\">left</span>   <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">// y</span>\n  <span class=\"token literal-property property\">right</span>  <span class=\"token operator\">:</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\">// y</span>\n  <span class=\"token literal-property property\">w</span>      <span class=\"token operator\">:</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\">// w - 缩小这个盒子</span>\n\n  <span class=\"token literal-property property\">depth</span>  <span class=\"token operator\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\">// z</span>\n  <span class=\"token literal-property property\">color</span>  <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// green</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>最后一个框未被绘制，因为它在裁剪空间之外。深度超出 -1.0 到 1.0 范围。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>box<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token literal-property property\">top</span>    <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>               <span class=\"token comment\">// x</span>\n  <span class=\"token literal-property property\">bottom</span> <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">// x</span>\n  <span class=\"token literal-property property\">left</span>   <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">// y</span>\n  <span class=\"token literal-property property\">right</span>  <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>               <span class=\"token comment\">// y</span>\n  <span class=\"token literal-property property\">w</span>      <span class=\"token operator\">:</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\">// w - 把这个盒子带回范围内</span>\n\n  <span class=\"token literal-property property\">depth</span>  <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\">// z</span>\n  <span class=\"token literal-property property\">color</span>  <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// blue</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"结果_2","title":"结果","isH3":true,"content":"<p><a href=\"https://jsfiddle.net/mff99yu\" class=\"external\" rel=\" noopener\">在 JSFiddle 中查看</a></p>"}},{"type":"prose","value":{"id":"sect3","title":"\n  <img src=\"/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection/part2.png\" alt=\"The results of using homogeneous coordinates to move the boxes around in WebGL.\" width=\"800\" height=\"530\" loading=\"lazy\">\n","isH3":true,"content":"","titleAsText":"\n  \n"}},{"type":"prose","value":{"id":"练习_2","title":"练习","isH3":true,"content":"<ul>\n  <li>尝试使用这些值，看看它们如何影响屏幕上渲染的内容。请注意如何通过设置其 w 分量将先前裁剪的蓝色框带回带范围内。</li>\n  <li>尝试创建一个在裁剪空间之外的新框，然后将其除以 w，将其返回裁剪空间。</li>\n</ul>"}},{"type":"prose","value":{"id":"模型转换","title":"模型转换","isH3":false,"content":"<p>将点直接放入裁剪空间的用途有限。在现实世界的应用程序中，你拥有的源坐标不全部在裁剪空间中。因此大多数时候，你需要将模型数据和其他坐标转换到裁剪空间中。简单的立方体就是一个如何执行此操作的简单示例。立方体数据由顶点位置，立方体表面颜色和构成单个多边形的顶点位置的顺序组成（以 3 个顶点为一组，以构成立方体表面的三角形）。这些位置和颜色存储在 GL 缓冲区中，作为属性发到着色器，然后分别进行操作。</p>\n<p>最后，计算并设置单个模型矩阵。该矩阵表示要在组成模型的每个点上执行的转换，以将其移到正确的空间，并在模型中的每个点上执行任何其他所需的转换。这不仅适用于每一个顶点，而且还适用于模型每个表面的每个点。</p>\n<p>在这种情况下，对于动画的每一帧，一系列缩放，旋转和平移矩阵会将数据移动到裁剪空间中所需的位置。这个立方体是裁剪空间 (-1, -1, -1) 到 (1, 1, 1) 的大小，因此需要缩小以不填满整个裁剪空间。该矩阵事先已经在 JavaScript 中进行了乘法运算，直接发到着色器。</p>\n<p>以下代码示例在 <code>CubeDemo</code> 对象上定义了一个创建模型矩阵的方法。它使用了自定义函数来创建和乘以 <a href=\"https://github.com/TatumCreative/mdn-webgl\" class=\"external\" rel=\" noopener\">MDN WebGL</a> 共享代码中定义的矩阵。新的函数如下：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token class-name\">CubeDemo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">computeModelMatrix</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">now</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// 缩小 50%</span>\n  <span class=\"token keyword\">var</span> scale <span class=\"token operator\">=</span> <span class=\"token constant\">MDN</span><span class=\"token punctuation\">.</span><span class=\"token function\">scaleMatrix</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 轻微旋转</span>\n  <span class=\"token keyword\">var</span> rotateX <span class=\"token operator\">=</span> <span class=\"token constant\">MDN</span><span class=\"token punctuation\">.</span><span class=\"token function\">rotateXMatrix</span><span class=\"token punctuation\">(</span>now <span class=\"token operator\">*</span> <span class=\"token number\">0.0003</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 根据时间旋转</span>\n  <span class=\"token keyword\">var</span> rotateY <span class=\"token operator\">=</span> <span class=\"token constant\">MDN</span><span class=\"token punctuation\">.</span><span class=\"token function\">rotateYMatrix</span><span class=\"token punctuation\">(</span>now <span class=\"token operator\">*</span> <span class=\"token number\">0.0005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 稍微向下移动</span>\n  <span class=\"token keyword\">var</span> position <span class=\"token operator\">=</span> <span class=\"token constant\">MDN</span><span class=\"token punctuation\">.</span><span class=\"token function\">translateMatrix</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 相乘，确定以相反的顺序读取它们</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> <span class=\"token constant\">MDN</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiplyArrayOfMatrices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    position<span class=\"token punctuation\">,</span> <span class=\"token comment\">// step 4</span>\n    rotateY<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// step 3</span>\n    rotateX<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// step 2</span>\n    scale     <span class=\"token comment\">// step 1</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>为了在着色器中使用它，必须将其设置在 uniforms 的位置。uniforms 的位置保存在 <code>locations</code> 对象中，如下所示：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>locations<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>webglProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">'model'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>最后，将 uniforms 设置在那个位置，这就把矩阵交给了 GPU。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniformMatrix4fv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>locations<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在着色器中，每个位置顶点首先被转换为齐次坐标（vec4 对象），然后与模型矩阵相乘。</p>\n<div class=\"code-example\"><pre class=\"brush: glsl notranslate\"><code>gl_Position <span class=\"token operator\">=</span> model <span class=\"token operator\">*</span> <span class=\"token keyword\">vec4</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>备注：</strong> 在 JavaScript 中，矩阵乘法需要自定义函数，而在着色器中，它使用了内置在语言中的简单的 * 运算。</p>\n</div>"}},{"type":"prose","value":{"id":"结果_3","title":"结果","isH3":true,"content":"<p><a href=\"https://jsfiddle.net/5jofzgsh\" class=\"external\" rel=\" noopener\">在 JSFiddle 中查看</a></p>\n<p>\n  <img src=\"/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection/part3.png\" alt=\"Using a model matrix\" width=\"800\" height=\"530\" loading=\"lazy\">\n</p>\n<p>此时，变换点的 w 值仍为 1.0。立方体仍然没有什么角度。下一节将进行此设置并修改 w 值以提供一些透视效果。</p>"}},{"type":"prose","value":{"id":"练习_3","title":"练习","isH3":true,"content":"<ul>\n  <li>使用缩放矩阵缩小立方体，并将其放置在裁剪空间中不同位置。</li>\n  <li>尝试将其移到裁剪空间之外。</li>\n  <li>调整窗口大小，然后观察盒子的变形情况。</li>\n  <li>添加一个 <code>rotateZ</code> 。</li>\n</ul>"}},{"type":"prose","value":{"id":"除以_w","title":"除以 W","isH3":false,"content":"<p>一个开始了解立方体模型透视的简单方法是获取 Z 坐标并将其复制到 w 坐标。通常，将笛卡尔点转换为齐次坐标时，它变为 <code>(x,y,z,1)</code> ，但我们将其设置为 <code>(x,y,z,z)</code> 。实际上，我们希望确保视图中的点的 z 值大于 0，因此我们将其值改为 <code>((1.0 + z) * scaleFactor)</code> 对其进行轻微的修改。这将需要一个通常位于裁剪空间（-1 到 1）中的点，并将其移到更像（0 到 1）的空间中，具体取决于比例因子设置为什么。比例因子将最终 w 值更改为总体上更高或更低。</p>\n<p>着色器代码如下：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 首先转换点</span>\nvec4 transformedPosition <span class=\"token operator\">=</span> model <span class=\"token operator\">*</span> <span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 透视有多大的影响？</span>\nfloat scaleFactor <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 通过采用介于-1 到 1 之间的 z 值来设置 w</span>\n<span class=\"token comment\">// 然后进行缩放为 0 到某个数，在这种情况下为 0 到 1</span>\nfloat w <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">+</span> transformedPosition<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> scaleFactor<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 使用自定义 w 分量保存新的 gl_Position</span>\ngl_Position <span class=\"token operator\">=</span> <span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span>transformedPosition<span class=\"token punctuation\">.</span>xyz<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"结果_4","title":"结果","isH3":true,"content":"<p><a href=\"https://jsfiddle.net/vk9r8h2c\" class=\"external\" rel=\" noopener\">在 JSFiddle 中查看</a></p>\n<p>\n  <img src=\"/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection/part4.png\" alt=\"Filling the W component and creating some projection.\" width=\"800\" height=\"531\" loading=\"lazy\">\n</p>\n<p>看到那个深蓝色的小三角形吗？那是添加到对象上的另一个面，因为形状的旋转导致了该角延伸到裁剪空间之外，从而导致该角被裁剪掉。有关如何使用更复杂的矩阵来帮助控制和防止裁剪的介绍，请参照下面的 <a href=\"#perspective_matrix\">Perspective matrix</a>。</p>"}},{"type":"prose","value":{"id":"练习_4","title":"练习","isH3":true,"content":"<p>如果这听起来有点抽象，请打开顶点着色器，然后使用比例因子，观察其如何将顶点向表面进一步收缩。完全更改 w 分量的值，以表示真实空间。</p>\n<p>在下一节中，我们将执行把 Z 值复制到 w 插槽并将其转换为矩阵的步骤。</p>"}},{"type":"prose","value":{"id":"简单投影","title":"简单投影","isH3":false,"content":"<p>填充 w 分量的最后一步实际上可以用一个简单的矩阵完成。从 identity 矩阵开始：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> identity <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">MDN</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiplyPoint</span><span class=\"token punctuation\">(</span>identity<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//&gt; [2, 3, 4, 1]</span>\n</code></pre></div>\n<p>然后将最后一列的 1 向上移动一个空格。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> copyZ <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">MDN</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiplyPoint</span><span class=\"token punctuation\">(</span>copyZ<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//&gt; [2, 3, 4, 4]</span>\n</code></pre></div>\n<p>但是，在最后一个示例中，我们执行了 <code>(z + 1) * scaleFactor</code>:</p>\n<pre class=\"notranslate\">var scaleFactor = 0.5;\n\nvar simpleProjection = [\n  1, 0, 0, 0,\n  0, 1, 0, 0,\n  0, 0, 1, scaleFactor,\n  0, 0, 0, scaleFactor,\n];\n\nMDN.multiplyPoint(simpleProjection, [2, 3, 4, 1]);\n//&gt; [2, 3, 4, 2.5]\n</pre>\n<p>进一步展开我们可以看到它是如何工作的：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> z <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> w <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span> scaleFactor<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> scaleFactor<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>最后一行可以简化为：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>w <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span> scaleFactor<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> scaleFactor<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>然后将 scaleFactor 提取出来，我们得到：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>w <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> scaleFactor\n</code></pre></div>\n<p>这与我们在前面示例中使用的 <code>(z + 1) * scaleFactor</code> 完全相同。</p>\n<p>在 box demo 中，添加了一个额外的 <code>.computeSimpleProjectionMatrix()</code> 方法。在 <code>.draw()</code> 方法中调用，并将比例因子传递给它。结果应该与上一个示例相同：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token class-name\">CubeDemo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">computeSimpleProjectionMatrix</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">scaleFactor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>projection <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> scaleFactor<span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> scaleFactor\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>尽管结果相同，但重要的步骤还是在顶点着色器中。与其直接修改顶点，不如将其乘以一个附加的 <strong><a href=\"#projection_matrix\">projection matrix</a></strong>，该矩阵将 3D 点投影到 2D 绘图表面上：</p>\n<div class=\"code-example\"><pre class=\"brush: glsl notranslate\"><code><span class=\"token comment\">// 确保以相反的顺序读取转换矩阵</span>\ngl_Position <span class=\"token operator\">=</span> projection <span class=\"token operator\">*</span> model <span class=\"token operator\">*</span> <span class=\"token keyword\">vec4</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"结果_5","title":"结果","isH3":true,"content":"<p><a href=\"https://jsfiddle.net/zwyLLcbw\" class=\"external\" rel=\" noopener\">在 JSFiddle 中查看</a></p>\n<p>\n  <img src=\"/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection/part5.png\" alt=\"A simple projection matrix\" width=\"800\" height=\"531\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"透视矩阵","title":"透视矩阵","isH3":false,"content":"<p>至此，我们逐步构建了自己的 3D 渲染设置。但是，我们当前构建的代码存在一些问题。首先，每当我们调整窗口大小时，它就会倾斜。另外是我们的简单投影无法处理场景数据的大范围值。大多数场景在裁剪空间中不起作用。定义与场景相关的距离是很有帮助的，这样在转换数字时不会损失精度。最后，对哪些点放在裁剪空间的内部和外部进行精度控制非常有帮助。在前面的例子中，立方体的角偶尔会被裁剪。</p>\n<p>透视矩阵是一种可以满足这些要求的投影矩阵。也开始涉及数学更多的内容，这些示例中将不做充分解释。简而言之，它结合了除以 w（与前面的例子相同）和基于 <a href=\"https://en.wikipedia.org/wiki/Similarity_%28geometry%29\" class=\"external\" rel=\" noopener\">相似三角形</a> 相似三角形的一些巧妙操作。如果你想阅读有关其背后数学的完整说明，请查看以下一些链接：</p>\n<ul>\n  <li><a href=\"https://www.songho.ca/opengl/gl_projectionmatrix.html\" class=\"external\" rel=\" noopener\">OpenGL 投影矩阵</a></li>\n  <li><a href=\"http://ogldev.atspace.co.uk/www/tutorial12/tutorial12.html\" class=\"external\" rel=\" noopener\">透视投影</a></li>\n  <li><a href=\"https://stackoverflow.com/questions/28286057/trying-to-understand-the-math-behind-the-perspective-matrix-in-webgl/28301213#28301213\" class=\"external\" rel=\" noopener\">尝试了解 WebGL 中透视矩阵背后的数学</a></li>\n</ul>\n<p>关于下面使用的透视矩阵，需要注意的一件重要的事是它会翻转 z 轴。在裁剪空间中，z+ 原理观察者，而使用此矩阵，它朝向观察者。</p>\n<p>翻转 z 轴的原因是，裁剪空间坐标系是左手坐标系（z 轴指向远离观察者并指入屏幕的位置），而数学，物理学和 3D 建模中的惯例与 OpenGL 中视图/眼睛坐标系一样，是使用右手坐标系（z 轴指向屏幕，朝向观察者）。有关的 Wikipedia 文章的更多信息：<a href=\"https://en.wikipedia.org/wiki/Cartesian_coordinate_system#Orientation_and_handedness\" class=\"external\" rel=\" noopener\">直角坐标系</a>, <a href=\"https://en.wikipedia.org/wiki/Right-hand_rule\" class=\"external\" rel=\" noopener\">右手法则</a>。</p>\n<p>让我们看一下 <code>perspectiveMatrix()</code> 函数，该函数计算了透视矩阵。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token constant\">MDN</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">perspectiveMatrix</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fieldOfViewInRadians<span class=\"token punctuation\">,</span> aspectRatio<span class=\"token punctuation\">,</span> near<span class=\"token punctuation\">,</span> far</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">tan</span><span class=\"token punctuation\">(</span>fieldOfViewInRadians <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> rangeInv <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>near <span class=\"token operator\">-</span> far<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    f <span class=\"token operator\">/</span> aspectRatio<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>                          <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>               f<span class=\"token punctuation\">,</span>                          <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>               <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>    <span class=\"token punctuation\">(</span>near <span class=\"token operator\">+</span> far<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> rangeInv<span class=\"token punctuation\">,</span>  <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>               <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  near <span class=\"token operator\">*</span> far <span class=\"token operator\">*</span> rangeInv <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>此函数的四个参数是：</p>\n<dl>\n  <dt id=\"fieldofviewinradians\"><code>fieldOfviewInRadians</code></dt>\n  <dd>\n    <p>一个以弧度表示的角度，指示观看者一层可以看多少场景。数字越大，摄像机可见的越多。边缘的几何形状变得越来越失真，等同于广角镜。当视野更大时，物体通常会变小。当视野较小时，摄像机在场景中的看到的东西会越来越少。物体因透视而变形的程度要小得多，并且物体似乎更靠近相机。</p>\n  </dd>\n  <dt id=\"aspectratio\"><code>aspectRatio</code></dt>\n  <dd>\n    <p>场景的宽高比，等于其宽度除以其高度。在本示例中，就是窗口的宽度除以窗口的高度。此参数的引入最终解决了当画布调整大小和形状时模型的变形问题。</p>\n  </dd>\n  <dt id=\"nearclippingplanedistance\"><code>nearClippingPlaneDistance</code></dt>\n  <dd>\n    <p>一个正数，表示到屏幕的距离是垂直于地板的平面的距离，该距离比将所有内容都裁剪的距离更近。它在裁剪空间中映射为-1，并且不应设置为 0。</p>\n  </dd>\n  <dt id=\"farclippingplanedistance\"><code>farClippingPlaneDistance</code></dt>\n  <dd>\n    <p>\n      一个正数，表示与平面之间的距离，超出该距离将裁剪几何体。它在裁剪空间中映射为 1.该值应保持合理的距离以接近几何图形的距离，以免在渲染时出现精度误差。\n      在最新版本的盒子 demo 中， <code>computeSimpleProjectionMatrix()</code> 函数已替换为 <code>computePerspectiveMatrix()</code> 函数。\n    </p>\n  </dd>\n</dl>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token class-name\">CubeDemo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">computePerspectiveMatrix</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> fieldOfViewInRadians <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> aspectRatio <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>innerWidth <span class=\"token operator\">/</span> window<span class=\"token punctuation\">.</span>innerHeight<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> nearClippingPlaneDistance <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> farClippingPlaneDistance <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>projection <span class=\"token operator\">=</span> <span class=\"token constant\">MDN</span><span class=\"token punctuation\">.</span><span class=\"token function\">perspectiveMatrix</span><span class=\"token punctuation\">(</span>\n    fieldOfViewInRadians<span class=\"token punctuation\">,</span>\n    aspectRatio<span class=\"token punctuation\">,</span>\n    nearClippingPlaneDistance<span class=\"token punctuation\">,</span>\n    farClippingPlaneDistance\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>着色器代码与前面的示例相同：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>gl_Position <span class=\"token operator\">=</span> projection <span class=\"token operator\">*</span> model <span class=\"token operator\">*</span> <span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>此外（未显示），更改了模型的位置和缩放矩阵，以使其脱离裁剪空间并进入更大的坐标系。</p>"}},{"type":"prose","value":{"id":"结果_6","title":"结果","isH3":true,"content":"<p><a href=\"https://jsfiddle.net/Lzxw7e1q\" class=\"external\" rel=\" noopener\">在 JSFiddle 中查看</a></p>\n<p>\n  <img src=\"/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection/part6.png\" alt=\"A true perspective matrix\" width=\"800\" height=\"531\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"练习_5","title":"练习","isH3":true,"content":"<ul>\n  <li>使用透视矩阵和模型矩阵的参数进行体验。</li>\n  <li>将透视矩阵替换为 <a href=\"https://zh.wikipedia.org/wiki/%E6%AD%A3%E4%BA%A4%E7%9F%A9%E9%98%B5\" class=\"external\" rel=\" noopener\">正交矩阵</a>。在 MDN WebGL 共享代码中可以找到 <code>MDN.orthographicMatrix()</code> 替换 <code>CubeDemo.prototype.computePerspectiveMatrix()</code> 中的 <code>MDN.perspectiveMatrix()</code> 函数。</li>\n</ul>"}},{"type":"prose","value":{"id":"视图矩阵","title":"视图矩阵","isH3":false,"content":"<p>尽管某些图形库提供的虚拟相机可以在构成场景时可以定位和指向，但 OpenGL（以及扩展的 WebGL）却没有。这是视图矩阵的用处。它的作用是平移，旋转和缩放场景中的物体，以使根据观察者的位置和方向将它们放置到正确的位置。</p>"}},{"type":"prose","value":{"id":"模拟相机","title":"模拟相机","isH3":true,"content":"<p>这利用了爱因斯坦狭义相对论的基本理论之一：参考系和相对运动的原理说，从观察者的角度来看，你可以通过将相反的变化应用于场景中的物体来模拟改变观察者的位置和方向。无论哪种方式，结果似乎对于观察者是一样的。</p>\n<p>假设一个位于桌子上的盒子和一个放在一米外的桌子上的相机，它指向盒子，盒子的正面指向相机。然后考虑将相机从盒子中移开，直到 2 米远（通过在相机的 Z 值增加 1 米），然后将其向左滑动 10 厘米。盒子与相机的距离缩小了一定量，并向右稍微滑动，从而在相机中看起来较小，左侧的一小部分也暴露在相机前。</p>\n<p>现在，让我们重置场景，将盒子放回它的起始点，使相机距离盒子 2 米，并正对着盒子。但这一次，相机被锁定在桌子上无法移动或旋转。这就是在 WebGL 中运作的样子。那，我们如何模拟在空间中移动的相机？</p>\n<p>我们没有向后和向左移动相机，而是对盒子应用了逆变换：我们将盒子向后移动 1 米，然后向右移动 10 厘米。从两个物体的角度来看，结果是一样的。</p>\n<p><strong>&lt;&lt;&lt; insert image(s) here &gt;&gt;&gt;</strong></p>\n<p>最后一步是创建<strong>视图矩阵</strong>，该矩阵将转换场景中的对象，以便对它们进行定位以模拟相机当前位置与方向。目前的代码可以在世界空间中移动立方体并投影所有内容以获得透视图，但我们仍然无法移动相机。</p>\n<p>想象一下使用物理摄像机拍摄电影。你可以自由地将相机放到任何你想放置的位置，并对准任何你选择的方向。为了在 3D 图形中对此进行仿真，我们使用视图矩阵来模拟物理相机的位置和旋转。</p>\n<p>与直接转换模型顶点的模型矩阵不同，视图矩阵会移动一个抽象的相机。实际上，顶点着色器仍然移动的是模型，而“相机”保持在原位。为了使此计算正确，必须使用变换矩阵的逆。逆矩阵实质上是逆转了变换，因此，如果我们向前移动相机，则逆矩阵会导致场景中的物体向后移动。</p>\n<p>以下的 <code>computeViewMatrix()</code> 函数通过向内和向外，向左和向右移动的视图矩阵来激活视图矩阵。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token class-name\">CubeDemo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">computeViewMatrix</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">now</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> moveInAndOut <span class=\"token operator\">=</span> <span class=\"token number\">20</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>now <span class=\"token operator\">*</span> <span class=\"token number\">0.002</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> moveLeftAndRight <span class=\"token operator\">=</span> <span class=\"token number\">15</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>now <span class=\"token operator\">*</span> <span class=\"token number\">0.0017</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 各个方向移动相机</span>\n  <span class=\"token keyword\">var</span> position <span class=\"token operator\">=</span> <span class=\"token constant\">MDN</span><span class=\"token punctuation\">.</span><span class=\"token function\">translateMatrix</span><span class=\"token punctuation\">(</span>moveLeftAndRight<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span> <span class=\"token operator\">+</span> moveInAndOut <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 相乘，确保以相反的顺序读取它们</span>\n  <span class=\"token keyword\">var</span> matrix <span class=\"token operator\">=</span> <span class=\"token constant\">MDN</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiplyArrayOfMatrices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n\n    <span class=\"token comment\">// 练习：旋转相机的视角</span>\n    position\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 翻转相机的运动操作，因为我们实际上是</span>\n  <span class=\"token comment\">// 移动场景中的几何图形，而不是相机本身</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>view <span class=\"token operator\">=</span> <span class=\"token constant\">MDN</span><span class=\"token punctuation\">.</span><span class=\"token function\">invertMatrix</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>着色器现在使用三个矩阵。</p>\n<div class=\"code-example\"><pre class=\"brush: glsl notranslate\"><code>gl_Position <span class=\"token operator\">=</span> projection <span class=\"token operator\">*</span> view <span class=\"token operator\">*</span> model <span class=\"token operator\">*</span> <span class=\"token keyword\">vec4</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>此步骤后，GPU 管线将裁剪超出范围的顶点，并将模型向下发送到片段着色器以进行栅格化。</p>"}},{"type":"prose","value":{"id":"结果_7","title":"结果","isH3":true,"content":"<p><a href=\"https://jsfiddle.net/86fd797g\" class=\"external\" rel=\" noopener\">在 JSFiddle 中查看</a></p>\n<p>\n  <img src=\"/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection/part7.png\" alt=\"The view matrix\" width=\"800\" height=\"531\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"相关坐标系","title":"相关坐标系","isH3":true,"content":"<p>此时，回顾并标记我们使用的各种坐标系是很有用的。首先，在<strong>模型空间</strong>中定义了立方体的顶点。在场景中移动模型。这些顶点需要通过应用模型矩阵转换到<strong>世界空间</strong>。</p>\n<p>模型空间 → 模型矩阵 → 世界空间</p>\n<p>相机尚未执行任何操作，需要再次移动这些点。目前它们在世界空间中，但需要将它们移动到<strong>视图空间</strong>（使用视图矩阵）以表示相机的位置。</p>\n<p>世界空间 → 视图矩阵 → 视图空间</p>\n<p>最后，需要添加<strong>投影</strong>（在我们的示例中是<strong>透视矩阵</strong>），以便将世界坐标映射到裁剪空间。</p>\n<p>视图空间 → 投影矩阵 → 裁剪空间</p>"}},{"type":"prose","value":{"id":"练习_6","title":"练习","isH3":true,"content":"<ul>\n  <li>在场景中移动相机。</li>\n  <li>向视图矩阵中添加一些旋转矩阵以四处看看。</li>\n  <li>最后，跟踪鼠标的位置。使用 2 个旋转矩阵可以根据用户鼠标在屏幕上的位置上下移动相机。</li>\n</ul>\n<p><strong>参见</strong></p>\n<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/WebGL_API\">WebGL</a></li>\n  <li><a href=\"https://zh.wikipedia.org/wiki/3D_projection\" class=\"external\" rel=\" noopener\">3D projection</a></li>\n</ul>"}}],"toc":[{"text":"模型、视图、投影矩阵","id":"模型、视图、投影矩阵"},{"text":"裁剪空间","id":"裁剪空间"},{"text":"齐次坐标","id":"齐次坐标"},{"text":"模型转换","id":"模型转换"},{"text":"除以 W","id":"除以_w"},{"text":"简单投影","id":"简单投影"},{"text":"透视矩阵","id":"透视矩阵"},{"text":"视图矩阵","id":"视图矩阵"}],"summary":"本文探讨如何在 WebGL 项目中获取数据，并将其投影到适当的空间以在屏幕上显示。 它假定了你具备用于平移，缩放和旋转的基本矩阵数学知识。它解释了组成 3D 场景时通常使用的三个核心矩阵：模型，视图和投影矩阵。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"WebGL model view projection","locale":"en-US","native":"English (US)"},{"title":"WebGL モデル ビュー 射影","locale":"ja","native":"日本語"}],"source":{"folder":"zh-cn/web/api/webgl_api/webgl_model_view_projection","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/webgl_api/webgl_model_view_projection/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/WebGL_API","title":"WebGL"},{"uri":"/zh-CN/docs/Web/API/WebGL_API/WebGL_model_view_projection","title":"WebGL model view projection"}],"pageTitle":"WebGL model view projection - Web API 接口参考 | MDN","noIndexing":false}}