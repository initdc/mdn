{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"使用 Web Speech API","mdn_url":"/zh-CN/docs/Web/API/Web_Speech_API/Using_the_Web_Speech_API","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Web Speech API 提供了两类不同方向的函数——语音识别和语音合成 (也被称为文本转为语音，英语简写是 tts)——开启了有趣的新可用性和控制机制。这篇文章提供了这两个方向的简单介绍，并且都带有例子。</p>"}},{"type":"prose","value":{"id":"speech_recognition","title":"Speech recognition","isH3":false,"content":"<p>Speech recognition(语音识别) 涉及三个过程：首先，需要设备的麦克风接收这段语音；其次，speech recognition service(语音识别服务器) 会根据一系列语法 (基本上，语法是你希望在具体的应用中能够识别出来的词汇) 来检查这段语音；最后，当一个单词或者短语被成功识别后，结果会以文本字符串的形式返回 (结果可以有多个)，以及更多的行为可以设置被触发。</p>\n<p>Web Speech API 有一个主要的控制接口——<a href=\"/zh-CN/docs/Web/API/SpeechRecognition\"><code>SpeechRecognition</code></a>， 外加一些如表示语法、表示结果等等亲密相关的接口。通常，设备都有可使用的默认语音识别系统，大部分现代操作系统使用这个语音识别系统来处理语音命令，比如 Mac OS X 上的 Dictation，iOS 上的 Siri，Win10 上的 Cortana，Android Speech 等等。</p>\n<p>Demo</p>\n<p>为了简单展示 Web speech recognition 的作用，我们写了一个 demo——<a href=\"https://github.com/mdn/web-speech-api/tree/master/speech-color-changer\" class=\"external\" rel=\" noopener\">Speech color changer</a>。点击屏幕之后，说出 HTML 颜色关键字 (网页里罗列的单词就是)，接下来应用的背景颜色就会变成你说的颜色。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Web_Speech_API/Using_the_Web_Speech_API/speech-color-changer.png\" alt=\"The UI of an app titled Speech Color changer. It invites the user to tap the screen and say a color, and then it turns the background of the app that colour. In this case it has turned the background red.\" width=\"300\" height=\"533\" loading=\"lazy\">\n</p>\n<p>为了跑这个 demo，可以 clone Github 仓库 (上面甩出的就是，或者<a href=\"https://github.com/mdn/web-speech-api/archive/master.zip\" class=\"external\" rel=\" noopener\">directly download</a>)，可以在支持的移动端浏览器 (比如 Chrome) 导航到 <a href=\"https://mdn.github.io/web-speech-api/speech-color-changer/\" class=\"external\" rel=\" noopener\">live demo URL</a> 直接观看 (亲测 desktop browser 也是可以的，不过只能是 Chrome)，也可以通过 <a href=\"/zh-CN/docs/Tools/WebIDE\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">WebIDE</a> 作为一个 app 加载到 Firefox OS(Firefox OS 使用 API 的权限问题见下文)。</p>"}},{"type":"prose","value":{"id":"browser_support","title":"Browser support","isH3":true,"content":"<p>对于 Web Speech API speech recognition(语音识别) 的支持，在各浏览器中还不成熟，还在发展，现在主要的限制如下：</p>\n<ul>\n  <li>Firefox 桌面端和移动端在 Gecko 44+ 中都支持，并且是没有前缀的，它可以在<code>about:config</code> 中把 <code>media.webspeech.recognition.enable</code> 设置为 <code>true</code> 打开。权限设置/UI 还没有整理出来，所以权限还不能被用户使用，也就是不能用。不过很快会修复吧~</li>\n  <li>Firefox OS 2.5+ 也支持，但作为一个特权 API(privileged API) 需要权限，因此你需要在<a href=\"/zh-CN/docs/Web/Apps/Build/Manifest\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">manifest.webapp</a> (也可以通过 WebIDE 下载， 或者使应用得到验证后在 <a href=\"https://marketplace.firefox.com/\" class=\"external\" rel=\" noopener\">Firefox Marketplace</a> 可使用) 如下设置：\n    <div class=\"code-example\"><pre class=\"brush: json notranslate\"><code><span class=\"token property\">\"permissions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"audio-capture\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"description\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Audio capture\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"speech-recognition\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"description\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Speech recognition\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n    <div class=\"code-example\"><pre class=\"brush: json notranslate\"><code><span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"privileged\"</span>\n</code></pre></div>\n  </li>\n  <li>Chrome 桌面端和 Android 端自 version 33 以来均支持，但是带有前缀，所以你需要使用带有前缀的版本，比如：<code>webkitSpeechRecognition</code></li>\n</ul>"}},{"type":"prose","value":{"id":"html_和_css","title":"HTML 和 CSS","isH3":true,"content":"<p>对于这个应用来说，HTML 和 CSS 部分是无足轻重的。仅仅只有一个标题，一个介绍段落和一个 div 用来输出 check 的结果。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>Speech color changer<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Tap/click then say a color to change the background color of the app.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>output<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">&gt;</span></span>...diagnostic messages<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>CSS 也只是提供了简单的响应式样式，跨设备看上去也是 ok 的。</p>"}},{"type":"prose","value":{"id":"javascript","title":"JavaScript","isH3":true,"content":"<p>JavaScript 部分会介绍更多细节。</p>\n<h4 id=\"浏览器支持\">浏览器支持</h4>\n<p>之前有说到过，Chrome 现在支持的是带有前缀的 speech recognition，因此在 code 开始部分得加些内容保证在需要前缀的 Chrome 和不需要前缀的像 Firefox 中，使用的 object 都是正确的。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> SpeechRecognition <span class=\"token operator\">=</span> SpeechRecognition <span class=\"token operator\">||</span> webkitSpeechRecognition\n<span class=\"token keyword\">var</span> SpeechGrammarList <span class=\"token operator\">=</span> SpeechGrammarList <span class=\"token operator\">||</span> webkitSpeechGrammarList\n<span class=\"token keyword\">var</span> SpeechRecognitionEvent <span class=\"token operator\">=</span> SpeechRecognitionEvent <span class=\"token operator\">||</span> webkitSpeechRecognitionEvent\n</code></pre></div>\n<h4 id=\"the_grammar\">The grammar</h4>\n<p>这部分是我们的代码定义希望应用能够识别的语法。语法放在下面定义的变量<code>grammar</code>中：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'aqua'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'azure'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'beige'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bisque'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'brown'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chocolate'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'coral'</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> grammar <span class=\"token operator\">=</span> <span class=\"token string\">'#JSGF V1.0; grammar colors; public &lt;color&gt; = '</span> <span class=\"token operator\">+</span> colors<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' | '</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' ;'</span>\n</code></pre></div>\n<p>语法格式使用的是 <a href=\"https://www.w3.org/TR/jsgf/\" class=\"external\" rel=\" noopener\">JSpeech Grammar Format</a> (<strong>JSGF</strong>) ——你可以在前面的链接中了解更多关于语法格式的规范。不过现在，让我们快速地浏览它：</p>\n<ul>\n  <li>每一行用分号分隔，和 js 中一样</li>\n  <li>第一行——<code>#JSGF V1.0</code> ——说的是语法使用的格式和版本。这总是需要首先包括在内</li>\n  <li>第二行表示我们想要识别的<code>term</code> 的类型 (这里就是<code>colors</code>)。<code>public</code> 声明这是一条公共规则，尖括号中的字符串定义需要识别<code>term</code> 的名字 (这里就是<code>color</code>)，等号后面的是这个<code>term</code> 可以被识别和接受的具体值。得注意每一个值如何被一个管道符号分割开的</li>\n  <li>你可以按照上面的结构，在多行中，想定义多少就定义多少<code>terms</code> ，也可以包括相当复杂的语法定义。对于我们这个简单的 demo，就把语法定义的简单些</li>\n</ul>\n<h4 id=\"将_grammer_插入_speech_recognition\">将 grammer 插入 speech recognition</h4>\n<p>接下来是使用 <a href=\"/en-US/docs/Web/API/SpeechRecognition/SpeechRecognition\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechRecognition() (en-US)</a> 构造函数，定义一个 speech recognition 实例，控制对于这个应用的识别。还需要使用 <a href=\"/en-US/docs/Web/API/SpeechGrammarList/SpeechGrammarList\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechGrammarList() (en-US)</a> 构造函数，创立一个 speech grammer list 对象，包含我们的语法。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> recognition <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpeechRecognition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> speechRecognitionList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpeechGrammarList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>使用 <a href=\"/en-US/docs/Web/API/SpeechGrammarList/addFromString\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechGrammarList.addFromString() (en-US)</a> 把语法添加到列表 (list)，这个方法接收两个参数，第一个是我们想要添加的包含语法内容的字符串，第二个是对添加的这条语法的权重 (权重值范围是 0~1)，权重其实是相对于其他语法，这一条语法的重要程度。添加到列表的语法就是可用的，并且是一个<a href=\"/zh-CN/docs/Web/API/SpeechGrammar\"><code>SpeechGrammar</code></a> 实例。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>speechRecognitionList<span class=\"token punctuation\">.</span><span class=\"token function\">addFromString</span><span class=\"token punctuation\">(</span>grammar<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>我们然后通过设置 <a href=\"/en-US/docs/Web/API/SpeechRecognition/grammars\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechRecognition.grammars (en-US)</a> 属性值，把我们的<a href=\"/en-US/docs/Web/API/SpeechGrammarList\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechGrammarList (en-US)</a> 添加到 speech recognition 实例。在继续往前走之前，我们还需要设置 recognition 实例其他的一些属性：</p>\n<ul>\n  <li><a href=\"/en-US/docs/Web/API/SpeechRecognition/lang\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechRecognition.lang (en-US)</a> ：设置识别的是什么语言。这个设定是良好的做好，因此墙裂推荐~</li>\n  <li><a href=\"/en-US/docs/Web/API/SpeechRecognition/interimResults\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechRecognition.interimResults (en-US)</a> ：定义 speech recognition 系统要不要返回临时结果 (interim results)，还是只返回最终结果。对于这个简单 demo，只返回最终结果就够了。</li>\n  <li><a href=\"/en-US/docs/Web/API/SpeechRecognition/maxAlternatives\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechRecognition.maxAlternatives (en-US)</a> ：定义每次结果返回的可能匹配值的数量。这有时有用，比如要的结果不明确，你想要用一个列表展示所有可能值，让用户自己从中选择一个正确的。但这里这个简单 demo 就不用了，因此我们设置为 1(1 也就是默认值)。</li>\n</ul>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>recognition<span class=\"token punctuation\">.</span>grammars <span class=\"token operator\">=</span> speechRecognitionList<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//recognition.continuous = false;</span>\nrecognition<span class=\"token punctuation\">.</span>lang <span class=\"token operator\">=</span> <span class=\"token string\">'en-US'</span><span class=\"token punctuation\">;</span>\nrecognition<span class=\"token punctuation\">.</span>interimResults <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\nrecognition<span class=\"token punctuation\">.</span>maxAlternatives <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> <a href=\"/en-US/docs/Web/API/SpeechRecognition/continuous\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechRecognition.continuous (en-US)</a> 控制的是每一次允许多个结果被捕捉 (比如在这个 demo 中连着说两个颜色关键字，都可以被捕捉)，或者一次只能识别一个结果。代码中它被注释掉的原因是，在 Gecko 中它还不被支持，所以如果把它加进去会破坏这个应用。你可以在收到第一个结果后简单地停止识别，从而得到类似的结果，稍后将会看到。</p>\n</div>\n<h4 id=\"开始语音识别\">开始语音识别</h4>\n<p>在获取输出的<code>&lt;div&gt;</code> 和 html 元素引用之后 (这些我们可以用来待会输出语音识别诊断的结果，更新应用的背景颜色)，我们添加了一个<code>onclick</code> 事件处理，作用是当屏幕被点击后，语音识别服务将开启——这通过调用 <a href=\"/en-US/docs/Web/API/SpeechRecognition/start\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechRecognition.start() (en-US)</a> 实现。<code>forEach()</code> 方法内部的工作是，为每个颜色关键字添加一个这个颜色的背景色，这样就直观知道了这个颜色关键字指向什么颜色。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> diagnostic <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.output'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> bg <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> hints <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.hints'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> colorHTML<span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\ncolors<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  colorHTML <span class=\"token operator\">+=</span> <span class=\"token string\">'&lt;span style=\"background-color:'</span> <span class=\"token operator\">+</span> v <span class=\"token operator\">+</span> <span class=\"token string\">';\"&gt; '</span> <span class=\"token operator\">+</span> v <span class=\"token operator\">+</span> <span class=\"token string\">' &lt;/span&gt;'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhints<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'Tap/click then say a color to change the background color of the app. Try '</span><span class=\"token operator\">+</span> colorHTML <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span>\n\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  recognition<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ready to receive a color command.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"接收、处理结果\">接收、处理结果</h4>\n<p>一旦语音识别开始，有许多 event handlers 可以用于做结果返回的后续操作，除了识别的结果外还有些零碎的相关信息可供操作 (可查看 <a href=\"/zh-CN/docs/Web/API/SpeechRecognition#event_handlers\"><code>SpeechRecognition</code> event handlers list</a> )。最常见会使用的一个是 <a href=\"/en-US/docs/Web/API/SpeechRecognition/result_event\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechRecognition.onresult (en-US)</a> ，这在收到一个成功的结果时候触发。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>recognition<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onresult</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> last <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> color <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>transcript<span class=\"token punctuation\">;</span>\n  diagnostic<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Result received: '</span> <span class=\"token operator\">+</span> color <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span>\n  bg<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Confidence: '</span> <span class=\"token operator\">+</span> event<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>confidence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>代码中第三行看上去有一点复杂，让我们一步一步解释以下。<a href=\"/en-US/docs/Web/API/SpeechRecognitionEvent/results\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechRecognitionEvent.results (en-US)</a> 属性返回的是一个<a href=\"/en-US/docs/Web/API/SpeechRecognitionResultList\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechRecognitionResultList (en-US)</a> 对象 (这个对象会包含<a href=\"/zh-CN/docs/Web/API/SpeechRecognitionResult\"><code>SpeechRecognitionResult</code></a> 对象们)，它有一个 getter，所以它包含的这些对象可以像一个数组被访问到——所以<code>[last]</code> 返回的是排在最后位置 (最新) 的<code>SpeechRecognitionResult</code>对象。每个<code>SpeechRecognitionResult</code> 对象包含的 <a href=\"/en-US/docs/Web/API/SpeechRecognitionAlternative\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechRecognitionAlternative (en-US)</a> 对象含有一个被识别的单词。这些<code>SpeechRecognitionResult</code> 对象也有一个 getter，所以<code>[0]</code> 返回的是其中包含的第一个<a href=\"/en-US/docs/Web/API/SpeechRecognitionAlternative\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechRecognitionAlternative (en-US)</a> 对象。最后返回的<code>transcript</code>属性就是被识别单词的字符串，把背景颜色设置为这个颜色，并在 UI 中报告出这个结果信息。</p>\n<p>也使用了 <a href=\"/en-US/docs/Web/API/SpeechRecognition/speechend_event\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechRecognition.onspeechend (en-US)</a> 这个 handle 停止语音识别服务 (具体工作在<a href=\"/en-US/docs/Web/API/SpeechRecognition/stop\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechRecognition.stop() (en-US)</a>) ，一旦一个单词被识别就不能再说咯 (必须再点击屏幕再次开启语音识别)</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>recognition<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onspeechend</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  recognition<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"处理_error_和未能识别的语音\">处理 error 和未能识别的语音</h4>\n<p>最后两个 handlers 处理的两种情况，一种是你说的内容不在定义的语法中所以识别不了，另一种是出现了 error。</p>\n<p><a href=\"/en-US/docs/Web/API/SpeechRecognition/nomatch_event\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechRecognition.onnomatch (en-US)</a> 支持的就是第一种，但是得注意它似乎在 Firefox 或者 Chrome 中触发会有问题；它只是返回任何被识别的内容：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>recognition<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onnomatch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  diagnostic<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'I didnt recognise that color.'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><a href=\"/en-US/docs/Web/API/SpeechRecognition/error_event\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechRecognition.onerror (en-US)</a> 处理的是第二种情况，识别成功了但是有 error 出现—— <a href=\"/en-US/docs/Web/API/SpeechRecognitionErrorEvent/error\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechRecognitionError.error (en-US)</a> 属性包含的信息就是返回的确切的 error 是什么。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>recognition<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  diagnostic<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Error occurred in recognition: '</span> <span class=\"token operator\">+</span> event<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"speech_synthesis","title":"Speech synthesis","isH3":false,"content":"<p>语音合成 (也被称作是文本转为语音，英语简写是 tts) 包括接收 app 中需要语音合成的文本，再在设备麦克风播放出来这两个过程。</p>\n<p>Web Speech API 对此有一个主要控制接口——<a href=\"/zh-CN/docs/Web/API/SpeechSynthesis\"><code>SpeechSynthesis</code></a> ，外加一些处理如何表示要被合成的文本 (也被称为 utterances)，用什么声音来播出 utterances 等工作的相关接口。同样的，许多操作系统都有自己的某种语音合成系统，在这个任务中我们调用可用的 API 来使用语音合成系统。</p>"}},{"type":"prose","value":{"id":"demo","title":"Demo","isH3":true,"content":"<p>为了展示 Web 语音合成的简单使用，我们提供了一个例子—— <a href=\"https://github.com/mdn/web-speech-api/tree/gh-pages/speak-easy-synthesis\" class=\"external\" rel=\" noopener\">Speak easy synthesis</a> 。例子是一套表单控件，包括输入需要被合成的文本，设置音调、语速和发出文本时需要的语音。在输入文本之后，按下<code>Enter</code>/<code>Return</code>键使它播放。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Web_Speech_API/Using_the_Web_Speech_API/speak-easy-synthesis.png\" alt=\"UI of an app called speak easy synthesis. It has an input field in which to input text to be synthesised, slider controls to change the rate and pitch of the speech, and a drop down menu to choose between different voices.\" width=\"300\" height=\"533\" loading=\"lazy\">\n</p>\n<p>想跑这个例子，你可以 git clone Github 仓库中的部分 (或者<a href=\"https://github.com/mdn/web-speech-api/archive/master.zip\" class=\"external\" rel=\" noopener\">直接下载</a>)，在桌面版支持的浏览器打开 index.html 文件，或者在移动端浏览器直接导向 <a href=\"https://mdn.github.io/web-speech-api/speak-easy-synthesis/\" class=\"external\" rel=\" noopener\">live demo URL</a> ，像 Chrome 和 Firefox OS。</p>"}},{"type":"prose","value":{"id":"浏览器支持_2","title":"浏览器支持","isH3":true,"content":"<p>Web Speech API 语音合成部分在各浏览器中还是在发展，还不成熟，现在有以下几个限制点：</p>\n<ul>\n  <li>Firefox 桌面版和移动版在 Gecko 42+(Windows)/44+ 支持，但是没有前缀，可以通过将<code>media.webspeech.synth.enabled</code>标志在<code>about:config</code>中转为<code>true</code>来启用。</li>\n  <li>Firefox OS 2.5+ 支持，但是默认的，不需要任何权限。</li>\n  <li>Chrome 桌面版和安卓版自 33 版以来都支持，但是没有前缀</li>\n</ul>"}},{"type":"prose","value":{"id":"html_和_css_2","title":"HTML 和 CSS","isH3":true,"content":"<p>HTML 和 CSS 还是无足轻重，只是简单包含一个标题，一段介绍文字，以及一个表格带有一些简单控制功能。<code>&lt;select&gt;</code> 元素初始时空的，之后会用 js 使用<code>&lt;option&gt;</code> 填充。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>Speech synthesiser<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Enter some text in the input below and press return to hear it. change voices using the dropdown menu.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>txt<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Rate<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>range<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">min</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0.5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">max</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">step</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0.1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rate-value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clearfix<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pitch<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Pitch<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>range<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">min</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">max</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">step</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0.1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pitch<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pitch-value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clearfix<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"javascript_2","title":"JavaScript","isH3":true,"content":"<p>让我们看看 js 在这个 app 中的强大表现。</p>\n<h4 id=\"设置变量\">设置变量</h4>\n<p>首先我们获得 UI 中涉及的 DOM 元素的引用，但更有趣的是，我们获得了<a href=\"/en-US/docs/Web/API/Window/speechSynthesis\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Window.speechSynthesis (en-US)</a> 的引用。这是 API 的入口点——它返回了<a href=\"/zh-CN/docs/Web/API/SpeechSynthesis\"><code>SpeechSynthesis</code></a> 的一个实例，对于 web 语音合成的控制接口。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> synth <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>speechSynthesis<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> inputForm <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'form'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> inputTxt <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> voiceSelect <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'select'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> pitch <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#pitch'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> pitchValue <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.pitch-value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> rate <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#rate'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> rateValue <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.rate-value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> voices <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"填充_select_元素\">填充 select 元素</h4>\n<p>为使用设备可使用的不同的语音选项填充<code>&lt;select&gt;</code>元素，我们写了<code>populateVoiceList()</code> 方法。首先调用<a href=\"/zh-CN/docs/Web/API/SpeechSynthesis/getVoices\"><code>SpeechSynthesis.getVoices()</code></a> ，这个函数返回包含所有可用语音 (<a href=\"/en-US/docs/Web/API/SpeechSynthesisVoice\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechSynthesisVoice (en-US)</a>对象) 的列表。接下来循环这个列表，每次创建一个<code>&lt;option&gt;</code> 元素，设置它的文本内容以显示声音的名称（从<code>SpeechSynthesisVoice.name</code>获取），语音的语言（从<code>SpeechSynthesisVoice.lang</code>获取），如果某个语音是合成引擎默认的 (检查<a href=\"/en-US/docs/Web/API/SpeechSynthesisVoice/default\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechSynthesisVoice.default (en-US)</a>属性返回<code>true</code>) 在文本内容后面添加<code>-- DEFAULT</code>。</p>\n<p>对于每个<code>option</code>元素，我们也创建了<code>data-</code> 属性，属性值是语音的名字和语言，这样在之后我们可以轻松获取这个信息。之后把所有的<code>option</code>元素作为孩子添加到<code>select</code> 元素。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">populateVoiceList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  voices <span class=\"token operator\">=</span> synth<span class=\"token punctuation\">.</span><span class=\"token function\">getVoices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> voices<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> option <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'option'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    option<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> voices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' ('</span> <span class=\"token operator\">+</span> voices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lang <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>voices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      option<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">+=</span> <span class=\"token string\">' -- DEFAULT'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    option<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-lang'</span><span class=\"token punctuation\">,</span> voices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    option<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-name'</span><span class=\"token punctuation\">,</span> voices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    voiceSelect<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>接下来是运行这个函数，我们做如下代码工作。因为 Firefox 不支持<a href=\"/en-US/docs/Web/API/SpeechSynthesis/voiceschanged_event\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechSynthesis.onvoiceschanged (en-US)</a> ，所以很常规地只是返回语音对象列表当<a href=\"/zh-CN/docs/Web/API/SpeechSynthesis/getVoices\"><code>SpeechSynthesis.getVoices()</code></a> 被触发。但是 Chrome 就有点不同了，在<code>SpeechSynthesis.getVoices()</code> 被触发时，先要等待事件触发 (有点绕~按照下面代码，<code>populateVoiceList</code> 函数在 Firefox 运行一次，在 Chrome 中运行两次)：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">populateVoiceList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>speechSynthesis<span class=\"token punctuation\">.</span>onvoiceschanged <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  speechSynthesis<span class=\"token punctuation\">.</span>onvoiceschanged <span class=\"token operator\">=</span> populateVoiceList<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"说出输入的文本\">说出输入的文本</h4>\n<p>接下来我们创建一个事件处理器 (handler)，开始说出在文本框中输入的文本。我们把<code>onsubmit</code> 处理器挂在表单上，当<code>Enter/Return</code> 被按下，对应行为就会发生。我们首先通过构造函数创建一个新的<a href=\"/en-US/docs/Web/API/SpeechSynthesisUtterance/SpeechSynthesisUtterance\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechSynthesisUtterance() (en-US)</a> 实例——把文本输入框中的值作为参数传递。</p>\n<p>接下来，我们需要弄清楚使用哪种语音。使用<a href=\"/zh-CN/docs/Web/API/HTMLSelectElement\"><code>HTMLSelectElement</code></a> <code>selectedOptions</code> 属性返回当前选中的 <a href=\"/zh-CN/docs/Web/HTML/Element/option\"><code>&lt;option&gt;</code></a> 元素。然后使用元素的<code>data-name</code>属性，找到 <a href=\"/en-US/docs/Web/API/SpeechSynthesisVoice\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechSynthesisVoice (en-US)</a> 对象的<code>name</code>匹配<code>data-name</code> 的值。把匹配的语音对象设置为<a href=\"/zh-CN/docs/Web/API/SpeechSynthesisUtterance/voice\"><code>SpeechSynthesisUtterance.voice</code></a> 的属性值。</p>\n<p>最后，我们设置 <a href=\"/en-US/docs/Web/API/SpeechSynthesisUtterance/pitch\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechSynthesisUtterance.pitch (en-US)</a> 和<a href=\"/en-US/docs/Web/API/SpeechSynthesisUtterance/rate\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechSynthesisUtterance.rate (en-US)</a> 属性值为对应范围表单元素中的值。哈哈所有准备工作就绪，调用 <a href=\"/en-US/docs/Web/API/SpeechSynthesis/speak\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechSynthesis.speak() (en-US)</a> 开始说话。把 <a href=\"/zh-CN/docs/Web/API/SpeechSynthesisUtterance\"><code>SpeechSynthesisUtterance</code></a> 实例作为参数传递。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>inputForm<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onsubmit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> utterThis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpeechSynthesisUtterance</span><span class=\"token punctuation\">(</span>inputTxt<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> selectedOption <span class=\"token operator\">=</span> voiceSelect<span class=\"token punctuation\">.</span>selectedOptions<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> voices<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>voices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> selectedOption<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      utterThis<span class=\"token punctuation\">.</span>voice <span class=\"token operator\">=</span> voices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  utterThis<span class=\"token punctuation\">.</span>pitch <span class=\"token operator\">=</span> pitch<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  utterThis<span class=\"token punctuation\">.</span>rate <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  synth<span class=\"token punctuation\">.</span><span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>utterThis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在事件处理器的最后部分，我们加入了一个 <a href=\"/en-US/docs/Web/API/SpeechSynthesisUtterance/pause_event\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechSynthesisUtterance.onpause (en-US)</a> 处理器，来展示<a href=\"/en-US/docs/Web/API/SpeechSynthesisEvent\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechSynthesisEvent (en-US)</a> 如何可以很好地使用。当 <a href=\"/en-US/docs/Web/API/SpeechSynthesis/pause\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">SpeechSynthesis.pause() (en-US)</a> 被调用，这将返回一条消息，报告该语音暂停的字符编号和名称。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>   utterThis<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onpause</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> char <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>utterance<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>charIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Speech paused at character '</span> <span class=\"token operator\">+</span> event<span class=\"token punctuation\">.</span>charIndex <span class=\"token operator\">+</span> <span class=\"token string\">' of \"'</span> <span class=\"token operator\">+</span>\n    event<span class=\"token punctuation\">.</span>utterance<span class=\"token punctuation\">.</span>text <span class=\"token operator\">+</span> <span class=\"token string\">'\", which is \"'</span> <span class=\"token operator\">+</span> char <span class=\"token operator\">+</span> <span class=\"token string\">'\".'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>最后，我们在文本输入框添加了 <a href=\"/en-US/docs/Web/API/HTMLElement/blur\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">blur() (en-US)</a> 方法。这主要是在 Firefox 操作系统上隐藏键盘</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  inputTxt<span class=\"token punctuation\">.</span><span class=\"token function\">blur</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"updating_the_displayed_pitch_and_rate_values\">Updating the displayed pitch and rate values</h4>\n<p>代码的最后部分，在每次滑动条移动时，简单地更新<code>pitch/rate</code>在 UI 中展示的值。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>pitch<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onchange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  pitchValue<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> pitch<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nrate<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onchange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  rateValue<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}}],"toc":[{"text":"Speech recognition","id":"speech_recognition"},{"text":"Speech synthesis","id":"speech_synthesis"}],"summary":"Web Speech API 提供了两类不同方向的函数——语音识别和语音合成 (也被称为文本转为语音，英语简写是 tts)——开启了有趣的新可用性和控制机制。这篇文章提供了这两个方向的简单介绍，并且都带有例子。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using the Web Speech API","locale":"en-US","native":"English (US)"},{"title":"Uso de la Web Speech API","locale":"es","native":"Español"},{"title":"Utiliser l'API Web Speech","locale":"fr","native":"Français"},{"title":"Web Speech APIを使う","locale":"ja","native":"日本語"},{"title":"Применение Web Speech API","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/api/web_speech_api/using_the_web_speech_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/web_speech_api/using_the_web_speech_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/Web_Speech_API","title":"Web Speech API"},{"uri":"/zh-CN/docs/Web/API/Web_Speech_API/Using_the_Web_Speech_API","title":"使用 Web Speech API"}],"pageTitle":"使用 Web Speech API - Web API 接口参考 | MDN","noIndexing":false}}