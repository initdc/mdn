{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Blob","mdn_url":"/zh-CN/docs/Web/API/Blob","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/File_API\">File API <small>(en-US)</small></a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/Blob\"><code>Blob</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>构造函数</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Blob/Blob\"><code>Blob()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Blob/size\"><code>size</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Blob/type\"><code>type</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Blob/arrayBuffer\"><code>arrayBuffer()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Blob/slice\"><code>slice()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Blob/stream\"><code>stream()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Blob/text\"><code>text()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>File API 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/File\"><code>File</code></a></li><li><a href=\"/zh-CN/docs/Web/API/FileList\"><code>FileList</code></a></li><li><a href=\"/zh-CN/docs/Web/API/FileReader\"><code>FileReader</code></a></li><li><a href=\"/zh-CN/docs/Web/API/FileReaderSync\"><code>FileReaderSync</code></a></li><li><a href=\"/zh-CN/docs/Web/API/URL/createObjectURL\"><code>URL.createObjectURL()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/URL/revokeObjectURL\"><code>URL.revokeObjectURL()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><code>Blob</code> 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 <a href=\"/zh-CN/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> 来用于数据操作。</p>\n<p>Blob 表示的不一定是 JavaScript 原生格式的数据。<a href=\"/zh-CN/docs/Web/API/File\"><code>File</code></a> 接口基于 <code>Blob</code>，继承了 blob 的功能并将其扩展以支持用户系统上的文件。</p>"}},{"type":"prose","value":{"id":"使用_blob","title":"使用 blob","isH3":false,"content":"<p>要从其它非 blob 对象和数据构造一个 <code>Blob</code>，请使用 <a href=\"/zh-CN/docs/Web/API/Blob/Blob\" title=\"Blob()\"><code>Blob()</code></a> 构造函数。要创建一个 blob 数据的子集 blob，请使用 <a href=\"/zh-CN/docs/Web/API/Blob/slice\" title=\"slice()\"><code>slice()</code></a> 方法。要获取用户文件系统上的文件对应的 <code>Blob</code> 对象，请参阅 <a href=\"/zh-CN/docs/Web/API/File\"><code>File</code></a> 文档。</p>\n<p>接受 <code>Blob</code> 对象的 API 也被列在 <a href=\"/zh-CN/docs/Web/API/File\"><code>File</code></a> 文档中。</p>"}},{"type":"prose","value":{"id":"构造函数","title":"构造函数","isH3":false,"content":"<dl>\n  <dt id=\"blob\"><a href=\"/zh-CN/docs/Web/API/Blob/Blob\" title=\"Blob()\"><code>Blob()</code></a></dt>\n  <dd>\n    <p>返回一个新创建的 <code>Blob</code> 对象，其内容由参数中给定的数组拼接组成。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"实例属性","title":"实例属性","isH3":false,"content":"<dl>\n  <dt id=\"blob.prototype.size\"><a href=\"/zh-CN/docs/Web/API/Blob/size\"><code>Blob.prototype.size</code></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p><code>Blob</code> 对象中所包含数据的大小（字节）。</p>\n  </dd>\n  <dt id=\"blob.prototype.type\"><a href=\"/zh-CN/docs/Web/API/Blob/type\"><code>Blob.prototype.type</code></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>一个字符串，表明该 <code>Blob</code> 对象所包含数据的 MIME 类型。如果类型未知，则该值为空字符串。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"实例方法","title":"实例方法","isH3":false,"content":"<dl>\n  <dt id=\"blob.prototype.arraybuffer\"><a href=\"/zh-CN/docs/Web/API/Blob/arrayBuffer\"><code>Blob.prototype.arrayBuffer()</code></a></dt>\n  <dd>\n    <p>返回一个 promise，其会兑现一个包含 <code>Blob</code> 所有内容的二进制格式的 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>。</p>\n  </dd>\n  <dt id=\"blob.prototype.slice\"><a href=\"/zh-CN/docs/Web/API/Blob/slice\"><code>Blob.prototype.slice()</code></a></dt>\n  <dd>\n    <p>返回一个新的 <code>Blob</code> 对象，包含了源 <code>Blob</code> 对象中指定范围内的数据。</p>\n  </dd>\n  <dt id=\"blob.prototype.stream\"><a href=\"/zh-CN/docs/Web/API/Blob/stream\"><code>Blob.prototype.stream()</code></a></dt>\n  <dd>\n    <p>返回一个能读取 <code>Blob</code> 内容的 <a href=\"/zh-CN/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a>。</p>\n  </dd>\n  <dt id=\"blob.prototype.text\"><a href=\"/zh-CN/docs/Web/API/Blob/text\"><code>Blob.prototype.text()</code></a></dt>\n  <dd>\n    <p>返回一个 promise，其会兑现一个包含 <code>Blob</code> 所有内容的 UTF-8 格式的字符串。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":""}},{"type":"prose","value":{"id":"创建一个_blob","title":"创建一个 blob","isH3":true,"content":"<p><a href=\"/zh-CN/docs/Web/API/Blob/Blob\" title=\"Blob()\"><code>Blob()</code></a> 构造函数可以通过其它对象创建 blob。例如，用一个 JSON 字符串构造一个 blob：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">hello</span><span class=\"token operator\">:</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span> <span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"创建一个指向类型化数组的_url","title":"创建一个指向类型化数组的 URL","isH3":true,"content":"<p>以下代码创建了一个 JavaScript <a href=\"/zh-CN/docs/Web/JavaScript/Typed_arrays\">类型化数组</a>，并创建一个新的，包含类型化数组中的数据的 <code>Blob</code>。然后调用 <a href=\"/zh-CN/docs/Web/API/URL/createObjectURL\"><code>URL.createObjectURL()</code></a> 方法，将 blob 转换为一个 <a href=\"/zh-CN/docs/Glossary/URL\">URL</a>。</p>\n<h4 id=\"html\">HTML</h4>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>此示例创建一个类型化数组，其中包含空格以及 A 到\n  Z 的 ASCII 字符。然后将其转换为一个对象\n  URL。并创建一个打开该对象 URL 的链接。点击这个链接以查看对象\n  URL 解码后的内容。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"javascript\">JavaScript</h4>\n<p>该示例代码片段的主要片段是 <code>typedArrayToURL()</code> 函数，其用于从给定的类型化数组创建一个 <code>Blob</code>，并返回该 <code>Blob</code> 的对象 URL。将数据转换为对象 URL 后，可通过多种方式使用，包括：作为 <a href=\"/zh-CN/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a> 元素 <a href=\"/zh-CN/docs/Web/HTML/Element/img#attr-src\"><code>src</code></a> 属性的值（当然，假设给定的数据包含了一张图片）。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">showViewLiveResultButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>self <span class=\"token operator\">!==</span> window<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 如果当前文档是否在一个 frame 中，则</span>\n    <span class=\"token comment\">// 确保让用户在新的标签页或窗口中打开它。</span>\n    <span class=\"token comment\">// 否则，此示例将无法正常演示。</span>\n    <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    button<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">\"查看上面示例代码的渲染结果\"</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">showViewLiveResultButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">typedArrayToURL</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">typedArray<span class=\"token punctuation\">,</span> mimeType</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>typedArray<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> mimeType<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">59</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">59</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    bytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">32</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token function\">typedArrayToURL</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> link <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  link<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> url<span class=\"token punctuation\">;</span>\n  link<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">'打开这个数组的 URL'</span><span class=\"token punctuation\">;</span>\n\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"结果\">结果</h4><iframe class=\"sample-code-frame\" title=\"创建一个指向类型化数组的 URL sample\" id=\"frame_创建一个指向类型化数组的_url\" width=\"600\" height=\"200\" src=\"https://yari-demos.prod.mdn.mozit.cloud/zh-CN/docs/Web/API/Blob/_sample_.%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%8C%87%E5%90%91%E7%B1%BB%E5%9E%8B%E5%8C%96%E6%95%B0%E7%BB%84%E7%9A%84_url.html\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"从_blob_中提取数据","title":"从 blob 中提取数据","isH3":true,"content":"<p>一种从 <code>Blob</code> 中读取内容的方法是使用 <a href=\"/zh-CN/docs/Web/API/FileReader\"><code>FileReader</code></a>。以下代码将 <code>Blob</code> 的内容作为类型化数组读取：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreader<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadend'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// reader.result 包含被转化为类型化数组的 blob 中的内容</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreader<span class=\"token punctuation\">.</span><span class=\"token function\">readAsArrayBuffer</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>另一种读取 <code>Blob</code> 中内容的方式是使用 <a href=\"/zh-CN/docs/Web/API/Response\"><code>Response</code></a> 对象。下述代码将 <code>Blob</code> 中的内容读取为文本：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>或者，也可以使用 <a href=\"/zh-CN/docs/Web/API/Blob/text\"><code>Blob.prototype.text()</code></a>：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> blob<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>通过使用 <code>FileReader</code> 的其它方法可以把 Blob 读取为字符串或者数据 URL。</p>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/FileAPI/#blob-section","title":"File API"}],"query":"api.Blob"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.Blob","dataURL":"/zh-CN/docs/Web/API/Blob/bcd.json"}},{"type":"prose","value":{"id":"参见","title":"参见","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/FileReader\"><code>FileReader</code></a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/File\"><code>File</code></a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/URL/createObjectURL\"><code>URL.createObjectURL</code></a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/File_API/Using_files_from_web_applications\">在 web 应用程序中使用文件</a></li>\n</ul>"}}],"toc":[{"text":"使用 blob","id":"使用_blob"},{"text":"构造函数","id":"构造函数"},{"text":"实例属性","id":"实例属性"},{"text":"实例方法","id":"实例方法"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"参见","id":"参见"}],"summary":"Blob 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 ReadableStream 来用于数据操作。","popularity":0.005,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Blob","locale":"en-US","native":"English (US)"},{"title":"Blob","locale":"es","native":"Español"},{"title":"Blob","locale":"fr","native":"Français"},{"title":"Blob","locale":"ja","native":"日本語"},{"title":"Blob","locale":"ko","native":"한국어"},{"title":"Blob","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Blob","locale":"ru","native":"Русский"},{"title":"Blob","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/web/api/blob","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/blob/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/Blob","title":"Blob"}],"pageTitle":"Blob - Web API 接口参考 | MDN","noIndexing":false}}