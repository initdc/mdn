{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"AudioNode.connect()","mdn_url":"/zh-CN/docs/Web/API/AudioNode/connect","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Web_Audio_API\">Web Audio API</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/AudioNode\"><code>AudioNode</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioNode/channelCount\"><code>channelCount</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioNode/channelCountMode\"><code>channelCountMode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioNode/channelInterpretation\"><code>channelInterpretation</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioNode/context\"><code>context</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioNode/numberOfInputs\"><code>numberOfInputs</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioNode/numberOfOutputs\"><code>numberOfOutputs</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><em><code>connect()</code></em></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioNode/disconnect\"><code>disconnect()</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>继承</summary><ol><li><a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Web Audio API 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/AnalyserNode\"><code>AnalyserNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioContext\"><code>AudioContext</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioDestinationNode\"><code>AudioDestinationNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioListener\"><code>AudioListener</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioParam\"><code>AudioParam</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioProcessingEvent\"><code>AudioProcessingEvent</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioWorklet\"><code>AudioWorklet</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioWorkletGlobalScope\"><code>AudioWorkletGlobalScope</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a></li><li><a href=\"/zh-CN/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a></li><li><a href=\"/zh-CN/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ChannelMergerNode\"><code>ChannelMergerNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ChannelSplitterNode\"><code>ChannelSplitterNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ConstantSourceNode\"><code>ConstantSourceNode</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/ConvolverNode\"><code>ConvolverNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DelayNode\"><code>DelayNode</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/DynamicsCompressorNode\"><code>DynamicsCompressorNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/GainNode\"><code>GainNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IIRFilterNode\"><code>IIRFilterNode</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStreamAudioDestinationNode\"><code>MediaStreamAudioDestinationNode</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/MediaStreamAudioSourceNode\"><code>MediaStreamAudioSourceNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioCompletionEvent\"><code>OfflineAudioCompletionEvent</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/OfflineAudioContext\"><code>OfflineAudioContext</code></a></li><li><a href=\"/zh-CN/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PannerNode\"><code>PannerNode</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/StereoPannerNode\"><code>StereoPannerNode</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/WaveShaperNode\"><code>WaveShaperNode</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/zh-CN/docs/Web/API/AudioNode\"><code>AudioNode</code></a> 接口的 <code>connect()</code> 方法使你能将一个节点的输出连接到一个指定目标，这个指定的目标可能是另一个 <code>AudioNode</code>（从而将音频数据引导到下一个指定节点）或一个<a href=\"/zh-CN/docs/Web/API/AudioParam\"><code>AudioParam</code></a>, 以便上一个节点的输出数据随着时间流逝能自动地对下一个参数值进行改变。</p>"}},{"type":"prose","value":{"id":"语法","title":"语法","isH3":false,"content":"<pre class=\"notranslate\">var destinationNode = AudioNode.connect(destination, outputIndex, inputIndex);\n\nAudioNode.connect(destination, outputIndex);\n</pre>"}},{"type":"prose","value":{"id":"属性","title":"属性","isH3":true,"content":"<dl>\n  <dt id=\"destination\"><code>destination</code></dt>\n  <dd>\n    <p>需要连接的 <a href=\"/zh-CN/docs/Web/API/AudioNode\"><code>AudioNode</code></a> 或 <a href=\"/zh-CN/docs/Web/API/AudioParam\"><code>AudioParam</code></a>.</p>\n  </dd>\n  <dt id=\"outputindex\"><code>outputIndex</code> <span class=\"badge inline optional\">可选</span></dt>\n  <dd>\n    <p>一个索引，用于描述当前 <code>AudioNode</code> 的哪个输出会连接到 destination。索引数字是由输出频道（详见 <a href=\"/zh-CN/docs/Web/API/Web_Audio_API/Basic_concepts_behind_Web_Audio_API#audio_channels\">Audio channels</a>）的数量来确定的。当你只能将给定的输出连接到给定的输入一次（重复的尝试会被忽略）时，可以通过多次调用 <code>connect()</code> 将一个输出连接到多个输入。可以通过这样来实现扇出。这个参数的默认值为 0。</p>\n  </dd>\n  <dt id=\"inputindex\"><code>inputIndex</code> <span class=\"badge inline optional\">可选</span></dt>\n  <dd>\n    <p>一个索引，用于描述当前 <code>AudioNode</code> 会连接到 destination 的哪个输入，它的默认值是 0。索引数字是由输入频道（详见 <a href=\"/zh-CN/docs/Web/API/Web_Audio_API/Basic_concepts_behind_Web_Audio_API#audio_channels\">Audio channels</a>）的数量来确定的。将一个 <code>AudioNode</code> 连接回之前的 <code>AudioNode</code>，以此形成一个圈是可行的。不过只在这个圈里有至少一个 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DelayNode\"><code>DelayNode</code> <small>(en-US)</small></a> 才可行。否则会抛出一个 <code>NotSupportedError</code> 异常。此参数在 destination 是 <a href=\"/zh-CN/docs/Web/API/AudioParam\"><code>AudioParam</code></a>时不可用。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"返回值","title":"返回值","isH3":true,"content":"<p>如果 destination 是一个节点， <code>connect()</code> 返回 destination 所表示的 <a href=\"/zh-CN/docs/Web/API/AudioNode\"><code>AudioNode</code></a> 对象的引用，允许你链式地调用数个 <code>connect()</code> 。某些浏览器关于该接口的旧实现会返回 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>。</p>\n<p>如果 destination 是一个 <code>AudioParam</code>、<code>connect()</code> 返回 <code>undefined</code>。</p>"}},{"type":"prose","value":{"id":"异常","title":"异常","isH3":true,"content":"<dl>\n  <dt id=\"indexsizeerror\"><code>IndexSizeError</code></dt>\n  <dd>\n    <p>这个异常表明 <code>outputIndex</code> 或 <code>inputIndex</code> 与当前输入或输出不符。</p>\n  </dd>\n  <dt id=\"invalidaccesserror\"><code>InvalidAccessError</code></dt>\n  <dd>\n    <p>目标节点与原节点不在同一个音频上下文。</p>\n  </dd>\n  <dt id=\"notsupportederror\"><code>NotSupportedError</code></dt>\n  <dd>\n    <p>该链接会形成一个闭环（音频在这个环里不断重复经过同一个节点）并且这个闭环里没有 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DelayNode\"><code>DelayNode</code> <small>(en-US)</small></a> 来防止产生的波形被卡住，不停地构建相同的音频帧。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":""}},{"type":"prose","value":{"id":"connecting_to_an_audio_input","title":"Connecting to an audio input","isH3":true,"content":"<p>The most obvious use of the <code>connect()</code> method is to direct the audio output from one node into the audio input of another node for further processing. For example, you might send the audio from a <a href=\"/zh-CN/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code></a>—that is, the audio from an HTML5 media element such as <a href=\"/zh-CN/docs/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a>—through a band pass filter implemented using a <a href=\"/zh-CN/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a> to reduce noise before then sending the audio along to the speakers.</p>\n<p>This example creates an oscillator, then links it to a gain node, so that the gain node controls the volume of the oscillator node.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> AudioContext <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>AudioContext <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>webkitAudioContext<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> audioCtx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> oscillator <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createOscillator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> gainNode <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createGain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\noscillator<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gainNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngainNode<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"audioparam_example","title":"AudioParam example","isH3":true,"content":"<p>In this example, we will be altering the gain value of a <a href=\"/zh-CN/docs/Web/API/GainNode\"><code>GainNode</code></a> using an <a href=\"/zh-CN/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code></a> with a slow frequency value. This technique is know as an <em>LFO</em>-controlled parameter.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> AudioContext <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>AudioContext <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>webkitAudioContext<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> audioCtx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create an normal oscillator to make sound</span>\n<span class=\"token keyword\">var</span> oscillator <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createOscillator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create a second oscillator that will be used as an LFO (Low-frequency</span>\n<span class=\"token comment\">// oscillator), and will control a parameter</span>\n<span class=\"token keyword\">var</span> lfo <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createOscillator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// set the frequency of the second oscillator to a low number</span>\nlfo<span class=\"token punctuation\">.</span>frequency<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2Hz: two oscillations par second</span>\n\n<span class=\"token comment\">// create a gain whose gain AudioParam will be controlled by the LFO</span>\n<span class=\"token keyword\">var</span> gain <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createGain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// connect the LFO to the gain AudioParam. This means the value of the LFO</span>\n<span class=\"token comment\">// will not produce any audio, but will change the value of the gain instead</span>\nlfo<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gain<span class=\"token punctuation\">.</span>gain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// connect the oscillator that will produce audio to the gain</span>\noscillator<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// connect the gain to the destination so we hear sound</span>\ngain<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// start the oscillator that will produce audio</span>\noscillator<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// start the oscillator that will modify the gain value</span>\nlfo<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"audioparam_notes\">AudioParam notes</h4>\n<p>It is possible to connect an <code>AudioNode</code> output to more than one <a href=\"/zh-CN/docs/Web/API/AudioParam\"><code>AudioParam</code></a>, and more than one AudioNode output to a single <a href=\"/zh-CN/docs/Web/API/AudioParam\"><code>AudioParam</code></a>, with multiple calls to <code>connect()</code>. <a href=\"/zh-CN/docs/Web/API/Web_Audio_API/Basic_concepts_behind_Web_Audio_API#fan-in_and_fan-out\">Fan-in and fan-out</a> are therefore supported.</p>\n<p>An <a href=\"/zh-CN/docs/Web/API/AudioParam\"><code>AudioParam</code></a> will take the rendered audio data from any <code>AudioNode</code> output connected to it and convert it to mono by <a href=\"/zh-CN/docs/Web/API/Web_Audio_API/Basic_concepts_behind_Web_Audio_API#up-mixing_and_down-mixing\">down-mixing</a> (if it is not already mono). Next, it will mix it together with any other such outputs, and the intrinsic parameter value (the value the <a href=\"/zh-CN/docs/Web/API/AudioParam\"><code>AudioParam</code></a> would normally have without any audio connections), including any timeline changes scheduled for the parameter.</p>\n<p>Therefore, it is possible to choose the range in which an <a href=\"/zh-CN/docs/Web/API/AudioParam\"><code>AudioParam</code></a> will change by setting the value of the <a href=\"/zh-CN/docs/Web/API/AudioParam\"><code>AudioParam</code></a> to the central frequency, and to use a <a href=\"/zh-CN/docs/Web/API/GainNode\"><code>GainNode</code></a> between the audio source and the <a href=\"/zh-CN/docs/Web/API/AudioParam\"><code>AudioParam</code></a> to adjust the range of the <a href=\"/zh-CN/docs/Web/API/AudioParam\"><code>AudioParam</code></a> changes.</p>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://webaudio.github.io/web-audio-api/#dom-audionode-connect","title":"Web Audio API"},{"bcdSpecificationURL":"https://webaudio.github.io/web-audio-api/#dom-audionode-connect-destinationparam-output","title":"Web Audio API"}],"query":"api.AudioNode.connect"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.AudioNode.connect","dataURL":"/zh-CN/docs/Web/API/AudioNode/connect/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/Web_Audio_API/Using_Web_Audio_API\">Using the Web Audio API</a></li>\n</ul>"}}],"toc":[{"text":"语法","id":"语法"},{"text":"示例","id":"示例"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"AudioNode 接口的 connect() 方法使你能将一个节点的输出连接到一个指定目标，这个指定的目标可能是另一个 AudioNode（从而将音频数据引导到下一个指定节点）或一个AudioParam, 以便上一个节点的输出数据随着时间流逝能自动地对下一个参数值进行改变。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"AudioNode.connect()","locale":"en-US","native":"English (US)"},{"title":"AudioNode.connect()","locale":"ko","native":"한국어"}],"source":{"folder":"zh-cn/web/api/audionode/connect","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/audionode/connect/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/AudioNode","title":"AudioNode"},{"uri":"/zh-CN/docs/Web/API/AudioNode/connect","title":"AudioNode.connect()"}],"pageTitle":"AudioNode.connect() - Web API 接口参考 | MDN","noIndexing":false}}