{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Web Workers API","mdn_url":"/zh-CN/docs/Web/API/Web_Workers_API","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Web_Workers_API\">Web Workers API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>指南</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers\">Using Web Workers</a></li><li><a href=\"/zh-CN/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers\">Functions and classes available to Web Workers</a></li><li><a href=\"/zh-CN/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\">The structured clone algorithm</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>接口</summary><ol><li><a href=\"/zh-CN/docs/Web/API/DedicatedWorkerGlobalScope\"><code>DedicatedWorkerGlobalScope</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ServiceWorker\"><code>ServiceWorker</code></a></li><li><a href=\"/zh-CN/docs/Web/API/SharedWorker\"><code>SharedWorker</code></a></li><li><a href=\"/zh-CN/docs/Web/API/SharedWorkerGlobalScope\"><code>SharedWorkerGlobalScope</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Worker\"><code>Worker</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WorkerGlobalScope\"><code>WorkerGlobalScope</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WorkerLocation\"><code>WorkerLocation</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WorkerNavigator\"><code>WorkerNavigator</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>通过使用 Web Workers，Web 应用程序可以在独立于主线程的后台线程中，运行一个脚本操作。这样做的好处是可以在独立线程中执行费时的处理任务，从而允许主线程（通常是 UI 线程）不会因此被阻塞/放慢。</p>"}},{"type":"prose","value":{"id":"web_workers_概念与用法","title":"Web Workers 概念与用法","isH3":false,"content":"<p>使用构造函数（例如，<a href=\"/zh-CN/docs/Web/API/Worker/Worker\" title=\"Worker()\"><code>Worker()</code></a>）创建一个 <strong>worker</strong> 对象，构造函数接受一个 JavaScript 文件 URL — 这个文件包含了将在 worker 线程中运行的代码。worker 将运行在与当前 <a href=\"/zh-CN/docs/Web/API/Window\"><code>window</code></a>不同的另一个全局上下文中，这个上下文由一个对象表示，标准情况下为<a href=\"/zh-CN/docs/Web/API/DedicatedWorkerGlobalScope\"><code>DedicatedWorkerGlobalScope</code></a> （标准 workers 由单个脚本使用; 共享 workers 使用<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorkerGlobalScope\"><code>SharedWorkerGlobalScope</code> <small>(en-US)</small></a>）。</p>\n<p>你可以在 worker 线程中运行任意的代码，但注意存在一些例外：你不能直接在 worker 线程中操纵 DOM 元素；或使用<a href=\"/zh-CN/docs/Web/API/Window\"><code>window</code></a> 对象中的某些方法和属性。大部分 window 对象的方法和属性是可以使用的，包括 <a href=\"/en-US/docs/Web/API/WebSockets_API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">WebSockets (en-US)</a>，以及诸如 <a href=\"/zh-CN/docs/Web/API/IndexedDB_API\">IndexedDB</a> 和 FireFox OS 中独有的 <a href=\"/zh-CN/docs/Web/API/Data_Store_API\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Data Store API</a> 这一类数据存储机制。更多信息请参见： <a href=\"/en-US/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Functions and classes available to workers (en-US)</a> 。</p>\n<p>主线程和 worker 线程相互之间使用 <code>postMessage()</code> 方法来发送信息，并且通过 <code>onmessage</code> 这个 event handler 来接收信息（传递的信息包含在 <code><a href=\"/zh-CN/docs/Web/Reference/Events/Message\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">Message</a></code> 这个事件的<code>data</code>属性内) 。数据的交互方式为传递副本，而不是直接共享数据。</p>\n<p>worker 可以另外生成新的 worker，这些 worker 与它们父页面的宿主相同。 此外，worker 可以通过 <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> 来访问网络，只不过 <code>XMLHttpRequest</code> 的 <code>responseXML</code> 和 <code>channel</code> 这两个属性的值将总是 <code>null</code> 。</p>\n<p>除了专用 worker 之外，还有一些其他种类的 worker ：</p>\n<ul>\n  <li>Shared Workers 可被不同的窗体的多个脚本运行，例如 IFrames 等，只要这些 workers 处于同一主域。共享 worker 比专用 worker 稍微复杂一点 — 脚本必须通过活动端口进行通讯。详情请见<a href=\"/zh-CN/docs/Web/API/SharedWorker\"><code>SharedWorker</code></a>。</li>\n  <li><a href=\"/zh-CN/docs/Web/API/Service_Worker_API\">Service Workers</a> 一般作为 web 应用程序、浏览器和网络（如果可用）之间的代理服务。他们旨在（除开其他方面）创建有效的离线体验，拦截网络请求，以及根据网络是否可用采取合适的行动，更新驻留在服务器上的资源。他们还将允许访问推送通知和后台同步 API。</li>\n  <li>Chrome Workers 是一种仅适用于 firefox 的 worker。如果您正在开发附加组件，希望在扩展程序中使用 worker 且可以访问 <a href=\"/zh-CN/js-ctypes\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">js-ctypes</a>，那么可以使用 Chrome Workers。详情请见<a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>ChromeWorker</code></a></li>\n  <li>音频 <a href=\"/zh-CN/docs/Web/API/Web_Audio_API#audio_workers\">Workers</a>可以在网络 worker 上下文中直接完成脚本化音频处理。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 根据网络 worker 规范， worker 错误事件不应该冒泡（参见<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1188141\" class=\"external\" rel=\" noopener\">bug&nbsp;1188141</a>）。该规范已在 Firefox 42 中实现。</p>\n</div>"}},{"type":"prose","value":{"id":"web_worker_接口","title":"Web Worker 接口","isH3":false,"content":"<dl>\n  <dt id=\"abstractworker_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Worker\"><code>AbstractWorker</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>抽象属性和方法是所有类型的 worker 中常用的（例如<a href=\"/zh-CN/docs/Web/API/Worker\"><code>Worker</code></a>或 <a href=\"/zh-CN/docs/Web/API/SharedWorker\"><code>SharedWorker</code></a>）</p>\n  </dd>\n  <dt id=\"worker\"><a href=\"/zh-CN/docs/Web/API/Worker\"><code>Worker</code></a></dt>\n  <dd>\n    <p>表示正在运行的 worker 线程，允许你将信息传递到正在运行的 worker 程序代码。</p>\n  </dd>\n  <dt id=\"sharedworker\"><a href=\"/zh-CN/docs/Web/API/SharedWorker\"><code>SharedWorker</code></a></dt>\n  <dd>\n    <p>表示一种可以同时被多个浏览器环境访问的特殊类型的 worker。这些浏览器环境可以是多个 window, iframes 或者甚至是多个 worker.</p>\n  </dd>\n  <dt id=\"workerglobalscope\"><a href=\"/zh-CN/docs/Web/API/WorkerGlobalScope\"><code>WorkerGlobalScope</code></a></dt>\n  <dd>\n    <p>表示任意 worker 的通用作用域（对于正常的网页类容来说与<a href=\"/zh-CN/docs/Web/API/Window\"><code>Window</code></a> 有相同的作用）。不同类型的 worker 都有从接口继承作用于对象，并且可以添加更多特定功能。</p>\n  </dd>\n  <dt id=\"dedicatedworkerglobalscope\"><a href=\"/zh-CN/docs/Web/API/DedicatedWorkerGlobalScope\"><code>DedicatedWorkerGlobalScope</code></a></dt>\n  <dd>\n    <p>表示一个专用 worker 的作用域， 继承自<a href=\"/zh-CN/docs/Web/API/WorkerGlobalScope\"><code>WorkerGlobalScope</code></a>，且可添加一些特有的功能。</p>\n  </dd>\n  <dt id=\"sharedworkerglobalscope_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorkerGlobalScope\"><code>SharedWorkerGlobalScope</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>表示一个共享 worker 的作用域， 继承自<a href=\"/zh-CN/docs/Web/API/WorkerGlobalScope\"><code>WorkerGlobalScope</code></a>， 且可添加一些特有的功能。</p>\n  </dd>\n  <dt id=\"workernavigator_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WorkerNavigator\"><code>WorkerNavigator</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>表示用户代理（客户端）的身份和状态。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<p>我们创建了几个简单的 demos 以演示基本用法：</p>\n<ul>\n  <li><a href=\"https://github.com/mdn/simple-web-worker\" class=\"external\" rel=\" noopener\">基本的 dedicated worker 示例</a> (<a href=\"https://mdn.github.io/simple-web-worker/\" class=\"external\" rel=\" noopener\">运行 dedicated worker</a>).</li>\n  <li><a href=\"https://github.com/mdn/simple-shared-worker\" class=\"external\" rel=\" noopener\">基本的 shared worker 示例</a> (<a href=\"https://mdn.github.io/simple-shared-worker/\" class=\"external\" rel=\" noopener\">运行 shared worker</a>).</li>\n</ul>\n<p>你可以在<a href=\"/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers\">使用 web workers</a>中找到有关这些 demos 是如何工作的更多信息。</p>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://html.spec.whatwg.org/multipage/workers.html#workers","title":"HTML Standard"}],"query":"undefined"}},{"type":"prose","value":{"id":"相关链接","title":"相关链接","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Using Web Workers (en-US)</a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/Worker\">Worker Interface</a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/SharedWorker\">SharedWorker interface</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Service_Worker_API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">ServiceWorker API (en-US)</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Functions and classes available to workers (en-US)</a></li>\n  <li><a href=\"/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Advanced concepts and examples (en-US)</a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/ChromeWorker\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">ChromeWorker</a>: for using workers in privileged/chrome code</li>\n</ul>"}}],"toc":[{"text":"Web Workers 概念与用法","id":"web_workers_概念与用法"},{"text":"Web Worker 接口","id":"web_worker_接口"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"相关链接","id":"相关链接"}],"summary":"通过使用 Web Workers，Web 应用程序可以在独立于主线程的后台线程中，运行一个脚本操作。这样做的好处是可以在独立线程中执行费时的处理任务，从而允许主线程（通常是 UI 线程）不会因此被阻塞/放慢。","popularity":0.0012,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Web Workers API","locale":"en-US","native":"English (US)"},{"title":"Web Workers API","locale":"es","native":"Español"},{"title":"API Web Workers","locale":"fr","native":"Français"},{"title":"ウェブワーカー API","locale":"ja","native":"日本語"},{"title":"Web Workers API","locale":"ko","native":"한국어"},{"title":"Web Workers API","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Web Workers API","locale":"ru","native":"Русский"},{"title":"Web Workers API","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/web/api/web_workers_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/web_workers_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/Web_Workers_API","title":"Web Workers API"}],"pageTitle":"Web Workers API - Web API 接口参考 | MDN","noIndexing":false}}