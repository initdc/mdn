{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"TransformStreamDefaultController","mdn_url":"/zh-CN/docs/Web/API/TransformStreamDefaultController","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/zh-CN/docs/Web/API/Streams_API\">Streams API</a> 的 <strong><code>TransformStreamDefaultController</code></strong> 接口提供了操作关联的 <a href=\"/zh-CN/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> 和 <a href=\"/zh-CN/docs/Web/API/WritableStream\"><code>WritableStream</code></a> 的方法。</p>\n<p>当构造 <a href=\"/zh-CN/docs/Web/API/TransformStream\"><code>TransformStream</code></a> 时，会创建一个 <code>TransformStreamDefaultController</code>。因此它没有构造函数。获取 <code>TransformStreamDefaultController</code> 实例的方式是通过 <a href=\"/zh-CN/docs/Web/API/TransformStream/TransformStream\" title=\"TransformStream()\"><code>TransformStream()</code></a> 的回调方法。</p>"}},{"type":"prose","value":{"id":"属性","title":"属性","isH3":false,"content":"<dl>\n  <dt id=\"transformstreamdefaultcontroller.desiredsize\"><a href=\"/zh-CN/docs/Web/API/TransformStreamDefaultController/desiredSize\"><code>TransformStreamDefaultController.desiredSize</code></a><span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回填充满流内部队列的可读端所需要的大小。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"方法","title":"方法","isH3":false,"content":"<dl>\n  <dt id=\"transformstreamdefaultcontroller.enqueue\"><a href=\"/zh-CN/docs/Web/API/TransformStreamDefaultController/enqueue\"><code>TransformStreamDefaultController.enqueue()</code></a></dt>\n  <dd>\n    <p>排入一个分块（单个数据）到流的可读端。</p>\n  </dd>\n  <dt id=\"transformstreamdefaultcontroller.error\"><a href=\"/zh-CN/docs/Web/API/TransformStreamDefaultController/error\"><code>TransformStreamDefaultController.error()</code></a></dt>\n  <dd>\n    <p>转换流的可写端和可读端都出现错误。</p>\n  </dd>\n  <dt id=\"transformstreamdefaultcontroller.terminate\"><a href=\"/zh-CN/docs/Web/API/TransformStreamDefaultController/terminate\"><code>TransformStreamDefaultController.terminate()</code></a></dt>\n  <dd>\n    <p>关闭流的可读端并且流的可写端出错。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<p>在下面的示例中，一个转换流接收所有的分块将其转换为 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>，使用了 <a href=\"/zh-CN/docs/Web/API/TransformStreamDefaultController/error\" title=\"error()\"><code>error()</code></a> 和 <a href=\"/zh-CN/docs/Web/API/TransformStreamDefaultController/enqueue\" title=\"enqueue()\"><code>enqueue()</code></a> 方法。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> transformContent <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// required.</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk<span class=\"token punctuation\">,</span> controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    chunk <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> chunk\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> chunk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'object'</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">// just say the stream is done I guess</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chunk <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> controller<span class=\"token punctuation\">.</span><span class=\"token function\">terminate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ArrayBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">isView</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">.</span>byteOffset<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">.</span>byteLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> chunk<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'function'</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">typeof</span> chunk<span class=\"token punctuation\">.</span>valueOf <span class=\"token operator\">&amp;&amp;</span> chunk<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> chunk<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> controller<span class=\"token punctuation\">)</span> <span class=\"token comment\">// hack</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'toJSON'</span> <span class=\"token keyword\">in</span> chunk<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> controller<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'symbol'</span><span class=\"token operator\">:</span>\n        controller<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot send a symbol as a chunk part\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'undefined'</span><span class=\"token operator\">:</span>\n        controller<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot send undefined as a chunk part\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>textencoder<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* do any destructor work here */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AnyToU8Stream</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TransformStream</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>transformContent<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">textencoder</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://streams.spec.whatwg.org/#ts-default-controller-class","title":"Streams Standard"}],"query":"api.TransformStreamDefaultController"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.TransformStreamDefaultController","dataURL":"/zh-CN/docs/Web/API/TransformStreamDefaultController/bcd.json"}}],"toc":[{"text":"属性","id":"属性"},{"text":"方法","id":"方法"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"}],"summary":"Streams API 的 TransformStreamDefaultController 接口提供了操作关联的 ReadableStream 和 WritableStream 的方法。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"TransformStreamDefaultController","locale":"en-US","native":"English (US)"}],"source":{"folder":"zh-cn/web/api/transformstreamdefaultcontroller","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/transformstreamdefaultcontroller/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/TransformStreamDefaultController","title":"TransformStreamDefaultController"}],"pageTitle":"TransformStreamDefaultController - Web API 接口参考 | MDN","noIndexing":false}}