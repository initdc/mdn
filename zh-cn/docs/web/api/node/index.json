{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Node","mdn_url":"/zh-CN/docs/Web/API/Node","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Document_Object_Model\">Document Object Model</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/Node\"><code>Node</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Node/baseURI\"><code>baseURI</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/childNodes\"><code>childNodes</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/firstChild\"><code>firstChild</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/isConnected\"><code>isConnected</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/lastChild\"><code>lastChild</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/nextSibling\"><code>nextSibling</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/nodeName\"><code>nodeName</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/nodeType\"><code>nodeType</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/nodeValue\"><code>nodeValue</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/ownerDocument\"><code>ownerDocument</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/parentElement\"><code>parentElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/parentNode\"><code>parentNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/previousSibling\"><code>previousSibling</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/textContent\"><code>textContent</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Node/appendChild\"><code>appendChild()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/cloneNode\"><code>cloneNode()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/compareDocumentPosition\"><code>compareDocumentPosition()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/contains\"><code>contains()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/getRootNode\"><code>getRootNode()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/hasChildNodes\"><code>hasChildNodes()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/insertBefore\"><code>insertBefore()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/isDefaultNamespace\"><code>isDefaultNamespace()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/isEqualNode\"><code>isEqualNode()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/isSameNode\"><code>isSameNode()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/API/Node/isSupported\"><code>isSupported()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/lookupNamespaceURI\"><code>lookupNamespaceURI()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/lookupPrefix\"><code>lookupPrefix()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/normalize\"><code>normalize()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/removeChild\"><code>removeChild()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/replaceChild\"><code>replaceChild()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>事件</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Node/selectstart_event\"><code>selectstart</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>继承</summary><ol><li><a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>DOM 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/AbortController\"><code>AbortController</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AbortSignal\"><code>AbortSignal</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AbstractRange\"><code>AbstractRange</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/Attr\"><code>Attr</code></a></li><li><a href=\"/zh-CN/docs/Web/API/CDATASection\"><code>CDATASection</code></a></li><li><a href=\"/zh-CN/docs/Web/API/CharacterData\"><code>CharacterData</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Comment\"><code>Comment</code></a></li><li><a href=\"/zh-CN/docs/Web/API/CustomEvent\"><code>CustomEvent</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMError\"><code>DOMError</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMException\"><code>DOMException</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMImplementation\"><code>DOMImplementation</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMParser\"><code>DOMParser</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMPoint\"><code>DOMPoint</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DOMPointReadOnly\"><code>DOMPointReadOnly</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMRect\"><code>DOMRect</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMTimeStamp\"><code>DOMTimeStamp</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMTokenList\"><code>DOMTokenList</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Document\"><code>Document</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DocumentFragment\"><code>DocumentFragment</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DocumentType\"><code>DocumentType</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Element\"><code>Element</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Event\"><code>Event</code></a></li><li><a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLCollection\"><code>HTMLCollection</code></a></li><li><a href=\"/zh-CN/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a></li><li><a href=\"/zh-CN/docs/Web/API/NamedNodeMap\"><code>NamedNodeMap</code></a></li><li><a href=\"/zh-CN/docs/Web/API/NodeIterator\"><code>NodeIterator</code></a></li><li><a href=\"/zh-CN/docs/Web/API/NodeList\"><code>NodeList</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ProcessingInstruction\"><code>ProcessingInstruction</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/Range\"><code>Range</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/StaticRange\"><code>StaticRange</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/Text\"><code>Text</code></a></li><li><a href=\"/zh-CN/docs/Web/API/TextDecoder\"><code>TextDecoder</code></a></li><li><a href=\"/zh-CN/docs/Web/API/TextEncoder\"><code>TextEncoder</code></a></li><li><a href=\"/zh-CN/docs/Web/API/TimeRanges\"><code>TimeRanges</code></a></li><li><a href=\"/zh-CN/docs/Web/API/TreeWalker\"><code>TreeWalker</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>Node</code></strong> 是一个接口，各种类型的 DOM API 对象会从这个接口继承。它允许我们使用相似的方式对待这些不同类型的对象；比如，继承同一组方法，或者用同样的方式测试。</p>\n<p>以下接口都从 <code>Node</code> 继承其方法和属性：</p><a href=\"/zh-CN/docs/Web/API/Document\"><code>Document</code></a>, <a href=\"/zh-CN/docs/Web/API/Element\"><code>Element</code></a>, <a href=\"/zh-CN/docs/Web/API/Attr\"><code>Attr</code></a>, <a href=\"/zh-CN/docs/Web/API/CharacterData\"><code>CharacterData</code></a> (which <a href=\"/zh-CN/docs/Web/API/Text\"><code>Text</code></a>, <a href=\"/zh-CN/docs/Web/API/Comment\"><code>Comment</code></a>, and <a href=\"/zh-CN/docs/Web/API/CDATASection\"><code>CDATASection</code></a> inherit), <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ProcessingInstruction\"><code>ProcessingInstruction</code> <small>(en-US)</small></a>, <a href=\"/zh-CN/docs/Web/API/DocumentFragment\"><code>DocumentFragment</code></a>, <a href=\"/zh-CN/docs/Web/API/DocumentType\"><code>DocumentType</code></a>, <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>Notation</code></a>, <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>Entity</code></a>, <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>EntityReference</code></a>\n<p>在方法和属性不相关的特定情况下，这些接口可能返回 <code>null</code>。它们可能会抛出异常 - 例如，当将子节点添加到不允许子节点存在的节点时。</p><svg viewBox=\"-1 -1 650 42\" preserveAspectRatio=\"xMinYMin meet\">\n  <a style=\"text-decoration: none;\" xlink:href=\"/zh-CN/docs/Web/API/EventTarget\">\n    <rect x=\"0\" y=\"0\" width=\"88\" height=\"25\" fill=\"#fff\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"44\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      EventTarget\n    </text>\n  </a>\n  <line x1=\"88\" y1=\"14\" x2=\"118\" y2=\"14\" stroke=\"#D4DDE4\" \"=\"\"></line>\n  <polyline points=\"88,14 98,9 98,19 88,14\" stroke=\"#D4DDE4\" fill=\"#fff\"></polyline>\n  <a style=\"text-decoration: none;\" xlink:href=\"/zh-CN/docs/Web/API/Node\" aria-current=\"page\">\n    <rect x=\"118\" y=\"0\" width=\"75\" height=\"25\" fill=\"#F4F7F8\" stroke=\"#D4DDE4\" stroke-width=\"2px\"></rect>\n    <text x=\"155.5\" y=\"16\" font-size=\"10px\" fill=\"#4D4E53\" text-anchor=\"middle\">\n      Node\n    </text>\n  </a></svg>"}},{"type":"prose","value":{"id":"属性","title":"属性","isH3":false,"content":"<p>从其父类型 <em><a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a></em>[1] 继承属性。</p>\n<dl>\n  <dt id=\"node.baseuri\"><a href=\"/zh-CN/docs/Web/API/Node/baseURI\"><code>Node.baseURI</code></a><span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回一个表示 base URL 的<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>DOMString</code></a>。不同语言中的 base URL 的概念都不一样。在 HTML 中，base URL 表示协议和域名，以及一直到最后一个'/'之前的文件目录。</p>\n  </dd>\n  <dt id=\"node.baseuriobject_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Node\"><code>Node.baseURIObject</code> <small>(en-US)</small></a> <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg></dt>\n  <dd>\n    <p>(不适用于网页内容) 只读的 <code>nsIURI</code> 对象表示元素的 base URI.</p>\n  </dd>\n  <dt id=\"node.childnodes\"><a href=\"/zh-CN/docs/Web/API/Node/childNodes\"><code>Node.childNodes</code></a><span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回一个包含了该节点所有子节点的实时的<a href=\"/zh-CN/docs/Web/API/NodeList\"><code>NodeList</code></a>。<a href=\"/zh-CN/docs/Web/API/NodeList\"><code>NodeList</code></a> 是动态变化的。如果该节点的子节点发生了变化，<a href=\"/zh-CN/docs/Web/API/NodeList\"><code>NodeList</code></a>对象就会自动更新。</p>\n  </dd>\n  <dt id=\"node.firstchild\"><a href=\"/zh-CN/docs/Web/API/Node/firstChild\"><code>Node.firstChild</code></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回该节点的第一个子节点<a href=\"/zh-CN/docs/Web/API/Node\" aria-current=\"page\"><code>Node</code></a>，如果该节点没有子节点则返回<code>null</code>。</p>\n  </dd>\n  <dt id=\"node.isconnected\"><a href=\"/zh-CN/docs/Web/API/Node/isConnected\"><code>Node.isConnected</code></a><span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回一个布尔值用来检测该节点是否已连接 (直接或者间接) 到一个上下文对象上，比如通常 DOM 情况下的<a href=\"/zh-CN/docs/Web/API/Document\"><code>Document</code></a>对象，或者在 shadow DOM 情况下的<a href=\"/zh-CN/docs/Web/API/ShadowRoot\"><code>ShadowRoot</code></a>对象。</p>\n  </dd>\n  <dt id=\"node.lastchild\"><a href=\"/zh-CN/docs/Web/API/Node/lastChild\"><code>Node.lastChild</code></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回该节点的最后一个子节点<a href=\"/zh-CN/docs/Web/API/Node\" aria-current=\"page\"><code>Node</code></a>，如果该节点没有子节点则返回<code>null</code>。</p>\n  </dd>\n  <dt id=\"node.nextsibling\"><a href=\"/zh-CN/docs/Web/API/Node/nextSibling\"><code>Node.nextSibling</code></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回与该节点同级的下一个节点 <a href=\"/zh-CN/docs/Web/API/Node\" aria-current=\"page\"><code>Node</code></a>，如果没有返回<code>null</code>。</p>\n  </dd>\n  <dt id=\"node.nodename\"><a href=\"/zh-CN/docs/Web/API/Node/nodeName\"><code>Node.nodeName</code></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回一个包含该节点名字的<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>DOMString</code></a>。节点的名字的结构和节点类型不同。比如<a href=\"/zh-CN/docs/Web/API/HTMLElement\"><code>HTMLElement</code></a>的名字跟它所关联的标签对应，就比如<a href=\"/zh-CN/docs/Web/API/HTMLAudioElement\"><code>HTMLAudioElement</code></a>的就是 <code>'audio'</code> ，<a href=\"/zh-CN/docs/Web/API/Text\"><code>Text</code></a>节点对应的是 <code>'#text'</code> 还有<a href=\"/zh-CN/docs/Web/API/Document\"><code>Document</code></a>节点对应的是 <code>'#document'</code>。</p>\n  </dd>\n  <dt id=\"node.nodetype\"><a href=\"/zh-CN/docs/Web/API/Node/nodeType\"><code>Node.nodeType</code></a><span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回一个与该节点类型对应的<code>无符号短整型</code>的值，可能的值如下：</p>\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Value</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td><code>ELEMENT_NODE</code></td>\n          <td><code>1</code></td>\n        </tr>\n        <tr>\n          <td><code>ATTRIBUTE_NODE</code> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg></td>\n          <td><code>2</code></td>\n        </tr>\n        <tr>\n          <td><code>TEXT_NODE</code></td>\n          <td><code>3</code></td>\n        </tr>\n        <tr>\n          <td><code>CDATA_SECTION_NODE</code></td>\n          <td><code>4</code></td>\n        </tr>\n        <tr>\n          <td><code>ENTITY_REFERENCE_NODE</code> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg></td>\n          <td><code>5</code></td>\n        </tr>\n        <tr>\n          <td><code>ENTITY_NODE</code> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg></td>\n          <td><code>6</code></td>\n        </tr>\n        <tr>\n          <td><code>PROCESSING_INSTRUCTION_NODE</code></td>\n          <td><code>7</code></td>\n        </tr>\n        <tr>\n          <td><code>COMMENT_NODE</code></td>\n          <td><code>8</code></td>\n        </tr>\n        <tr>\n          <td><code>DOCUMENT_NODE</code></td>\n          <td><code>9</code></td>\n        </tr>\n        <tr>\n          <td><code>DOCUMENT_TYPE_NODE</code></td>\n          <td><code>10</code></td>\n        </tr>\n        <tr>\n          <td><code>DOCUMENT_FRAGMENT_NODE</code></td>\n          <td><code>11</code></td>\n        </tr>\n        <tr>\n          <td><code>NOTATION_NODE</code> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg></td>\n          <td><code>12</code></td>\n        </tr>\n      </tbody>\n    </table>\n  </dd>\n  <dt id=\"node.nodevalue\"><a href=\"/zh-CN/docs/Web/API/Node/nodeValue\"><code>Node.nodeValue</code></a></dt>\n  <dd>\n    <p>返回或设置当前节点的值。</p>\n  </dd>\n  <dt id=\"node.ownerdocument\"><a href=\"/zh-CN/docs/Web/API/Node/ownerDocument\"><code>Node.ownerDocument</code></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回这个元素属于的 <a href=\"/zh-CN/docs/Web/API/Document\"><code>Document</code></a>对象。如果没有 Document 对象与之关联，返回 null。</p>\n  </dd>\n  <dt id=\"node.parentnode\"><a href=\"/zh-CN/docs/Web/API/Node/parentNode\"><code>Node.parentNode</code></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回一个当前节点 <a href=\"/zh-CN/docs/Web/API/Node\" aria-current=\"page\"><code>Node</code></a>的父节点。如果没有这样的节点，比如说像这个节点是树结构的顶端或者没有插入一棵树中，这个属性返回 null。</p>\n  </dd>\n  <dt id=\"node.parentelement\"><a href=\"/zh-CN/docs/Web/API/Node/parentElement\"><code>Node.parentElement</code></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回一个当前节点的父节点 <a href=\"/zh-CN/docs/Web/API/Element\"><code>Element</code></a> 。如果当前节点没有父节点或者说父节点不是一个元素 (<a href=\"/zh-CN/docs/Web/API/Element\"><code>Element</code></a>), 这个属性返回 null。</p>\n  </dd>\n  <dt id=\"node.previoussibling\"><a href=\"/zh-CN/docs/Web/API/Node/previousSibling\"><code>Node.previousSibling</code></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回一个当前节点同辈的前一个节点 ( <a href=\"/zh-CN/docs/Web/API/Node\" aria-current=\"page\"><code>Node</code></a>) ，或者返回 null（如果不存在这样的一个节点的话）。</p>\n  </dd>\n  <dt id=\"node.textcontent\"><a href=\"/zh-CN/docs/Web/API/Node/textContent\"><code>Node.textContent</code></a></dt>\n  <dd>\n    <p>返回或设置一个元素内所有子节点及其后代的文本内容。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"废弃的属性","title":"废弃的属性","isH3":true,"content":"<dl>\n  <dt id=\"node.localname_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Element/localName\"><code>Node.localName</code> <small>(en-US)</small></a> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回一个表示元素名称的本土化表示方法的 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>DOMString</code></a> 。</p>\n    <div class=\"notecard note\" id=\"sect1\">\n      <p><strong>备注：</strong> 在 Firefox 3.5 以及更早的版本中，HTML 元素的 localName 属性的返回值都是大写的（XHTML 例外）。在后续版本中，这种情况就不存在了。无论是 HTML 还是 XHTML 中，均返回小写的 localName。</p>\n    </div>\n  </dd>\n  <dt id=\"node.namespaceuri_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Element/namespaceURI\"><code>Node.namespaceURI</code> <small>(en-US)</small></a> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>该节点命名空间的<code>URL</code>，如果没有命名空间则为<code>null</code>。</p>\n    <div class=\"notecard note\" id=\"sect2\">\n      <p><strong>备注：</strong> 在 Firefox 3.5 以及更早的版本中，HTML 的元素都没有命名空间。而在最新的版本中，无论是 HTML 还是 XML 文档树，所有元素的命名空间统一为 <a href=\"https://www.w3.org/1999/xhtml/\" class=\"external\" rel=\" noopener\"><code>http://www.w3.org/1999/xhtml/</code></a>。</p>\n    </div>\n  </dd>\n  <dt id=\"node.nodeprincipal_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Node\"><code>Node.nodePrincipal</code> <small>(en-US)</small></a> <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg></dt>\n  <dd>\n    <p>返回节点优先级 <code>nsIPrincipal</code> 。</p>\n  </dd>\n  <dt id=\"node.prefix_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Element/prefix\"><code>Node.prefix</code> <small>(en-US)</small></a> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回一个节点命名空间的前缀 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>DOMString</code></a> , 当前缀不存在时返回 <code>null</code> 。</p>\n  </dd>\n  <dt id=\"node.rootnode_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Node/getRootNode\"><code>Node.rootNode</code> <small>(en-US)</small></a> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回一个 DOM 树中顶层节点的 <a href=\"/zh-CN/docs/Web/API/Node\" aria-current=\"page\"><code>Node</code></a> 对象，如果顶层节点不 DOM 树中，则返回当前节点。该属性已被 <a href=\"/zh-CN/docs/Web/API/Node/getRootNode\"><code>Node.getRootNode()</code></a> 方法所代替。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"方法","title":"方法","isH3":false,"content":"<p>从其父类型 <em><a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a></em>[1] 继承方法。</p>\n<dl>\n  <dt id=\"node.appendchild\"><a href=\"/zh-CN/docs/Web/API/Node/appendChild\"><code>Node.appendChild()</code></a></dt>\n  <dd>\n    <p>\n      将指定的 childNode 参数作为最后一个子节点添加到当前节点。\n      如果参数引用了 DOM 树上的现有节点，则节点将从当前位置分离，并附加到新位置。\n    </p>\n  </dd>\n  <dt id=\"node.clonenode\"><a href=\"/zh-CN/docs/Web/API/Node/cloneNode\"><code>Node.cloneNode()</code></a></dt>\n  <dd>\n    <p>克隆一个 <a href=\"/zh-CN/docs/Web/API/Node\" aria-current=\"page\"><code>Node</code></a>，并且可以选择是否克隆这个节点下的所有内容。默认情况下，节点下的内容会被克隆。</p>\n  </dd>\n  <dt id=\"node.comparedocumentposition\"><a href=\"/zh-CN/docs/Web/API/Node/compareDocumentPosition\"><code>Node.compareDocumentPosition()</code></a></dt>\n  <dd>\n    <p>比较当前节点与文档中的另一节点的位置。</p>\n  </dd>\n  <dt id=\"node.contains\"><a href=\"/zh-CN/docs/Web/API/Node/contains\"><code>Node.contains()</code></a></dt>\n  <dd>\n    <p>返回一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> 布尔值，来表示传入的节点是否为该节点的后代节点。</p>\n  </dd>\n  <dt id=\"node.getrootnode\"><a href=\"/zh-CN/docs/Web/API/Node/getRootNode\"><code>Node.getRootNode()</code></a></dt>\n  <dd>\n    <p>返回上下文对象的根节点。如果 shadow root 节点存在的话，也可以在返回的节点中包含它。</p>\n  </dd>\n  <dt id=\"node.haschildnodes\"><a href=\"/zh-CN/docs/Web/API/Node/hasChildNodes\"><code>Node.hasChildNodes()</code></a></dt>\n  <dd>\n    <p>返回一个<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> 布尔值，来表示该元素是否包含有子节点。</p>\n  </dd>\n  <dt id=\"node.insertbefore\"><a href=\"/zh-CN/docs/Web/API/Node/insertBefore\"><code>Node.insertBefore()</code></a></dt>\n  <dd>\n    <p>在当前节点下增加一个子节点 <a href=\"/zh-CN/docs/Web/API/Node\" aria-current=\"page\"><code>Node</code></a>，并使该子节点位于参考节点的前面。</p>\n  </dd>\n  <dt id=\"node.isdefaultnamespace\"><a href=\"/zh-CN/docs/Web/API/Node/isDefaultNamespace\"><code>Node.isDefaultNamespace()</code></a></dt>\n  <dd>\n    <p>返回一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> 类型值。接受一个命名空间 URI 作为参数，当参数所指代的命名空间是默认命名空间时返回 true，否则返回 false。</p>\n  </dd>\n  <dt id=\"node.isequalnode\"><a href=\"/zh-CN/docs/Web/API/Node/isEqualNode\"><code>Node.isEqualNode()</code></a></dt>\n  <dd>\n    <p>返回一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> 类型值。当两个 node 节点为相同类型的节点且定义的数据点匹配时（即属性和属性值相同，节点值相同）返回 true，否则返回 false。</p>\n  </dd>\n  <dt id=\"node.issamenode\"><a href=\"/zh-CN/docs/Web/API/Node/isSameNode\"><code>Node.isSameNode()</code></a></dt>\n  <dd>\n    <p>返回一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> 类型值。返回这两个节点的引用比较结果。</p>\n  </dd>\n  <dt id=\"node.lookupprefix\"><a href=\"/zh-CN/docs/Web/API/Node/lookupPrefix\"><code>Node.lookupPrefix()</code></a></dt>\n  <dd>\n    <p>返回包含参数 URI 所对应的命名空间前缀的 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>DOMString</code></a>，若不存在则返回 null。如果存在多个可匹配的前缀，则返回结果和浏览器具体实现有关。</p>\n  </dd>\n  <dt id=\"node.lookupnamespaceuri\"><a href=\"/zh-CN/docs/Web/API/Node/lookupNamespaceURI\"><code>Node.lookupNamespaceURI()</code></a></dt>\n  <dd>\n    <p>接受一个前缀，并返回前缀所对应节点命名空间 URI。如果 URI 不存在则返回 null。传入 null 作为 prefix 参数将返回默认命名空间。</p>\n  </dd>\n  <dt id=\"node.normalize\"><a href=\"/zh-CN/docs/Web/API/Node/normalize\"><code>Node.normalize()</code></a></dt>\n  <dd>\n    <p>对该元素下的所有文本子节点进行整理，合并相邻的文本节点并清除空文本节点。</p>\n  </dd>\n  <dt id=\"node.removechild\"><a href=\"/zh-CN/docs/Web/API/Node/removeChild\"><code>Node.removeChild()</code></a></dt>\n  <dd>\n    <p>移除当前节点的一个子节点。这个子节点必须存在于当前节点中。</p>\n  </dd>\n  <dt id=\"node.replacechild\"><a href=\"/zh-CN/docs/Web/API/Node/replaceChild\"><code>Node.replaceChild()</code></a></dt>\n  <dd>\n    <p>对选定的节点，替换一个子节点 <a href=\"/zh-CN/docs/Web/API/Node\" aria-current=\"page\"><code>Node</code></a> 为另外一个节点。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"废弃的方法","title":"废弃的方法","isH3":true,"content":"<dl>\n  <dt id=\"node.getfeature\"><a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>Node.getFeature()</code></a> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>Node.getUserData()</code></a> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg></dt>\n  <dd>\n    <p>允许用户从节点的 <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>DOMUserData</code></a> 获得数据。</p>\n  </dd>\n  <dt id=\"node.hasattributes\"><a href=\"/zh-CN/docs/Web/API/Element/hasAttributes\"><code>Node.hasAttributes()</code></a> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg></dt>\n  <dd>\n    <p>返回一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> 指定该元素是否存在某一属性。</p>\n  </dd>\n  <dt id=\"node.issupported\"><a href=\"/zh-CN/docs/Web/API/Node/isSupported\"><code>Node.isSupported()</code></a> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg></dt>\n  <dd>\n    <p>返回一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> 类型值，指定了当前 DOM 实现是否实现了某个规范所规定功能和该功能是否被规范所规定的的节点所支持。</p>\n  </dd>\n  <dt id=\"node.setuserdata\"><a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>Node.setUserData()</code></a> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg></dt>\n  <dd>\n    <p>允许用户在一个节点上设置或移除 <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>DOMUserData</code></a> 。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例子","title":"例子","isH3":false,"content":""}},{"type":"prose","value":{"id":"移除某个节点的所有子节点","title":"移除某个节点的所有子节点","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">removeAllChildren</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    element<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"使用示例\">使用示例</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/* ... an alternative to document.body.innerHTML = \"\" ... */</span>\n<span class=\"token function\">removeAllChildren</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"遍历所有子节点","title":"遍历所有子节点","isH3":true,"content":"<p>下面这个函数使用递归的方式遍历一个节点的所有子节点（包括这个根节点自身）。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">eachNode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rootNode<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> nodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">eachNode</span><span class=\"token punctuation\">(</span>rootNode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      nodes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> nodes<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">===</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>rootNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">hasChildNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> nodes <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">===</span> <span class=\"token function\">eachNode</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"语法\">语法</h4>\n<pre class=\"notranslate\">eachNode(rootNode, callback);\n</pre>\n<h4 id=\"描述\">描述</h4>\n<p>使用递归的方式对 <code>rootNode</code> 的所有后代节点执行回调函数（包括 <code>rootNode</code> 自身）</p>\n<p>如果没有设定 <code>callback</code>，这函数会返回一个<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>，包含 <code>rootNode</code> 和它的所有后代节点。</p>\n<p>如果设定了 <code>callback</code>（回调函数），如果回调函数在调用中返回 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> <code>false</code>，则当前层级的遍历会中止，同时恢复上一层级的遍历。这个可以用来在找到需要的节点之后中断循环（比如用来查找包含指定文本的文本节点）</p>\n<h4 id=\"参数\">参数</h4>\n<dl>\n  <dt id=\"rootnode\"><code>rootNode</code></dt>\n  <dd>\n    <p>需要进行后代节点遍历的 <code>Node</code> 对象。</p>\n  </dd>\n  <dt id=\"callback\"><code>callback</code></dt>\n  <dd>\n    <p>一个可选的回调<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function\">函数</a>，接受一个节点作为唯一参数。如果没有设定， <code>eachNode</code> 返回一个包含了 <code>rootNode</code> 所有后代节点以及 <code>rootNode</code> 自身的<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a></p>\n  </dd>\n</dl>\n<h4 id=\"使用示例_2\">使用示例</h4>\n<p>下述例子会打印出 ID 为 <code>\"box\"</code> 的 <code>&lt;div&gt;</code> 标签内的所有 <code>&lt;span&gt;</code> 标签的 <a href=\"/zh-CN/docs/Web/API/Node/textContent\"><code>textContent</code></a> 属性：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span>Foo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span>Bar<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span>Baz<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> box <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"box\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">eachNode</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> node<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>用户终端上会显示如下字符：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"\\n\\t\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\\t\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bar\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\\t\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Baz\"</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 空格是构成 <a href=\"/zh-CN/docs/Web/API/Text\"><code>Text</code></a>节点的一部分，意味着缩进和换行在 <code>Element</code> 节点之间形成单独的 <code>Text</code> 。</p>\n</div>\n<h4 id=\"真实案例\">真实案例</h4>\n<p>下述例子反应了 <code>eachNode</code> 函数是如何在真实场景中使用的：搜索网页中的文本。我们使用一个包装函数 <code>grep</code> 去执行搜索：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">grep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parentNode<span class=\"token punctuation\">,</span> pattern</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> matches <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> endScan <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">eachNode</span><span class=\"token punctuation\">(</span>parentNode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>endScan<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Ignore anything which isn't a text node</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">!==</span> Node<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXT_NODE</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string\"</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">typeof</span> pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">!==</span> node<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        matches<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pattern<span class=\"token punctuation\">.</span>global<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        endScan <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        matches <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> matches<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> matches<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>例如：找到所有包含错别字的 <a href=\"/zh-CN/docs/Web/API/Text\"><code>Text</code></a>：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> typos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"teh\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"adn\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"btu\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"adress\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"youre\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"msitakes\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> pattern <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\b(\"</span> <span class=\"token operator\">+</span> typos<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"|\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\")\\\\b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"gi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> mistakes <span class=\"token operator\">=</span> <span class=\"token function\">grep</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mistakes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://dom.spec.whatwg.org/#interface-node","title":"DOM Standard"}],"query":"api.Node"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.Node","dataURL":"/zh-CN/docs/Web/API/Node/bcd.json"}}],"toc":[{"text":"属性","id":"属性"},{"text":"方法","id":"方法"},{"text":"例子","id":"例子"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"}],"summary":"Node 是一个接口，各种类型的 DOM API 对象会从这个接口继承。它允许我们使用相似的方式对待这些不同类型的对象；比如，继承同一组方法，或者用同样的方式测试。","popularity":0.0018,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Node","locale":"en-US","native":"English (US)"},{"title":"Node","locale":"es","native":"Español"},{"title":"Node","locale":"fr","native":"Français"},{"title":"Node","locale":"ja","native":"日本語"},{"title":"Node","locale":"ko","native":"한국어"},{"title":"Node","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Node","locale":"ru","native":"Русский"},{"title":"Node","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/web/api/node","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/node/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/Node","title":"Node"}],"pageTitle":"Node - Web API 接口参考 | MDN","noIndexing":false}}