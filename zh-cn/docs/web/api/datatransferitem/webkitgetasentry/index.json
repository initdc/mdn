{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"DataTransferItem.webkitGetAsEntry()","mdn_url":"/zh-CN/docs/Web/API/DataTransferItem/webkitGetAsEntry","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API\">HTML Drag and Drop API</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/DataTransferItem\"><code>DataTransferItem</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a href=\"/zh-CN/docs/Web/API/DataTransferItem/kind\"><code>kind</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DataTransferItem/type\"><code>type</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/DataTransferItem/getAsFile\"><code>getAsFile()</code></a></li><li><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DataTransferItem/getAsFileSystemHandle\"><code>getAsFileSystemHandle()</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/DataTransferItem/getAsString\"><code>getAsString()</code></a></li><li><em><code>webkitGetAsEntry()</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>HTML Drag and Drop API 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/DataTransfer\"><code>DataTransfer</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DataTransferItemList\"><code>DataTransferItemList</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DragEvent\"><code>DragEvent</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard warning\" id=\"sect1\"><p><strong>非标准:</strong> 该特性是非标准的，请尽量不要在生产环境中使用它！</p></div>\n<p>如果由文件描述的项目<a href=\"/zh-CN/docs/Web/API/DataTransferItem\"><code>DataTransferItem</code></a>是文件，则<code>webkitGetAsEntry()</code>返回<a href=\"/zh-CN/docs/Web/API/FileSystemFileEntry\"><code>FileSystemFileEntry</code></a>或<a href=\"/zh-CN/docs/Web/API/FileSystemDirectoryEntry\"><code>FileSystemDirectoryEntry</code></a>表示它。如果该项不是文件，<code>null</code>则返回。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 此功能<code>webkitGetAsEntry()</code>在此时非包含 Firefox 的非 WebKit 浏览器中实现; 它可能会<code>getAsEntry()</code>在以后简单地重命名，所以你应该进行防御性编码，寻找两者。</p>\n</div>"}},{"type":"prose","value":{"id":"语法","title":"<a href=\"/zh-CN/docs/Web/API/DataTransferItem/webkitGetAsEntry#Syntax\" aria-current=\"page\">语法</a>","isH3":false,"content":"<pre class=\"notranslate\">DataTransferItem.webkitGetAsEntry();\n</pre>","titleAsText":"语法"}},{"type":"prose","value":{"id":"参数","title":"参数","isH3":true,"content":"<p>没有。</p>"}},{"type":"prose","value":{"id":"返回值","title":"返回值","isH3":true,"content":"<p><a href=\"/zh-CN/docs/Web/API/FileSystemEntry\"><code>FileSystemEntry</code></a>基于 A 的对象描述被删除的项目。这将是<a href=\"/zh-CN/docs/Web/API/FileSystemFileEntry\"><code>FileSystemFileEntry</code></a>或<a href=\"/zh-CN/docs/Web/API/FileSystemDirectoryEntry\"><code>FileSystemDirectoryEntry</code></a>。</p>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<p>在此示例中，创建了一个放置区域，该放置区域<a href=\"/zh-CN/docs/Web/API/HTMLElement/drop_event\"><code>drop</code></a>通过扫描已删除的文件和目录来响应事件，从而输出分层目录列表。</p>"}},{"type":"prose","value":{"id":"html_内容","title":"HTML 内容","isH3":true,"content":"<p>HTML 建立了放置区本身，它是<a href=\"/zh-CN/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a>具有 ID 的元素<code>\"dropzone\"</code>，以及带有 ID 的无序列表元素<code>\"listing\"</code>。</p>\n<pre class=\"notranslate\">&lt;p&gt;Drag files and/or directories to the box below!&lt;/p&gt;\n\n&lt;div id=\"dropzone\"&gt;\n  &lt;div id=\"boxtitle\"&gt;\n    Drop Files Here\n  &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;h2&gt;Directory tree:&lt;/h2&gt;\n\n&lt;ul id=\"listing\"&gt;\n&lt;/ul&gt;\n</pre>"}},{"type":"prose","value":{"id":"css_内容","title":"CSS 内容","isH3":true,"content":"<p>此处显示示例使用的样式。</p>\n<pre class=\"notranslate\">#dropzone {\n  text-align: center;\n  width: 300px;\n  height: 100px;\n  margin: 10px;\n  padding: 10px;\n  border: 4px dashed red;\n  border-radius: 10px;\n}\n\n#boxtitle {\n  display: table-cell;\n  vertical-align: middle;\n  text-align: center;\n  color: black;\n  font: bold 2em \"Arial\", sans-serif;\n  width: 300px;\n  height: 100px;\n}\n\nbody {\n  font: 14px \"Arial\", sans-serif;\n}\n</pre>"}},{"type":"prose","value":{"id":"javascript_内容","title":"JavaScript 内容","isH3":true,"content":"<p>首先，让我们看一下递归<code>scanFiles()</code>函数。该函数将<a href=\"/zh-CN/docs/Web/API/FileSystemEntry\"><code>FileSystemEntry</code></a>表示要扫描和处理的文件系统中的条目（<code>item</code>参数）和插入内容列表（<code>container</code>参数）的元素作为输入。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 要读取目录中的所有文件，<code>readEntries</code>需要重复调用，直到它返回一个空数组。在基于 Chromium 的浏览器中，以下示例仅返回最多 100 个条目。</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> dropzone <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dropzone\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> listing <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">scanFiles</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> container</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> elem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  elem<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>isDirectory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> directoryReader <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">createReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> directoryContainer <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    container<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>directoryContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    directoryReader<span class=\"token punctuation\">.</span><span class=\"token function\">readEntries</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">scanFiles</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">,</span> directoryContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>scanFiles()</code>首先创建一个新<a href=\"/zh-CN/docs/Web/HTML/Element/li\"><code>&lt;li&gt;</code></a>元素来表示正在扫描的项目，将项目的名称作为文本内容插入其中，然后将其附加到容器中。容器在此示例中始终是列表元素，您很快就会看到。</p>\n<p>一旦当前项目在列表中，<a href=\"/en-US/docs/Web/API/FileSystemEntry/isDirectory\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">isDirectory (en-US)</a>就会检查项目的属性。如果该项目是目录，我们需要递归到该目录。第一步是创建一个<a href=\"/zh-CN/docs/Web/API/FileSystemDirectoryReader\"><code>FileSystemDirectoryReader</code></a>to 来处理获取目录的内容。这是通过调用 item 的<a href=\"/en-US/docs/Web/API/FileSystemDirectoryEntry/createReader\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">createReader() (en-US)</a>方法完成的。然后<a href=\"/zh-CN/docs/Web/HTML/Element/ul\"><code>&lt;ul&gt;</code></a>创建一个 new 并将其附加到父列表; 这将包含列表层次结构中下一级别的目录内容。</p>\n<p>之后，<a href=\"/zh-CN/docs/Web/API/FileSystemDirectoryReader/readEntries\"><code>directoryReader.readEntries()</code></a>调用读取目录中的所有条目。反过来，这些都被传递到递归调用<code>scanFiles()</code>以处理它们。其中任何文件都只是插入到列表中; 将任何目录插入到列表中，并在下面添加列表层次结构的新级别，依此类推。</p>\n<p>然后是事件处理程序。首先，我们阻止<a href=\"/zh-CN/docs/Web/API/HTMLElement/dragover_event\"><code>dragover</code></a>事件由默认处理程序处理，以便我们的 drop 区域可以接收 drop：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>dropzone<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dragover\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>当然，关闭所有事件的事件处理程序是事件的处理程序<a href=\"/zh-CN/docs/Web/API/HTMLElement/drop_event\"><code>drop</code></a>：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>dropzone<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"drop\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> items <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>dataTransfer<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">;</span>\n\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  listing<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">webkitGetAsEntry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">scanFiles</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> listing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这将获取<a href=\"/zh-CN/docs/Web/API/DataTransferItem\"><code>DataTransferItem</code></a>表示从中删除的项目的对象列表<code>event.dataTransfer.items</code>。然后我们打电话<a href=\"/zh-CN/docs/Web/API/Event/preventDefault\"><code>Event.preventDefault()</code></a>来防止事件在完成后被进一步处理。</p>\n<p>现在是时候开始构建列表了。首先，通过设置<a href=\"/zh-CN/docs/Web/API/Element/innerHTML\"><code>listing.innerHTML</code></a>为空来清空列表。这使我们<a href=\"/zh-CN/docs/Web/API/Ul\" class=\"page-not-created\" title=\"This is a link to an unwritten page\"><code>ul</code></a>开始插入目录条目为空。</p>\n<p>然后我们遍历已删除项目列表中的项目。对于每一个，我们调用它的<a href=\"/zh-CN/docs/Web/API/DataTransferItem/webkitGetAsEntry\" aria-current=\"page\"><code>webkitGetAsEntry()</code></a>方法来获得<a href=\"/zh-CN/docs/Web/API/FileSystemEntry\"><code>FileSystemEntry</code></a>表示文件。如果成功，我们会调用<code>scanFiles()</code>处理项目 - 如果它只是一个文件，或者添加它，如果它是一个目录，则将其添加到列表中。</p>"}},{"type":"prose","value":{"id":"结果","title":"结果","isH3":true,"content":"<p>你可以通过下面的尝试看看它是如何工作的。找到一些文件和目录并将其拖入，然后查看生成的输出。</p><iframe class=\"sample-code-frame\" title=\"示例\" id=\"frame_example\" width=\"600\" height=\"400\" src=\"https://yari-demos.prod.mdn.mozit.cloud/zh-CN/docs/Web/API/DataTransferItem/webkitGetAsEntry/_sample_.example.html\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"规范","title":"规范","isH3":false,"content":"<p>此 API 没有官方的 W3C 或 WHATWG 规范。</p>"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.DataTransferItem.webkitGetAsEntry","dataURL":"/zh-CN/docs/Web/API/DataTransferItem/webkitGetAsEntry/bcd.json"}},{"type":"prose","value":{"id":"也可以看看","title":"也可以看看","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/File_and_Directory_Entries_API\">文件和目录条目 API</a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/File_and_Directory_Entries_API/Introduction\">文件系统 API 简介</a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/DataTransferItem\"><code>DataTransferItem</code></a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/FileSystemEntry\"><code>FileSystemEntry</code></a>，<a href=\"/zh-CN/docs/Web/API/FileSystemFileEntry\"><code>FileSystemFileEntry</code></a>和<a href=\"/zh-CN/docs/Web/API/FileSystemDirectoryEntry\"><code>FileSystemDirectoryEntry</code></a></li>\n  <li>活动：<code><a href=\"/en-US/docs/Web/API/HTMLElement/dragover_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">dragover (en-US)</a></code>和<code><a href=\"/en-US/docs/Web/API/HTMLElement/drop_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">drop (en-US)</a></code></li>\n</ul>"}}],"toc":[{"text":"<a href=\"/zh-CN/docs/Web/API/DataTransferItem/webkitGetAsEntry#Syntax\" aria-current=\"page\">语法</a>","id":"语法"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"也可以看看","id":"也可以看看"}],"summary":"如果由文件描述的项目DataTransferItem是文件，则webkitGetAsEntry()返回FileSystemFileEntry或FileSystemDirectoryEntry表示它。如果该项不是文件，null则返回。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"DataTransferItem.webkitGetAsEntry()","locale":"en-US","native":"English (US)"}],"source":{"folder":"zh-cn/web/api/datatransferitem/webkitgetasentry","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/datatransferitem/webkitgetasentry/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/DataTransferItem","title":"DataTransferItem"},{"uri":"/zh-CN/docs/Web/API/DataTransferItem/webkitGetAsEntry","title":"DataTransferItem.webkitGetAsEntry()"}],"pageTitle":"DataTransferItem.webkitGetAsEntry() - Web API 接口参考 | MDN","noIndexing":false}}