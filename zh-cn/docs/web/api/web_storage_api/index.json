{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Web Storage API","mdn_url":"/zh-CN/docs/Web/API/Web_Storage_API","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Web_Storage_API\">Web Storage API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>指南</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API\">Using the Web Storage API</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>接口</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Storage\"><code>Storage</code></a></li><li><a href=\"/zh-CN/docs/Web/API/StorageEvent\"><code>StorageEvent</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Window/sessionStorage\"><code>Window.sessionStorage</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Window/localStorage\"><code>Window.localStorage</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>事件</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Window/storage_event\"><code>Window</code>: <code>storage</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>Web Storage API</strong> 提供机制， 使浏览器能以一种比使用 Cookie 更直观的方式存储键/值对。</p>"}},{"type":"prose","value":{"id":"web_storage_概念和用法","title":"Web Storage 概念和用法","isH3":false,"content":"<p>Web Storage 包含如下两种机制：</p>\n<ul>\n  <li><code>sessionStorage</code> 为每一个给定的源（given origin）维持一个独立的存储区域，该存储区域在页面会话期间可用（即只要浏览器处于打开状态，包括页面重新加载和恢复）。</li>\n  <li><code>localStorage</code> 同样的功能，但是在浏览器关闭，然后重新打开后数据仍然存在。</li>\n</ul>\n<p>这两种机制是通过 <a href=\"/zh-CN/docs/Web/API/Window/sessionStorage\"><code>Window.sessionStorage</code></a> 和 <a href=\"/zh-CN/docs/Web/API/Window/localStorage\"><code>Window.localStorage</code></a> 属性使用（更确切的说，在支持的浏览器中 <code>Window</code> 对象实现了 <code>WindowLocalStorage</code> 和 <code>WindowSessionStorage</code> 对象并挂在其 <code>localStorage</code> 和 <code>sessionStorage</code> 属性下）—— 调用其中任一对象会创建 <a href=\"/zh-CN/docs/Web/API/Storage\"><code>Storage</code></a> 对象，通过 <a href=\"/zh-CN/docs/Web/API/Storage\"><code>Storage</code></a> 对象，可以设置、获取和移除数据项。对于每个源（origin）<code>sessionStorage</code> 和 <code>localStorage</code> 使用不同的 Storage 对象——独立运行和控制。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 从 Firefox 45 开始，当浏览器崩溃或重启时，每个源的存储大小将限制在 10M，以避免因过度使用 web storage 引起的内存问题。</p>\n</div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 若用户<a href=\"https://support.mozilla.org/en-US/kb/disable-third-party-cookies\" class=\"external\" rel=\" noopener\">禁用第三方 cookie</a>，那么将不允许来自第三方 IFrames 对 Web Storage 的访问。（从<a href=\"/zh-CN/docs/Mozilla/Firefox/Releases/43\">Firefox 43</a>版本开始实行）</p>\n</div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 本地存储不同于 mozStorage（Mozilla's XPCOM interfaces to SQLite）或<a href=\"/zh-CN/docs/Session_store_API\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Session store API</a>（an <a href=\"/zh-CN/docs/XPCOM\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">XPCOM</a> storage utility for use by extensions）。</p>\n</div>"}},{"type":"prose","value":{"id":"web_storage_接口","title":"Web Storage 接口","isH3":false,"content":"<dl>\n  <dt id=\"storage\"><a href=\"/zh-CN/docs/Web/API/Storage\"><code>Storage</code></a></dt>\n  <dd>\n    <p>允许你在一个特定域中设置，检索和删除数据和储存类型 (session or local.)</p>\n  </dd>\n  <dt id=\"window\"><a href=\"/zh-CN/docs/Web/API/Window\"><code>Window</code></a></dt>\n  <dd>\n    <p>Web Storage API 继承于<a href=\"/zh-CN/docs/Web/API/Window\"><code>Window</code></a> 对象，并提供两个新属性 — <a href=\"/zh-CN/docs/Web/API/Window/sessionStorage\"><code>Window.sessionStorage</code></a> 和 <a href=\"/zh-CN/docs/Web/API/Window/localStorage\"><code>Window.localStorage</code></a> — 它们分别地提供对当前域的会话和本地<a href=\"/zh-CN/docs/Web/API/Storage\"><code>Storage</code></a> 对象的访问。</p>\n  </dd>\n  <dt id=\"storageevent\"><a href=\"/zh-CN/docs/Web/API/StorageEvent\"><code>StorageEvent</code></a></dt>\n  <dd>\n    <p>当一个存储区更改时，存储事件从文档的 <code>Window</code> 对象上被发布。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例子","title":"例子","isH3":false,"content":"<p>为了阐述一些 典型的 web storage 的用法，我们创了一个简单的例子，想象上地称为 <a href=\"https://github.com/mdn/dom-examples/tree/master/web-storage\" class=\"external\" rel=\" noopener\">Web Storage Demo</a>. <a href=\"https://mdn.github.io/dom-examples/web-storage/\" class=\"external\" rel=\" noopener\">landing page</a> 提供控制器可以用来自定义颜色，字体和装饰图片。 当你选择不同的选项，页面会被立即更新;此外，你的选择被储存到 localStorage 中， 以便当你离开该页面，然后过些时候在重新加载它时，你的选择会被记住。</p>\n<p>另外，我们提供了一个 <a href=\"https://mdn.github.io/dom-examples/web-storage/event.html\" class=\"external\" rel=\" noopener\">event output page</a> — 如果你在另一个标签页加载这个页面，然后在 landing page 改变你的选择，当<code><a href=\"/zh-CN/docs/Web/Reference/Events/StorageEvent\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">StorageEvent</a></code>被发布时，你将会看到被更新的储存信息输出。</p>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"query":"api.Window.localStorage,api.Window.sessionStorage","specifications":[]}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"data":null,"query":"api.Window.localStorage,api.Window.sessionStorage","browsers":null}},{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>不同的浏览器对 localStorage 和 sessionStorage 有不同的容量限制。<a href=\"http://dev-test.nemikor.com/web-storage/support-test/\" class=\"external\" rel=\" noopener\">点此查看各版本浏览器对存储容量的描述详情</a></p>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>备注：</strong> 手机 Safari 从 iOS 5.1 版本开始，将 localStorage 数据到存放到缓存文件夹中，当空间不足时，系统将会时不时地自动清理缓存。</p>\n</div>"}},{"type":"prose","value":{"id":"隐私浏览隐身模式","title":"隐私浏览/隐身模式","isH3":false,"content":"<p>大多数现代浏览器支持称为 'Incognito' 的用户隐私选择，“隐私浏览” 或类似的功能可以不像历史记录和 cookie 那样存储数据。 这明显与 Web Storage 不兼容。因此，浏览器厂商正尝试不同的方式来处理不兼容问题。</p>\n<p>多数浏览器可以选择一种策略使存储的 API 可以使用并且不受限制，最大的不同是存储的数据在浏览器关闭后被清除。这些浏览器对如何处理已经存在的数据（从定期的 session 中获取到的），仍旧持有不同解释。在隐私模式还应该可读吗？然后就有一些浏览器，尤其是 Safari，提供了可选的解决方式：存储可用，但是给其分配 0 字节的存储空间，有效的使其不能被写入数据。</p>\n<p>开发者需明确不同的实现，并在用 Web Storage API 开发网站时考虑这些实现的差别。更多信息请查看 <a href=\"https://blog.whatwg.org/tag/localstorage\" class=\"external\" rel=\" noopener\">this WHATWG blog post</a> ，这里有更详细的讨论。</p>"}},{"type":"prose","value":{"id":"参见","title":"参见","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API\">Web Storage API 的使用</a></li>\n  <li><a href=\"https://medium.com/@ramsunvtech/onfocus-html5-storage-apis-b45d92aa424b\" class=\"external\" rel=\" noopener\">HTML5 Storage API By Venkatraman</a></li>\n</ul>"}}],"toc":[{"text":"Web Storage 概念和用法","id":"web_storage_概念和用法"},{"text":"Web Storage 接口","id":"web_storage_接口"},{"text":"例子","id":"例子"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"隐私浏览/隐身模式","id":"隐私浏览隐身模式"},{"text":"参见","id":"参见"}],"summary":"Web Storage API 提供机制， 使浏览器能以一种比使用 Cookie 更直观的方式存储键/值对。","popularity":0.0005,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Web Storage API","locale":"en-US","native":"English (US)"},{"title":"API de almacenamiento web","locale":"es","native":"Español"},{"title":"Web Storage API","locale":"fr","native":"Français"},{"title":"Web Storage API","locale":"ja","native":"日本語"},{"title":"Web Storage API","locale":"ko","native":"한국어"},{"title":"API de Armazenamento na Web","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Веб хранилище (API)","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/api/web_storage_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/web_storage_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/Web_Storage_API","title":"Web Storage API"}],"pageTitle":"Web Storage API - Web API 接口参考 | MDN","noIndexing":false}}