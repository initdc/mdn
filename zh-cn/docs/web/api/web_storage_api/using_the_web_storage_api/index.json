{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"使用 Web Storage API","mdn_url":"/zh-CN/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Web Storage API 提供了存储机制，通过该机制，浏览器可以安全地存储键值对，比使用 cookie 更加直观。这篇文章一步一步讲解如何使用这项简单的技术。</p>"}},{"type":"prose","value":{"id":"基本概念","title":"基本概念","isH3":false,"content":"<p>存储对象是简单的键值存储，类似于对象，但是它们在页面加载时保持完整。键和值始终是字符串（请注意，与对象一样，整数键将自动转换为字符串）。您可以像访问对象一样访问这些值，或者使用 <a href=\"/zh-CN/docs/Web/API/Storage/getItem\"><code>Storage.getItem()</code></a> 和 <a href=\"/zh-CN/docs/Web/API/Storage/setItem\"><code>Storage.setItem()</code></a> 方法 。这三行都设置了（相同的）colorSetting 条目：</p>\n<pre class=\"notranslate\">localStorage.colorSetting = '#a4509b';\nlocalStorage['colorSetting'] = '#a4509b';\nlocalStorage.setItem('colorSetting', '#a4509b');\n</pre>\n<p>Web Storage 包含如下两种机制：</p>\n<ul>\n  <li><code>sessionStorage</code> 为每一个给定的源（given origin）维持一个独立的存储区域，该存储区域在页面会话期间可用（即只要浏览器处于打开状态，包括页面重新加载和恢复）。</li>\n  <li><code>localStorage</code> 同样的功能，但是在浏览器关闭，然后重新打开后数据仍然存在。</li>\n</ul>\n<p>这两种机制是通过 <a href=\"/zh-CN/docs/Web/API/Window/sessionStorage\"><code>Window.sessionStorage</code></a> 和 <a href=\"/zh-CN/docs/Web/API/Window/localStorage\"><code>Window.localStorage</code></a> 属性使用（更确切的说，在支持的浏览器中 <code>Window</code> 对象实现了 <code>WindowLocalStorage</code> 和 <code>WindowSessionStorage</code> 对象并挂在其 <code>localStorage</code> 和 <code>sessionStorage</code> 属性下）—— 调用其中任一对象会创建 <a href=\"/zh-CN/docs/Web/API/Storage\"><code>Storage</code></a> 对象，通过 <a href=\"/zh-CN/docs/Web/API/Storage\"><code>Storage</code></a> 对象，可以设置、获取和移除数据项。对于每个源（origin）<code>sessionStorage</code> 和 <code>localStorage</code> 使用不同的 Storage 对象——独立运行和控制。</p>\n<p>例如，在文档中调用 <code>localStorage</code> 将会返回一个 <a href=\"/zh-CN/docs/Web/API/Storage\"><code>Storage</code></a> 对象；调用 <code>sessionStorage</code> 返回一个不同的 <a href=\"/zh-CN/docs/Web/API/Storage\"><code>Storage</code></a> 对象。可以使用相同的方式操作这些对象，但是操作是独立的。</p>"}},{"type":"prose","value":{"id":"localstorage_功能检测","title":"localStorage 功能检测","isH3":false,"content":"<p>为了能够使用 localStorage，我们应该首先验证它是否在当前浏览会话中受支持并可用。</p>"}},{"type":"prose","value":{"id":"测试可用性","title":"测试可用性","isH3":true,"content":"<p>支持 localStorage 的浏览器将在窗口对象上具有一个名为 localStorage 的属性。但是，仅断言该属性存在可能会引发异常。如果 localStorage 确实存在，则仍然不能保证 localStorage 实际可用，因为各种浏览器都提供了禁用 localStorage 的设置。因此，浏览器可能支持 localStorage，但不适用于页面上的脚本。</p>\n<p>例如，私有浏览模式下的 Safari 浏览器为我们提供了一个空的 l ocalStorage 对象，其配额为零，实际上使它无法使用。相反，我们可能会收到合法的 QuotaExceededError，这意味着我们已经用完了所有可用的存储空间，但实际上存储空间可用。我们的功能检测应考虑这些情况。</p>\n<p>这是一个检测 localStorage 是否同时受支持和可用的函数：</p>\n<pre class=\"notranslate\">function storageAvailable(type) {\n    var storage;\n    try {\n        storage = window[type];\n        var x = '__storage_test__';\n        storage.setItem(x, x);\n        storage.removeItem(x);\n        return true;\n    }\n    catch(e) {\n        return e instanceof DOMException &amp;&amp; (\n            // everything except Firefox\n            e.code === 22 ||\n            // Firefox\n            e.code === 1014 ||\n            // test name field too, because code might not be present\n            // everything except Firefox\n            e.name === 'QuotaExceededError' ||\n            // Firefox\n            e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &amp;&amp;\n            // acknowledge QuotaExceededError only if there's something already stored\n            (storage &amp;&amp; storage.length !== 0);\n    }\n}\n</pre>\n<p>这是您将如何使用它：</p>\n<pre class=\"notranslate\">if (storageAvailable('localStorage')) {\n  // Yippee! We can use localStorage awesomeness\n}\nelse {\n  // Too bad, no localStorage for us\n}\n</pre>\n<p>您可以通过调用 <code>storageAvailable('sessionStorage')</code> 来测试 sessionStorage。</p>\n<p>请参阅此处，<a href=\"https://gist.github.com/paulirish/5558557\" class=\"external\" rel=\" noopener\">brief history of feature-detecting localStorage</a>.。</p>"}},{"type":"prose","value":{"id":"一个简单的示例","title":"一个简单的示例","isH3":false,"content":"<p>为了展示 Web Storage 的用法，我们创建了一个简单的示例，假设称为 <strong>Web Storage Demo</strong>。<a href=\"https://mdn.github.io/dom-examples/web-storage/\" class=\"external\" rel=\" noopener\">示例页面</a>提供了控制表单，用于自定义颜色、字体和装饰图片：</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API/landing.png\" alt=\"\" width=\"700\" height=\"482\" loading=\"lazy\">当你选择不同的选项后，页面会立即更新；除此之外，你的选择会被存到 <code>localStorage</code> 里，这样，当你关闭页面之后重新加载时，你的选择会被记住。\n</p>\n<p>我们还提供了一个<a href=\"https://mdn.github.io/dom-examples/web-storage/event.html\" class=\"external\" rel=\" noopener\">存储事件结果页面</a> — 如果你在另一个标签页加载该页面，然后改变之前示例页面的选项，则随着 <code><a href=\"/zh-CN/docs/Web/Reference/Events/StorageEvent\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">StorageEvent</a></code> 事件的触发，更新的存储信息会显示出来。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API/event-output.png\" alt=\"\" width=\"700\" height=\"482\" loading=\"lazy\">\n</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 除了使用上面的链接查看示例页面外，还可以<a href=\"https://github.com/mdn/dom-examples/tree/master/web-storage\" class=\"external\" rel=\" noopener\">获取源码</a>。</p>\n</div>"}},{"type":"prose","value":{"id":"测试本地存储是否已被填充","title":"测试本地存储是否已被填充","isH3":true,"content":"<p>在 <a href=\"https://github.com/mdn/dom-examples/blob/master/web-storage/main.js\" class=\"external\" rel=\" noopener\">main.js</a> 开头，我们先测试本地存储是否已被填充（即，页面之前被访问过）：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bgcolor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">populateStorage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setStyles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><a href=\"/zh-CN/docs/Web/API/Storage/getItem\"><code>Storage.getItem()</code></a> 方法用来从存储中获取一个数据项。该例中，我们测试 <code>bgcolor</code> 数据项是否存在。如果不存在，执行 <code>populateStorage()</code> 来将存在的自定义值添加到存储中。如果有值存在，则执行 <code>setStyles()</code> 来使用存储的值更新页面的样式。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 你还可以使用 <a href=\"/zh-CN/docs/Web/API/Storage/length\"><code>Storage.length</code></a> 来测试存储对象是否为空。</p>\n</div>"}},{"type":"prose","value":{"id":"从存储中获取值","title":"从存储中获取值","isH3":true,"content":"<p>正如上面提到的，使用 <a href=\"/zh-CN/docs/Web/API/Storage/getItem\"><code>Storage.getItem()</code></a> 可以从存储中获取一个数据项。该方法接受数据项的键作为参数，并返回数据值。例如：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">setStyles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> currentColor <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bgcolor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> currentFont <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'font'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> currentImage <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bgcolor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> currentColor<span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'font'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> currentFont<span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> currentImage<span class=\"token punctuation\">;</span>\n\n  htmlElem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'#'</span> <span class=\"token operator\">+</span> currentColor<span class=\"token punctuation\">;</span>\n  pElem<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>fontFamily <span class=\"token operator\">=</span> currentFont<span class=\"token punctuation\">;</span>\n  imgElem<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> currentImage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>首先，前三行代码从本地中获取值。接着，将值显示到表单元素中，这样在重新加载页面时与自定义设置保持同步。最后，更新页面的样式和图片，这样重新加载页面后，你的自定义设置重新起作用了。</p>"}},{"type":"prose","value":{"id":"在存储中设置值","title":"在存储中设置值","isH3":true,"content":"<p><a href=\"/zh-CN/docs/Web/API/Storage/setItem\"><code>Storage.setItem()</code></a> 方法可被用来创建新数据项和更新已存在的值。该方法接受两个参数——要创建/修改的数据项的键，和对应的值。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">populateStorage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bgcolor'</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bgcolor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'font'</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'font'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">setStyles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>populateStorage()</code> 方法在本地存储中设置三项数据 — 背景颜色、字体和图片路径。然后执行 <code>setStyles()</code> 方法来更新页面的样式。</p>\n<p>同时，我们为每个表单元素绑定了一个 <code>onchange</code> 监听器，这样，一个表单值改变时，存储的数据和页面样式会更新。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>bgcolorForm<span class=\"token punctuation\">.</span>onchange <span class=\"token operator\">=</span> populateStorage<span class=\"token punctuation\">;</span>\nfontForm<span class=\"token punctuation\">.</span>onchange <span class=\"token operator\">=</span> populateStorage<span class=\"token punctuation\">;</span>\nimageForm<span class=\"token punctuation\">.</span>onchange <span class=\"token operator\">=</span> populateStorage<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"通过_storageevent_响应存储的变化","title":"通过 StorageEvent 响应存储的变化","isH3":true,"content":"<p>无论何时，<a href=\"/zh-CN/docs/Web/API/Storage\"><code>Storage</code></a> 对象发生变化时（即创建/更新/删除数据项时，重复设置相同的键值不会触发该事件，<a href=\"/zh-CN/docs/Web/API/Storage/clear\"><code>Storage.clear()</code></a> 方法至多触发一次该事件），<code><a href=\"/zh-CN/docs/Web/Reference/Events/StorageEvent\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">StorageEvent</a></code> 事件会触发。在同一个页面内发生的改变不会起作用——在相同域名下的其他页面（如一个新标签或 iframe）发生的改变才会起作用。在其他域名下的页面不能访问相同的 Storage 对象。</p>\n<p>在事件结果页面中的 JavaScript 如下所示（可见 <a href=\"https://github.com/mdn/dom-examples/blob/master/web-storage/event.js\" class=\"external\" rel=\" noopener\">events.js</a>）：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'storage'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-old'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>oldValue<span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-new'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>newValue<span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-storage'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>storageArea<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这里，我们为 window 对象添加了一个事件监听器，在当前域名相关的 <a href=\"/zh-CN/docs/Web/API/Storage\"><code>Storage</code></a> 对象发生改变时该事件监听器会触发。正如你在上面看到的，此事件相关的事件对象有多个属性包含了有用的信息——改变的数据项的键，改变前的旧值，改变后的新值，改变的存储对象所在的文档的 URL，以及存储对象本身。</p>"}},{"type":"prose","value":{"id":"删除数据记录","title":"删除数据记录","isH3":true,"content":"<p>Web Storage 提供了一对简单的方法用于移除数据。我们没用在我们的 demo 中使用这些方法，但是添加到你自己的项目中很简单：</p>\n<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/Storage/removeItem\"><code>Storage.removeItem()</code></a> 接受一个参数——你想要移除的数据项的键，然后会将对应的数据项从域名对应的存储对象中移除。</li>\n  <li><a href=\"/zh-CN/docs/Web/API/Storage/clear\"><code>Storage.clear()</code></a> 不接受参数，只是简单地清空域名对应的整个存储对象。</li>\n</ul>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"query":"api.Window.localStorage,api.Window.sessionStorage","specifications":[]}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"data":null,"query":"api.Window.localStorage,api.Window.sessionStorage","browsers":null}},{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>各浏览器支持的 localStorage 和 sessionStorage 容量上限不同。测试页面 <a href=\"http://dev-test.nemikor.com/web-storage/support-test/\" class=\"external\" rel=\" noopener\">detailed rundown of all the storage capacities for various browsers</a>。</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>备注：</strong> 从 ios 5.1 后，Safari 移动存储本地存储的数据在缓存文件夹，这样在系统空间不足的情况下，方便系统自动清理。</p>\n</div>"}},{"type":"prose","value":{"id":"相关链接","title":"相关链接","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/Web_Storage_API\">Web Storage API</a></li>\n</ul>"}}],"toc":[{"text":"基本概念","id":"基本概念"},{"text":"localStorage 功能检测","id":"localstorage_功能检测"},{"text":"一个简单的示例","id":"一个简单的示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"相关链接","id":"相关链接"}],"summary":"Web Storage API 提供了存储机制，通过该机制，浏览器可以安全地存储键值对，比使用 cookie 更加直观。这篇文章一步一步讲解如何使用这项简单的技术。","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using the Web Storage API","locale":"en-US","native":"English (US)"},{"title":"Usando la API de almacenamiento web","locale":"es","native":"Español"},{"title":"Utiliser l'API Web Storage","locale":"fr","native":"Français"},{"title":"Web Storage API の使用","locale":"ja","native":"日本語"},{"title":"Web Storage API 사용하기","locale":"ko","native":"한국어"},{"title":"Usando a API Web Storage","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Использование Web Storage API","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/api/web_storage_api/using_the_web_storage_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/web_storage_api/using_the_web_storage_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/Web_Storage_API","title":"Web Storage API"},{"uri":"/zh-CN/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API","title":"使用 Web Storage API"}],"pageTitle":"使用 Web Storage API - Web API 接口参考 | MDN","noIndexing":false}}