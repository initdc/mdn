{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"同步和异步请求","mdn_url":"/zh-CN/docs/Web/API/XMLHttpRequest/Synchronous_and_Asynchronous_Requests","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><code>XMLHttpRequest</code> 支持同步和异步通信。但是，一般来说，出于性能原因，异步请求应优先于同步请求。</p>\n<p>同步请求阻止代码的执行，这会导致屏幕上出现“冻结”和无响应的用户体验。</p>"}},{"type":"prose","value":{"id":"异步请求","title":"异步请求","isH3":false,"content":"<p>如果你使用<code>XMLHttpRequest</code>发送异步请求，那么当请求的响应数据完全收到之时，会执行一个指定的回调函数，而在执行异步请求的同时，浏览器会正常地执行其他事务的处理。</p>"}},{"type":"prose","value":{"id":"例子：在控制台输出页面源文件","title":"例子：在控制台输出页面源文件","isH3":true,"content":"<p>这个例子演示了如何进行一个简单的异步请求。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/bar/foo.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>第 2 行中指定第三个参数为 <code>true</code>，表示该请求应该以异步模式执行。</p>\n<p>第 3 行创建一个事件处理函数对象，并将其分配给请求的 <code>onload</code> 属性。此处理程序查看请求的 <code>readyState</code>，以查看事务是否在第 4 行完成，如果是，并且 HTTP 状态为 200，则转储接收到的内容。如果发生错误，则显示错误消息。</p>\n<p>第 15 行实际上启动了请求。只要请求的状态发生变化，就会调用回调程序。</p>"}},{"type":"prose","value":{"id":"例子：创建一个标准的方法来读取外部文件","title":"例子：创建一个标准的方法来读取外部文件","isH3":true,"content":"<p>在一些需求情况下，必须读取多个外部文件。这是一个标准的函数. 该函数使用 <code>XMLHttpRequest</code> 对象进行异步请求。而且可以为每个文件读取完成后指定不同的回调函数。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">xhrSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">callback</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">xhrError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">loadFile</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> callback <span class=\"token comment\">/*, opt_arg1, opt_arg2, ... */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    xhr<span class=\"token punctuation\">.</span>callback <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">;</span>\n    xhr<span class=\"token punctuation\">.</span>arguments <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    xhr<span class=\"token punctuation\">.</span>onload <span class=\"token operator\">=</span> xhrSuccess<span class=\"token punctuation\">;</span>\n    xhr<span class=\"token punctuation\">.</span>onerror <span class=\"token operator\">=</span> xhrError<span class=\"token punctuation\">;</span>\n    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>用法：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">loadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message.txt\"</span><span class=\"token punctuation\">,</span> showMessage<span class=\"token punctuation\">,</span> <span class=\"token string\">\"New message!\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>实用函数 loadFile 的签名声明（i）要读取的目标 URL（通过 HTTP GET），（ii）成功完成 XHR 操作时执行的函数，以及（iii）任意列表的附加参数 “通过“ XHR 对象到成功回调函数。</p>\n<p>第 1 行声明 XHR 操作成功完成时调用的函数。它又调用已经分配给 XHR 对象（第 7 行）属性的 loadFile 函数（本例中为函数 showMessage）的调用中指定的回调函数。提供给调用函数 loadFile 的附加参数（如果有的话）被“应用”到回调函数的运行中。</p>\n<p>第 5 行声明 XHR 操作无法成功完成时调用的函数。</p>\n<p>第 7 行存储 XHR 对象，成功回调函数作为 loadFile 的第二个参数给出。</p>\n<p>第 12 行将参数赋给 loadFile 的调用。从第三个参数开始，收集所有剩余的参数，分配给变量 XHR 的 arguments 属性，传递给成功回调函数 xhrSuccess，最终提供给函数调用的回调函数（在本例中为 showMessage）xhrSuccess。</p>\n<p>第 15 行为其第三个参数指定了 true，表示该请求应该被异步处理。</p>\n<p>第 16 行实际启动请求。</p>"}},{"type":"prose","value":{"id":"例子：使用超时","title":"例子：使用超时","isH3":true,"content":"<p>你可以使用一个超时设置，来避免你的代码为了等候读取请求的返回数据长时间执行。超时毫秒数可以通过为 <code>XMLHttpRequest</code> 对象的 <code>timeout</code> 属性赋值来指定：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">loadFile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">ontimeout</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The request for \"</span> <span class=\"token operator\">+</span> url <span class=\"token operator\">+</span> <span class=\"token string\">\" timed out.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">callback</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    xhr<span class=\"token punctuation\">.</span>timeout <span class=\"token operator\">=</span> timeout<span class=\"token punctuation\">;</span>\n    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>你还可以为 <code>timeout</code> 事件的 <code>ontimeout</code> 事件句柄指定事件处理函数。</p>\n<p>用法：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">showMessage</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">loadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> showMessage<span class=\"token punctuation\">,</span> <span class=\"token string\">\"New message!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>如上，我们指定的超时时间为 2000 ms。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> <code>timeout</code>属性添加于 Gecko 12.0 <span title=\"(Firefox 12.0 / Thunderbird 12.0 / SeaMonkey 2.9)\">Gecko&nbsp;12.0</span>。</p>\n</div>"}},{"type":"prose","value":{"id":"同步请求","title":"同步请求","isH3":false,"content":"<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 从 Gecko 30.0 (Firefox 30.0 / Thunderbird 30.0 / SeaMonkey 2.27)，Blink 39.0 和 Edge 13 开始，主线程上的同步请求由于对用户体验的负面影响而被弃用。</p>\n</div>\n<p>同步 XHR 通常会导致网络挂起。但开发人员通常不会注意到这个问题，因为在网络状况不佳或服务器响应速度慢的情况下，挂起只会显示同步 XHR 现在处于弃用状态。建议开发人员远离这个 API。</p>\n<p>同步 XHR 不允许所有新的 XHR 功能（如 <code>timeout</code> 或 <code>abort</code>）。这样做会调用 <code>InvalidAccessError</code>。</p>"}},{"type":"prose","value":{"id":"例子：http_同步请求","title":"例子：HTTP 同步请求","isH3":true,"content":"<p>这个例子演示了如何进行一个简单的同步请求。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://www.mozilla.org/'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>第一行实例化一个 <code>XMLHttpRequest</code> 对象。第二行使用该对象打开一个 HTTP 请求，并指定使用 <code>HTTP GET</code> 方法来获取 Mozilla.org 主页内容，操作模式为同步。</p>\n<p>第三行发送这个请求。参数为 <code>null</code> 表示 <code>GET</code> 请求不需要请求实体。</p>\n<p>第四行为请求结束之后，检查请求状态码。如果状态码为 200，表示该请求成功，请求到的页面源文件会输出到控制台上。</p>"}},{"type":"prose","value":{"id":"例子：在_worker_中使用_http_同步请求","title":"例子：在 <code>Worker</code> 中使用 HTTP 同步请求","isH3":true,"content":"<p>在 <a href=\"/zh-CN/docs/Web/API/Worker\"><code>Worker</code></a> 中使用 <code>XMLHttpRequest</code> 时，同步请求比异步请求更适合。</p>\n<p><strong><code>example.html</code></strong> (主页):</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">doctype</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Content-Type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/html; charset=UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>MDN Example<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">var</span> oMyWorker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myTask.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  oMyWorker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Worker said: \"</span> <span class=\"token operator\">+</span> oEvent<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  oMyWorker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p><strong><code>myFile.txt</code></strong> ( <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a>对象同步请求的文件):</p>\n<pre class=\"notranslate\">Hello World!!\n</pre>\n<p><strong><code>myTask.js</code></strong> (包含了<a href=\"/zh-CN/docs/Web/API/Worker\"><code>Worker</code></a>代码):</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oEvent<span class=\"token punctuation\">.</span>data <span class=\"token operator\">===</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> oReq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    oReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"myFile.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 同步请求</span>\n    oReq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    self<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>oReq<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 由于使用了<code>Worker</code>，所以该请求实际上也是异步的。</p>\n</div>\n<p>可以使用类似的方法，让脚本在后台与服务器交互，预加载某些内容。查看<a href=\"/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers\">使用 Web workers</a>了解更多详情。</p>","titleAsText":"例子：在 Worker 中使用 HTTP 同步请求"}},{"type":"prose","value":{"id":"将同步_xhr_用例调整到_beacon_api","title":"将同步 XHR 用例调整到 Beacon API","isH3":true,"content":"<p>在某些情况下，XMLHttpRequest 的同步使用是不可替代的，就像在 <a href=\"/zh-CN/docs/Web/API/Window/unload_event\">window.onunload</a>和<a href=\"/zh-CN/docs/Web/API/Window/beforeunload_event\">window.onbeforeunload</a> 事件期间一样。 您应该考虑使用带有 <code>Keepalive</code> 标志的 <code>fetch</code> API。 当 <code>keepalive</code> 的 <code>fetch</code> 不可用时，可以考虑使用 <a href=\"/zh-CN/docs/Web/API/Navigator/sendBeacon\">navigator.sendBeacon</a> API 可以支持这些用例，通常在提供良好 UX 的同时。</p>\n<p>以下示例（来自 <a href=\"/zh-CN/docs/Web/API/Navigator/sendBeacon\">sendBeacon</a> 文档）显示了一个理论分析代码，该代码尝试通过在卸载处理程序中使用同步 XMLHttpRequest 将数据提交给服务器。这导致页面的卸载被延迟。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unload'</span><span class=\"token punctuation\">,</span> logData<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">logData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/log\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// third parameter indicates sync xhr. :(</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/plain;charset=UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>analyticsData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>使用 <strong><code>sendBeacon()</code></strong> 方法，当用户代理有机会的时候，数据将被异步传输到 Web 服务器，<strong>而不会延迟卸载或影响下一个导航的性能。</strong></p>\n<p>以下示例显示了使用 <strong><code>sendBeacon()</code></strong> 方法将数据提交给服务器的理论分析代码模式。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unload'</span><span class=\"token punctuation\">,</span> logData<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">logData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    navigator<span class=\"token punctuation\">.</span><span class=\"token function\">sendBeacon</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/log\"</span><span class=\"token punctuation\">,</span> analyticsData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"参见","title":"参见","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\">Using XMLHttpRequest</a></li>\n  <li><a href=\"/zh-CN/docs/Web/Guide/AJAX\">AJAX</a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/Navigator/sendBeacon\"><code>navigator.sendBeacon</code></a></li>\n</ul>"}}],"toc":[{"text":"异步请求","id":"异步请求"},{"text":"同步请求","id":"同步请求"},{"text":"参见","id":"参见"}],"summary":"XMLHttpRequest 支持同步和异步通信。但是，一般来说，出于性能原因，异步请求应优先于同步请求。","popularity":0.0008,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Synchronous and asynchronous requests","locale":"en-US","native":"English (US)"},{"title":"同期と非同期のリクエスト","locale":"ja","native":"日本語"},{"title":"Synchronous and asynchronous requests","locale":"ko","native":"한국어"},{"title":"Requisições síncronas e assíncronas","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Синхронные и асинхронные запросы","locale":"ru","native":"Русский"},{"title":"Synchronous and asynchronous requests","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/web/api/xmlhttprequest/synchronous_and_asynchronous_requests","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/xmlhttprequest/synchronous_and_asynchronous_requests/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/XMLHttpRequest","title":"XMLHttpRequest"},{"uri":"/zh-CN/docs/Web/API/XMLHttpRequest/Synchronous_and_Asynchronous_Requests","title":"同步和异步请求"}],"pageTitle":"同步和异步请求 - Web API 接口参考 | MDN","noIndexing":false}}