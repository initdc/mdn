{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"XMLHttpRequest.getAllResponseHeaders()","mdn_url":"/zh-CN/docs/Web/API/XMLHttpRequest/getAllResponseHeaders","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>构造函数</summary><ol><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/XMLHttpRequest\"><code>XMLHttpRequest()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/channel\"><code>channel</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/mozAnon\"><code>mozAnon</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/mozBackgroundRequest\"><code>mozBackgroundRequest</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/mozSystem\"><code>mozSystem</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLHttpRequest/msCaching\"><code>msCaching</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/readyState\"><code>readyState</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/response\"><code>response</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/responseText\"><code>responseText</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/responseType\"><code>responseType</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/responseURL\"><code>responseURL</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/responseXML\"><code>responseXML</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/status\"><code>status</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/statusText\"><code>statusText</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/timeout\"><code>timeout</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/upload\"><code>upload</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/withCredentials\"><code>withCredentials</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/abort\"><code>abort()</code></a></li><li><em><code>getAllResponseHeaders()</code></em></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/getResponseHeader\"><code>getResponseHeader()</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLHttpRequest/msCachingEnabled\"><code>msCachingEnabled()</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/open\"><code>open()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/overrideMimeType\"><code>overrideMimeType()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/send\"><code>send()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/setRequestHeader\"><code>setRequestHeader()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>事件</summary><ol><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/abort_event\"><code>abort</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/error_event\"><code>error</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/load_event\"><code>load</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/loadend_event\"><code>loadend</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/loadstart_event\"><code>loadstart</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/progress_event\"><code>progress</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/readystatechange_event\"><code>readystatechange</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/timeout_event\"><code>timeout</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>继承</summary><ol><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequestEventTarget\"><code>XMLHttpRequestEventTarget</code></a></li><li><a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>XMLHttpRequest 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/FormData\"><code>FormData</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ProgressEvent\"><code>ProgressEvent</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequestEventTarget\"><code>XMLHttpRequestEventTarget</code></a></li><li><a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>XMLHttpRequestUpload</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>XMLHttpRequest.getAllResponseHeaders()</strong> 方法返回所有的响应头，以 <a href=\"/zh-CN/docs/Glossary/CRLF\">CRLF</a> 分割的字符串，或者 <code>null</code> 如果没有收到任何响应。 <strong>注意：</strong> 对于复合请求（ multipart requests ），这个方法返回当前请求的头部，而不是最初的请求的头部。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">DOMString getAllResponseHeaders();\n</pre></div>"}},{"type":"prose","value":{"id":"语法","title":"语法","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: plain notranslate\">var headers = XMLHttpRequest.getAllResponseHeaders();\n</pre></div>"}},{"type":"prose","value":{"id":"参数","title":"参数","isH3":true,"content":"<p>无</p>"}},{"type":"prose","value":{"id":"返回值","title":"返回值","isH3":true,"content":"<p>一个原始的 Header 头例子：</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">date: Fri, 08 Dec 2017 21:04:30 GMT\\r\\n\ncontent-encoding: gzip\\r\\n\nx-content-type-options: nosniff\\r\\n\nserver: meinheld/0.6.1\\r\\n\nx-frame-options: DENY\\r\\n\ncontent-type: text/html; charset=utf-8\\r\\n\nconnection: keep-alive\\r\\n\nstrict-transport-security: max-age=63072000\\r\\n\nvary: Cookie, Accept-Encoding\\r\\n\ncontent-length: 6502\\r\\n\nx-xss-protection: 1; mode=block\\r\\n\n</pre></div>\n<p>每一行通过\\r\\n 来进行分割。</p>"}},{"type":"prose","value":{"id":"例子","title":"例子","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: plain notranslate\">var request = new XMLHttpRequest();\nrequest.open(\"GET\", \"foo.txt\", true);\nrequest.send();\n\nrequest.onreadystatechange = function() {\n  if(this.readyState == this.HEADERS_RECEIVED) {\n\n    // Get the raw header string\n    var headers = request.getAllResponseHeaders();\n\n    // Convert the header string into an array\n    // of individual headers\n    var arr = headers.trim().split(/[\\r\\n]+/);\n\n    // Create a map of header names to values\n    var headerMap = {};\n    arr.forEach(function (line) {\n      var parts = line.split(': ');\n      var header = parts.shift();\n      var value = parts.join(': ');\n      headerMap[header] = value;\n    });\n  }\n</pre></div>\n<p>上面的代码执行后，你可以：</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">var contentType = headerMap[\"content-type\"];\n</pre></div>\n<p>上面的变量 <code>contentType</code> 可以获取到 HTTP header 里的 <code>content-type</code> 字段值。</p>"}}],"toc":[{"text":"语法","id":"语法"},{"text":"例子","id":"例子"}],"summary":"XMLHttpRequest.getAllResponseHeaders() 方法返回所有的响应头，以 CRLF 分割的字符串，或者 null 如果没有收到任何响应。 注意： 对于复合请求（ multipart requests ），这个方法返回当前请求的头部，而不是最初的请求的头部。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"XMLHttpRequest.getAllResponseHeaders()","locale":"en-US","native":"English (US)"},{"title":"XMLHttpRequest.getAllResponseHeaders()","locale":"ja","native":"日本語"}],"source":{"folder":"zh-cn/web/api/xmlhttprequest/getallresponseheaders","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/xmlhttprequest/getallresponseheaders/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/XMLHttpRequest","title":"XMLHttpRequest"},{"uri":"/zh-CN/docs/Web/API/XMLHttpRequest/getAllResponseHeaders","title":"XMLHttpRequest.getAllResponseHeaders()"}],"pageTitle":"XMLHttpRequest.getAllResponseHeaders() - Web API 接口参考 | MDN","noIndexing":false}}