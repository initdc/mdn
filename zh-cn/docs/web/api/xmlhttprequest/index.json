{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"XMLHttpRequest","mdn_url":"/zh-CN/docs/Web/API/XMLHttpRequest","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>指南</summary><ol><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\">Using XMLHttpRequest</a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/HTML_in_XMLHttpRequest\">HTML in XMLHttpRequest</a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest_in_IE6\">Using XMLHttpRequest in IE6</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>接口</summary><ol><li><a href=\"/zh-CN/docs/Web/API/FormData\"><code>FormData</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ProgressEvent\"><code>ProgressEvent</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequestEventTarget\"><code>XMLHttpRequestEventTarget</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequestUpload\"><code>XMLHttpRequestUpload</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><code>XMLHttpRequest</code>（XHR）对象用于与服务器交互。通过 XMLHttpRequest 可以在不刷新页面的情况下请求特定 URL，获取数据。这允许网页在不影响用户操作的情况下，更新页面的局部内容。<code>XMLHttpRequest</code> 在 <a href=\"/zh-CN/docs/Glossary/AJAX\">AJAX</a> 编程中被大量使用。</p>\n<p>尽管名称如此，<code>XMLHttpRequest</code> 可以用于获取任何类型的数据，而不仅仅是 XML。它甚至支持 <a href=\"/zh-CN/docs/Web/HTTP\">HTTP</a> 以外的协议（包括 file:// 和 FTP），尽管可能受到更多出于安全等原因的限制。</p>\n<p>如果您的通信流程需要从服务器端接收事件或消息数据，请考虑通过 <a href=\"/zh-CN/docs/Web/API/EventSource\"><code>EventSource</code></a> 接口使用 <a href=\"/zh-CN/docs/Web/API/Server-sent_events\">server-sent events</a>。对于全双工的通信， <a href=\"/zh-CN/docs/Web/API/WebSockets_API\">WebSocket</a> 可能是更好的选择。</p>"}},{"type":"prose","value":{"id":"构造函数","title":"构造函数","isH3":false,"content":"<dl>\n  <dt id=\"xmlhttprequest\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/XMLHttpRequest\" title=\"XMLHttpRequest()\"><code>XMLHttpRequest()</code></a></dt>\n  <dd>\n    <p>该构造函数用于初始化一个 <code>XMLHttpRequest</code> 实例对象。在调用下列任何其他方法之前，必须先调用该构造函数，或通过其他方式，得到一个实例对象。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"属性","title":"属性","isH3":false,"content":"<p><em>此接口继承了 <a href=\"/zh-CN/docs/Web/API/XMLHttpRequestEventTarget\"><code>XMLHttpRequestEventTarget</code></a> 和 <a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a> 的属性。</em></p>\n<dl>\n  <dt id=\"xmlhttprequest.onreadystatechange\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/readystatechange_event\"><code>XMLHttpRequest.onreadystatechange</code></a></dt>\n  <dd>\n    <p>当 <code>readyState</code> 属性发生变化时，调用的 <code><a href=\"/zh-CN/docs/Web/Reference/Events/Event_handlers\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">event handler</a></code>。</p>\n  </dd>\n  <dt id=\"xmlhttprequest.readystate\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/readyState\"><code>XMLHttpRequest.readyState</code></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回 一个无符号短整型（<code>unsigned short</code>）数字，代表请求的状态码。</p>\n  </dd>\n  <dt id=\"xmlhttprequest.response\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/response\"><code>XMLHttpRequest.response</code></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>、<a href=\"/zh-CN/docs/Web/API/Blob\"><code>Blob</code></a>、<a href=\"/zh-CN/docs/Web/API/Document\"><code>Document</code></a>，或 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>DOMString</code></a>，具体是哪种类型取决于 <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/responseType\"><code>XMLHttpRequest.responseType</code></a> 的值。其中包含整个响应实体（response entity body）。</p>\n  </dd>\n  <dt id=\"xmlhttprequest.responsetext\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/responseText\"><code>XMLHttpRequest.responseText</code></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>DOMString</code></a>，该 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>DOMString</code></a> 包含对请求的响应，如果请求未成功或尚未发送，则返回 <code>null</code>。</p>\n  </dd>\n  <dt id=\"xmlhttprequest.responsetype\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/responseType\"><code>XMLHttpRequest.responseType</code></a></dt>\n  <dd>\n    <p>一个用于定义响应类型的枚举值（enumerated value）。</p>\n  </dd>\n  <dt id=\"xmlhttprequest.responseurl\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/responseURL\"><code>XMLHttpRequest.responseURL</code></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回经过序列化（serialized）的响应 URL，如果该 URL 为空，则返回空字符串。</p>\n  </dd>\n  <dt id=\"xmlhttprequest.responsexml\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/responseXML\"><code>XMLHttpRequest.responseXML</code></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回一个 <a href=\"/zh-CN/docs/Web/API/Document\"><code>Document</code></a>，其中包含该请求的响应，如果请求未成功、尚未发送或是不能被解析为 XML 或 HTML，则返回 <code>null</code>。</p>\n  </dd>\n  <dt id=\"xmlhttprequest.status\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/status\"><code>XMLHttpRequest.status</code></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回一个无符号短整型（<code>unsigned short</code>）数字，代表请求的响应状态。</p>\n  </dd>\n  <dt id=\"xmlhttprequest.statustext\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/statusText\"><code>XMLHttpRequest.statusText</code></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>DOMString</code></a>，其中包含 HTTP 服务器返回的响应状态。与 <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/status\"><code>XMLHTTPRequest.status</code></a> 不同的是，它包含完整的响应状态文本（例如，\"<code>200 OK</code>\"）。</p>\n    <div class=\"notecard note\" id=\"sect1\">\n      <p><strong>备注：</strong> 根据 HTTP/2 规范（<a href=\"https://http2.github.io/http2-spec/#rfc.section.8.1.2.4\" class=\"external\" rel=\" noopener\">8.1.2.4</a> <a href=\"https://http2.github.io/http2-spec/#HttpResponse\" class=\"external\" rel=\" noopener\">Response Pseudo-Header Fields</a>，响应伪标头字段），HTTP/2 没有定义任何用于携带 HTTP/1.1 状态行中包含的版本（version）或者原因短语（reason phrase）的方法。</p>\n    </div>\n  </dd>\n  <dt id=\"xmlhttprequest.timeout\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/timeout\"><code>XMLHttpRequest.timeout</code></a></dt>\n  <dd>\n    <p>一个无符号长整型（<code>unsigned long</code>）数字，表示该请求的最大请求时间（毫秒），若超出该时间，请求会自动终止。</p>\n  </dd>\n  <dt id=\"xmlhttprequesteventtarget.ontimeout\"><a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>XMLHttpRequestEventTarget.ontimeout</code></a></dt>\n  <dd>\n    <p>当请求超时调用的 <code><a href=\"/zh-CN/docs/Web/Reference/Events/Event_handlers\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">event handler</a></code>。</p>\n  </dd>\n  <dt id=\"xmlhttprequest.upload\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/upload\"><code>XMLHttpRequest.upload</code></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p><a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>XMLHttpRequestUpload</code></a>，代表上传进度。</p>\n  </dd>\n  <dt id=\"xmlhttprequest.withcredentials\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/withCredentials\"><code>XMLHttpRequest.withCredentials</code></a></dt>\n  <dd>\n    <p>一个<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>布尔值</code> <small>(en-US)</small></a>，用来指定跨域 <code>Access-Control</code> 请求是否应当带有授权信息，如 cookie 或授权 header 头。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"非标准属性","title":"非标准属性","isH3":true,"content":"<dl>\n  <dt id=\"xmlhttprequest.channel\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/channel\"><code>XMLHttpRequest.channel</code></a><span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>一个 <code>nsIChannel</code>，对象在执行请求时使用的通道。</p>\n  </dd>\n  <dt id=\"xmlhttprequest.mozanon\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/mozAnon\"><code>XMLHttpRequest.mozAnon</code></a><span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>一个布尔值，如果为真，请求将在没有 cookie 和身份验证 header 头的情况下发送。</p>\n  </dd>\n  <dt id=\"xmlhttprequest.mozsystem\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/mozSystem\"><code>XMLHttpRequest.mozSystem</code></a><span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>一个布尔值，如果为真，则在请求时不会强制执行同源策略。</p>\n  </dd>\n  <dt id=\"xmlhttprequest.mozbackgroundrequest\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/mozBackgroundRequest\"><code>XMLHttpRequest.mozBackgroundRequest</code></a></dt>\n  <dd>\n    <p>一个布尔值，它指示对象是否是后台服务器端的请求。</p>\n  </dd>\n  <dt id=\"xmlhttprequest.mozresponsearraybuffer\"><a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>XMLHttpRequest.mozResponseArrayBuffer</code></a> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>，把请求的响应作为一个 JavaScript TypedArray。</p>\n  </dd>\n  <dt id=\"xmlhttprequest.multipart\"><a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>XMLHttpRequest.multipart</code></a><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg></dt>\n  <dd>\n    <p>这是一个 Gecko 专有属性，是一个布尔值，已在 Firefox/Gecko 22 中被删除。请考虑使用 <a href=\"/zh-CN/docs/Web/API/Server-sent_events\">Server-Sent Event</a>、<a href=\"/zh-CN/docs/Web/API/WebSockets_API\">Web Socket</a>、或来自进度事件的 <code>responseText</code> 代替。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"事件处理器","title":"事件处理器","isH3":true,"content":"<p>作为 <code>XMLHttpRequest</code> 实例的属性之一，所有浏览器都支持 <code>onreadystatechange</code>。</p>\n<p>后来，许多浏览器实现了一些额外的事件（<code>onload</code>、<code>onerror</code>、<code>onprogress</code> 等）。详见<a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\">Using XMLHttpRequest</a>。</p>\n<p>更多现代浏览器，包括 Firefox，除了可以设置 <code>on*</code> 属性外，也提供标准的监听器 <a href=\"/zh-CN/docs/Web/API/EventTarget/addEventListener\" title=\"addEventListener()\"><code>addEventListener()</code></a> API 来监听<code>XMLHttpRequest</code> 事件。</p>"}},{"type":"prose","value":{"id":"方法","title":"方法","isH3":false,"content":"<dl>\n  <dt id=\"xmlhttprequest.abort\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/abort\"><code>XMLHttpRequest.abort()</code></a></dt>\n  <dd>\n    <p>如果请求已被发出，则立刻中止请求。</p>\n  </dd>\n  <dt id=\"xmlhttprequest.getallresponseheaders\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/getAllResponseHeaders\"><code>XMLHttpRequest.getAllResponseHeaders()</code></a></dt>\n  <dd>\n    <p>以字符串的形式返回所有用 <a href=\"/zh-CN/docs/Glossary/CRLF\">CRLF</a> 分隔的响应头，如果没有收到响应，则返回 <code>null</code>。</p>\n  </dd>\n  <dt id=\"xmlhttprequest.getresponseheader\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/getResponseHeader\"><code>XMLHttpRequest.getResponseHeader()</code></a></dt>\n  <dd>\n    <p>返回包含指定响应头的字符串，如果响应尚未收到或响应中不存在该报头，则返回 <code>null</code>。</p>\n  </dd>\n  <dt id=\"xmlhttprequest.open\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/open\"><code>XMLHttpRequest.open()</code></a></dt>\n  <dd>\n    <p>初始化一个请求。该方法只能在 JavaScript 代码中使用，若要在 native code 中初始化请求，请使用 <a href=\"/zh-CN/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIXMLHttpRequest\" class=\"page-not-created\" title=\"This is a link to an unwritten page\"><code>openRequest()</code></a>。</p>\n  </dd>\n  <dt id=\"xmlhttprequest.overridemimetype\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/overrideMimeType\"><code>XMLHttpRequest.overrideMimeType()</code></a></dt>\n  <dd>\n    <p>覆写由服务器返回的 MIME 类型。</p>\n  </dd>\n  <dt id=\"xmlhttprequest.send\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/send\"><code>XMLHttpRequest.send()</code></a></dt>\n  <dd>\n    <p>发送请求。如果请求是异步的（默认），那么该方法将在请求发送后立即返回。</p>\n  </dd>\n  <dt id=\"xmlhttprequest.setrequestheader\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/setRequestHeader\"><code>XMLHttpRequest.setRequestHeader()</code></a></dt>\n  <dd>\n    <p>设置 HTTP 请求头的值。必须在 <code>open()</code> 之后、<code>send()</code> 之前调用 <code>setRequestHeader()</code> 方法。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"非标准方法","title":"非标准方法","isH3":true,"content":"<dl>\n  <dt id=\"xmlhttprequest.init\"><a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>XMLHttpRequest.init()</code></a></dt>\n  <dd>\n    <p>在 C++ 代码中初始化一个 XHR 对象。</p>\n    <div class=\"notecard warning\" id=\"sect2\">\n      <p><strong>警告：</strong> 该方法不能在 JavaScript 代码中使用。</p>\n    </div>\n  </dd>\n  <dt id=\"xmlhttprequest.openrequest\"><a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>XMLHttpRequest.openRequest()</code></a></dt>\n  <dd>\n    <p>初始化一个请求。这个方法只能在原生 C++ 代码中使用；如果用 JavaScript 代码来初始化请求，使用 <a href=\"/zh-cn/nsIXMLHttpRequest#open()\" class=\"page-not-created\" title=\"This is a link to an unwritten page\"><code>open()</code></a> 代替。可参考 <code>open()</code> 的文档。</p>\n  </dd>\n  <dt id=\"xmlhttprequest.sendasbinary\"><a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>XMLHttpRequest.sendAsBinary()</code></a><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg></dt>\n  <dd>\n    <p><code>send()</code> 方法的变体，用来发送二进制数据。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"事件","title":"事件","isH3":false,"content":"<dl>\n  <dt id=\"abort\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/abort_event\" title=\"abort\"><code>abort</code></a></dt>\n  <dd>\n    <p>\n      当 request 被停止时触发，例如当程序调用 <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/abort\"><code>XMLHttpRequest.abort()</code></a> 时。\n      也可以使用 <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/abort_event\" title=\"onabort\"><code>onabort</code></a> 属性。\n    </p>\n  </dd>\n  <dt id=\"error\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/error_event\" title=\"error\"><code>error</code></a></dt>\n  <dd>\n    <p>\n      当 request 遭遇错误时触发。\n      也可以使用 <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/error_event\" title=\"onerror\"><code>onerror</code></a> 属性\n    </p>\n  </dd>\n  <dt id=\"load\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/load_event\" title=\"load\"><code>load</code></a></dt>\n  <dd>\n    <p>\n      <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\" aria-current=\"page\"><code>XMLHttpRequest</code></a>请求成功完成时触发。\n      也可以使用 <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/load_event\" title=\"onload\"><code>onload</code></a> 属性。\n    </p>\n  </dd>\n  <dt id=\"loadend\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/loadend_event\" title=\"loadend\"><code>loadend</code></a></dt>\n  <dd>\n    <p>\n      当请求结束时触发，无论请求成功 ( <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/load_event\" title=\"load\"><code>load</code></a>) 还是失败 (<a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/abort_event\" title=\"abort\"><code>abort</code></a> 或 <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/error_event\" title=\"error\"><code>error</code></a>)。\n      也可以使用 <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>onloadend</code></a> 属性。\n    </p>\n  </dd>\n  <dt id=\"loadstart\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/loadstart_event\" title=\"loadstart\"><code>loadstart</code></a></dt>\n  <dd>\n    <p>\n      接收到响应数据时触发。\n      也可以使用 <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/loadstart_event\" title=\"onloadstart\"><code>onloadstart</code></a> 属性。\n    </p>\n  </dd>\n  <dt id=\"progress\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/progress_event\" title=\"progress\"><code>progress</code></a></dt>\n  <dd>\n    <p>\n      当请求接收到更多数据时，周期性地触发。\n      也可以使用 <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/progress_event\" title=\"onprogress\"><code>onprogress</code></a> 属性。\n    </p>\n  </dd>\n  <dt id=\"timeout\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/timeout_event\" title=\"timeout\"><code>timeout</code></a></dt>\n  <dd>\n    <p>\n      在预设时间内没有接收到响应时触发。\n      也可以使用 <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>ontimeout</code></a> 属性。\n    </p>\n  </dd>\n</dl>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://xhr.spec.whatwg.org/#interface-xmlhttprequest","title":"XMLHttpRequest Standard"}],"query":"api.XMLHttpRequest"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.XMLHttpRequest","dataURL":"/zh-CN/docs/Web/API/XMLHttpRequest/bcd.json"}},{"type":"prose","value":{"id":"参见","title":"参见","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/XMLSerializer\"><code>XMLSerializer</code></a>：将 DOM 树解析为 XML 对象</li>\n  <li>MDN 教程中的 <code>XMLHttpRequest</code>：\n    <ul>\n      <li><a href=\"/zh-CN/docs/Web/Guide/AJAX/Getting_Started\">Ajax — Getting Started</a></li>\n      <li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\">Using XMLHttpRequest</a></li>\n      <li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/HTML_in_XMLHttpRequest\">HTML in XMLHttpRequest</a></li>\n    </ul>\n  </li>\n  <li><a href=\"https://www.html5rocks.com/en/tutorials/file/xhr2/\" class=\"external\" rel=\" noopener\">HTML5 Rocks — New Tricks in XMLHttpRequest2</a></li>\n  <li>HTTP Feature-Policy 指令 <a href=\"/en-US/docs/Web/HTTP/Headers/Feature-Policy/sync-xhr\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">sync-xhr (en-US)</a></li>\n</ul>"}}],"toc":[{"text":"构造函数","id":"构造函数"},{"text":"属性","id":"属性"},{"text":"方法","id":"方法"},{"text":"事件","id":"事件"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"参见","id":"参见"}],"summary":"XMLHttpRequest（XHR）对象用于与服务器交互。通过 XMLHttpRequest 可以在不刷新页面的情况下请求特定 URL，获取数据。这允许网页在不影响用户操作的情况下，更新页面的局部内容。XMLHttpRequest 在 AJAX 编程中被大量使用。","popularity":0.007,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"XMLHttpRequest","locale":"en-US","native":"English (US)"},{"title":"XMLHttpRequest","locale":"es","native":"Español"},{"title":"XMLHttpRequest","locale":"fr","native":"Français"},{"title":"XMLHttpRequest","locale":"ja","native":"日本語"},{"title":"XMLHttpRequest","locale":"ko","native":"한국어"},{"title":"XMLHttpRequest","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"XMLHttpRequest","locale":"ru","native":"Русский"},{"title":"XMLHttpRequest","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/web/api/xmlhttprequest","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/xmlhttprequest/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/XMLHttpRequest","title":"XMLHttpRequest"}],"pageTitle":"XMLHttpRequest - Web API 接口参考 | MDN","noIndexing":false}}