{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Request()","mdn_url":"/zh-CN/docs/Web/API/Request/Request","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Request\"><code>Request</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>构造函数</summary><ol><li><em><code>Request()</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/body\"><code>body</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/Request/bodyUsed\"><code>bodyUsed</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Request/cache\"><code>cache</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Request/credentials\"><code>credentials</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/destination\"><code>destination</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/Request/headers\"><code>headers</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/integrity\"><code>integrity</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/Request/method\"><code>method</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Request/mode\"><code>mode</code></a></li><li><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/priority\"><code>priority</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/redirect\"><code>redirect</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/referrer\"><code>referrer</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/referrerPolicy\"><code>referrerPolicy</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/Request/url\"><code>url</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Request/arrayBuffer\"><code>arrayBuffer()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Request/blob\"><code>blob()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Request/clone\"><code>clone()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Request/formData\"><code>formData()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Request/json\"><code>json()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Request/text\"><code>text()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard experimental\" id=\"sect1\"><p><strong>Experimental:</strong> <strong>这是一个实验中的功能</strong><br>此功能某些浏览器尚在开发中，请参考<a href=\"#browser_compatibility\">浏览器兼容性表格</a>以得到在不同浏览器中适合使用的前缀。由于该功能对应的标准文档可能被重新修订，所以在未来版本的浏览器中该功能的语法和行为可能随之改变。</p></div>\n<p><strong><code>Request()</code></strong> 构造器创建一个新的<a href=\"/zh-CN/docs/Web/API/Request\"><code>Request</code></a> 对象。</p>"}},{"type":"prose","value":{"id":"语法","title":"语法","isH3":false,"content":"<pre class=\"notranslate\">var myRequest = new Request(input[, init]);\n</pre>"}},{"type":"prose","value":{"id":"参数","title":"参数","isH3":true,"content":"<dl>\n  <dt id=\"input\"><em>input</em></dt>\n  <dd>\n    <p>定义你想要 fetch 的资源。可以是下面两者之一：</p>\n    <ul>\n      <li>一个直接包含你希望 fetch 的资源的 URL 的 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>USVString</code></a>。</li>\n      <li>一个 <a href=\"/zh-CN/docs/Web/API/Request\"><code>Request</code></a> 对象。请注意以下行为更新，以在保留安全性的同时使构造函数不太可能引发异常：\n        <ul>\n          <li>如果此对象存在于构造函数调用的另一个起源上，则将除去<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/referrer\"><code>Request.referrer</code> <small>(en-US)</small></a>。</li>\n          <li>如果此对象的导航为 <a href=\"/zh-CN/docs/Web/API/Request/mode\"><code>Request.mode</code></a>，则<code>mode</code>将转换为<code>same-origin</code>。</li>\n        </ul>\n      </li>\n    </ul>\n  </dd>\n  <dt id=\"init\"><em>init</em> <span class=\"badge inline optional\">可选</span></dt>\n  <dd>\n    <p>一个可选对象，包含希望被包括到请求中的各种自定义选项。可用的选项如下：</p>\n    <ul>\n      <li><code>method</code>: 请求的方法，例如：<code>GET</code>, <code>POST</code>。</li>\n      <li><code>headers</code>: 任何你想加到请求中的头，其被放在<a href=\"/zh-CN/docs/Web/API/Headers\"><code>Headers</code></a>对象或内部值为<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>ByteString</code></a> 的对象字面量中。</li>\n      <li><code>body</code>: 任何你想加到请求中的 body，可以是<a href=\"/zh-CN/docs/Web/API/Blob\"><code>Blob</code></a>, <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>BufferSource</code></a>, <a href=\"/zh-CN/docs/Web/API/FormData\"><code>FormData</code></a>, <a href=\"/zh-CN/docs/Web/API/URLSearchParams\"><code>URLSearchParams</code></a>, <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>USVString</code></a>，或<a href=\"/zh-CN/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a>对象。注意<code>GET</code> 和 <code>HEAD</code> 请求没有 body。</li>\n      <li><code>mode</code>: 请求的模式，比如 <code>cors</code>, <code>no-cors</code>, <code>same-origin</code>, 或 <code>navigate</code>。默认值为 <code>cors</code>。</li>\n      <li><code>credentials</code>: 想要在请求中使用的 credentials：: <code>omit</code>, <code>same-origin</code>, 或 <code>include</code>。默认值应该为<code>omit</code>。但在 Chrome 中，Chrome 47 之前的版本默认值为 <code>same-origin</code> ，自 Chrome 47 起，默认值为 <code>include</code>。</li>\n      <li><code>cache</code>: 请求中想要使用的 <a href=\"/zh-CN/docs/Web/API/Request/cache\">cache mode</a></li>\n      <li><code>redirect</code>: 对重定向处理的模式： <code>follow</code>, <code>error</code>, or <code>manual</code>。在 Chrome 中，Chrome 47 之前的版本默认值为 <code>manual</code>，自 Chrome 47 起，默认值为 <code>follow</code>。</li>\n      <li><code>referrer</code>: 一个指定了<code>no-referrer</code>, <code>client</code>, 或一个 URL 的 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>USVString</code></a> 。默认值是<code>about:client</code>。</li>\n      <li><code>integrity</code>: 包括请求的 <a href=\"/zh-CN/docs/Web/Security/Subresource_Integrity\">subresource integrity</a> 值 (e.g., <code>sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=</code>).</li>\n    </ul>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"errors","title":"Errors","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th><strong>Type</strong></th>\n      <th><strong>Description</strong></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>TypeError</td>\n      <td>自 <a href=\"/en-US/docs/Mozilla/Firefox/Releases/43\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Firefox 43 (en-US)</a>后，若 URL 有 credentials，<code>Request()</code> 会抛出 TypeError , 例如 <code>http://user:password\\@example.com</code>。</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"example","title":"Example","isH3":false,"content":"<p>在我们的获取请求示例 <a href=\"https://github.com/mdn/fetch-examples/tree/gh-pages/fetch-request\" class=\"external\" rel=\" noopener\">Fetch Request example</a> (see <a href=\"https://mdn.github.io/fetch-examples/fetch-request/\" class=\"external\" rel=\" noopener\">Fetch Request live</a>) 中，我们使用构造函数创建一个新的<code>Request</code>对象，然后使用 <a href=\"/zh-CN/docs/Web/API/fetch\"><code>GlobalFetch.fetch</code></a> 发送请求。由于我们正在获取图像，我们在响应上运行 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Response/blob\"><code>Body.blob</code> <small>(en-US)</small></a> 以为其提供正确的 MIME 类型，以便对其进行正确处理，然后为其创建一个 Object URL，并将其显示在 <a href=\"/zh-CN/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a> 元素中。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myImage <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>myRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> objectURL <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myImage<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> objectURL<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在<a href=\"https://github.com/mdn/fetch-examples/tree/gh-pages/fetch-request-with-init\" class=\"external\" rel=\" noopener\">Fetch Request with init example</a> (参见 <a href=\"https://mdn.github.io/fetch-examples/fetch-request-with-init/\" class=\"external\" rel=\" noopener\">Fetch Request init live</a>) 我们做了同样的事情，只不过我们在调用<code>fetch() 时，还</code>传递进了一个 init 对象：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myImage <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myHeaders <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyHeaders<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'image/jpeg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myInit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> myHeaders<span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'cors'</span><span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">'default'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">,</span>myInit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>myRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>注意你也可以把 init 对象作为参数传递到<code>fetch</code>调用中来达到同样的效果。如下：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>myRequest<span class=\"token punctuation\">,</span>myInit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>也可以使用在 init 中使用对象字面量作为 <code>headers</code>。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myInit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                   <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'image/jpeg'</span>\n               <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'cors'</span><span class=\"token punctuation\">,</span>\n               <span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">'default'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flowers.jpg'</span><span class=\"token punctuation\">,</span> myInit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>也可以把 <a href=\"/zh-CN/docs/Web/API/Request\"><code>Request</code></a> 对象再作参数传递进 <code>Request()</code> 构造器来创建一个请求的副本（就像调用<a href=\"/zh-CN/docs/Web/API/Request/clone\" title=\"clone()\"><code>clone()</code></a>一样）。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> This last usage is probably only useful in <a href=\"/en-US/docs/Web/API/Service_Worker_API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">ServiceWorkers (en-US)</a>.</p>\n</div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://fetch.spec.whatwg.org/#ref-for-dom-request①","title":"Fetch Standard"}],"query":"api.Request.Request"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.Request.Request","dataURL":"/zh-CN/docs/Web/API/Request/Request/bcd.json"}},{"type":"prose","value":{"id":"参见","title":"参见","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Service_Worker_API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">ServiceWorker API (en-US)</a></li>\n  <li><a href=\"/zh-CN/docs/Web/HTTP/CORS\">HTTP access control (CORS)</a></li>\n  <li><a href=\"/zh-CN/docs/Web/HTTP\">HTTP</a></li>\n</ul>"}}],"toc":[{"text":"语法","id":"语法"},{"text":"Errors","id":"errors"},{"text":"Example","id":"example"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"参见","id":"参见"}],"summary":"Request() 构造器创建一个新的Request 对象。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Request()","locale":"en-US","native":"English (US)"},{"title":"Request()","locale":"fr","native":"Français"},{"title":"Request()","locale":"ja","native":"日本語"},{"title":"Request()","locale":"ko","native":"한국어"},{"title":"Request()","locale":"pt-BR","native":"Português (do Brasil)"}],"source":{"folder":"zh-cn/web/api/request/request","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/request/request/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/Request","title":"Request"},{"uri":"/zh-CN/docs/Web/API/Request/Request","title":"Request()"}],"pageTitle":"Request() - Web API 接口参考 | MDN","noIndexing":false}}