{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Request.cache","mdn_url":"/zh-CN/docs/Web/API/Request/cache","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Request\"><code>Request</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>构造函数</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Request/Request\"><code>Request()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/body\"><code>body</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/Request/bodyUsed\"><code>bodyUsed</code></a></li><li><em><code>cache</code></em></li><li><a href=\"/zh-CN/docs/Web/API/Request/credentials\"><code>credentials</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/destination\"><code>destination</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/Request/headers\"><code>headers</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/integrity\"><code>integrity</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/Request/method\"><code>method</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Request/mode\"><code>mode</code></a></li><li><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/priority\"><code>priority</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/redirect\"><code>redirect</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/referrer\"><code>referrer</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Request/referrerPolicy\"><code>referrerPolicy</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/Request/url\"><code>url</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Request/arrayBuffer\"><code>arrayBuffer()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Request/blob\"><code>blob()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Request/clone\"><code>clone()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Request/formData\"><code>formData()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Request/json\"><code>json()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Request/text\"><code>text()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>cache</code></strong> 作为<a href=\"/zh-CN/docs/Web/API/Request\"><code>Request</code></a> 接口只读属性包含着请求的缓存模式。它控制着请求以何种方式与浏览器的 <a href=\"/zh-CN/docs/Web/HTTP/Caching\">HTTP</a> 缓存进行交互。</p>"}},{"type":"prose","value":{"id":"syntax","title":"Syntax","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> currentCacheMode <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"value","title":"Value","isH3":true,"content":"<p>A <code>RequestCache</code> value. The available values are:</p>\n<ul>\n  <li><code>default</code> — 浏览器从 HTTP 缓存中寻找匹配的请求。\n    <ul>\n      <li>如果缓存匹配上并且有效（ <a href=\"/zh-CN/docs/Web/HTTP/Caching#freshness\">fresh</a>）, 它将直接从缓存中返回资源。</li>\n      <li>如果缓存匹配上但已经过期 ，浏览器将会使用传统（ <a href=\"/zh-CN/docs/Web/HTTP/Conditional_requests\">conditional request</a> ）的请求方式去访问远程服务器 。如果服务器端显示资源没有改动，它将从缓存中返回资源。否则，如果服务器显示资源变动，那么重新从服务器下载资源更新缓存。</li>\n      <li>如果缓存没有匹配，浏览器将会以普通方式请求，并且更新已经下载的资源缓存。</li>\n    </ul>\n  </li>\n  <li><code>no-store</code> — 浏览器直接从远程服务器获取资源，不查看缓存，并且不会使用下载的资源更新缓存。</li>\n  <li><code>reload</code> — 浏览器直接从远程服务器获取资源，不查看缓存，然后使用下载的资源更新缓存。</li>\n  <li><code>no-cache</code> — 浏览器在其 HTTP 缓存中寻找匹配的请求。\n    <ul>\n      <li>如果有匹配，无论是新的还是陈旧的，浏览器都会向远程服务器发出条件请求。如果服务器指示资源没有更改，则将从缓存中返回该资源。否则，将从服务器下载资源并更新缓存。</li>\n      <li>如果没有匹配，浏览器将发出正常请求，并使用下载的资源更新缓存。</li>\n    </ul><code>force-cache</code> — 浏览器在其 HTTP 缓存中寻找匹配的请求。\n    <ul>\n      <li>如果有匹配项，不管是新匹配项还是旧匹配项，都将从缓存中返回。</li>\n      <li>如果没有匹配，浏览器将发出正常请求，并使用下载的资源更新缓存。</li>\n    </ul>\n  </li>\n  <li><code>only-if-cached</code> — 浏览器在其 HTTP 缓存中寻找匹配的请求。\n    <ul>\n      <li>如果有匹配项 (新的或旧的)，则从缓存中返回。</li>\n      <li>如果没有匹配，浏览器将返回一个错误。</li>\n    </ul>The <code>\"only-if-cached\"</code> mode can only be used if the request's <a href=\"/zh-CN/docs/Web/API/Request/mode\"><code>mode</code></a> is <code>\"same-origin\"</code>. Cached redirects will be followed if the request's <code>redirect</code> property is <code>\"follow\"</code> and the redirects do not violate the <code>\"same-origin\"</code> mode.\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"example","title":"Example","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Download a resource with cache busting, to bypass the cache</span>\n<span class=\"token comment\">// completely.</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"some.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">\"no-store\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* consume the response */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Download a resource with cache busting, but update the HTTP</span>\n<span class=\"token comment\">// cache with the downloaded resource.</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"some.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">\"reload\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* consume the response */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Download a resource with cache busting when dealing with a</span>\n<span class=\"token comment\">// properly configured server that will send the correct ETag</span>\n<span class=\"token comment\">// and Date headers and properly handle If-Modified-Since and</span>\n<span class=\"token comment\">// If-None-Match request headers, therefore we can rely on the</span>\n<span class=\"token comment\">// validation to guarantee a fresh response.</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"some.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">\"no-cache\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* consume the response */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Download a resource with economics in mind!  Prefer a cached</span>\n<span class=\"token comment\">// albeit stale response to conserve as much bandwidth as possible.</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"some.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">\"force-cache\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* consume the response */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Specifications","id":"specifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://fetch.spec.whatwg.org/#ref-for-dom-request-cache②","title":"Fetch Standard"}],"query":"api.Request.cache"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.Request.cache","dataURL":"/zh-CN/docs/Web/API/Request/cache/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Service_Worker_API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">ServiceWorker API (en-US)</a></li>\n  <li><a href=\"/zh-CN/docs/Web/HTTP/CORS\">HTTP access control (CORS)</a></li>\n  <li><a href=\"/zh-CN/docs/Web/HTTP\">HTTP</a></li>\n</ul>"}}],"toc":[{"text":"Syntax","id":"syntax"},{"text":"Example","id":"example"},{"text":"Specifications","id":"specifications"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"cache 作为Request 接口只读属性包含着请求的缓存模式。它控制着请求以何种方式与浏览器的 HTTP 缓存进行交互。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Request.cache","locale":"en-US","native":"English (US)"},{"title":"Request.cache","locale":"ja","native":"日本語"}],"source":{"folder":"zh-cn/web/api/request/cache","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/request/cache/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/Request","title":"Request"},{"uri":"/zh-CN/docs/Web/API/Request/cache","title":"Request.cache"}],"pageTitle":"Request.cache - Web API 接口参考 | MDN","noIndexing":false}}