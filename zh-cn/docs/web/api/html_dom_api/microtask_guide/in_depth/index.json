{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"深入：微任务与 Javascript 运行时环境","mdn_url":"/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/HTML_DOM_API\">HTML DOM API</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/HTML_DOM_API\"><code>HTML_DOM_API</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>HTML DOM 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/BeforeUnloadEvent\"><code>BeforeUnloadEvent</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMStringMap\"><code>DOMStringMap</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ErrorEvent\"><code>ErrorEvent</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLAnchorElement\"><code>HTMLAnchorElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLAreaElement\"><code>HTMLAreaElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLAudioElement\"><code>HTMLAudioElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLBRElement\"><code>HTMLBRElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLBaseElement\"><code>HTMLBaseElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLBodyElement\"><code>HTMLBodyElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLButtonElement\"><code>HTMLButtonElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLCanvasElement\"><code>HTMLCanvasElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLContentElement\"><code>HTMLContentElement</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLDListElement\"><code>HTMLDListElement</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLDataElement\"><code>HTMLDataElement</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLDataListElement\"><code>HTMLDataListElement</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLDialogElement\"><code>HTMLDialogElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLDivElement\"><code>HTMLDivElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLDocument\"><code>HTMLDocument</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLElement\"><code>HTMLElement</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLEmbedElement\"><code>HTMLEmbedElement</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLFieldSetElement\"><code>HTMLFieldSetElement</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLFormControlsCollection\"><code>HTMLFormControlsCollection</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLFormElement\"><code>HTMLFormElement</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLFrameSetElement\"><code>HTMLFrameSetElement</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLHRElement\"><code>HTMLHRElement</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLHeadElement\"><code>HTMLHeadElement</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLHeadingElement\"><code>HTMLHeadingElement</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLHtmlElement\"><code>HTMLHtmlElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLIFrameElement\"><code>HTMLIFrameElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLImageElement\"><code>HTMLImageElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLInputElement\"><code>HTMLInputElement</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLKeygenElement\"><code>HTMLKeygenElement</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLLIElement\"><code>HTMLLIElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLLabelElement\"><code>HTMLLabelElement</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLLegendElement\"><code>HTMLLegendElement</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLLinkElement\"><code>HTMLLinkElement</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLMapElement\"><code>HTMLMapElement</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLMediaElement\"><code>HTMLMediaElement</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLMetaElement\"><code>HTMLMetaElement</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLMeterElement\"><code>HTMLMeterElement</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLModElement\"><code>HTMLModElement</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLOListElement\"><code>HTMLOListElement</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLObjectElement\"><code>HTMLObjectElement</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLOptGroupElement\"><code>HTMLOptGroupElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLOptionElement\"><code>HTMLOptionElement</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLOptionsCollection\"><code>HTMLOptionsCollection</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLOutputElement\"><code>HTMLOutputElement</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLParagraphElement\"><code>HTMLParagraphElement</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLPictureElement\"><code>HTMLPictureElement</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLPreElement\"><code>HTMLPreElement</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLProgressElement\"><code>HTMLProgressElement</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLQuoteElement\"><code>HTMLQuoteElement</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLScriptElement\"><code>HTMLScriptElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLSelectElement\"><code>HTMLSelectElement</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLShadowElement\"><code>HTMLShadowElement</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLSourceElement\"><code>HTMLSourceElement</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLSpanElement\"><code>HTMLSpanElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLStyleElement\"><code>HTMLStyleElement</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLTableCaptionElement\"><code>HTMLTableCaptionElement</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLTableCellElement\"><code>HTMLTableCellElement</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLTableColElement\"><code>HTMLTableColElement</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLTableElement\"><code>HTMLTableElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLTableRowElement\"><code>HTMLTableRowElement</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLTableSectionElement\"><code>HTMLTableSectionElement</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLTemplateElement\"><code>HTMLTemplateElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLTextAreaElement\"><code>HTMLTextAreaElement</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLTimeElement\"><code>HTMLTimeElement</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLTitleElement\"><code>HTMLTitleElement</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLTrackElement\"><code>HTMLTrackElement</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLUListElement\"><code>HTMLUListElement</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLUnknownElement\"><code>HTMLUnknownElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLVideoElement\"><code>HTMLVideoElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HashChangeEvent\"><code>HashChangeEvent</code></a></li><li><a href=\"/zh-CN/docs/Web/API/History\"><code>History</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ImageData\"><code>ImageData</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Location\"><code>Location</code></a></li><li><a href=\"/zh-CN/docs/Web/API/MessageChannel\"><code>MessageChannel</code></a></li><li><a href=\"/zh-CN/docs/Web/API/MessageEvent\"><code>MessageEvent</code></a></li><li><a href=\"/zh-CN/docs/Web/API/MessagePort\"><code>MessagePort</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Navigator\"><code>Navigator</code></a></li><li><a href=\"/zh-CN/docs/Web/API/PageTransitionEvent\"><code>PageTransitionEvent</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Plugin\"><code>Plugin</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PluginArray\"><code>PluginArray</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PopStateEvent\"><code>PopStateEvent</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/PromiseRejectionEvent\"><code>PromiseRejectionEvent</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RadioNodeList\"><code>RadioNodeList</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/ValidityState\"><code>ValidityState</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Window\"><code>Window</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>当你在调试的时候，或者在决定如何以最佳的方式为任务队列和微任务队列安排调度顺序的时候，如果你了解关于 JavaScript 运行时是如何在背后执行这一切的，那将对你的理解会非常有帮助。这就是本节涵盖的内容。</p>"}},{"type":"prose","value":{"id":"介绍","title":"介绍","isH3":false,"content":"<p>JavaScript 本质上是一门单线程语言。对于在它被设计出来的那个年代来说，这样的设计是一个很好的选择。那个时候的人们很少有多处理器计算机，并且当时也只是打算用 JavaScript 来编写少量的代码。</p>\n<p>当然，随着时间的流逝，电脑的性能得到了飞速的提升。JavaScript 也变成了众多流行语言中的一员。许多非常受欢迎的应用或多或少都有 JavaScript 的影子。为此，找到一种可以突破传统单线程语言限制的方法变得很有必要。</p>\n<p>自从 (<a href=\"/zh-CN/docs/Web/API/setTimeout\" title=\"setTimeout()\"><code>setTimeout()</code></a> 和 <a href=\"/zh-CN/docs/Web/API/setInterval\" title=\"setInterval()\"><code>setInterval()</code></a>) 加入到 Web API 后，浏览器提供的 JavaScript 环境就已经逐渐开始包含了任务安排、多线程应用开发等强大的特性。了解 JavaScript 运行时是如何安排和运行代码的对了解 <code>queueMicrotask()</code> 会非常有作用。</p>"}},{"type":"prose","value":{"id":"javascript_执行上下文","title":"JavaScript 执行上下文","isH3":false,"content":"<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 对于大多数 JavaScript 开发人员来说，这些细节并不重要。这里提供的信息只用于了解为什么微任务非常有用以及它们是如何工作的。如果你并不关心这些内容，你可以跳过这部分或者在你觉得需要的时候再倒回来查看。</p>\n</div>\n<p>当一段 JavaScript 代码在运行的时候，它实际上是运行在<strong>执行上下文</strong>中。下面 3 种类型的代码会创建一个新的执行上下文：</p>\n<ul>\n  <li>全局上下文是为运行代码主体而创建的执行上下文，也就是说它是为那些存在于 JavaScript 函数之外的任何代码而创建的。</li>\n  <li>每个函数会在执行的时候创建自己的执行上下文。这个上下文就是通常说的 “本地上下文”。</li>\n  <li>使用 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a> 函数也会创建一个新的执行上下文。</li>\n</ul>\n<p>每一个上下文在本质上都是一种作用域层级。每个代码段开始执行的时候都会创建一个新的上下文来运行它，并且在代码退出的时候销毁掉。看看下面这段 JavaScript 程序：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> outputElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> userLanguages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"Mike\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"en\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"Teresa\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">greetUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">localGreeting</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> greeting<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> language <span class=\"token operator\">=</span> userLanguages<span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"es\"</span><span class=\"token operator\">:</span>\n        greeting <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">¡Hola, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>user<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"en\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        greeting <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>user<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> greeting<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  outputElem<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+=</span> <span class=\"token function\">localGreeting</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;br&gt;\\r\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">greetUser</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mike\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">greetUser</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Teresa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">greetUser</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Veronica\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这段程序代码包含了三个执行上下文，其中有些会在程序运行的过程中多次创建和销毁。每个上下文创建的时候会被推入<strong>执行上下文栈</strong>。当退出的时候，它会从上下文栈中移除。</p>\n<ul>\n  <li>程序开始运行时，全局上下文就会被创建好。\n    <ul>\n      <li>当执行到 <code>greetUser(\"Mike\")</code> 的时候会为 <code>greetUser()</code> 函数创建一个它的上下文。这个执行上下文会被推入执行上下文栈中。\n        <ul>\n          <li>当 <code>greetUser()</code> 调用 <code>localGreeting()</code>的时候会为该方法创建一个新的上下文。并且在 <code>localGreeting()</code> 退出的时候它的上下文也会从执行栈中弹出并销毁。 程序会从栈中获取下一个上下文并恢复执行， 也就是从 <code>greetUser()</code> 剩下的部分开始执行。</li>\n          <li><code>greetUser()</code> 执行完毕并退出，其上下文也从栈中弹出并销毁。</li>\n        </ul>\n      </li>\n      <li>当 <code>greetUser(\"Teresa\")</code> 开始执行时，程序又会为它创建一个上下文并推入栈顶。\n        <ul>\n          <li>当 <code>greetUser()</code> 调用 <code>localGreeting()</code>的时候另一个上下文被创建并用于运行该函数。 当 <code>localGreeting()</code> 退出的时候它的上下文也从栈中弹出并销毁。 <code>greetUser()</code> 得到恢复并继续执行剩下的部分。</li>\n          <li><code>greetUser()</code> 执行完毕并退出，其上下文也从栈中弹出并销毁。</li>\n        </ul>\n      </li>\n      <li>然后执行到 <code>greetUser(\"Veronica\")</code> 又再为它创建一个上下文并推入栈顶。\n        <ul>\n          <li>当 <code>greetUser()</code> 调用 <code>localGreeting()</code>的时候，另一个上下文被创建用于执行该函数。当 <code>localGreeting()</code>执行完毕，它的上下文也从栈中弹出并销毁。</li>\n          <li><code>greetUser()</code> 执行完毕退出，其上下文也从栈中弹出并销毁。</li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n  <li>主程序退出，全局执行上下文从执行栈中弹出。此时栈中所有的上下文都已经弹出，程序执行完毕。</li>\n</ul>\n<p>以这种方式来使用执行上下文，使得每个程序和函数都能够拥有自己的变量和其他对象。每个上下文还能够额外的跟踪程序中下一行需要执行的代码以及一些对上下文非常重要的信息。以这种方式来使用上下文和上下文栈，使得我们可以对程序运行的一些基础部分进行管理，包括局部和全局变量、函数的调用与返回等。</p>\n<p>关于递归函数——即多次调用自身的函数，需要特别注意：每次递归调用自身都会创建一个新的上下文。这使得 JavaScript 运行时能够追踪递归的层级以及从递归中得到的返回值，但这也意味着每次递归都会消耗内存来创建新的上下文。</p>"}},{"type":"prose","value":{"id":"javascript_运行时","title":"JavaScript 运行时","isH3":false,"content":"<p>在执行 JavaScript 代码的时候，JavaScript 运行时实际上维护了一组用于执行 JavaScript 代码的<strong>代理</strong>。每个代理由一组执行上下文的集合、执行上下文栈、主线程、一组可能创建用于执行 worker 的额外的线程集合、一个任务队列以及一个微任务队列构成。除了主线程（某些浏览器在多个代理之间共享的主线程）之外，其它组成部分对该代理都是唯一的。</p>\n<p>现在我们来更加详细的了解一下运行时是如何工作的。</p>"}},{"type":"prose","value":{"id":"事件循环（event_loops）","title":"事件循环（Event loops）","isH3":true,"content":"<p>每个代理都是由<strong>事件循环</strong>驱动的，事件循环负责收集用事件（包括用户事件以及其他非用户事件等）、对任务进行排队以便在合适的时候执行回调。然后它执行所有处于等待中的 JavaScript 任务（宏任务），然后是微任务，然后在开始下一次循环之前执行一些必要的渲染和绘制操作。</p>\n<p>网页或者 app 的代码和浏览器本身的用户界面程序运行在相同的 **<a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\">线程</a>**中， 共享相同的 <strong>事件循环</strong>。 该线程就是 <strong><a href=\"/zh-CN/docs/Glossary/Main_thread\">主线程</a></strong>，它除了运行网页本身的代码之外，还负责收集和派发用户和其它事件，以及渲染和绘制网页内容等。</p>\n<p>然后，事件循环会驱动发生在浏览器中与用户交互有关的一切，但在这里，对我们来说更重要的是需要了解它是如何负责调度和执行在其线程中执行的每段代码的。</p>\n<p>有如下三种事件循环：</p>\n<dl>\n  <dt id=\"window_事件循环\">Window 事件循环</dt>\n  <dd>\n    <p>window 事件循环驱动所有同源的窗口 (though there are further limits to this as described elsewhere in this article XXXX ????).</p>\n  </dd>\n  <dt id=\"worker_事件循环\">Worker 事件循环</dt>\n  <dd>\n    <p>worker 事件循环顾名思义就是驱动 worker 的事件循环。这包括了所有种类的 worker：最基本的 <a href=\"/zh-CN/docs/Web/API/Web_Workers_API\">web worker</a> 以及 <a href=\"/zh-CN/docs/Web/API/SharedWorker\">shared worker</a> 和 <a href=\"/zh-CN/docs/Web/API/Service_Worker_API\">service worker</a>。 Worker 被放在一个或多个独立于 “主代码” 的代理中。浏览器可能会用单个或多个事件循环来处理给定类型的所有 worker。</p>\n  </dd>\n  <dt id=\"worklet_事件循环\">Worklet 事件循环</dt>\n  <dd>\n    <p><a href=\"/en-US/docs/Web/API/Worklet\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">worklet (en-US)</a> 事件循环用于驱动运行 worklet 的代理。这包含了 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Worklet\"><code>Worklet</code> <small>(en-US)</small></a>、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioWorklet\"><code>AudioWorklet</code> <small>(en-US)</small></a> 以及 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PaintWorklet\"><code>PaintWorklet</code> <small>(en-US)</small></a>。</p>\n  </dd>\n</dl>\n<p>多个同<a href=\"/zh-CN/docs/Glossary/Origin\">源</a>（译者注：此处同源的源应该不是指同源策略中的源，而是指由同一个窗口打开的多个子窗口或同一个窗口中的多个 iframe 等，意味着起源的意思，下一段内容就会对这里进行说明）窗口可能运行在相同的事件循环中，每个队列任务进入到事件循环中以便处理器能够轮流对它们进行处理。记住这里的网络术语 “window” 实际上指的用于运行网页内容的浏览器级容器，包括实际的 window，一个 tab 标签或者一个 frame。</p>\n<p>在特定情况下，同源窗口之间共享事件循环，例如：</p>\n<ul>\n  <li>如果一个窗口打开了另一个窗口，它们可能会共享一个事件循环。</li>\n  <li>如果窗口是包含在 <a href=\"/zh-CN/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> 中，则它可能会和包含它的窗口共享一个事件循环。</li>\n  <li>在多进程浏览器中多个窗口碰巧共享了同一个进程。</li>\n</ul>\n<p>这种特定情况依赖于浏览器的具体实现，各个浏览器可能并不一样。</p>\n<h4 id=\"任务_vs_微任务\">任务 vs 微任务</h4>\n<p>一个<strong>任务</strong>就是指计划由标准机制来执行的任何 JavaScript，如程序的初始化、事件触发的回调等。 除了使用事件，你还可以使用 <a href=\"/zh-CN/docs/Web/API/setTimeout\" title=\"setTimeout()\"><code>setTimeout()</code></a> 或者 <a href=\"/zh-CN/docs/Web/API/setInterval\" title=\"setInterval()\"><code>setInterval()</code></a> 来添加任务**。**</p>\n<p>任务队列和微任务队列的区别很简单，但却很重要：</p>\n<ul>\n  <li>当执行来自任务队列中的任务时，在每一次新的事件循环开始迭代的时候运行时都会执行队列中的每个任务。在每次迭代开始之后加入到队列中的任务需要<strong>在下一次迭代开始之后才会被执行</strong>.</li>\n  <li>每次当一个任务退出且执行上下文为空的时候，微任务队列中的每一个微任务会依次被执行。不同的是它会等到微任务队列为空才会停止执行——即使中途有微任务加入。换句话说，微任务可以添加新的微任务到队列中，并在下一个任务开始执行之前且当前事件循环结束之前执行完所有的微任务。</li>\n</ul>"}},{"type":"prose","value":{"id":"问题","title":"问题","isH3":true,"content":"<p>由于你的代码和浏览器的用户界面运行在同一个线程中，共享同一个事件循环，假如你的代码阻塞了或者进入了无限循环，则浏览器将会卡死。无论是由于 bug 引起还是代码中进行复杂的运算导致的性能降低，都会降低用户的体验。</p>\n<p>当来自多个程序的多个代码对象尝试同时运行的时候，一切都可能变得很慢甚至被阻塞，更不要说浏览器还需要时间来渲染和绘制网站和 UI、处理用户事件等。</p>"}},{"type":"prose","value":{"id":"解决方案","title":"解决方案","isH3":true,"content":"<p>使用 <a href=\"/zh-CN/docs/Web/API/Web_Workers_API\">web workers</a> 可以让主线程另起新的线程来运行脚本，这能够缓解上面的情况。一个设计良好的网站或应用会把一些复杂的或者耗时的操作交给 worker 去做，这样可以让主线程除了更新、布局和渲染网页之外，尽可能少的去做其他事情。</p>\n<p>通过使用像 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\">promises</a> 这样的 <a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous\">异步 JavaScript</a> 技术可以使得主线程在等待请求返回结果的同时继续往下执行，这能够更进一步减轻上面提到的情况。然而，一些更接近于基础功能的代码——比如一些框架代码，可能更需要将代码安排在主线程上一个安全的时间来运行，它与任何请求的结果或者任务无关。</p>\n<p>微任务是另一种解决该问题的方案，通过将代码安排在下一次事件循环开始之前运行而不是必须要等到下一次开始之后才执行，这样可以提供一个更好的访问级别。</p>\n<p>微任务队列已经存在有一段时间了，但之前它仅仅被内部使用来驱动诸如 promise 这些。<code>queueMicrotask()</code>的加入可以让开发者创建一个统一的微任务队列，它能够在任何时候即便是当 JavaScript 执行上下文栈中没有执行上下文剩余时也可以将代码安排在一个安全的时间运行。 在多个实例、所有浏览器以及运行时中，一个标准的微任务队列机制意味着这些微任务可以非常可靠的以相同的顺序执行，从而避免一些潜在的难以发现的错误。</p>"}},{"type":"prose","value":{"id":"更多","title":"更多","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide\">Microtask guide</a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/queueMicrotask\"><code>queueMicrotask()</code></a></li>\n  <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous\">Asynchronous JavaScript</a>\n    <ul>\n      <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Introducing\">General asynchronous programming concepts</a></li>\n      <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Introducing\">Introducing asynchronous JavaScript</a></li>\n      <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous\">Cooperative asynchronous JavaScript: Timeouts and intervals</a></li>\n      <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous/Promises\">Graceful asynchronous programming with Promises</a></li>\n      <li><a href=\"/zh-CN/docs/Learn/JavaScript/Asynchronous\">Choosing the right approach</a></li>\n    </ul>\n  </li>\n</ul>"}}],"toc":[{"text":"介绍","id":"介绍"},{"text":"JavaScript 执行上下文","id":"javascript_执行上下文"},{"text":"JavaScript 运行时","id":"javascript_运行时"},{"text":"更多","id":"更多"}],"summary":"当你在调试的时候，或者在决定如何以最佳的方式为任务队列和微任务队列安排调度顺序的时候，如果你了解关于 JavaScript 运行时是如何在背后执行这一切的，那将对你的理解会非常有帮助。这就是本节涵盖的内容。","popularity":0.0005,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"In depth: Microtasks and the JavaScript runtime environment","locale":"en-US","native":"English (US)"}],"source":{"folder":"zh-cn/web/api/html_dom_api/microtask_guide/in_depth","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/html_dom_api/microtask_guide/in_depth/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/HTML_DOM_API","title":"The HTML DOM API"},{"uri":"/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide","title":"在 JavaScript 中通过 queueMicrotask() 使用微任务"},{"uri":"/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth","title":"深入：微任务与 Javascript 运行时环境"}],"pageTitle":"深入：微任务与 Javascript 运行时环境 - Web API 接口参考 | MDN","noIndexing":false}}