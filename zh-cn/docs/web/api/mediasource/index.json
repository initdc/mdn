{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"MediaSource","mdn_url":"/zh-CN/docs/Web/API/MediaSource","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Media_Source_Extensions_API\">Media Source Extensions API</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/MediaSource\"><code>MediaSource</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>构造函数</summary><ol><li><a href=\"/zh-CN/docs/Web/API/MediaSource/MediaSource\"><code>MediaSource()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a href=\"/zh-CN/docs/Web/API/MediaSource/activeSourceBuffers\"><code>activeSourceBuffers</code></a></li><li><a href=\"/zh-CN/docs/Web/API/MediaSource/duration\"><code>duration</code></a></li><li><a href=\"/zh-CN/docs/Web/API/MediaSource/readyState\"><code>readyState</code></a></li><li><a href=\"/zh-CN/docs/Web/API/MediaSource/sourceBuffers\"><code>sourceBuffers</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/MediaSource/addSourceBuffer\"><code>addSourceBuffer()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaSource/clearLiveSeekableRange\"><code>clearLiveSeekableRange()</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/MediaSource/endOfStream\"><code>endOfStream()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/MediaSource/isTypeSupported\"><code>isTypeSupported()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/MediaSource/removeSourceBuffer\"><code>removeSourceBuffer()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaSource/setLiveSeekableRange\"><code>setLiveSeekableRange()</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>继承</summary><ol><li><a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Media Source Extensions 的相关页面</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLVideoElement/getVideoPlaybackQuality\"><code>HTMLVideoElement.getVideoPlaybackQuality()</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/SourceBuffer\"><code>SourceBuffer</code></a></li><li><a href=\"/zh-CN/docs/Web/API/SourceBufferList\"><code>SourceBufferList</code></a></li><li><a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>TextTrack.sourceBuffer</code></a></li><li><a href=\"/zh-CN/docs/Web/API/URL/createObjectURL\"><code>URL.createObjectURL()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/VideoPlaybackQuality\"><code>VideoPlaybackQuality</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VideoTrack/sourceBuffer\"><code>VideoTrack.sourceBuffer</code> <small>(en-US)</small></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard experimental\" id=\"sect1\"><p><strong>Experimental:</strong> <strong>这是一个实验中的功能</strong><br>此功能某些浏览器尚在开发中，请参考<a href=\"#browser_compatibility\">浏览器兼容性表格</a>以得到在不同浏览器中适合使用的前缀。由于该功能对应的标准文档可能被重新修订，所以在未来版本的浏览器中该功能的语法和行为可能随之改变。</p></div>\n<p><strong><code>MediaSource</code></strong> 是 <a href=\"/zh-CN/docs/Web/API/Media_Source_Extensions_API\">Media Source Extensions API</a> 表示媒体资源 <a href=\"/zh-CN/docs/Web/API/HTMLMediaElement\"><code>HTMLMediaElement</code></a> 对象的接口。<code>MediaSource</code> 对象可以附着在 <a href=\"/zh-CN/docs/Web/API/HTMLMediaElement\"><code>HTMLMediaElement</code></a> 在客户端进行播放。</p>"}},{"type":"prose","value":{"id":"构造函数","title":"构造函数","isH3":false,"content":"<dl>\n  <dt id=\"mediasource\"><a href=\"/zh-CN/docs/Web/API/MediaSource/MediaSource\" title=\"MediaSource()\"><code>MediaSource()</code></a></dt>\n  <dd>\n    <p>创建并且返回一个新的 <code>MediaSource</code> 的空对象（with no associated source buffers）。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"属性","title":"属性","isH3":false,"content":"<dl>\n  <dt id=\"mediasource.sourcebuffers\"><a href=\"/zh-CN/docs/Web/API/MediaSource/sourceBuffers\"><code>MediaSource.sourceBuffers</code></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回一个 <a href=\"/zh-CN/docs/Web/API/SourceBufferList\"><code>SourceBufferList</code></a> 对象，包含了这个 <code>MediaSource</code> 的 <a href=\"/zh-CN/docs/Web/API/SourceBuffer\"><code>SourceBuffer</code></a> 的对象列表。</p>\n  </dd>\n  <dt id=\"mediasource.activesourcebuffers\"><a href=\"/zh-CN/docs/Web/API/MediaSource/activeSourceBuffers\"><code>MediaSource.activeSourceBuffers</code></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>\n      返回一个 <a href=\"/zh-CN/docs/Web/API/SourceBufferList\"><code>SourceBufferList</code></a> 对象，包含了这个 <a href=\"/zh-CN/docs/Web/API/MediaSource/sourceBuffers\"><code>MediaSource.sourceBuffers</code></a> 中的 <a href=\"/zh-CN/docs/Web/API/SourceBuffer\"><code>SourceBuffer</code></a>\n      子集的对象—即提供当前被选中的视频轨（video track），启用的音频轨（audio tracks）以及显示/隐藏的字幕轨（text tracks）的对象列表。\n    </p>\n  </dd>\n  <dt id=\"mediasource.readystate\"><a href=\"/zh-CN/docs/Web/API/MediaSource/readyState\"><code>MediaSource.readyState</code></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p><code>返回一个包含当前 MediaSource</code>状态的集合，即使它当前没有附着到一个 media 元素（<code>closed</code>），或者已附着并准备接收<a href=\"/zh-CN/docs/Web/API/SourceBuffer\"><code>SourceBuffer</code></a> 对象</p>\n  </dd>\n</dl>\n<p>（<code>open</code>），亦或者已附着但这个流已被<a href=\"/zh-CN/docs/Web/API/MediaSource/endOfStream\"><code>MediaSource.endOfStream()</code></a>关闭（<code>ended</code>）。</p>\n<dl>\n  <dt id=\"mediasource.duration\"><a href=\"/zh-CN/docs/Web/API/MediaSource/duration\"><code>MediaSource.duration</code></a></dt>\n  <dd>\n    <p>获取和设置当前正在推流媒体的持续时间。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"方法","title":"方法","isH3":false,"content":"<p><em>从父接口<a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a>上继承而来。</em></p>\n<dl>\n  <dt id=\"mediasource.addsourcebuffer\"><a href=\"/zh-CN/docs/Web/API/MediaSource/addSourceBuffer\"><code>MediaSource.addSourceBuffer()</code></a></dt>\n  <dd>\n    <p>创建一个带有给定 MIME 类型的新的 <a href=\"/zh-CN/docs/Web/API/SourceBuffer\"><code>SourceBuffer</code></a> 并添加到 <code>MediaSource</code> 的 <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>SourceBuffers</code></a> 列表。</p>\n  </dd>\n  <dt id=\"mediasource.removesourcebuffer\"><a href=\"/zh-CN/docs/Web/API/MediaSource/removeSourceBuffer\"><code>MediaSource.removeSourceBuffer()</code></a></dt>\n  <dd>\n    <p>删除指定的 <a href=\"/zh-CN/docs/Web/API/SourceBuffer\"><code>SourceBuffer</code></a> 从这个 <code>MediaSource</code> 对象中的 <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>SourceBuffers</code></a>列表。</p>\n  </dd>\n  <dt id=\"mediasource.endofstream\"><a href=\"/zh-CN/docs/Web/API/MediaSource/endOfStream\"><code>MediaSource.endOfStream()</code></a></dt>\n  <dd>\n    <p>表示流的结束。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"静态方法","title":"静态方法","isH3":false,"content":"<dl>\n  <dt id=\"mediasource.istypesupported\"><a href=\"/zh-CN/docs/Web/API/MediaSource/isTypeSupported\"><code>MediaSource.isTypeSupported()</code></a></dt>\n  <dd>\n    <p>返回一个 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code> <small>(en-US)</small></a> 值表明给定的 MIME 类型是否被当前的浏览器支持——这意味着是否可以成功的创建这个 MIME 类型的 <a href=\"/zh-CN/docs/Web/API/SourceBuffer\"><code>SourceBuffer</code></a> 对象。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<p>这个例子尽可能快地逐块加载视频，并在加载好后立刻播放。以下片段基于 Nick Desaulniers 编写的一个简单示例（<a href=\"https://nickdesaulniers.github.io/netfix/demo/bufferAll.html\" class=\"external\" rel=\" noopener\">查看完整的在线演示</a>，或者<a href=\"https://github.com/nickdesaulniers/netfix/blob/gh-pages/demo/bufferAll.html\" class=\"external\" rel=\" noopener\">下载源代码</a>进行进一步研究）。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> video <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'video'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> assetURL <span class=\"token operator\">=</span> <span class=\"token string\">'frag_bunny.mp4'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Need to be specific for Blink regarding codecs</span>\n<span class=\"token comment\">// ./mp4info frag_bunny.mp4 | grep Codec</span>\n<span class=\"token keyword\">const</span> mimeCodec <span class=\"token operator\">=</span> <span class=\"token string\">'video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'MediaSource'</span> <span class=\"token keyword\">in</span> window <span class=\"token operator\">&amp;&amp;</span> MediaSource<span class=\"token punctuation\">.</span><span class=\"token function\">isTypeSupported</span><span class=\"token punctuation\">(</span>mimeCodec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> mediaSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//console.log(mediaSource.readyState); // closed</span>\n  video<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>mediaSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  mediaSource<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sourceopen'</span><span class=\"token punctuation\">,</span> sourceOpen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Unsupported MIME type or codec: '</span><span class=\"token punctuation\">,</span> mimeCodec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sourceOpen</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//console.log(this.readyState); // open</span>\n  <span class=\"token keyword\">const</span> mediaSource <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> sourceBuffer <span class=\"token operator\">=</span> mediaSource<span class=\"token punctuation\">.</span><span class=\"token function\">addSourceBuffer</span><span class=\"token punctuation\">(</span>mimeCodec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fetchAB</span><span class=\"token punctuation\">(</span>assetURL<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">buf</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sourceBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updateend'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mediaSource<span class=\"token punctuation\">.</span><span class=\"token function\">endOfStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      video<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//console.log(mediaSource.readyState); // ended</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sourceBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">appendBuffer</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fetchAB</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">;</span>\n  xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  xhr<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">'arraybuffer'</span><span class=\"token punctuation\">;</span>\n  xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/media-source/#mediasource","title":"Media Source Extensions™"}],"query":"api.MediaSource"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.MediaSource","dataURL":"/zh-CN/docs/Web/API/MediaSource/bcd.json"}},{"type":"prose","value":{"id":"参见","title":"参见","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/SourceBuffer\"><code>SourceBuffer</code></a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/SourceBufferList\"><code>SourceBufferList</code></a></li>\n</ul>"}}],"toc":[{"text":"构造函数","id":"构造函数"},{"text":"属性","id":"属性"},{"text":"方法","id":"方法"},{"text":"静态方法","id":"静态方法"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"参见","id":"参见"}],"summary":"MediaSource 是 Media Source Extensions API 表示媒体资源 HTMLMediaElement 对象的接口。MediaSource 对象可以附着在 HTMLMediaElement 在客户端进行播放。","popularity":0.0006,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"MediaSource","locale":"en-US","native":"English (US)"},{"title":"MediaSource","locale":"fr","native":"Français"},{"title":"MediaSource","locale":"ja","native":"日本語"},{"title":"MediaSource","locale":"ru","native":"Русский"},{"title":"MediaSource","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/web/api/mediasource","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/mediasource/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/MediaSource","title":"MediaSource"}],"pageTitle":"MediaSource - Web API 接口参考 | MDN","noIndexing":false}}