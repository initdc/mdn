{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"File and Directory Entries API support in Firefox","mdn_url":"/zh-CN/docs/Web/API/File_and_Directory_Entries_API/Firefox_support","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard warning\" id=\"sect1\"><p><strong>非标准:</strong> 该特性是非标准的，请尽量不要在生产环境中使用它！</p></div>\n<p>创建原始文件系统 API 是为了让浏览器实现对访问用户存储设备上沙箱虚拟文件系统的支持。标准化规范的工作早在 2012 年就被放弃了，但到那时，谷歌 Chrome 包含了自己的 API 实现。随着时间的推移，许多流行的站点和 Web 应用程序开始使用它，通常不提供任何退回到标准 API 的方法，甚至在使用之前也没有检查 API 是否可用。相反，Mozilla 选择实现其他 api，这些 api 可以用来解决许多相同的问题，比如<a href=\"/zh-CN/docs/Web/API/IndexedDB_API\">IndexedDB</a>;查看博客文章，<a href=\"https://hacks.mozilla.org/2012/07/why-no-filesystem-api-in-firefox/\" class=\"external\" rel=\" noopener\">为什么 Firefox 中没有文件系统 API</a>?更多的见解。</p>\n<p>这导致许多流行的网站无法在 Chrome 以外的浏览器上正常运行。因此，我们尝试创建一个规范，提供可以达成共识的谷歌 API 的特性。结果是<a href=\"/zh-CN/docs/Web/API/File_and_Directory_Entries_API\">文件和目录 API 条目</a>。Chrome 提供的这个 API 子集还没有完全指定;但是，出于 web 兼容性的原因，决定在 Firefox 中实现 API 的一个子集;这是在 Firefox 50 中引入的。</p>\n<p>本文描述了文件和目录条目 API 的 Firefox 实现与其他实现和/或规范的不同之处。</p>"}},{"type":"prose","value":{"id":"chrome_规范偏差","title":"Chrome 规范偏差","isH3":false,"content":"<p>最大的兼容性问题仍然存在，Chrome 仍然使用旧的名称为许多接口的 API，因为他们实现了一个相关的，但不同的规范：</p>\n<table>\n  <thead>\n    <tr>\n      <th>规范名称</th>\n      <th>Google Chrome 使用的名称</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>FileSystemDirectoryEntry</code></td>\n      <td><code>DirectoryEntry</code></td>\n    </tr>\n    <tr>\n      <td><code>FileSystemDirectoryEntrySync</code></td>\n      <td><code>DirectoryEntrySync</code></td>\n    </tr>\n    <tr>\n      <td><code>FileSystemDirectoryReader</code></td>\n      <td><code>DirectoryReader</code></td>\n    </tr>\n    <tr>\n      <td><code>FileSystemDirectoryReaderSync</code></td>\n      <td><code>DirectoryReaderSync</code></td>\n    </tr>\n    <tr>\n      <td><code>FileSystemEntry</code></td>\n      <td><code>Entry</code></td>\n    </tr>\n    <tr>\n      <td><code>FileSystemEntrySync</code></td>\n      <td><code>EntrySync</code></td>\n    </tr>\n    <tr>\n      <td><code>FileSystemFileEntry</code></td>\n      <td><code>FileEntry</code></td>\n    </tr>\n    <tr>\n      <td><code>FileSystemFileEntrySync</code></td>\n      <td><code>FileEntrySync</code></td>\n    </tr>\n  </tbody>\n</table>\n<p>请确保在代码中考虑到这一点，允许使用这两个名称。希望 Chrome 能很快更新，使用新的名字！</p>\n<p>为了确保你的代码可以在 Chrome 和其他浏览器上运行，你可以包括如下代码：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> FileSystemDirectoryEntry <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>FileSystemDirectoryEntry <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>DirectoryEntry<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> FileSystemEntry <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>FileSystemEntry <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>Entry<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"firefox_中的限制","title":"Firefox 中的限制","isH3":false,"content":"<p>接下来，让我们看看 API 的 Firefox 实现的局限性。概括地说，这些限制可以概括如下：</p>\n<ul>\n  <li>脚本内容不能创建文件系统或启动对文件系统的访问。目前只有两种方法可以访问文件系统条目：\n    <ul>\n      <li><a href=\"/zh-CN/docs/Web/HTML/Element/Input\"><code>&lt;input&gt;</code></a>元素，使用<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLInputElement/webkitEntries\"><code>HTMLInputElement.webkitEntries</code> <small>(en-US)</small></a>属性访问<a href=\"/zh-CN/docs/Web/API/FileSystemEntry\"><code>FileSystemEntry</code></a>对象数组，这些对象描述可以读取的文件系统条目。</li>\n      <li>通过调用<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DataTransferItem/webkitGetAsEntry\"><code>DataTransferItem.getAsEntry()</code> <small>(en-US)</small></a>方法来使用拖放操作，该方法允许为拖放区域中的文件获取<a href=\"/zh-CN/docs/Web/API/FileSystemFileEntry\"><code>FileSystemFileEntry</code></a>或<a href=\"/zh-CN/docs/Web/API/FileSystemDirectoryEntry\"><code>FileSystemDirectoryEntry</code></a>。</li>\n    </ul>\n  </li>\n  <li>你不能用 <a href=\"/en-US/docs/Web/API/File_and_Directory_Entries_API#requestfilesystem\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">LocalFileSystem.requestFileSystem() (en-US)</a> 方法来访问指定的本地文件系统。</li>\n  <li>没有实现 <a href=\"/en-US/docs/Web/API/File_and_Directory_Entries_API#resolvelocalfilesystemurl\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">LocalFileSystem.resolveLocalFileSystemURL() (en-US)</a> 方法。</li>\n  <li>只实现接口的异步版本。任何名称以 \"<code>Sync\"</code> 结尾的接口都不可用。</li>\n  <li>Firefox 只支持从文件系统中的文件读取。你不能用他们写入。特别是，用来创建<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/FileSystemFileEntry/createWriter\"><code>FileSystemFileEntry.createWriter()</code> <small>(en-US)</small></a>来处理文件写入的<a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>FileWriter</code></a>方法没有实现，只会返回一个错误。</li>\n  <li>Firefox 不支持 <code>\"filesystem:\"</code> URL 方案。</li>\n</ul>"}},{"type":"prose","value":{"id":"另请参阅","title":"另请参阅","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/File_and_Directory_Entries_API\">文件和目录 API 条目</a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/File_and_Directory_Entries_API/Introduction\">介绍文件和目录 API 条目</a></li>\n  <li><a href=\"https://wicg.github.io/entries-api/\" class=\"external\" rel=\" noopener\">文件和目录 API 条目</a>的最新规范，但仍然是早期规范。</li>\n  <li>文件 API 的原始规范：<a href=\"https://dev.w3.org/2009/dap/file-system/file-dir-sys.html\" class=\"external\" rel=\" noopener\">目录和系统</a>(通常称为“FileSystem API”);谷歌 Chrome 是唯一一个实现这个废弃 API 的浏览器。</li>\n</ul>"}}],"toc":[{"text":"Chrome 规范偏差","id":"chrome_规范偏差"},{"text":"Firefox 中的限制","id":"firefox_中的限制"},{"text":"另请参阅","id":"另请参阅"}],"summary":"创建原始文件系统 API 是为了让浏览器实现对访问用户存储设备上沙箱虚拟文件系统的支持。标准化规范的工作早在 2012 年就被放弃了，但到那时，谷歌 Chrome 包含了自己的 API 实现。随着时间的推移，许多流行的站点和 Web 应用程序开始使用它，通常不提供任何退回到标准 API 的方法，甚至在使用之前也没有检查 API 是否可用。相反，Mozilla 选择实现其他 api，这些 api 可以用来解决许多相同的问题，比如IndexedDB;查看博客文章，为什么 Firefox 中没有文件系统 API?更多的见解。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"File and Directory Entries API support in Firefox","locale":"en-US","native":"English (US)"}],"source":{"folder":"zh-cn/web/api/file_and_directory_entries_api/firefox_support","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/file_and_directory_entries_api/firefox_support/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/File_and_Directory_Entries_API","title":"文件与目录条目 API"},{"uri":"/zh-CN/docs/Web/API/File_and_Directory_Entries_API/Firefox_support","title":"File and Directory Entries API support in Firefox"}],"pageTitle":"File and Directory Entries API support in Firefox - Web API 接口参考 | MDN","noIndexing":false}}