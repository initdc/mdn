{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Worker","mdn_url":"/zh-CN/docs/Web/API/Worker","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Web_Workers_API\">Web Workers API</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/Worker\"><code>Worker</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>构造函数</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Worker/Worker\"><code>Worker()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Worker/postMessage\"><code>postMessage()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Worker/terminate\"><code>terminate()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>事件</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Worker/error_event\"><code>error</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/Worker/message_event\"><code>message</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Worker/messageerror_event\"><code>messageerror</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>继承</summary><ol><li><a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Web Workers API 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/DedicatedWorkerGlobalScope\"><code>DedicatedWorkerGlobalScope</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ServiceWorker\"><code>ServiceWorker</code></a></li><li><a href=\"/zh-CN/docs/Web/API/SharedWorker\"><code>SharedWorker</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorkerGlobalScope\"><code>SharedWorkerGlobalScope</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/WorkerGlobalScope\"><code>WorkerGlobalScope</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WorkerLocation\"><code>WorkerLocation</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WorkerNavigator\"><code>WorkerNavigator</code> <small>(en-US)</small></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Worker 接口是 <a href=\"/zh-CN/docs/Web/API/Web_Workers_API\">Web Workers API</a> 的一部分，指的是一种可由脚本创建的后台任务，任务执行中可以向其创建者收发信息。要创建一个 Worker **，**只须调用 <code>Worker(URL)</code> 构造函数，函数参数 <code>URL</code> 为指定的脚本。</p>\n<p>Worker 也可以创建新的 Worker，当然，所有 Worker 必须与其创建者<a href=\"/zh-CN/docs/Web/Security/Same-origin_policy\">同源</a>（注意：<a href=\"https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/5R3B4RN4GHU\" class=\"external\" rel=\" noopener\">Blink</a>暂时不支持嵌套 Worker）。</p>\n<p>需要注意的是，不是所有函数和构造函数 (或者说…类) 都可以在 Worker 中使用。具体参考页面 <a href=\"/zh-CN/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers\">Worker 所支持的函数和类</a>。Worker 可以使用 <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> 发送请求，但是请求的 <code>responseXML</code> 与 <code>channel</code> 两个属性值始终返回 <code>null</code> （<code>fetch</code> 仍可正常使用，没有类似的限制）。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 如果你要在火狐浏览器的扩展使用 Worker 访问 <a href=\"/zh-CN/docs/Mozilla/js-ctypes\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">js-ctypes</a>，应使用 <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>ChromeWorker</code></a> 对象来替代。(译者注：这里没有看懂，希望有人能驳正，或添加说明)</p>\n</div>"}},{"type":"prose","value":{"id":"构造函数","title":"构造函数","isH3":false,"content":"<dl>\n  <dt id=\"worker\"><a href=\"/zh-CN/docs/Web/API/Worker/Worker\" title=\"Worker()\"><code>Worker()</code></a></dt>\n  <dd>\n    <p>创建一个专用 Web worker，它只执行 URL 指定的脚本。使用 <a href=\"/zh-CN/docs/Web/API/Blob\">Blob URL</a> 作为参数亦可。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"属性","title":"属性","isH3":false,"content":"<p><em>继承</em>父对象*<a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a> 的属性，以及实现对象 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Worker\"><code>AbstractWorker</code> <small>(en-US)</small></a>的属性。*</p>"}},{"type":"prose","value":{"id":"事件句柄","title":"<em>事件句柄</em>","isH3":true,"content":"<dl>\n  <dt id=\"abstractworker.onerror_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Worker/error_event\"><code>AbstractWorker.onerror</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>当<a href=\"/zh-CN/docs/Web/API/ErrorEvent\"><code>ErrorEvent</code></a> 类型的事件冒泡到 worker 时，事件监听函数 <a href=\"/zh-CN/docs/Web/API/EventTarget/addEventListener\"><code>EventListener</code></a> 被调用。它继承于 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Worker\"><code>AbstractWorker</code> <small>(en-US)</small></a>.</p>\n  </dd>\n  <dt id=\"worker.onmessage\"><a href=\"/zh-CN/docs/Web/API/Worker/message_event\"><code>Worker.onmessage</code></a></dt>\n  <dd>\n    <p>当<a href=\"/zh-CN/docs/Web/API/MessageEvent\"><code>MessageEvent</code></a>类型的事件冒泡到 worker 时，事件监听函数 <a href=\"/zh-CN/docs/Web/API/EventTarget/addEventListener\"><code>EventListener</code></a> 被调用. 例如，一个消息通过 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DedicatedWorkerGlobalScope/postMessage\"><code>DedicatedWorkerGlobalScope.postMessage</code> <small>(en-US)</small></a>，从执行者发送到父页面对象，消息保存在事件对象的 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MessageEvent/data\"><code>data</code> <small>(en-US)</small></a> 属性中。</p>\n  </dd>\n  <dt id=\"worker.onmessageerror\"><a href=\"/zh-CN/docs/Web/API/Worker/messageerror_event\"><code>Worker.onmessageerror</code></a></dt>\n  <dd>\n    <p>当<code><a href=\"/zh-CN/docs/Web/Reference/Events/messageerror\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">messageerror</a></code> 类型的事件发生时，对应的<code><a href=\"/zh-CN/docs/Web/Reference/Events/Event_handlers\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">event handler</a></code> 代码被调用。</p>\n  </dd>\n</dl>","titleAsText":"事件句柄"}},{"type":"prose","value":{"id":"方法","title":"方法","isH3":false,"content":"<p><em>继承</em>父对象*<a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a> 的方法，以及实现对象 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Worker\"><code>AbstractWorker</code> <small>(en-US)</small></a>的方法。*</p>\n<dl>\n  <dt id=\"worker.postmessage\"><a href=\"/zh-CN/docs/Web/API/Worker/postMessage\"><code>Worker.postMessage()</code></a></dt>\n  <dd>\n    <p>发送一条消息到最近的外层对象，消息可由任何 JavaScript 对象组成。</p>\n  </dd>\n  <dt id=\"worker.terminate\"><a href=\"/zh-CN/docs/Web/API/Worker/terminate\"><code>Worker.terminate()</code></a></dt>\n  <dd>\n    <p>立即终止 worker。该方法不会给 worker 留下任何完成操作的机会；就是简单的立即停止。Service Woker 不支持这个方法。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<p>下面的代码通过构造函数 <a href=\"/zh-CN/docs/Web/API/Worker/Worker\" title=\"Worker()\"><code>Worker()</code></a> 创建了一个 <a href=\"/zh-CN/docs/Web/API/Worker\" aria-current=\"page\"><code>Worker</code></a> 对象。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myWorker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">'worker.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> first <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#number1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> second <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#number2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfirst<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onchange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  myWorker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>second<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Message posted to worker'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>完整的示例，请查阅 <a href=\"https://github.com/mdn/simple-web-worker\" class=\"external\" rel=\" noopener\">Basic dedicated worker example</a> (<a href=\"https://mdn.github.io/simple-web-worker/\" class=\"external\" rel=\" noopener\">run dedicated worker</a>).</p>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://html.spec.whatwg.org/multipage/workers.html#dedicated-workers-and-the-worker-interface","title":"HTML Standard"}],"query":"api.Worker"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.Worker","dataURL":"/zh-CN/docs/Web/API/Worker/bcd.json"}},{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>不同类型的 worker 兼容度不一致，详细参考具体定义的页面。</p>"}},{"type":"prose","value":{"id":"跨域行为的错误事件","title":"跨域行为的错误事件","isH3":true,"content":"<p>浏览器的早期版本中，加载跨域的执行者脚本导致 <code>SecurityError</code>事件。根据规范的变更，而新版本的浏览器只有<code><a href=\"/en-US/docs/Web/API/Element/error_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">error (en-US)</a></code>事件发生</p>"}},{"type":"prose","value":{"id":"相关链接","title":"相关链接","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/Using_web_workers\">Using web workers</a></li>\n  <li><a href=\"/en-US/DOM/Worker/Functions_available_to_workers\">Functions available to workers</a></li>\n  <li>Other kind of workers: <a href=\"/zh-CN/docs/Web/API/SharedWorker\"><code>SharedWorker</code></a> and <a href=\"/en-US/docs/Web/API/Service_Worker_API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">ServiceWorker (en-US)</a>.</li>\n  <li>Non-standard, Gecko-specific workers: <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>ChromeWorker</code></a>, used by extensions.</li>\n</ul>"}}],"toc":[{"text":"构造函数","id":"构造函数"},{"text":"属性","id":"属性"},{"text":"方法","id":"方法"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"相关链接","id":"相关链接"}],"summary":"Worker 接口是 Web Workers API 的一部分，指的是一种可由脚本创建的后台任务，任务执行中可以向其创建者收发信息。要创建一个 Worker **，**只须调用 Worker(URL) 构造函数，函数参数 URL 为指定的脚本。","popularity":0.0009,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Worker","locale":"en-US","native":"English (US)"},{"title":"Worker","locale":"es","native":"Español"},{"title":"Worker","locale":"fr","native":"Français"},{"title":"Worker","locale":"ja","native":"日本語"},{"title":"Worker","locale":"ko","native":"한국어"},{"title":"Worker","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Worker","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/api/worker","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/worker/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/Worker","title":"Worker"}],"pageTitle":"Worker - Web API 接口参考 | MDN","noIndexing":false}}