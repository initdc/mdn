{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"OscillatorNode","mdn_url":"/zh-CN/docs/Web/API/OscillatorNode","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Web_Audio_API\">Web Audio API</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>构造函数</summary><ol><li><a href=\"/zh-CN/docs/Web/API/OscillatorNode/OscillatorNode\"><code>OscillatorNode()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a href=\"/zh-CN/docs/Web/API/OscillatorNode/detune\"><code>detune</code></a></li><li><a href=\"/zh-CN/docs/Web/API/OscillatorNode/frequency\"><code>frequency</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OscillatorNode/type\"><code>type</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/OscillatorNode/setPeriodicWave\"><code>setPeriodicWave()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>继承</summary><ol><li><a href=\"/zh-CN/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioNode\"><code>AudioNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Web Audio API 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/AnalyserNode\"><code>AnalyserNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioContext\"><code>AudioContext</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioDestinationNode\"><code>AudioDestinationNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioListener\"><code>AudioListener</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioNode\"><code>AudioNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioParam\"><code>AudioParam</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioProcessingEvent\"><code>AudioProcessingEvent</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioWorklet\"><code>AudioWorklet</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioWorkletGlobalScope\"><code>AudioWorkletGlobalScope</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a></li><li><a href=\"/zh-CN/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a></li><li><a href=\"/zh-CN/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ChannelMergerNode\"><code>ChannelMergerNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ChannelSplitterNode\"><code>ChannelSplitterNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ConstantSourceNode\"><code>ConstantSourceNode</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/ConvolverNode\"><code>ConvolverNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DelayNode\"><code>DelayNode</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/DynamicsCompressorNode\"><code>DynamicsCompressorNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/GainNode\"><code>GainNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IIRFilterNode\"><code>IIRFilterNode</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStreamAudioDestinationNode\"><code>MediaStreamAudioDestinationNode</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/MediaStreamAudioSourceNode\"><code>MediaStreamAudioSourceNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioCompletionEvent\"><code>OfflineAudioCompletionEvent</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/OfflineAudioContext\"><code>OfflineAudioContext</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PannerNode\"><code>PannerNode</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/StereoPannerNode\"><code>StereoPannerNode</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/WaveShaperNode\"><code>WaveShaperNode</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>OscillatorNode</code></strong> 接口表示一个振荡器，它产生一个周期的波形信号（如正弦波）。它是一个 <a href=\"/zh-CN/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a> 音频处理模块，这个模块会生成一个指定频率的波形信号（即一个固定的音调）</p>\n<p>一个 <code>OscillatorNode</code> 对象是通过 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/BaseAudioContext/createOscillator\"><code>AudioContext.createOscillator()</code> <small>(en-US)</small></a> 方法创建的。它总是有一个输出，但没有输入。它的基础属性（定义见 <a href=\"/zh-CN/docs/Web/API/AudioNode\"><code>AudioNode</code></a> ）默认如下：</p>\n<table class=\"properties\">\n  <tbody>\n    <tr>\n      <th scope=\"row\">Number of inputs</th>\n      <td><code>0</code></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Number of outputs</th>\n      <td><code>1</code></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Channel count mode</th>\n      <td><code>max</code></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Channel count</th>\n      <td><code>2</code> (not used in the default count mode)</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Channel interpretation</th>\n      <td><code>speakers</code></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"构造函数","title":"构造函数","isH3":false,"content":"<dl>\n  <dt id=\"oscillatornode\"><a href=\"/zh-CN/docs/Web/API/OscillatorNode/OscillatorNode\" title=\"OscillatorNode()\"><code>OscillatorNode()</code></a></dt>\n  <dd>\n    <p>创建一个 OscillatorNode 对象的示例，为 node<a href=\"#%E5%B1%9E%E6%80%A7\">属性</a>提供可选的一个定义默认值的对象。如果默认值可接受，你可以简单地调用<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/BaseAudioContext/createOscillator\"><code>AudioContext.createOscillator()</code> <small>(en-US)</small></a>工厂方法。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"属性","title":"属性","isH3":false,"content":"<p><em>继承自父类</em> <em><a href=\"/zh-CN/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a>，并添加下列属性：</em></p>\n<dl>\n  <dt id=\"oscillatornode.frequency\"><a href=\"/zh-CN/docs/Web/API/OscillatorNode/frequency\"><code>OscillatorNode.frequency</code></a></dt>\n  <dd>\n    <p>一个 <a href=\"/zh-CN/docs/Web/API/AudioParam#a-rate\">a-rate</a> <a href=\"/zh-CN/docs/Web/API/AudioParam\"><code>AudioParam</code></a> 对象的属性代表了振动的频率（单位为赫兹 hertz） (虽然返回的<code>AudioParam 是只读的，但是它所表示的值是可以修改的</code>)。默认值是 440 Hz (基本的中 A 音高).</p>\n  </dd>\n  <dt id=\"oscillatornode.detune\"><a href=\"/zh-CN/docs/Web/API/OscillatorNode/detune\"><code>OscillatorNode.detune</code></a></dt>\n  <dd>\n    <p>一个 <a href=\"/zh-CN/docs/Web/API/AudioParam#a-rate\">a-rate</a> <a href=\"/zh-CN/docs/Web/API/AudioParam\"><code>AudioParam</code></a> 对象的属性代表振动的音高微调（单位是 cent 音分） (虽然返回的<code>AudioParam 是只读的，但是它所表示的值是可以修改的</code>).。默认值是 0。</p>\n  </dd>\n  <dt id=\"oscillatornode.type_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OscillatorNode/type\"><code>OscillatorNode.type</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>一个字符串，决定 <code>OscillatorNode 播放的声音的周期波形</code>; 它的值可以是基础值中的一个或者用户使用 <a href=\"/zh-CN/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a>。不同的波形可以产生不同的声调。基础值有 <code>\"sine\"</code>、<code>\"square\"</code>、<code>\"sawtooth\"</code>、<code>\"triangle\"</code> 和 <code>\"custom\"</code>。默认值是 <code>\"sine\"</code>。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"方法","title":"方法","isH3":false,"content":"<p><em>继承自父级，</em> <em><a href=\"/zh-CN/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a></em>, 自有方法如下：</p>\n<dl>\n  <dt id=\"oscillatornode.setperiodicwave\"><a href=\"/zh-CN/docs/Web/API/OscillatorNode/setPeriodicWave\"><code>OscillatorNode.setPeriodicWave()</code></a></dt>\n  <dd>\n    <p>设置一个 <a href=\"/zh-CN/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a> ,它描述了一个周期的波形常常替代标准波形之一; 调用这个方法来设置用户自定义的波形。它取代了已经废弃了的 <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>OscillatorNode.setWaveTable()</code></a> 方法。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<p>下面示例展示了 <a href=\"/zh-CN/docs/Web/API/AudioContext\"><code>AudioContext</code></a> 的基本使用 来创建一个 oscillator 节点 并使用它来播放音乐。这是已经在运行的例子，可以看这里 <a href=\"https://mdn.github.io/violent-theremin/\" class=\"external\" rel=\" noopener\">Violent Theremin demo</a> (<a href=\"https://github.com/mdn/violent-theremin/blob/gh-pages/scripts/app.js\" class=\"external\" rel=\" noopener\">see app.js</a> 是相关代码).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// create web audio api context</span>\n<span class=\"token keyword\">var</span> audioCtx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>AudioContext <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>webkitAudioContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create Oscillator node</span>\n<span class=\"token keyword\">var</span> oscillator <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createOscillator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\noscillator<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'square'</span><span class=\"token punctuation\">;</span>\noscillator<span class=\"token punctuation\">.</span>frequency<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">440</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// value in hertz</span>\noscillator<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noscillator<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://webaudio.github.io/web-audio-api/#OscillatorNode","title":"Web Audio API"}],"query":"api.OscillatorNode"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.OscillatorNode","dataURL":"/zh-CN/docs/Web/API/OscillatorNode/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Using the Web Audio API (en-US)</a></li>\n</ul>"}}],"toc":[{"text":"构造函数","id":"构造函数"},{"text":"属性","id":"属性"},{"text":"方法","id":"方法"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"See also","id":"see_also"}],"summary":"OscillatorNode 接口表示一个振荡器，它产生一个周期的波形信号（如正弦波）。它是一个 AudioScheduledSourceNode 音频处理模块，这个模块会生成一个指定频率的波形信号（即一个固定的音调）","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"OscillatorNode","locale":"en-US","native":"English (US)"},{"title":"OscillatorNode","locale":"fr","native":"Français"},{"title":"OscillatorNode","locale":"ja","native":"日本語"}],"source":{"folder":"zh-cn/web/api/oscillatornode","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/oscillatornode/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/OscillatorNode","title":"OscillatorNode"}],"pageTitle":"OscillatorNode - Web API 接口参考 | MDN","noIndexing":false}}