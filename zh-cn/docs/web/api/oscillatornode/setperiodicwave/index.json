{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"OscillatorNode.setPeriodicWave()","mdn_url":"/zh-CN/docs/Web/API/OscillatorNode/setPeriodicWave","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Web_Audio_API\">Web Audio API</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>构造函数</summary><ol><li><a href=\"/zh-CN/docs/Web/API/OscillatorNode/OscillatorNode\"><code>OscillatorNode()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a href=\"/zh-CN/docs/Web/API/OscillatorNode/detune\"><code>detune</code></a></li><li><a href=\"/zh-CN/docs/Web/API/OscillatorNode/frequency\"><code>frequency</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OscillatorNode/type\"><code>type</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><em><code>setPeriodicWave()</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>继承</summary><ol><li><a href=\"/zh-CN/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioNode\"><code>AudioNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Web Audio API 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/AnalyserNode\"><code>AnalyserNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioBuffer\"><code>AudioBuffer</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioBufferSourceNode\"><code>AudioBufferSourceNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioContext\"><code>AudioContext</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioDestinationNode\"><code>AudioDestinationNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioListener\"><code>AudioListener</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioNode\"><code>AudioNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioParam\"><code>AudioParam</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioProcessingEvent\"><code>AudioProcessingEvent</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioScheduledSourceNode\"><code>AudioScheduledSourceNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioWorklet\"><code>AudioWorklet</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioWorkletGlobalScope\"><code>AudioWorkletGlobalScope</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioWorkletNode\"><code>AudioWorkletNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AudioWorkletProcessor\"><code>AudioWorkletProcessor</code></a></li><li><a href=\"/zh-CN/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a></li><li><a href=\"/zh-CN/docs/Web/API/BiquadFilterNode\"><code>BiquadFilterNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ChannelMergerNode\"><code>ChannelMergerNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ChannelSplitterNode\"><code>ChannelSplitterNode</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ConstantSourceNode\"><code>ConstantSourceNode</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/ConvolverNode\"><code>ConvolverNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DelayNode\"><code>DelayNode</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/DynamicsCompressorNode\"><code>DynamicsCompressorNode</code></a></li><li><a href=\"/zh-CN/docs/Web/API/GainNode\"><code>GainNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IIRFilterNode\"><code>IIRFilterNode</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/MediaElementAudioSourceNode\"><code>MediaElementAudioSourceNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStreamAudioDestinationNode\"><code>MediaStreamAudioDestinationNode</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/MediaStreamAudioSourceNode\"><code>MediaStreamAudioSourceNode</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OfflineAudioCompletionEvent\"><code>OfflineAudioCompletionEvent</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/OfflineAudioContext\"><code>OfflineAudioContext</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PannerNode\"><code>PannerNode</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/StereoPannerNode\"><code>StereoPannerNode</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/WaveShaperNode\"><code>WaveShaperNode</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/zh-CN/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code></a> 接口的 <strong><code>setPeriodicWave()</code></strong> 方法用来指向 <a href=\"/zh-CN/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a>，PeriodicWave 定义了一个周期性波形能够形成 oscillator 的输出，当<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/OscillatorNode/type\"><code>type</code> <small>(en-US)</small></a> 是 <code>custom</code> 的时候。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 该方法取代了废弃的 <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>OscillatorNode.setWaveTable()</code></a>.</p>\n</div>"}},{"type":"prose","value":{"id":"语法","title":"语法","isH3":false,"content":"<pre class=\"notranslate\">OscillatorNode.setPeriodicWave(wave);\n</pre>"}},{"type":"prose","value":{"id":"参数","title":"参数","isH3":true,"content":"<dl>\n  <dt id=\"wave\"><code>wave</code></dt>\n  <dd>\n    <p>一个 <a href=\"/zh-CN/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a> 对象，表示特定的波形用来形成 oscillator 的输出。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"返回值","title":"返回值","isH3":true,"content":"<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<p>下面示例说明了 <code>createPeriodicWave() 方法的简单使用</code>, 从一个周期波形中重新生成了一个正弦波形。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> real <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> imag <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ac <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> osc <span class=\"token operator\">=</span> ac<span class=\"token punctuation\">.</span><span class=\"token function\">createOscillator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nreal<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nimag<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nreal<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nimag<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> wave <span class=\"token operator\">=</span> ac<span class=\"token punctuation\">.</span><span class=\"token function\">createPeriodicWave</span><span class=\"token punctuation\">(</span>real<span class=\"token punctuation\">,</span> imag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nosc<span class=\"token punctuation\">.</span><span class=\"token function\">setPeriodicWave</span><span class=\"token punctuation\">(</span>wave<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nosc<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>ac<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nosc<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nosc<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这段代码可以运行因为通过定义一个正弦波形使得声音包含了基础的音调。</p>\n<p>这里，我们用两个值创建一个<a href=\"/zh-CN/docs/Web/API/PeriodicWave\"><code>PeriodicWave</code></a>。第一个值是直流偏移，是 oscillator 开始的时候的值。这里 0 很合适，因为我们想要在 [-1.0; 1.0] 这个范围的中间值开始。</p>\n<p>第二个和后面的值是正弦和余弦内容。可以把它看做傅里叶变换的结果，使得可以从时间阈值得到频率阈值。这里通过 <code>createPeriodicWave() 方法，可以指定频率，并且浏览器执行逆傅里叶变换来得到一个时间阈值缓冲。</code>Here, we only set one component at full volume (1.0) on the fundamental tone, so we get a sine wave.</p>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://webaudio.github.io/web-audio-api/#dom-oscillatornode-setperiodicwave","title":"Web Audio API"}],"query":"api.OscillatorNode.setPeriodicWave"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.OscillatorNode.setPeriodicWave","dataURL":"/zh-CN/docs/Web/API/OscillatorNode/setPeriodicWave/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Using the Web Audio API (en-US)</a></li>\n  <li><a href=\"/en-US/docs/Web/API/BaseAudioContext/createPeriodicWave\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">AudioContext.createPeriodicWave (en-US)</a></li>\n</ul>"}}],"toc":[{"text":"语法","id":"语法"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"See also","id":"see_also"}],"summary":"OscillatorNode 接口的 setPeriodicWave() 方法用来指向 PeriodicWave，PeriodicWave 定义了一个周期性波形能够形成 oscillator 的输出，当type (en-US) 是 custom 的时候。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"OscillatorNode.setPeriodicWave()","locale":"en-US","native":"English (US)"}],"source":{"folder":"zh-cn/web/api/oscillatornode/setperiodicwave","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/oscillatornode/setperiodicwave/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/OscillatorNode","title":"OscillatorNode"},{"uri":"/zh-CN/docs/Web/API/OscillatorNode/setPeriodicWave","title":"OscillatorNode.setPeriodicWave()"}],"pageTitle":"OscillatorNode.setPeriodicWave() - Web API 接口参考 | MDN","noIndexing":false}}