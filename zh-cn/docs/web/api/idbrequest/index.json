{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"IDBRequest","mdn_url":"/zh-CN/docs/Web/API/IDBRequest","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/IndexedDB_API\">IndexedDB API</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/IDBRequest\"><code>IDBRequest</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBRequest/error\"><code>error</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBRequest/readyState\"><code>readyState</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBRequest/result\"><code>result</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBRequest/source\"><code>source</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBRequest/transaction\"><code>transaction</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>事件</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBRequest/error_event\"><code>error</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>继承</summary><ol><li><a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>IndexedDB 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/IDBCursor\"><code>IDBCursor</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBCursorWithValue\"><code>IDBCursorWithValue</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/IDBDatabase\"><code>IDBDatabase</code></a></li><li><a href=\"/zh-CN/docs/Web/API/IDBFactory\"><code>IDBFactory</code></a></li><li><a href=\"/zh-CN/docs/Web/API/IDBIndex\"><code>IDBIndex</code></a></li><li><a href=\"/zh-CN/docs/Web/API/IDBKeyRange\"><code>IDBKeyRange</code></a></li><li><a href=\"/zh-CN/docs/Web/API/IDBObjectStore\"><code>IDBObjectStore</code></a></li><li><a href=\"/zh-CN/docs/Web/API/IDBOpenDBRequest\"><code>IDBOpenDBRequest</code></a></li><li><a href=\"/zh-CN/docs/Web/API/IDBTransaction\"><code>IDBTransaction</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IDBVersionChangeEvent\"><code>IDBVersionChangeEvent</code> <small>(en-US)</small></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>IndexedDB api 中的 IDBRequest 接口提供了根据绑定事件处理函数访问结果集的方法。其中结果集来自对数据库和数据库对象发起的异步查询。对数据库的读写操作都是通过 request 的方式来实现。</p>\n<p>该 request 对象初始时不包括任何关于操作结果的信息，当 request 上的事件触发时，可以通过 IDBRequest 实例上的事件处理函数访问相关信息。</p>\n<p>继承自：<a href=\"/zh-CN/docs/Web/API/EventTarget\">EventTarget</a></p>"}},{"type":"prose","value":{"id":"about_this_document","title":"About this document","isH3":false,"content":"<p>This document was last updated on August 17, 2012 and follows the <a href=\"https://dvcs.w3.org/hg/IndexedDB/raw-file/tip/Overview.html#request-api\" class=\"external\" rel=\" noopener\">W3C Specifications (Editor's Draft)</a> drafted on July 24, 2012. It has not yet been verified.</p>"}},{"type":"prose","value":{"id":"基础概念","title":"基础概念","isH3":false,"content":"<p>所有异步操作立即返回一个 IDBRequest 实例。每一个请求都有一个 readyState 属性，初始时为 pending，当请求完成或失败的时候，readyState 会变为 done。当状态值变为 done 时，每一个请求都会返回 result 和 error 属性，并且会触发一个事件。当状态保持为 pending 时，任何尝试访问 result 或 error 属性的行为会触发一个 InvalidStateError 异常。</p>\n<p>用直白的话来说就是：所有的异步方法返回一个 request 对象。如果 request 对象成功执行了，结果可以通过 result 属性访问到，并且该 request 对象上会触发 success 事件。如果操作中有错误发生，一个 error 事件会触发，并且会通过 result 属性抛出一个异常。</p>\n<p>示例</p>\n<p>下面的代码片段中，我们异步打开一个数据库并且发起一个请求。注册了几个事件处理函数来展示不同的情况。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> request <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>indexedDB<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数据库名称'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onsuccess</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> db <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> transaction <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"readonly\" is the default option;</span>\n<span class=\"token comment\">// when data will be added to the database use \"readwrite\".</span>\n        <span class=\"token keyword\">var</span> curRequest <span class=\"token operator\">=</span> transaction<span class=\"token punctuation\">.</span><span class=\"token function\">objectStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ObjectStore Name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">openCursor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        curRequest<span class=\"token punctuation\">.</span>onsuccess <span class=\"token operator\">=</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token operator\">...</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onupgradeneeded</span><span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token comment\">// changing objectStore data is done here, as opposed to a transaction enum:</span>\n         <span class=\"token operator\">...</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"attributes","title":"Attributes","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th scope=\"col\">Attribute</th>\n      <th scope=\"col\">Type</th>\n      <th scope=\"col\">Description</th>\n    </tr>\n    <tr>\n      <td><code><a name=\"attr_result\">result</a></code></td>\n      <td><code>readonly any</code></td>\n      <td>\n        <p>Returns the result of the request.</p>\n        <p>\n          If the the request failed and the result is not available, the\n          InvalidStateError exception is thrown.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code><a name=\"attr_errorCode\">error</a></code></td>\n      <td><code>readonly <a href=\"/en-US/docs/Web/API/DOMError\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">DOMError (en-US)</a></code></td>\n      <td>\n        <p>The following error codes are returned under certain conditions:</p>\n        <ul>\n          <li>\n            <code>AbortError</code> — If you abort the transaction, then all\n            requests still in progress receive this error.\n          </li>\n          <li>\n            <code>ConstraintError</code> — If you insert data that doesn't\n            conform to a constraint. It's an exception type for creating stores\n            and indexes. You get this error, for example, if you try to add a\n            new key that already exists in the record.\n          </li>\n          <li>\n            <code>QuotaExceededError</code> — If you run out of disk quota and\n            the user declined to grant you more space.\n          </li>\n          <li>\n            <code>UnknownError</code> — If the operation failed for reasons\n            unrelated to the database itself. A failure due to disk IO errors is\n            such an example.\n          </li>\n          <li><code>NoError</code> — If the request succeeds.</li>\n          <li>\n            <code>VersionError</code> — If you try to open a database with a\n            version lower than the one it already has.\n          </li>\n        </ul>\n        <p>\n          In addition to the error codes sent to the IDBRequest object,\n          asynchronous operations can also raise exceptions. The list describes\n          problems that could occur when the request is being executed, but you\n          might also encounter other problems when the request is being made.\n          For example, if the the request failed and the result is not\n          available, the InvalidStateError exception is thrown.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code><a name=\"attr_source\">source</a></code></td>\n      <td><code>readonly Object</code></td>\n      <td>\n        <p>\n          The source of the request, such as an Index or a ObjectStore. If no\n          source exists (such as when calling <code>indexedDB.open()</code>), it\n          returns null.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code><a name=\"attr_transaction\">transaction</a></code></td>\n      <td><code>readonly\n<a href=\"/en-US/IndexedDB/IDBTransaction\">IDBTransaction</a></code></td>\n      <td>\n        The transaction for the request. This property can be null for certain\n        requests, such as for request returned from\n        <code><a href=\"/en-US/IndexedDB/IDBFactory#open\">IDBFactory.open</a></code>\n        (You're just connecting to a database, so there is no transaction to\n        return).\n      </td>\n    </tr>\n    <tr>\n      <td><code><a name=\"attr_readyState\">readyState</a></code></td>\n      <td><code>readonly enum</code></td>\n      <td>\n        <p>\n          The state of the request. Every request starts in the\n          <code>pending</code> state. The state changes to\n          <code>done</code> when the request completes successfully or when an\n          error occurs.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code><a name=\"attr_onerror\">onerror</a></code></td>\n      <td><code>Function</code></td>\n      <td>The event handler for the error event.</td>\n    </tr>\n    <tr>\n      <td><code><a name=\"attr_onsuccess\">onsuccess</a></code></td>\n      <td><code>Function</code></td>\n      <td>The event handler for the success event.</td>\n    </tr>\n  </thead>\n  <tbody></tbody>\n</table>"}},{"type":"prose","value":{"id":"constants","title":"Constants","isH3":false,"content":""}},{"type":"prose","value":{"id":"readystate_constants","title":"<code>readyState</code> constants","isH3":true,"content":"<div class=\"notecard warning\" id=\"sect1\">\n  <p><strong>警告：</strong> These constants are no longer available. You should use directly the string constants instead. (<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=887524\" class=\"external\" rel=\" noopener\">bug&nbsp;887524</a>)</p>\n</div>\n<table>\n  <thead>\n    <tr>\n      <th>Constant</th>\n      <th>Value</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"\"><code>DONE</code></a></td>\n      <td>\"done\"</td>\n      <td>The request has completed or an error has occurred. Initially false</td>\n    </tr>\n    <tr>\n      <td><a href=\"\"><code>LOADING</code></a></td>\n      <td>\"pending\"</td>\n      <td>The request has been started, but its result is not yet available.</td>\n    </tr>\n  </tbody>\n</table>","titleAsText":"readyState constants"}},{"type":"prose","value":{"id":"event_handlers","title":"Event handlers","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>Event handler</th>\n      <th>Event handler type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>onerror</code></td>\n      <td><code>error</code></td>\n    </tr>\n    <tr>\n      <td><code>onsuccess</code></td>\n      <td><code>success</code></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"derived_interface","title":"Derived interface","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/IndexedDB/IDBOpenDBRequest\" class=\"page-not-created\" title=\"This is a link to an unwritten page\"><code>IDBOpenDBRequest</code></a></li>\n</ul>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/IndexedDB/#request-api","title":"Indexed Database API 3.0"}],"query":"api.IDBRequest"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.IDBRequest","dataURL":"/zh-CN/docs/Web/API/IDBRequest/bcd.json"}}],"toc":[{"text":"About this document","id":"about_this_document"},{"text":"基础概念","id":"基础概念"},{"text":"Attributes","id":"attributes"},{"text":"Constants","id":"constants"},{"text":"Event handlers","id":"event_handlers"},{"text":"Derived interface","id":"derived_interface"},{"text":"规范","id":"规范"},{"text":"Browser compatibility","id":"browser_compatibility"}],"summary":"IndexedDB api 中的 IDBRequest 接口提供了根据绑定事件处理函数访问结果集的方法。其中结果集来自对数据库和数据库对象发起的异步查询。对数据库的读写操作都是通过 request 的方式来实现。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"IDBRequest","locale":"en-US","native":"English (US)"},{"title":"IDBRequest","locale":"fr","native":"Français"},{"title":"IDBRequest","locale":"ja","native":"日本語"}],"source":{"folder":"zh-cn/web/api/idbrequest","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/idbrequest/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/IDBRequest","title":"IDBRequest"}],"pageTitle":"IDBRequest - Web API 接口参考 | MDN","noIndexing":false}}