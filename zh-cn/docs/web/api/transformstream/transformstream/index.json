{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"TransformStream()","mdn_url":"/zh-CN/docs/Web/API/TransformStream/TransformStream","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Streams_API\">Streams API</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/TransformStream\"><code>TransformStream</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>构造函数</summary><ol><li><em><code>TransformStream()</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a href=\"/zh-CN/docs/Web/API/TransformStream/readable\"><code>readable</code></a></li><li><a href=\"/zh-CN/docs/Web/API/TransformStream/writable\"><code>writable</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Streams 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a></li><li><a href=\"/zh-CN/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableStreamBYOBRequest\"><code>ReadableStreamBYOBRequest</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Response/body\"><code>Response.body</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WritableStream\"><code>WritableStream</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WritableStreamDefaultWriter\"><code>WritableStreamDefaultWriter</code></a></li><li><a href=\"/zh-CN/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>TransformStream()</code></strong> 构造函数创建一个新的 <a href=\"/zh-CN/docs/Web/API/TransformStream\"><code>TransformStream</code></a> 对象，该对象表示一对流：一个 <a href=\"/zh-CN/docs/Web/API/WritableStream\"><code>WritableStream</code></a> 表示可写端，和一个 <a href=\"/zh-CN/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> 表示可读端。</p>"}},{"type":"prose","value":{"id":"语法","title":"语法","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformStream</span><span class=\"token punctuation\">(</span>transformer<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformStream</span><span class=\"token punctuation\">(</span>transformer<span class=\"token punctuation\">,</span> writableStrategy<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformStream</span><span class=\"token punctuation\">(</span>transformer<span class=\"token punctuation\">,</span> writableStrategy<span class=\"token punctuation\">,</span> readableStrategy<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"参数","title":"参数","isH3":true,"content":"<dl>\n  <dt id=\"transformer\"><code>transformer</code><span class=\"badge inline optional\">可选</span></dt>\n  <dd>\n    <p>一个表示 <code>transformer</code> 的对象。如果未提供，则生成的流将是一个<strong>恒等变换流</strong>，它将所有写入可写端的分块转发到可读端，不会有任何改变。</p>\n    <p>transformer 对象可以包含以下任何方法。每个方法的 <code>controller</code> 都是一个 <a href=\"/zh-CN/docs/Web/API/TransformStreamDefaultController\"><code>TransformStreamDefaultController</code></a> 实例。</p>\n    <dl>\n      <dt id=\"startcontroller\"><code>start(controller)</code></dt>\n      <dd>\n        <p>当 <code>TransformStream</code> 被构造时调用。它通常用于使用 <a href=\"/zh-CN/docs/Web/API/TransformStreamDefaultController/enqueue\"><code>TransformStreamDefaultController.enqueue()</code></a> 对分块进行排队。</p>\n      </dd>\n      <dt id=\"transformchunk_controller\"><code>transform(chunk, controller)</code></dt>\n      <dd>\n        <p>当一个写入可写端的分块准备好转换时调用，并且执行转换流的工作。如果没有提供 <code>transform()</code> 方法，则使用恒等变换，并且分块将在没有更改的情况下排队。</p>\n      </dd>\n      <dt id=\"flushcontroller\"><code>flush(controller)</code></dt>\n      <dd>\n        <p>当所有写入可写端的分块成功转换后被调用，并且可写端将会关闭。</p>\n      </dd>\n    </dl>\n  </dd>\n  <dt id=\"writablestrategy\"><code>writableStrategy</code><span class=\"badge inline optional\">可选</span></dt>\n  <dd>\n    <p>一个定义了队列策略的可选对象。它需要两个参数：</p>\n    <dl>\n      <dt id=\"highwatermark\"><code>highWaterMark</code></dt>\n      <dd>\n        <p>一个非负整数。它定义了在应用背压之前内部队列包含的分块的总数。</p>\n      </dd>\n      <dt id=\"sizechunk\"><code>size(chunk)</code></dt>\n      <dd>\n        <p>一个包含参数 <code>chunk</code> 的方法。它表示用于每一个块的大小，以字节为单位。</p>\n      </dd>\n    </dl>\n  </dd>\n  <dt id=\"readablestrategy\"><code>readableStrategy</code><span class=\"badge inline optional\">可选</span></dt>\n  <dd>\n    <p>一个定义了队列策略的可选对象。它需要两个参数:</p>\n    <dl>\n      <dt id=\"highwatermark_2\"><code>highWaterMark</code></dt>\n      <dd>\n        <p>一个非负整数。它定义了在应用背压之前内部队列包含的分块的总数。</p>\n      </dd>\n      <dt id=\"sizechunk_2\"><code>size(chunk)</code></dt>\n      <dd>\n        <p>一个包含参数 <code>chunk</code> 的方法。它表示用于每一个块的大小，以字节为单位。</p>\n      </dd>\n    </dl>\n  </dd>\n</dl>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 你可以自定义 <code>readableStrategy</code> 或 <code>writableStrategy</code>，或者使用 <a href=\"/zh-CN/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a> 或 <a href=\"/zh-CN/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a> 的实例作为对象的值。</p>\n</div>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":""}},{"type":"prose","value":{"id":"将文本转换为大写","title":"将文本转换为大写","isH3":true,"content":"<p>以下示例将文本逐块转换为大写。这个示例来自 <a href=\"https://web.dev/streams/\" class=\"external\" rel=\" noopener\">Streams—The Definitive Guide</a>，它有关于不同类型流的一些示例。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">upperCaseStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk<span class=\"token punctuation\">,</span> controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">appendToDOMStream</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WritableStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      el<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./lorem-ipsum.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n  response<span class=\"token punctuation\">.</span>body\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipeThrough</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TextDecoderStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipeThrough</span><span class=\"token punctuation\">(</span><span class=\"token function\">upperCaseStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipeTo</span><span class=\"token punctuation\">(</span><span class=\"token function\">appendToDOMStream</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"创建一个恒等变换流","title":"创建一个恒等变换流","isH3":true,"content":"<p>如果没有提供 <code>transformer</code> 参数，那么结果将是一个恒等流，它将所有写入可写端的分块转发到可读端，并且不做任何改变。在以下示例中，一个恒等转换流被用于向一个管道添加缓冲。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> writableStrategy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteLengthQueuingStrategy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">highWaterMark</span><span class=\"token operator\">:</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreadableStream\n  <span class=\"token punctuation\">.</span><span class=\"token function\">pipeThrough</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TransformStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> writableStrategy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">pipeTo</span><span class=\"token punctuation\">(</span>writableStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://streams.spec.whatwg.org/#ref-for-ts-constructor④","title":"Streams Standard"}],"query":"api.TransformStream.TransformStream"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.TransformStream.TransformStream","dataURL":"/zh-CN/docs/Web/API/TransformStream/TransformStream/bcd.json"}}],"toc":[{"text":"语法","id":"语法"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"}],"summary":"TransformStream() 构造函数创建一个新的 TransformStream 对象，该对象表示一对流：一个 WritableStream 表示可写端，和一个 ReadableStream 表示可读端。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"TransformStream()","locale":"en-US","native":"English (US)"}],"source":{"folder":"zh-cn/web/api/transformstream/transformstream","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/transformstream/transformstream/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/TransformStream","title":"TransformStream"},{"uri":"/zh-CN/docs/Web/API/TransformStream/TransformStream","title":"TransformStream()"}],"pageTitle":"TransformStream() - Web API 接口参考 | MDN","noIndexing":false}}