{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Resize Observer API","mdn_url":"/zh-CN/docs/Web/API/Resize_Observer_API","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Resize_Observer_API\">Resize Observer API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>接口</summary><ol><li><a href=\"/zh-CN/docs/Web/API/ResizeObserver\"><code>ResizeObserver</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ResizeObserverEntry\"><code>ResizeObserverEntry</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Resize Observer API 提供了一种高性能的机制，通过该机制，代码可以监视元素的大小更改，并且每次大小更改时都会向观察者传递通知。</p>"}},{"type":"prose","value":{"id":"概念和使用","title":"概念和使用","isH3":false,"content":"<p>存在大量的响应式设计（以及其他相关）技术，它们可以响应元素大小的变化，但是以前，它们的实现常常很笨拙或者说生硬。</p>\n<p>举个例子，当视口更改大小时， <a href=\"/zh-CN/docs/Web/CSS/Media_Queries\">媒介查询</a> / <a href=\"/zh-CN/docs/Web/API/Window/matchMedia\"><code>window.matchMedia</code></a> 非常适合在特定点更新布局，但是如果要响应于特定元素的大小更改而更改布局，该元素又不是外部容器时，该怎么办？</p>\n<p>为此，一种有限的解决方案是监听对适当事件的更改，该事件会提示您对更改大小感兴趣的元素 (例如 window <a href=\"/zh-CN/docs/Web/API/Window/resize_event\">resize event</a>)，然后找出该元素之后新的尺寸或其他功能，例如，使用<a href=\"/zh-CN/docs/Web/API/Element/getBoundingClientRect\"><code>Element.getBoundingClientRect</code></a> 或者<a href=\"/zh-CN/docs/Web/API/Window/getComputedStyle\"><code>Window.getComputedStyle</code></a>，来调整大小。</p>\n<p>这样的解决方案仅适用于有限的场景，对性能不利（不断调用上述方法会导致性能严重下降），并且在不更改浏览器窗口大小的情况下通常不起作用。</p>\n<p>Resize Observer API 提供了一种解决此类问题的解决方案，此外，它还使您能够轻松观察和响应元素内容或边框的大小变化，并以高效的方式做出响应。 它为 Web 平台中经常讨论的缺少<a href=\"https://www.xanthir.com/b4PR0\" class=\"external\" rel=\" noopener\">element queries</a> 提供了 JavaScript 解决方案。</p>\n<p>用法很简单，并且与其他观察者（例如 <a href=\"/zh-CN/docs/Web/API/PerformanceObserver\">Performance Observer</a> 或者 <a href=\"/zh-CN/docs/Web/API/Intersection_Observer_API\">Intersection Observer</a> )— 几乎相同，您可以使用 <a href=\"/zh-CN/docs/Web/API/ResizeObserver/ResizeObserver\"><code>ResizeObserver()</code></a>构造函数创建一个新的<a href=\"/zh-CN/docs/Web/API/ResizeObserver\"><code>ResizeObserver</code></a> ，然后使用 <a href=\"/zh-CN/docs/Web/API/ResizeObserver/observe\"><code>ResizeObserver.observe()</code></a>使其寻找特定元素大小的更改。 每次更改大小时，构造函数中设置的回调函数便会运行，从而提供对新维度的访问权限，并允许您根据需要执行任何操作。</p>"}},{"type":"prose","value":{"id":"接口","title":"接口","isH3":false,"content":"<dl>\n  <dt id=\"resizeobserver\"><a href=\"/zh-CN/docs/Web/API/ResizeObserver\"><code>ResizeObserver</code></a></dt>\n  <dd>\n    <p>提供注册新观察者以及启动和停止观察元素的能力。</p>\n  </dd>\n  <dt id=\"resizeobserverentry\"><a href=\"/zh-CN/docs/Web/API/ResizeObserverEntry\"><code>ResizeObserverEntry</code></a></dt>\n  <dd>\n    <p>描述已调整大小的单个元素，标识该元素及其新大小。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例子","title":"例子","isH3":false,"content":"<p>您可以在我们的 GitHub 存储库中找到几个简单的示例：</p>\n<ul>\n  <li><a href=\"https://mdn.github.io/dom-examples/resize-observer/resize-observer-border-radius.html\" class=\"external\" rel=\" noopener\">resize-observer-border-radius.html</a> (<a href=\"https://github.com/mdn/dom-examples/blob/master/resize-observer/resize-observer-border-radius.html\" class=\"external\" rel=\" noopener\">源码</a>): 一个带有绿色框的简单示例，其大小为视口大小的百分比。更改视口大小时，框的圆角将根据框的大小成比例地变化。 我们可以通过 <a href=\"/zh-CN/docs/Web/CSS/border-radius\"><code>border-radius</code></a> 来百分比来实现，但这很快会导致椭圆形的角看起来很丑陋，而上述解决方案为您提供了随盒子大小缩放的漂亮的角形正方形。</li>\n  <li><a href=\"https://mdn.github.io/dom-examples/resize-observer/resize-observer-text.html\" class=\"external\" rel=\" noopener\">resize-observer-text.html</a> (<a href=\"https://github.com/mdn/dom-examples/blob/master/resize-observer/resize-observer-text.html\" class=\"external\" rel=\" noopener\">源码</a>): 这里我们使用 resize observer 来改变 <a href=\"/zh-CN/docs/Web/CSS/font-size\"><code>font-size</code></a> ，标题和段落的值随着滑块值的改变而改变，导致包含的&lt;div&gt;改变宽度。 这表明您可以响应元素大小的更改，即使它们与视口无关。</li>\n</ul>\n<p>代码通常将遵循这种模式 (取自 resize-observer-border-radius.html):</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> resizeObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResizeObserver</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> entry <span class=\"token keyword\">of</span> entries<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>contentBoxSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      entry<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>borderRadius <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>contentBoxSize<span class=\"token punctuation\">.</span>inlineSize<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n                                                      <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>contentBoxSize<span class=\"token punctuation\">.</span>blockSize<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'px'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      entry<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>borderRadius <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>contentRect<span class=\"token punctuation\">.</span>width<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n                                                      <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>contentRect<span class=\"token punctuation\">.</span>height<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'px'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nresizeObserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://drafts.csswg.org/resize-observer/#resize-observer-interface","title":"Resize Observer"}],"query":"api.ResizeObserver"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.ResizeObserver","dataURL":"/zh-CN/docs/Web/API/Resize_Observer_API/bcd.json"}},{"type":"prose","value":{"id":"相关链接","title":"相关链接","isH3":false,"content":"<ul>\n  <li><a href=\"https://developers.google.com/web/updates/2016/10/resizeobserver\" class=\"external\" rel=\" noopener\">ResizeObserver: It’s Like document.onresize for Elements</a></li>\n</ul>"}}],"toc":[{"text":"概念和使用","id":"概念和使用"},{"text":"接口","id":"接口"},{"text":"例子","id":"例子"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"相关链接","id":"相关链接"}],"summary":"Resize Observer API 提供了一种高性能的机制，通过该机制，代码可以监视元素的大小更改，并且每次大小更改时都会向观察者传递通知。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Resize Observer API","locale":"en-US","native":"English (US)"},{"title":"Resize Observer API","locale":"fr","native":"Français"}],"source":{"folder":"zh-cn/web/api/resize_observer_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/resize_observer_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/Resize_Observer_API","title":"Resize Observer API"}],"pageTitle":"Resize Observer API - Web API 接口参考 | MDN","noIndexing":false}}