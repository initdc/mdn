{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"RTCDataChannel 简单示例","mdn_url":"/zh-CN/docs/Web/API/WebRTC_API/Simple_RTCDataChannel_sample","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n <ol>\n  <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API\"><strong>WebRTC API</strong></a></li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>WebRTC Guides</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API/Architecture\">WebRTC Architecture</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API/WebRTC_Basics\">WebRTC Basics</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API/Protocols\">WebRTC Protocols</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API/Connectivity\">Dealing with connectivity</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API/Overview\">Overview of WebRTC interfaces</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API/Session_lifetime\">Lifetime of a WebRTC Session</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API/Using_data_channels\">Using data channels</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>WebRTC Tutorials</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API/adapter.js\">Interoperability with adapter.js</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API/Taking_still_photos\">Taking still photos from the camera</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API/Simple_RTCDataChannel_sample\">A simple data channel example</a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs\">Building an internet-connected phone with Peer.js</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Interfaces</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/API/MediaDevices\"><code>MediaDevices</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/MediaStream\"><code>MediaStream</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/MediaStreamEvent\"><code>MediaStreamEvent</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/MessageEvent\"><code>MessageEvent</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCIceCandidate\"><code>RTCIceCandidate</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnectionIceEvent\"><code>RTCPeerConnectionIceEvent</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/RTCSessionDescription\"><code>RTCSessionDescription</code></a></li>\n        <li><a href=\"/zh-CN/docs/Web/API/RTCStatsReport\"><code>RTCStatsReport</code></a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/zh-CN/docs/MDN\">Documentation:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Contribute</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/MDN\">The MDN project</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/zh-CN/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a> 接口是<a href=\"/zh-CN/docs/Web/API/WebRTC_API\">WebRTC API</a>的一个功能，可以让您在两个对等体之间打开一个通道，您可以通过该通道发送和接收任意数据。 API 有意地类似于<a href=\"/en-US/docs/Web/API/WebSockets_API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">WebSocket API (en-US)</a>，因此可以为每个 API 使用相同的编程模型。</p>\n<p>在本示例中，我们会在一个页面内建立 一条<a href=\"/zh-CN/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a>链接 . 这个场景是为了演示如何链接两个 Peer，实际场景并不常见。在本示例中解释了协商和建立链接的过程，定位和链接另外一台主机的场景在另外的一个示例中。</p>"}},{"type":"prose","value":{"id":"the_html","title":"The HTML","isH3":false,"content":"<p>首先让我们看看我们需要的 HTML 代码<a href=\"https://github.com/mdn/samples-server/tree/master/s/webrtc-simple-datachannel/index.html\" class=\"external\" rel=\" noopener\">HTML that's needed</a>. 其实很简单，我们先有两个按钮用来链接和断开链接。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>connectButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>connectButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>buttonleft<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  Connect\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>disconnectButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>disconnectButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>buttonright<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">disabled</span><span class=\"token punctuation\">&gt;</span></span>\n  Disconnect\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>然后我们还有一个输入框，用来输入消息。一个按钮，来触发发送事件。这个 <a href=\"/zh-CN/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a> 是给 channel 中第一个节点使用的。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>messagebox<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>message<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Enter a message:\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>message<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>message<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Message text<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">inputmode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>latin<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>60</span> <span class=\"token attr-name\">maxlength</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>120</span> <span class=\"token attr-name\">disabled</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sendButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sendButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>buttonright<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">disabled</span><span class=\"token punctuation\">&gt;</span></span>\n      Send\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>最后，还有一个小 DIV 用来显示收到的内容。这个 <a href=\"/zh-CN/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a> 是给 channel 中第二个 peer 使用的。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>messagebox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>receivebox<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Messages received:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"the_javascript_code","title":"The JavaScript code","isH3":false,"content":"<p>你可以直接到<a href=\"https://github.com/mdn/samples-server/tree/master/s/webrtc-simple-datachannel/main.js\" class=\"external\" rel=\" noopener\">look at the code itself on GitHub</a>来看代码，下面我们也会一步一步的解释。</p>\n<p>WebRTC API 大量使用了<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>. 这样会让建立链接的过程变得简单;如果你还没有到<a href=\"/zh-CN/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">ECMAScript 2015</a>了解过 Promise，你应该先去看看。另外本示例还使用了箭头语法<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">arrow functions</a>。</p>"}},{"type":"prose","value":{"id":"启动","title":"启动","isH3":true,"content":"<p>当脚本开始运行时，我们对 load 事件挂接 <code><a href=\"/en-US/docs/Web/API/Window/load_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">load (en-US)</a></code> 事件侦听，因此一旦页面完全加载， <code>startup()</code> 函数将被调用。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">startup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  connectButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connectButton'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  disconnectButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'disconnectButton'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  sendButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sendButton'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  messageInputBox <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  receiveBox <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'receivebox'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Set event listeners for user interface widgets</span>\n\n  connectButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> connectPeers<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  disconnectButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> disconnectPeers<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  sendButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> sendMessage<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>上述逻辑一目了然。我们拿到所有需要操作的页面元素引用，之后对三个按钮设置事件侦听 <a href=\"/zh-CN/docs/Web/API/EventTarget/addEventListener\" title=\"event listeners\"><code>event listeners</code></a> 。</p>"}},{"type":"prose","value":{"id":"建立连接","title":"建立连接","isH3":true,"content":"<p>当用户点击 \"Connect\" 按钮， <code>connectPeers()</code> 方法被调用。下面将逐一分析该方法中的细节。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 尽管参与连接的两端都在同一页面，我们将启动连接的一端称为 \"local\" 端，另一端称为 \"remote\" 端。</p>\n</div>\n<h4 id=\"建立本地节点\">建立本地节点</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>localConnection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RTCPeerConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsendChannel <span class=\"token operator\">=</span> localConnection<span class=\"token punctuation\">.</span><span class=\"token function\">createDataChannel</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sendChannel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsendChannel<span class=\"token punctuation\">.</span>onopen <span class=\"token operator\">=</span> handleSendChannelStatusChange<span class=\"token punctuation\">;</span>\nsendChannel<span class=\"token punctuation\">.</span>onclose <span class=\"token operator\">=</span> handleSendChannelStatusChange<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>第一步是建立该连接的 \"local\" 端，它是发起连接请求的一方。 下一步是通过调用<a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/createDataChannel\"><code>RTCPeerConnection.createDataChannel()</code></a> 来创建 <a href=\"/zh-CN/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a> 并设置事件侦听以监视该数据通道， 从而获知该通道的打开或关闭 (即获得该对等连接的通道打开或者关闭的时机)。</p>\n<p>请务必记住该通道的每一端都拥有自己的 <a href=\"/zh-CN/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a> 对象。</p>\n<h4 id=\"建立远程节点\">建立远程节点</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>remoteConnection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RTCPeerConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nremoteConnection<span class=\"token punctuation\">.</span>ondatachannel <span class=\"token operator\">=</span> receiveChannelCallback<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>远程端的建立过程类似“local”端， 但它无需自己创建 <a href=\"/zh-CN/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a> ， 因为我们将通过上面建立的渠道进行连接。 我们创建对 <code><a href=\"/zh-CN/docs/Web/Reference/Events/datachannel\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">datachannel</a></code> 的事件处理回调；数据通道打开时该逻辑将被执行， 该回调处理将接收到一个 <code>RTCDataChannel</code> 对象，此过程将在文章后面部分描述。</p>\n<h4 id=\"设立_ice_候选人\">设立 ICE 候选人</h4>\n<p>下一步为每个连接建立 ICE 候选侦听处理， 当连接的一方出现新的 ICE 候选时该侦听逻辑将被调用以告知连接的另一方此消息。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 在现实场景，当参与连接的两节点运行于不同的上下文，建立连接的过程或稍微复杂些，每一次双方通过调用<a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/addIceCandidate\"><code>RTCPeerConnection.addIceCandidate()</code></a>，提出连接方式的建议 (例如： UDP,、中继 UDP 、 TCP 之类的) ， 双方来回往复直到达成一致。本文既然不涉及现实网络环境，因此我们假定双方接受首次连接建议。</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>    localConnection<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onicecandidate</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">!</span>e<span class=\"token punctuation\">.</span>candidate\n        <span class=\"token operator\">||</span> remoteConnection<span class=\"token punctuation\">.</span><span class=\"token function\">addIceCandidate</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>candidate<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>handleAddCandidateError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    remoteConnection<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onicecandidate</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">!</span>e<span class=\"token punctuation\">.</span>candidate\n        <span class=\"token operator\">||</span> localConnection<span class=\"token punctuation\">.</span><span class=\"token function\">addIceCandidate</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>candidate<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>handleAddCandidateError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>我们配置每个 <a href=\"/zh-CN/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> 对于事件 <code><a href=\"/zh-CN/docs/Web/Reference/Events/icecandidate\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">icecandidate</a></code> 建立事件处理。</p>\n<h4 id=\"启动连接尝试\">启动连接尝试</h4>\n<p>建立节点连接的最后一项是创建一个连接 offer.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>    localConnection<span class=\"token punctuation\">.</span><span class=\"token function\">createOffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">offer</span> <span class=\"token operator\">=&gt;</span> localConnection<span class=\"token punctuation\">.</span><span class=\"token function\">setLocalDescription</span><span class=\"token punctuation\">(</span>offer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> remoteConnection<span class=\"token punctuation\">.</span><span class=\"token function\">setRemoteDescription</span><span class=\"token punctuation\">(</span>localConnection<span class=\"token punctuation\">.</span>localDescription<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> remoteConnection<span class=\"token punctuation\">.</span><span class=\"token function\">createAnswer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">answer</span> <span class=\"token operator\">=&gt;</span> remoteConnection<span class=\"token punctuation\">.</span><span class=\"token function\">setLocalDescription</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> localConnection<span class=\"token punctuation\">.</span><span class=\"token function\">setRemoteDescription</span><span class=\"token punctuation\">(</span>remoteConnection<span class=\"token punctuation\">.</span>localDescription<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>handleCreateDescriptionError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>逐行解读上面的代码：</p>\n<ol>\n  <li>首先调用<a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/createOffer\"><code>RTCPeerConnection.createOffer()</code></a> 方法创建 <a href=\"/zh-CN/docs/Glossary/SDP\">SDP</a> (Session Description Protocol) 字节块用于描述我们期待建立的连接。该方法可选地接受一个描述连接限制的对象，例如连接是否必须支持音频、视频或者两者都支持。在我们的简单示例中，没有引入该限制。</li>\n  <li>如果该 offer 成功建立，我们将上述字节块传递给 local 连接的 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/setLocalDescription\"><code>RTCPeerConnection.setLocalDescription()</code> <small>(en-US)</small></a> 方法。 用于配置 local 端的连接。</li>\n  <li>下一步通过调用<code>remoteConnection.</code><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/setRemoteDescription\"><code>RTCPeerConnection.setRemoteDescription()</code></a>，告知 remote 节点上述描述，将 local 节点连接到到远程 。 现在 <code>remoteConnection</code> 了解正在建立的连接。</li>\n  <li>该是 remote 节点回应的时刻了。remote 节点调用 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/createAnswer\"><code>createAnswer()</code> <small>(en-US)</small></a> 方法予以回应。 该方法生成一个 SDP 二进制块，用于描述 remote 节点愿意并且有能力建立的连接。 这样的连接配置是两端均可以支持可选项的结合。</li>\n  <li>应答建立之后，通过调用<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/setLocalDescription\"><code>RTCPeerConnection.setLocalDescription()</code> <small>(en-US)</small></a>传入 remoteConnection 。该调用完成了 remote 端连接的建立 (对于对端的 remote 节点而言，是它的 local 端。 这种叙述容易使人困惑，但是看多了您就习惯了。</li>\n  <li>最终，通过调用 localConnection 的<a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/setRemoteDescription\"><code>RTCPeerConnection.setRemoteDescription()</code></a>方法，本地连接的远端描述被设置为指向 remote 节点。</li>\n  <li><code>catch()</code> 调用一个用于处理任何异常的逻辑。</li>\n</ol>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 再次申明，上述处理过程并非针对现实世界的实现，在正常环境下，建立连接的两端的机器，运行两块不同的代码，用于交互和协商连接过程。</p>\n</div>\n<h4 id=\"对成功的对等连接的处理\">对成功的对等连接的处理</h4>\n<p>当 peer-to-peer 连接的任何一方成功连接，相应的 <a href=\"/zh-CN/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a>的<code><a href=\"/zh-CN/docs/Web/Reference/Events/icecandidate\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">icecandidate</a></code> 事件将被触发。 在事件的处理中可以执行任何需要的操作， 但在本例中，我们所需要做的只是更新用户界面。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">function</span> <span class=\"token function\">handleLocalAddCandidateSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    connectButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleRemoteAddCandidateSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    disconnectButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>当 local 节点连接成功时，禁用 \"Connect\" 按钮， 当 remote 节点连接时许用 \"Disconnect\" 按钮。</p>\n<h4 id=\"数据通道（data_channel）的连接\">数据通道（data channel）的连接</h4>\n<p><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> 一旦 open，事件<code><a href=\"/zh-CN/docs/Web/Reference/Events/datachannel\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">datachannel</a></code> 被发送到远端以完成打开数据通道的处理， 该事件触发 <code>receiveChannelCallback()</code> 方法，如下所示：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">function</span> <span class=\"token function\">receiveChannelCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    receiveChannel <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>channel<span class=\"token punctuation\">;</span>\n    receiveChannel<span class=\"token punctuation\">.</span>onmessage <span class=\"token operator\">=</span> handleReceiveMessage<span class=\"token punctuation\">;</span>\n    receiveChannel<span class=\"token punctuation\">.</span>onopen <span class=\"token operator\">=</span> handleReceiveChannelStatusChange<span class=\"token punctuation\">;</span>\n    receiveChannel<span class=\"token punctuation\">.</span>onclose <span class=\"token operator\">=</span> handleReceiveChannelStatusChange<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>事件<code><a href=\"/zh-CN/docs/Web/Reference/Events/datachannel\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">datachannel</a></code> 在它的 channel 属性中包括了： 对代表 remote 节点的 channel 的<a href=\"/zh-CN/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a> 的指向， 它保存了我们用以在该 channel 上对我们希望处理的事件建立的事件监听。 一旦侦听建立， 每当 remote 节点接收到数据 <code>handleReceiveMessage()</code> 方法将被调用， 每当通道的连接状态发生改变 <code>handleReceiveChannelStatusChange()</code> 方法将被调用， 因此通道完全打开或者关闭时我们都可以作出相应的相应。</p>"}},{"type":"prose","value":{"id":"对通道状态变化的处理","title":"对通道状态变化的处理","isH3":true,"content":"<p>local 节点和 remote 节点采用同样的方法处理表示通道连接状态变更的事件。</p>\n<p>当 local 节点遭遇 open 或者 close 事件，<code>handleSendChannelStatusChange()</code> 方法被调用：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">function</span> <span class=\"token function\">handleSendChannelStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sendChannel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> state <span class=\"token operator\">=</span> sendChannel<span class=\"token punctuation\">.</span>readyState<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">===</span> <span class=\"token string\">\"open\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        messageInputBox<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        messageInputBox<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sendButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        disconnectButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        connectButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        messageInputBox<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        sendButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        connectButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        disconnectButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>如果通道状态已经变更为 \"open\", 意味着我们已经完成了在两对等节点之间建立连接。 相应地用户界面根据状态更新，许用并将输入光标聚焦在 text 输入框，以便用户可以立即输入要发送给对方的文本消息， 同时界面许用 \"Send\" 和 \"Disconnect\" 按钮（既然它们已经准备好了），禁用\"Connect\"按钮，既然在已经建立连接的情况下用不着它。</p>\n<p>当连接状态变更为 \"closed\"时，界面执行相反的操作： 禁用文本输入框和 \"Send\" 按钮 , 许用\"Connect\" 按钮， 以便用户在需要时可以打开新的连接，禁用\"Disconnect\" 按钮，既然没有连接时用不着它。</p>\n<p>另一方面，作为我们例子的 remote 节点， 则无视这些状态改变事件，仅仅是在控制台输出它们：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">function</span> <span class=\"token function\">handleReceiveChannelStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>receiveChannel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Receive channel's status has changed to \"</span> <span class=\"token operator\">+</span>\n                  receiveChannel<span class=\"token punctuation\">.</span>readyState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>handleReceiveChannelStatusChange()</code> 方法接收到发生的事件，事件类型为 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCDataChannelEvent\"><code>RTCDataChannelEvent</code> <small>(en-US)</small></a>.</p>"}},{"type":"prose","value":{"id":"发送消息","title":"发送消息","isH3":true,"content":"<p>当用户按下 \"Send\" 按钮，触发我们已建立的该按钮的 <code><a href=\"/en-US/docs/Web/API/Element/click_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">click (en-US)</a></code> 事件处理逻辑，在处理逻辑中调用 sendMessage() 方法。 该方法也足够简单：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">function</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> message <span class=\"token operator\">=</span> messageInputBox<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    sendChannel<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    messageInputBox<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    messageInputBox<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>首先，待发送的消息文本从文本输入框的 <a href=\"/zh-CN/docs/Web/HTML/Element/Input#attr-value\"><code>value</code></a>属性获得，之后该文本通过调用 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCDataChannel/send\"><code>sendChannel.send()</code> <small>(en-US)</small></a>发送到 remote 节点。 都搞定了！ 余下的只是些用户体验糖 ——清空并聚焦文本输入框，以便用户可以立即开始下一条消息的输入。</p>"}},{"type":"prose","value":{"id":"接收消息","title":"接收消息","isH3":true,"content":"<p>当远程通道发生“message”事件时，我们的 handleReceiveMessage() 方法被调用来处理事件。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">function</span> <span class=\"token function\">handleReceiveMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> txtNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    el<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>txtNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    receiveBox<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>该方法只是简单地注入了一些 <a href=\"/zh-CN/docs/Glossary/DOM\">DOM</a>， 它创建了 <a href=\"/zh-CN/docs/Web/HTML/Element/p\"><code>&lt;p&gt;</code></a> (paragraph) 元素，然后创建了 <a href=\"/zh-CN/docs/Web/API/Text\"><code>Text</code></a> 用于显示从事件的<code>data</code> 属性拿到的消息文本。该 text node 作为子节点附加到<code>receiveBox</code> block，显示在浏览器窗口内容区。</p>"}},{"type":"prose","value":{"id":"断开节点","title":"断开节点","isH3":true,"content":"<p>当用户点击\"Disconnect\" 按钮。在之前我们设置的按钮事件处理逻辑中<code>disconnectPeers()</code> 方法被调用。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">function</span> <span class=\"token function\">disconnectPeers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// Close the RTCDataChannels if they're open.</span>\n\n    sendChannel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    receiveChannel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Close the RTCPeerConnections</span>\n\n    localConnection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    remoteConnection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    sendChannel <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    receiveChannel <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    localConnection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    remoteConnection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Update user interface elements</span>\n\n    connectButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    disconnectButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    sendButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    messageInputBox<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    messageInputBox<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>该方法首先关闭每个节点的<a href=\"/zh-CN/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a>，之后类似地关闭每个节点的 <a href=\"/zh-CN/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a>。将所有对它们的指向置为<code>null</code> 以避免意外的复用。 之后更新界面状态以符合目前已经不存在连接的事实。</p>"}},{"type":"prose","value":{"id":"下一步","title":"下一步","isH3":false,"content":"<p>查看 GitHub 上提供的 <a href=\"https://github.com/mdn/samples-server/tree/master/s/webrtc-simple-datachannel\" class=\"external\" rel=\" noopener\">webrtc-simple-datachannel</a> 源代码。</p>"}}],"toc":[{"text":"The HTML","id":"the_html"},{"text":"The JavaScript code","id":"the_javascript_code"},{"text":"下一步","id":"下一步"}],"summary":"RTCDataChannel 接口是WebRTC API的一个功能，可以让您在两个对等体之间打开一个通道，您可以通过该通道发送和接收任意数据。 API 有意地类似于WebSocket API (en-US)，因此可以为每个 API 使用相同的编程模型。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"A simple RTCDataChannel sample","locale":"en-US","native":"English (US)"},{"title":"Uma simples amostra de RTCDataChannel","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Простой пример RTCDataChannel","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/api/webrtc_api/simple_rtcdatachannel_sample","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/webrtc_api/simple_rtcdatachannel_sample/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/WebRTC_API","title":"WebRTC API"},{"uri":"/zh-CN/docs/Web/API/WebRTC_API/Simple_RTCDataChannel_sample","title":"RTCDataChannel 简单示例"}],"pageTitle":"RTCDataChannel 简单示例 - Web API 接口参考 | MDN","noIndexing":false}}