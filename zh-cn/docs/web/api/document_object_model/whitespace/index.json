{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"DOM 中的空白符","mdn_url":"/zh-CN/docs/Web/API/Document_Object_Model/Whitespace","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<h4 id=\"问题说明\">问题说明</h4>\n<p><a href=\"zh_tw/DOM\">DOM</a> 中的空白符会让处理节点结构时增加不少麻烦。在 Mozilla 的软件中，原始文件里所有空白符都会在 DOM 中出现（不包括标签内含的空白符）。这样的处理方式有其必要之处，一方面编辑器中可迳行排列文字、二方面 <a href=\"zh_tw/CSS\">CSS</a> 里的 <code>white-space: pre</code> 也才能发挥作用。如此一来就表示：</p>\n<ul>\n  <li>有些空白符会自成一个文本节点。</li>\n  <li>有些空白符会与其他文本节点合成为一个文本节点。</li>\n</ul>\n<p>换句话说，下面这段 HTML 代码对应的 DOM 节点结构会如附图所示，其中“\\n”代表换行符：</p>\n<pre class=\"notranslate\">&lt;!-- My document --&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;My Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Header&lt;/h1&gt;\n  &lt;p&gt;\n    Paragraph\n  &lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/854/whitespace_tree.png\" alt=\"\" loading=\"lazy\">\n</p>\n<p>这么一来，要使用 DOM 游走于节点结构间又不想要无用的空白符时，会有点困难。</p>\n<h4 id=\"助你一臂之力\">助你一臂之力</h4>\n<p>以下的 JavaScript 代码定义了许多函数，能够让你在处理 DOM 中的空白符时轻松点：</p>\n<pre class=\"notranslate\">/**\n * 以下所谓的“空白符”代表：\n *  \"\\t\" TAB \\u0009（制表符）\n *  \"\\n\" LF  \\u000A（换行符）\n *  \"\\r\" CR  \\u000D（回车符）\n *  \" \"  SPC \\u0020（真正的空格符）\n *\n * 不包括 JavaScript 的“\\s”，因为那代表如不断行字符等其他字符。\n */\n\n\n/**\n * 测知某节点的文字内容是否全为空白。\n *\n * @参数   nod  |CharacterData| 类的节点（如  |Text|、|Comment| 或 |CDATASection|）。\n * @传回值      若 |nod| 的文字内容全为空白则传回 true，否则传回 false。\n */\nfunction is_all_ws( nod )\n{\n  // Use ECMA-262 Edition 3 String and RegExp features\n  return !(/[^\\t\\n\\r ]/.test(nod.data));\n}\n\n\n/**\n * 测知是否该略过某节点。\n *\n * @参数   nod  DOM1 |Node| 对象\n * @传回值      若 |Text| 节点内仅有空白符或为 |Comment| 节点时，传回 true，\n *              否则传回 false。\n */\n\nfunction is_ignorable( nod )\n{\n  return ( nod.nodeType == 8) || // 注释节点\n         ( (nod.nodeType == 3) &amp;&amp; is_all_ws(nod) ); // 仅含空白符的文字节点\n}\n\n/**\n * 此为会跳过空白符节点及注释节点的 |previousSibling| 函数\n *（ |previousSibling| 是 DOM 节点的特性值，为该节点的前一个节点。）\n *\n * @参数   sib  节点。\n * @传回值      有两种可能：\n *               1) |sib| 的前一个“非空白、非注释”节点（由 |is_ignorable| 测知。）\n *               2) 若该节点前无任何此类节点，则传回 null。\n */\nfunction node_before( sib )\n{\n  while ((sib = sib.previousSibling)) {\n    if (!is_ignorable(sib)) return sib;\n  }\n  return null;\n}\n\n/**\n * 此为会跳过空白符节点及注释节点的 |nextSibling| 函数\n *\n * @参数   sib  节点。\n * @传回值      有两种可能：\n *               1) |sib| 的下一个“非空白、非注释”节点。\n *               2) 若该节点后无任何此类节点，则传回 null。\n */\nfunction node_after( sib )\n{\n  while ((sib = sib.nextSibling)) {\n    if (!is_ignorable(sib)) return sib;\n  }\n  return null;\n}\n\n/**\n * 此为会跳过空白符节点及注释节点的 |lastChild| 函数\n *（ lastChild| 是 DOM 节点的特性值，为该节点之中最后一个子节点。）\n *\n * @参数   par  节点。\n * @传回值      有两种可能：\n *               1) |par| 中最后一个“非空白、非注释”节点。\n *               2) 若该节点中无任何此类子节点，则传回 null。\n */\nfunction last_child( par )\n{\n  var res=par.lastChild;\n  while (res) {\n    if (!is_ignorable(res)) return res;\n    res = res.previousSibling;\n  }\n  return null;\n}\n\n/**\n * 此为会跳过空白符节点及注释节点的 |firstChild| 函数\n *\n * @参数   par  节点。\n * @传回值      有两种可能：\n *               1) |par| 中第一个“非空白、非注释”节点。\n *               2) 若该节点中无任何此类子节点，则传回 null。\n */\nfunction first_child( par )\n{\n  var res=par.firstChild;\n  while (res) {\n    if (!is_ignorable(res)) return res;\n    res = res.nextSibling;\n  }\n  return null;\n}\n\n/**\n * 此为传回值不包含文字节点资料的首尾所有空白符、\n * 并将两个以上的空白符缩减为一个的 |data| 函数。\n *（ data 是 DOM 文字节点的特性值，为该文字节点中的资料。）\n *\n * @参数   txt 欲传回其中资料的文字节点\n * @传回值     文字节点的内容，其中空白符已依前述方式处理。\n */\nfunction data_of( txt )\n{\n  var data = txt.data;\n  // Use ECMA-262 Edition 3 String and RegExp features\n  data = data.replace(/[\\t\\n\\r ]+/g, \" \");\n  if (data.charAt(0) == \" \")\n    data = data.substring(1, data.length);\n  if (data.charAt(data.length - 1) == \" \")\n    data = data.substring(0, data.length - 1);\n  return data;\n}\n</pre>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<p>下面的代码演示了上面这些工具函数的使用方法。具体操作是，遍历一个子节点全部为元素节点的元素，找到所包含的第一个节点为一个文本内容为“<code>This is the third paragraph</code>”的文本节点的那个子元素，并修改该子元素的 class 属性及其第一个文本节点的文字内容。</p>\n<pre class=\"notranslate\">var cur = first_child(document.getElementById(\"test\"));\nwhile (cur)\n{\n  if (data_of(cur.firstChild) == \"This is the third paragraph.\")\n  {\n      cur.className = \"magic\";\n      cur.firstChild.data = \"This is the magic paragraph.\";\n  }\n  cur = node_after(cur);\n}\n</pre>\n<h4 id=\"原文资讯\">原文资讯</h4>\n<ul>\n  <li>作者：<a href=\"https://dbaron.org\" class=\"external\" rel=\" noopener\">L. David Baron</a></li>\n  <li>最后更新：January 1, 2003</li>\n  <li>版权资讯：© 1998-2005 by individual mozilla.org contributors; 内容部份以 <a href=\"https://www.mozilla.org/foundation/licensing/website-content.html\" class=\"external\" rel=\" noopener\">创意公用</a>方式授权。</li>\n</ul>"}}],"toc":[{"text":"示例","id":"示例"}],"summary":"DOM 中的空白符会让处理节点结构时增加不少麻烦。在 Mozilla 的软件中，原始文件里所有空白符都会在 DOM 中出现（不包括标签内含的空白符）。这样的处理方式有其必要之处，一方面编辑器中可迳行排列文字、二方面 CSS 里的 white-space: pre 也才能发挥作用。如此一来就表示：","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"How whitespace is handled by HTML, CSS, and in the DOM","locale":"en-US","native":"English (US)"},{"title":"Cómo manejan el espacio en blanco HTML, CSS y el DOM","locale":"es","native":"Español"},{"title":"Gestion des espaces dans le DOM","locale":"fr","native":"Français"},{"title":"ホワイトスペースは HTML、 CSS、そして DOM 内でどう扱われるか","locale":"ja","native":"日本語"},{"title":"Whitespace no DOM","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"DOM 中的空白字元","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/web/api/document_object_model/whitespace","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/document_object_model/whitespace/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/Document_Object_Model","title":"文档对象模型 (DOM)"},{"uri":"/zh-CN/docs/Web/API/Document_Object_Model/Whitespace","title":"DOM 中的空白符"}],"pageTitle":"DOM 中的空白符 - Web API 接口参考 | MDN","noIndexing":false}}