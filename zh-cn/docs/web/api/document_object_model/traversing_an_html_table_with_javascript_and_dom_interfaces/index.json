{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"使用 Javascript 和 DOM Interfaces 来处理 HTML","mdn_url":"/zh-CN/docs/Web/API/Document_Object_Model/Traversing_an_HTML_table_with_JavaScript_and_DOM_Interfaces","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":"简介","title":"简介","isH3":true,"content":"<p>本文概述了一些强大的，基本的 DOM 1 级别中的方法以及如何在 JavaScript 中使用它们。你将会如何动态地创建，访问，控制以及移除 HTML 元素。这里提到的 DOM 方法，并非是 HTML 专有的；它们在 XML 中同样适用。这里所有的示例，在任何全面支持 DOM level1 的浏览器里都能正常工作；例如 Mozilla 浏览器或者其他基于 Mozilla 的浏览器，像网景公司的下一代导航者（Navigatior）浏览器等。这里的示例代码在 IE5 中也能正常工作。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 这里所提到的 DOM 方法是文档对象模型规范（版本一）的核心的一部分。DOM 1 版本包括对文档进行访问和处理的方法（DOM 1 核心）和专门为 HTML 文档定义的方法。</p>\n</div>"}},{"type":"prose","value":{"id":"sample1.html_概览","title":"Sample1.html 概览","isH3":true,"content":"<p>这段文字是通过一个实例代码来介绍了 DOM 的。那么我们从下面的 HTML 示例来开始吧。这段示例使用了 DOM1 的方法，从 JavaScript 动态创建了一个 HTML 表格。它创建了一个包含了四个单元格，并且在每个单元格中含有文本。单元中文字内容是“这个单元式 y 行 x 列”，来展示单元格在表格中所处的位置。</p>\n<pre class=\"notranslate\">&lt;head&gt;\n&lt;title&gt;样例代码 - 使用 JavaScript 和 DOM 接口创建一个 HTML 表格&lt;/title&gt;\n&lt;script&gt;\n    function start() {\n        // 获得从 body 的引用\n        var mybody=document.getElementsByTagName(\"body\").item(0);\n        // 创建一个 TABLE 的元素\n        var mytable = document.createElement(\"TABLE\");\n        // 创建一个 TBODY 的元素\n        var mytablebody = document.createElement(\"TBODY\");\n        // 创建所有的单元格\n        for(j=0;j&lt;2;j++) {\n            // 创建一个 TR 元素\n          var  mycurrent_row=document.createElement(\"TR\");\n            for(i=0;i&lt;2;i++) {\n                // 创建一个 TD 元素\n              var  mycurrent_cell=document.createElement(\"TD\");\n                // 创建一个文本（text）节点\n              var  currenttext=document.createTextNode(\"cell is row \"+j+\", column \"+i);\n                // 将我们创建的这个文本节点添加在 TD 元素里\n                mycurrent_cell.appendChild(currenttext);\n                // 将 TD 元素添加在 TR 里\n                mycurrent_row.appendChild(mycurrent_cell);\n            }\n            // 将 TR 元素添加在 TBODY 里\n            mytablebody.appendChild(mycurrent_row);\n        }\n        // 将 TBODY 元素添加在 TABLE 里\n        mytable.appendChild(mytablebody);\n        // 将 TABLE 元素添加在 BODY 里\n        mybody.appendChild(mytable);\n        // 设置 mytable 的边界属性 border 为 2\n        mytable.setAttribute(\"border\",\"2\");\n    }\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body onload=\"start()\"&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>注意我们创建元素和文本节点的顺序：</p>\n<ol>\n  <li>首先我们创建了 TABLE 元素。</li>\n  <li>然后，我们创建了 TABLE 的子元素--TBODY。</li>\n  <li>然后，我们使用循环语句创建了 TBODY 的子元素--TR。</li>\n  <li>对于每一个 TR 元素，我们使用一个循环语句创建它的子元素--TD。</li>\n  <li>对于每一个 TD 元素，我们创建单元格内的文本节点。</li>\n</ol>\n<p>现在，我们创建了 TABLE，TBODY，TR，TD 等元素，然后创建了文本节点；接下来，我们将每一个对象接在各自的父节点上，使用逆序：</p>\n<ol>\n  <li>首先，我们将每一个文本节点接在 TD 元素上\n    <pre class=\"notranslate\">mycurrent_cell.appendChild(currenttext);\n</pre>\n  </li>\n  <li>然后，我们将每一个 TD 元素接在他的父 TR 元素上。\n    <pre class=\"notranslate\">mycurrent_row.appendChild(mycurrent_cell);\n</pre>\n  </li>\n  <li>然后，我们将每一个 TR 元素接在他们的父 TBODY 元素上。\n    <pre class=\"notranslate\">mytablebody.appendChild(mycurrent_row);\n</pre>\n  </li>\n  <li>下一步，我们将 TBODY 元素接在他的父 TABLE 元素上\n    <pre class=\"notranslate\">mytable.appendChild(mytablebody);\n</pre>\n  </li>\n  <li>最后，我们将 TABLE 元素接在他的父元素 BODY 上。\n    <pre class=\"notranslate\">mybody.appendChild(mytable);\n</pre>\n  </li>\n</ol>\n<p>请记住这个机制。你将会在 W3C DOM 编程中经常使用它。首先，你从上到下的创建元素；然后你从下向上的将子元素接在他们的父元素上。</p>\n<p>下面是由 javascript 代码生成的 HTML 代码：</p>\n<pre class=\"notranslate\">...\n&lt;table border=\"2\"&gt;\n&lt;tbody&gt;\n&lt;tr&gt;&lt;td&gt;cell is row 0 column 0&lt;/td&gt;&lt;td&gt;cell is row 0 column 1&lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;cell is row 1 column 0&lt;/td&gt;&lt;td&gt;cell is row 1 column 1&lt;/td&gt;&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n...\n</pre>\n<p>下面是由代码生成的 TABLE 及其子元素的 DOM 对象树：</p>\n<p>\n  <img src=\"/@api/deki/files/2677/=Sample1-tabledom.jpg\" alt=\"Image:sample1-tabledom.jpg\" loading=\"lazy\">\n</p>\n<p>你可以只用一些 DOM 方法来创建这个表格和它内部的子元素。请在脑海中时刻保留你想要创建的数据结构的树之模型，这样有利于更简便的写出必须的代码。在图 1 的 TABLE 树中，TABLE 有一个子元素 TBODY。TBODY 有两个子元素。每一个 TR 又含有两个子元素（TD）。最后，每一个 TD 有一个子元素 -- 文本节点。</p>"}},{"type":"prose","value":{"id":"基本_dom_方法_-_sample2.html","title":"基本 DOM 方法 - Sample2.html","isH3":true,"content":"<p><code>getElementByTagName</code>是文档接口（Document interface）和元素接口（Element interface）的中的方法，所以不管是根文档对象还是所有的元素对象都含有方法<code>getElementByTagName</code>。用来通过它们的标签名称（tag name）来获得某些元素的一系列子元素。你可以使用的方法是：<code>element.getElementsByTagName(tagname)</code>。</p>\n<p><code>getElementsByTagName</code>返回一个有特定标签名称（tagname）的子元素列表。从这个子元素列表中，你可以通过调用<code>item</code>和你想得到的元素的下标，来获得单个元素。列表中第一个元素的下标是 0。上面的方法很简单，但是当你操作一个巨大的数据结构时还是应该小心一些。OK，我们下一个话题中要继续对我们的表格例子进行修改。下面的示例更加简单，它意图展示一些基础的方法：</p>\n<pre class=\"notranslate\">&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;样例代码 - 使用 JavaScript 和 DOM 接口操作 HTML 表格&lt;/title&gt;\n&lt;script&gt;\n    function start() {\n        // 获得所有的 body 元素列表（在这里将只有一个）\n        myDocumentElements=document.getElementsByTagName(\"body\");\n        // 我们所需要 body 元素是这个列表的第一个元素\n        myBody=myDocumentElements.item(0);\n        // 现在，让我们获得 body 的子元素中所有的 p 元素\n        myBodyElements=myBody.getElementsByTagName(\"p\");\n        // 我们所需要的是这个列表中的第二个单元元素\n        myP=myBodyElements.item(1);\n    }\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body onload=\"start()\"&gt;\n&lt;p&gt;hi&lt;/p&gt;\n&lt;p&gt;hello&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>在这个例子中，我们设置变量<code>myP</code>指向 DOM 对象 body 中的第二个<code>p</code>元素：</p>\n<ol>\n  <li>首先，我们使用下面的代码获得所有的 body 元素的列表，因为在任何合法的 HTML 文档中都只有一个 body 元素，所以这个列表是只包含一个单元的。\n    <pre class=\"notranslate\">document.getElementsByTagName(\"body\")\n</pre>\n  </li>\n  <li>下一步，我们取得列表的第一个元素，它本身就会 body 元素对象。\n    <pre class=\"notranslate\">myBody=myDocumentElements.item(0);\n</pre>\n  </li>\n  <li>然后，我们通过下面代码获得 body 的子元素中所有的 p 元素\n    <pre class=\"notranslate\">myBodyElements=myBody.getElementsByTagName(\"p\");\n</pre>\n  </li>\n  <li>最后，我们从列表中取第二个单元元素。\n    <pre class=\"notranslate\">myP=myBodyElements.item(1);\n</pre>\n  </li>\n</ol>\n<p>\n  <img src=\"https://developer.mozilla.org/@api/deki/files/834/=Sample2a2.jpg\" alt=\"Image:sample2a2.jpg\" loading=\"lazy\">\n</p>\n<p>一旦你取得了 HTML 元素的 DOM 对象，你就可以设置它的属性了。比如，如果你希望设置背景色属性，你只需要添加：</p>\n<pre class=\"notranslate\">myP.style.background=\"rgb(255,0,0)\";\n// 设置 inline 的背景色风格\n</pre>\n<h4 id=\"使用_document.createtextnode.._创建文本节点\">使用 document.createTextNode(..) 创建文本节点</h4>\n<p>使用文档对象来调用一个 createTextNode 方法并创建你自己的文本节点。你只需要传递文字内容给这个函数。返回的值就是一个展示那个文本节点信息的对象。</p>\n<pre class=\"notranslate\">myTextNode=document.createTextNode(\"world\");\n</pre>\n<p>这表示你已经创建了一个 TEXT——NODE（一个文字片断）类型的节点，并且它的内容是“world”，任何你对 myTextNode 的引用都指向这个节点对象。如果想将这个文本插入到 HTML 页面中，你还需要将它作为其他节点元素的子元素。</p>\n<h4 id=\"使用_appendchild.._插入元素\">使用 appendChild(..) 插入元素</h4>\n<p>那么，通过调用 <code>myP.appendChild(node_element)</code> 你可以将这个元素设置成为第二个 P 的一个新的子元素。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>myP<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>myTextNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在测试了这个例子之后，我们注意到，hello 和 world 单词被组合在了一个：helloworld。事实上，当你看到 HTML 页面时，hello 和 world 两个文字节点看起来更像是一个节点。但是请记住它们在文档模型中的形式 -- 是两个节点。第二个节点是一个 TEXT_NODE 类型的新节点，也是第二个 P 标签的第二个子元素。下面的图标将在文档树种展示最近创建的文本节点对象。</p>\n<p>\n  <img src=\"https://developer.mozilla.org/@api/deki/files/835/=Sample2b2.jpg\" alt=\"Image:sample2b2.jpg\" loading=\"lazy\">\n</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> createTextNode 和 appendChild 是在单词 hello 和 world 之间设置空格的一个简单方法。另外一个重要的注意事项是：appendChild 方法将把新的子节点接在最后一个子节点之后，正如 world 被加在了 hello 之后。所以如果你想在 hello 和 world 中间添加一个文本节点的话，你应该使用 insertBefore 而不是 appendChild.</p>\n</div>\n<h4 id=\"使用文档对象和_createelement.._方法创建新的元素\">使用文档对象和 createElement(..) 方法创建新的元素</h4>\n<p>你可以使用 createElement 来创建新的 HTML 元素或者任何其它你想要的元素。比如，如果你想要创建一个新的 P 作为 BODY 的子元素，你可以使用前面例子的 myBody 并给它接上一个新的元素节点。使用 document.createElement(\"tagname\") 可以方便的创建一个节点。如下：</p>\n<pre class=\"notranslate\">myNewPTAGnode=document.createElement(\"p\");\nmyBody.appendChild(myNewPTAGnode);\n</pre>\n<p>\n  <img src=\"https://developer.mozilla.org/@api/deki/files/836/=Sample2c.jpg\" alt=\"Image:sample2c.jpg\" loading=\"lazy\">\n</p>\n<h4 id=\"使用_removechild.._方法移除节点\">使用 removeChild(..) 方法移除节点</h4>\n<p>每一个节点都可以被移除。下面的一行代码移除了包含在 myP(第二个 p 元素) 下面的文本节点 world。</p>\n<pre class=\"notranslate\">myP.removeChild(myTextNode);\n</pre>\n<p>最后你可以将 myTextNode（那个包含了 world 单词的节点）添加给我们最后创建的 P 元素：</p>\n<pre class=\"notranslate\">myNewPTAGnode.appendChild(myTextNode);\n</pre>\n<p>被修改的对象树的最后的状态如下：</p>\n<p>\n  <img src=\"https://developer.mozilla.org/@api/deki/files/837/=Sample2d.jpg\" alt=\"Image:sample2d.jpg\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"动态创建一个表格_回到_sample1.html","title":"动态创建一个表格 (回到 Sample1.html)","isH3":true,"content":"<p>这一段落的剩余部分我们将继续修改我们 sample1.html。下面的图展示了我们在示例中创建的表格的对象树的结构。</p>\n<h4 id=\"复习一下_html_表格结构\">复习一下 HTML 表格结构</h4>\n<p>\n  <img src=\"https://developer.mozilla.org/@api/deki/files/833/=Sample1-tabledom.jpg\" alt=\"Image:sample1-tabledom.jpg\" loading=\"lazy\">\n</p>\n<h4 id=\"创建元素节点并将他们插入到文档树中\">创建元素节点并将他们插入到文档树中</h4>\n<p>sample1.html 中创建表格的基本步骤是：</p>\n<ul>\n  <li>获得 body 对象（文档对象的第一个元素）</li>\n  <li>创建所有元素。</li>\n  <li>最后，根据表格结构（上面图中所示）将每一个孩子节点拼接起来。下面的一段源码是经过修改的 sample1.html</li>\n</ul>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 在 start 函数的最后，有一行新代码。使用另一个 DOM 方法（setAttribute）来设置表格的边界属性。setAttribute 有两个参数：属性的名称和属性的值。你可以使用这个方法来设置任意元素的任意属性。</p>\n</div>\n<pre class=\"notranslate\">&lt;head&gt;\n&lt;title&gt;示例代码 - 使用 Javascript 和 DOM Interfaces 来处理 HTML&lt;/title&gt;\n&lt;script&gt;\n    function start() {\n        // 获得 body 的引用\n        var mybody=document.getElementsByTagName(\"body\").item(0);\n        // 创建一个标签名称为 TABLE 的元素\n        mytable = document.createElement(\"TABLE\");\n        // 创建一个标签名称为在 TBODY 的元素\n        mytablebody = document.createElement(\"TBODY\");\n        // 创建所有的单元格\n        for(j=0;j&lt;2;j++) {\n            // 创建一个标签名称为在 TR 的元素\n            mycurrent_row=document.createElement(\"TR\");\n            for(i=0;i&lt;2;i++) {\n                // 创建一个标签名称为在 TD 的元素\n                mycurrent_cell=document.createElement(\"TD\");\n                // 创建一个文字节点\n                currenttext=document.createTextNode(\"cell is row \"+j+\", column \"+i);\n                // 将文字节点添加到 TD 单元格内\n                mycurrent_cell.appendChild(currenttext);\n                // 将 TD 单元格添加到 TR 行中\n                mycurrent_row.appendChild(mycurrent_cell);\n            }\n            // 将 TR 行添加到 TBODY 中\n            mytablebody.appendChild(mycurrent_row);\n        }\n        // 将 TBODY 添加到 TABLE 中\n        mytable.appendChild(mytablebody);\n        // 将 TABLE 添加到 BODY 中\n        mybody.appendChild(mytable);\n        // 设置边界属性为 2\n        mytable.setAttribute(\"border\",\"2\");\n    }\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body onload=\"start()\"&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>"}},{"type":"prose","value":{"id":"使用_css_和_dom_来操作表格","title":"使用 CSS 和 DOM 来操作表格","isH3":true,"content":"<h4 id=\"从表格中获得一个文字节点\">从表格中获得一个文字节点</h4>\n<p>示例介绍了两个新的 DOM 属性。首先，使用 childNodes 属性来获得 mycel 的孩子节点列表。childNodes 列表包括所有的孩子节点，无论它们的名称或类型是什么。像 getElemengByTagName 一样，它返回了一个节点列表。不同的是，getElementByTagName 只返回指定标签名称的元素。一旦你获得了返回的列表，你可以使用 item(x) 方法来使用指定的元素。这个例子在表格的第二行第二个单元格中的 myceltext 中保存了一个文字节点。然后，运行这个例子并观察结果，他创建了一个新的文字节点，这个文字节点的内容是 myceltext 的值，并且将这个文字节点作为了 BODY 元素的一个孩子。</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>备注：</strong> 如果你的对象是一个文字节点，你可以使用 data 属性来回收（retrieve）节点的文字内容</p>\n</div>\n<pre class=\"notranslate\">mybody=document.getElementsByTagName(\"body\").item(0);\nmytable=mybody.getElementsByTagName(\"table\").item(0);\nmytablebody=mytable.getElementsByTagName(\"tbody\").item(0);\nmyrow=mytablebody.getElementsByTagName(\"tr\").item(1);\nmycel=myrow.getElementsByTagName(\"td\").item(1);\n// mycel 的孩子节点列表的第一个元素\nmyceltext=mycel.childNodes.item(0);\n// currenttext 的内容是 myceltext 的内容\ncurrenttext=document.createTextNode(myceltext.data);\nmybody.appendChild(currenttext);\n</pre>\n<h4 id=\"获得一个属性的值\">获得一个属性的值</h4>\n<p>在 sample1 的最后我们在 mytable 对象上调用了 setAttribute。这个调用是用来设置表格的边界属性的。然后是用了 getAttribute 方法来获得一个属性的值：</p>\n<pre class=\"notranslate\">mytable.getAttribute(\"border\");\n</pre>\n<h4 id=\"通过改变样式属性来隐藏一列\">通过改变样式属性来隐藏一列</h4>\n<p>一旦你在你的 javascript 变量中保存了一个对象，你就可以直接为它设置样式属性了。下面的代码是修改后的 sample1.html，在这里，第二列的每一个单元格都被隐藏了。而且第一列中的每一个单元格改为使用红色背景。注意，样式属性是被直接设置的。</p>\n<pre class=\"notranslate\">&lt;html&gt;\n&lt;body onload=\"start()\"&gt;\n&lt;/body&gt;\n&lt;script&gt;\n    function start() {\n       var mybody=document.getElementsByTagName(\"body\").item(0);\n       mytable = document.createElement(\"TABLE\");\n       mytablebody = document.createElement(\"TBODY\");\n       for(j=0;j&lt;2;j++) {\n           mycurrent_row=document.createElement(\"TR\");\n           for(i=0;i&lt;2;i++) {\n               mycurrent_cell=document.createElement(\"TD\");\n               currenttext=document.createTextNode(\"cell is:\"+i+j);\n               mycurrent_cell.appendChild(currenttext);\n               mycurrent_row.appendChild(mycurrent_cell);\n               // 当 column 为 0 时，设置单元格背景色；column 为 1 时隐藏单元格\n               if(i==0) {\n                   mycurrent_cell.style.background=\"rgb(255,0,0)\";\n               } else {\n                   mycurrent_cell.style.display=\"none\";\n               }\n           }\n           mytablebody.appendChild(mycurrent_row);\n       }\n       mytable.appendChild(mytablebody);\n       mybody.appendChild(mytable);\n    }\n&lt;/script&gt;\n&lt;/html&gt;\n</pre>"}}],"toc":[],"summary":"本文概述了一些强大的，基本的 DOM 1 级别中的方法以及如何在 JavaScript 中使用它们。你将会如何动态地创建，访问，控制以及移除 HTML 元素。这里提到的 DOM 方法，并非是 HTML 专有的；它们在 XML 中同样适用。这里所有的示例，在任何全面支持 DOM level1 的浏览器里都能正常工作；例如 Mozilla 浏览器或者其他基于 Mozilla 的浏览器，像网景公司的下一代导航者（Navigatior）浏览器等。这里的示例代码在 IE5 中也能正常工作。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Traversing an HTML table with JavaScript and DOM Interfaces","locale":"en-US","native":"English (US)"},{"title":"Trazado de una tabla HTML mediante JavaScript y la Interface DOM","locale":"es","native":"Español"},{"title":"Explorer un tableau HTML avec des interfaces DOM et JavaScript","locale":"fr","native":"Français"},{"title":"JavaScript と DOM インターフェイスによる HTML の表の操作","locale":"ja","native":"日本語"}],"source":{"folder":"zh-cn/web/api/document_object_model/traversing_an_html_table_with_javascript_and_dom_interfaces","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/document_object_model/traversing_an_html_table_with_javascript_and_dom_interfaces/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/Document_Object_Model","title":"文档对象模型 (DOM)"},{"uri":"/zh-CN/docs/Web/API/Document_Object_Model/Traversing_an_HTML_table_with_JavaScript_and_DOM_Interfaces","title":"使用 Javascript 和 DOM Interfaces 来处理 HTML"}],"pageTitle":"使用 Javascript 和 DOM Interfaces 来处理 HTML - Web API 接口参考 | MDN","noIndexing":false}}