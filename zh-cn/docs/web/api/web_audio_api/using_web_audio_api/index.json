{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Web Audio API 的运用","mdn_url":"/zh-CN/docs/Web/API/Web_Audio_API/Using_Web_Audio_API","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>让我们来看看 <a href=\"/zh-CN/docs/Web/API/Web_Audio_API\">Web Audio API</a> 入门。我们将简要介绍一些概念，然后学习一个简单的允许我们加载音轨，播放暂停，改变音量和立体声声像的音箱例子。</p>\n<p>Web Audio API 并不会取代&lt;audio&gt;音频元素，倒不如说它是&lt;audio&gt;的补充更好，就好比如&lt;canvas&gt;与&lt;img&gt;共存的关系。你使用来实现音频的方式取决于你的使用情况。如果你只是想控制一个简单的音轨的播放，&lt;audio&gt;或许是一个更好更快的选择。如果你想实现更多复杂的音频处理，以及播放，Web Audio API 提供了更多的优势以及控制。</p>\n<p>Web Audio API 的一个强大之处在于，它没有任何严格的声音呼叫控制。比如说，在同一时间它没有呼叫 32 或 64 的声音的限制。如果你的处理器性能好的话，同一时间播放 1000 多的声音不卡顿也是有可能的。这充分显示真正的进步，要知道几年前中高频的声卡仅能处理小部分的负载。</p>"}},{"type":"prose","value":{"id":"例子","title":"例子","isH3":false,"content":"<p>我们的音箱看起来像这样：</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API/boombox.png\" alt=\"A boombox with play, pan, and volume controls\" width=\"1200\" height=\"646\" loading=\"lazy\">\n</p>\n<p>注意带有播放按钮的复古磁带卡座，及用于改变音量和立体声声像的平移滑块。我们可以使其更复杂，但这是该阶段进行简单学习的理想选择。</p>\n<p>查看最终 demo 代码 <a href=\"https://codepen.io/Rumyra/pen/qyMzqN/\" class=\"external\" rel=\" noopener\">here on Codepen</a>，或者在 <a href=\"https://github.com/mdn/webaudio-examples/tree/master/audio-basics\" class=\"external\" rel=\" noopener\">GitHub 查看源代码 on GitHub</a>。</p>"}},{"type":"prose","value":{"id":"浏览器支持","title":"浏览器支持","isH3":false,"content":"<p>现代浏览器的 Web Audio API 对的大多数功能都有很好的支持。API 有很多的功能，因此要获得更准确的信息，你必须检查每个参考页面底部的浏览器兼容表。</p>"}},{"type":"prose","value":{"id":"音频图","title":"音频图","isH3":false,"content":"<p>Web Audio API 中的所有内容都是基于音频图的概念，音频图由节点组成。</p>\n<p>Web Audio API 在 <strong>audio context（音频上下文）</strong> 内处理音频，而且被设计为允许模块化路由。基本的音频操作是基于 <strong>audio nodes</strong> 进行的，音频节点连接起来形成一个音频路由图。你拥有输入节点，你要操作的声音源，根据设计需要被修改的节点，和输出节点（目的地），它们允许你保存或者听取这些声音。</p>\n<p>支持拥有不同通道布局的多个的音频源，即使是在单个上下文。因为模块化设计，你可以创建具有动态效果的复杂的音频功能。</p>"}},{"type":"prose","value":{"id":"音频上下文","title":"音频上下文","isH3":false,"content":"<p>为了能通过 Web Audio API 执行任何操作，我们需要创建音频上下文实例。这能让我们访问 API 所有的特性和功能。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// for legacy browsers</span>\n<span class=\"token keyword\">const</span> AudioContext <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>AudioContext <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>webkitAudioContext<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> audioContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>所以当我们这样做时会发生什么？为我们自动创建一个 <a href=\"/zh-CN/docs/Web/API/BaseAudioContext\"><code>BaseAudioContext</code></a> 并自动扩展到在线音频上下文。我们希望如此，因为我们想要播放在线声音。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 如果你只是想处理音频数据，举个例子，缓存和流式传输而不播放它，你可能想要考虑创建一个 <a href=\"/zh-CN/docs/Web/API/OfflineAudioContext\"><code>OfflineAudioContext</code></a>。</p>\n</div>"}},{"type":"prose","value":{"id":"加载声音","title":"加载声音","isH3":false,"content":"<p>现在，需要通过我们创建的音频上下文播放一些声音。Web Audio API 中有几种方法可以实现这一点。让我们通过一个简单的方法开始 — 因为我们有一个音箱，我们可能想播放一首完整的歌曲。 此外，为了便于访问，我们可以在在 DOM 中暴露该音轨。我们将使用 <a href=\"/zh-CN/docs/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a> 元素在页面上暴露这首歌曲。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">&lt;</span>audio src<span class=\"token operator\">=</span><span class=\"token string\">\"myCoolTrack.mp3\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"audio/mpeg\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>audio<span class=\"token operator\">&gt;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 如果你要加载的声音文件保留在其他域中，则需要使用 <code>crossorigin</code> 属性；查看 <a href=\"/zh-CN/docs/Web/HTTP/CORS\">Cross Origin Resource Sharing (CORS)</a> 取得更多信息。</p>\n</div>\n<p>为了使用 Web Audio API 的优秀特性，我们需要从该元素中获取源并将其传入我们创建的上下文中。幸运的是，有一个方法可以让我们做到这一点 — <a href=\"/zh-CN/docs/Web/API/AudioContext/createMediaElementSource\"><code>AudioContext.createMediaElementSource</code></a>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// get the audio element</span>\n<span class=\"token keyword\">const</span> audioElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'audio'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// pass it into the audio context</span>\n<span class=\"token keyword\">const</span> track <span class=\"token operator\">=</span> audioContext<span class=\"token punctuation\">.</span><span class=\"token function\">createMediaElementSource</span><span class=\"token punctuation\">(</span>audioElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 上面的 <code>&lt;audio&gt;</code> 元素在 DOM 中代表了一个<a href=\"/zh-CN/docs/Web/API/HTMLMediaElement\"><code>HTMLMediaElement</code></a> 类型的对象，拥有其自身的一组功能。这一切都将保持不变。我们只是让 Web Audio API 能够访问到声音。</p>\n</div>"}},{"type":"prose","value":{"id":"控制声音","title":"控制声音","isH3":false,"content":"<p>当在网页上播放声音时，让用户能控制它是很重要的。根据使用场景，有无数的选项可用，但这我们将提供播放/暂停声音，改变音轨音量及从左到右平移声音的功能。</p>\n<p>通过 JavaScript 代码控制声音会受到浏览器的自动播放策略的影响 (autoplay support policies)，因此在未经用户（或白名单）许可的情况下脚本对声音的控制会被阻止。浏览器的自动播放策略通常要求显式权限或者用户与页面产生互动后，才允许脚本触发音频播放。</p>\n<p>这些特殊的要求基本上是因为意外的声音可能会打扰到用户，令人厌烦，并且可能导致无障碍问题。你可以在文章 <a href=\"/zh-CN/docs/Web/Media/Autoplay_guide\">媒体与 Web 音频 API 自动播放指南</a> 了解更多相关信息。</p>\n<p>因为我们的脚本正响应用户输入（例如，点击播放按钮）进行播放音频，我们状态良好且应该没有自动播放阻止的问题。所以，让我们看看我们的播放和暂停功能。我们有一个当音频播放时变为暂停按钮的播放按钮：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">data-playing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">role</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>switch<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-checked</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">&gt;</span></span>Play/Pause<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>在我们可以播放音频前我们需要将我们的音频图从音频源/输入节点连接到目的地。</p>\n<p>我们已经通过把音频元素传入 API 生成一个输入节点。在大多数情况下，你不需要生成一个输出节点，你只需要将其他节点连接到可以为你处理这种情况的 <a href=\"/zh-CN/docs/Web/API/BaseAudioContext/destination\"><code>BaseAudioContext.destination</code></a>：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>track<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioContext<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>可视化这些节点的一个好方法是绘制音频图形以便可视化它。这是我们当前的音频图：</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API/graph1.jpg\" alt=\"an audio graph with an audio element source connected to the default destination\" width=\"1426\" height=\"486\" loading=\"lazy\">\n</p>\n<p>现在我们可以添加播放和暂停功能。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// select our play button</span>\n<span class=\"token keyword\">const</span> playButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nplayButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// check if context is in suspended state (autoplay policy)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>audioContext<span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> <span class=\"token string\">'suspended'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        audioContext<span class=\"token punctuation\">.</span><span class=\"token function\">resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// play or pause track depending on state</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>playing <span class=\"token operator\">===</span> <span class=\"token string\">'false'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        audioElement<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>playing <span class=\"token operator\">=</span> <span class=\"token string\">'true'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>playing <span class=\"token operator\">===</span> <span class=\"token string\">'true'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        audioElement<span class=\"token punctuation\">.</span><span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>playing <span class=\"token operator\">=</span> <span class=\"token string\">'false'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>我们也需要考虑到当音频播放完毕后做什么。我们的 <code>HTMLMediaElement</code> 一旦播放完毕会触发一个 <code>ended</code> 事件，所以我们可以监听它并运行相应代码：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>audioElement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ended'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    playButton<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>playing <span class=\"token operator\">=</span> <span class=\"token string\">'false'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"关于_web_audio_编辑器","title":"关于 Web Audio 编辑器","isH3":false,"content":"<p>Firefox 有一个名为 <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/web_audio_editor/index.html\" class=\"external\" rel=\" noopener\">Web Audio editor</a> 的工具。在其上运行音频图的任何页面上，你可以打开开发者工具，使用 Web Audio 选项卡查看音频图，可查看每个节点的可用属性，并可以修改这些属性来查看会有什么效果。</p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/16198/web-audio-editor.png\" alt=\"The Firefox web audio editor showing an audio graph with AudioBufferSource, IIRFilter, and AudioDestination\" loading=\"lazy\">\n</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>备注：</strong> Web Audio 编辑器默认不是开启的，你需要打开 Firefox developer tools 设置，选中 Default Developer Tools 部分中的 Web Audio 复选框来显示它。</p>\n</div>"}},{"type":"prose","value":{"id":"修改声音","title":"修改声音","isH3":false,"content":"<p>让我们深入研究一些基本的修改节点以改变我们的声音。这就是 Web Audio API 真正开始派上用场的地方。首先，让我们改变音量。这可以通过 <a href=\"/zh-CN/docs/Web/API/GainNode\"><code>GainNode</code></a> 实现，它表示我们的声波有多大。</p>\n<p>使用 Web Audio API 可以通过 2 个方法创建节点。你可以使用上下文本身的工厂方法（例如， <code>audioContext.createGain()</code> ）或者通过节点的构造函数（例如， <code>new GainNode()</code> ），我们将使用工厂方法：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> gainNode <span class=\"token operator\">=</span> audioContext<span class=\"token punctuation\">.</span><span class=\"token function\">createGain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>现在我们需要在原先音频图基础上更新音频图，所以输入连接到增益，然后增益节点连接到目标：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>track<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gainNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioContext<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这会让我们的音频图看起来如下：</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API/graph2.jpg\" alt=\"an audio graph with an audio element source, connected to a gain node that modifies the audio source, and then going to the default destination\" width=\"1774\" height=\"550\" loading=\"lazy\">\n</p>\n<p>默认增益为 1；这使当前音量保持不变。增益可以设置的最小值约<code>-3.4028235E38</code>，最大约<code>3.4028235E38</code>。这里我们将允许音箱增益可以设置到 2（2 倍的原音量）和降低到 0（这可以有效的静音）。</p>\n<p>让我们给用户这样的控制 — 我们将会使用 <a href=\"/zh-CN/docs/Web/HTML/Element/input/range\">range input</a> ：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"range\"</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"volume\"</span> min<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span> max<span class=\"token operator\">=</span><span class=\"token string\">\"2\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span> step<span class=\"token operator\">=</span><span class=\"token string\">\"0.01\"</span><span class=\"token operator\">&gt;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>备注：</strong> 范围输入 (Range Input) 是更新音频节点值非常方便的输入类型。你可以指定特定的范围值同时直接将它们作为音频参数一起使用。</p>\n</div>\n<p>所以当用户更改输入节点值时，获取此输入值并更新增益值：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> volumeControl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#volume'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nvolumeControl<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    gainNode<span class=\"token punctuation\">.</span>gain<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>备注：</strong> 节点对象的值（例如， <code>GainNode.gain</code> ）不是简单值；它们实际上是 <a href=\"/zh-CN/docs/Web/API/AudioParam\"><code>AudioParam</code></a> 类型对象 — 这些被称为参数。这也是为什么我们需要设置 <code>GainNode.gain</code> 的 <code>value</code> 属性，而不是直接设置 <code>gain</code> 的值。这使得它们更加的灵活，允许传入一系列特定的值以在例如一段时间内改变。</p>\n</div>\n<p>好的，现在用户可以更新音频的音量！如果你要增加静音功能，增益节点是可使用的完美节点。</p>"}},{"type":"prose","value":{"id":"为应用程序增加立体声平移","title":"为应用程序增加立体声平移","isH3":false,"content":"<p>让我们添加另一个修改阶段来练习我们刚刚学过的。</p>\n<p>如果用户拥有立体声功能，可用 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/StereoPannerNode\"><code>StereoPannerNode</code> <small>(en-US)</small></a> 节点改变左右扬声器的平衡。</p>\n<div class=\"notecard note\" id=\"sect7\">\n  <p><strong>备注：</strong> <code>StereoPannerNode</code> 用于你只想从左到右进行立体声平移的简单情况。还有一个 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PannerNode\"><code>PannerNode</code> <small>(en-US)</small></a>， 它允许对 3D 空间或声音空间化进行大量控制以创建更复杂的效果。这在游戏和 3D 应用程序中生成小鸟飞过头顶或者来自用户身后的声音。</p>\n</div>\n<p>为了使其可视化，我们将使我们的音频图如下：</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API/graphpan.jpg\" alt=\"An image showing the audio graph showing an input node, two modification nodes (a gain node and a stereo panner node) and a destination node.\" width=\"2236\" height=\"532\" loading=\"lazy\">\n</p>\n<p>这次让我们使用构造函数来生成节点。当我们这样做，我们需要传入上下文及该特定节点可能采用的任何选项：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> pannerOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">pan</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> panner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StereoPannerNode</span><span class=\"token punctuation\">(</span>audioContext<span class=\"token punctuation\">,</span> pannerOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect8\">\n  <p><strong>备注：</strong> 目前生成节点的构造函数不是每个浏览器都支持的。旧工厂函数支持更为广泛。</p>\n</div>\n<p>这里我们的范围从-1（最左边）和 1（最右边）。再次让我们使用范围类型的 input 来改变这个参数：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"range\"</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"panner\"</span> min<span class=\"token operator\">=</span><span class=\"token string\">\"-1\"</span> max<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span> step<span class=\"token operator\">=</span><span class=\"token string\">\"0.01\"</span><span class=\"token operator\">&gt;</span>\n</code></pre></div>\n<p>与我们之前一样，我们使用来自这个 input 的值来调整我们的 panner 的值：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> pannerControl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#panner'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npannerControl<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    panner<span class=\"token punctuation\">.</span>pan<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>让我们再次调整我们的音频图，将所有节点连接在一起：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>track<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gainNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>panner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioContext<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>剩下要做的就是试试这个应用程序：<a href=\"https://codepen.io/Rumyra/pen/qyMzqN/\" class=\"external\" rel=\" noopener\">查看 Codepen 上的最终演示</a>。</p>"}},{"type":"prose","value":{"id":"摘要","title":"摘要","isH3":false,"content":"<p>好的，我们拥有一个音箱播放我们的“磁带”，我们可以调整音量和立体声声像，给我们提供了一个相当基本的工作音频图表。</p>\n<p>这构成了开始向你的网站或 Web 应用添加音频所需的很少的几个基础知识。Web Audio API 还有很多功能，但一旦你掌握了节点的概念及将音频节点图联系在一起，我们可以继续研究更加复杂的功能。</p>"}},{"type":"prose","value":{"id":"更多例子","title":"更多例子","isH3":false,"content":"<p>还有其他示例可以了解有关 Web Audio API 的更多信息。</p>\n<p><a href=\"https://github.com/mdn/voice-change-o-matic\" class=\"external\" rel=\" noopener\">Voice-change-O-matic</a> 是一个有趣的语音操纵器和音频可视化 web 应用程序，允许你选择不同的效果和可视化。该应用程序相当初级，但它演示了同时使用多个 Web Audio API 特性（<a href=\"https://mdn.github.io/voice-change-o-matic/\" class=\"external\" rel=\" noopener\">运行 Voice-change-O-matic live</a>）。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API/voice-change-o-matic.png\" alt=\"A UI with a sound wave being shown, and options for choosing voice effects and visualizations.\" width=\"640\" height=\"500\" loading=\"lazy\">\n</p>\n<p>另一个专门用于演示 Web Audio API 的例子是 <a href=\"https://mdn.github.io/violent-theremin/\" class=\"external\" rel=\" noopener\">Violent Theremin</a>， 一个允许你通过移动鼠标来改变它的音调音量的简单的应用程序。它还提供了一个迷幻的灯光秀（<a href=\"https://github.com/mdn/violent-theremin\" class=\"external\" rel=\" noopener\">查看 Violent Theremin 源代码</a>）</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API/violent-theremin.png\" alt=\"A page full of rainbow colours, with two buttons labeled Clear screen and mute. \" width=\"640\" height=\"458\" loading=\"lazy\">\n</p>\n<p>另参阅我们的 <a href=\"https://github.com/mdn/webaudio-examples\" class=\"external\" rel=\" noopener\">webaudio-examples repo</a> 以获取更多示例。</p>\n<h4 id=\"注：以下为旧文档，因较完整，此处暂不删除，方便开发者查看。\"><em>注：以下为旧文档，因较完整，此处暂不删除，方便开发者查看。</em></h4>"}},{"type":"prose","value":{"id":"基础概念","title":"基础概念","isH3":false,"content":"<div class=\"notecard note\" id=\"sect9\">\n  <p><strong>备注：</strong> 很多的代码碎片来自于这个例子 <a href=\"https://github.com/mdn/violent-theremin\" class=\"external\" rel=\" noopener\">Violent Theremin example</a>.</p>\n</div>\n<p>Web Audio API 包含在音频上下文的处理音频操作，以及已被设计允许模块化路由。基本音频操作可通过音频节点进行，这些节点连接在一起，组成一个音频的路由表。多个音源——带有不同类型的频道配置——甚至可以被一个上下文支持。这个模块设计提供了创造带有动态效果的复杂音频功能的灵活性。</p>\n<p>音频节点通过输入与输出进行连接，形成一个链，从一个或多个源出发，通过一个或更多的节点，最终到输出终端（你也可以不提供输出终端，换句话说，如果只是想使一些音频数据可视化）。一个简单经典的 web Audio 的工作流程如下：</p>\n<ol>\n  <li>构建音频上下文 AudioContext 对象；</li>\n  <li>在 AudioContext 对象内，构建音源，比如&lt;audio&gt;，oscillator，stream</li>\n  <li>构建效果节点 effectNode，比如混响，双二阶滤波器，声相，压限器</li>\n  <li>选择最终的音频目的地，比如说你的系统扬声器</li>\n  <li>连接源到效果，效果到输出终端</li>\n</ol>"}},{"type":"prose","value":{"id":"构建_audiocontext_对象","title":"构建 AudioContext 对象","isH3":true,"content":"<p>首先，你需要构建一个 AudioContext 实例，来创建一个音频图。最简单的方法就像这样：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> audioCtx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect10\">\n  <p><strong>备注：</strong> 同样一个文档是可以存在多个 audioContext 对象的，但是比较浪费。</p>\n</div>\n<p>然而，提供一个版本前缀对于 webkit/Blink 浏览器是很重要的，对于 Firefox(桌面版/手机版/OS 版) 是不需要的。如下：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> audioCtx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>AudioContext <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>webkitAudioContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect11\">\n  <p><strong>备注：</strong> 当创建一个新的 conText 对象时，如果你不提示 window 对象，Safari 会无效。</p>\n</div>"}},{"type":"prose","value":{"id":"创建_audiosource","title":"创建 AudioSource","isH3":true,"content":"<p>现在我们有了 AudioContext，可以用这个来做很多事。第一件我们需要做的事是玩音乐。音频可以来自于多样的地方：</p>\n<ul>\n  <li>通过 JavaScript 直接生成一个音频节点比如 oscillator. 一个 <a href=\"/zh-CN/docs/Web/API/OscillatorNode\"><code>OscillatorNode</code></a>是利用<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/BaseAudioContext/createOscillator\"><code>AudioContext.createOscillator</code> <small>(en-US)</small></a> 方法来构建。</li>\n  <li>从原 PCM 数据构建: AudioContext 有解密被支持的音频格式的多种方法。 看 <a href=\"/zh-CN/docs/Web/API/BaseAudioContext/createBuffer\"><code>AudioContext.createBuffer()</code></a>, <a href=\"/zh-CN/docs/Web/API/BaseAudioContext/createBufferSource\"><code>AudioContext.createBufferSource()</code></a>, 以及 <a href=\"/zh-CN/docs/Web/API/BaseAudioContext/decodeAudioData\"><code>AudioContext.decodeAudioData()</code></a>.</li>\n  <li>来自于 HTML 音频元素例如 <a href=\"/zh-CN/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a> 或者<a href=\"/zh-CN/docs/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a>: 可以看 <a href=\"/zh-CN/docs/Web/API/AudioContext/createMediaElementSource\"><code>AudioContext.createMediaElementSource()</code></a>.</li>\n  <li>直接来自于 <a href=\"/en-US/docs/Web/API/WebRTC_API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">WebRTC (en-US)</a>，<a href=\"/zh-CN/docs/Web/API/MediaStream\"><code>MediaStream</code></a> 例如来自于摄像头或麦克风。可以看<a href=\"/zh-CN/docs/Web/API/AudioContext/createMediaStreamSource\"><code>AudioContext.createMediaStreamSource()</code></a>.</li>\n</ul>\n<p>对于这些特殊的例子，我们将会为我们的源构建一个 oscillator 来提供简单的音调，以及 gain node 来控制音频音量：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> oscillator <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createOscillator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> gainNode <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createGain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect12\">\n  <p><strong>备注：</strong> 为了直接播放一个音乐文件，你通常通过 XHR 来加载文件，通过 Buffer 来解码，创建 BufferSource. 看这个 <a href=\"https://github.com/mdn/voice-change-o-matic/blob/gh-pages/scripts/app.js#L48-L68\" class=\"external\" rel=\" noopener\">例子来自于 Voice-change-O-matic</a>.</p>\n</div>\n<div class=\"notecard note\" id=\"sect13\">\n  <p><strong>备注：</strong> Scott Michaud 已经写了一个有用的库来加载和解码一个或多个音频实例，被称为 <a href=\"https://github.com/ScottMichaud/AudioSampleLoader\" class=\"external\" rel=\" noopener\">AudioSampleLoader</a>. 这个可以帮助简化 XHR/buffering 的处理操作。</p>\n</div>"}},{"type":"prose","value":{"id":"连接输入输出","title":"连接输入输出","isH3":true,"content":"<p>为了通过你的扬声器来实际输出音质，你需要将它们连接起来。这个被称为节点连接方法，节点来自于很多可获得的不同节点类型。你想要连接的节点都提供了这个方法。</p>\n<p>你的设备的默认输出结构（通常是你的设备扬声器），通过<a href=\"/zh-CN/docs/Web/API/BaseAudioContext/destination\"><code>AudioContext.destination</code></a>来允许进入。为了连接 oscillator，gain node 以及输出端，如以下运用：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>oscillator<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gainNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngainNode<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>一个更复杂的例子，（比如 <a href=\"https://mdn.github.io/voice-change-o-matic/\" class=\"external\" rel=\" noopener\">Voice-change-O-matic</a>), 你可以链接很多你想要的节点在一起，例如：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>source <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createMediaStreamSource</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsource<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>analyser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nanalyser<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>distortion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndistortion<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>biquadFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbiquadFilter<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>convolver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconvolver<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>gainNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngainNode<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这个将会创造一个如下音频节点图：</p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/7949/voice-change-o-matic-graph.png\" alt=\"\" loading=\"lazy\">你也可以链接多个节点到一个节点，比如说你想要混合多个音频源在一起，就让它们都通过一个效果节点，比如 gain node。\n</p>\n<div class=\"notecard note\" id=\"sect14\">\n  <p><strong>备注：</strong> Firefox32 以上版本已有完整的 firefox 开发者工具包括 <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/web_audio_editor/index.html\" class=\"external\" rel=\" noopener\">Web Audio Editor</a>, 一个对测试 web audio 表的 bug 非常有用的东西。</p>\n</div>"}},{"type":"prose","value":{"id":"播放音乐及设置音调","title":"播放音乐及设置音调","isH3":true,"content":"<p>现在 audio 节点图已经建立，我们可以设置属性值及调用音频节点的方法来调节想要的音效。在这个简单的例子，我们可以设置特殊的音调，以赫兹为单位，设置为特殊类型，以及指示音乐播放：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>oscillator<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'sine'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// sine wave — other values are 'square', 'sawtooth', 'triangle' and 'custom'</span>\noscillator<span class=\"token punctuation\">.</span>frequency<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">2500</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// value in hertz</span>\noscillator<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在我们的 Violent Theremin 例子，设定了一个最大 gain 以及 frequency（频率）值：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token constant\">WIDTH</span> <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token constant\">HEIGHT</span> <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>innerHeight<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> maxFreq <span class=\"token operator\">=</span> <span class=\"token number\">6000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> maxVol <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> initialFreq <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> initialVol <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// set options for the oscillator</span>\n\noscillator<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'sine'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// sine wave — other values are 'square', 'sawtooth', 'triangle' and 'custom'</span>\noscillator<span class=\"token punctuation\">.</span>frequency<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> initialFreq<span class=\"token punctuation\">;</span> <span class=\"token comment\">// value in hertz</span>\noscillator<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ngainNode<span class=\"token punctuation\">.</span>gain<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> initialVol<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>然后我们设置了一个 frequency 的新的值，以及设置每个时间鼠标的移动，基于目前的鼠标坐标值作为 frequency 和 gain 的最大值百分比。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Mouse pointer coordinates</span>\n\n<span class=\"token keyword\">var</span> CurX<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> CurY<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Get new mouse pointer coordinates when mouse is moved</span>\n<span class=\"token comment\">// then set new gain and pitch values</span>\n\ndocument<span class=\"token punctuation\">.</span>onmousemove <span class=\"token operator\">=</span> updatePage<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">updatePage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    CurX <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> e<span class=\"token punctuation\">.</span>pageX <span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientX <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollLeft <span class=\"token operator\">?</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollLeft <span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>scrollLeft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    CurY <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> e<span class=\"token punctuation\">.</span>pageY <span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientY <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">?</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>scrollTop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    oscillator<span class=\"token punctuation\">.</span>frequency<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CurX<span class=\"token operator\">/</span><span class=\"token constant\">WIDTH</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> maxFreq<span class=\"token punctuation\">;</span>\n    gainNode<span class=\"token punctuation\">.</span>gain<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CurY<span class=\"token operator\">/</span><span class=\"token constant\">HEIGHT</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> maxVol<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">canvasDraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"简单的_canvas_可视化","title":"简单的 canvas 可视化","isH3":true,"content":"<p>每次鼠标的移动，canvasDraw() 方法会被调用，鼠标停留的位置会画出一个多圆圈组成的小簇，它的大小以及颜色会基于 frequency/gain 的值。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number1<span class=\"token punctuation\">,</span>number2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> randomNo <span class=\"token operator\">=</span> number1 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>number2 <span class=\"token operator\">-</span> number1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> randomNo<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.canvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token constant\">WIDTH</span><span class=\"token punctuation\">;</span>\ncanvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token constant\">HEIGHT</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> canvasCtx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">canvasDraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  rX <span class=\"token operator\">=</span> CurX<span class=\"token punctuation\">;</span>\n  rY <span class=\"token operator\">=</span> CurY<span class=\"token punctuation\">;</span>\n  rC <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>gainNode<span class=\"token punctuation\">.</span>gain<span class=\"token punctuation\">.</span>value<span class=\"token operator\">/</span>maxVol<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  canvasCtx<span class=\"token punctuation\">.</span>globalAlpha <span class=\"token operator\">=</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">15</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    canvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    canvasCtx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'rgb('</span> <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">','</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>gainNode<span class=\"token punctuation\">.</span>gain<span class=\"token punctuation\">.</span>value<span class=\"token operator\">/</span>maxVol<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">','</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>oscillator<span class=\"token punctuation\">.</span>frequency<span class=\"token punctuation\">.</span>value<span class=\"token operator\">/</span>maxFreq<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">;</span>\n    canvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span>rX<span class=\"token operator\">+</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rY<span class=\"token operator\">+</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rC<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token operator\">/</span><span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token operator\">/</span><span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">360</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    canvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    canvasCtx<span class=\"token punctuation\">.</span><span class=\"token function\">closePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"theremin_的静音","title":"theremin 的静音","isH3":true,"content":"<p>当静音按钮点击，以下方法会被调用，disconnect 方法，将切断 gain node 与 destination 节点的链接，有效阻止了节点图的链接，所以没有声音会被产生。再次点击效果相反。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> mute <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.mute'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmute<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mute<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    gainNode<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mute<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token string\">\"activated\"</span><span class=\"token punctuation\">;</span>\n    mute<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"Unmute\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    gainNode<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mute<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    mute<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"Mute\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"其他节点选择","title":"其他节点选择","isH3":false,"content":"<p>这里有许多通过 Web Audio API 来构建的节点，一个好消息就是，总体来说，正如我们所见，他们用同一种方法工作：构建节点，连接到图表的另一个节点，然后处理节点属性以及方法来作用于你想要的音源。</p>\n<p>我们并不希望通过所有可获得的效果等；你可以在<a href=\"/zh-CN/docs/Web/API/Web_Audio_API\"><code>Web_Audio_API</code></a>不同的参考接口找到如何使用每一个的详述。我们现在来浏览下不同的设置。</p>"}},{"type":"prose","value":{"id":"wave_shaper_节点","title":"Wave shaper 节点","isH3":true,"content":"<p>利用 <a href=\"/zh-CN/docs/Web/API/BaseAudioContext/createWaveShaper\"><code>AudioContext.createWaveShaper</code></a> 方法，你可以构建一个 wave shaper node:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> distortion <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createWaveShaper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这个对象一定会数学化的定义 wave shape，一个被应用于基础声音波来创造扭曲的效果。这些波并不好被计算，最好的开始方法是搜索 web 算法。比如，我们可以从 <a href=\"https://stackoverflow.com/questions/22312841/waveshaper-node-in-webaudio-how-to-emulate-distortion\" class=\"external\" rel=\" noopener\">Stack Overflow</a> 找到：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">makeDistortionCurve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">amount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> k <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> amount <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">?</span> amount <span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span>\n    n_samples <span class=\"token operator\">=</span> <span class=\"token number\">44100</span><span class=\"token punctuation\">,</span>\n    curve <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span>n_samples<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    deg <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">/</span> <span class=\"token number\">180</span><span class=\"token punctuation\">,</span>\n    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n_samples<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">/</span> n_samples <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    curve<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> k <span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">*</span> <span class=\"token number\">20</span> <span class=\"token operator\">*</span> deg <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">+</span> k <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> curve<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在 Voice-change-O-matic 的演示中，我们连接到 audio 图表上的 ditortion 节点，当需要的时候可以运用：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>source<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>analyser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nanalyser<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>distortion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndistortion<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>biquadFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span>\n\ndistortion<span class=\"token punctuation\">.</span>curve <span class=\"token operator\">=</span> <span class=\"token function\">makeDistortionCurve</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"biquad_filter","title":"Biquad filter","isH3":true,"content":"<p>biquad filter 拥有很多可选择的方法，通过 <a href=\"/zh-CN/docs/Web/API/BaseAudioContext/createBiquadFilter\"><code>AudioContext.createBiquadFilter</code></a> 方法来构建：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> biquadFilter <span class=\"token operator\">=</span> audioCtx<span class=\"token punctuation\">.</span><span class=\"token function\">createBiquadFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在 Voice-change-o-matic 的演示中，运用的制定选项是“lowshelf”过滤器，它提供了低音的基本增幅方法：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>biquadFilter<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">\"lowshelf\"</span><span class=\"token punctuation\">;</span>\nbiquadFilter<span class=\"token punctuation\">.</span>frequency<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\nbiquadFilter<span class=\"token punctuation\">.</span>gain<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>我们在这里详述了过滤器的类型，频率值，增幅值。在 lowshelf 过滤器情况，所有的指定频率拥有 25 分贝的增幅值。</p>"}},{"type":"prose","value":{"id":"web_audio_api_的其他","title":"Web Audio API 的其他","isH3":false,"content":"<p>Web Audio API 可以做不仅仅音频可视化及专业化（如 panning）的事情。我们将会在之后的文章涉及其他的更多内容。</p>"}}],"toc":[{"text":"例子","id":"例子"},{"text":"浏览器支持","id":"浏览器支持"},{"text":"音频图","id":"音频图"},{"text":"音频上下文","id":"音频上下文"},{"text":"加载声音","id":"加载声音"},{"text":"控制声音","id":"控制声音"},{"text":"关于 Web Audio 编辑器","id":"关于_web_audio_编辑器"},{"text":"修改声音","id":"修改声音"},{"text":"为应用程序增加立体声平移","id":"为应用程序增加立体声平移"},{"text":"摘要","id":"摘要"},{"text":"更多例子","id":"更多例子"},{"text":"基础概念","id":"基础概念"},{"text":"其他节点选择","id":"其他节点选择"},{"text":"Web Audio API 的其他","id":"web_audio_api_的其他"}],"summary":"让我们来看看 Web Audio API 入门。我们将简要介绍一些概念，然后学习一个简单的允许我们加载音轨，播放暂停，改变音量和立体声声像的音箱例子。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using the Web Audio API","locale":"en-US","native":"English (US)"},{"title":"Utiliser la Web Audio API","locale":"fr","native":"Français"},{"title":"Web Audio API の使用","locale":"ja","native":"日本語"},{"title":"Web Audio API 사용하기","locale":"ko","native":"한국어"},{"title":"Используем Web Audio API","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/api/web_audio_api/using_web_audio_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/web_audio_api/using_web_audio_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/Web_Audio_API","title":"Web Audio API"},{"uri":"/zh-CN/docs/Web/API/Web_Audio_API/Using_Web_Audio_API","title":"Web Audio API 的运用"}],"pageTitle":"Web Audio API 的运用 - Web API 接口参考 | MDN","noIndexing":false}}