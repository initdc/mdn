{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"ReadableStream.ReadableStream()","mdn_url":"/zh-CN/docs/Web/API/ReadableStream/ReadableStream","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Streams_API\">Streams API</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>构造函数</summary><ol><li><em><code>ReadableStream()</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/locked\"><code>locked</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/cancel\"><code>cancel()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/getReader\"><code>getReader()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/pipeThrough\"><code>pipeThrough()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/pipeTo\"><code>pipeTo()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/tee\"><code>tee()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Streams 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a></li><li><a href=\"/zh-CN/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableStreamBYOBRequest\"><code>ReadableStreamBYOBRequest</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Response/body\"><code>Response.body</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WritableStream\"><code>WritableStream</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WritableStreamDefaultWriter\"><code>WritableStreamDefaultWriter</code></a></li><li><a href=\"/zh-CN/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>ReadableStream()</code></strong> 构造函数创建并从给定的处理程序返回一个可读的流对象。</p>"}},{"type":"prose","value":{"id":"语法","title":"语法","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadableStream</span><span class=\"token punctuation\">(</span>underlyingSource<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadableStream</span><span class=\"token punctuation\">(</span>underlyingSource<span class=\"token punctuation\">,</span> queuingStrategy<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"参数","title":"参数","isH3":true,"content":"<dl>\n  <dt id=\"underlyingsource\">underlyingSource</dt>\n  <dd>\n    <p>一个包含定义了构造流行为方法和属性的对象。<code>underlyingSource</code> 包括：</p>\n    <dl>\n      <dt id=\"startcontroller\">start(controller)</dt>\n      <dd>\n        <p>\n          这是一个当对象被构造时立刻调用的方法。此方法的内容由开发人员定义，并应着眼于访问流，并执行其他任何必需的设置流功能。如果这个过程是异步完成的，它可以返回一个\n          promise，表明成功或失败。传递给这个方法的 <code>controller</code> 是一个 <a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a> 或 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code> <small>(en-US)</small></a>，具体取决于 <code>type</code> 属性的值。开发人员可以使用此方法在设立期间控制流。\n        </p>\n      </dd>\n      <dt id=\"pullcontroller\">pull(controller) <span class=\"badge inline optional\">可选</span></dt>\n      <dd>\n        <p>这个方法，也是由开发人员定义的，当流的内部队列不满时，会重复调用这个方法，直到队列补满。如果 <code>pull()</code> 返回一个 promise，那么它将不会再被调用，直到 promise 完成;如果 promise 失败，该流将会出现错误。传递给此方法的 <code>controller</code> 参数是 <a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a> 或 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code> <small>(en-US)</small></a>，具体取决于 <code>type</code> 属性的值。由于更多的块被获取，这个方法可以被开发人员用来控制流。</p>\n      </dd>\n      <dt id=\"cancelreason\">cancel(reason) <span class=\"badge inline optional\">可选</span></dt>\n      <dd>\n        <p>\n          如果应用程序表示该流将被取消（例如，调用了 <a href=\"/zh-CN/docs/Web/API/ReadableStream/cancel\"><code>ReadableStream.cancel()</code></a>，则将调用此方法，该方法也由开发人员定义。该方法应该做任何必要的事情来释放对流的访问。\n          如果这个过程是异步的，它可以返回一个 promise，表明成功或失败。原因参数包含一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>DOMString</code></a>，它描述了流被取消的原因。\n        </p>\n      </dd>\n      <dt id=\"type\">type <span class=\"badge inline optional\">可选</span></dt>\n      <dd>\n        <p>该属性控制正在处理的可读类型的流。如果它包含一个设置为 <code>bytes</code> 的值，则传递的控制器对象将是一个 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code> <small>(en-US)</small></a>，能够处理 BYOB（带你自己的缓冲区）/字节流。如果未包含，则传递的控制器将为 <a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a>。</p>\n      </dd>\n      <dt id=\"autoallocatechunksize\">autoAllocateChunkSize <span class=\"badge inline optional\">可选</span></dt>\n      <dd>\n        <p>对于字节流，开发人员可以使用正整数值设置 <code>autoAllocateChunkSize</code> 以打开流的自动分配功能。启用此功能后，流实现将自动分配一个具有给定整数大小的 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>，并调用底层源代码，就好像消费者正在使用 BYOB 阅读器一样。</p>\n      </dd>\n    </dl>\n  </dd>\n  <dt id=\"queueingstrategy\">queueingStrategy <span class=\"badge inline optional\">可选</span></dt>\n  <dd>\n    <p>一个可选择定义流的队列策略的对象。这需要两个参数：</p>\n    <dl>\n      <dt id=\"highwatermark\">highWaterMark</dt>\n      <dd>\n        <p>非负整数 - 这定义了在应用背压之前可以包含在内部队列中的块的总数。</p>\n      </dd>\n      <dt id=\"sizechunk\">size(chunk)</dt>\n      <dd>\n        <p>包含参数 <code>chunk</code> 的方法 - 这表示每个分块使用的大小（以字节为单位）。</p>\n      </dd>\n    </dl>\n    <div class=\"notecard note\" id=\"sect1\">\n      <p><strong>备注：</strong> 你可以自定义 <code>queueingStrategy</code>，或者使用 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueueingStrategy</code> <small>(en-US)</small></a> 或 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/CountQueuingStrategy\"><code>CountQueueingStrategy</code> <small>(en-US)</small></a> 的示例作为对象的值。如果 没有提供<code>queueingStrategy</code>，则默认值与 highWaterMark 为 1 的 <code>CountQueuingStrategy</code> 相同。</p>\n    </div>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"返回值","title":"返回值","isH3":true,"content":"<p><a href=\"/zh-CN/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> 对象的实例。</p>"}},{"type":"prose","value":{"id":"异常","title":"异常","isH3":true,"content":"<dl>\n  <dt id=\"rangeerror\">RangeError</dt>\n  <dd>\n    <p>提供的值既不是 <code>bytes</code> 也不是 <code>undefined</code>。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<p>在下面的简单示例中，使用构造函数创建了一个自定义的 <code>ReadableStream</code>（完整代码请参见我们的<a href=\"https://mdn.github.io/dom-examples/streams/simple-random-stream/\" class=\"external\" rel=\" noopener\">简单随机流示例</a>）。<code>start()</code> 函数每秒生成一个随机的文本字符串并将它排入流中。如果因为任何原因调用 <a href=\"/zh-CN/docs/Web/API/ReadableStream/cancel\"><code>ReadableStream.cancel()</code></a>，该 <code>cancel()</code> 函数也可以停止生成字符串。</p>\n<p>按下按钮，将停止生成字符串，使用 <a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultController/close\"><code>ReadableStreamDefaultController.close()</code></a> 关闭流，并且将运行另一个函数，从流中读取数据。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    interval <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> string <span class=\"token operator\">=</span> <span class=\"token function\">randomChars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Add the string to the stream</span>\n      controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// show it on the screen</span>\n      <span class=\"token keyword\">let</span> listItem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      listItem<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> string<span class=\"token punctuation\">;</span>\n      list1<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>listItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">fetchStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      controller<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">pull</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// We don't really need a pull in this example</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// This is called if the reader cancels,</span>\n    <span class=\"token comment\">// so we should stop generating strings</span>\n    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://streams.spec.whatwg.org/#ref-for-rs-constructor⑤","title":"Streams Standard"}],"query":"api.ReadableStream.ReadableStream"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.ReadableStream.ReadableStream","dataURL":"/zh-CN/docs/Web/API/ReadableStream/ReadableStream/bcd.json"}}],"toc":[{"text":"语法","id":"语法"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"}],"summary":"ReadableStream() 构造函数创建并从给定的处理程序返回一个可读的流对象。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"ReadableStream()","locale":"en-US","native":"English (US)"},{"title":"ReadableStream()","locale":"ja","native":"日本語"}],"source":{"folder":"zh-cn/web/api/readablestream/readablestream","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/readablestream/readablestream/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/ReadableStream","title":"ReadableStream"},{"uri":"/zh-CN/docs/Web/API/ReadableStream/ReadableStream","title":"ReadableStream.ReadableStream()"}],"pageTitle":"ReadableStream.ReadableStream() - Web API 接口参考 | MDN","noIndexing":false}}