{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"ReadableStream.tee()","mdn_url":"/zh-CN/docs/Web/API/ReadableStream/tee","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Streams_API\">Streams API</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>构造函数</summary><ol><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/ReadableStream\"><code>ReadableStream()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/locked\"><code>locked</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/cancel\"><code>cancel()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/getReader\"><code>getReader()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/pipeThrough\"><code>pipeThrough()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/pipeTo\"><code>pipeTo()</code></a></li><li><em><code>tee()</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Streams 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a></li><li><a href=\"/zh-CN/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableStreamBYOBRequest\"><code>ReadableStreamBYOBRequest</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Response/body\"><code>Response.body</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WritableStream\"><code>WritableStream</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WritableStreamDefaultWriter\"><code>WritableStreamDefaultWriter</code></a></li><li><a href=\"/zh-CN/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/zh-CN/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> 接口的 <strong><code>tee()</code></strong> 方法对当前的可读流进行<a href=\"https://streams.spec.whatwg.org/#tee-a-readable-stream\" class=\"external\" rel=\" noopener\">拷贝（tees）</a>，返回包含两个 <a href=\"/zh-CN/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> 实例分支的数组。</p>\n<p>这对于两个 reader 顺序的读取或者同时读取流有很大用处（可能以不同的速度）。例如，如果你想要从服务器获取一个响应，然后流式的传输到浏览器，并且也将它流式的传输到 ServiceWorker 缓存中，你可以在 ServiceWorker 执行此操作。由于响应体不能多次使用，你需要两个副本才能这么做。</p>\n<p>一个被拷贝的（teed）流将发出两个 <code>ReadableStream</code> 分支中其中较<em>快</em>速率的消费者控制背压，并且内部队列中未读的数据在 <code>ReadableStream</code> 上被较慢的消费，没有任何限制或者背压。因此，当两个内部分支<em>都</em>有一个未读的元素时，原来的 <code>ReadableStream</code> 的控制器的内部队列将开始填充满，并且当它的 <a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultController/desiredSize\" title=\"desiredSize\"><code>desiredSize</code></a> ≤ 0 或字节流控制器 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableByteStreamController/desiredSize\"><code>desiredSize</code> <small>(en-US)</small></a> ≤ 0，然后控制器将停止在底层源上调用 <code>pull(controller)</code>，并且传递给 <a href=\"/zh-CN/docs/Web/API/ReadableStream/ReadableStream\" title=\"new ReadableStream()\"><code>new ReadableStream()</code></a>。如果仅有一个分支被消费，那么主体将会在内存中排队。因此，你不应该使用内置的 <code>tee()</code> 去以不同的速度并行读取非常大的流。相反，搜寻一个完全背压到以较<em>慢</em>速度消耗分支的实现。</p>\n<p>要取消流，需要去取消两个生成的分支。正在被拷贝（tee）的流通常会在持续时间内被锁定，阻止其他的 reader 锁定它。</p>"}},{"type":"prose","value":{"id":"语法","title":"语法","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">tee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"参数","title":"参数","isH3":true,"content":"<p>无。</p>"}},{"type":"prose","value":{"id":"返回值","title":"返回值","isH3":true,"content":"<p>一个包含两个 <a href=\"/zh-CN/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> 实例的 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>。</p>"}},{"type":"prose","value":{"id":"异常","title":"异常","isH3":true,"content":"<dl>\n  <dt id=\"typeerror\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></dt>\n  <dd>\n    <p>如果源流不是一个 <code>ReadableStream</code> 则抛出。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<p>在下面的简单示例中，一个先前生成的流被拷贝（tee），然后将两个生成的流（包含在生成的数组的两个成员中）传递给一个函数，该函数将从两个流中读取数据并且将每个流的分块按顺序打印到不同的 UI 部分。完整代码参见<a href=\"https://mdn.github.io/dom-examples/streams/simple-tee-example/\" class=\"external\" rel=\" noopener\">简单 tee 示例</a>。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">teeStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> teedOff <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">tee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fetchStream</span><span class=\"token punctuation\">(</span>teedOff<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fetchStream</span><span class=\"token punctuation\">(</span>teedOff<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> list3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fetchStream</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stream<span class=\"token punctuation\">,</span> list</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">getReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> charsReceived <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// read() returns a promise that resolves</span>\n  <span class=\"token comment\">// when a value has been received</span>\n  reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">processText</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> done<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Result objects contain two properties:</span>\n    <span class=\"token comment\">// done  - true if the stream has already given you all its data.</span>\n    <span class=\"token comment\">// value - some data. Always undefined when done is true.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stream complete\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  \n    <span class=\"token comment\">// value for fetch streams is a Uint8Array</span>\n    charsReceived <span class=\"token operator\">+=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> chunk <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> listItem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    listItem<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Read '</span> <span class=\"token operator\">+</span> charsReceived <span class=\"token operator\">+</span> <span class=\"token string\">' characters so far. Current chunk = '</span> <span class=\"token operator\">+</span> chunk<span class=\"token punctuation\">;</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>listItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// Read some more, and call this function again</span>\n    <span class=\"token keyword\">return</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>processText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://streams.spec.whatwg.org/#ref-for-rs-tee②","title":"Streams Standard"}],"query":"api.ReadableStream.tee"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.ReadableStream.tee","dataURL":"/zh-CN/docs/Web/API/ReadableStream/tee/bcd.json"}}],"toc":[{"text":"语法","id":"语法"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"}],"summary":"ReadableStream 接口的 tee() 方法对当前的可读流进行拷贝（tees），返回包含两个 ReadableStream 实例分支的数组。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"ReadableStream.tee()","locale":"en-US","native":"English (US)"},{"title":"ReadableStream.tee()","locale":"ja","native":"日本語"}],"source":{"folder":"zh-cn/web/api/readablestream/tee","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/readablestream/tee/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/ReadableStream","title":"ReadableStream"},{"uri":"/zh-CN/docs/Web/API/ReadableStream/tee","title":"ReadableStream.tee()"}],"pageTitle":"ReadableStream.tee() - Web API 接口参考 | MDN","noIndexing":false}}