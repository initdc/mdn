{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"ReadableStream","mdn_url":"/zh-CN/docs/Web/API/ReadableStream","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>构造函数</summary><ol><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/ReadableStream\"><code>ReadableStream()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/locked\"><code>locked</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/cancel\"><code>cancel()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/getReader\"><code>getReader()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/pipeThrough\"><code>pipeThrough()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/pipeTo\"><code>pipeTo()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/tee\"><code>tee()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/zh-CN/docs/Web/API/Streams_API\">流操作 API</a> 中的<code>ReadableStream</code> 接口呈现了一个可读取的二进制流操作。<a href=\"/zh-CN/docs/Web/API/Fetch_API\">Fetch API</a> 通过 <a href=\"/zh-CN/docs/Web/API/Response\"><code>Response</code></a> 的属性 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Response/body\"><code>body</code> <small>(en-US)</small></a> 提供了一个具体的 <code>ReadableStream</code> 对象。</p>"}},{"type":"prose","value":{"id":"构造函数","title":"构造函数","isH3":false,"content":"<dl>\n  <dt id=\"readablestream\"><a href=\"/zh-CN/docs/Web/API/ReadableStream/ReadableStream\" title=\"ReadableStream()\"><code>ReadableStream()</code></a></dt>\n  <dd>\n    <p>创建并从给定的 Handler 返回一个可读流对象。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"属性","title":"属性","isH3":false,"content":"<dl>\n  <dt id=\"readablestream.locked\"><a href=\"/zh-CN/docs/Web/API/ReadableStream/locked\"><code>ReadableStream.locked</code></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p><code>locked</code> 返回该可读流是否被锁定到一个 reader。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"方法","title":"方法","isH3":false,"content":"<dl>\n  <dt id=\"readablestream.cancel\"><a href=\"/zh-CN/docs/Web/API/ReadableStream/cancel\"><code>ReadableStream.cancel()</code></a></dt>\n  <dd>\n    <p>取消读取流，读取方发出一个信号，表示对这束流失去兴趣。可以传入 reason 参数表示取消原因，这个原因将传回给调用方。</p>\n  </dd>\n  <dt id=\"readablestream.getreader\"><a href=\"/zh-CN/docs/Web/API/ReadableStream/getReader\"><code>ReadableStream.getReader()</code></a></dt>\n  <dd>\n    <p>创建一个读取器并将流锁定于其上。一旦流被锁定，其他读取器将不能读取它，直到它被释放。</p>\n  </dd>\n  <dt id=\"readablestream.pipethrough\"><a href=\"/zh-CN/docs/Web/API/ReadableStream/pipeThrough\"><code>ReadableStream.pipeThrough()</code></a></dt>\n  <dd>\n    <p>提供将当前流管道输出到一个 transform 流或 writable/readable 流对的链式方法。</p>\n  </dd>\n  <dt id=\"readablestream.pipeto\"><a href=\"/zh-CN/docs/Web/API/ReadableStream/pipeTo\"><code>ReadableStream.pipeTo()</code></a></dt>\n  <dd>\n    <p>将当前 ReadableStream 管道输出到给定的 <a href=\"/zh-CN/docs/Web/API/WritableStream\"><code>WritableStream</code></a>，并返回一个 promise，输出过程成功时返回 fulfilled，在发生错误时返回 rejected。</p>\n  </dd>\n  <dt id=\"readablestream.tee\"><a href=\"/zh-CN/docs/Web/API/ReadableStream/tee\"><code>ReadableStream.tee()</code></a></dt>\n  <dd>\n    <p><code>tee</code> 方法（tee 本意是将高尔夫球放置在球座上）<a href=\"https://streams.spec.whatwg.org/#tee-a-readable-stream\" class=\"external\" rel=\" noopener\">tees</a> 了可读流，返回包含两个<a href=\"/zh-CN/docs/Web/API/ReadableStream\" aria-current=\"page\"><code>ReadableStream</code></a> 实例分支的数组，每个元素接收了相同的传输数据。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":""}},{"type":"prose","value":{"id":"fetch_stream","title":"Fetch stream","isH3":true,"content":"<p>下面的例子，创建了一个智能的 <a href=\"/zh-CN/docs/Web/API/Response\"><code>Response</code></a> 将从另一个资源获取的 HTML 片段流式的传输到浏览器。</p>\n<p>它演示了 <a href=\"/zh-CN/docs/Web/API/ReadableStream\" aria-current=\"page\"><code>ReadableStream</code></a> 与 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code> <small>(en-US)</small></a> 的协同用法。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.example.org'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rb</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> rb<span class=\"token punctuation\">.</span><span class=\"token function\">getReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// The following function handles each data chunk</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// \"done\" is a Boolean and value a \"Uint8Array\"</span>\n          reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> done<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// If there is no more data to read</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'done'</span><span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              controller<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// Get the data and send it to the browser via the controller</span>\n            controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Check chunks by logging to the console</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stream</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n    <span class=\"token comment\">// Respond with our stream</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/html'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do things with result</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"async_iterator_to_stream","title":"Async iterator to stream","isH3":true,"content":"<p>将 <a href=\"zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators\">(async) 迭代器</a> 转换为可读流：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">iteratorToStream</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">iterator</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">pull</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> done <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        controller<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>这适用于异步和非异步的迭代器。</p>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://streams.spec.whatwg.org/#rs-class","title":"Streams Standard"}],"query":"api.ReadableStream"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.ReadableStream","dataURL":"/zh-CN/docs/Web/API/ReadableStream/bcd.json"}},{"type":"prose","value":{"id":"参见","title":"参见","isH3":false,"content":"<ul>\n  <li><a href=\"https://whatwg-stream-visualizer.glitch.me/\" class=\"external\" rel=\" noopener\">WHATWG Stream Visualiser</a>, for a basic visualisation of readable, writable, and transform streams.</li>\n</ul>"}}],"toc":[{"text":"构造函数","id":"构造函数"},{"text":"属性","id":"属性"},{"text":"方法","id":"方法"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"参见","id":"参见"}],"summary":"流操作 API 中的ReadableStream 接口呈现了一个可读取的二进制流操作。Fetch API 通过 Response 的属性 body (en-US) 提供了一个具体的 ReadableStream 对象。","popularity":0.0008,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"ReadableStream","locale":"en-US","native":"English (US)"},{"title":"ReadableStream","locale":"ja","native":"日本語"},{"title":"ReadableStream","locale":"ko","native":"한국어"}],"source":{"folder":"zh-cn/web/api/readablestream","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/readablestream/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/ReadableStream","title":"ReadableStream"}],"pageTitle":"ReadableStream - Web API 接口参考 | MDN","noIndexing":false}}