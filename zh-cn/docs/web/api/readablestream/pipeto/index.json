{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"ReadableStream.pipeTo()","mdn_url":"/zh-CN/docs/Web/API/ReadableStream/pipeTo","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Streams_API\">Streams API</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>构造函数</summary><ol><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/ReadableStream\"><code>ReadableStream()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/locked\"><code>locked</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/cancel\"><code>cancel()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/getReader\"><code>getReader()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/pipeThrough\"><code>pipeThrough()</code></a></li><li><em><code>pipeTo()</code></em></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStream/tee\"><code>tee()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Streams 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a></li><li><a href=\"/zh-CN/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableStreamBYOBRequest\"><code>ReadableStreamBYOBRequest</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Response/body\"><code>Response.body</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WritableStream\"><code>WritableStream</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WritableStreamDefaultWriter\"><code>WritableStreamDefaultWriter</code></a></li><li><a href=\"/zh-CN/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/zh-CN/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> 接口的 <strong><code>pipeTo()</code></strong> 方法通过管道将当前的 <code>ReadableStream</code> 中的数据传递给给定的 <a href=\"/zh-CN/docs/Web/API/WritableStream\"><code>WritableStream</code></a> 并且返回一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>，promise 在传输成功完成时兑现，在遇到任何错误时则会被拒绝。</p>\n<p>传输一个流时通常会在传输的持续时间内<a href=\"/zh-CN/docs/Web/API/ReadableStream/locked\">锁定</a>这个流，以阻止其他 reader 锁定它。</p>"}},{"type":"prose","value":{"id":"语法","title":"语法","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">pipeTo</span><span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">)</span>\n<span class=\"token function\">pipeTo</span><span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"参数","title":"参数","isH3":true,"content":"<dl>\n  <dt id=\"destination\"><code>destination</code></dt>\n  <dd>\n    <p>充当 <a href=\"/zh-CN/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> 最终目标的 <a href=\"/zh-CN/docs/Web/API/WritableStream\"><code>WritableStream</code></a>。</p>\n  </dd>\n  <dt id=\"options\"><code>options</code> <span class=\"badge inline optional\">可选</span></dt>\n  <dd>\n    <p>传输至 <code>writable</code> 流应该被使用的选项。可用选项是：</p>\n    <dl>\n      <dt id=\"preventclose\"><code>preventClose</code></dt>\n      <dd>\n        <p>如果设置为 <code>true</code>，源 <code>ReadableStream</code> 的关闭将不再导致目标 <code>WritableStream</code> 关闭。一旦此过程完成，该方法将返回的 promise 将被兑现；除非在关闭目标时遇到错误，在这种情况下，它将因为该错误被拒绝。</p>\n      </dd>\n      <dt id=\"preventabort\"><code>preventAbort</code></dt>\n      <dd>\n        <p>如果设置为 <code>true</code>，源 <code>ReadableStream</code> 中的错误将不再中止目标 <code>WritableStream</code>。该方法返回的 promise 将因源流的错误或者任何在中止目地流期间的错误而被拒绝。</p>\n      </dd>\n      <dt id=\"preventcancel\"><code>preventCancel</code></dt>\n      <dd>\n        <p>如果设置为 <code>true</code>，目标 <code>WritableStream</code> 的错误将不再取消源 <code>ReadableStream</code>。在这种情况下，该方法返回的 promise 将因源流的错误或者在取消源流期间发生的任何错误而被拒绝。此外，如果目标可写流开始关闭或者正在关闭，则源可读流将不再被取消。在这种情况下，方法返回的 promise 也将被拒绝，其错误为连接到一个已关闭的流或者在取消源流期间发生的任何错误。</p>\n      </dd>\n      <dt id=\"signal\"><code>signal</code></dt>\n      <dd>\n        <p>如果设置一个 <a href=\"/zh-CN/docs/Web/API/AbortSignal\"><code>AbortSignal</code></a> 对象，然后可以通过相应的 <a href=\"/zh-CN/docs/Web/API/AbortController\"><code>AbortController</code></a> 中止正在进行的传输操作。</p>\n      </dd>\n    </dl>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"返回值","title":"返回值","isH3":true,"content":"<p>返回一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>，其在传输完成时兑现。</p>"}},{"type":"prose","value":{"id":"异常","title":"异常","isH3":true,"content":"<dl>\n  <dt id=\"typeerror\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></dt>\n  <dd>\n    <p><code>writableStream</code> 且/或 <code>readableStream</code> 对象不是一个可写/可读流，或者其中一个或者两个流被锁定。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 获取原始图像</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'png-logo.png'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 取回响应的 body 属性，该属性继承 ReadableStream</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=&gt;</span> response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">body</span> <span class=\"token operator\">=&gt;</span> body<span class=\"token punctuation\">.</span><span class=\"token function\">pipeThrough</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PNGTransformStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rs</span> <span class=\"token operator\">=&gt;</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">pipeTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FinalDestinationStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://streams.spec.whatwg.org/#ref-for-rs-pipe-to④","title":"Streams Standard"}],"query":"api.ReadableStream.pipeTo"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.ReadableStream.pipeTo","dataURL":"/zh-CN/docs/Web/API/ReadableStream/pipeTo/bcd.json"}}],"toc":[{"text":"语法","id":"语法"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"}],"summary":"ReadableStream 接口的 pipeTo() 方法通过管道将当前的 ReadableStream 中的数据传递给给定的 WritableStream 并且返回一个 Promise，promise 在传输成功完成时兑现，在遇到任何错误时则会被拒绝。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"ReadableStream.pipeTo()","locale":"en-US","native":"English (US)"},{"title":"ReadableStream.pipeTo()","locale":"ja","native":"日本語"}],"source":{"folder":"zh-cn/web/api/readablestream/pipeto","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/readablestream/pipeto/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/ReadableStream","title":"ReadableStream"},{"uri":"/zh-CN/docs/Web/API/ReadableStream/pipeTo","title":"ReadableStream.pipeTo()"}],"pageTitle":"ReadableStream.pipeTo() - Web API 接口参考 | MDN","noIndexing":false}}