{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"ReadableStreamDefaultReader()","mdn_url":"/zh-CN/docs/Web/API/ReadableStreamDefaultReader/ReadableStreamDefaultReader","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Streams_API\">Streams API</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>构造函数</summary><ol><li><em><code>ReadableStreamDefaultReader()</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultReader/closed\"><code>closed</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultReader/cancel\"><code>cancel()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultReader/read\"><code>read()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultReader/releaseLock\"><code>releaseLock()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Streams 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a></li><li><a href=\"/zh-CN/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableStreamBYOBRequest\"><code>ReadableStreamBYOBRequest</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Response/body\"><code>Response.body</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WritableStream\"><code>WritableStream</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WritableStreamDefaultWriter\"><code>WritableStreamDefaultWriter</code></a></li><li><a href=\"/zh-CN/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>ReadableStreamDefaultReader()</code></strong> 构造函数创建并返回一个 <code>ReadableStreamDefaultReader</code> 实例对象。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 你通常不需要手动创建，可以使用 <a href=\"/zh-CN/docs/Web/API/ReadableStream/getReader\"><code>ReadableStream.getReader()</code></a> 方法代替。</p>\n</div>"}},{"type":"prose","value":{"id":"语法","title":"语法","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadableStreamDefaultReader</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"参数","title":"参数","isH3":true,"content":"<dl>\n  <dt id=\"stream\"><code>stream</code></dt>\n  <dd>\n    <p>将被读取的 <a href=\"/zh-CN/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a>。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"返回值","title":"返回值","isH3":true,"content":"<p>一个 <a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a> 实例对象。</p>"}},{"type":"prose","value":{"id":"异常","title":"异常","isH3":true,"content":"<dl>\n  <dt id=\"typeerror\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></dt>\n  <dd>\n    <p>如果提供的 <code>stream</code> 参数不是一个 <a href=\"/zh-CN/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a>，或者它已经被另一个 reader 锁定则抛出异常。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<p>在下面的简单示例中，使用 <code>getReader()</code> 创建的 <a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a> 读取先前自定义的 <code>ReadableStream</code>。（有关完整代码<a href=\"https://mdn.github.io/dom-examples/streams/simple-random-stream/\" class=\"external\" rel=\" noopener\">简单随机流演示</a>）。直到流完成读取，每一个块都按顺序读取并输出到 UI，此时我们退出递归函数并且将整个流打印到 UI 的另一部分。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">fetchStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">getReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> charsReceived <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// read() 返回一个 promise，其会在接收到数据时被兑现</span>\n  reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">processText</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> done<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 结果包含两个属性:</span>\n    <span class=\"token comment\">// done  - 如果为 true，表示流已经返回所有的数据。</span>\n    <span class=\"token comment\">// value - 一些数据，done 为 true 时，其值始终为 undefined。</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stream complete\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      para<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 从流中获取的数据是一个 Uint8Array</span>\n    charsReceived <span class=\"token operator\">+=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> chunk <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> listItem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    listItem<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Received '</span> <span class=\"token operator\">+</span> charsReceived <span class=\"token operator\">+</span> <span class=\"token string\">' characters so far. Current chunk = '</span> <span class=\"token operator\">+</span> chunk<span class=\"token punctuation\">;</span>\n    list2<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>listItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result <span class=\"token operator\">+=</span> chunk<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 再次调用该函数以读取更多数据</span>\n    <span class=\"token keyword\">return</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>processText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://streams.spec.whatwg.org/#ref-for-default-reader-constructor①","title":"Streams Standard"}],"query":"api.ReadableStreamDefaultReader.ReadableStreamDefaultReader"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.ReadableStreamDefaultReader.ReadableStreamDefaultReader","dataURL":"/zh-CN/docs/Web/API/ReadableStreamDefaultReader/ReadableStreamDefaultReader/bcd.json"}}],"toc":[{"text":"语法","id":"语法"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"}],"summary":"ReadableStreamDefaultReader() 构造函数创建并返回一个 ReadableStreamDefaultReader 实例对象。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"ReadableStreamDefaultReader()","locale":"en-US","native":"English (US)"},{"title":"ReadableStreamDefaultReader.ReadableStreamDefaultReader()","locale":"ja","native":"日本語"}],"source":{"folder":"zh-cn/web/api/readablestreamdefaultreader/readablestreamdefaultreader","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/readablestreamdefaultreader/readablestreamdefaultreader/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/ReadableStreamDefaultReader","title":"ReadableStreamDefaultReader"},{"uri":"/zh-CN/docs/Web/API/ReadableStreamDefaultReader/ReadableStreamDefaultReader","title":"ReadableStreamDefaultReader()"}],"pageTitle":"ReadableStreamDefaultReader() - Web API 接口参考 | MDN","noIndexing":false}}