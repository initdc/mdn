{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"NodeList","mdn_url":"/zh-CN/docs/Web/API/NodeList","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Document_Object_Model\">Document Object Model</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/NodeList\"><code>NodeList</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a href=\"/zh-CN/docs/Web/API/NodeList/length\"><code>length</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/NodeList/entries\"><code>entries()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/NodeList/forEach\"><code>forEach()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/NodeList/item\"><code>item()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/NodeList/keys\"><code>keys()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/NodeList/values\"><code>values()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>DOM 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/AbortController\"><code>AbortController</code></a></li><li><a href=\"/zh-CN/docs/Web/API/AbortSignal\"><code>AbortSignal</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AbstractRange\"><code>AbstractRange</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/Attr\"><code>Attr</code></a></li><li><a href=\"/zh-CN/docs/Web/API/CDATASection\"><code>CDATASection</code></a></li><li><a href=\"/zh-CN/docs/Web/API/CharacterData\"><code>CharacterData</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Comment\"><code>Comment</code></a></li><li><a href=\"/zh-CN/docs/Web/API/CustomEvent\"><code>CustomEvent</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMError\"><code>DOMError</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMException\"><code>DOMException</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMImplementation\"><code>DOMImplementation</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMParser\"><code>DOMParser</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMPoint\"><code>DOMPoint</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DOMPointReadOnly\"><code>DOMPointReadOnly</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMRect\"><code>DOMRect</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMTimeStamp\"><code>DOMTimeStamp</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DOMTokenList\"><code>DOMTokenList</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Document\"><code>Document</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DocumentFragment\"><code>DocumentFragment</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DocumentType\"><code>DocumentType</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Element\"><code>Element</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Event\"><code>Event</code></a></li><li><a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLCollection\"><code>HTMLCollection</code></a></li><li><a href=\"/zh-CN/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a></li><li><a href=\"/zh-CN/docs/Web/API/NamedNodeMap\"><code>NamedNodeMap</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node\"><code>Node</code></a></li><li><a href=\"/zh-CN/docs/Web/API/NodeIterator\"><code>NodeIterator</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ProcessingInstruction\"><code>ProcessingInstruction</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/Range\"><code>Range</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/StaticRange\"><code>StaticRange</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/Text\"><code>Text</code></a></li><li><a href=\"/zh-CN/docs/Web/API/TextDecoder\"><code>TextDecoder</code></a></li><li><a href=\"/zh-CN/docs/Web/API/TextEncoder\"><code>TextEncoder</code></a></li><li><a href=\"/zh-CN/docs/Web/API/TimeRanges\"><code>TimeRanges</code></a></li><li><a href=\"/zh-CN/docs/Web/API/TreeWalker\"><code>TreeWalker</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><code>NodeList</code> 对象是节点的集合，通常是由属性，如<a href=\"/zh-CN/docs/Web/API/Node/childNodes\"><code>Node.childNodes</code></a> 和 方法，如<a href=\"/zh-CN/docs/Web/API/Document/querySelectorAll\"><code>document.querySelectorAll</code></a> 返回的。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> <code>NodeList</code> <strong>不是一个数组</strong>，是一个类似数组的对象 (<em>Like Array Object</em>)。虽然 <code>NodeList</code> 不是一个数组，但是可以使用 <code>forEach()</code> 来迭代。你还可以使用 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from\"><code>Array.from()</code></a> 将其转换为数组。</p>\n  <p>不过，有些浏览器较为过时，没有实现 <code>NodeList.forEach()</code> 和 <code>Array.from()</code>。你可以用 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>Array.prototype.forEach()</code></a> 来规避这一问题。请查看<a href=\"#example\">该例</a>。</p>\n</div>\n<p>在一些情况下，<code>NodeList</code> 是一个实时集合，也就是说，如果文档中的节点树发生变化，<code>NodeList</code> 也会随之变化。例如，<a href=\"/zh-CN/docs/Web/API/Node/childNodes\"><code>Node.childNodes</code></a> 是实时的：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> parent <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'parent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> child_nodes <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child_nodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 我们假设结果会是“2”</span>\nparent<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child_nodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 但此时的输出是“3”</span>\n</code></pre></div>\n<p>在其他情况下，<code>NodeList</code> 是一个静态集合，也就意味着随后对文档对象模型的任何改动都不会影响集合的内容。比如 <a href=\"/zh-CN/docs/Web/API/Document/querySelectorAll\"><code>document.querySelectorAll</code></a> 就会返回一个静态 <code>NodeList</code>。</p>\n<p>最好牢记这种不同，尤其是在当你选择 <code>NodeList</code> 中所有项遍历的方式，或缓存它的长度的时候。</p>"}},{"type":"prose","value":{"id":"属性","title":"属性","isH3":false,"content":"<dl>\n  <dt id=\"nodelist.length\"><a href=\"/zh-CN/docs/Web/API/NodeList/length\"><code>NodeList.length</code></a></dt>\n  <dd>\n    <p><code>NodeList</code> 中包含的节点个数。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"方法","title":"方法","isH3":false,"content":"<dl>\n  <dt id=\"nodelist.item\"><a href=\"/zh-CN/docs/Web/API/NodeList/item\"><code>NodeList.item()</code></a></dt>\n  <dd>\n    <p>返回 <code>NodeList</code> 对象中指定索引的节点，如果索引越界，则返回<code>null</code>。等价的写法是 <code>nodeList[i]</code>，不过，在这种情况下，越界访问将返回 <code>undefined</code>。</p>\n  </dd>\n  <dt id=\"nodelist.entries\"><a href=\"/zh-CN/docs/Web/API/NodeList/entries\"><code>NodeList.entries()</code></a></dt>\n  <dd>\n    <p>Returns an <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols\"><code>iterator</code></a>, allowing code to go through all key/value pairs contained in the collection. (In this case, the keys are numbers starting from 0 and the values are nodes.)</p>\n  </dd>\n  <dt id=\"nodelist.foreach\"><a href=\"/zh-CN/docs/Web/API/NodeList/forEach\"><code>NodeList.forEach()</code></a></dt>\n  <dd>\n    <p>Executes a provided function once per <code>NodeList</code> element, passing the element as an argument to the function.</p>\n  </dd>\n  <dt id=\"nodelist.keys\"><a href=\"/zh-CN/docs/Web/API/NodeList/keys\"><code>NodeList.keys()</code></a></dt>\n  <dd>\n    <p>Returns an <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols\"><code>iterator</code></a>, allowing code to go through all the keys of the key/value pairs contained in the collection. (In this case, the keys are numbers starting from 0.)</p>\n  </dd>\n  <dt id=\"nodelist.values\"><a href=\"/zh-CN/docs/Web/API/NodeList/values\"><code>NodeList.values()</code></a></dt>\n  <dd>\n    <p>Returns an <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols\"><code>iterator</code></a> allowing code to go through all values (nodes) of the key/value pairs contained in the collection.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例子","title":"例子","isH3":false,"content":"<p>可以使用 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/for\">for</a> 循环遍历一个 <code>NodeList</code> 对象中的所有的节点：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> myNodeList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> item <span class=\"token operator\">=</span> myNodeList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用 myNodeList.item(i) 是没有必要的</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><strong>不要尝试使用 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in\"><code>for...in</code></a> 或者 <a href=\"/zh-CN/docs/JavaScript/Reference/Statements/for_each...in\"><code>for each...in</code></a> 来遍历一个 <code>NodeList</code> 对象中的元素</strong>，因为，如果你把上述两个属性也看成 <a href=\"/zh-CN/docs/Web/API/Element\"><code>element</code></a> 对象的话，<code>NodeList</code> 对象中的 <code>length</code> 和 <code>item</code> 属性也会被遍历出来，这可能会导致你的脚本运行出错。此外，<code>for...in</code> 不能保证访问这些属性的顺序。</p>\n<p><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a> 循环<strong>将会</strong>正确的遍历 <code>NodeList</code> 对象：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input[type=checkbox]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> checkbox <span class=\"token keyword\">of</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  checkbox<span class=\"token punctuation\">.</span>checked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>最近，浏览器也支持一些遍历方法，比如 <a href=\"/zh-CN/docs/Web/API/NodeList/forEach\" title=\"forEach()\"><code>forEach()</code></a> 与 <a href=\"/zh-CN/docs/Web/API/NodeList/entries\" title=\"entries()\"><code>entries()</code></a>、<a href=\"/zh-CN/docs/Web/API/NodeList/values\" title=\"values()\"><code>values()</code></a>、和 <a href=\"/zh-CN/docs/Web/API/NodeList/keys\" title=\"keys()\"><code>keys()</code></a>。</p>\n<p>也有一种使用数组 <code>Array</code> 的 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>Array.prototype.forEach</code></a> 来遍历 <code>NodeList</code> 的方法，这种方法兼容 Internet Explorer <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg>：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input[type=checkbox]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">checkbox</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  checkbox<span class=\"token punctuation\">.</span>checked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"英文原版中已删除的内容","title":"英文原版中已删除的内容","isH3":false,"content":"<blockquote>\n  <p>译者注：也许它已独立成了一篇单独的技术文章。如果有找到这样的文章，请将其链接添加至本页末的“参见”处，并删除本节内容。如果没有“参见”，请添加它为二级标题（<code>&lt;h2&gt;</code>），<code>&lt;h2&gt;</code> 的 <a href=\"/zh-CN/docs/Web/HTML/Global_attributes/id\"><code>id</code></a> 属性为“See_also”或“参见”。</p>\n</blockquote>"}},{"type":"prose","value":{"id":"为什么_nodelist_不是数组？","title":"为什么 NodeList 不是数组？","isH3":true,"content":"<p><code>NodeList</code> 对象在某些方面和数组非常相似，看上去可以直接使用从 <code>Array.prototype</code> 上继承的方法。然而，除了 <code>forEach</code> 方法，<code>NodeList</code> 没有这些类似数组的方法。</p>\n<p>JavaScript 的继承机制是基于原型的。数组元素之所以有一些数组方法（比如 <code>forEach</code> 和 <code>map</code>），是因为它的原型链上有这些方法，如下：</p>\n<p><code>myArray --&gt; Array.prototype --&gt; Object.prototype --&gt; null</code>（想要获取一个对象的原型链，可以连续地调用 <code>Object.getPrototypeOf</code>，直到原型链尽头）。</p>\n<p><code>forEach</code>，<code>map</code> 这些方式其实是 <code>Array.prototype</code> 这个对象的方法。</p>\n<p>和数组不一样的是，<code>NodeList</code> 的原型链是这样的：</p>\n<p><code>myNodeList --&gt; NodeList.prototype --&gt; Object.prototype --&gt; null</code></p>\n<p>NodeList 的原型上除了类似数组的 <code>forEach</code> 方法之外，还有 <code>item</code>，<code>entries</code>，<code>keys</code> 和 <code>values</code> 方法。</p>\n<h4 id=\"解决办法\">解决办法</h4>\n<p>一个解决办法就是把 <code>Array.prototype</code> 上的方法添加到 <code>NodeList.prototype</code> 上。可是，要注意<a href=\"http://perfectionkills.com/whats-wrong-with-extending-the-dom/\" class=\"external\" rel=\" noopener\">扩展 DOM 对象的原型是非常危险的</a>，尤其是在旧版本的 Internet Explorer（6，7，8）中。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> arrayMethods <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\narrayMethods<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span> attachArrayMethodsToNodeList <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">attachArrayMethodsToNodeList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">methodName</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>methodName <span class=\"token operator\">!==</span> <span class=\"token string\">\"length\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">NodeList</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">[</span>methodName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> divs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'div'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> firstDiv <span class=\"token operator\">=</span> divs<span class=\"token punctuation\">[</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nfirstDiv<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">divChild</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  divChild<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'#0F0'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>不扩展 DOM 对象原型的解决办法：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> forEach <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>forEach<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> divs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'div'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> firstDiv <span class=\"token operator\">=</span> divs<span class=\"token punctuation\">[</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">forEach</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>firstDiv<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">divChild</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  divChild<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'#0F0'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 请注意，在上面的代码中，将某个宿主对象（如 <code>NodeList</code>）作为 <code>this</code> 传递给原生方法（如 forEach）不能保证在所有浏览器中工作，已知在一些浏览器中会失败。</p>\n</div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://dom.spec.whatwg.org/#interface-nodelist","title":"DOM Standard"}],"query":"api.NodeList"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.NodeList","dataURL":"/zh-CN/docs/Web/API/NodeList/bcd.json"}}],"toc":[{"text":"属性","id":"属性"},{"text":"方法","id":"方法"},{"text":"例子","id":"例子"},{"text":"英文原版中已删除的内容","id":"英文原版中已删除的内容"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"}],"summary":"NodeList 对象是节点的集合，通常是由属性，如Node.childNodes 和 方法，如document.querySelectorAll 返回的。","popularity":0.0008,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"NodeList","locale":"en-US","native":"English (US)"},{"title":"NodeList","locale":"es","native":"Español"},{"title":"NodeList","locale":"fr","native":"Français"},{"title":"NodeList","locale":"ja","native":"日本語"},{"title":"NodeList","locale":"ko","native":"한국어"},{"title":"NodeList","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"NodeList","locale":"ru","native":"Русский"},{"title":"NodeList","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/web/api/nodelist","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/nodelist/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/NodeList","title":"NodeList"}],"pageTitle":"NodeList - Web API 接口参考 | MDN","noIndexing":false}}