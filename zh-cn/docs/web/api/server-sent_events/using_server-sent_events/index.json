{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"使用服务器发送事件","mdn_url":"/zh-CN/docs/Web/API/Server-sent_events/Using_server-sent_events","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Server-sent_events\">Server-sent events</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>指南</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Server-sent_events/Using_server-sent_events\">Using server-sent events</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>接口</summary><ol><li><a href=\"/zh-CN/docs/Web/API/EventSource\"><code>EventSource</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>开发一个使用服务器发送的事件的 Web 应用程序是很容易的。你需要在服务器上的一些代码将事件流传输到 Web 应用程序，但 Web 应用程序端的事情几乎完全相同，处理任何其他类型的事件。</p>\n<p>在 Web 应用程序中使用服务器发送事件很简单。在服务器端，只需要按照一定的格式返回事件流，在客户端中，只需要为一些事件类型绑定监听函数，和处理其他普通的事件没多大区别。</p>"}},{"type":"prose","value":{"id":"从服务器接受事件","title":"从服务器接受事件","isH3":false,"content":"<p>服务器发送事件 API 也就是<a href=\"/zh-CN/Server-sent_events/EventSource\" class=\"page-not-created\" title=\"This is a link to an unwritten page\"><code>EventSource</code></a>接口，在你创建一个新的<a href=\"/zh-CN/Server-sent_events/EventSource\" class=\"page-not-created\" title=\"This is a link to an unwritten page\"><code>EventSource</code></a>对象的同时，你可以指定一个接受事件的 URI.例如：</p>\n<pre class=\"notranslate\">const evtSource = new EventSource(\"ssedemo.php\");\n</pre>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 从 Firefox 11 开始，<code>EventSource</code>开始支持<a href=\"/zh-CN/HTTP_access_control\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">CORS</a>.虽然该特性目前并不是标准，但很快会成为标准。</p>\n</div>\n<p>如果发送事件的脚本不同源，应该创建一个新的包含 URL 和 options 参数的<code>EventSource</code>对象。例如，假设客户端脚本在 example.com 上：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> evtSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"//api.example.com/ssedemo.php\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">withCredentials</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>一旦你成功初始化了一个事件源，就可以对 <code><a href=\"/zh-CN/docs/Web/Reference/Events/message\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">message</a></code> 事件添加一个处理函数开始监听从服务器发出的消息了：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>evtSource<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> eventList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  newElement<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"message: \"</span> <span class=\"token operator\">+</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  eventList<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>上面的代码监听了那些从服务器发送来的所有没有指定事件类型的消息 (没有<code>event</code>字段的消息),然后把消息内容显示在页面文档中。</p>\n<p>你也可以使用<code>addEventListener()</code>方法来监听其他类型的事件：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>evtSource<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ping\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> time <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">;</span>\n  newElement<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"ping at \"</span> <span class=\"token operator\">+</span> time<span class=\"token punctuation\">;</span>\n  eventList<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这段代码也类似，只是只有在服务器发送的消息中包含一个值为\"ping\"的<code>event</code>字段的时候才会触发对应的处理函数，也就是将<code>data</code>字段的字段值解析为 JSON 数据，然后在页面上显示出所需要的内容。</p>\n<div class=\"notecard warning\" id=\"sect2\">\n  <p><strong>警告：</strong> 当<strong>不通过 HTTP / 2 使用时</strong>，SSE（server-sent events）会受到最大连接数的限制，这在打开各种选项卡时特别麻烦，因为该限制是针对每个浏览器的，并且被设置为一个非常低的数字（6）。该问题在 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=275955\" class=\"external\" rel=\" noopener\">Chrome</a> 和 <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=906896\" class=\"external\" rel=\" noopener\">Firefox</a>中被标记为“无法解决”。此限制是针对每个浏览器 + 域的，因此这意味着您可以跨所有选项卡打开 6 个 SSE 连接到 www.example1.com，并打开 6 个 SSE 连接到 www.example2.com。（来自 <a href=\"https://stackoverflow.com/a/5326159/1905229\" class=\"external\" rel=\" noopener\">Stackoverflow</a>）。使用 HTTP / 2 时，HTTP 同一时间内的最大连接数由服务器和客户端之间协商（默认为 100）。</p>\n</div>"}},{"type":"prose","value":{"id":"服务器端如何发送事件流","title":"服务器端如何发送事件流","isH3":false,"content":"<p>服务器端发送的响应内容应该使用值为<code>text/event-stream</code>的 MIME 类型。每个通知以文本块形式发送，并以一对换行符结尾。有关事件流的格式的详细信息，请参见<a href=\"#%E4%BA%8B%E4%BB%B6%E6%B5%81%E6%A0%BC%E5%BC%8F\">事件流格式</a>。</p>\n<p>演示的<a href=\"/zh-CN/docs/Glossary/PHP\">PHP</a>代码如下：</p>\n<div class=\"code-example\"><pre class=\"brush: php notranslate\"><code><span class=\"token function\">date_default_timezone_set</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"America/New_York\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Cache-Control: no-cache\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Content-Type: text/event-stream\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$counter</span> <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Every second, send a \"ping\" event.</span>\n\n  <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"event: ping\\n\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$curDate</span> <span class=\"token operator\">=</span> <span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DATE_ISO8601</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'data: {\"time\": \"'</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$curDate</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'\"}'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"\\n\\n\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Send a simple message at random intervals.</span>\n\n  <span class=\"token variable\">$counter</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$counter</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'data: This is a message at time '</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$curDate</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"\\n\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$counter</span> <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">ob_end_flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>上面的代码会让服务器每隔一秒生成一个事件流并返回，其中每条消息的事件类型为\"ping\",数据字段都使用了 JSON 格式，数组字段中包含了每个事件流生成时的 ISO 8601 时间戳。而且会随机返回一些无事件类型的消息。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 您可以在 github 上找到以上代码的完整示例—参见<a href=\"https://github.com/mdn/dom-examples/tree/master/server-sent-events\" class=\"external\" rel=\" noopener\">Simple SSE demo using PHP.</a></p>\n</div>"}},{"type":"prose","value":{"id":"错误处理","title":"错误处理","isH3":false,"content":"<p>当发生错误 (例如请求超时或与<a href=\"/zh-CN/docs/Web/HTTP/CORS\">HTTP 访问控制（CORS）</a>有关的问题), 会生成一个错误事件。您可以通过在<code>EventSource</code>对象上使用<code>onerror</code>回调来对此采取措施：</p>\n<pre class=\"notranslate\">evtSource.onerror = function(err) {\n  console.error(\"EventSource failed:\", err);\n};\n</pre>"}},{"type":"prose","value":{"id":"关闭事件流","title":"关闭事件流","isH3":false,"content":"<p>默认情况下，如果客户端和服务器之间的连接关闭，则连接将重新启动。可以使用<code>.close()</code>方法终止连接。</p>\n<pre class=\"notranslate\">evtSource.close();\n</pre>"}},{"type":"prose","value":{"id":"事件流格式","title":"事件流格式","isH3":false,"content":"<p>事件流仅仅是一个简单的文本数据流，文本应该使用 <a href=\"/zh-CN/docs/Glossary/UTF-8\">UTF-8</a> 格式的编码。每条消息后面都由一个空行作为分隔符。以冒号开头的行为注释行，会被忽略。</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>备注：</strong> 注释行可以用来防止连接超时，服务器可以定期发送一条消息注释行，以保持连接不断。</p>\n</div>\n<p>每条消息是由多个字段组成的，每个字段由字段名，一个冒号，以及字段值组成。</p>"}},{"type":"prose","value":{"id":"字段","title":"字段","isH3":true,"content":"<p>规范中规定了下面这些字段：</p>\n<dl>\n  <dt id=\"event\"><code>event</code></dt>\n  <dd>\n    <p>事件类型。如果指定了该字段，则在客户端接收到该条消息时，会在当前的<code>EventSource</code>对象上触发一个事件，事件类型就是该字段的字段值，你可以使用<code>addEventListener() 方法在当前 EventSource</code>对象上监听任意类型的命名事件，如果该条消息没有<code>event</code>字段，则会触发<code>onmessage 属性上的事件处理函数</code>.</p>\n  </dd>\n  <dt id=\"data\"><code>data</code></dt>\n  <dd>\n    <p>消息的数据字段。如果该条消息包含多个<code>data</code>字段，则客户端会用换行符把它们连接成一个字符串来作为字段值。</p>\n  </dd>\n  <dt id=\"id\"><code>id</code></dt>\n  <dd>\n    <p>事件 ID，会成为当前<code>EventSource</code>对象的内部属性\"最后一个事件 ID\"的属性值。</p>\n  </dd>\n  <dt id=\"retry\"><code>retry</code></dt>\n  <dd>\n    <p>一个整数值，指定了重新连接的时间 (单位为毫秒),如果该字段值不是整数，则会被忽略。</p>\n  </dd>\n</dl>\n<p>除了上面规定的字段名，其他所有的字段名都会被忽略。</p>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>备注：</strong> 如果一行文本中不包含冒号，则整行文本会被解析成为字段名，其字段值为空。</p>\n</div>"}},{"type":"prose","value":{"id":"例子","title":"例子","isH3":true,"content":"<h4 id=\"未命名事件\">未命名事件</h4>\n<p>下面的例子中发送了三条消息，第一条仅仅是个注释，因为它以冒号开头。第二条消息只包含了一个<code>data</code>字段，值为\"some text\".第三条消息包含的两个<code>data</code>字段会被解析成为一个字段，值为\"another message\\nwith two lines\".其中每两条消息之间是以一个空行为分割符的。</p>\n<pre class=\"notranslate\">: this is a test stream\n\ndata: some text\n\ndata: another message\ndata: with two lines\n</pre>\n<h4 id=\"命名事件\">命名事件</h4>\n<p>下面的事件流中包含了一些命名事件。每个事件的类型都是由<code>event</code>字段指定的，另外每个<code>data</code>字段的值可以使用 JSON 格式，当然也可以不是。</p>\n<pre class=\"notranslate\">event: userconnect\ndata: {\"username\": \"bobby\", \"time\": \"02:33:48\"}\n\nevent: usermessage\ndata: {\"username\": \"bobby\", \"time\": \"02:34:11\", \"text\": \"Hi everyone.\"}\n\nevent: userdisconnect\ndata: {\"username\": \"bobby\", \"time\": \"02:34:23\"}\n\nevent: usermessage\ndata: {\"username\": \"sean\", \"time\": \"02:34:36\", \"text\": \"Bye, bobby.\"}\n</pre>\n<h4 id=\"混合两种事件\">混合两种事件</h4>\n<p>你可以在一个事件流中同时使用命名事件和未命名事件。</p>\n<pre class=\"notranslate\">event: userconnect\ndata: {\"username\": \"bobby\", \"time\": \"02:33:48\"}\n\ndata: Here's a system message of some kind that will get used\ndata: to accomplish some task.\n\nevent: usermessage\ndata: {\"username\": \"bobby\", \"time\": \"02:34:11\", \"text\": \"Hi everyone.\"}\n</pre>"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.EventSource","dataURL":"/zh-CN/docs/Web/API/Server-sent_events/Using_server-sent_events/bcd.json"}}],"toc":[{"text":"从服务器接受事件","id":"从服务器接受事件"},{"text":"服务器端如何发送事件流","id":"服务器端如何发送事件流"},{"text":"错误处理","id":"错误处理"},{"text":"关闭事件流","id":"关闭事件流"},{"text":"事件流格式","id":"事件流格式"},{"text":"浏览器兼容性","id":"浏览器兼容性"}],"summary":"开发一个使用服务器发送的事件的 Web 应用程序是很容易的。你需要在服务器上的一些代码将事件流传输到 Web 应用程序，但 Web 应用程序端的事情几乎完全相同，处理任何其他类型的事件。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using server-sent events","locale":"en-US","native":"English (US)"},{"title":"Utilizando eventos enviados por el servidor (server-sent event)","locale":"es","native":"Español"},{"title":"Utiliser les évènements envoyés par le serveur","locale":"fr","native":"Français"},{"title":"サーバー送信イベントの使用","locale":"ja","native":"日本語"},{"title":"Server-Sent Events 사용하기","locale":"ko","native":"한국어"},{"title":"Using server-sent events","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Using server-sent events","locale":"ru","native":"Русский"},{"title":"使用 server-sent 事件","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/web/api/server-sent_events/using_server-sent_events","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/server-sent_events/using_server-sent_events/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/Server-sent_events","title":"Server-sent events"},{"uri":"/zh-CN/docs/Web/API/Server-sent_events/Using_server-sent_events","title":"使用服务器发送事件"}],"pageTitle":"使用服务器发送事件 - Web API 接口参考 | MDN","noIndexing":false}}