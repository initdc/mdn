{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"使用 channel messaging","mdn_url":"/zh-CN/docs/Web/API/Channel_Messaging_API/Using_channel_messaging","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Channel_Messaging_API\">Channel Messaging API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>指南</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Channel_Messaging_API/Using_channel_messaging\">Using channel messaging</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>接口</summary><ol><li><a href=\"/zh-CN/docs/Web/API/MessageChannel\"><code>MessageChannel</code></a></li><li><a href=\"/zh-CN/docs/Web/API/MessagePort\"><code>MessagePort</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/zh-CN/docs/Web/API/Channel_Messaging_API\">Channel Messaging API</a> 可以让运行在不同浏览器上下文中的独立脚本，连接到同一份文档（比如：两个 IFrame, 或者主文档和一个 IFrame, 或者使用同一个 <a href=\"/zh-CN/docs/Web/API/SharedWorker\"><code>SharedWorker</code></a> 的两份文档），并直接通信，通过每端一个 port 的双向频道（或管道）在两者之间传递消息。</p>\n<p>在文本中，我们将探索这项技术的基本用法。</p><div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> 此特性在 <a href=\"/zh-CN/docs/Web/API/Web_Workers_API\">Web Worker</a> 中可用</p>\n</div>"}},{"type":"prose","value":{"id":"用例","title":"用例","isH3":false,"content":"<p>Channel messaging 在这样的场景中特别有用：假如你有一个社交站点，它在主界面中通过 IFrame 内嵌了来自其他站点的内容，比如游戏，通讯录或者一个音乐播放器，有着个性化的音乐选择。当这些内容作为独立的单元时，一切都是 OK 的，但是当你想在主站点和 IFrame, 或者在不同的 IFrame 中交互时，困难就出现了。举例来说，假如你想从主站点向通讯录里添加一个联系人；或者想从游戏里，把最高分加入到个人资料；又或者，希望从音频播放器里，添加新的背景音乐到游戏中？因为浏览器使用的安全模型，使用传统的 web 技术来做这些事并不容易。你必须去考虑不同的源之间彼此是否信任，以及如何传递消息。</p>\n<p>换个角度说，Message Channels 可以提供一个安全的通道让你在不同的浏览器上下文间传递数据。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 要了解更多信息和思考，规范的 <a href=\"https://html.spec.whatwg.org/multipage/comms.html#ports-as-the-basis-of-an-object-capability-model-on-the-web\" class=\"external\" rel=\" noopener\">Ports 作为 Web 上一个对象兼容模型的基础</a> 章节值得一读。</p>\n</div>"}},{"type":"prose","value":{"id":"简单的例子","title":"简单的例子","isH3":false,"content":"<p>为了帮助你开始，我们在 Github 上传了一些 demo. 一开始可以先看我们的 <a href=\"https://github.com/mdn/dom-examples/tree/master/channel-messaging-basic\" class=\"external\" rel=\" noopener\">channel messaging 基本示例</a> (<a href=\"https://mdn.github.io/dom-examples/channel-messaging-basic/\" class=\"external\" rel=\" noopener\">也可以在线运行</a>)，它展示了一个非常简单的消息传递，发生在页面和内嵌 <a href=\"/zh-CN/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> 之间。</p>\n<p>然后，看看我们的 <a href=\"https://github.com/mdn/dom-examples/tree/master/channel-messaging-multimessage\" class=\"external\" rel=\" noopener\">multimessaging demo</a> (<a href=\"https://mdn.github.io/dom-examples/channel-messaging-multimessage/\" class=\"external\" rel=\" noopener\">在线运行</a>)，它展示了一个稍微复杂一点的例子，可以在主页面和 IFrame 之间发送多条消息。</p>\n<p>本文中，我们重点说后面的这个例子。它看起来像是这样：</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Channel_Messaging_API/Using_channel_messaging/channel-messaging-demo.png\" alt=\"\" width=\"690\" height=\"744\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"创建_channel","title":"创建 channel","isH3":false,"content":"<p>在例子的主页面，我们有一个简单的表单，内含一个文本输入框，用来输入要发送到 <a href=\"/zh-CN/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> 的消息。我们还有一个段落，我们在稍后将会用它来显示 <a href=\"/zh-CN/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> 回传回来的确认消息。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> input <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message-input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> output <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message-output'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> iframe <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iframe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> port1 <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span>port1<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 等待 iframe 加载</span>\niframe<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> onLoad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">onLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 监听按钮点击</span>\n  button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> onClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 在 port1 监听消息</span>\n  port1<span class=\"token punctuation\">.</span>onmessage <span class=\"token operator\">=</span> onMessage<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 把 port2 传给 iframe</span>\n  iframe<span class=\"token punctuation\">.</span>contentWindow<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'init'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>channel<span class=\"token punctuation\">.</span>port2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 当按钮点击时，在 port1 上发送一个消息</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  port1<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 处理 port1 收到的消息</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  output<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  input<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>我们从使用 <a href=\"/zh-CN/docs/Web/API/MessageChannel/MessageChannel\" title=\"MessageChannel()\"><code>MessageChannel()</code></a> 构造函数创建了一个 message channel 开始。</p>\n<p>当 IFrame 加载完成，我们在按钮上注册了<code>onclick</code> 事件处理函数，在 <a href=\"/zh-CN/docs/Web/API/MessageChannel/port1\"><code>MessageChannel.port1</code></a> 注册了 <code>onmessage</code> 事件处理函数。最后，我们使用 <a href=\"/zh-CN/docs/Web/API/Window/postMessage\"><code>window.postMessage</code></a> 方法把 <a href=\"/zh-CN/docs/Web/API/MessageChannel/port2\"><code>MessageChannel.port2</code></a> 传给 IFrame.</p>\n<p>让我们来了解一下 <code>iframe.contentWindow.postMessage</code> 更多的工作细节。它接受三个参数：</p>\n<ol>\n  <li>被发送的消息。对于一开始的 port 传递，这个消息可以是个空字符串，但是在例子里，我们传了 <code>'init'</code>.</li>\n  <li>消息将被发送到的源（origin）。 <code>*</code> 意思是 \"任何源\".</li>\n  <li>一个对象，它的所有权会被传给接受的浏览器上下文。在本例中，我们把 <a href=\"/zh-CN/docs/Web/API/MessageChannel/port2\"><code>MessageChannel.port2</code></a> 传给了 IFrame, 然后它就可以用于与主页面通信了。</li>\n</ol>\n<p>当我们的按钮被点击时，我们阻止了默认的表单提交，然后把输入到输入框里的内容通过 <a href=\"/zh-CN/docs/Web/API/MessageChannel\"><code>MessageChannel</code></a> 发送给 IFrame.</p>"}},{"type":"prose","value":{"id":"在_iframe_里接收_port_和消息","title":"在 IFrame 里接收 port 和消息","isH3":false,"content":"<p>在 IFrame 里，我们有下面的 JavaScript:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> port2<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 监听初始的 port 传递消息</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> initPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 设置传过来的 port</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">initPort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  port2 <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>ports<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  port2<span class=\"token punctuation\">.</span>onmessage <span class=\"token operator\">=</span> onMessage<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 处理 port2 收到的消息</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> listItem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  listItem<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  list<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>listItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  port2<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Message received by IFrame: \"'</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>data <span class=\"token operator\">+</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>当收到从主页面通过 <a href=\"/zh-CN/docs/Web/API/Window/postMessage\"><code>window.postMessage</code></a> 方法传来的初始化消息时，我们运行 <code>initPort</code> 函数。它会保存传来的 port, 并且注册了一个 onmessage 事件处理器，每当有消息通过我们的 <a href=\"/zh-CN/docs/Web/API/MessageChannel\"><code>MessageChannel</code></a> 传来时，它都会被调用。</p>\n<p>当收到从主页面发来的消息时，我们创建一个列表项，并把它插入到这个无序列表中，然后把这个列表项的 <a href=\"/zh-CN/docs/Web/API/Node/textContent\" title=\"textContent\"><code>textContent</code></a> 设置为事件的 <code>data</code> 属性（里面包含真正的消息）。</p>\n<p>然后，我们通过在初始化时传到 IFrame 的 <a href=\"/zh-CN/docs/Web/API/MessageChannel/port2\"><code>MessageChannel.port2</code></a> 上调用 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MessagePort/postMessage\"><code>MessagePort.postMessage</code> <small>(en-US)</small></a> 来使用 message channel 发送一个确认消息给主页面。</p>"}},{"type":"prose","value":{"id":"在主页面中接收确认消息","title":"在主页面中接收确认消息","isH3":false,"content":"<p>回到主页面，我们来一起看看 onmessage 事件处理函数。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 处理 port1 上收到的消息</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  output<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  input<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>当收到从 IFrame 发来的确认消息，说明原始消息被成功接收时，它把确认消息输出到段落中，并清空输入框，为输入下一个要被发送的消息做准备。</p>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"query":"api.MessageChannel,api.MessagePort","specifications":[]}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"data":null,"query":"api.MessageChannel,api.MessagePort","browsers":null}},{"type":"prose","value":{"id":"参见","title":"参见","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/Channel_Messaging_API\">Channel Messaging API</a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/Web_Workers_API\">Web Workers API</a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/Broadcast_Channel_API\">Broadcast Channel API</a></li>\n</ul>"}}],"toc":[{"text":"用例","id":"用例"},{"text":"简单的例子","id":"简单的例子"},{"text":"创建 channel","id":"创建_channel"},{"text":"在 IFrame 里接收 port 和消息","id":"在_iframe_里接收_port_和消息"},{"text":"在主页面中接收确认消息","id":"在主页面中接收确认消息"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"参见","id":"参见"}],"summary":"Channel Messaging API 可以让运行在不同浏览器上下文中的独立脚本，连接到同一份文档（比如：两个 IFrame, 或者主文档和一个 IFrame, 或者使用同一个 SharedWorker 的两份文档），并直接通信，通过每端一个 port 的双向频道（或管道）在两者之间传递消息。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using channel messaging","locale":"en-US","native":"English (US)"},{"title":"チャンネルメッセージングの使用","locale":"ja","native":"日本語"},{"title":"Using channel messaging","locale":"ko","native":"한국어"}],"source":{"folder":"zh-cn/web/api/channel_messaging_api/using_channel_messaging","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/channel_messaging_api/using_channel_messaging/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/Channel_Messaging_API","title":"Channel Messaging API"},{"uri":"/zh-CN/docs/Web/API/Channel_Messaging_API/Using_channel_messaging","title":"使用 channel messaging"}],"pageTitle":"使用 channel messaging - Web API 接口参考 | MDN","noIndexing":false}}