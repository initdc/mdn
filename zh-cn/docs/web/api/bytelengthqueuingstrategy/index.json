{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"ByteLengthQueuingStrategy","mdn_url":"/zh-CN/docs/Web/API/ByteLengthQueuingStrategy","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Streams_API\">Streams API</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>构造函数</summary><ol><li><a href=\"/zh-CN/docs/Web/API/ByteLengthQueuingStrategy/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/ByteLengthQueuingStrategy/size\"><code>size()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Streams 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableStreamBYOBRequest\"><code>ReadableStreamBYOBRequest</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Response/body\"><code>Response.body</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WritableStream\"><code>WritableStream</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WritableStreamDefaultWriter\"><code>WritableStreamDefaultWriter</code></a></li><li><a href=\"/zh-CN/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/zh-CN/docs/Web/API/Streams_API\">Streams API</a> 的 <strong><code>ByteLengthQueuingStrategy</code></strong> 接口提供了一个队列策略，该队列策略提供了内置的字节长度并且可以在构造流的时候使用。</p>"}},{"type":"prose","value":{"id":"构造函数","title":"构造函数","isH3":false,"content":"<dl>\n  <dt id=\"bytelengthqueuingstrategy\"><a href=\"/zh-CN/docs/Web/API/ByteLengthQueuingStrategy/ByteLengthQueuingStrategy\" title=\"ByteLengthQueuingStrategy()\"><code>ByteLengthQueuingStrategy()</code></a></dt>\n  <dd>\n    <p>创建一个新的 <code>ByteLengthQueuingStrategy</code> 对象实例。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"属性","title":"属性","isH3":false,"content":"<p>无。</p>"}},{"type":"prose","value":{"id":"方法","title":"方法","isH3":false,"content":"<dl>\n  <dt id=\"bytelengthqueuingstrategy.size\"><a href=\"/zh-CN/docs/Web/API/ByteLengthQueuingStrategy/size\"><code>ByteLengthQueuingStrategy.size()</code></a></dt>\n  <dd>\n    <p>返回给定分块的 <code>byteLength</code> 属性。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> queueingStrategy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteLengthQueuingStrategy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">highWaterMark</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> readableStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// …</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">pull</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// …</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stream error:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> queueingStrategy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> size <span class=\"token operator\">=</span> queueingStrategy<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://streams.spec.whatwg.org/#blqs-class","title":"Streams Standard"}],"query":"api.ByteLengthQueuingStrategy"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.ByteLengthQueuingStrategy","dataURL":"/zh-CN/docs/Web/API/ByteLengthQueuingStrategy/bcd.json"}}],"toc":[{"text":"构造函数","id":"构造函数"},{"text":"属性","id":"属性"},{"text":"方法","id":"方法"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"}],"summary":"Streams API 的 ByteLengthQueuingStrategy 接口提供了一个队列策略，该队列策略提供了内置的字节长度并且可以在构造流的时候使用。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"ByteLengthQueuingStrategy","locale":"en-US","native":"English (US)"},{"title":"ByteLengthQueuingStrategy","locale":"ja","native":"日本語"}],"source":{"folder":"zh-cn/web/api/bytelengthqueuingstrategy","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/bytelengthqueuingstrategy/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/ByteLengthQueuingStrategy","title":"ByteLengthQueuingStrategy"}],"pageTitle":"ByteLengthQueuingStrategy - Web API 接口参考 | MDN","noIndexing":false}}