{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"History.pushState()","mdn_url":"/zh-CN/docs/Web/API/History/pushState","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>History API</p>\n<p>在 <a href=\"/zh-CN/docs/Web/HTML\">HTML</a> 文档中，<strong><code>history.pushState()</code></strong> 方法向当前浏览器会话的历史堆栈中添加一个状态（state）。</p>"}},{"type":"prose","value":{"id":"语法","title":"语法","isH3":false,"content":"<pre class=\"notranslate\">history.pushState(state, title[, url])\n</pre>"}},{"type":"prose","value":{"id":"参数","title":"参数","isH3":true,"content":"<dl>\n  <dt id=\"state\"><code>state</code></dt>\n  <dd>\n    <p>\n      状态对象是一个 JavaScript 对象，它与<code>pushState()</code>创建的新历史记录条目相关联。 每当用户导航到新状态时，都会触发<code><a href=\"/en-US/docs/Web/API/Window/popstate_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">popstate (en-US)</a></code>事件，并且该事件的状态属性包含历史记录条目的状态对象的副本。\n      状态对象可以是任何可以序列化的对象。 因为 Firefox 将状态对象保存到用户的磁盘上，以便用户重新启动浏览器后可以将其还原，所以我们对状态对象的序列化表示施加了 2MiB 的大小限制。 如果将序列化表示形式大于此状态的状态对象传递给<code>pushState()</code>，则该方法将引发异常。 如果您需要更多空间，建议您使用 <a href=\"/zh-CN/docs/Web/API/Window/sessionStorage\" title=\"sessionStorage\"><code>sessionStorage</code></a>或者<a href=\"/zh-CN/docs/Web/API/Window/localStorage\" title=\"localStorage\"><code>localStorage</code></a>。\n    </p>\n  </dd>\n  <dt id=\"title\"><code>title</code></dt>\n  <dd>\n    <p><a href=\"https://github.com/whatwg/html/issues/2174\" class=\"external\" rel=\" noopener\">当前大多数浏览器都忽略此参数</a>，尽管将来可能会使用它。 在此处传递空字符串应该可以防止将来对方法的更改。 或者，您可以为要移动的状态传递简短的标题。</p>\n  </dd>\n  <dt id=\"url\"><code>url</code> <span class=\"badge inline optional\">可选</span></dt>\n  <dd>\n    <p>新历史记录条目的 URL 由此参数指定。 请注意，浏览器不会在调用 <code>pushState()</code> 之后尝试加载此 URL，但可能会稍后尝试加载 URL，例如在用户重新启动浏览器之后。 新的 URL 不必是绝对的。 如果是相对的，则相对于当前 URL 进行解析。 新网址必须与当前网址相同 <a href=\"/zh-CN/docs/Glossary/Origin\">origin</a>； 否则，<code>pushState()</code>将引发异常。 如果未指定此参数，则将其设置为文档的当前 URL。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"描述","title":"描述","isH3":false,"content":"<p>从某种程度来说，调用 <code>pushState()</code> 和 <code>window.location = \"#foo\"</code>基本上一样，他们都会在当前的 document 中创建和激活一个新的历史记录。但是 <code>pushState()</code> 有以下优势：</p>\n<ul>\n  <li>新的 URL 可以是任何和当前 URL 同源的 URL。但是设置 <a href=\"/zh-CN/docs/Web/API/Window/location\"><code>window.location</code></a> 只会在你只设置锚的时候才会使当前的 URL。</li>\n  <li>非强制修改 URL。相反，设置 <code>window.location = \"#foo\";</code> 仅仅会在锚的值不是 #foo 情况下创建一条新的历史记录。</li>\n  <li>可以在新的历史记录中关联任何数据。<code>window.location = \"#foo\"</code>形式的操作，你只可以将所需数据写入锚的字符串中。</li>\n</ul>\n<p>注意： <code>pushState()</code> 不会造成 <code><a href=\"/en-US/docs/Web/API/Window/hashchange_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">hashchange (en-US)</a></code> 事件调用，即使新的 URL 和之前的 URL 只是锚的数据不同。</p>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<p>以下代码通过设置<code>state</code>, <code>title</code>和<code>url</code>创建一条新的历史记录。</p>"}},{"type":"prose","value":{"id":"javascript","title":"JavaScript","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'page_id'</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">'user_id'</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> title <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'hello-world.html'</span>\n\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://html.spec.whatwg.org/multipage/history.html#dom-history-pushstate-dev","title":"HTML Standard"}],"query":"api.History.pushState"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.History.pushState","dataURL":"/zh-CN/docs/Web/API/History/pushState/bcd.json"}},{"type":"prose","value":{"id":"参见","title":"参见","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/History_API/Working_with_the_History_API\">Working with the History API</a></li>\n</ul>"}}],"toc":[{"text":"语法","id":"语法"},{"text":"描述","id":"描述"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"参见","id":"参见"}],"summary":"History API","popularity":0.0026,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"History.pushState()","locale":"en-US","native":"English (US)"},{"title":"History.pushState()","locale":"es","native":"Español"},{"title":"History.pushState()","locale":"ja","native":"日本語"},{"title":"History.pushState()","locale":"ko","native":"한국어"},{"title":"History.pushState()","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/api/history/pushstate","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/history/pushstate/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/History","title":"History"},{"uri":"/zh-CN/docs/Web/API/History/pushState","title":"History.pushState()"}],"pageTitle":"History.pushState() - Web API 接口参考 | MDN","noIndexing":false}}