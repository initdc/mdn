{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"state","mdn_url":"/zh-CN/docs/Web/API/History/state","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>返回在 history 栈顶的 <code>任意</code> 值的拷贝。 通过这种方式可以查看 state 值，不必等待 <a href=\"/zh-CN/docs/Web/API/Window/popstate_event\"><code>popstate</code></a>事件发生后再查看。</p>"}},{"type":"prose","value":{"id":"语法","title":"语法","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> currentState <span class=\"token operator\">=</span> history<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>如果不进行下面两种类型的调用，state 的值将会是 null</p>\n<p><a href=\"/zh-CN/docs/Web/API/History/pushState\" title=\"pushState()\"><code>pushState()</code></a> or <a href=\"/zh-CN/docs/Web/API/History/replaceState\" title=\"replaceState()\"><code>replaceState()</code></a>.</p>"}},{"type":"prose","value":{"id":"例子","title":"例子","isH3":false,"content":"<p>下面 log 例句输出 history.state 的值，首先是在没有执行 <a href=\"/zh-CN/docs/Web/API/History/pushState\" title=\"pushState()\"><code>pushState()</code></a> 语句进而将值 push 到 history 之前的 log。下面一行 log 语句再次输出 state 值，此时 history.state 已经有值。可以在脚本文件中执行下面语句，或者在控制台直接执行。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 值为 null 因为我们还没有修改 history 栈</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">History.state before pushState: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>history<span class=\"token punctuation\">.</span>state<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 现在 push 一些数据到栈里</span>\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">replaceState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Example'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pushState example\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'page3.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 现在 state 已经有值了</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">History.state after pushState: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>history<span class=\"token punctuation\">.</span>state<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://html.spec.whatwg.org/multipage/history.html#dom-history-state-dev","title":"HTML Standard"}],"query":"api.History.state"}},{"type":"browser_compatibility","value":{"title":"Browser compatibility","id":"browser_compatibility","isH3":false,"query":"api.History.state","dataURL":"/zh-CN/docs/Web/API/History/state/bcd.json"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/History_API/Working_with_the_History_API\">Working with the History API</a></li>\n</ul>"}}],"toc":[{"text":"语法","id":"语法"},{"text":"例子","id":"例子"},{"text":"规范","id":"规范"},{"text":"Browser compatibility","id":"browser_compatibility"},{"text":"See also","id":"see_also"}],"summary":"返回在 history 栈顶的 任意 值的拷贝。 通过这种方式可以查看 state 值，不必等待 popstate事件发生后再查看。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"History.state","locale":"en-US","native":"English (US)"},{"title":"History.state","locale":"ja","native":"日本語"},{"title":"History.state","locale":"ko","native":"한국어"},{"title":"History.state","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/api/history/state","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/history/state/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/History","title":"History"},{"uri":"/zh-CN/docs/Web/API/History/state","title":"state"}],"pageTitle":"state - Web API 接口参考 | MDN","noIndexing":false}}