{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"使用 Service Workers","mdn_url":"/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n <ol>\n  <li><a href=\"/zh-CN/docs/Web/API/Service_Worker_API\"><strong>Service Worker API</strong></a></li>\n  <li class=\"toggle\">\n    <details open=\"\">\n        <summary>Service Worker guides</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers\">Using Service Workers</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n        <summary>Interfaces</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Web/API/Cache\"><code>Cache</code></a></li>\n          <li><a href=\"/zh-CN/docs/Web/API/CacheStorage\"><code>CacheStorage</code></a></li>\n          <li><a href=\"/zh-CN/docs/Web/API/Client\"><code>Client</code></a></li>\n          <li><a href=\"/zh-CN/docs/Web/API/Clients\"><code>Clients</code></a></li>\n          <li><a href=\"/zh-CN/docs/Web/API/ExtendableEvent\"><code>ExtendableEvent</code></a></li>\n          <li><a href=\"/zh-CN/docs/Web/API/FetchEvent\"><code>FetchEvent</code></a></li>\n          <li><a href=\"/zh-CN/docs/Web/API/InstallEvent\"><code>InstallEvent</code></a></li>\n          <li><a href=\"/zh-CN/docs/Web/API/Navigator/serviceWorker\"><code>Navigator.serviceWorker</code></a></li>\n          <li><a href=\"/zh-CN/docs/Web/API/NotificationEvent\"><code>NotificationEvent</code></a></li>\n          <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PeriodicSyncEvent\"><code>PeriodicSyncEvent</code> <small>(en-US)</small></a></li>\n          <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PeriodicSyncManager\"><code>PeriodicSyncManager</code> <small>(en-US)</small></a></li>\n          <li><a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>PeriodicSyncRegistration</code></a></li>\n          <li><a href=\"/zh-CN/docs/Web/API/ServiceWorker\"><code>ServiceWorker</code></a></li>\n          <li><a href=\"/zh-CN/docs/Web/API/ServiceWorkerContainer\"><code>ServiceWorkerContainer</code></a></li>\n          <li><a href=\"/zh-CN/docs/Web/API/ServiceWorkerGlobalScope\"><code>ServiceWorkerGlobalScope</code></a></li>\n          <li><a href=\"/zh-CN/docs/Web/API/ServiceWorkerRegistration\"><code>ServiceWorkerRegistration</code></a></li>\n          <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SyncEvent\"><code>SyncEvent</code> <small>(en-US)</small></a></li>\n          <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SyncManager\"><code>SyncManager</code> <small>(en-US)</small></a></li>\n          <li><a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>SyncRegistration</code></a></li>\n          <li><a href=\"/zh-CN/docs/Web/API/WindowClient\"><code>WindowClient</code></a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n        <summary>Related APIs</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/Web/API/Channel_Messaging_API\">Channel Messaging API</a></li>\n          <li><a href=\"/zh-CN/docs/Web/API/Notifications_API\">Notifications API</a></li>\n          <li><a href=\"/zh-CN/docs/Web/API/Push_API\">Push API</a></li>\n          <li><a href=\"/zh-CN/docs/Web/API/Web_Workers_API\">Web Workers API</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/zh-CN/docs/MDN\">Documentation:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Contribute</summary>\n        <ol>\n          <li><a href=\"/zh-CN/docs/MDN\">The MDN project</a></li>\n        </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>本文是关于使用 service workers 的教程，包括讲解 service worker 的基本架构、怎么注册一个 service worker、一个新 service worker 的 install 及 activation 过程、怎么更新 service worker 还有它的缓存控制和自定义响应，这一切都在一个简单的离线的应用程序中。</p>"}},{"type":"prose","value":{"id":"背景","title":"背景","isH3":false,"content":"<p>有一个困扰 web 用户多年的难题——丢失网络连接。即使是世界上最好的 web app，如果下载不了它，也是非常糟糕的体验。如今虽然已经有很多种技术去尝试着解决这一问题。而随着<a href=\"/zh-CN/docs/Web/Apps/Build/Offline\">离线</a>页面的出现，一些问题已经得到了解决。但是，最重要的问题是，仍然没有一个好的统筹机制对资源缓存和自定义的网络请求进行控制。</p>\n<p>之前的尝试 — AppCache — 看起来是个不错的方法，因为它可以很容易地指定需要离线缓存的资源。但是，它假定你使用时会遵循诸多规则，如果你不严格遵循这些规则，它会把你的 APP 搞得一团糟。关于 APPCache 的更多详情，请看 Jake Archibald 的文章： <a href=\"https://alistapart.com/article/application-cache-is-a-douchebag\" class=\"external\" rel=\" noopener\">Application Cache is a Douchebag</a>.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 从 Firefox44 起，当使用 <a href=\"/zh-CN/docs/Web/HTML/Using_the_application_cache\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">AppCache</a> 来提供离线页面支持时，会提示一个警告消息，来建议开发者使用 <a href=\"/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers\" aria-current=\"page\">Service workers</a> 来实现离线页面。(<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1204581\" class=\"external\" rel=\" noopener\">bug&nbsp;1204581</a>.)</p>\n</div>\n<p>Service worker 最终要去解决这些问题。虽然 Service Worker 的语法比 AppCache 更加复杂，但是你可以使用 JavaScript 更加精细地控制 AppCache 的静默行为。有了它，你可以解决目前离线应用的问题，同时也可以做更多的事。Service Worker 可以使你的应用先访问本地缓存资源，所以在离线状态时，在没有通过网络接收到更多的数据前，仍可以提供基本的功能（一般称之为 <a href=\"http://offlinefirst.org/\" class=\"external\" rel=\" noopener\">Offline First</a>）。这是原生 APP 本来就支持的功能，这也是相比于 web app，原生 app 更受青睐的主要原因。</p>"}},{"type":"prose","value":{"id":"使用前的设置","title":"使用前的设置","isH3":false,"content":"<p>在已经支持 serivce workers 的浏览器的版本中，很多特性没有默认开启。如果你发现示例代码在当前版本的浏览器中怎么样都无法正常运行，你可能需要开启一下浏览器的相关配置：</p>\n<ul>\n  <li><strong>Firefox Nightly</strong>: 访问 <code>about:config</code> 并设置 <code>dom.serviceWorkers.enabled</code> 的值为 true; 重启浏览器；</li>\n  <li><strong>Chrome Canary</strong>: 访问 <code>chrome://flags</code> 并开启 <code>experimental-web-platform-features</code>; 重启浏览器 (注意：有些特性在 Chrome 中没有默认开放支持)；</li>\n  <li><strong>Opera</strong>: 访问 <code>opera://flags</code> 并开启 <code>ServiceWorker 的支持</code>; 重启浏览器。</li>\n</ul>\n<p>另外，你需要通过 HTTPS 来访问你的页面 — 出于安全原因，Service Workers 要求必须在 HTTPS 下才能运行。Github 是个用来测试的好地方，因为它就支持 HTTPS。为了便于本地开发，<code>localhost</code> 也被浏览器认为是安全源。</p>"}},{"type":"prose","value":{"id":"基本架构","title":"基本架构","isH3":false,"content":"<p>通常遵循以下基本步骤来使用 service workers：</p>\n<ol>\n  <li>service worker URL 通过 <a href=\"/zh-CN/docs/Web/API/ServiceWorkerContainer/register\"><code>serviceWorkerContainer.register()</code></a> 来获取和注册。</li>\n  <li>如果注册成功，service worker 就在 <a href=\"/zh-CN/docs/Web/API/ServiceWorkerGlobalScope\"><code>ServiceWorkerGlobalScope</code></a> 环境中运行；这是一个特殊类型的 worker 上下文运行环境，与主运行线程（执行脚本）相独立，同时也没有访问 DOM 的能力。</li>\n  <li>service worker 现在可以处理事件了。</li>\n  <li>受 service worker 控制的页面打开后会尝试去安装 service worker。最先发送给 service worker 的事件是安装事件 (在这个事件里可以开始进行填充 IndexDB 和缓存站点资源)。这个流程同原生 APP 或者 Firefox OS APP 是一样的 — 让所有资源可离线访问。</li>\n  <li>当 <code>oninstall</code> 事件的处理程序执行完毕后，可以认为 service worker 安装完成了。</li>\n  <li>下一步是激活。当 service worker 安装完成后，会接收到一个激活事件 (activate event)。 <code>onactivate</code> 主要用途是清理先前版本的 service worker 脚本中使用的资源。</li>\n  <li>Service Worker 现在可以控制页面了，但仅是在 <code>register()</code> 成功后的打开的页面。也就是说，页面起始于有没有 service worker，且在页面的接下来生命周期内维持这个状态。所以，页面不得不重新加载以让 service worker 获得完全的控制。</li>\n</ol>\n<p>\n  <img src=\"/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers/sw-lifecycle.png\" alt=\"\" width=\"579\" height=\"867\" loading=\"lazy\">\n</p>\n<p>下图展示了 service worker 所有支持的事件：</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers/sw-events.png\" alt=\"install, activate, message, fetch, sync, push\" width=\"573\" height=\"167\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"promises","title":"Promises","isH3":true,"content":"<p><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promises</a> 是一种非常适用于异步操作的机制，一个操作依赖于另一个操作的成功执行。这是 service worker 的核心工作机制。</p>\n<p>Promises 可以做很多事情。但现在，你只需要知道，如果有什么返回了一个 promise，你可以在后面加上 <code>.then()</code> 来传入成功和失败的回调函数。或者，你可以在后面加上 <code>.catch()</code> 如果你想添加一个操作失败的回调函数。</p>\n<p>接下来，让我们对比一下传统的同步回调结构，和异步 promise 结构，两者在功能上是等效的：</p>\n<h4 id=\"同步\">同步</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"异步\">异步</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在上面第一个例子中，我们必须等待 myFunction() 执行完成，并返回 value 值，在此之前，后续其它的代码无法执行。在第二个例子中，myFunction() 返回一个 promise 对象，下面的代码可以继续执行。当 promise 成功 resolves 后，then() 中的函数会异步地执行。</p>\n<p>现在来举下实际的例子 — 如果我们想动态地加载图片，而且要在图片下载完成后再展示到页面上，要怎么实现呢？这是一个比较常见的场景，但是实现起来会有点麻烦。我们可以使用 .onload 事件处理程序，来实现图片的加载完成后再展示。但是如果图片的 onload 事件发生在我们监听这个事件之前呢？我们可以使用 .complete 来解决这个问题，但是仍然不够简洁，如果是多个图片该怎么处理呢？并且，这种方法仍然是同步的操作，会阻塞主线程。</p>\n<p>相比于以上方法，我们可以使用 promise 来实现。(可以看我们的 <a href=\"https://github.com/mdn/promises-test\" class=\"external\" rel=\" noopener\">Promises test</a> 示例源码， <a href=\"https://mdn.github.io/promises-test/\" class=\"external\" rel=\" noopener\">look at it running live</a>.)</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> service worker 在实际使用中，会使用 caching 和 onfetch 等异步操作，而不是使用老旧的 XMLHttpRequest API。这里的例子使用 XMLHttpRequest API 只是为了让你能将注意力集中于理解 Promise 上。</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">imgLoad</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    request<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">'blob'</span><span class=\"token punctuation\">;</span>\n\n    request<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Image didn\\'t load successfully; error code:'</span> <span class=\"token operator\">+</span> request<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    request<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'There was a network error.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>我们使用 Promise( ) 构造函数返回了一个新的 promise 对象，构造函数接收一个回调函数作为参数。这个回调函数包含两个参数，第一个为成功执行 (resolve) 的回调函数，第二个为执行失败 (reject) 的回调函数。我们将这两个回调函数在对应的时机执行。在这个例子中，resolve 会在请求返回状态码 200 的时候执行，reject 会在请求返回码为非 200 的时候执行。上面代码的其余部分基本都是 XHR 的相关操作，现在不需要过多关注。</p>\n<p>当我们调用 imgLoad( ) 函数时，传入要加载的图片 url 作为参数。然后，后面的代码与同步方式会有点不同：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> body <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myImage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">imgLoad</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myLittleVader.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> imageURL <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myImage<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> imageURL<span class=\"token punctuation\">;</span>\n  body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>myImage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在函数调用后面，我们串联了 promise 的 then() 方法。then() 接受两个函数 —— 第一个函数在 promise 成功执行的情况下执行，而第二个函数则在 promise 执行失败情况下执行。当执行成功时，在 myImage 中显示图片，并追加到 body 里面 (它的参数就是传递给 promise 的 resolve 方法的 request.response )；当执行失败时，在控制台返回一个错误。</p>\n<p>这些都是异步的。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p>\n    <strong>备注：</strong> 你可以链式调用 promise，比如：\n    <code>myPromise().then(success, failure).then(success).catch(failure);</code>\n  </p>\n</div>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>备注：</strong> 你可以阅读 Jake Archibald 的精彩的文章 <a href=\"https://www.html5rocks.com/en/tutorials/es6/promises/\" class=\"external\" rel=\" noopener\">JavaScript Promises: there and back again</a> 了解更多关于 promise 的内容</p>\n</div>"}},{"type":"prose","value":{"id":"service_workers_demo","title":"Service workers demo","isH3":false,"content":"<p>\n  为了演示 service worker 的基本的注册和安装，我们做了一个简单的例子 <a href=\"https://github.com/mdn/sw-test\" class=\"external\" rel=\" noopener\">sw-test</a>，这是一个简单的 Star wars Lego 图片库。采用了基于 promise 的函数从一个 JSON 对象来读取图片内容，在显示图片到页面上之前，采用 Ajax 来加载图片。页面非常简单，而且是静态的，但也注册、安装和激活了 service worker，当浏览器支持的时候，它将缓存所有依赖的文件，它可以在离线的时候访问！\n  \n  <img src=\"/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers/demo-screenshot.png\" alt=\"\" width=\"480\" height=\"410\" loading=\"lazy\">\n</p>\n<p>你可以查看 <a href=\"https://github.com/mdn/sw-test/\" class=\"external\" rel=\" noopener\">Github 上的源码</a>，也可以查看 <a href=\"https://mdn.github.io/sw-test/\" class=\"external\" rel=\" noopener\">在线示例</a>。有一点需要我们重点关注的是 promise（查看 <a href=\"https://github.com/mdn/sw-test/blob/gh-pages/app.js#L22-L47\" class=\"external\" rel=\" noopener\">app.js 22-47 行</a>），这是一个你上面读到的 <a href=\"https://github.com/mdn/promises-test\" class=\"external\" rel=\" noopener\">Promises test demo</a> 里的一个修改版，它们有以下不同：</p>\n<ol>\n  <li>原始的版本里，我们只传了一个我们想加载的图片的 URL。在这个版本里，我们传了一个包含单个图片所有数据的 JSON（查看 <a href=\"https://github.com/mdn/sw-test/blob/gh-pages/image-list.js\" class=\"external\" rel=\" noopener\">image-list.js</a>）。这是因为每一个 promise reslove 的所有数据必须传给 promise，因为它是异步的。如果你只传了 url，那么当你 <code>for</code> 循环被遍历的时候你试图分别访问其他项，将不会有效的，因为 promise 的 resolve 不会和遍历（这个是同步的过程）同时完成。</li>\n  <li>我们实际上用数组 resolve 了这些 promise，因为我们想让得到加载完的图片 blob 和 图片的名字、credit 和 alt 文本（查看 <a href=\"https://github.com/mdn/sw-test/blob/gh-pages/app.js#L31-L34\" class=\"external\" rel=\" noopener\">app.js 31-34 行</a>）。Promises 只能 resolve 单个参数，所以你想 resolve 多个值的话，你需要用数组或对象。</li>\n  <li>为了访问 promise resolved 的值，我们接着通过 then 函数进行获取（<a href=\"https://github.com/mdn/sw-test/blob/gh-pages/app.js#L60-L64\" class=\"external\" rel=\" noopener\">app.js 60-64 行</a>），这个有点古怪，但这就是 promise 工作的方式。</li>\n</ol>"}},{"type":"prose","value":{"id":"现在来谈谈_service_workers","title":"现在来谈谈 Service workers","isH3":false,"content":"<p>现在我们开始讨论 service workers！</p>"}},{"type":"prose","value":{"id":"注册你的_worker","title":"注册你的 worker","isH3":true,"content":"<p>我们 app 的 JavaScript 文件里 — <code>app.js</code> — 的第一块代码就像下面的一样。这是我们使用 service worker 的入口：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'serviceWorker'</span> <span class=\"token keyword\">in</span> navigator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  navigator<span class=\"token punctuation\">.</span>serviceWorker<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/sw-test/sw.js'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">scope</span><span class=\"token operator\">:</span> <span class=\"token string\">'/sw-test/'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// registration worked</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Registration succeeded. Scope is '</span> <span class=\"token operator\">+</span> reg<span class=\"token punctuation\">.</span>scope<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// registration failed</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Registration failed with '</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ol>\n  <li>外面的代码块做了一个特性检查，在注册之前确保 service worker 是支持的。</li>\n  <li>接着，我们使用 <a href=\"/zh-CN/docs/Web/API/ServiceWorkerContainer/register\"><code>ServiceWorkerContainer.register()</code></a> 函数来注册站点的 service worker，service worker 只是一个驻留在我们的 app 内的一个 JavaScript 文件 (注意，这个文件的 url 是相对于 origin，而不是相对于引用它的那个 JS 文件)。</li>\n  <li><code>scope</code> 参数是选填的，可以被用来指定你想让 service worker 控制的内容的子目录。在这个例子里，我们指定了 <code>'/sw-test/'</code>，表示 app 的 origin 下的所有内容。如果你留空的话，默认值也是这个值，我们在指定只是作为例子。</li>\n  <li><code>.then()</code> 函数链式调用我们的 promise，当 promise resolve 的时候，里面的代码就会执行。</li>\n  <li>最后面我们链了一个 <code>.catch()</code> 函数，当 promise rejected 才会执行。</li>\n</ol>\n<p>这就注册了一个 service worker，它工作在 worker context，所以没有访问 DOM 的权限。在正常的页面之外运行 service worker 的代码来控制它们的加载。</p>\n<p>单个 service worker 可以控制很多页面。每个你的 scope 里的页面加载完的时候，安装在页面的 service worker 可以控制它。牢记你需要小心 service worker 脚本里的全局变量：每个页面不会有自己独有的 worker。</p>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>备注：</strong> 你的 service worker 函数像一个代理服务器一样，允许你修改请求和响应，用他们的缓存替代它们等等。</p>\n</div>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>备注：</strong> 关于 service workers 一个很棒的事情就是，如果你用像上面一样的浏览器特性检测方式检测发现浏览器并不支持 SW，你还是可以正常地在线使用页面。与此同时，如果你在一个页面上同时使用 AppCache 和 SW , 不支持 SW 但是支持 AppCache 的浏览器，可以使用 AppCache，如果都支持的话，则会采用 SW</p>\n</div>\n<h4 id=\"为什么我的_service_worker_注册失败了？\">为什么我的 service worker 注册失败了？</h4>\n<p>可能是如下的原因：</p>\n<ol>\n  <li>你没有在 HTTPS 下运行你的程序</li>\n  <li>service worker 文件的地址没有写对— 需要相对于 origin , 而不是 app 的根目录。在我们的例子例，service worker 是在 <code>https://mdn.github.io/sw-test/sw.js</code>，app 的根目录是 <code>https://mdn.github.io/sw-test/</code>。应该写成 <code>/sw-test/sw.js</code> 而非 <code>/sw.js</code>.</li>\n  <li>service worker 在不同的 origin 而不是你的 app 的，这是不被允许的。</li>\n</ol>\n<p>\n  <img src=\"/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers/important-notes.png\" alt=\"\" width=\"574\" height=\"277\" loading=\"lazy\">\n</p>\n<p>也请注意：</p>\n<ul>\n  <li>service worker 只能抓取在 service worker scope 里从客户端发出的请求。</li>\n  <li>最大的 scope 是 service worker 所在的地址</li>\n  <li>如果你的 service worker 被激活在一个有 <code>Service-Worker-Allowed</code> header 的客户端，你可以为 service worker 指定一个最大的 scope 的列表。</li>\n  <li>在 Firefox, Service Worker APIs 在用户在 <a href=\"https://support.mozilla.org/en-US/kb/private-browsing-use-firefox-without-history\" class=\"external\" rel=\" noopener\">private browsing mode</a> 下会被隐藏而且无法使用。</li>\n</ul>"}},{"type":"prose","value":{"id":"安装和激活：填充你的缓存","title":"安装和激活：填充你的缓存","isH3":true,"content":"<p>在你的 service worker 注册之后，浏览器会尝试为你的页面或站点安装并激活它。</p>\n<p><code>install</code> 事件会在注册完成之后触发。<code>install</code> 事件一般是被用来填充你的浏览器的离线缓存能力。为了达成这个目的，我们使用了 Service Worker 的新的标志性的存储 API — <a href=\"/zh-CN/docs/Web/API/Cache\"><code>cache</code></a> — 一个 service worker 上的全局对象，它使我们可以存储网络响应发来的资源，并且根据它们的请求来生成 key。这个 API 和浏览器的标准的缓存工作原理很相似，但是是特定你的域的。它会一直持久存在，直到你告诉它不再存储，你拥有全部的控制权。</p>\n<div class=\"notecard note\" id=\"sect7\">\n  <p><strong>备注：</strong> Cache API 并不被每个浏览器支持。（查看 <a href=\"#browser_support\">Browser support</a> 部分了解更多信息。）如果你现在就想使用它，可以考虑采用一个 polyfill，比如 <a href=\"https://github.com/Polymer/topeka/blob/master/sw.js\" class=\"external\" rel=\" noopener\">Google topeka demo</a>，或者把你的资源存储在 <a href=\"/zh-CN/docs/Glossary/IndexedDB\">IndexedDB</a> 中。</p>\n</div>\n<p>让我们从一个代码示例来开始这个部分——这是 <a href=\"https://github.com/mdn/sw-test/blob/gh-pages/sw.js#L1-L18\" class=\"external\" rel=\" noopener\">这是我们的 service worker 里的第一块代码</a> ：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'install'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'v1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cache</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'/sw-test/'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/sw-test/index.html'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/sw-test/style.css'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/sw-test/app.js'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/sw-test/image-list.js'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/sw-test/star-wars-logo.jpg'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/sw-test/gallery/'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/sw-test/gallery/bountyHunters.jpg'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/sw-test/gallery/myLittleVader.jpg'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/sw-test/gallery/snowTroopers.jpg'</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<ol>\n  <li>这里我们 新增了一个 <code>install</code> 事件监听器，接着在事件上接了一个<a href=\"/zh-CN/docs/Web/API/ExtendableEvent/waitUntil\"><code>ExtendableEvent.waitUntil()</code></a> 方法——这会确保 Service Worker 不会在 <code>waitUntil()</code> 里面的代码执行完毕之前安装完成。</li>\n  <li>在 <code>waitUntil()</code> 内，我们使用了 <a href=\"/zh-CN/docs/Web/API/CacheStorage/open\"><code>caches.open()</code></a> 方法来创建了一个叫做 <code>v1</code> 的新的缓存，将会是我们的站点资源缓存的第一个版本。它返回了一个创建缓存的 promise，当它 resolved 的时候，我们接着会调用在创建的缓存示例上的一个方法 <code>addAll()</code>，这个方法的参数是一个由一组相对于 origin 的 URL 组成的数组，这些 URL 就是你想缓存的资源的列表。</li>\n  <li>如果 promise 被 rejected，安装就会失败，这个 worker 不会做任何事情。这也是可以的，因为你可以修复你的代码，在下次注册发生的时候，又可以进行尝试。</li>\n  <li>当安装成功完成之后，service worker 就会激活。在第一次你的 service worker 注册／激活时，这并不会有什么不同。但是当 service worker 更新 (稍后查看 <a href=\"#%E6%9B%B4%E6%96%B0%E4%BD%A0%E7%9A%84_service_worker\">更新你的 service worker</a> 部分) 的时候，就不太一样了。</li>\n</ol>\n<div class=\"notecard note\" id=\"sect8\">\n  <p><strong>备注：</strong> <a href=\"/en-US/docs/Web/API/Window/localStorage\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">localStorage (en-US)</a> 跟 service worker 的 cache 工作原理很类似，但是它是同步的，所以不允许在 service workers 内使用。</p>\n</div>\n<div class=\"notecard note\" id=\"sect9\">\n  <p><strong>备注：</strong> <a href=\"/zh-CN/docs/Glossary/IndexedDB\">IndexedDB</a> 可以在 service worker 内做数据存储。</p>\n</div>"}},{"type":"prose","value":{"id":"自定义请求的响应","title":"自定义请求的响应","isH3":true,"content":"<p>现在你已经将你的站点资源缓存了，你需要告诉 service worker 让它用这些缓存内容来做点什么。有了 <code>fetch</code> 事件，这是很容易做到的。</p>\n<p>\n  <img src=\"/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers/sw-fetch.png\" alt=\"\" width=\"579\" height=\"494\" loading=\"lazy\">\n</p>\n<p>每次任何被 service worker 控制的资源被请求到时，都会触发 <code>fetch</code> 事件，这些资源包括了指定的 scope 内的文档，和这些文档内引用的其他任何资源（比如 <code>index.html</code> 发起了一个跨域的请求来嵌入一个图片，这个也会通过 service worker。）</p>\n<p>你可以给 service worker 添加一个 <code>fetch</code> 的事件监听器，接着调用 event 上的 <code>respondWith()</code> 方法来劫持我们的 HTTP 响应，然后你用可以用自己的方法来更新他们。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetch'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// magic goes here</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>我们可以用一个简单的例子开始，在任何情况下我们只是简单的响应这些缓存中的 url 和网络请求匹配的资源。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetch'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>caches.match(event.request)</code> 允许我们对网络请求的资源和 cache 里可获取的资源进行匹配，查看是否缓存中有相应的资源。这个匹配通过 url 和 vary header 进行，就像正常的 http 请求一样。</p>\n<p>让我们看看我们在定义我们的方法时的一些其他的选项（查看 <a href=\"/zh-CN/docs/Web/API/Fetch_API\">Fetch API documentation</a> 了解更多有关 <a href=\"/zh-CN/docs/Web/API/Request\"><code>Request</code></a> 和 <a href=\"/zh-CN/docs/Web/API/Response\"><code>Response</code></a> 对象的更多信息。）</p>\n<ol>\n  <li><code><a href=\"/zh-CN/docs/Web/API/Response/Response\" title=\"Response()\"><code>Response()</code></a></code> 构造函数允许你创建一个自定义的 response。在这个例子中，我们只返回一个示例的字符串：\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello from your friendly neighbourhood service worker!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>下面这个更复杂点的 <code>Response</code> 展示了你可以在你的响应里选择性的传一系列 header，来模仿标准的 HTTP 响应 header。这里我们只告诉浏览器我们虚假的响应的 content type：\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;p&gt;Hello from your friendly neighbourhood service worker!&lt;/p&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/html'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n  </li>\n  <li>如果没有在缓存中找到匹配的资源，你可以告诉浏览器对着资源直接去 <a href=\"/zh-CN/docs/Web/API/fetch\" title=\"fetch\"><code>fetch</code></a> 默认的网络请求：\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span>\n</code></pre></div>\n  </li>\n  <li>如果没有在缓存中找到匹配的资源，同时网络也不可用，你可以用 <a href=\"/zh-CN/docs/Web/API/CacheStorage/match\" title=\"match()\"><code>match()</code></a> 把一些回退的页面作为响应来匹配这些资源，比如：\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/fallback.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>你可以通过 <a href=\"/zh-CN/docs/Web/API/FetchEvent\"><code>FetchEvent</code></a> 返回的 <a href=\"/zh-CN/docs/Web/API/Request\"><code>Request</code></a> 对象检索到非常多有关请求的信息：\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url\nevent<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>method\nevent<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>headers\nevent<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>body\n</code></pre></div>\n  </li>\n</ol>"}},{"type":"prose","value":{"id":"恢复失败的请求","title":"恢复失败的请求","isH3":false,"content":"<p>在有 service worker cache 里匹配的资源时， <code>caches.match(event.request)</code> 是非常棒的。但是如果没有匹配资源呢？如果我们不提供任何错误处理，promise 就会 reject，同时也会出现一个网络错误。</p>\n<p>幸运的是，service worker 的基于 promise 的结构，使得提供更多的成功的选项变得微不足道。我们可以这样做：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetch'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> response <span class=\"token operator\">||</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>如果 promise reject 了，catch() 函数会执行默认的网络请求，意味着在网络可用的时候可以直接像服务器请求资源。</p>\n<p>如果我们足够聪明的话，我们就不会只是从服务器请求资源，而且还会把请求到的资源保存到缓存中，以便将来离线时所用！这意味着如果其他额外的图片被加入到 Star Wars 图库里，我们的 app 会自动抓取它们。下面就是这个诀窍：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetch'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> resp <span class=\"token operator\">||</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'v1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cache</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这里我们用 <code>fetch(event.request)</code> 返回了默认的网络请求，它返回了一个 promise。当网络请求的 promise 成功的时候，我们 通过执行一个函数用 <code>caches.open('v1')</code> 来抓取我们的缓存，它也返回了一个 promise。当这个 promise 成功的时候， <code>cache.put()</code> 被用来把这些资源加入缓存中。资源是从 <code>event.request</code> 抓取的，它的响应会被 <code>response.clone()</code> 克隆一份然后被加入缓存。这个克隆被放到缓存中，它的原始响应则会返回给浏览器来给调用它的页面。</p>\n<p>为什么要这样做？这是因为请求和响应流只能被读取一次。为了给浏览器返回响应以及把它缓存起来，我们不得不克隆一份。所以原始的会返回给浏览器，克隆的会发送到缓存中。它们都是读取了一次。</p>\n<p>我们现在唯一的问题是当请求没有匹配到缓存中的任何资源的时候，以及网络不可用的时候，我们的请求依然会失败。让我们提供一个默认的回退方案以便不管发生了什么，用户至少能得到些东西：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetch'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'v1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cache</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/sw-test/gallery/myLittleVader.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>因为只有新图片会失败，我们已经选择了回退的图片，一切都依赖我们之前看到的 <code>install</code> 事件侦听器中的安装过程。</p>"}},{"type":"prose","value":{"id":"更新你的_service_worker","title":"更新你的 service worker","isH3":false,"content":"<p>如果你的 service worker 已经被安装，但是刷新页面时有一个新版本的可用，新版的 service worker 会在后台安装，但是还没激活。当不再有任何已加载的页面在使用旧版的 service worker 的时候，新版本才会激活。一旦再也没有更多的这样已加载的页面，新的 service worker 就会被激活。</p>\n<p>你想把你的新版的 service worker 里的 <code>install</code> 事件监听器改成下面这样（注意新的版本号）：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'install'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'v2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cache</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'/sw-test/'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/sw-test/index.html'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/sw-test/style.css'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/sw-test/app.js'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'/sw-test/image-list.js'</span><span class=\"token punctuation\">,</span>\n\n        …\n\n        <span class=\"token comment\">// include other new resources for the new version...</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>当安装发生的时候，前一个版本依然在响应请求，新的版本正在后台安装，我们调用了一个新的缓存 <code>v2</code>，所以前一个 <code>v1</code> 版本的缓存不会被扰乱。</p>\n<p>当没有页面在使用当前的版本的时候，这个新的 service worker 就会激活并开始响应请求。</p>"}},{"type":"prose","value":{"id":"删除旧缓存","title":"删除旧缓存","isH3":true,"content":"<p>你还有个 <code>activate</code> 事件。当之前版本还在运行的时候，一般被用来做些会破坏它的事情，比如摆脱旧版的缓存。在避免占满太多磁盘空间清理一些不再需要的数据的时候也是非常有用的，每个浏览器都对 service worker 可以用的缓存空间有个硬性的限制。浏览器尽力管理磁盘空间，但它可能会删除整个域的缓存。浏览器通常会删除域下面的所有的数据。</p>\n<p>传给 <code>waitUntil()</code> 的 promise 会阻塞其他的事件，直到它完成。所以你可以确保你的清理操作会在你的的第一次 fetch 事件之前会完成。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'activate'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> cacheWhitelist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'v2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyList</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>keyList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cacheWhitelist<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"开发者工具","title":"开发者工具","isH3":false,"content":"<p>Chrome 有一个 <code>chrome://inspect/#service-workers</code> 可以展示当前设备上激活和存储的 service worker。还有个 <code>chrome://serviceworker-internals</code> 可以展示更多细节来允许你开始/暂停/调试 worker 的进程。未来他们会支持流量调节控制/离线模式来模拟弱网或者没网状态，这也是非常好的。</p>\n<p>Firefox 也开始实现一些关于 service worker 的有用的工具：</p>\n<ul>\n  <li>\n    你可以访问\n    about:serviceworkers\n    来看注册了什么 SW，还可以更新和移除他们。\n  </li>\n  <li>当测试时你想绕开 HTTPS 限制时，可以检查 Firefox Devtools 的选项 \"Enable Service Workers over HTTP (when toolbox is open)\" （齿轮图标）</li>\n</ul>\n<div class=\"notecard note\" id=\"sect10\">\n  <p><strong>备注：</strong> 你也许想让你的应用运行在 <code>http://localhost</code> (示例：使用 <code>me@localhost:/my/app$ python -m SimpleHTTPServer</code>) 以用于本地开发。详细内容请查看 <a href=\"https://www.w3.org/TR/service-workers/#security-considerations\" class=\"external\" rel=\" noopener\">Security considerations</a></p>\n</div>"}},{"type":"prose","value":{"id":"查看更多","title":"查看更多","isH3":false,"content":"<ul>\n  <li><a href=\"https://serviceworke.rs/\" class=\"external\" rel=\" noopener\">The Service Worker Cookbook</a></li>\n  <li><a href=\"https://jakearchibald.github.io/isserviceworkerready/\" class=\"external\" rel=\" noopener\">Is ServiceWorker ready?</a></li>\n  <li>下载 <a href=\"https://mdn.mozillademos.org/files/12638/sw101.png\" class=\"external\" rel=\" noopener\">Service Workers 101 cheatsheet</a>.</li>\n  <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promises</a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers\">Using web workers</a></li>\n  <li>Fetch API</li>\n  <li>Notification API</li>\n</ul>"}}],"toc":[{"text":"背景","id":"背景"},{"text":"使用前的设置","id":"使用前的设置"},{"text":"基本架构","id":"基本架构"},{"text":"Service workers demo","id":"service_workers_demo"},{"text":"现在来谈谈 Service workers","id":"现在来谈谈_service_workers"},{"text":"恢复失败的请求","id":"恢复失败的请求"},{"text":"更新你的 service worker","id":"更新你的_service_worker"},{"text":"开发者工具","id":"开发者工具"},{"text":"查看更多","id":"查看更多"}],"summary":"本文是关于使用 service workers 的教程，包括讲解 service worker 的基本架构、怎么注册一个 service worker、一个新 service worker 的 install 及 activation 过程、怎么更新 service worker 还有它的缓存控制和自定义响应，这一切都在一个简单的离线的应用程序中。","popularity":0.0013,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using Service Workers","locale":"en-US","native":"English (US)"},{"title":"Usar Service Workers","locale":"es","native":"Español"},{"title":"Utiliser les Service Workers","locale":"fr","native":"Français"},{"title":"サービスワーカーの使用","locale":"ja","native":"日本語"},{"title":"Using Service Workers","locale":"ko","native":"한국어"},{"title":"Usando Service Workers","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Использование Service Worker","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/api/service_worker_api/using_service_workers","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/service_worker_api/using_service_workers/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/Service_Worker_API","title":"Service Worker API"},{"uri":"/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers","title":"使用 Service Workers"}],"pageTitle":"使用 Service Workers - Web API 接口参考 | MDN","noIndexing":false}}