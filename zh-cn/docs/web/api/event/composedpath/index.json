{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Event.composedPath()","mdn_url":"/zh-CN/docs/Web/API/Event/composedPath","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Event\"><code>Event</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>构造函数</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Event/Event\"><code>Event()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Event/bubbles\"><code>bubbles</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Event/cancelable\"><code>cancelable</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/API/Event/cancelBubble\"><code>cancelBubble</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Event/composed\"><code>composed</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Event/currentTarget\"><code>currentTarget</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Event/defaultPrevented\"><code>defaultPrevented</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Event/eventPhase\"><code>eventPhase</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Event/explicitOriginalTarget\"><code>explicitOriginalTarget</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/Event/isTrusted\"><code>isTrusted</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/zh-CN/docs/Web/API/Event/originalTarget\"><code>originalTarget</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/API/Event/returnValue\"><code>returnValue</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/API/Event/srcElement\"><code>srcElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Event/target\"><code>target</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Event/timeStamp\"><code>timeStamp</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Event/type\"><code>type</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><em><code>composedPath()</code></em></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/API/Event/initEvent\"><code>initEvent()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Event/preventDefault\"><code>preventDefault()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Event/stopImmediatePropagation\"><code>stopImmediatePropagation()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Event/stopPropagation\"><code>stopPropagation()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>composedPath()</code></strong> 是 <a href=\"/zh-CN/docs/Web/API/Event\"><code>Event</code></a> 接口的一个方法，当对象数组调用该侦听器时返回事件路径。如果影子根节点被创建并且<a href=\"/zh-CN/docs/Web/API/ShadowRoot/mode\"><code>ShadowRoot.mode</code></a>是关闭的，那么该路径不包括影子树中的节点。</p>"}},{"type":"prose","value":{"id":"语法","title":"语法","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: plain notranslate\">var composed = Event.composedPath();\n</pre></div>"}},{"type":"prose","value":{"id":"参数","title":"参数","isH3":true,"content":"<p>无。</p>"}},{"type":"prose","value":{"id":"返回值","title":"返回值","isH3":true,"content":"<p>一个 <a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a>对象数组，表示将在其上调用事件侦听器的对象。</p>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<p>在我们的 composed-composed-path 例子中，我们定义了两个自定义元素，<code>&lt;open-shadow&gt;</code> 和 <code>&lt;closed-shadow&gt;，</code>两 个全都调用了它们文本属性的内容然后作为<code>&lt;p&gt;</code> 元素的文本内容将它们插入到元素的影子 DOM 中。两者之间唯一的区别是它们影子的根结点是在它们的模式被分别设置成<code>open</code> 和 <code>closed</code> 的情况下连接的。</p>\n<p>第一个定义就像这样，比如：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open-shadow'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> HTMLElement <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">let</span> pElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      pElem<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">let</span> shadowRoot <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>pElem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>然后我们在我们的页面中插入其中一个元素：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>open-shadow</span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>I have an open shadow root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>open-shadow</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>closed-shadow</span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>I have a closed shadow root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>closed-shadow</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>然后在 <code>&lt;html&gt;</code> 元素中插入一个鼠标点击事件：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>composed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">composedPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>当你先后点击 <code>&lt;open-shadow&gt;</code> 和 <code>&lt;closed-shadow&gt;</code> 这两个元素，你将会注意到两件事情。第一， <code>composed</code> 这个属性返回值为 <code>true</code> 因为 <code>click</code> 事件总能够在影子边界中传播。第二，你将注意到两个元素中<code>composedPath</code> 的值的不同。 <code>&lt;open-shadow&gt;</code> 元素的组成路径是这个：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Array <span class=\"token punctuation\">[</span> p<span class=\"token punctuation\">,</span> ShadowRoot<span class=\"token punctuation\">,</span> open<span class=\"token operator\">-</span>shadow<span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">,</span> html<span class=\"token punctuation\">,</span> HTMLDocument https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>mdn<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>io<span class=\"token operator\">/</span>web<span class=\"token operator\">-</span>components<span class=\"token operator\">-</span>examples<span class=\"token operator\">/</span>composed<span class=\"token operator\">-</span>composed<span class=\"token operator\">-</span>path<span class=\"token operator\">/</span><span class=\"token punctuation\">,</span> Window <span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>尽管 <code>&lt;closed-shadow&gt;</code> 元素的组成路径是像下面这样：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Array <span class=\"token punctuation\">[</span> closed<span class=\"token operator\">-</span>shadow<span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">,</span> html<span class=\"token punctuation\">,</span> HTMLDocument https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>mdn<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>io<span class=\"token operator\">/</span>web<span class=\"token operator\">-</span>components<span class=\"token operator\">-</span>examples<span class=\"token operator\">/</span>composed<span class=\"token operator\">-</span>composed<span class=\"token operator\">-</span>path<span class=\"token operator\">/</span><span class=\"token punctuation\">,</span> Window <span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>在第二个例子中，事件监听器仅能够传播到 <code>&lt;closed-shadow&gt;</code> 元素本身，但是不会到影子边界内的节点。</p>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://dom.spec.whatwg.org/#ref-for-dom-event-composedpath①","title":"DOM Standard"}],"query":"api.Event.composedPath"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.Event.composedPath","dataURL":"/zh-CN/docs/Web/API/Event/composedPath/bcd.json"}}],"toc":[{"text":"语法","id":"语法"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"}],"summary":"composedPath() 是 Event 接口的一个方法，当对象数组调用该侦听器时返回事件路径。如果影子根节点被创建并且ShadowRoot.mode是关闭的，那么该路径不包括影子树中的节点。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Event.composedPath()","locale":"en-US","native":"English (US)"},{"title":"Event.composedPath()","locale":"ja","native":"日本語"}],"source":{"folder":"zh-cn/web/api/event/composedpath","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/event/composedpath/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/Event","title":"Event"},{"uri":"/zh-CN/docs/Web/API/Event/composedPath","title":"Event.composedPath()"}],"pageTitle":"Event.composedPath() - Web API 接口参考 | MDN","noIndexing":false}}