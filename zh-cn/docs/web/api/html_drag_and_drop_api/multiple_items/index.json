{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"拖拽和放置多个项目","mdn_url":"/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API/Multiple_items","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API\">HTML Drag and Drop API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>指南</summary><ol><li><a href=\"/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API/File_drag_and_drop\">File drag and drop</a></li><li><a href=\"/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations\">Drag operations</a></li><li><a href=\"/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API/Multiple_items\">Dragging and Dropping Multiple Items</a></li><li><a href=\"/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types\">Recommended Drag Types</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>接口</summary><ol><li><a href=\"/zh-CN/docs/Web/API/DataTransfer\"><code>DataTransfer</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DataTransferItem\"><code>DataTransferItem</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DataTransferItemList\"><code>DataTransferItemList</code></a></li><li><a href=\"/zh-CN/docs/Web/API/DragEvent\"><code>DragEvent</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>事件</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Document/drag_event\"><code>Document</code>: <code>drag</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Document/dragend_event\"><code>Document</code>: <code>dragend</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Document/dragenter_event\"><code>Document</code>: <code>dragenter</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Document/dragleave_event\"><code>Document</code>: <code>dragleave</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Document/dragover_event\"><code>Document</code>: <code>dragover</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Document/dragstart_event\"><code>Document</code>: <code>dragstart</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Document/drop_event\"><code>Document</code>: <code>drop</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard warning\" id=\"sect1\">\n  <p><strong>警告：</strong> 所有带有 <strong>moz</strong> 前缀的属性和方法（例如 <strong>mozSetDataAt()</strong> ）都是 Gecko 浏览器引擎所特有的接口。这些接口只能在基于 Gecko 引擎的浏览器上使用。</p>\n</div>\n<p>Mozilla 提供了一些额外的非标准方法来支持多个元素的拖拽。这些方法中映射了 <a href=\"/zh-CN/docs/Web/API/DataTransfer/types\" title=\"types\"><code>types</code></a> 属性以及 <a href=\"/zh-CN/docs/Web/API/DataTransfer/getData\" title=\"getData()\"><code>getData()</code></a>，<a href=\"/zh-CN/docs/Web/API/DataTransfer/setData\" title=\"setData()\"><code>setData()</code></a> 和 <a href=\"/zh-CN/docs/Web/API/DataTransfer/clearData\" title=\"clearData()\"><code>clearData()</code></a> 方法。不过，这些方法可以接受额外的参数来指定需要获取、修改或是移除的元素的下标。</p>\n<p>本文中描述的拖拽过程均使用 <a href=\"/zh-CN/docs/Web/API/DataTransfer\"><code>DataTransfer</code></a> 接口。该过程不会使用 <a href=\"/zh-CN/docs/Web/API/DataTransferItem\"><code>DataTransferItem</code></a> 接口，也不会使用 <a href=\"/zh-CN/docs/Web/API/DataTransferItemList\"><code>DataTransferItemList</code></a> 接口。</p>"}},{"type":"prose","value":{"id":"基于索引的添加和获取","title":"基于索引的添加和获取","isH3":false,"content":"<p><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DataTransfer/mozSetDataAt\"><code>mozSetDataAt()</code> <small>(en-US)</small></a> 方法可以让你在 <code><a href=\"/en-US/docs/Web/API/HTMLElement/dragstart_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">dragstart (en-US)</a></code> 事件里添加多个元素。该函数功能类似于 <a href=\"/zh-CN/docs/Web/API/DataTransfer/setData\" title=\"setData()\"><code>setData()</code></a>。</p>\n<pre class=\"notranslate\">var dt = event.dataTransfer;\ndt.mozSetDataAt(\"text/plain\", \"Data to drag\", 0);\ndt.mozSetDataAt(\"text/plain\", \"Second data to drag\", 1);\n</pre>\n<p>上面这个例子添加了两个可拖拽元素的各一条数据项。函数的最后一个参数表示元素的索引。你应该按照从零开始的顺序依次指定元素的索引，但是你可以使用你已经添加过的索引来替换已有的元素。使用 0 当作索引就相当于调用 <a href=\"/zh-CN/docs/Web/API/DataTransfer/setData\" title=\"setData()\"><code>setData()</code></a>。</p>\n<p>你可以使用 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DataTransfer/mozClearDataAt\"><code>mozClearDataAt()</code> <small>(en-US)</small></a> 方法来移除一个拖拽元素上的一个数据项。</p>\n<pre class=\"notranslate\">event.dataTransfer.mozClearDataAt(\"text/plain\", 1);\n</pre>\n<p>注意：移除一个元素中的全部类型的数据项后将会使整个元素移除，导致后面的元素往前移动，索引将会产生变化（相应减小）。 例如：</p>\n<pre class=\"notranslate\">var dt = event.dataTransfer;\ndt.mozSetDataAt(\"text/uri-list\", \"URL1\", 0);\ndt.mozSetDataAt(\"text/plain\",    \"URL1\", 0);\ndt.mozSetDataAt(\"text/uri-list\", \"URL2\", 1);\ndt.mozSetDataAt(\"text/plain\",    \"URL2\", 1);\ndt.mozSetDataAt(\"text/uri-list\", \"URL3\", 2);\ndt.mozSetDataAt(\"text/plain\",    \"URL3\", 2);\n// [item1] data=URL1, index=0\n// [item2] data=URL2, index=1\n// [item3] data=URL3, index=2\n</pre>\n<p>当你添加完三个元素，且每个元素中包含两种数据类型，</p>\n<pre class=\"notranslate\">dt.mozClearDataAt(\"text/uri-list\", 1);\ndt.mozClearDataAt(\"text/plain\", 1);\n</pre>\n<p>当你移除了第二个元素中的所有数据项时，第二个元素就会被整个移除，原来的第三个元素变成了新的第二个元素，索引也相应变成了 2。</p>\n<pre class=\"notranslate\">// [item1] data=URL1, index=0\n// [item2] data=URL3, index=1\n</pre>\n<p>幸运的是，你基本不需要进行移除数据项的操作；通常情况下你只需在必要的时候把它加入其中。</p>\n<p>比较常见的使用多元素拖拽的场景，例如多个文件或者多个书签的拖拽中，记得给每个元素设置合适的数据项类型。尽管不是必须的，但你应该为所有元素设置一致的数据项类型，这可以确保目标元素接收到和预期一致的数据。</p>\n<p>你可以通过检查 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DataTransfer/mozItemCount\"><code>mozItemCount</code> <small>(en-US)</small></a> 属性来判断是否有多个元素被拖拽。该属性的值等于当前被拖拽的元素的个数。如果某个拖拽的目标元素只接受单个拖拽元素，它可以直接拒绝这次拖拽操作或者只接受其中的第一个元素。若需要拒绝这些元素，你可以不阻止 <code><a href=\"/en-US/docs/Web/API/HTMLElement/dragover_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">dragover (en-US)</a></code> 事件，或者设置 <a href=\"/zh-CN/docs/Web/API/DataTransfer/effectAllowed\" title=\"effectAllowed\"><code>effectAllowed</code></a> 属性为 <code>none</code>。最好将两者结合使用，因为有可能另一个监听函数已经阻止了事件。</p>\n<p>若只接受拖拽的第一个元素，可以使用 <a href=\"/zh-CN/docs/Web/API/DataTransfer/getData\" title=\"getData()\"><code>getData()</code></a> 方法，就和处理单个元素一样。拖拽的目标只需支持单个元素的拖拽而无需任何额外的操作就可以适用于这个场景。</p>\n<p>同时，你也可以使用 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DataTransfer/mozGetDataAt\"><code>mozGetDataAt()</code> <small>(en-US)</small></a> 方法来获取指定的拖拽元素。下面这个例子展示了如何获取到拖拽元素中的所有文件类型数据，并将他们加入到一个数组中。</p>\n<pre class=\"notranslate\">function onDrop(event)\n{\n  var files = [];\n  var dt = event.dataTransfer;\n  for (var i = 0; i &lt; dt.mozItemCount; i++)\n    files.push(dt.mozGetDataAt(\"application/x-moz-file\", i));\n}\n</pre>\n<p>如果你想知道指定的类型在某个元素上是否存在，你可以使用 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DataTransfer/mozTypesAt\"><code>mozTypesAt</code> <small>(en-US)</small></a> 方法。与<a href=\"/zh-CN/docs/Web/API/DataTransfer/types\" title=\"types\"><code>types</code></a> 属性类似，它返回元素的数据类型列表。访问 <a href=\"/zh-CN/docs/Web/API/DataTransfer/types\" title=\"types \"><code>types </code></a> 属性就相当于取索引为 0 的元素的数据类型列表。</p>\n<pre class=\"notranslate\">var types = event.dataTransfer.mozTypesAt(1);\n</pre>"}},{"type":"prose","value":{"id":"拖拽非字符串的数据","title":"拖拽非字符串的数据","isH3":false,"content":"<p>上述方法不仅限于字符串类型的数据；你可以为数据指定任意类型。例如，文件数据使用 <a href=\"/en-US/DragDrop/Recommended_Drag_Types#file\">application/x-moz-file</a> 类型，存储为 <a href=\"/zh-CN/XPCOM_Interface_Reference/nsIFile\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">nsIFile</a> 对象。但是因为 <a href=\"/zh-CN/docs/Web/API/DataTransfer/setData\" title=\"setData()\"><code>setData()</code></a> 方法只支持字符串，所以在这种情况下不能用来指定文件。应该使用的是 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DataTransfer/mozSetDataAt\"><code>mozSetDataAt()</code> <small>(en-US)</small></a> 方法。</p>\n<pre class=\"notranslate\">dt.mozSetDataAt(\"application/x-moz-file\", file, 0);\n</pre>\n<p>通过使用这个方法，你可以传输任意的对象，尽管你可能不需要支持多元素的拖拽，但还是应该传入 0 当作索引。</p>\n<p>同样的，你将需要使用 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DataTransfer/mozGetDataAt\"><code>mozGetDataAt()</code> <small>(en-US)</small></a> 方法来获取这个文件对象或是任何其他对象。如果你使用 <a href=\"/zh-CN/docs/Web/API/DataTransfer/getData\" title=\"getData()\"><code>getData()</code></a> 方法，非字符类型数据将可能会使你得到一个空字符串。不过一些简单类型，像数字，是可以被转换成字符串的，所以在这种情况下使用 <a href=\"/zh-CN/docs/Web/API/DataTransfer/getData\" title=\"getData()\"><code>getData()</code></a> 是安全的。</p>"}},{"type":"prose","value":{"id":"举个例子","title":"举个例子","isH3":false,"content":"<p>下面这个例子中，实现了一个盒子可以把拖拽到上面的元素以及他们的类型都展示出来。</p>\n<pre class=\"notranslate\">&lt;html&gt;\n&lt;head&gt;\n&lt;script&gt;\n\nfunction dodrop(event)\n{\n  var dt = event.dataTransfer;\n  var count = dt.mozItemCount;\n  output(\"Items: \" + count + \"\\n\");\n\n  for (var i = 0; i &lt; count; i++) {\n    output(\" Item \" + i + \":\\n\");\n    var types = dt.mozTypesAt(i);\n    for (var t = 0; t &lt; types.length; t++) {\n      output(\"  \" + types[t] + \": \");\n      try {\n        var data = dt.mozGetDataAt(types[t], i);\n        output(\"(\" + (typeof data) + \") : &lt;\" + data + \" &gt;\\n\");\n      } catch (ex) {\n        output(\"&lt;&lt;error&gt;&gt;\\n\");\n        dump(ex);\n      }\n    }\n  }\n}\n\nfunction output(text)\n{\n  document.getElementById(\"output\").textContent += text;\n  dump(text);\n}\n\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div id=\"output\" style=\"min-height: 100px; white-space: pre; border: 1px solid black;\"\n     ondragenter=\"document.getElementById('output').textContent = ''; event.stopPropagation(); event.preventDefault();\"\n     ondragover=\"event.stopPropagation(); event.preventDefault();\"\n     ondrop=\"event.stopPropagation(); event.preventDefault(); dodrop(event);\"&gt;\n\n&lt;div&gt;\n\n Fix&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>这个例子中通过调用 <a href=\"/zh-CN/docs/Web/API/Event/preventDefault\" title=\"preventDefault()\"><code>preventDefault()</code></a> 方法，阻止了 <code><code><a href=\"/en-US/docs/Web/API/HTMLElement/dragenter_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">dragenter (en-US)</a></code></code> 和 <code><code><a href=\"/en-US/docs/Web/API/HTMLElement/dragover_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">dragover (en-US)</a></code></code> 事件。这使放置事件可以在该的元素上被触发。</p>\n<p>当放下一个元素时， <code>dodrop</code> 事件处理函数将会被调用。它会检查 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DataTransfer/mozItemCount\"><code>mozItemCount</code> <small>(en-US)</small></a> 属性来获取有多少元素被放下并且遍历他们。对于每个元素，都会通过调用 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/DataTransfer/mozTypesAt\"><code>mozTypesAt()</code> <small>(en-US)</small></a> 方法来获得类型列表。数据类型列表也将被遍历以获取到所有和被拖拽元素相关的信息。</p>\n<p>当你希望检查所有拖拽元素含有的数据时，这个流程是很有用的。只需要将元素拖拽到目标上就可以看到被拖拽元素本身以及它的类型和包含的数据。</p>"}},{"type":"prose","value":{"id":"see_also","title":"See also","isH3":false,"content":"<ul>\n  <li><a href=\"/docs/Web/API/HTML_Drag_and_Drop_API\">HTML Drag and Drop API (Overview)</a></li>\n  <li><a href=\"Web/Guide/HTML/Drag_operations\">Drag Operations</a></li>\n  <li><a href=\"/docs/Web/Guide/HTML/Recommended_Drag_Types\">Recommended Drag Types</a></li>\n  <li><a href=\"https://html.spec.whatwg.org/multipage/interaction.html#dnd\" class=\"external\" rel=\" noopener\">HTML5 Living Standard: Drag and Drop</a></li>\n</ul>"}}],"toc":[{"text":"基于索引的添加和获取","id":"基于索引的添加和获取"},{"text":"拖拽非字符串的数据","id":"拖拽非字符串的数据"},{"text":"举个例子","id":"举个例子"},{"text":"See also","id":"see_also"}],"summary":"Mozilla 提供了一些额外的非标准方法来支持多个元素的拖拽。这些方法中映射了 types 属性以及 getData()，setData() 和 clearData() 方法。不过，这些方法可以接受额外的参数来指定需要获取、修改或是移除的元素的下标。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Dragging and Dropping Multiple Items","locale":"en-US","native":"English (US)"},{"title":"複数のアイテムのドラッグ＆ドロップ","locale":"ja","native":"日本語"}],"source":{"folder":"zh-cn/web/api/html_drag_and_drop_api/multiple_items","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/html_drag_and_drop_api/multiple_items/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API","title":"HTML 拖放 API"},{"uri":"/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API/Multiple_items","title":"拖拽和放置多个项目"}],"pageTitle":"拖拽和放置多个项目 - Web API 接口参考 | MDN","noIndexing":false}}