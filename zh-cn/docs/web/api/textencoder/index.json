{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"TextEncoder","mdn_url":"/zh-CN/docs/Web/API/TextEncoder","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Encoding_API\">Encoding API</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/TextEncoder\"><code>TextEncoder</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>构造函数</summary><ol><li><a href=\"/zh-CN/docs/Web/API/TextEncoder/TextEncoder\"><code>TextEncoder()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a href=\"/zh-CN/docs/Web/API/TextEncoder/encoding\"><code>encoding</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/TextEncoder/encode\"><code>encode()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/TextEncoder/encodeInto\"><code>encodeInto()</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Encoding API 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/TextDecoder\"><code>TextDecoder</code></a></li><li><a href=\"/zh-CN/docs/Web/API/TextDecoderStream\"><code>TextDecoderStream</code></a></li><li><a href=\"/zh-CN/docs/Web/API/TextEncoderStream\"><code>TextEncoderStream</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>TextEncoder</code></strong> 接受代码点流作为输入，并提供 UTF-8 字节流作为输出。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> There is a polyfill implementation to support non-UTF-8 text encodings on <a href=\"https://github.com/inexorabletash/text-encoding\" class=\"external\" rel=\" noopener\">GitHub</a>.</p>\n</div>"}},{"type":"prose","value":{"id":"例子","title":"例子","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> encoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> view <span class=\"token operator\">=</span> encoder<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'€'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uint8Array(3) [226, 130, 172]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"构造器","title":"构造器","isH3":false,"content":"<dl>\n  <dt id=\"textencoder\"><a href=\"/zh-CN/docs/Web/API/TextEncoder/TextEncoder\" title=\"TextEncoder()\"><code>TextEncoder()</code></a></dt>\n  <dd>\n    <p>返回一个新构造的 <code>TextEncoder</code>，它默认使用 UTF-8 编码将代码点流转换成字节流。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"属性","title":"属性","isH3":false,"content":"<p><em><code>TextEncoder</code> 接口不继承任何属性。</em></p>\n<dl>\n  <dt id=\"textencoder.encoding\"><a href=\"/zh-CN/docs/Web/API/TextEncoder/encoding\"><code>TextEncoder.encoding</code></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>总是返回 \"<code>utf-8</code>\"。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"方法","title":"方法","isH3":false,"content":"<p><em><code>TextEncoder</code> 接口不继承任何方法。</em></p>\n<dl>\n  <dt id=\"textencoder.encode\"><a href=\"/zh-CN/docs/Web/API/TextEncoder/encode\"><code>TextEncoder.encode()</code></a></dt>\n  <dd>\n    <p>接受一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>USVString</code></a> 作为输入，返回一个包含文本的 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>，其中的文本使用 UTF-8 编码。</p>\n  </dd>\n  <dt id=\"textencoder.prototype.encodeinto_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/TextEncoder/encodeInto\"><code>TextEncoder.prototype.encodeInto()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>接受一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>USVString</code></a> 作为输入、一个<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a> 作为输出目标，返回一个指示编码进度的目录（dictionary）对象。此方法的性能可能会比更早出现的 <code>encode()</code> 方法好一些。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"polyfill","title":"Polyfill","isH3":false,"content":"<p>The below polyfill is compliant with the standard and therefore only supports UTF-8. It is designed to work in IE5 \"out of the box\". However, in IE5-IE9, it will return a regular Array instead of a TypedArray. In those cases a polyfill might be impractical for large strings. Finally, note that you should run the below code through a minifier (especially closure compiler) to turn sequences like <code>0x1e &lt;&lt; 3</code> into <code>0xf0</code>. These sequences are not already precomputed because they serve to aesthetically illustrate how the polyfill works.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> TextEncoder <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">TextEncoder</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token function\">TextEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">encode</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> Len <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> resPos <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// The Uint8Array's length must be at least 3x the length of the string because an invalid UTF-16</span>\n        <span class=\"token comment\">//  takes up the equivelent space of 3 UTF-8 characters to encode it properly. However, Array's</span>\n        <span class=\"token comment\">//  have an auto expanding length and 1.5x should be just the right balance for most uses.</span>\n        <span class=\"token keyword\">var</span> resArr <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> Uint8Array <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>Len <span class=\"token operator\">*</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>Len <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> point<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nextcode<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!==</span> Len<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            point <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>point <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0xD800</span> <span class=\"token operator\">&amp;&amp;</span> point <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0xDBFF</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> Len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    resArr<span class=\"token punctuation\">[</span>resPos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xef</span><span class=\"token comment\">/*0b11101111*/</span><span class=\"token punctuation\">;</span> resArr<span class=\"token punctuation\">[</span>resPos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xbf</span><span class=\"token comment\">/*0b10111111*/</span><span class=\"token punctuation\">;</span>\n                    resArr<span class=\"token punctuation\">[</span>resPos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xbd</span><span class=\"token comment\">/*0b10111101*/</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae</span>\n                nextcode <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextcode <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0xDC00</span> <span class=\"token operator\">&amp;&amp;</span> nextcode <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0xDFFF</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    point <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>point <span class=\"token operator\">-</span> <span class=\"token number\">0xD800</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0x400</span> <span class=\"token operator\">+</span> nextcode <span class=\"token operator\">-</span> <span class=\"token number\">0xDC00</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x10000</span><span class=\"token punctuation\">;</span>\n                    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>point <span class=\"token operator\">&gt;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        resArr<span class=\"token punctuation\">[</span>resPos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x1e</span><span class=\"token comment\">/*0b11110*/</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>point<span class=\"token operator\">&gt;&gt;&gt;</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        resArr<span class=\"token punctuation\">[</span>resPos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x2</span><span class=\"token comment\">/*0b10*/</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>point<span class=\"token operator\">&gt;&gt;&gt;</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0x3f</span><span class=\"token comment\">/*0b00111111*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        resArr<span class=\"token punctuation\">[</span>resPos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x2</span><span class=\"token comment\">/*0b10*/</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>point<span class=\"token operator\">&gt;&gt;&gt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0x3f</span><span class=\"token comment\">/*0b00111111*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        resArr<span class=\"token punctuation\">[</span>resPos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x2</span><span class=\"token comment\">/*0b10*/</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>point<span class=\"token operator\">&amp;</span><span class=\"token number\">0x3f</span><span class=\"token comment\">/*0b00111111*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    resArr<span class=\"token punctuation\">[</span>resPos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xef</span><span class=\"token comment\">/*0b11101111*/</span><span class=\"token punctuation\">;</span> resArr<span class=\"token punctuation\">[</span>resPos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xbf</span><span class=\"token comment\">/*0b10111111*/</span><span class=\"token punctuation\">;</span>\n                    resArr<span class=\"token punctuation\">[</span>resPos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xbd</span><span class=\"token comment\">/*0b10111101*/</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>point <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0x007f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                resArr<span class=\"token punctuation\">[</span>resPos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x0</span><span class=\"token comment\">/*0b0*/</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> point<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>point <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0x07ff</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                resArr<span class=\"token punctuation\">[</span>resPos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x6</span><span class=\"token comment\">/*0b110*/</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>point<span class=\"token operator\">&gt;&gt;&gt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                resArr<span class=\"token punctuation\">[</span>resPos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x2</span><span class=\"token comment\">/*0b10*/</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>point<span class=\"token operator\">&amp;</span><span class=\"token number\">0x3f</span><span class=\"token comment\">/*0b00111111*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                resArr<span class=\"token punctuation\">[</span>resPos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0xe</span><span class=\"token comment\">/*0b1110*/</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>point<span class=\"token operator\">&gt;&gt;&gt;</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                resArr<span class=\"token punctuation\">[</span>resPos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x2</span><span class=\"token comment\">/*0b10*/</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>    <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>point<span class=\"token operator\">&gt;&gt;&gt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0x3f</span><span class=\"token comment\">/*0b00111111*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                resArr<span class=\"token punctuation\">[</span>resPos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x2</span><span class=\"token comment\">/*0b10*/</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>    <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>point<span class=\"token operator\">&amp;</span><span class=\"token number\">0x3f</span><span class=\"token comment\">/*0b00111111*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Uint8Array <span class=\"token operator\">!==</span> <span class=\"token string\">\"undefined\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> resArr<span class=\"token punctuation\">.</span><span class=\"token function\">subarray</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> resPos <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// else // IE 6-9</span>\n        resArr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> resPos <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// trim off extra weight</span>\n        <span class=\"token keyword\">return</span> resArr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toString</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token string\">\"[object TextEncoder]\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Object.defineProperty only works on DOM prototypes in IE8</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span><span class=\"token string\">\"encoding\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">;</span>\n                           <span class=\"token keyword\">else</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Illegal invocation\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*IE6-8 fallback*/</span> <span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>encoding <span class=\"token operator\">=</span> <span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Symbol<span class=\"token operator\">!==</span><span class=\"token string\">\"undefined\"</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">TextEncoder</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>toStringTag<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"TextEncoder\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Source: <a href=\"https://github.com/anonyco/FastestSmallestTextEncoderDecoder\" class=\"external\" rel=\" noopener\">https://github.com/anonyco/FastestSmallestTextEncoderDecoder</a></p>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://encoding.spec.whatwg.org/#interface-textencoder","title":"Encoding"}],"query":"api.TextEncoder"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.TextEncoder","dataURL":"/zh-CN/docs/Web/API/TextEncoder/bcd.json"}},{"type":"prose","value":{"id":"参见","title":"参见","isH3":false,"content":"<ul>\n  <li>The <a href=\"/zh-CN/docs/Web/API/TextDecoder\"><code>TextDecoder</code></a> interface describing the inverse operation.</li>\n  <li><a href=\"/zh-CN/docs/Mozilla/Add-ons/Code_snippets/StringView\"><code>StringView</code></a> – a C-like representation of strings based on typed arrays</li>\n  <li>A <a href=\"https://github.com/inexorabletash/text-encoding\" class=\"external\" rel=\" noopener\">shim</a> allowing to use this interface in browsers that don't support it.</li>\n  <li><a href=\"/zh-CN/docs/Mozilla/Tech/XPCOM/Language_Bindings/Components.utils.importGlobalProperties\" class=\"page-not-created\" title=\"This is a link to an unwritten page\"><code>Components.utils.importGlobalProperties</code></a></li>\n  <li><a href=\"https://nodejs.org/api/util.html#util_class_util_textencoder\" class=\"external\" rel=\" noopener\">Node.js supports global export from v11.0.0</a></li>\n</ul>"}}],"toc":[{"text":"例子","id":"例子"},{"text":"构造器","id":"构造器"},{"text":"属性","id":"属性"},{"text":"方法","id":"方法"},{"text":"Polyfill","id":"polyfill"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"参见","id":"参见"}],"summary":"TextEncoder 接受代码点流作为输入，并提供 UTF-8 字节流作为输出。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"TextEncoder","locale":"en-US","native":"English (US)"},{"title":"TextEncoder","locale":"fr","native":"Français"},{"title":"TextEncoder","locale":"ja","native":"日本語"}],"source":{"folder":"zh-cn/web/api/textencoder","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/textencoder/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/TextEncoder","title":"TextEncoder"}],"pageTitle":"TextEncoder - Web API 接口参考 | MDN","noIndexing":false}}