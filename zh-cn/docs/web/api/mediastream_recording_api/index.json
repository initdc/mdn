{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"MediaStream Recording API","mdn_url":"/zh-CN/docs/Web/API/MediaStream_Recording_API","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/MediaStream_Recording_API\">MediaStream Recording API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>指南</summary><ol><li><a href=\"/zh-CN/docs/Web/API/MediaStream_Recording_API/Using_the_MediaStream_Recording_API\">Using the MediaStream Recording API</a></li><li><a href=\"/zh-CN/docs/Web/API/MediaStream_Recording_API/Recording_a_media_element\">Recording a media element</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>接口</summary><ol><li><a href=\"/zh-CN/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a></li><li><a href=\"/zh-CN/docs/Web/API/MediaRecorderErrorEvent\"><code>MediaRecorderErrorEvent</code></a></li><li><a href=\"/zh-CN/docs/Web/API/BlobEvent\"><code>BlobEvent</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><strong>MediaStream Recording API</strong> 有时简称为<em>Media Recording API</em> 或者 <em>MediaRecorder API</em>, 与 <a href=\"/zh-CN/docs/Web/API/Media_Capture_and_Streams_API\">Media Capture and Streams API</a> 和 <a href=\"/zh-CN/docs/Web/API/WebRTC_API\">WebRTC API</a> 密切相关。MediaStream Recording API 使得捕获通过 <a href=\"/zh-CN/docs/Web/API/MediaStream\"><code>MediaStream</code></a> 或者<a href=\"/zh-CN/docs/Web/API/HTMLMediaElement\"><code>HTMLMediaElement</code></a> 对象产生的用于分析、加工或者保存到硬盘的数据成为可能。它也非常容易让人们使用。<p></p>"}},{"type":"prose","value":{"id":"基本概念","title":"基本概念","isH3":false,"content":"<p>MediaStream Recording API 由一个主接口<a href=\"/zh-CN/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a>组成，这个接口负责的所有工作是从<a href=\"/zh-CN/docs/Web/API/MediaStream\"><code>MediaStream</code></a>获取数据并将其传递给你进行处理。数据通过一系列<code><a href=\"/zh-CN/docs/Web/Reference/Events/dataavailable\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">dataavailable</a></code>事件传递，这些数据已经成为你创建 <code>MediaRecorder</code> 时所声明的格式。然后，您可以进一步处理数据，或者根据需要将其写入文件。</p>"}},{"type":"prose","value":{"id":"录制过程概述","title":"录制过程概述","isH3":true,"content":"<p>记录一个流的过程是非常容易的：</p>\n<ol>\n  <li>建立一个 <a href=\"/zh-CN/docs/Web/API/MediaStream\"><code>MediaStream</code></a>或者<a href=\"/zh-CN/docs/Web/API/HTMLMediaElement\"><code>HTMLMediaElement</code></a> (以 <a href=\"/zh-CN/docs/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a> 或 <a href=\"/zh-CN/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a> 元素的形式) 来充当媒体数据的源。</li>\n  <li>创建一个 <a href=\"/zh-CN/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a> 对象，指定源以及任何有需求的的选项 (比如容器的 MIME 类型或它轨道所需的比特率).</li>\n  <li>给 <code><a href=\"/zh-CN/docs/Web/Reference/Events/dataavailable\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">dataavailable</a></code> 事件设置<a href=\"/zh-CN/docs/Web/API/MediaRecorder/dataavailable_event\"><code>MediaRecorder.ondataavailable</code></a> 事件处理函数; 会在数据可利用时候调用。</li>\n  <li>一旦媒体源播放，你已经准备好录制，使用 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/start\"><code>MediaRecorder.start()</code> <small>(en-US)</small></a> 开始录制。</li>\n  <li><code><a href=\"/zh-CN/docs/Web/Reference/Events/dataavailable\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">dataavailable</a></code> 事件处理函数正如你所愿的在每次数据准备好时调用; 这个事件有一个值为包含媒体数据的<a href=\"/zh-CN/docs/Web/API/Blob\"><code>Blob</code></a> 类型的 <code>data</code> 属性。你可以强制 <code>dataavailable</code> 事件发生，因此会给你传递最新的声音以至于可以让你过滤、保存或者做一些其他的事情。</li>\n  <li>当源媒体停止播放时候，录制自动结束。</li>\n  <li>你可以随时结束录制通过使用 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/stop\"><code>MediaRecorder.stop()</code> <small>(en-US)</small></a>.</li>\n</ol>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 单单使用包含已经录制好媒体切片的<a href=\"/zh-CN/docs/Web/API/Blob\"><code>Blob</code></a>s 将大可不能单独播放。媒体在重放之前需要重新组装。</p>\n</div>\n<p>如果在录制过程中出错，<code><a href=\"/en-US/docs/Web/API/Element/error_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">error (en-US)</a></code> 事件将会传给<code>MediaRecorder</code>. 你可以设置<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/error_event\"><code>onerror</code> <small>(en-US)</small></a>去监听 <code>error</code> 事件。</p>\n<p>例子中，我们使用 Canvas 作为<a href=\"/zh-CN/docs/Web/API/MediaStream\"><code>MediaStream</code></a>的源，在 9 秒后停止录音。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Optional frames per second argument.</span>\n<span class=\"token keyword\">var</span> stream <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">captureStream</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> recordedChunks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">mimeType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"video/webm; codecs=vp9\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmediaRecorder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaRecorder</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmediaRecorder<span class=\"token punctuation\">.</span>ondataavailable <span class=\"token operator\">=</span> handleDataAvailable<span class=\"token punctuation\">;</span>\nmediaRecorder<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">handleDataAvailable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data-available\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>size <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    recordedChunks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>recordedChunks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">download</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">download</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span>recordedChunks<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"video/webm\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  a<span class=\"token punctuation\">.</span>style <span class=\"token operator\">=</span> <span class=\"token string\">\"display: none\"</span><span class=\"token punctuation\">;</span>\n  a<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> url<span class=\"token punctuation\">;</span>\n  a<span class=\"token punctuation\">.</span>download <span class=\"token operator\">=</span> <span class=\"token string\">\"test.webm\"</span><span class=\"token punctuation\">;</span>\n  a<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">revokeObjectURL</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// demo: to download after 9sec</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stopping\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  mediaRecorder<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"检查_and_控制记录器的状态","title":"检查 and 控制记录器的状态","isH3":true,"content":"<p>你也可以使用 <code>MediaRecorder</code> 对象的属性去决定录制过程的状态，用 <a href=\"/zh-CN/docs/Web/API/MediaRecorder/pause\" title=\"pause()\"><code>pause()</code></a> 和 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorder/resume\"><code>resume()</code> <small>(en-US)</small></a> 方法暂停或者继续媒体源的录制。</p>\n<p>如果你需要检查一个特殊的 MIME 类型是否被支持，使用<a href=\"/zh-CN/docs/Web/API/MediaRecorder/isTypeSupported\"><code>MediaRecorder.isTypeSupported()</code></a>.</p>"}},{"type":"prose","value":{"id":"检查潜在的输入源","title":"检查潜在的输入源","isH3":true,"content":"<p>如果你的目标是记录摄像头或麦克风输入，您可能希望在构建 <code>MediaRecorder</code> 之前检查可用的输入设备。这时，你需要调用 <a href=\"/zh-CN/docs/Web/API/MediaDevices/enumerateDevices\" title=\"navigator.mediaDevices.enumerateDevices()\"><code>navigator.mediaDevices.enumerateDevices()</code></a> 来得到可使用的媒体设备。你可以检查此列表，发现潜在的设备，甚至在有需要的时候过滤掉设备。</p>\n<p>在这块代码中，<code>enumerateDevices()</code> 被用来检查可利用的设备，找到那些音频输入设备，创建<a href=\"/zh-CN/docs/Web/HTML/Element/option\"><code>&lt;option&gt;</code></a> 元素，之后添加到<a href=\"/zh-CN/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a>元素，代表输入源选择器 .</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">enumerateDevices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">devices</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  devices<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">device</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> menu <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inputdevices\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">==</span> <span class=\"token string\">\"audioinput\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"option\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      item<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> device<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">;</span>\n      item<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> device<span class=\"token punctuation\">.</span>deviceId<span class=\"token punctuation\">;</span>\n      menu<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>类似的代码可以用来让用户限制他们希望使用的设备。</p>"}},{"type":"prose","value":{"id":"更多信息","title":"更多信息","isH3":true,"content":"<p>更多关于 MediaStream Recording API 的使用，查看 <a href=\"/zh-CN/docs/Web/API/MediaStream_Recording_API/Using_the_MediaStream_Recording_API\">Using the MediaStream Recording API</a>, 这个显示了如何使用 API 来记录音频剪辑。另一篇文章，<a href=\"/en-US/docs/Web/API/MediaStream_Recording_API/Recording_a_media_element\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Recording a media element (en-US)</a>, 介绍了如何从 <a href=\"/zh-CN/docs/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a> 或<a href=\"/zh-CN/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a> 元素 接收信息流和如何使用接收到的信息流（这个案例中，接收、存到硬盘）。</p>"}},{"type":"prose","value":{"id":"参考","title":"参考","isH3":false,"content":"<dl>\n  <dt id=\"blobevent_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/BlobEvent\"><code>BlobEvent</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Each time a chunk of media data is finished being recorded, it's delivered to consumers in <a href=\"/zh-CN/docs/Web/API/Blob\"><code>Blob</code></a> form using a <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/BlobEvent\"><code>BlobEvent</code> <small>(en-US)</small></a> of type <code>dataavailable</code>.</p>\n  </dd>\n  <dt id=\"mediarecorder\"><a href=\"/zh-CN/docs/Web/API/MediaRecorder\"><code>MediaRecorder</code></a></dt>\n  <dd>\n    <p>The primary interface that implements the MediaStream Recording API.</p>\n  </dd>\n  <dt id=\"mediarecordererrorevent_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorderErrorEvent\"><code>MediaRecorderErrorEvent</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>The interface that represents errors thrown by the MediaStream Recording API. Its <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaRecorderErrorEvent/error\"><code>error</code> <small>(en-US)</small></a> property is a <a href=\"/zh-CN/docs/Web/API/DOMException\"><code>DOMException</code></a> that specifies that error occurred.</p>\n  </dd>\n</dl>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/mediacapture-record/#mediarecorder-api","title":"MediaStream Recording"}],"query":"api.MediaRecorder"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.MediaRecorder","dataURL":"/zh-CN/docs/Web/API/MediaStream_Recording_API/bcd.json"}},{"type":"prose","value":{"id":"参阅","title":"参阅","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/MediaStream_Recording_API/Using_the_MediaStream_Recording_API\">Using the MediaStream Recording API</a></li>\n  <li><a href=\"/en-US/docs/Web/API/MediaStream_Recording_API/Recording_a_media_element\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Recording a media element (en-US)</a></li>\n  <li><a href=\"https://simpl.info/mediarecorder/\" class=\"external\" rel=\" noopener\">simpl.info MediaStream Recording demo</a>, by <a href=\"https://twitter.com/sw12\" class=\"external\" rel=\" noopener\">Sam Dutton</a></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaDevices/getUserMedia\"><code>navigator.mediaDevices.getUserMedia()</code> <small>(en-US)</small></a></li>\n  <li><a href=\"https://addpipe.com/blog/mediarecorder-api/\" class=\"external\" rel=\" noopener\">HTML5’s Media Recorder API in Action on Chrome and Firefox</a></li>\n  <li><a href=\"https://github.com/ai/audio-recorder-polyfill\" class=\"external\" rel=\" noopener\">MediaRecorder polyfill</a> for Safari and Edge</li>\n  <li><a href=\"https://github.com/chrisjohndigital/TutorRoom\" class=\"external\" rel=\" noopener\">TutorRoom</a>: HTML5 video capture/playback/download using getUserMedia and the MediaRecorder API (<a href=\"https://github.com/chrisjohndigital/TutorRoom\" class=\"external\" rel=\" noopener\">source on GitHub</a>)</li>\n  <li><a href=\"https://www.fingerspell.org/\" class=\"external\" rel=\" noopener\">FingerSpell</a>: Sign Language Fingerspelling practice using getUserMedia and the MediaRecorder API to create and download recordings, MediaRecorder API supported desktop browsers only <a href=\"https://github.com/chrisjohndigital/CameraCaptureJS\" class=\"external\" rel=\" noopener\">(source on GitHub</a>)</li>\n  <li><a href=\"https://codepen.io/anon/pen/gpmPzm\" class=\"external\" rel=\" noopener\">Simple video recording demo</a></li>\n  <li><a href=\"https://quickblox.github.io/javascript-media-recorder/sample/\" class=\"external\" rel=\" noopener\">Advanced media stream recorder sample</a></li>\n  <li><a href=\"https://github.com/chrisjohndigital/OpenLang\" class=\"external\" rel=\" noopener\">OpenLang</a>: HTML5 video language lab web application using MediaDevices and the MediaStream Recording API for video recording (<a href=\"https://github.com/chrisjohndigital/OpenLang\" class=\"external\" rel=\" noopener\">source on GitHub</a>)</li>\n</ul>"}}],"toc":[{"text":"基本概念","id":"基本概念"},{"text":"参考","id":"参考"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"参阅","id":"参阅"}],"summary":"MediaStream Recording API 由一个主接口MediaRecorder组成，这个接口负责的所有工作是从MediaStream获取数据并将其传递给你进行处理。数据通过一系列dataavailable事件传递，这些数据已经成为你创建 MediaRecorder 时所声明的格式。然后，您可以进一步处理数据，或者根据需要将其写入文件。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"MediaStream Recording API","locale":"en-US","native":"English (US)"},{"title":"MediaStream Recording API","locale":"ja","native":"日本語"},{"title":"MediaStream Recording API","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/api/mediastream_recording_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/mediastream_recording_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/MediaStream_Recording_API","title":"MediaStream Recording API"}],"pageTitle":"MediaStream Recording API - Web API 接口参考 | MDN","noIndexing":false}}