{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"ReadableStreamDefaultController","mdn_url":"/zh-CN/docs/Web/API/ReadableStreamDefaultController","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Streams_API\">Streams API</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultController\"><code>ReadableStreamDefaultController</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultController/desiredSize\"><code>desiredSize</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultController/close\"><code>close()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultController/enqueue\"><code>enqueue()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultController/error\"><code>error()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Streams 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/ByteLengthQueuingStrategy\"><code>ByteLengthQueuingStrategy</code></a></li><li><a href=\"/zh-CN/docs/Web/API/CountQueuingStrategy\"><code>CountQueuingStrategy</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableByteStreamController\"><code>ReadableByteStreamController</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableStreamBYOBReader\"><code>ReadableStreamBYOBReader</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/ReadableStreamBYOBRequest\"><code>ReadableStreamBYOBRequest</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultReader\"><code>ReadableStreamDefaultReader</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Response/body\"><code>Response.body</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WritableStream\"><code>WritableStream</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WritableStreamDefaultController\"><code>WritableStreamDefaultController</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WritableStreamDefaultWriter\"><code>WritableStreamDefaultWriter</code></a></li><li><a href=\"/zh-CN/docs/Web/API/fetch\"><code>fetch()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/zh-CN/docs/Web/API/Streams_API\">流操作 API</a> 中的 <strong><code>ReadableStreamDefaultController</code></strong> 接口是一个控制器，该控制器允许控制 <a href=\"/zh-CN/docs/Web/API/ReadableStream\"><code>ReadableStream</code></a> 的状态和内部队列。 默认控制器用于不是字节流的流。</p>"}},{"type":"prose","value":{"id":"构造函数","title":"构造函数","isH3":false,"content":"<p>无。<code>ReadableStreamDefaultController</code> 实例会在构造 <code>ReadableStream</code> 时被自动创造。</p>"}},{"type":"prose","value":{"id":"属性","title":"属性","isH3":false,"content":"<dl>\n  <dt id=\"readablestreamdefaultcontroller.desiredsize\"><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultController/desiredSize\"><code>ReadableStreamDefaultController.desiredSize</code></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回填充满流的内部队列所需要的大小。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"方法","title":"方法","isH3":false,"content":"<dl>\n  <dt id=\"readablestreamdefaultcontroller.close\"><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultController/close\"><code>ReadableStreamDefaultController.close()</code></a></dt>\n  <dd>\n    <p>关闭关联的流。</p>\n  </dd>\n  <dt id=\"readablestreamdefaultcontroller.enqueue\"><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultController/enqueue\"><code>ReadableStreamDefaultController.enqueue()</code></a></dt>\n  <dd>\n    <p>将给定的块排入关联的流。</p>\n  </dd>\n  <dt id=\"readablestreamdefaultcontroller.error\"><a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultController/error\"><code>ReadableStreamDefaultController.error()</code></a></dt>\n  <dd>\n    <p>导致未来任何与关联流交互都会出错。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<p>在下面的简单示例中，使用构造函数创建一个自定义的 <code>ReadableStream</code> （有关完整代码，参见我们的<a href=\"https://mdn.github.io/dom-examples/streams/simple-random-stream/\" class=\"external\" rel=\" noopener\">简单随机流展示</a>）。<code>start()</code> 函数每秒生成一个随机字符串并且将他们送入流中。<code>cancel()</code> 函数用于在 <a href=\"/zh-CN/docs/Web/API/ReadableStream/cancel\"><code>ReadableStream.cancel()</code></a> 被调用时停止随机字符串的生成。</p>\n<p>请注意，<a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultController\" aria-current=\"page\"><code>ReadableStreamDefaultController</code></a> 对象应作为参数传递给 <code>start()</code> 和 <code>pull()</code> 函数。</p>\n<p>当按下按钮时，将停止生成，使用 <a href=\"/zh-CN/docs/Web/API/ReadableStreamDefaultController/close\"><code>ReadableStreamDefaultController.close()</code></a> 关闭流，并运行另一个将数据读回流中的函数。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    interval <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> string <span class=\"token operator\">=</span> <span class=\"token function\">randomChars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 将随机字符串添加到流</span>\n      controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 在屏幕上展示</span>\n      <span class=\"token keyword\">let</span> listItem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      listItem<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> string<span class=\"token punctuation\">;</span>\n      list1<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>listItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">fetchStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      controller<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">pull</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 在这个例子中不使用pull</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 如果取消了 reader，则会调用该函数，</span>\n    <span class=\"token comment\">// 所以我们应该在这里停止生成字符串</span>\n    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://streams.spec.whatwg.org/#rs-default-controller-class","title":"Streams Standard"}],"query":"api.ReadableStreamDefaultController"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.ReadableStreamDefaultController","dataURL":"/zh-CN/docs/Web/API/ReadableStreamDefaultController/bcd.json"}}],"toc":[{"text":"构造函数","id":"构造函数"},{"text":"属性","id":"属性"},{"text":"方法","id":"方法"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"}],"summary":"流操作 API 中的 ReadableStreamDefaultController 接口是一个控制器，该控制器允许控制 ReadableStream 的状态和内部队列。 默认控制器用于不是字节流的流。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"ReadableStreamDefaultController","locale":"en-US","native":"English (US)"},{"title":"ReadableStreamDefaultController","locale":"ja","native":"日本語"}],"source":{"folder":"zh-cn/web/api/readablestreamdefaultcontroller","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/readablestreamdefaultcontroller/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/ReadableStreamDefaultController","title":"ReadableStreamDefaultController"}],"pageTitle":"ReadableStreamDefaultController - Web API 接口参考 | MDN","noIndexing":false}}