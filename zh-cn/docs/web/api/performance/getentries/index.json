{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Performance.getEntries()","mdn_url":"/zh-CN/docs/Web/API/Performance/getEntries","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Performance_Timeline\">Performance Timeline</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/Performance\"><code>Performance</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/API/Performance/navigation\"><code>navigation</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Performance/timeOrigin\"><code>timeOrigin</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/API/Performance/timing\"><code>timing</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Performance/clearMarks\"><code>clearMarks()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Performance/clearMeasures\"><code>clearMeasures()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Performance/clearResourceTimings\"><code>clearResourceTimings()</code></a></li><li><em><code>getEntries()</code></em></li><li><a href=\"/zh-CN/docs/Web/API/Performance/getEntriesByName\"><code>getEntriesByName()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Performance/getEntriesByType\"><code>getEntriesByType()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Performance/mark\"><code>mark()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Performance/measure\"><code>measure()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Performance/now\"><code>now()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Performance/setResourceTimingBufferSize\"><code>setResourceTimingBufferSize()</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/Performance/toJSON\"><code>toJSON()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>事件</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Performance/resourcetimingbufferfull_event\"><code>resourcetimingbufferfull</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>继承</summary><ol><li><a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Performance Timeline API 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/PerformanceEntry\"><code>PerformanceEntry</code></a></li><li><a href=\"/zh-CN/docs/Web/API/PerformanceObserver\"><code>PerformanceObserver</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PerformanceObserverEntryList\"><code>PerformanceObserverEntryList</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/PerformanceResourceTiming\"><code>PerformanceResourceTiming</code></a></li><li><a href=\"/zh-CN/docs/Web/API/performance_property\"><code>performance_property</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>getEntries()</code></strong> 对于给定的 filter，此方法返回 <a href=\"/zh-CN/docs/Web/API/PerformanceEntry\"><code>PerformanceEntry</code></a> 对象数组。数组成员（入口）可以在显式的时间点用 performance <em>marks 或 measures</em> 来创建 (例如调用<a href=\"/zh-CN/docs/Web/API/Performance/mark\" title=\"mark()\"><code>mark()</code></a> 方法) .</p>\n<p>此方法暴露给<a href=\"/zh-CN/docs/Web/API/Window\"><code>Window</code></a> 和 <a href=\"/zh-CN/docs/Web/API/Worker\"><code>Worker</code></a>接口。</p>"}},{"type":"prose","value":{"id":"语法","title":"语法","isH3":false,"content":"<p>取全部：</p>\n<pre class=\"notranslate\">entries = window.performance.getEntries();\nentries = window.performance.getEntries(PerformanceEntryFilterOptions);\n</pre>\n<p>取特定：</p>\n<pre class=\"notranslate\">entries = performance.getEntries({name: \"entry_name\", entryType: \"mark\"});\n</pre>"}},{"type":"prose","value":{"id":"参数","title":"参数","isH3":true,"content":"<dl>\n  <dt id=\"performanceentryfilteroptions\">PerformanceEntryFilterOptions <span class=\"badge inline optional\">可选</span></dt>\n  <dd>\n    <p><code>PerformanceEntryFilterOptions</code> 是一个带有以下键值的字典：</p>\n    <ul>\n      <li><code>\"name\"</code>, performance entry. 的名字</li>\n      <li><code>\"entryType\"</code>, entry 类型。合法的 entry 类型可以从<a href=\"/zh-CN/docs/Web/API/PerformanceEntry/entryType\"><code>PerformanceEntry.entryType</code></a> 方法获取。</li>\n      <li><code>\"initiatorType\"</code>, 初始化资源的类型 (例如一个 HTML element). 其取值被 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PerformanceResourceTiming/initiatorType\"><code>PerformanceResourceTiming.initiatorType</code> <small>(en-US)</small></a> 接口所定义。</li>\n    </ul>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"返回值","title":"返回值","isH3":true,"content":"<dl>\n  <dt id=\"entries\">entries</dt>\n  <dd>\n    <p>一个由符合 filter 条件的<a href=\"/zh-CN/docs/Web/API/PerformanceEntry\"><code>PerformanceEntry</code></a> 对象构成的数组 . 数组成员按 PerformanceEntry.<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/PerformanceEntry/startTime\"><code>startTime</code> <small>(en-US)</small></a>时间顺序排列 . 如果没有符合 filter 条件的对象，那么返回空数组。如果不带任何参数，返回全部 entries.</p>\n  </dd>\n</dl>"}},{"type":"specifications","value":{"title":"Example","id":"example","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/performance-timeline/#dom-performance-getentries","title":"Performance Timeline"}],"query":"api.Performance.getEntries"}},{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">use_PerformanceEntry_methods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PerformanceEntry tests ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>performance<span class=\"token punctuation\">.</span>mark <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"... performance.mark Not supported\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Create some performance entries via the mark() method</span>\n  performance<span class=\"token punctuation\">.</span><span class=\"token function\">mark</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Begin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">do_work</span><span class=\"token punctuation\">(</span><span class=\"token number\">50000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  performance<span class=\"token punctuation\">.</span><span class=\"token function\">mark</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"End\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  performance<span class=\"token punctuation\">.</span><span class=\"token function\">mark</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Begin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">do_work</span><span class=\"token punctuation\">(</span><span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  performance<span class=\"token punctuation\">.</span><span class=\"token function\">mark</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"End\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">do_work</span><span class=\"token punctuation\">(</span><span class=\"token number\">200000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  performance<span class=\"token punctuation\">.</span><span class=\"token function\">mark</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"End\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Use getEntries() to iterate through the each entry</span>\n  <span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">getEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> p<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Entry[\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">check_PerformanceEntry</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Use getEntries(name, entryType) to get specific entries</span>\n  p <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">getEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Begin\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">entryType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mark\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> p<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Begin[\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">check_PerformanceEntry</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Use getEntriesByType() to get all \"mark\" entries</span>\n  p <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">getEntriesByType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mark\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> p<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Mark only entry[\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"]: name = \"</span> <span class=\"token operator\">+</span> p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span>\n         <span class=\"token string\">\"; startTime = \"</span> <span class=\"token operator\">+</span> p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>startTime <span class=\"token operator\">+</span>\n         <span class=\"token string\">\"; duration  = \"</span> <span class=\"token operator\">+</span> p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Use getEntriesByName() to get all \"mark\" entries named \"Begin\"</span>\n  p <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">getEntriesByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Begin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mark\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> p<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Mark and Begin entry[\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"]: name = \"</span> <span class=\"token operator\">+</span> p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span>\n         <span class=\"token string\">\"; startTime = \"</span> <span class=\"token operator\">+</span> p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>startTime <span class=\"token operator\">+</span>\n         <span class=\"token string\">\"; duration  = \"</span> <span class=\"token operator\">+</span> p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//entryType,name,initiatorType  Examples</span>\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">getEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> ptyps <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">.</span>entryType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//Array(94) [ \"navigation\", \"resource\", \"resource\", \"resource\", \"resource\", \"resource\", \"resource\", \"resource\", \"resource\", \"resource\", … ]</span>\n\n<span class=\"token keyword\">var</span> pnms <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//Array(94) [ \"document\", \"https://csdnimg.cn/public/static/css/avatar.css\", \"https://csdnimg.cn/public/common/libs/jquery/jquery-1.9.1.min.js\", \"https://csdnimg.cn/rabbit/exposure-click/main-1.0.5.js\", \"https://csdnimg.cn/release/phoenix/production/main-e96db8abdf.js\", \"https://csdnimg.cn/pubfooter/js/tracking-1.0.2.js\", \"https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js\", \"https://csdnimg.cn/release/phoenix/production/markdown_views-ea0013b516.css\", \"https://csdnimg.cn/search/baidu_search-1.1.2.js?v=201802071056&amp;autorun=true&amp;install=true&amp;keyword=%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F\", \"https://csdnimg.cn/release/phoenix/production/main-f869aa95a4.css\", … ]</span>\n\n<span class=\"token keyword\">var</span> pityps <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">.</span>initiatorType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//Array(94) [ \"navigation\", \"link\", \"script\", \"script\", \"script\", \"script\", \"script\", \"link\", \"script\", \"link\", … ]</span>\n\nSpecifications\n</code></pre></div>"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.Performance.getEntries","dataURL":"/zh-CN/docs/Web/API/Performance/getEntries/bcd.json"}}],"toc":[{"text":"语法","id":"语法"},{"text":"Example","id":"example"},{"text":"浏览器兼容性","id":"浏览器兼容性"}],"summary":"getEntries() 对于给定的 filter，此方法返回 PerformanceEntry 对象数组。数组成员（入口）可以在显式的时间点用 performance marks 或 measures 来创建 (例如调用mark() 方法) .","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"performance.getEntries()","locale":"en-US","native":"English (US)"},{"title":"performance.getEntries()","locale":"fr","native":"Français"},{"title":"performance.getEntries()","locale":"ja","native":"日本語"}],"source":{"folder":"zh-cn/web/api/performance/getentries","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/performance/getentries/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/Performance","title":"Performance"},{"uri":"/zh-CN/docs/Web/API/Performance/getEntries","title":"Performance.getEntries()"}],"pageTitle":"Performance.getEntries() - Web API 接口参考 | MDN","noIndexing":false}}