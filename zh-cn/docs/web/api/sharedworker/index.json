{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"SharedWorker","mdn_url":"/zh-CN/docs/Web/API/SharedWorker","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Web_Workers_API\">Web Workers API</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/SharedWorker\"><code>SharedWorker</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>构造函数</summary><ol><li><a href=\"/zh-CN/docs/Web/API/SharedWorker/SharedWorker\"><code>SharedWorker()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorker/port\"><code>port</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorker/error_event\"><code>SharedWorker: error event</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>继承</summary><ol><li><a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Web Workers API 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/DedicatedWorkerGlobalScope\"><code>DedicatedWorkerGlobalScope</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ServiceWorker\"><code>ServiceWorker</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorkerGlobalScope\"><code>SharedWorkerGlobalScope</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/Worker\"><code>Worker</code></a></li><li><a href=\"/zh-CN/docs/Web/API/WorkerGlobalScope\"><code>WorkerGlobalScope</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WorkerLocation\"><code>WorkerLocation</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WorkerNavigator\"><code>WorkerNavigator</code> <small>(en-US)</small></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p><strong><code>SharedWorker</code></strong> 接口代表一种特定类型的 worker，可以从几个浏览上下文中<em>访问</em>，例如几个窗口、iframe 或其他 worker。它们实现一个不同于普通 worker 的接口，具有不同的全局作用域，<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorkerGlobalScope\"><code>SharedWorkerGlobalScope</code> <small>(en-US)</small></a> 。<p></p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 如果要使 <strong>SharedWorker</strong> 连接到多个不同的页面，这些页面必须是同源的（相同的协议、host 以及端口）。</p>\n</div>"}},{"type":"prose","value":{"id":"构造函数","title":"构造函数","isH3":false,"content":"<dl>\n  <dt id=\"sharedworker\"><a href=\"/zh-CN/docs/Web/API/SharedWorker/SharedWorker\" title=\"SharedWorker()\"><code>SharedWorker()</code></a></dt>\n  <dd>\n    <p>创建一个执行指定 url 脚本的共享 web worker。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"属性","title":"属性","isH3":false,"content":"<p><em>继承自其父类 <a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a>，并实现 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Worker\"><code>AbstractWorker</code> <small>(en-US)</small></a> 中的属性。</em></p>\n<dl>\n  <dt id=\"abstractworker.onerror_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Worker/error_event\"><code>AbstractWorker.onerror</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>一个 <a href=\"/zh-CN/docs/Web/API/EventTarget/addEventListener\"><code>EventListener</code></a>，当 <a href=\"/zh-CN/docs/Web/API/ErrorEvent\"><code>ErrorEvent</code></a> 类型的 <code>error</code> 冒泡到 worker 时触发。</p>\n  </dd>\n  <dt id=\"sharedworker.port_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorker/port\"><code>SharedWorker.port</code> <small>(en-US)</small></a> <span title=\"该属性的值无法更改\" class=\"badge inline readonly\">只读 </span></dt>\n  <dd>\n    <p>返回一个 <a href=\"/zh-CN/docs/Web/API/MessagePort\"><code>MessagePort</code></a> 对象，该对象可以用来进行通信和对共享 worker 进行控制。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"方法","title":"方法","isH3":false,"content":"<p>继承自其<em>父类 <a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a>，并实现 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Worker\"><code>AbstractWorker</code> <small>(en-US)</small></a> 中的方法。</em></p>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<p>在这个 <a href=\"https://github.com/mdn/simple-shared-worker\" class=\"external\" rel=\" noopener\">shared worker</a> 例子中 (<a href=\"https://mdn.github.io/simple-shared-worker/\" class=\"external\" rel=\" noopener\">运行 shared worker</a>)，我们有两个 HTML 页面，每个页面中使用一些 JavaScript 来执行简单的计算。这些脚本使用相同的 shared worker 来执行计算 — 都可以访问这个 worker，即使脚本在不同窗口的两个页面内运行。</p>\n<p>下面的代码展示了如何通过 <a href=\"/zh-CN/docs/Web/API/SharedWorker/SharedWorker\" title=\"SharedWorker()\"><code>SharedWorker()</code></a> 方法来创建一个共享进程对象。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myWorker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SharedWorker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>然后两个脚本都通过 <a href=\"/zh-CN/docs/Web/API/MessagePort\"><code>MessagePort</code></a> 对象来访问 worker，这个对象用<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorker/port\"><code>SharedWorker.port</code> <small>(en-US)</small></a> 属性获得。如果已经用 addEventListener 监听了 onmessage 事件，则可以使用 <code>start()</code> 方法手动启动端口：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>myWorker<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>当启动端口时，两个脚本都会向 worker 发送消息，然后使用 <code>port.postMessage()</code>和 <code>port.onmessage</code> 处理从 worker 返回的消息：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>first<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onchange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    myWorker<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>second<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Message posted to worker'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  second<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onchange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    myWorker<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>second<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Message posted to worker'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  myWorker<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result1<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Message received from worker'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>在 worker 中我们使用 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SharedWorkerGlobalScope/connect_event\"><code>SharedWorkerGlobalScope.onconnect</code> <small>(en-US)</small></a> 处理程序连接到上面讨论的相同端口。可以在 <code><a href=\"/zh-CN/docs/Web/Reference/Events/connect\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">connect</a></code> 事件的 <code>ports</code> 属性中获取到与该 worker 相关联的端口 — 然后我们使用 <a href=\"/zh-CN/docs/Web/API/MessagePort\"><code>MessagePort</code></a> <code>start()</code> 方法来启动端口，然后 <code>onmessage</code> 处理程序处理来自主线程的消息。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function-variable function\">onconnect</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> port <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>ports<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    port<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> workerResult <span class=\"token operator\">=</span> <span class=\"token string\">'Result: '</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      port<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>workerResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    port<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Required when using addEventListener. Otherwise called implicitly by onmessage setter.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://html.spec.whatwg.org/multipage/workers.html#shared-workers-and-the-sharedworker-interface","title":"HTML Standard"}],"query":"api.SharedWorker"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.SharedWorker","dataURL":"/zh-CN/docs/Web/API/SharedWorker/bcd.json"}},{"type":"prose","value":{"id":"更多","title":"更多","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/Worker\"><code>Worker</code></a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers\">使用 web worker</a></li>\n</ul>"}}],"toc":[{"text":"构造函数","id":"构造函数"},{"text":"属性","id":"属性"},{"text":"方法","id":"方法"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"更多","id":"更多"}],"summary":"创建一个执行指定 url 脚本的共享 web worker。","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"SharedWorker","locale":"en-US","native":"English (US)"},{"title":"SharedWorker","locale":"fr","native":"Français"},{"title":"SharedWorker","locale":"ja","native":"日本語"},{"title":"SharedWorker","locale":"ko","native":"한국어"},{"title":"SharedWorker","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"SharedWorker","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/api/sharedworker","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/sharedworker/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/SharedWorker","title":"SharedWorker"}],"pageTitle":"SharedWorker - Web API 接口参考 | MDN","noIndexing":false}}