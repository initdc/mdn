{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"RTCPeerConnection.addTrack()","mdn_url":"/zh-CN/docs/Web/API/RTCPeerConnection/addTrack","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/WebRTC_API\">WebRTC API</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>构造函数</summary><ol><li><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/RTCPeerConnection\"><code>RTCPeerConnection()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/canTrickleIceCandidates\"><code>canTrickleIceCandidates</code></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/connectionState\"><code>connectionState</code></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/currentLocalDescription\"><code>currentLocalDescription</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/currentRemoteDescription\"><code>currentRemoteDescription</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/iceConnectionState\"><code>iceConnectionState</code></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/iceGatheringState\"><code>iceGatheringState</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/localDescription\"><code>localDescription</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/peerIdentity\"><code>peerIdentity</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/pendingLocalDescription\"><code>pendingLocalDescription</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/pendingRemoteDescription\"><code>pendingRemoteDescription</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/remoteDescription\"><code>remoteDescription</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/sctp\"><code>sctp</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/signalingState\"><code>signalingState</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/addIceCandidate\"><code>addIceCandidate()</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/addStream\"><code>addStream()</code> <small>(en-US)</small></a></li><li><em><code>addTrack()</code></em></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/addTransceiver\"><code>addTransceiver()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/close\"><code>close()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/createAnswer\"><code>createAnswer()</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/createDataChannel\"><code>createDataChannel()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/createOffer\"><code>createOffer()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/generateCertificate\"><code>generateCertificate() static function</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/getConfiguration\"><code>getConfiguration()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/getIdentityAssertion\"><code>getIdentityAssertion()</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/getReceivers\"><code>getReceivers()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/getSenders\"><code>getSenders()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/getStats\"><code>getStats()</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/getStreamById\"><code>getStreamById()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/getTransceivers\"><code>getTransceivers()</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/removeStream\"><code>removeStream()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/removeTrack\"><code>removeTrack()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/restartIce\"><code>restartIce()</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/setConfiguration\"><code>setConfiguration()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/setIdentityProvider\"><code>setIdentityProvider()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/setLocalDescription\"><code>setLocalDescription()</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/setRemoteDescription\"><code>setRemoteDescription()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>事件</summary><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/addstream_event\"><code>addstream</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/connectionstatechange_event\"><code>connectionstatechange</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/datachannel_event\"><code>datachannel</code></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/icecandidate_event\"><code>icecandidate</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/icecandidateerror_event\"><code>icecandidateerror</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/iceconnectionstatechange_event\"><code>iceconnectionstatechange</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/icegatheringstatechange_event\"><code>icegatheringstatechange</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/negotiationneeded_event\"><code>negotiationneeded</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/removestream_event\"><code>removestream</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/signalingstatechange_event\"><code>signalingstatechange</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/track_event\"><code>track</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>继承</summary><ol><li><a href=\"/zh-CN/docs/Web/API/EventTarget\"><code>EventTarget</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>WebRTC 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/MediaDevices/getUserMedia\"><code>MediaDevices.getUserMedia()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Navigator/mediaDevices\"><code>Navigator.mediaDevices</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCCertificate\"><code>RTCCertificate</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCDTMFSender\"><code>RTCDTMFSender</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCDTMFToneChangeEvent\"><code>RTCDTMFToneChangeEvent</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCDataChannelEvent\"><code>RTCDataChannelEvent</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCDtlsTransport\"><code>RTCDtlsTransport</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCErrorEvent\"><code>RTCErrorEvent</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCIceCandidate\"><code>RTCIceCandidate</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCIceTransport\"><code>RTCIceTransport</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnectionIceErrorEvent\"><code>RTCPeerConnectionIceErrorEvent</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnectionIceEvent\"><code>RTCPeerConnectionIceEvent</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpReceiver\"><code>RTCRtpReceiver</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpSender\"><code>RTCRtpSender</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCRtpTransceiver\"><code>RTCRtpTransceiver</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCSctpTransport\"><code>RTCSctpTransport</code> <small>(en-US)</small></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCSessionDescription\"><code>RTCSessionDescription</code></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCStatsReport\"><code>RTCStatsReport</code></a></li><li><a href=\"/zh-CN/docs/Web/API/RTCTrackEvent\"><code>RTCTrackEvent</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> 对象的 <strong><code>addTrack()</code></strong> 方法将一个新的媒体音轨添加到一组音轨中，这些音轨将被传输给另一个对等点。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 通过触发一个<code><a href=\"/zh-CN/docs/Web/Reference/Events/negotiationneeded\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">negotiationneeded</a></code>事件，向连接添加一个跟踪将触发重新协商。详情请参见<a href=\"/en-US/docs/Web/API/WebRTC_API/Signaling_and_video_calling#starting_negotiation\">Starting negotiation</a> in <a href=\"/en-US/docs/Web/API/WebRTC_API/Signaling_and_video_calling\">Signaling and video calling</a>。</p>\n</div>"}},{"type":"prose","value":{"id":"语法","title":"语法","isH3":false,"content":"<pre class=\"notranslate\">rtpSender = rtcPeerConnection.addTrack(track, stream...);\n</pre>"}},{"type":"prose","value":{"id":"参数","title":"参数","isH3":true,"content":"<dl>\n  <dt id=\"track\"><code>track</code></dt>\n  <dd>\n    <p>一个<a href=\"/zh-CN/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a>对象，表示要添加到对等连接的媒体轨道。</p>\n  </dd>\n  <dt id=\"stream\"><code>stream...</code> <span class=\"badge inline optional\">可选</span></dt>\n  <dd>\n    <p>一个或多个本地的<a href=\"/zh-CN/docs/Web/API/MediaStream\"><code>MediaStream</code></a>对象，该轨迹应添加到其中。</p>\n  </dd>\n</dl>\n<p>指定的 <strong><code>track</code></strong> 不一定已经是任何指定 <strong><code>streams</code></strong> 的一部分。相反，<strong><code>streams</code></strong> 只是在连接的接收端将轨迹分组在一起的一种方式，以确保它们是同步的。在连接的本地端添加到相同流的任何轨道都将位于远程端相同的流上。</p>"}},{"type":"prose","value":{"id":"返回值","title":"返回值","isH3":true,"content":"<p>将用于传输媒体数据的<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpSender\"><code>RTCRtpSender</code> <small>(en-US)</small></a>对象。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 每个 <strong><code>RTCRtpSender</code></strong> 都与<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpReceiver\"><code>RTCRtpReceiver</code> <small>(en-US)</small></a>配对，组成<a href=\"/zh-CN/docs/Web/API/RTCRtpTransceiver\"><code>RTCRtpTransceiver</code></a>。关联的接收方处于静默状态 (指示它不能发送数据包)，直到或除非远程对等方向接收方添加一个或多个流。</p>\n</div>"}},{"type":"prose","value":{"id":"异常","title":"异常","isH3":true,"content":"<dl>\n  <dt id=\"invalidaccesserror\"><code>InvalidAccessError</code></dt>\n  <dd>\n    <p>指定的轨道 (或它的所有底层流) 已经是<a href=\"/zh-CN/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a>的一部分。</p>\n  </dd>\n  <dt id=\"invalidstateerror\"><code>InvalidStateError</code></dt>\n  <dd>\n    <p><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a>被关闭。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"使用笔记","title":"使用笔记","isH3":false,"content":""}},{"type":"prose","value":{"id":"向多个流添加轨道","title":"向多个流添加轨道","isH3":true,"content":"<p>在 <strong><code>track</code></strong> 参数之后，您可以选择指定一个或多个<a href=\"/zh-CN/docs/Web/API/MediaStream\"><code>MediaStream</code></a>对象来添加**<code>track</code>**。只有轨道从一个点发送到另一个点，而不是一个媒体流。由于流是特定于每个对等点的，因此指定一个或多个流意味着另一个对等点将在连接的另一端自动创建一个相应的流 (或多个流)，然后自动将接收到的轨道添加到这些流中。</p>\n<h4 id=\"无流承载的轨道\">无流承载的轨道</h4>\n<p>如果没有指定媒体流，则轨道是无流的。这是完全可以接受的，尽管要由远程对等点决定将轨道插入到哪个流 (如果有的话)。当构建一个多类型的简单应用只有一个媒体流时，使用 <strong><code>addTrack()</code></strong> 是一个非常常用的办法。例如，如果您与远程对等点共享的只是带有音频轨道和视频轨道的单个流，那么您不需要管理流中的哪个轨道，所以您不妨让<strong>transceriver</strong>为您处理它。</p>\n<p>下面是一个使用<a href=\"/zh-CN/docs/Web/API/MediaDevices/getUserMedia\" title=\"getUserMedia()\"><code>getUserMedia()</code></a>从用户的摄像机和麦克风获取一个流，然后将流中的每条轨迹添加到对等连接，而不为每条轨迹指定一个流：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token function\">openCall</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> gumStream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span>\n                          <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> track <span class=\"token keyword\">of</span> gumStream<span class=\"token punctuation\">.</span><span class=\"token function\">getTracks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    pc<span class=\"token punctuation\">.</span><span class=\"token function\">addTrack</span><span class=\"token punctuation\">(</span>track<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>结果是一组没有流关联的跟踪被发送到远程对等点。远程对等点上的<code><a href=\"/zh-CN/docs/Web/Reference/Events/track\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">track</a></code>事件的处理程序将负责决定将每个跟踪添加到哪个流中，即使这意味着只是将它们全部添加到同一个流中。<a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/track_event\" title=\"ontrack\"><code>ontrack</code></a>方法如下：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> inboundStream <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\npc<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">ontrack</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">ev</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>streams <span class=\"token operator\">&amp;&amp;</span> ev<span class=\"token punctuation\">.</span>streams<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    videoElem<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> ev<span class=\"token punctuation\">.</span>streams<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>inboundStream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      inboundStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      videoElem<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> inboundStream<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    inboundStream<span class=\"token punctuation\">.</span><span class=\"token function\">addTrack</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>track<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>在这里，如果指定了流，则 <strong><code>track</code></strong> 事件处理程序将跟踪添加到事件指定的第一个流。否则，在第一次调用 <strong><code>ontrack</code></strong> 时，将创建一个新流并附加到视频元素，然后将音轨添加到新流中。从那时起，新的堆<strong>track</strong>被添加到这个流中。</p>\n<p>你也可以为每个接收到的<strong>track</strong>创建一个新的流：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>pc<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">ontrack</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">ev</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>streams <span class=\"token operator\">&amp;&amp;</span> ev<span class=\"token punctuation\">.</span>streams<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    videoElem<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> ev<span class=\"token punctuation\">.</span>streams<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> inboundStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaStream</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>track<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    videoElem<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> inboundStream<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"将track与特定的_stream_相关联\">将<strong>track</strong>与特定的 stream 相关联</h4>\n<p>通过指定一个流并允许<a href=\"/zh-CN/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a>为您创建流，流的跟踪关联将由 WebRTC 基础设施自动为您管理。这包括对收发器的<a href=\"/zh-CN/docs/Web/API/RTCRtpTransceiver/direction\" title=\"direction\"><code>direction</code></a> 的更改和被停止使用<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/removeTrack\"><code>removeTrack()</code> <small>(en-US)</small></a>。</p>\n<p>例如，考虑应用程序可能使用的这个函数，通过<a href=\"/zh-CN/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a>将设备的摄像头和麦克风输入流化为远程对等点：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">async</span> <span class=\"token function\">openCall</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> gumStream <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span>\n                          <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> track <span class=\"token keyword\">of</span> gumStream<span class=\"token punctuation\">.</span><span class=\"token function\">getTracks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    pc<span class=\"token punctuation\">.</span><span class=\"token function\">addTrack</span><span class=\"token punctuation\">(</span>track<span class=\"token punctuation\">,</span> gumStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>远程对等点然后可以使用一个看起来像这样的<code><a href=\"/zh-CN/docs/Web/Reference/Events/track\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">track</a></code>事件处理程序：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>pc<span class=\"token punctuation\">.</span>ontrack <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">streams</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>stream<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=&gt;</span> videoElem<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这将把视频元素的当前流设置为包含已添加到连接中的音轨的流。</p>"}},{"type":"prose","value":{"id":"重用发送方","title":"重用发送方","isH3":true,"content":"<p>这种方法可以返回一个新的 <strong><code>RTCRtpSender</code></strong>，或者在非常特殊的情况下，返回一个尚未用于传输数据的现有的兼容发送方。兼容的可重用 <strong><code>RTCRtpSender</code></strong> 实例满足以下条件：</p>\n<ul>\n  <li>没有与发送方关联的跟踪。</li>\n  <li>与发送方关联的{domxref(\"RTCRtpTransceiver\")}}有一个{domxref(\"RTCRtpReceiver\")}}，它的<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpReceiver/track\"><code>track</code> <small>(en-US)</small></a>属性指定了一个<a href=\"/zh-CN/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a>它的<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStreamTrack/kind\"><code>kind</code> <small>(en-US)</small></a>与调用 <strong><code>RTCPeerConnection.addTrack()</code></strong> 时指定的 track 参数的 kind 相同。这确保了收发器只能处理音频或视频，而不能同时处理二者。</li>\n  <li><strong><code>RTCRtpTransceiver</code></strong> 的<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpTransceiver/stopped\"><code>stopped</code> <small>(en-US)</small></a>属性为**<code>false</code>**。</li>\n  <li>正在考虑的 <strong><code>RTCRtpSender</code></strong> 从未被用于发送数据。如果收发器的<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpTransceiver/currentDirection\"><code>currentDirection</code> <small>(en-US)</small></a> 曾经是“<strong><code>sendrecv</code></strong>”或“<strong><code>sendonly</code></strong>”，发送方不能被重用。</li>\n</ul>\n<p>如果所有这些条件都满足，发送方会被重用，这将导致现有 <strong><code>RTCRtpSender</code></strong> 和它的 <strong><code>RTCRtpTransceiver</code></strong> 发生这些变化：</p>\n<ul>\n  <li><strong><code>RTCRtpSender</code></strong> 的<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpSender/track\"><code>track</code> <small>(en-US)</small></a>被设置为指定的 track。</li>\n  <li>发送方的相关流集被设置为传递到这个方法的流列表，<strong><code>stream…</code></strong></li>\n  <li>关联的<a href=\"/zh-CN/docs/Web/API/RTCRtpTransceiver\"><code>RTCRtpTransceiver</code></a>更新了它的当前方向，包括发送;如果它的当前值是“<strong><code>recvonly</code></strong>”，它就变成“<strong><code>sendrecv</code></strong>”，如果它的当前值是“<strong><code>inactive</code></strong>”，它就变成“<strong><code>sendonly</code></strong>”。</li>\n</ul>"}},{"type":"prose","value":{"id":"新发送方","title":"新发送方","isH3":true,"content":"<p>如果现有的发送方不存在可重用，则创建一个新的发送方。这也会导致必须存在的关联对象的创建。创建新发送方的过程会导致以下更改：</p>\n<ul>\n  <li>使用指定的 <strong><code>track</code></strong> 和 <strong><code>streams</code></strong> 集创建新的**<code>RTCRtpSender</code>**。</li>\n  <li>新<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpReceiver\"><code>RTCRtpReceiver</code> <small>(en-US)</small></a>被创建，新<a href=\"/zh-CN/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a>作为它的<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCRtpReceiver/track\"><code>track</code> <small>(en-US)</small></a> 属性 (不是调用 <strong><code>addTrack()</code></strong> 时指定作为参数的 track)。这跟踪的<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStreamTrack/kind\"><code>kind</code> <small>(en-US)</small></a>设置为与作为输入参数提供的音轨类型匹配。</li>\n  <li>将创建一个新的<a href=\"/zh-CN/docs/Web/API/RTCRtpTransceiver\"><code>RTCRtpTransceiver</code></a>，并与新的发送方和接收方关联。</li>\n  <li>新的 <strong><code>transceiver</code></strong> 的 <a href=\"/zh-CN/docs/Web/API/RTCRtpTransceiver/direction\" title=\"direction\"><code>direction</code></a> 设置为\"<strong><code>sendrecv</code></strong>\"。</li>\n  <li>新的 <strong><code>transceiver</code></strong> 被添加到 RTCPeerConnection 的收发器集合中。</li>\n</ul>"}},{"type":"prose","value":{"id":"实例","title":"实例","isH3":false,"content":"<p>这个例子是从文章中给出的<a href=\"/zh-CN/docs/Web/API/WebRTC_API/Signaling_and_video_calling\">Signaling and video calling</a>及其相应的示例代码中提取的。它来自那里的 <strong><code>handleVideoOfferMsg()</code></strong> 方法，该方法在从远程对等方接收到报价消息时被调用。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> mediaConstraints <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">audio</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">// We want an audio track</span>\n  <span class=\"token literal-property property\">video</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>             <span class=\"token comment\">// ...and we want a video track</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> desc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RTCSessionDescription</span><span class=\"token punctuation\">(</span>sdp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npc<span class=\"token punctuation\">.</span><span class=\"token function\">setRemoteDescription</span><span class=\"token punctuation\">(</span>desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> navigator<span class=\"token punctuation\">.</span>mediaDevices<span class=\"token punctuation\">.</span><span class=\"token function\">getUserMedia</span><span class=\"token punctuation\">(</span>mediaConstraints<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stream</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  previewElement<span class=\"token punctuation\">.</span>srcObject <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">;</span>\n\n  stream<span class=\"token punctuation\">.</span><span class=\"token function\">getTracks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">track</span> <span class=\"token operator\">=&gt;</span> pc<span class=\"token punctuation\">.</span><span class=\"token function\">addTrack</span><span class=\"token punctuation\">(</span>track<span class=\"token punctuation\">,</span> stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>这段代码获取从远程对等方接收到的 SDP，并构造一个新的<a href=\"/zh-CN/docs/Web/API/RTCSessionDescription\"><code>RTCSessionDescription</code></a>传递到<a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/setRemoteDescription\" title=\"setRemoteDescription()\"><code>setRemoteDescription()</code></a>。成功之后，它使用<a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code> mediadevic. getusermedia()</code></a>获得对本地摄像头和麦克风的访问。</p>\n<p>如果成功，结果流将被分配为变量 <strong><code>previewElement</code></strong> 引用的<a href=\"/zh-CN/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a>元素的源。</p>\n<p>最后一步是开始通过对等连接向调用者发送本地视频。通过遍历<a href=\"/zh-CN/docs/Web/API/MediaStream/getTracks\"><code>MediaStream.getTracks()</code></a>返回的列表，并将它们与作为其组件的流一起传递给**<code>addTrack()</code>**，从而在流中添加每条跟踪。</p>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/webrtc-pc/#dom-rtcpeerconnection-addtrack","title":"WebRTC 1.0: Real-Time Communication Between Browsers"}],"query":"api.RTCPeerConnection.addTrack"}},{"type":"browser_compatibility","value":{"title":"浏览器支持","id":"浏览器支持","isH3":false,"query":"api.RTCPeerConnection.addTrack","dataURL":"/zh-CN/docs/Web/API/RTCPeerConnection/addTrack/bcd.json"}},{"type":"prose","value":{"id":"参考","title":"参考","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Web/API/WebRTC_API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">WebRTC (en-US)</a></li>\n  <li><a href=\"/en-US/docs/Web/API/WebRTC_API/Intro_to_RTP\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Introduction to the Real-time Transport Protocol (RTP) (en-US)</a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/RTCPeerConnection/track_event\"><code>RTCPeerConnection.ontrack</code></a></li>\n  <li><code><a href=\"/zh-CN/docs/Web/Reference/Events/track\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">track</a></code></li>\n</ul>"}}],"toc":[{"text":"语法","id":"语法"},{"text":"使用笔记","id":"使用笔记"},{"text":"实例","id":"实例"},{"text":"规范","id":"规范"},{"text":"浏览器支持","id":"浏览器支持"},{"text":"参考","id":"参考"}],"summary":"RTCPeerConnection 对象的 addTrack() 方法将一个新的媒体音轨添加到一组音轨中，这些音轨将被传输给另一个对等点。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"RTCPeerConnection.addTrack()","locale":"en-US","native":"English (US)"},{"title":"RTCPeerConnection.addTrack()","locale":"ko","native":"한국어"}],"source":{"folder":"zh-cn/web/api/rtcpeerconnection/addtrack","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/rtcpeerconnection/addtrack/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/RTCPeerConnection","title":"RTCPeerConnection"},{"uri":"/zh-CN/docs/Web/API/RTCPeerConnection/addTrack","title":"RTCPeerConnection.addTrack()"}],"pageTitle":"RTCPeerConnection.addTrack() - Web API 接口参考 | MDN","noIndexing":false}}