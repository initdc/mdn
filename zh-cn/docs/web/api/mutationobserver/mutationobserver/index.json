{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"MutationObserver.MutationObserver()","mdn_url":"/zh-CN/docs/Web/API/MutationObserver/MutationObserver","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>构造函数</summary><ol><li><em><code>MutationObserver()</code></em></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/MutationObserver/disconnect\"><code>disconnect()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/MutationObserver/observe\"><code>observe()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/MutationObserver/takeRecords\"><code>takeRecords()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>DOM 规范中的 <code>MutationObserver()</code> 构造函数——是 <a href=\"/zh-CN/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a> 接口内容的一部分——创建并返回一个新的观察器，它会在触发指定 DOM 事件时，调用指定的回调函数。MutationObserver 对 DOM 的观察不会立即启动；而必须先调用 <a href=\"/zh-CN/docs/Web/API/MutationObserver/observe\" title=\"observe()\"><code>observe()</code></a> 方法来确定，要监听哪一部分的 DOM 以及要响应哪些更改。</p>"}},{"type":"prose","value":{"id":"语法","title":"语法","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: plain notranslate\">var observer = new MutationObserver(callback);\n</pre></div>"}},{"type":"prose","value":{"id":"参数","title":"参数","isH3":true,"content":"<dl>\n  <dt id=\"callback\"><code>callback</code></dt>\n  <dd>\n    <p>一个回调函数，每当被指定的节点或子树以及配置项有 DOM 变动时会被调用。回调函数拥有两个参数：一个是描述所有被触发改动的 <a href=\"/zh-CN/docs/Web/API/MutationRecord\"><code>MutationRecord</code></a> 对象数组，另一个是调用该函数的 <code>MutationObserver</code> 对象。参见下方的<a href=\"#%E7%A4%BA%E4%BE%8B\">示例</a>了解更多细节</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"返回值","title":"返回值","isH3":true,"content":"<p>一个新的、包含监听 DOM 变化回调函数的 <a href=\"/zh-CN/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a> 对象。</p>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<p>这个例子简单地创建了一个新的 <code>MutationObserver</code>，监视一个节点及其全部子节点树的添加、移除元素，以及任何属性变化的事件。</p>"}},{"type":"prose","value":{"id":"回调函数","title":"回调函数","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mutationList<span class=\"token punctuation\">,</span> observer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  mutationList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mutation</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>mutation<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'childList'</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">/* 从树上添加或移除一个或更多的子节点；参见 mutation.addedNodes 与\n           mutation.removedNodes */</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'attributes'</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">/* mutation.target 中某节点的一个属性值被更改；该属性名称在 mutation.attributeName 中，\n           该属性之前的值为 mutation.oldValue */</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>调用 <a href=\"/zh-CN/docs/Web/API/MutationObserver/observe\" title=\"observe()\"><code>observe()</code></a> 即可开始观察 DOM。当观察者 observer 发现匹配观察请求中指定的配置项的更改时，<code>callback()</code> 方法便会被调用。</p>\n<p>使用 <a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>mutation.type</code></a> 获取发生的变动类别（无论是子节点的变动，还是节点属性的变动）。</p>"}},{"type":"prose","value":{"id":"创建并使用_observer","title":"创建并使用 observer","isH3":true,"content":"<p>使用以下代码设置一个观察进程。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> targetNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#someElement\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> observerOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">childList</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 观察目标子节点的变化，是否有添加或者删除</span>\n  <span class=\"token literal-property property\">attributes</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 观察属性变动</span>\n  <span class=\"token literal-property property\">subtree</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>     <span class=\"token comment\">// 观察后代节点，默认为 false</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutationObserver</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>targetNode<span class=\"token punctuation\">,</span> observerOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>使用 ID <code>someElement</code> 来获取目标节点树。<code>observerOptions</code> 中设定了观察者的选项，通过设定 <code>childList</code> 和 <code>attributes</code> 为 <code>true</code> 来获取所需信息。</p>\n<p>当 observer 实例化时，指定 <code>callback()</code> 函数。之后指定目标节点与记录选项，我们开始观察使用 <code>observe()</code> 指定的 DOM 节点。</p>\n<p>从现在开始直到调用 <a href=\"/zh-CN/docs/Web/API/MutationObserver/disconnect\" title=\"disconnect()\"><code>disconnect()</code></a> ，每次以 <code>targetNode</code> 为根节点的 DOM 树添加或移除元素时，以及这些元素的任意属性改变时，<em><code>callback()</code> 都会被调用。</em></p>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://dom.spec.whatwg.org/#ref-for-dom-mutationobserver-mutationobserver①","title":"DOM Standard"}],"query":"api.MutationObserver.MutationObserver"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.MutationObserver.MutationObserver","dataURL":"/zh-CN/docs/Web/API/MutationObserver/MutationObserver/bcd.json"}}],"toc":[{"text":"语法","id":"语法"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"}],"summary":"DOM 规范中的 MutationObserver() 构造函数——是 MutationObserver 接口内容的一部分——创建并返回一个新的观察器，它会在触发指定 DOM 事件时，调用指定的回调函数。MutationObserver 对 DOM 的观察不会立即启动；而必须先调用 observe() 方法来确定，要监听哪一部分的 DOM 以及要响应哪些更改。","popularity":0.0007,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"MutationObserver()","locale":"en-US","native":"English (US)"},{"title":"MutationObserver.MutationObserver()","locale":"es","native":"Español"},{"title":"MutationObserver.MutationObserver()","locale":"ja","native":"日本語"}],"source":{"folder":"zh-cn/web/api/mutationobserver/mutationobserver","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/mutationobserver/mutationobserver/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/MutationObserver","title":"MutationObserver"},{"uri":"/zh-CN/docs/Web/API/MutationObserver/MutationObserver","title":"MutationObserver.MutationObserver()"}],"pageTitle":"MutationObserver.MutationObserver() - Web API 接口参考 | MDN","noIndexing":false}}