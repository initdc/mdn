{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"MutationObserver","mdn_url":"/zh-CN/docs/Web/API/MutationObserver","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>构造函数</summary><ol><li><a href=\"/zh-CN/docs/Web/API/MutationObserver/MutationObserver\"><code>MutationObserver()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/MutationObserver/disconnect\"><code>disconnect()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/MutationObserver/observe\"><code>observe()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/MutationObserver/takeRecords\"><code>takeRecords()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><a href=\"/zh-CN/docs/Web/API/MutationObserver\" aria-current=\"page\"><code>MutationObserver</code></a> 接口提供了监视对 DOM 树所做更改的能力。它被设计为旧的 Mutation Events 功能的替代品，该功能是 DOM3 Events 规范的一部分。</p>"}},{"type":"prose","value":{"id":"构造函数","title":"构造函数","isH3":false,"content":"<dl>\n  <dt id=\"mutationobserver\"><a href=\"/zh-CN/docs/Web/API/MutationObserver/MutationObserver\" title=\"MutationObserver()\"><code>MutationObserver()</code></a></dt>\n  <dd>\n    <p>创建并返回一个新的 <code>MutationObserver</code> 它会在指定的 DOM 发生变化时被调用。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"方法","title":"方法","isH3":false,"content":"<dl>\n  <dt id=\"disconnect\"><a href=\"/zh-CN/docs/Web/API/MutationObserver/disconnect\" title=\"disconnect()\"><code>disconnect()</code></a></dt>\n  <dd>\n    <p>阻止 <code>MutationObserver</code> 实例继续接收的通知，直到再次调用其 <a href=\"/zh-CN/docs/Web/API/MutationObserver/observe\" title=\"observe()\"><code>observe()</code></a> 方法，该观察者对象包含的回调函数都不会再被调用。</p>\n  </dd>\n  <dt id=\"observe\"><a href=\"/zh-CN/docs/Web/API/MutationObserver/observe\" title=\"observe()\"><code>observe()</code></a></dt>\n  <dd>\n    <p>配置 <code>MutationObserver</code> 在 DOM 更改匹配给定选项时，通过其回调函数开始接收通知。</p>\n  </dd>\n  <dt id=\"takerecords\"><a href=\"/zh-CN/docs/Web/API/MutationObserver/takeRecords\" title=\"takeRecords()\"><code>takeRecords()</code></a></dt>\n  <dd>\n    <p>从 MutationObserver 的通知队列中删除所有待处理的通知，并将它们返回到 <a href=\"/zh-CN/docs/Web/API/MutationRecord\"><code>MutationRecord</code></a> 对象的新 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> 中。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"mutation_observer_customize_resize_event_listener_demo","title":"Mutation Observer &amp; customize resize event listener &amp; demo","isH3":false,"content":"<p><a href=\"https://codepen.io/webgeeker/full/YjrZgg/\" class=\"external\" rel=\" noopener\">https://codepen.io/webgeeker/full/YjrZgg/</a></p>","titleAsText":"Mutation Observer & customize resize event listener & demo"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<p>以下示例改编自<a href=\"https://hacks.mozilla.org/2012/05/dom-mutationobserver-reacting-to-dom-changes-without-killing-browser-performance/\" class=\"external\" rel=\" noopener\">这篇博客</a>。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code> <span class=\"token comment\">// 选择需要观察变动的节点</span>\n<span class=\"token keyword\">const</span> targetNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some-id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 观察器的配置（需要观察什么变动）</span>\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">attributes</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">childList</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">subtree</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 当观察到变动时执行的回调函数</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mutationsList<span class=\"token punctuation\">,</span> observer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Use traditional 'for loops' for IE 11</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> mutation <span class=\"token keyword\">of</span> mutationsList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mutation<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'childList'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A child node has been added or removed.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mutation<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'attributes'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The '</span> <span class=\"token operator\">+</span> mutation<span class=\"token punctuation\">.</span>attributeName <span class=\"token operator\">+</span> <span class=\"token string\">' attribute was modified.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 创建一个观察器实例并传入回调函数</span>\n<span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutationObserver</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 以上述配置开始观察目标节点</span>\nobserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>targetNode<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 之后，可停止观察</span>\nobserver<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://dom.spec.whatwg.org/#interface-mutationobserver","title":"DOM Standard"}],"query":"api.MutationObserver"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容","id":"浏览器兼容","isH3":false,"query":"api.MutationObserver","dataURL":"/zh-CN/docs/Web/API/MutationObserver/bcd.json"}},{"type":"prose","value":{"id":"参见","title":"参见","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/PerformanceObserver\"><code>PerformanceObserver</code></a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/ResizeObserver\"><code>ResizeObserver</code></a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/IntersectionObserver\"><code>IntersectionObserver</code></a></li>\n  <li><a href=\"http://updates.html5rocks.com/2012/02/Detect-DOM-changes-with-Mutation-Observers\" class=\"external\" rel=\" noopener\">A brief overview</a></li>\n  <li><a href=\"https://hacks.mozilla.org/2012/05/dom-mutationobserver-reacting-to-dom-changes-without-killing-browser-performance/\" class=\"external\" rel=\" noopener\">A more in-depth discussion</a></li>\n  <li><a href=\"https://www.youtube.com/watch?v=eRZ4pO0gVWw\" class=\"external\" rel=\" noopener\">A screencast by Chromium developer Rafael Weinstein</a></li>\n</ul>"}}],"toc":[{"text":"构造函数","id":"构造函数"},{"text":"方法","id":"方法"},{"text":"Mutation Observer &amp; customize resize event listener &amp; demo","id":"mutation_observer_customize_resize_event_listener_demo"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容","id":"浏览器兼容"},{"text":"参见","id":"参见"}],"summary":"MutationObserver 接口提供了监视对 DOM 树所做更改的能力。它被设计为旧的 Mutation Events 功能的替代品，该功能是 DOM3 Events 规范的一部分。","popularity":0.0054,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"MutationObserver","locale":"en-US","native":"English (US)"},{"title":"MutationObserver","locale":"es","native":"Español"},{"title":"MutationObserver","locale":"fr","native":"Français"},{"title":"MutationObserver","locale":"ja","native":"日本語"},{"title":"MutationObserver","locale":"ko","native":"한국어"},{"title":"MutationObserver","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"MutationObserver","locale":"ru","native":"Русский"},{"title":"MutationObserver","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/web/api/mutationobserver","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/mutationobserver/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/MutationObserver","title":"MutationObserver"}],"pageTitle":"MutationObserver - Web API 接口参考 | MDN","noIndexing":false}}