{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Background Tasks API","mdn_url":"/zh-CN/docs/Web/API/Background_Tasks_API","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Background_Tasks_API\">Background Tasks API</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>接口</summary><ol><li><a href=\"/zh-CN/docs/Web/API/IdleDeadline\"><code>IdleDeadline</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Window/cancelIdleCallback\"><code>Window.cancelIdleCallback()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Window/requestIdleCallback\"><code>Window.requestIdleCallback()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>幕后任务协作调度 API</strong> (也叫幕后任务 API 或者简单称为 <code>requestIdleCallback()</code> API) 提供了由用户代理决定，在空闲时间自动执行队列任务的能力。</p>"}},{"type":"prose","value":{"id":"概念和用法","title":"概念和用法","isH3":false,"content":"<p>浏览器的主线程以其事件循环队列为中心。此代码渲染 <a href=\"/zh-CN/docs/Web/API/Document\"><code>Document</code></a> 上待更新展示的内容，执行页面待运行的 JavaScript 脚本，接收来自输入设备的事件，以及分发事件给需要接收事件的元素。此外，事件循环队列处理与操作系统的交互、浏览器自身用户界面的更新等等。这是一个非常繁忙的代码块，您的主要 JavaScript 代码可能会和这些代码一起也在这个线程中执行。当然，大多数（不是所有）能够更改 DOM 的代码都在主线程中运行，因为用户界面更改通常只对主线程可用。</p>\n<p>因为事件处理和屏幕更新是用户关注性能最明显的两种方式。对于您的代码来说，防止在事件队列中出现卡顿是很重要的。在过去，除了编写尽可能高效的代码和将尽可能多的工作移交给 <a href=\"/zh-CN/docs/Web/API/Web_Workers_API\">workers</a> 之外，没有其他可靠的方法可以做到这一点。 <a href=\"/zh-CN/docs/Web/API/Window/requestIdleCallback\"><code>Window.requestIdleCallback()</code></a> 允许浏览器告诉您的代码可以安全使用多少时间而不会导致系统延迟，从而有助于确保浏览器的事件循环平稳运行。如果您保持在给定的范围内，您可以使用户体验更好。</p>"}},{"type":"prose","value":{"id":"充分利用空闲回调","title":"充分利用空闲回调","isH3":true,"content":"<p>因为 idle callbacks 旨在为代码提供一种与事件循环协作的方式，以确保系统充分利用其潜能，不会过度分配任务，从而导致延迟或其他性能问题，因此您应该考虑如何使用它。</p>\n<ul>\n  <li><strong>对非高优先级的任务使用空闲回调。</strong> 已经创建了多少回调，用户系统的繁忙程度，你的回调多久会执行一次（除非你指定了 <code>timeout</code>），这些都是未知的。不能保证每次事件循环（甚至每次屏幕更新）后都能执行空闲回调；如果事件循环用尽了所有可用时间，那你可就倒霉了（再说一遍，除非你用了 <code>timeout</code>）。</li>\n  <li>**空闲回调应尽可能不超支分配到的时间。**尽管即使你超出了规定的时间上限，通常来说浏览器、代码、网页也能继续正常运行，这里的时间限制是用来保证系统能留有足够的时间去完成当前的事件循环然后进入下一个循环，而不会导致其他代码卡顿或动画效果延迟。目前，<a href=\"/zh-CN/docs/Web/API/IdleDeadline/timeRemaining\" title=\"timeRemaining()\"><code>timeRemaining()</code></a> 有一个 50 ms 的上限时间，但实际上你能用的时间比这个少，因为在复杂的页面中事件循环可能已经花费了其中的一部分，浏览器的扩展插件也需要处理时间，等等。</li>\n  <li><strong>避免在空闲回调中改变 DOM。</strong> 空闲回调执行的时候，当前帧已经结束绘制了，所有布局的更新和计算也已经完成。如果你做的改变影响了布局，你可能会强制停止浏览器并重新计算，而从另一方面来看，这是不必要的。如果你的回调需要改变 DOM，它应该使用<a href=\"/zh-CN/docs/Web/API/Window/requestAnimationFrame\"><code>Window.requestAnimationFrame()</code></a>来调度它。</li>\n  <li><strong>避免运行时间无法预测的任务。</strong> 你的空闲回调必须避免做任何占用时间不可预测的事情。比如说，应该避免做任何会影响页面布局的事情。你也必须避免 执行<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code> <small>(en-US)</small></a> 的<code>resolve</code>和<code>reject</code>，因为这会在你的回调函数返回后立即引用 Promise 对象对<code>resolve</code>和<code>reject</code>的处理程序。</li>\n  <li><strong>在你需要的时候要用 timeout，但记得只在需要的时候才用。</strong> 使用 timeout 可以保证你的代码按时执行，但是在剩余时间不足以强制执行你的代码的同时保证浏览器的性能表现的情况下，timeout 就会造成延迟或者动画不流畅。</li>\n</ul>"}},{"type":"prose","value":{"id":"回退到_settimeout","title":"回退到 setTimeout","isH3":true,"content":"<p>因为后台任务 API 还是相当新的，而你的代码可能需要在那些不仍不支持此 API 的浏览器上运行。你可以把 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/setTimeout\"><code>setTimeout()</code> <small>(en-US)</small></a> 用作回调选项来做这样的事。这个并不是 <a href=\"/zh-CN/docs/Glossary/Polyfill\">polyfill</a> ，因为它在功能上并不相同； <code>setTimeout()</code> 并不会让你利用空闲时段，而是使你的代码在情况允许时执行你的代码，以使我们可以尽可能地避免造成用户体验性能表现延迟的后果。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span>requestIdleCallback <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>requestIdleCallback <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">handler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> startTime <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">didTimeout</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">timeRemaining</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50.0</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>如果 <a href=\"/zh-CN/docs/Web/API/Window/requestIdleCallback\" title=\"window.requestIdleCallback\"><code>window.requestIdleCallback</code></a> 是 undefined, 我们在这里把它创建出来。这个函数首先会记录我们调用具体实现的时间。我们将用它计算填充程序<a href=\"/zh-CN/docs/Web/API/IdleDeadline/timeRemaining\" title=\"timeRemaining()\"><code>timeRemaining()</code></a>返回的值。</p>\n<p>接着，我们调用 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/setTimeout\"><code>setTimeout()</code> <small>(en-US)</small></a>，并给它传一个函数，在这个函数里，我们传给<code>requestIdleCallback()</code>的具体实现的回调会得以执行。这个回调会接收一个和<a href=\"/zh-CN/docs/Web/API/IdleDeadline\"><code>IdleDeadline</code></a>相符合的 object，此 object 的 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IdleDeadline/didTimeout\"><code>didTimeout</code> <small>(en-US)</small></a>被设定为 false，并拥有一个<a href=\"/zh-CN/docs/Web/API/IdleDeadline/timeRemaining\" title=\"timeRemaining()\"><code>timeRemaining()</code></a> 方法，用来给回调函数 50 毫秒的开始时间。每次调用<code>timeRemaining()</code>，它都会从开始的 50 毫秒中减去已逝去的时间，来确定还剩余的时间。</p>\n<p>结果是，虽然我们的填充程序不会像真正的<code>requestIdleCallback()</code>将自己限制在当前事件循环传递中的空闲时间内，但它至少将每次传递的运行时间限制为不超过 50 毫秒。</p>\n<p>我们<a href=\"/zh-CN/docs/Web/API/Window/cancelIdleCallback\" title=\"cancelIdleCallback()\"><code>cancelIdleCallback()</code></a>的具体实现要简单的多。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span>cancelIdleCallback <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>cancelIdleCallback <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>如果<code>cancelIdleCallback()</code>没有定义，它将创建一个来简单地把指定回调 ID 传递给<a href=\"/zh-CN/docs/Web/API/clearTimeout\" title=\"clearTimeout()\"><code>clearTimeout()</code></a>。</p>\n<p>现在，尽管效率不高，你的代码也可以在不支持后台任务 API 的浏览器上运行了。</p>"}},{"type":"prose","value":{"id":"接口","title":"接口","isH3":false,"content":"<p>后台任务 API 只添加了一个新的接口：</p>\n<dl>\n  <dt id=\"idledeadline\"><a href=\"/zh-CN/docs/Web/API/IdleDeadline\"><code>IdleDeadline</code></a></dt>\n  <dd>\n    <p>这个类型的对象接口空闲回调以提供空闲时段的预估持续时长，以及回调是否因为定时时段过期使其正在运行当中。</p>\n  </dd>\n</dl>\n<p>这个 API 给 <a href=\"/zh-CN/docs/Web/API/Window\"><code>Window</code></a> 接口增加了新的 <a href=\"/zh-CN/docs/Web/API/Window/requestIdleCallback\" title=\"requestIdleCallback()\"><code>requestIdleCallback()</code></a> 和 <a href=\"/zh-CN/docs/Web/API/Window/cancelIdleCallback\" title=\"cancelIdleCallback()\"><code>cancelIdleCallback()</code></a> 方法。</p>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<p>在这个示例中，我们将了解我们怎么用<a href=\"/zh-CN/docs/Web/API/Window/requestIdleCallback\" title=\"requestIdleCallback()\"><code>requestIdleCallback()</code></a>来在浏览器空闲时运行高耗时、低优先级的任务。此外，这个示例会演示如何使用<a href=\"/zh-CN/docs/Web/API/Window/requestAnimationFrame\" title=\"requestAnimationFrame()\"><code>requestAnimationFrame()</code></a>安排文档内容的更新。</p>\n<p>在下面，你只会看到示例的 HTML 和 JavaScript。CSS 没有展示出来，因为它对理解此功能并不关键。</p>"}},{"type":"prose","value":{"id":"html_内容","title":"HTML 内容","isH3":true,"content":"<p>为了了解我们的目标，看一下 HTML。这里创建了一个盒子 (ID <code>\"Container\"</code>) 来显示操作进度（因为毕竟我们没法知道解码“量子丝极谱发射”会用多长时间），还创建了一个次要的盒子 (ID <code>\"logBox\"</code>) 来展示文本输出。</p>\n<pre class=\"notranslate\">&lt;p&gt;\n  演示使用 &lt;a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Background_Tasks_API\"&gt;\n   协作调度幕后任务 &lt;/a&gt; 使用 &lt;code&gt;requestIdleCallback()&lt;/code&gt;\n  方法。\n&lt;/p&gt;\n\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"label\"&gt;解码量子丝极谱发射中...&lt;/div&gt;\n  &lt;progress id=\"progress\" value=\"0\"&gt;&lt;/progress&gt;\n  &lt;div class=\"button\" id=\"startButton\"&gt;\n    开始\n  &lt;/div&gt;\n  &lt;div class=\"label counter\"&gt;\n    任务 &lt;span id=\"currentTaskNumber\"&gt;0&lt;/span&gt; / &lt;span id=\"totalTaskCount\"&gt;0&lt;/span&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div class=\"logBox\"&gt;\n  &lt;div class=\"logHeader\"&gt;\n    记录\n  &lt;/div&gt;\n  &lt;div id=\"log\"&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre>\n<p>这个进度框用一个 <a href=\"/zh-CN/docs/Web/HTML/Element/progress\"><code>&lt;progress&gt;</code></a> 元素展示进度，随着它标签部分的变化，会呈现进度的数字信息。此外，这还有一个开始按钮（id 为'startButton'），用户可以使用它开始数据处理。</p>\n<div class=\"code-example\"><pre class=\"brush: css hidden notranslate\"><code><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Open Sans\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lucida Grande\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Arial\"</span><span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.logBox</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span>500px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 6px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 4px 4px 2px black<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.logHeader</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0 6px 4px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 22px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> lightblue<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-bottom</span><span class=\"token punctuation\">:</span> 1px solid black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 6px 6px 0 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">#log</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font</span><span class=\"token punctuation\">:</span> 12px <span class=\"token string\">\"Courier\"</span><span class=\"token punctuation\">,</span> monospace<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 6px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow-y</span><span class=\"token punctuation\">:</span> scroll<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 388px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 460px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 6px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 6px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 4px 4px 2px black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.label</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.counter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> right<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 4px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> right<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.button</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 2px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-bottom</span><span class=\"token punctuation\">:</span> 4px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> darkgreen<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">#progress</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 6px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"javascript_内容","title":"JavaScript 内容","isH3":true,"content":"<p>现在，已经定义了文档结构，再构造出 JavaScript 代码就可以运行了。目标：可以向队列添加调用函数的请求，并具有一个空闲回调，空闲回调会在系统空闲且空闲时间足够长以取得进展时运行。</p>\n<h4 id=\"变量声明\">变量声明</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> taskList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> totalTaskCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> currentTaskNumber <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> taskHandle <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这些变量用于管理等待执行的任务列表和任务队列和其执行的状态信息：</p>\n<ul>\n  <li><code>taskList</code> 是一个对象的 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> , 每个对象代表一个待运行的任务。</li>\n  <li><code>totalTaskCount</code> 是一个已被添加到队列的任务数量计数器，只会增大，不会减小。我们用它计算总工作量进度的百分比值。</li>\n  <li><code>currentTaskNumber</code> 用于追踪到现在为止已处理了多少任务。</li>\n  <li><code>taskHandle</code> 是对当前处理中任务的一个引用。</li>\n</ul>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> totalTaskCountElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"totalTaskCount\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> currentTaskNumberElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"currentTaskNumber\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> progressBarElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"progress\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> startButtonElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"startButton\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> logElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>接下来我们有了引用要交互 DOM 元素的变量。这些元素是：</p>\n<ul>\n  <li><code>totalTaskCountElem</code> <a href=\"/zh-CN/docs/Web/HTML/Element/span\"><code>&lt;span&gt;</code></a> 用于插入我们在进度框显示状态中创建的任务总数。</li>\n  <li><code>currentTaskNumberElem</code> 是我们用来呈现到当前为止处理过的任务数的元素。</li>\n  <li><code>progressBarElem</code> <a href=\"/zh-CN/docs/Web/HTML/Element/progress\"><code>&lt;progress&gt;</code></a> ，我们用它来呈现到当前为止处理过任务的百分比。</li>\n  <li><code>startButtonElem</code> 是开始按钮。</li>\n  <li><code>logElem</code> 我们在 <a href=\"/zh-CN/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a> 中显示记录过的文本信息。</li>\n</ul>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> logFragment <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> statusRefreshScheduled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>最后，我们为其他项目设置一对变量：</p>\n<ul>\n  <li><code>logFragment</code> 当渲染下一帧，我们的记录方法都会生成一个 <a href=\"/zh-CN/docs/Web/API/DocumentFragment\"><code>DocumentFragment</code></a> 来创建添加到记录的内容，并保存到<code>logFragment</code>中 <a href=\"/zh-CN/docs/Web/API/DocumentFragment\"><code>DocumentFragment</code></a> 。</li>\n  <li><code>statusRefreshScheduled</code> 我们用它来追踪我们是否已经为即将到来的帧安排了状态显示框的更新，所以我们每一帧只执行一次。</li>\n</ul>\n<div class=\"code-example\"><pre class=\"brush: js hidden notranslate\"><code>window<span class=\"token punctuation\">.</span>requestIdleCallback <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>requestIdleCallback <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">handler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> startTime <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">didTimeout</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">timeRemaining</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50.0</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nwindow<span class=\"token punctuation\">.</span>cancelIdleCallback <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>cancelIdleCallback <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"管理任务队列\">管理任务队列</h4>\n<p>接下来，让我们来了解我们管理需要执行的任务的方式。为此，我们将创建一个先进先出（FIFO）的任务队列，在空闲回调期间，如果时间允许，我们将执行这个队列。</p>\n<h5 id=\"排队任务\">排队任务</h5>\n<p>首先，我们需要一个函数把任务排成队列，以便将来执行。这个函数<code>enqueueTask()</code>，就像这个：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">enqueueTask</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">taskHandler<span class=\"token punctuation\">,</span> taskData</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  taskList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">handler</span><span class=\"token operator\">:</span> taskHandler<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> taskData\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  totalTaskCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>taskHandle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    taskHandle <span class=\"token operator\">=</span> <span class=\"token function\">requestIdleCallback</span><span class=\"token punctuation\">(</span>runTaskQueue<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">scheduleStatusRefresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>enqueueTask()</code>接受两个参数作为参数</p>\n<ul>\n  <li><code>taskHandler</code> 一个函数，被调用来处理任务。</li>\n  <li><code>taskData</code> is 一个对象（object），被当作输入参数传递给<code>taskHandler</code>，以允许任务接收自定义数据。</li>\n</ul>\n<p>为了把任务排成队列，我们把一个对象（object）<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push\">push</a>到<code>taskList</code>数组；此对象包含<code>taskHandler</code>和<code>taskData</code>的值（命名分别是<code>handler</code>和<code>data</code>），然后体现我们队列里任务总数的<code>totalTaskCount</code>增加（我们不会在从队列中移除任务时减少<code>totalTaskCount</code>）。</p>\n<p>接下来，我们来检查我们是否已经创建了一个空闲回调；如果<code>taskHandle</code>是 0，那我们得知还没有空闲回调，所以我们调用<a href=\"/zh-CN/docs/Web/API/Window/requestIdleCallback\" title=\"requestIdleCallback()\"><code>requestIdleCallback()</code></a>去创建一个。它被配置为调用一个叫<code>runTaskQueue()</code>的函数（我们随后会对其研究），它的<code>timeout</code>为 1 秒，因此，即使没有任何实际可用的空闲时间，它也至少会每秒运行一次。</p>\n<h5 id=\"执行任务\">执行任务</h5>\n<p>我们的空闲回调处理方法，<code>runTaskQueue()</code>，将在浏览器确定有足够的可用空闲时间让我们做一些我们的工作时，或者 1 秒的<code>timeout</code>到期时被调用。这个方法的作用是执行队列中的任务。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">runTaskQueue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">deadline</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>deadline<span class=\"token punctuation\">.</span><span class=\"token function\">timeRemaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> deadline<span class=\"token punctuation\">.</span>didTimeout<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> taskList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> task <span class=\"token operator\">=</span> taskList<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    currentTaskNumber<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n    task<span class=\"token punctuation\">.</span><span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scheduleStatusRefresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>taskList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    taskHandle <span class=\"token operator\">=</span> <span class=\"token function\">requestIdleCallback</span><span class=\"token punctuation\">(</span>runTaskQueue<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    taskHandle <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>runTaskQueue()</code>的核心是一个循环，只要有剩余时间（通过检查<a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>IdleDeadline.timeRemaining</code></a>来确认它大于 0），或者已经达到了 timeout 期限（<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/IdleDeadline/didTimeout\"><code>deadline.didTimeout</code> <small>(en-US)</small></a>值为真），且任务列表中有任务就会一直持续。</p>\n<p>对队列中每个我们有时间执行的任务，我们做以下操作：</p>\n<ol>\n  <li>我们 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\">把任务对象（object）从队列中移除</a>。</li>\n  <li>我们让<code>currentTaskNumber</code>增加来追踪我们已执行的任务数量。</li>\n  <li>我们调用任务处理方法，<code>task.handler</code>，并任务的数据对象（<code>task.data</code>）传入其中。</li>\n  <li>我们调用一个方法，<code>scheduleStatusRefresh()</code>，去处理调度一个屏幕更新来体现我们进度的变化。</li>\n</ol>\n<p>当时间耗尽，如果列表里还有任务，我们再次调用<a href=\"/zh-CN/docs/Web/API/Window/requestIdleCallback\" title=\"requestIdleCallback()\"><code>requestIdleCallback()</code></a>使我们可以在下次有可用空闲时间时继续运行这些任务。如果队列是空的，我们将把<code>taskHandle</code>设置为 0 来表示我们没有回调日程了。这样，下一次<code>enqueueTask()</code>被调用时，我们就知道要请求一个回调了。</p>\n<h4 id=\"更新状态显示\">更新状态显示</h4>\n<p>我们想要能够做的一件事是根据记录输出和进度信息来更新文档。然后在空闲回调中改变 DOM 是不安全的。作为替代，我们使用 <a href=\"/zh-CN/docs/Web/API/Window/requestAnimationFrame\" title=\"requestAnimationFrame()\"><code>requestAnimationFrame()</code></a> 来让浏览器在可以安全地更新显示时通知我们。</p>\n<h5 id=\"安排显示的更新\">安排显示的更新</h5>\n<p>调用<code>scheduleStatusRefresh()</code>函数来安排 DOM 的改变。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">scheduleStatusRefresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>statusRefreshScheduled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>updateDisplay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      statusRefreshScheduled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>这是一个简单的函数。它检查<code>statusRefreshScheduled</code>的值来得知我们是否已经安排了一个显示更新。如果值为<code>false</code>，我们调用<a href=\"/zh-CN/docs/Web/API/Window/requestAnimationFrame\" title=\"requestAnimationFrame()\"><code>requestAnimationFrame()</code></a>来安排一个更新，也就是提供一个<code>updateDisplay()</code>函数以被调用去处理那个工作。</p>\n<h5 id=\"更新显示\">更新显示</h5>\n<p><code>updateDisplay()</code>函数负责绘制进度框的内容和记录。当 DOM 的状况安全，我们可以在下次渲染过程中申请改变时，浏览器会调用它。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">updateDisplay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> scrolledToEnd <span class=\"token operator\">=</span> logElem<span class=\"token punctuation\">.</span>scrollHeight <span class=\"token operator\">-</span> logElem<span class=\"token punctuation\">.</span>clientHeight <span class=\"token operator\">&lt;=</span> logElem<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>totalTaskCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>progressBarElem<span class=\"token punctuation\">.</span>max <span class=\"token operator\">!=</span> totalTaskCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      totalTaskCountElem<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> totalTaskCount<span class=\"token punctuation\">;</span>\n      progressBarElem<span class=\"token punctuation\">.</span>max <span class=\"token operator\">=</span> totalTaskCount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>progressBarElem<span class=\"token punctuation\">.</span>value <span class=\"token operator\">!=</span> currentTaskNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      currentTaskNumberElem<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> currentTaskNumber<span class=\"token punctuation\">;</span>\n      progressBarElem<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> currentTaskNumber<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logFragment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    logElem<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>logFragment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    logFragment <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scrolledToEnd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      logElem<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">=</span> logElem<span class=\"token punctuation\">.</span>scrollHeight <span class=\"token operator\">-</span> logElem<span class=\"token punctuation\">.</span>clientHeight<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  statusRefreshScheduled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>首先，在记录被滚动到底的时候<code>scrolledToEnd</code>会被设置为<code>true</code>，否则被设置为<code>false</code>。我们用它来决定，我们是否必须要更新滚动位置来确保我们在给记录添加内容的动作结束后，记录停留在末尾。</p>\n<p>接下来，如果有任务进入队列中，我们更新进度和状态信息。</p>\n<ol>\n  <li>如果进度条当前的最大值不同于队列中当前的任务总数（<code>totalTaskCount</code>），我们就要更新任务总数（<code>totalTaskCountElem</code>）的显示内容和进度条的最大值，以使它的比例正确。</li>\n  <li>我们对已运行的任务数做同样的操作；如果<code>progressBarElem.value</code>不同于当前正被处理的任务数（<code>currentTaskNumber</code>），我们就要更新当前运行的程序数量值和进度条当前值的显示。</li>\n</ol>\n<p>然后，如果有文本等待被添加到记录中（也就是说，<code>logFragment</code>不为<code>null</code>），我们使用<a href=\"/zh-CN/docs/Web/API/Node/appendChild\" title=\"Element.appendChild()\"><code>Element.appendChild()</code></a>将它添加到记录元素中，并将<code>logFragment</code>设置为以避免重复操作。</p>\n<p>如果我们操作开始的时候记录被滚动到末尾，我们要确保它一直处理末尾的位置。然后我们将<code>statusRefreshScheduled</code>设置为<code>false</code>，以表明我们已经处理过更新，可以安全地请求新的更新了。</p>\n<h4 id=\"向记录添加文本\">向记录添加文本</h4>\n<p><code>log()</code> 函数可以向记录中添加指定的文本。因为我们不知道调用 <code>log()</code> 的时候是否可以立即安全地联系 DOM，我们将缓存记录文本一直到可以安全更新。在上面，在 <code>updateDisplay()</code> 的代码中，你可以找到更新动画帧时，实际添加记录的代码。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>logFragment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      logFragment <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createDocumentFragment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  el<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n  logFragment<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>首先，如果当前不存在一个名为<code>logFragment</code>的 <a href=\"/zh-CN/docs/Web/API/DocumentFragment\"><code>DocumentFragment</code></a> 对象。该元素是伪 DOM，我们可以在其中插入元素，而无需立即更改主 DOM 本身。</p>\n<p>然后我们创建一个新的元素，并将其内容设置为与输入文本匹配。接下来我们向<code>logFragment</code>中的伪 DOM 末尾添加一个新的元素。<code>logFragment</code>将会累积记录条目直到下次因 DOM 改变而调用<code>updateDisplay()</code>的时候。</p>"}},{"type":"prose","value":{"id":"运行任务","title":"运行任务","isH3":true,"content":"<p>现在，我们的任务管理和显示维护代码已经完成了，我们实际上可以开始设定完成工作的代码了</p>\n<h4 id=\"任务处理器\">任务处理器</h4>\n<p><code>logTaskHandler()</code>，将是我们用来作为任务处理器的函数，也是用作任务对象<code>handler</code>属性的值。它是一个简单的为每个任务向记录输出大量内容的函数。在您自己的应用程序中，您可以将此代码替换为您希望在空闲时间执行的任何任务。只要记住任何 DOM 变化都需要通过 <a href=\"/zh-CN/docs/Web/API/Window/requestAnimationFrame\" title=\"requestAnimationFrame()\"><code>requestAnimationFrame()</code></a> 处理。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">logTaskHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;strong&gt;Running task #\"</span> <span class=\"token operator\">+</span> currentTaskNumber <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/strong&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>data<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\". \"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"主程序\">主程序</h4>\n<p>当用户点击“开始”按钮，会触发所有操作，也会导致调用<code>decodeTechnoStuff()</code>函数。</p>\n<div class=\"code-example\"><pre class=\"brush: js hidden notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">getRandomIntInclusive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">min<span class=\"token punctuation\">,</span> max</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  min <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">-</span> min <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> min<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">decodeTechnoStuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  totalTaskCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  currentTaskNumber <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">updateDisplay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token function\">getRandomIntInclusive</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> taskData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token function\">getRandomIntInclusive</span><span class=\"token punctuation\">(</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">\"This text is from task number \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" of \"</span> <span class=\"token operator\">+</span> n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">enqueueTask</span><span class=\"token punctuation\">(</span>logTaskHandler<span class=\"token punctuation\">,</span> taskData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"startButton\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> decodeTechnoStuff<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>decodeTechnoStuff()</code>开始执行时会将任务总数（到现在为止添加到队列中的任务数）清零，并随后调用<code>updateDisplay()</code>以重置显示为“没有任何事发生”的状态。</p>\n<p>这个示例去创建一个随机数量（100 到 200 之间）的任务。为此，我们使用<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/random\"><code>Math.random()</code></a>文档中作为示例提供的<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/random?document_saved=true#Getting_a_random_integer_between_two_values_inclusive\" class=\"page-not-created\" title=\"This is a link to an unwritten page\"><code>getRandomIntInclusive()</code></a>以获得要创建的任务数。</p>\n<p>随后我们开始一个循环以创建实际的任务。对于每个任务，我们创建一个对象，<code>taskData</code>，其中包含两个属性：</p>\n<ul>\n  <li><code>count</code> 是要从任务输出到记录中的字符串数量。</li>\n  <li><code>text</code> 是要输出到日志的文本（由<code>count</code>指定的次数）。</li>\n</ul>\n<p>我们调用 <code>enqueueTask()</code> 来将每个任务排入队列，将 <code>logTaskHandler()</code> 传入作为处理函数，将 <code>taskData</code> 传入，待处理函数调用时传入其中。</p>"}},{"type":"prose","value":{"id":"结果","title":"结果","isH3":true,"content":"<p>下面就是以上代码实际功能结果。试一下，在你的浏览器开发者工具中使用它，并把它融入自己的代码中体验一下。</p><iframe class=\"sample-code-frame\" title=\"示例 sample\" id=\"frame_示例\" width=\"600\" height=\"700\" src=\"https://yari-demos.prod.mdn.mozit.cloud/zh-CN/docs/Web/API/Background_Tasks_API/_sample_.%E7%A4%BA%E4%BE%8B.html\" loading=\"lazy\"></iframe>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/requestidlecallback/#the-requestidlecallback-method","title":"Cooperative Scheduling of Background Tasks"}],"query":"api.Window.requestIdleCallback"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.Window.requestIdleCallback","dataURL":"/zh-CN/docs/Web/API/Background_Tasks_API/bcd.json"}},{"type":"prose","value":{"id":"相关链接","title":"相关链接","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/Window/requestIdleCallback\"><code>Window.requestIdleCallback()</code></a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/Window/cancelIdleCallback\"><code>Window.cancelIdleCallback()</code></a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/IdleDeadline\"><code>IdleDeadline</code></a></li>\n</ul>"}}],"toc":[{"text":"概念和用法","id":"概念和用法"},{"text":"接口","id":"接口"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"相关链接","id":"相关链接"}],"summary":"幕后任务协作调度 API (也叫幕后任务 API 或者简单称为 requestIdleCallback() API) 提供了由用户代理决定，在空闲时间自动执行队列任务的能力。","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Background Tasks API","locale":"en-US","native":"English (US)"},{"title":"Cooperative Scheduling of Background Tasks API","locale":"ko","native":"한국어"},{"title":"Background Tasks API","locale":"pt-BR","native":"Português (do Brasil)"}],"source":{"folder":"zh-cn/web/api/background_tasks_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/background_tasks_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/Background_Tasks_API","title":"Background Tasks API"}],"pageTitle":"Background Tasks API - Web API 接口参考 | MDN","noIndexing":false}}