{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"SubtleCrypto.encrypt()","mdn_url":"/zh-CN/docs/Web/API/SubtleCrypto/encrypt","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/Web_Crypto_API\">Web Crypto API</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/API/SubtleCrypto\"><code>SubtleCrypto</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/SubtleCrypto/decrypt\"><code>decrypt()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SubtleCrypto/deriveBits\"><code>deriveBits()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SubtleCrypto/deriveKey\"><code>deriveKey()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SubtleCrypto/digest\"><code>digest()</code> <small>(en-US)</small></a></li><li><em><code>encrypt()</code></em></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SubtleCrypto/exportKey\"><code>exportKey()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SubtleCrypto/generateKey\"><code>generateKey()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SubtleCrypto/importKey\"><code>importKey()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SubtleCrypto/sign\"><code>sign()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SubtleCrypto/unwrapKey\"><code>unwrapKey()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SubtleCrypto/verify\"><code>verify()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/SubtleCrypto/wrapKey\"><code>wrapKey()</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Web Crypto API 的相关页面</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Crypto\"><code>Crypto</code></a></li><li><a href=\"/zh-CN/docs/Web/API/CryptoKey\"><code>CryptoKey</code></a></li><li><a href=\"/zh-CN/docs/Web/API/crypto_property\"><code>crypto_property</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>SubtleCrypto.encrypt()</code></strong> 方法以算法、密钥、明文为参数返回一个包含加密数据的 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> 对象。</p>"}},{"type":"prose","value":{"id":"语法","title":"语法","isH3":false,"content":"<pre class=\"notranslate\">var result = crypto.encrypt(algo, key, cleartext);\n</pre>"}},{"type":"prose","value":{"id":"参数","title":"参数","isH3":true,"content":"<ul>\n  <li><em><code>algo</code></em> 是一个使用加密函数的对象或者 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>DOMString</code></a>，后者是 <code>{\"name\": algo}</code> 的缩写。支持的值是：\n    <ul>\n      <li><code>{\"name\": \"AES-CBC\", iv}</code> <code>iv</code> 是具有 16 个随机字节的 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> 或 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>ArrayBufferView</code></a> (这些应该由 <a href=\"/zh-CN/docs/Web/API/Crypto/getRandomValues\"><code>RandomSource.getRandomValues()</code></a> 生成)。</li>\n      <li><code>{\"name\": \"AES-CTR\", counter, length}</code></li>\n      <li><code>{\"name\": \"AES-GCM\", iv, additionalData, tagLength}</code> (<em><code>additionalData</code></em> 和 <code>tagLength</code> 是可选的)</li>\n      <li><code>{\"name\": \"RSA-OAEP\", label}</code> (<code>label</code> 是可选的)</li>\n    </ul>\n  </li>\n  <li><code>key</code> 是一个包含签名密钥的 <a href=\"/zh-CN/docs/Web/API/CryptoKey\"><code>CryptoKey</code></a>。</li>\n  <li><em><code>cleartext</code></em> 是一个包含需要加密的明文 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> 或者 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>ArrayBufferView</code></a> 对象。</li>\n</ul>"}},{"type":"prose","value":{"id":"返回值","title":"返回值","isH3":true,"content":"<ul>\n  <li>返回值是一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> 对象，返回一个由 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Plaintext\">cleartext <small>(en-US)</small></a> 加密生成的 <a href=\"/zh-CN/docs/Glossary/Ciphertext\">ciphertext</a> 的 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>。</li>\n</ul>"}},{"type":"prose","value":{"id":"异常","title":"异常","isH3":true,"content":"<p>当遇到以下异常时，promise 将会返回一次错误（reject）:</p>\n<dl>\n  <dt id=\"invalidaccesserror\">InvalidAccessError</dt>\n  <dd>\n    <p>当针对提供的 key 值执行的操作无效时（例如加密算法或者 key 值无效），将会抛出该错误。</p>\n  </dd>\n  <dt id=\"operationerror\">OperationError</dt>\n  <dd>\n    <p>发生于由于特定于操作的原因使得操作失败时，例如算法参数的大小无效，或者 AES-GCM 明文长度超过 2³⁹−256 字节。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"支持的算法","title":"支持的算法","isH3":false,"content":"<p>Crypto 接口提供了支持 <code>encrypt()</code> 和 <code>decrypt()</code> 操作的四种算法。</p>\n<p>其中的 RSA-OAEP 算法是一种非对称加密的公钥密码（<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Public-key_cryptography\">public-key cryptosystem <small>(en-US)</small></a>）。</p>\n<p>其它三种算法则都是对称密钥加密（<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Symmetric-key_cryptography\">symmetric algorithms <small>(en-US)</small></a>），并且它们都是基于同一种基础加密，即 AES (Advanced Encryption Standard)。它们不同之处在于分组加密的操作方式（<a href=\"/zh-CN/docs/Glossary/Block_cipher_mode_of_operation\">mode</a>）。Crypto 接口支持以下三种 AES 加密类型：</p>\n<ul>\n  <li>CTR (Counter Mode)</li>\n  <li>CBC (Cipher Block Chaining)</li>\n  <li>GCM (Galois/Counter Mode)</li>\n</ul>\n<p>这里强烈建议使用<em><strong>认证加密</strong></em>（<em>authenticated encryption</em>），它可以检测密文是否已被攻击者篡改。使用认证也可以避免<em>选择密文攻击</em>（<em>chosen-ciphertext</em> attacks），即攻击者可以请求系统解密任意的消息，然后使用解密结果来倒推出关于密钥的一些信息。虽然 CTR 和 CBC 模式可以添加认证，但是它们默认不提供该操作，并且在手动实现它们的时候，很同意犯一些微小但严重的错误。GCM 不支持内置的认证，由于这个原因，常常推荐使用另外两种 AES 加密算法。</p>"}},{"type":"prose","value":{"id":"rsa-oaep","title":"RSA-OAEP","isH3":true,"content":"<p>关于 RSA-OAEP 公钥加密算法的规范位于 <a href=\"https://tools.ietf.org/html/rfc3447\" class=\"external\" rel=\" noopener\">RFC 3447</a>。</p>"}},{"type":"prose","value":{"id":"aes-ctr","title":"AES-CTR","isH3":true,"content":"<p>使用 Counter 模式的 AES 算法，相关规范位于 <a href=\"https://csrc.nist.gov/publications/detail/sp/800-38a/final\" class=\"external\" rel=\" noopener\">NIST SP800-38A</a>。</p>"}},{"type":"prose","value":{"id":"aes-cbc","title":"AES-CBC","isH3":true,"content":"<p>使用 Cipher Block Chaining 模式的 AES 算法，规范位于<a href=\"https://csrc.nist.gov/publications/detail/sp/800-38a/final\" class=\"external\" rel=\" noopener\">NIST SP800-38A</a>。</p>"}},{"type":"prose","value":{"id":"aes-gcm","title":"AES-GCM","isH3":true,"content":"<p>使用 Galois/Counter 模式的 AES 算法，规范位于 <a href=\"https://csrc.nist.gov/publications/detail/sp/800-38d/final\" class=\"external\" rel=\" noopener\">NIST SP800-38D</a>。</p>\n<p>这种模式与上面的模式不同之处在于，GCM 是一种 \"认证（authenticated）\" 模式，意思就是它包含了检测密文是否未被攻击者篡改的功能。</p>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 你可以在 GitHub 尝试这个示例（<a href=\"https://mdn.github.io/dom-examples/web-crypto/encrypt-decrypt/index.html\" class=\"external\" rel=\" noopener\">try the working examples</a>）。</p>\n</div>"}},{"type":"prose","value":{"id":"rsa-oaep_2","title":"RSA-OAEP","isH3":true,"content":"<p>以下代码获取文本框中的内容，编码后进行加密，使用的算法为 RSA-OAEP。可以在 GitHub 查看完整代码：<a href=\"https://github.com/mdn/dom-examples/blob/master/web-crypto/encrypt-decrypt/rsa-oaep.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub</a>。</p>\n<pre class=\"notranslate\">function getMessageEncoding() {\n  const messageBox = document.querySelector(\".rsa-oaep #message\");\n  let message = messageBox.value;\n  let enc = new TextEncoder();\n  return enc.encode(message);\n}\n\nfunction encryptMessage(publicKey) {\n  let encoded = getMessageEncoding();\n  return window.crypto.subtle.encrypt(\n    {\n      name: \"RSA-OAEP\"\n    },\n    publicKey,\n    encoded\n  );\n}\n</pre>"}},{"type":"prose","value":{"id":"aes-ctr_2","title":"AES-CTR","isH3":true,"content":"<p>以下代码同样获取文本框内容，进行编码后使用 AES 的 CTR 模式加密，完整代码：<a href=\"https://github.com/mdn/dom-examples/blob/master/web-crypto/encrypt-decrypt/aes-ctr.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub</a>。</p>\n<pre class=\"notranslate\">function getMessageEncoding() {\n  const messageBox = document.querySelector(\".aes-ctr #message\");\n  let message = messageBox.value;\n  let enc = new TextEncoder();\n  return enc.encode(message);\n}\n\nfunction encryptMessage(key) {\n  let encoded = getMessageEncoding();\n  // counter will be needed for decryption\n  counter = window.crypto.getRandomValues(new Uint8Array(16));\n  return window.crypto.subtle.encrypt(\n    {\n      name: \"AES-CTR\",\n      counter,\n      length: 64\n    },\n    key,\n    encoded\n  );\n}\n</pre>\n<pre class=\"notranslate\">let iv = new Uint8array(16);\nlet key = new Uint8array(16);\nlet data = new Uint8array(12345);\n//crypto functions are wrapped in promises so we have to use await and make sure the function that\n//contains this code is an async function\n//encrypt function wants a cryptokey object\nconst key_encoded = await crypto.subtle.importKey(  \"raw\",    key.buffer,   'AES-CTR' ,  false,   [\"encrypt\", \"decrypt\"]);\nconst encrypted_content = await window.crypto.subtle.encrypt(\n    {\n      name: \"AES-CTR\",\n      counter: iv,\n      length: 128\n    },\n    key_encoded,\n    data\n  );\n\n//Uint8array\nconsole.log(encrypted_content);\n</pre>"}},{"type":"prose","value":{"id":"aes-cbc_2","title":"AES-CBC","isH3":true,"content":"<p>使用 AES 的 CBC 模式加密，完整代码：<a href=\"https://github.com/mdn/dom-examples/blob/master/web-crypto/encrypt-decrypt/aes-cbc.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub</a>。</p>\n<pre class=\"notranslate\">function getMessageEncoding() {\n  const messageBox = document.querySelector(\".aes-cbc #message\");\n  let message = messageBox.value;\n  let enc = new TextEncoder();\n  return enc.encode(message);\n}\n\nfunction encryptMessage(key) {\n  let encoded = getMessageEncoding();\n  // iv will be needed for decryption\n  iv = window.crypto.getRandomValues(new Uint8Array(16));\n  return window.crypto.subtle.encrypt(\n    {\n      name: \"AES-CBC\",\n      iv\n    },\n    key,\n    encoded\n  );\n}\n</pre>"}},{"type":"prose","value":{"id":"aes-gcm_2","title":"AES-GCM","isH3":true,"content":"<p>使用 AES 的 GCM 模式加密，完整代码：<a href=\"https://github.com/mdn/dom-examples/blob/master/web-crypto/encrypt-decrypt/aes-gcm.js\" class=\"external\" rel=\" noopener\">See the complete code on GitHub</a>。</p>\n<pre class=\"notranslate\">function getMessageEncoding() {\n  const messageBox = document.querySelector(\".aes-gcm #message\");\n  let message = messageBox.value;\n  let enc = new TextEncoder();\n  return enc.encode(message);\n}\n\nfunction encryptMessage(key) {\n  let encoded = getMessageEncoding();\n  // iv will be needed for decryption\n  iv = window.crypto.getRandomValues(new Uint8Array(12));\n  return window.crypto.subtle.encrypt(\n    {\n      name: \"AES-GCM\",\n      iv: iv\n    },\n    key,\n    encoded\n  );\n}\n</pre>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://w3c.github.io/webcrypto/#SubtleCrypto-method-encrypt","title":"Web Cryptography API"}],"query":"api.SubtleCrypto.encrypt"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"api.SubtleCrypto.encrypt","dataURL":"/zh-CN/docs/Web/API/SubtleCrypto/encrypt/bcd.json"}},{"type":"prose","value":{"id":"另见","title":"另见","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/SubtleCrypto/decrypt\"><code>SubtleCrypto.decrypt()</code></a>.</li>\n  <li><a href=\"https://tools.ietf.org/html/rfc3447\" class=\"external\" rel=\" noopener\">RFC 3447</a> specifies RSAOAEP.</li>\n  <li><a href=\"https://csrc.nist.gov/publications/detail/sp/800-38a/final\" class=\"external\" rel=\" noopener\">NIST SP800-38A</a> specifies CTR mode.</li>\n  <li><a href=\"https://csrc.nist.gov/publications/detail/sp/800-38a/final\" class=\"external\" rel=\" noopener\">NIST SP800-38A</a> specifies CBC mode.</li>\n  <li><a href=\"https://csrc.nist.gov/publications/detail/sp/800-38d/final\" class=\"external\" rel=\" noopener\">NIST SP800-38D</a> specifies GCM mode.</li>\n</ul>"}}],"toc":[{"text":"语法","id":"语法"},{"text":"支持的算法","id":"支持的算法"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"另见","id":"另见"}],"summary":"SubtleCrypto.encrypt() 方法以算法、密钥、明文为参数返回一个包含加密数据的 Promise 对象。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"SubtleCrypto.encrypt()","locale":"en-US","native":"English (US)"}],"source":{"folder":"zh-cn/web/api/subtlecrypto/encrypt","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/api/subtlecrypto/encrypt/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/API","title":"Web API 接口参考"},{"uri":"/zh-CN/docs/Web/API/SubtleCrypto","title":"SubtleCrypto"},{"uri":"/zh-CN/docs/Web/API/SubtleCrypto/encrypt","title":"SubtleCrypto.encrypt()"}],"pageTitle":"SubtleCrypto.encrypt() - Web API 接口参考 | MDN","noIndexing":false}}