{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"浏览器的同源策略","mdn_url":"/zh-CN/docs/Web/Security/Same-origin_policy","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>同源策略</strong>是一个重要的安全策略，它用于限制一个<a href=\"/zh-CN/docs/Glossary/Origin\">origin</a>的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介。</p>"}},{"type":"prose","value":{"id":"同源的定义","title":"同源的定义","isH3":false,"content":"<p>如果两个 URL 的 <a href=\"/zh-CN/docs/Glossary/Protocol\">protocol</a>、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Port\">port <small>(en-US)</small></a> (如果有指定的话) 和 <a href=\"/zh-CN/docs/Glossary/Host\">host</a> 都相同的话，则这两个 URL 是<em>同源</em>。这个方案也被称为“协议/主机/端口元组”，或者直接是“元组”。（“元组”是指一组项目构成的整体，双重/三重/四重/五重/等的通用形式）。</p>\n<p>下表给出了与 URL <code>http://store.company.com/dir/page.html</code> 的源进行对比的示例：</p>\n<table>\n  <thead>\n    <tr>\n      <th>URL</th>\n      <th>结果</th>\n      <th>原因</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>http://store.company.com/dir2/other.html</code></td>\n      <td>同源</td>\n      <td>只有路径不同</td>\n    </tr>\n    <tr>\n      <td><code>http://store.company.com/dir/inner/another.html</code></td>\n      <td>同源</td>\n      <td>只有路径不同</td>\n    </tr>\n    <tr>\n      <td><code>https://store.company.com/secure.html</code></td>\n      <td>失败</td>\n      <td>协议不同</td>\n    </tr>\n    <tr>\n      <td><code>http://store.company.com:81/dir/etc.html</code></td>\n      <td>失败</td>\n      <td>端口不同 ( <code>http://</code> 默认端口是 80)</td>\n    </tr>\n    <tr>\n      <td><code>http://news.company.com/dir/other.html</code></td>\n      <td>失败</td>\n      <td>主机不同</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"源的继承","title":"源的继承","isH3":true,"content":"<p>在页面中通过 <code>about:blank</code> 或 <code>javascript:</code> URL 执行的脚本会继承打开该 URL 的文档的源，因为这些类型的 URLs 没有包含源服务器的相关信息。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 例如，<code>about:blank</code> 通常作为父脚本写入内容的新的空白弹出窗口的 URL（例如，通过 <a href=\"/zh-CN/docs/Web/API/Window/open\">Window.open()</a>）。如果此弹出窗口也包含 JavaScript，则该脚本将从创建它的脚本那里继承对应的源。</p>\n</div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 在<span title=\"(Firefox 6.0 / Thunderbird 6.0 / SeaMonkey 2.3)\">Gecko&nbsp;6.0</span>之前，如果用户在位置栏中输入 <code>data</code> URLs，<code>data</code> URLs 将继承当前浏览器窗口中网页的安全上下文。</p>\n</div>\n<div class=\"notecard warning\" id=\"sect3\">\n  <p><strong>警告：</strong> <code>data</code>：URLs 获得一个新的，空的安全上下文。</p>\n</div>"}},{"type":"prose","value":{"id":"ie_中的特例","title":"IE 中的特例","isH3":true,"content":"<p>Internet Explorer 的同源策略有两个主要的差异点：</p>\n<ul>\n  <li><strong>授信范围</strong>（Trust Zones）：两个相互之间高度互信的域名，如公司域名（corporate domains），则不受同源策略限制。</li>\n  <li><strong>端口</strong>：IE 未将端口号纳入到同源策略的检查中，因此 <code>https://company.com:81/index.html</code> 和 <code>https://company.com/index.html</code> 属于同源并且不受任何限制。</li>\n</ul>\n<p>这些差异点是不规范的，其它浏览器也未做出支持，但会助于开发基于 window RT IE 的应用程序。</p>"}},{"type":"prose","value":{"id":"源的更改","title":"<strong>源</strong>的更改","isH3":false,"content":"<p>满足某些限制条件的情况下，页面是可以修改它的源。脚本可以将 <a href=\"/zh-CN/docs/Web/API/Document/domain\"><code>document.domain</code></a> 的值设置为其当前域或其当前域的父域。如果将其设置为其当前域的父域，则这个较短的父域将用于后续源检查。</p>\n<p>例如：假设 <code>http://store.company.com/dir/other.html</code> 文档中的一个脚本执行以下语句：</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">document.domain = \"company.com\";\n</pre></div>\n<p>这条语句执行之后，页面将会成功地通过与 <code>http://company.com/dir/page.html</code> 的同源检测（假设<code>http://company.com/dir/page.html</code> 将其 <code>document.domain</code> 设置为“<code>company.com</code>”，以表明它希望允许这样做 - 更多有关信息，请参阅 <a href=\"/zh-CN/docs/Web/API/Document/domain\"><code>document.domain</code></a> ）。然而，<code>company.com</code> 不能设置 <code>document.domain</code> 为 <code>othercompany.com</code>，因为它不是 <code>company.com</code> 的父域。</p>\n<p>端口号是由浏览器另行检查的。任何对 document.domain 的赋值操作，包括 <code>document.domain = document.domain</code> 都会导致端口号被重写为 <code>null</code> 。因此 <code>company.com:8080</code> <strong>不能</strong>仅通过设置 <code>document.domain = \"company.com\"</code> 来与<code>company.com</code> 通信。必须在他们双方中都进行赋值，以确保端口号都为 <code>null</code> 。</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>备注：</strong> 使用 <code>document.domain</code> 来允许子域安全访问其父域时，您需要在父域和子域中设置 document.domain 为相同的值。这是必要的，即使这样做只是将父域设置回其原始值。不这样做可能会导致权限错误。</p>\n</div>","titleAsText":"源的更改"}},{"type":"prose","value":{"id":"跨源网络访问","title":"跨源网络访问","isH3":false,"content":"<p>同源策略控制不同源之间的交互，例如在使用<a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> 或 <a href=\"/zh-CN/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a> 标签时则会受到同源策略的约束。这些交互通常分为三类：</p>\n<ul>\n  <li>跨源<strong>写操作</strong>（Cross-origin writes）一般是被允许的。例如链接（links），重定向以及表单提交。特定少数的 HTTP 请求需要添加<a href=\"/zh-CN/docs/Web/HTTP/CORS#%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82\">预检请求</a>。</li>\n  <li>跨源<strong>资源嵌入</strong>（Cross-origin embedding）一般是被允许（后面会举例说明）。</li>\n  <li>跨源<strong>读操作</strong>（Cross-origin reads）一般是不被允许的，但常可以通过内嵌资源来巧妙的进行读取访问。例如，你可以读取嵌入图片的高度和宽度，调用内嵌脚本的方法，或<a href=\"https://grepular.com/Abusing_HTTP_Status_Codes_to_Expose_Private_Information\" class=\"external\" rel=\" noopener\">availability of an embedded resource</a>.</li>\n</ul>\n<p>以下是可能嵌入跨源的资源的一些示例：</p>\n<ul>\n  <li><code>&lt;script src=\"...\"&gt;&lt;/script&gt;</code> 标签嵌入跨源脚本。语法错误信息只能被同源脚本中捕捉到。</li>\n  <li><code>&lt;link rel=\"stylesheet\" href=\"...\"&gt;</code> 标签嵌入 CSS。由于 CSS 的<a href=\"http://scarybeastsecurity.blogspot.dk/2009/12/generic-cross-browser-cross-domain.html\" class=\"external\" rel=\" noopener\">松散的语法规则</a>，CSS 的跨源需要一个设置正确的 HTTP 头部 <code>Content-Type</code> 。不同浏览器有不同的限制： <a href=\"http://msdn.microsoft.com/zh-CN/library/ie/gg622939%28v=vs.85%29.aspx\" class=\"external\" rel=\" noopener\">IE</a>, <a href=\"https://www.mozilla.org/security/announce/2010/mfsa2010-46.html\" class=\"external\" rel=\" noopener\">Firefox</a>, <a href=\"https://code.google.com/p/chromium/issues/detail?id=9877\" class=\"external\" rel=\" noopener\">Chrome</a>, <a href=\"https://support.apple.com/kb/HT4070\" class=\"external\" rel=\" noopener\">Safari</a> (跳至 CVE-2010-0051) 部分 和 <a href=\"https://www.opera.com/support/kb/view/943/\" class=\"external\" rel=\" noopener\">Opera</a>。</li>\n  <li>通过 <a href=\"/zh-CN/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a> 展示的图片。支持的图片格式包括 PNG,JPEG,GIF,BMP,SVG,...</li>\n  <li>通过 <a href=\"/zh-CN/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a> 和 <a href=\"/zh-CN/docs/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a> 播放的多媒体资源。</li>\n  <li>通过 <a href=\"/zh-CN/docs/Web/HTML/Element/object\"><code>&lt;object&gt;</code></a>、 <a href=\"/en-US/docs/Web/HTML/Element/embed\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">&lt;embed&gt; (en-US)</a> 和 <a href=\"/en-US/docs/Web/HTML/Element/applet\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">&lt;applet&gt; (en-US)</a> 嵌入的插件。</li>\n  <li>通过 <a href=\"/zh-CN/docs/Web/CSS/@font-face\"><code>@font-face</code></a> 引入的字体。一些浏览器允许跨源字体（cross-origin fonts），一些需要同源字体（same-origin fonts）。</li>\n  <li>通过 <a href=\"/zh-CN/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a> 载入的任何资源。站点可以使用 <a href=\"/en-US/docs/Web/HTTP/Headers/X-Frame-Options\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">X-Frame-Options (en-US)</a> 消息头来阻止这种形式的跨源交互。</li>\n</ul>"}},{"type":"prose","value":{"id":"如何允许跨源访问","title":"如何允许跨源访问","isH3":true,"content":"<p>可以使用 <a href=\"/zh-CN/docs/Web/HTTP/CORS\">CORS</a> 来允许跨源访问。CORS 是 <a href=\"/zh-CN/docs/Glossary/HTTP\">HTTP</a> 的一部分，它允许服务端来指定哪些主机可以从这个服务端加载资源。</p>"}},{"type":"prose","value":{"id":"如何阻止跨源访问","title":"如何阻止跨源访问","isH3":true,"content":"<ul>\n  <li>阻止跨源写操作，只要检测请求中的一个不可推测的标记 (CSRF token) 即可，这个标记被称为 <a href=\"https://owasp.org/www-community/attacks/csrf\" class=\"external\" rel=\" noopener\">Cross-Site Request Forgery (CSRF)</a> 标记。你必须使用这个标记来阻止页面的跨源读操作。</li>\n  <li>阻止资源的跨源读取，需要保证该资源是不可嵌入的。阻止嵌入行为是必须的，因为嵌入资源通常向其暴露信息。</li>\n  <li>阻止跨源嵌入，需要确保你的资源不能通过以上列出的可嵌入资源格式使用。浏览器可能不会遵守 <code>Content-Type</code> 头部定义的类型。例如，如果您在 HTML 文档中指定 <code>&lt;script&gt;</code> 标记，则浏览器将尝试将标签内部的 HTML 解析为 JavaScript。当您的资源不是您网站的入口点时，您还可以使用 CSRF 令牌来防止嵌入。</li>\n</ul>"}},{"type":"prose","value":{"id":"跨源脚本_api_访问","title":"跨源脚本 API 访问","isH3":false,"content":"<p>JavaScript 的 API 中，如 <a href=\"/en-US/docs/Web/API/HTMLIFrameElement\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">iframe.contentWindow (en-US)</a>、 <a href=\"/zh-CN/docs/Web/API/Window/parent\"><code>window.parent</code></a>、<a href=\"/zh-CN/docs/Web/API/Window/open\"><code>window.open</code></a> 和 <a href=\"/zh-CN/docs/Web/API/Window/opener\"><code>window.opener</code></a> 允许文档间直接相互引用。当两个文档的源不同时，这些引用方式将对 <a href=\"https://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#security-window\" class=\"external\" rel=\" noopener\">Window</a> 和 <a href=\"https://www.whatwg.org/specs/web-apps/current-work/multipage/history.html#security-location\" class=\"external\" rel=\" noopener\">Location</a>对象的访问添加限制，如下两节所述。</p>\n<p>为了能让不同源中文档进行交流，可以使用 <a href=\"/zh-CN/docs/Web/API/Window/postMessage\"><code>window.postMessage</code></a>。</p>\n<p>规范：<a href=\"https://html.spec.whatwg.org/multipage/browsers.html#cross-origin-objects\" class=\"external\" rel=\" noopener\">HTML Living Standard § Cross-origin objects</a> 。</p>"}},{"type":"prose","value":{"id":"window","title":"Window","isH3":true,"content":"<p>允许以下对 <code>Window</code> 属性的跨源访问：</p>\n<table>\n  <thead>\n    <tr>\n      <th>方法</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/API/Window/blur\"><code>window.blur</code></a></td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/API/Window/close\"><code>window.close</code></a></td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/API/Window/focus\"><code>window.focus</code></a></td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/API/Window/postMessage\"><code>window.postMessage</code></a></td>\n    </tr>\n  </tbody>\n</table>\n<table>\n  <thead>\n    <tr>\n      <th>属性</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/API/Window/closed\"><code>window.closed</code></a></td>\n      <td>只读。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/API/Window/frames\"><code>window.frames</code></a></td>\n      <td>只读。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/API/Window/length\"><code>window.length</code></a></td>\n      <td>只读。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/API/Window/location\"><code>window.location</code></a></td>\n      <td>读/写。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/API/Window/opener\"><code>window.opener</code></a></td>\n      <td>只读。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/API/Window/parent\"><code>window.parent</code></a></td>\n      <td>只读。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/API/Window/self\"><code>window.self</code></a></td>\n      <td>只读。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/API/Window/top\"><code>window.top</code></a></td>\n      <td>只读。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/API/Window/window\"><code>window.window</code></a></td>\n      <td>只读。</td>\n    </tr>\n  </tbody>\n</table>\n<p>某些浏览器允许访问除上述外更多的属性。</p>"}},{"type":"prose","value":{"id":"location","title":"Location","isH3":true,"content":"<p>允许以下对 <code>Location</code> 属性的跨源访问：</p>\n<table>\n  <thead>\n    <tr>\n      <th>方法</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/API/Location/replace\"><code>location.replace</code></a></td>\n    </tr>\n  </tbody>\n</table>\n<table>\n  <thead>\n    <tr>\n      <th>属性</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/API/HTMLAnchorElement/href\"><code>HTMLAnchorElement.href</code></a></td>\n      <td>只写。</td>\n    </tr>\n  </tbody>\n</table>\n<p>某些浏览器允许访问除上述外更多的属性。</p>"}},{"type":"prose","value":{"id":"跨源数据存储访问","title":"跨源数据存储访问","isH3":false,"content":"<p>访问存储在浏览器中的数据，如 <a href=\"/zh-CN/docs/Web/API/Window/localStorage\">localStorage</a> 和 <a href=\"/zh-CN/docs/Web/API/IndexedDB_API\">IndexedDB</a>，是以源进行分割。每个源都拥有自己单独的存储空间，一个源中的 JavaScript 脚本不能对属于其它源的数据进行读写操作。</p>\n<p><a href=\"/zh-CN/docs/Glossary/Cookie\">Cookies</a> 使用不同的源定义方式。一个页面可以为本域和其父域设置 cookie，只要是父域不是公共后缀（public suffix）即可。Firefox 和 Chrome 使用 <a href=\"http://publicsuffix.org/\" class=\"external\" rel=\" noopener\">Public Suffix List</a> 检测一个域是否是公共后缀（public suffix）。Internet Explorer 使用其内部的方法来检测域是否是公共后缀。不管使用哪个协议（HTTP/HTTPS）或端口号，浏览器都允许给定的域以及其任何子域名 (sub-domains) 访问 cookie。当你设置 cookie 时，你可以使用 <code>Domain</code>、<code>Path</code>、<code>Secure</code>、和 <code>HttpOnly</code> 标记来限定其无障碍。当你读取 cookie 时，你无法知道它是在哪里被设置的。即使您只使用安全的 https 连接，您看到的任何 cookie 都有可能是使用不安全的连接进行设置的。</p>"}},{"type":"prose","value":{"id":"参见","title":"参见","isH3":false,"content":"<ul>\n  <li><a href=\"https://www.w3.org/Security/wiki/Same_Origin_Policy\" class=\"external\" rel=\" noopener\">Same-Origin Policy at W3C</a></li>\n  <li><a href=\"http://web.dev/secure/same-origin-policy\" class=\"external\" rel=\" noopener\">http://web.dev/secure/same-origin-policy</a></li>\n</ul>"}}],"toc":[{"text":"同源的定义","id":"同源的定义"},{"text":"<strong>源</strong>的更改","id":"源的更改"},{"text":"跨源网络访问","id":"跨源网络访问"},{"text":"跨源脚本 API 访问","id":"跨源脚本_api_访问"},{"text":"跨源数据存储访问","id":"跨源数据存储访问"},{"text":"参见","id":"参见"}],"summary":"同源策略是一个重要的安全策略，它用于限制一个origin的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介。","popularity":0.0022,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Same-origin policy","locale":"en-US","native":"English (US)"},{"title":"Política Same-origin","locale":"es","native":"Español"},{"title":"Same-origin policy","locale":"fr","native":"Français"},{"title":"同一オリジンポリシー","locale":"ja","native":"日本語"},{"title":"동일 출처 정책","locale":"ko","native":"한국어"},{"title":"Same-origin policy","locale":"ru","native":"Русский"},{"title":"同源政策 (Same-origin policy)","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/web/security/same-origin_policy","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/security/same-origin_policy/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/Security","title":"Web 安全"},{"uri":"/zh-CN/docs/Web/Security/Same-origin_policy","title":"浏览器的同源策略"}],"pageTitle":"浏览器的同源策略 - Web 安全 | MDN","noIndexing":false}}