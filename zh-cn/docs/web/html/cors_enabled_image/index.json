{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"启用了 CORS 的图片","mdn_url":"/zh-CN/docs/Web/HTML/CORS_enabled_image","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>HTML 规范中图片有一个 <code><a href=\"/zh-CN/docs/Web/HTML/Element/img#attr-crossorigin\"><code>crossorigin</code></a></code> 属性，结合合适的 <code><a href=\"/zh-CN/docs/Glossary/CORS\">CORS</a></code> 响应头，就可以实现在画布中使用跨域 <code><a href=\"/zh-CN/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a></code> 元素的图像，就像在原生 <code><a href=\"/zh-CN/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a></code> 中使用一样。</p>\n<p>查看 <a href=\"/zh-CN/docs/Web/HTML/Attributes/crossorigin\">CORS settings attributes</a> 来了解更多 <code>crossorigin</code> 属性的用法。</p>"}},{"type":"prose","value":{"id":"安全性和“被污染”的_canvas","title":"安全性和“被污染”的 canvas","isH3":false,"content":"<p>由于在 <code><a href=\"/zh-CN/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a></code> 位图中的像素可能来自多种来源，包括从其他主机检索的图像或视频，因此不可避免的会出现安全问题。</p>\n<p>尽管不通过 CORS 就可以在 <code><a href=\"/zh-CN/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a></code> 中使用其他来源的图片，但是这会<strong>污染</strong>画布，并且不再认为是安全的画布，这将可能在 <code><a href=\"/zh-CN/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a></code> 检索数据过程中引发异常。</p>\n<p>如果从外部引入的 HTML <code><a href=\"/zh-CN/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a></code> 或 SVG <code><a href=\"/zh-CN/docs/Web/SVG/Element/svg\"><code>&lt;svg&gt;</code></a></code> ，并且图像源不符合规则，将会被阻止从 <code><a href=\"/zh-CN/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a></code> 中读取数据。</p>\n<p>在\"被污染\"的画布中调用以下方法将会抛出安全错误：</p>\n<ul>\n  <li>在 <code><a href=\"/zh-CN/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a></code> 的上下文上调用<code><a href=\"/zh-CN/docs/Web/API/CanvasRenderingContext2D/getImageData\" title=\"getImageData()\"><code>getImageData()</code></a></code></li>\n  <li>在 <code><a href=\"/zh-CN/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a></code> 上调用 <code><a href=\"/zh-CN/docs/Web/API/HTMLCanvasElement/toBlob\" title=\"toBlob()\"><code>toBlob()</code></a></code></li>\n  <li>在 <code><a href=\"/zh-CN/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a></code> 上调用 <code><a href=\"/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL\" title=\"toDataURL()\"><code>toDataURL()</code></a></code></li>\n</ul>\n<p>这种机制可以避免未经许可拉取远程网站信息而导致的用户隐私泄露。</p>"}},{"type":"prose","value":{"id":"示例：存储一张外部域中的图片","title":"示例：存储一张外部域中的图片","isH3":false,"content":"<p>在以下例子中，将实现允许检索来自外部的图像，并将其保存在本地存储。要实现这一点，我们需要配置服务器以及网站本身的编码。</p>"}},{"type":"prose","value":{"id":"网站服务器配置","title":"网站服务器配置","isH3":true,"content":"<p>首先，你必须有一个可以对图片响应正确 <code>Access-Control-Allow-Origin</code> 响应头的服务器。你可以使用以下片段 (来自 <a href=\"https://github.com/h5bp/server-configs-apache/blob/fc379c45f52a09dd41279dbf4e60ae281110a5b0/src/.htaccess#L36-L53\" class=\"external\" rel=\" noopener\">HTML5 Boilerplate Apache server configs</a>) 实现正确响应头，该配置为允许跨域访问图片。</p>\n<div class=\"code-example\"><pre class=\"brush: xml notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IfModule</span> <span class=\"token attr-name\">mod_setenvif.c</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IfModule</span> <span class=\"token attr-name\">mod_headers.c</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>FilesMatch</span> <span class=\"token attr-name\">\"\\.(cur|gif|ico|jpe?g|png|svgz?|webp)$\"</span><span class=\"token punctuation\">&gt;</span></span>\n            SetEnvIf Origin \":\" IS_CORS\n            Header set Access-Control-Allow-Origin \"*\" env=IS_CORS\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>FilesMatch</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>IfModule</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>IfModule</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>现在已经将服务器配置为允许跨源检索这些不同格式的图像。</p>"}},{"type":"prose","value":{"id":"实现保存功能","title":"实现保存功能","isH3":true,"content":"<p>配置完毕后，你就可以将这些格式的图片保存到本地 <a href=\"/en-US/docs/Web/API/Web_Storage_API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">DOM 存储 (en-US)</a> 中了，就像这些图片在你自己域名之下一样。</p>\n<p>在 <code><a href=\"/zh-CN/docs/Web/API/HTMLImageElement\"><code>HTMLImageElement</code></a></code> 上设置 <code><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLImageElement/crossOrigin\"><code>crossOrigin</code> <small>(en-US)</small></a></code> 的 <code><a href=\"/zh-CN/docs/Web/HTML/Global_attributes#attr-crossorigin\"><code>crossorigin</code></a></code> 属性，这将允许浏览器在下载图像数据时允许跨域访问请求。</p>\n<h4 id=\"开始下载图片\">开始下载图片</h4>\n<p>以下代码将在用户点击 \"<code>Download</code>\" 按钮时开始下载：</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">function startDownload() {\n  let imageURL = \"https://cdn.glitch.com/4c9ebeb9-8b9a-4adc-ad0a-238d9ae00bb5%2Fmdn_logo-only_color.svg?1535749917189\";\n\n  downloadedImg = new Image();\n  downloadedImg.crossOrigin = \"Anonymous\";\n  downloadedImg.addEventListener(\"load\", imageReceived, false);\n  downloadedImg.src = imageURL;\n}\n</pre></div>\n<p>使用 \"硬编码\" 图片网址可以很方便的允许图片来自任何地址。当开始下载图片时，我们使用 <code><a href=\"/zh-CN/docs/Web/API/HTMLImageElement/Image\" title=\"Image()\"><code>Image()</code></a></code> 构造器创建新的 <code><a href=\"/zh-CN/docs/Web/API/HTMLImageElement\"><code>HTMLImageElement</code></a></code> 对象，将图片的 <code>crossOrigin</code> 属性设置为\"<code>匿名</code>\"（即，允许对未经过验证的图像进行跨域下载）。添加图片的 <code><code><a href=\"/en-US/docs/Web/API/Window/load_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">load (en-US)</a></code></code>事件的监听来判断图片数据是否已接收。</p>\n<p>最后，将图片的 <code><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLImageElement/src\"><code>src</code> <small>(en-US)</small></a></code>属性设置为图片的 URL 以触发图片下载。</p>\n<h4 id=\"接收和保存图片\">接收和保存图片</h4>\n<p>在 <code>imageReceived()</code> 方法中来处理新下载的图片：</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">function imageReceived() {\n  let canvas = document.createElement(\"canvas\");\n  let context = canvas.getContext(\"2d\");\n\n  canvas.width = downloadedImg.width;\n  canvas.height = downloadedImg.height;\n\n  context.drawImage(downloadedImg, 0, 0);\n  imageBox.appendChild(canvas);\n\n  try {\n    localStorage.setItem(\"saved-image-example\", canvas.toDataURL(\"image/png\"));\n  }\n  catch(err) {\n    console.log(\"Error: \" + err);\n  }\n}\n</pre></div>\n<p>在 <code>HTMLImageElement</code> 调用 <code>imageReceived()</code>来处理\"<code>load</code>\" 事件以接收下载图片。一旦下载完成全部有效的数据即可触发该事件。从创建新 <code><a href=\"/zh-CN/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a></code> 元素将图像转换为数据 URL，到访问画布的变量 <code>context</code> 中的 2D 绘图上下文 <code>(<a href=\"/zh-CN/docs/Web/API/CanvasRenderingContext2D\"><code>CanvasRenderingContext2D</code></a>)</code>.</p>\n<p>调整画布大小以匹配接收到的图像，然后使用 <code><a href=\"/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage\" title=\"drawImage()\"><code>drawImage()</code></a></code> 将图像绘制到画布中。画布之后被插入到文档中显示。</p>\n<p>我们使用 Web Storage API 的本地存储机制来将图片实际存储到本地，该机制可通过全局 <code><a href=\"/zh-CN/docs/Web/API/Window/localStorage\" title=\"localStorage\"><code>localStorage</code></a></code> 进行访问。<code>canvas</code> 的 <code><a href=\"/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL\" title=\"toDataURL()\"><code>toDataURL()</code></a></code> 方法用于将图像转换为 data:// URL 形式的 PNG 格式图片，之后使用 <code><a href=\"/zh-CN/docs/Web/API/Storage/setItem\" title=\"setItem()\"><code>setItem()</code></a></code> 存储到本地。</p>\n<p>您可以在 Glitch 上<a href=\"https://cors-image-example.glitch.me\" class=\"external\" rel=\" noopener\">尝试</a>或<a href=\"https://glitch.com/edit/#!/remix/cors-image-example\" class=\"external\" rel=\" noopener\">重写</a>此例子。</p>"}},{"type":"prose","value":{"id":"另请参阅","title":"另请参阅","isH3":false,"content":"<ul>\n  <li><a href=\"https://blog.chromium.org/2011/07/using-cross-domain-images-in-webgl-and.html\" class=\"external\" rel=\" noopener\">在 Chrome 13 的 WebGL 中使用跨域图片</a></li>\n  <li><a href=\"http://whatwg.org/html#attr-img-crossorigin\" class=\"external\" rel=\" noopener\">HTML 标准 - <code>crossorigin</code> 属性</a></li>\n</ul>"}}],"toc":[{"text":"安全性和“被污染”的 canvas","id":"安全性和“被污染”的_canvas"},{"text":"示例：存储一张外部域中的图片","id":"示例：存储一张外部域中的图片"},{"text":"另请参阅","id":"另请参阅"}],"summary":"HTML 规范中图片有一个 crossorigin 属性，结合合适的 CORS 响应头，就可以实现在画布中使用跨域 <img> 元素的图像，就像在原生 <canvas> 中使用一样。","popularity":0.0007,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Allowing cross-origin use of images and canvas","locale":"en-US","native":"English (US)"},{"title":"Imagen con CORS habilitado","locale":"es","native":"Español"},{"title":"Autoriser les images et canevas provenant d'autres origines","locale":"fr","native":"Français"},{"title":"画像とキャンバスをオリジン間で利用できるようにする","locale":"ja","native":"日本語"},{"title":"교차 출처 이미지와 캔버스 허용하기","locale":"ko","native":"한국어"},{"title":"CORS_habilitar_imagens","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Разрешение использования изображений из разных источников и canvas","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/html/cors_enabled_image","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/html/cors_enabled_image/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/HTML","title":"HTML（超文本标记语言）"},{"uri":"/zh-CN/docs/Web/HTML/CORS_enabled_image","title":"启用了 CORS 的图片"}],"pageTitle":"启用了 CORS 的图片 - HTML（超文本标记语言） | MDN","noIndexing":false}}