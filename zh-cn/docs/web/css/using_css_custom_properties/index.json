{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"使用 CSS 自定义属性（变量）","mdn_url":"/zh-CN/docs/Web/CSS/Using_CSS_custom_properties","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>自定义属性</strong>（有时候也被称作<strong>CSS 变量</strong>或者<strong>级联变量</strong>）是由 CSS 作者定义的，它包含的值可以在整个文档中重复使用。由自定义属性标记设定值（比如： <strong><code>--main-color: black;</code></strong>），由 <a href=\"/zh-CN/docs/Web/CSS/var\">var()</a> 函数来获取值（比如： <code>color: var(--main-color);</code>）复杂的网站都会有大量的 CSS 代码，通常也会有许多重复的值。举个例子，同样一个颜色值可能在成千上百个地方被使用到，如果这个值发生了变化，需要全局搜索并且一个一个替换（很麻烦哎～）。自定义属性在某个地方存储一个值，然后在其他许多地方引用它。另一个好处是语义化的标识。比如，<code>--main-text-color</code> 会比 <code>#00ff00</code> 更易理解，尤其是这个颜色值在其他上下文中也被使用到。自定义属性受级联的约束，并从其父级继承其值。</p>"}},{"type":"prose","value":{"id":"基本用法","title":"基本用法","isH3":false,"content":"<p>声明一个自定义属性，属性名需要以两个减号（<code>--</code>）开始，属性值则可以是任何有效的 CSS 值。和其他属性一样，自定义属性也是写在规则集之内的，如下：</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">element</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--main-bg-color</span><span class=\"token punctuation\">:</span> brown<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>注意，规则集所指定的选择器定义了自定义属性的可见作用域。通常的最佳实践是定义在根伪类 <a href=\"/zh-CN/docs/Web/CSS/:root\"><code>:root</code></a> 下，这样就可以在 HTML 文档的任何地方访问到它了：</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">:root</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--main-bg-color</span><span class=\"token punctuation\">:</span> brown<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>然而这条规则不是绝对的，如果有理由去限制你的自定义属性，那么就应该限制。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 自定义属性名是大小写敏感的，<code>--my-color</code> 和 <code>--My-color</code> 会被认为是两个不同的自定义属性。</p>\n</div>\n<p>如前所述，使用一个局部变量时用 <a href=\"/zh-CN/docs/Web/CSS/var\"><code>var()</code></a> 函数包裹以表示一个合法的属性值：</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">element</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--main-bg-color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"使用自定义属性的第一步","title":"使用自定义属性的第一步","isH3":false,"content":"<p>我们从这个简单的 CSS 代码开始，它将相同的颜色应用在了不同 class 的元素上：</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.one</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> brown<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.two</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 70px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.three</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> brown<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 75px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.four</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> brown<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.five</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> brown<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>应用在如下 HTML 上：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>one<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>1:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>two<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>2: Text <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>five<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>5 - more text<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>three<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>four<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>4: Lorem Ipsum<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textarea</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>其呈现是：</p><iframe class=\"sample-code-frame\" title=\"使用自定义属性的第一步\" id=\"frame_first_steps_with_custom_properties\" width=\"600\" height=\"180\" src=\"https://yari-demos.prod.mdn.mozit.cloud/zh-CN/docs/Web/CSS/Using_CSS_custom_properties/_sample_.first_steps_with_custom_properties.html\" loading=\"lazy\"></iframe>\n<p>注意到在 CSS 代码中的重复：背景色 <code>brown</code> 被多处设置。对于一些 CSS 声明，是可以在级联关系更高的位置设置，通过 CSS 继承自然地解决这个重复的问题。但在一般项目中，是不可能通过这样的方式去解决。通过在 <a href=\"/zh-CN/docs/Web/CSS/:root\"><code>:root</code></a> 伪类上设置自定义属性，然后在整个文档需要的地方使用，可以减少这样的重复性：</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">:root</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--main-bg-color</span><span class=\"token punctuation\">:</span> brown<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.one</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--main-bg-color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.two</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 70px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.three</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--main-bg-color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 75px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.four</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--main-bg-color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.five</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--main-bg-color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>这里呈现的结果和前面的例子是一致的，但允许对所需属性值进行一个规范的声明。</p>"}},{"type":"prose","value":{"id":"自定义属性的继承性","title":"自定义属性的继承性","isH3":false,"content":"<p>自定义属性会继承。这意味着如果在一个给定的元素上，没有为这个自定义属性设置值，在其父元素上的值会被使用。看这一段 HTML：</p>\n<pre class=\"notranslate\">&lt;div class=\"one\"&gt;\n  &lt;div class=\"two\"&gt;\n    &lt;div class=\"three\"&gt;&lt;/div&gt;\n    &lt;div class=\"four\"&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre>\n<p>配套的 CSS：</p>\n<pre class=\"notranslate\">.two {\n  --test: 10px;\n}\n\n.three {\n  --test: 2em;\n}\n</pre>\n<p>在这个情况下， <code>var(--test)</code> 的结果分别是：</p>\n<ul>\n  <li>对于元素 <code>class=\"two\"</code> ：<code>10px</code></li>\n  <li>对于元素 <code>class=\"three\"</code> ：<code>2em</code></li>\n  <li>对于元素 <code>class=\"four\"</code> ：<code>10px</code> （继承自父属性）</li>\n  <li>对于元素 <code>class=\"one\"</code> ：<em>非法值</em>，会变成自定义属性的默认值</li>\n</ul>\n<p>注意，这些是自定义属性，并不是你在其他编程语言中遇到的实际的变量。这些值仅当需要的时候才会计算，而并不会按其他规则进行保存。比如，你不能为元素设置一个属性，然后让它从兄弟或旁支子孙规则上获取值。属性仅用于匹配当前选择器及其子孙，这和通常的 CSS 是一样的。</p>"}},{"type":"prose","value":{"id":"自定义属性备用值","title":"自定义属性备用值","isH3":false,"content":"<p>用 <a href=\"/zh-CN/docs/Web/CSS/var\"><code>var()</code></a> 函数可以定义多个<strong>备用值</strong>(fallback value)，当给定值未定义时将会用备用值替换。这对于 <a href=\"/zh-CN/docs/Web/Web_Components/Using_custom_elements\">Custom Elements</a> 和 <a href=\"/zh-CN/docs/Web/Web_Components/Using_shadow_DOM\">Shadow DOM</a> 都很有用。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 备用值并不是用于实现浏览器兼容性的。如果浏览器不支持 CSS 自定义属性，备用值也没什么用。它仅对支持 CSS 自定义属性的浏览器提供了一个备份机制，该机制仅当给定值未定义或是无效值的时候生效。</p>\n</div>\n<p>函数的第一个参数是<a href=\"https://www.w3.org/TR/css-variables/#custom-property\" class=\"external\" rel=\" noopener\">自定义属性</a>的名称。如果提供了第二个参数，则表示备用值，当<a href=\"https://www.w3.org/TR/css-variables/#custom-property\" class=\"external\" rel=\" noopener\">自定义属性</a>值无效时生效。第二个参数可以嵌套，但是不能继续平铺展开下去了，例如：</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">.two</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--my-var<span class=\"token punctuation\">,</span> red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Red if --my-var is not defined */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.three</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--my-var<span class=\"token punctuation\">,</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--my-background<span class=\"token punctuation\">,</span> pink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* pink if --my-var and --my-background are not defined */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.three</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--my-var<span class=\"token punctuation\">,</span> --my-background<span class=\"token punctuation\">,</span> pink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Invalid: \"--my-background, pink\" */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>第二个例子展示了如何处理一个以上的 fallback。该技术可能会导致性能问题，因为它花了更多的时间在处理这些变量上。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 像<a href=\"https://www.w3.org/TR/css-variables/#custom-property\" class=\"external\" rel=\" noopener\">自定义属性</a>这些 fallback 语法允许使用逗号。比如 <code>var(--foo, red, blue)</code> 定义了一个 <code>red, blue</code> 的备用值——从第一个逗号到最后的全部内容，都会被作为备用值的一部分。</p>\n</div>"}},{"type":"prose","value":{"id":"有效性和值","title":"有效性和值","isH3":false,"content":"<p>传统的 CSS 概念里，有效性和属性是绑定的，这对自定义属性来说并不适用。当自定义属性值被解析，浏览器不知道它们什么时候会被使用，所以必须认为这些值都是<em>有效的</em>。</p>\n<p>不幸的是，即便这些值是有效的，但当通过 <code>var()</code> 函数调用时，它在特定上下文环境下也可能不会奏效。属性和自定义变量会导致无效的 CSS 语句，这引入了一个新的概念：<em>计算时有效性</em>。</p>"}},{"type":"prose","value":{"id":"无效变量会导致什么？","title":"无效变量会导致什么？","isH3":false,"content":"<p>当浏览器遇到无效的 <code>var()</code> 时，会使用继承值或初始值代替。</p>\n<p>考虑如下代码：</p>"}},{"type":"prose","value":{"id":"html","title":"HTML","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>This paragraph is initial black.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"css","title":"CSS","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">:root</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">--text-color</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">p</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--text-color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>毫不意外，浏览器将 <code>--text-color</code> 的值替换给了 <code>var(--text-color)</code>，但是 <code>16px</code> 并不是 <a href=\"/zh-CN/docs/Web/CSS/color\"><code>color</code></a> 的合法属性值。代换之后，该属性不会产生任何作用。浏览器会执行如下两个步骤：</p>\n<ol>\n  <li>检查属性 color 是否为继承属性。是，但是 <code>&lt;p&gt;</code> 没有任何父元素定义了 color 属性。转到下一步。</li>\n  <li>将该值设置为它的<strong>默认初始值</strong>，比如 black。</li>\n</ol>"}},{"type":"prose","value":{"id":"result","title":"Result","isH3":true,"content":"<iframe class=\"sample-code-frame\" title=\"无效变量会导致什么？\" id=\"frame_what_happens_with_invalid_variables\" src=\"https://yari-demos.prod.mdn.mozit.cloud/zh-CN/docs/Web/CSS/Using_CSS_custom_properties/_sample_.what_happens_with_invalid_variables.html\" loading=\"lazy\"></iframe>\n<p>段落颜色并不是蓝色，因为无效代换导致了它被替换成了默认初始值的黑色。如果你直接写 <code>color: 16px</code> 的话，则会导致语法错误，而前面的定义则会生效（段落显示为蓝色）。</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>备注：</strong> 当 CSS 属性 - 值对中存在语法错误，该行则会被忽略。然而如果自定义属性的值无效，它并不会被忽略，从而会导致该值被覆盖为默认值。</p>\n</div>"}},{"type":"prose","value":{"id":"javascript_中的值","title":"JavaScript 中的值","isH3":false,"content":"<p>在 JavaScript 中获取或者修改 CSS 变量和操作普通 CSS 属性是一样的：</p>\n<pre class=\"notranslate\">// 获取一个 Dom 节点上的 CSS 变量\nelement.style.getPropertyValue(\"--my-var\");\n\n// 获取任意 Dom 节点上的 CSS 变量\ngetComputedStyle(element).getPropertyValue(\"--my-var\");\n\n// 修改一个 Dom 节点上的 CSS 变量\nelement.style.setProperty(\"--my-var\", jsVar + 4);\n</pre>"}},{"type":"prose","value":{"id":"浏览器支持","title":"浏览器支持","isH3":false,"content":"{{Compat}}\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>备注：</strong> 自定义属性的前缀 <code>var-</code> 是早期标准规定的，后期改为了 <code>--</code>。Firefox 31 和以后的版本遵循新的标准。 (<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=985838\" class=\"external\" rel=\" noopener\">bug&nbsp;985838</a>)</p>\n</div>"}},{"type":"prose","value":{"id":"参见","title":"参见","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/CSS/--*\"><code>custom properties</code></a></li>\n</ul>"}}],"toc":[{"text":"基本用法","id":"基本用法"},{"text":"使用自定义属性的第一步","id":"使用自定义属性的第一步"},{"text":"自定义属性的继承性","id":"自定义属性的继承性"},{"text":"自定义属性备用值","id":"自定义属性备用值"},{"text":"有效性和值","id":"有效性和值"},{"text":"无效变量会导致什么？","id":"无效变量会导致什么？"},{"text":"JavaScript 中的值","id":"javascript_中的值"},{"text":"浏览器支持","id":"浏览器支持"},{"text":"参见","id":"参见"}],"summary":"自定义属性（有时候也被称作CSS 变量或者级联变量）是由 CSS 作者定义的，它包含的值可以在整个文档中重复使用。由自定义属性标记设定值（比如： --main-color: black;），由 var() 函数来获取值（比如： color: var(--main-color);）复杂的网站都会有大量的 CSS 代码，通常也会有许多重复的值。举个例子，同样一个颜色值可能在成千上百个地方被使用到，如果这个值发生了变化，需要全局搜索并且一个一个替换（很麻烦哎～）。自定义属性在某个地方存储一个值，然后在其他许多地方引用它。另一个好处是语义化的标识。比如，--main-text-color 会比 #00ff00 更易理解，尤其是这个颜色值在其他上下文中也被使用到。自定义属性受级联的约束，并从其父级继承其值。","popularity":0.0035,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using CSS custom properties (variables)","locale":"en-US","native":"English (US)"},{"title":"Uso de propiedades personalizadas (variables) en CSS","locale":"es","native":"Español"},{"title":"Les variables CSS","locale":"fr","native":"Français"},{"title":"CSS カスタムプロパティ (変数) の使用","locale":"ja","native":"日本語"},{"title":"사용자 지정 CSS 속성 사용하기 (변수)","locale":"ko","native":"한국어"},{"title":"Utilizando variáveis CSS","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Использование переменных в CSS","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/css/using_css_custom_properties","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/css/using_css_custom_properties/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/CSS","title":"CSS（层叠样式表）"},{"uri":"/zh-CN/docs/Web/CSS/Using_CSS_custom_properties","title":"使用 CSS 自定义属性（变量）"}],"pageTitle":"使用 CSS 自定义属性（变量） - CSS（层叠样式表） | MDN","noIndexing":false}}