{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"JavaScript 数据类型和数据结构","mdn_url":"/zh-CN/docs/Web/JavaScript/Data_structures","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n <ol>\n  <li><a href=\"/zh-CN/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/zh-CN/docs/Web/JavaScript/Tutorials\"><strong>教程:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>快速入门</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript 基础知识</a></li>\n        <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps\">JavaScript first steps</a></li>\n        <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks\">JavaScript building blocks</a></li>\n        <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>JavaScript 指南</summary>\n      <ol>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Introduction\">Introduction</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_Types\">Grammar and types</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Control flow and error handling</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Loops_and_iteration\">Loops and iteration</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Functions\">Functions</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressions and operators</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Numbers_and_dates\">Numbers and dates</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Text_formatting\">Text formatting</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions\">Regular expressions</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections\">Indexed collections</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Keyed_collections\">Keyed collections</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects\">Working with objects</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Details of the object model</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_generators\">Iterators and generators</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Meta_programming\">Meta programming</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>中级教程</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">深入 JavaScript</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Data_structures\">JavaScript 数据结构</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness\">如何正确判断相等性</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Closures\">Closures</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>高级</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">继承和原型链</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Strict_mode\">严格模式</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Typed_arrays\">JavaScript 类型化数组</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Memory_Management\">内存管理</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/EventLoop\">Concurrency model and Event Loop</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference\">引用:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>内置对象</summary>\n        <ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>表达式和运算符</summary>\n      <ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>语句和声明</summary>\n      <ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>函数</summary>\n      <ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>更多</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/JavaScript_technologies_overview\">JavaScript 知识概要</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar\">词法文法</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Data_structures\">JavaScript 数据结构</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">属性的可枚举性和所有权</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols\">Iteration protocols</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Strict_mode\">严格模式</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">切换到严格模式</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Template_literals\">模板字符串</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">已废弃的特性</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>编程语言都具有内建的数据结构，但各种编程语言的数据结构常有不同之处。本文试图列出 JavaScript 语言中内建的数据结构及其属性，它们可以用来构建其他的数据结构。同时尽可能地描述与其他语言的不同之处。</p>"}},{"type":"prose","value":{"id":"动态类型","title":"动态类型","isH3":false,"content":"<p>JavaScript 是一种<strong>弱类型</strong>或者说<strong>动态</strong>语言。这意味着你不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。这也意味着你可以使用同一个变量保存不同类型的数据：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// foo 现在是一个数字</span>\nfoo     <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// foo 现在是一个字符串</span>\nfoo     <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// foo 现在是一个布尔值</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"数据类型","title":"数据类型","isH3":false,"content":"<p>JavaScript 语言中类型集合由<a href=\"#%E5%8E%9F%E5%A7%8B%E5%80%BC\"><em>原始值</em></a>和<a href=\"#%E5%AF%B9%E8%B1%A1\"><em>对象</em></a>组成。</p>\n<ul>\n  <li><a href=\"#%E5%8E%9F%E5%A7%8B%E5%80%BC\">原始值</a>（直接表示在语言底层的不可变数据）\n    <ul>\n      <li><a href=\"#%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B\">布尔类型</a></li>\n      <li><a href=\"#null_%E7%B1%BB%E5%9E%8B\">Null 类型</a></li>\n      <li><a href=\"#undefined_%E7%B1%BB%E5%9E%8B\">Undefined 类型</a></li>\n      <li><a href=\"#%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B\">数字类型</a></li>\n      <li><a href=\"#bigint_%E7%B1%BB%E5%9E%8B\">BigInt 类型</a></li>\n      <li><a href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B\">字符串类型</a></li>\n      <li><a href=\"#%E7%AC%A6%E5%8F%B7%E7%B1%BB%E5%9E%8B\">符号类型</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#%E5%AF%B9%E8%B1%A1\">对象</a>（一组属性的集合）</li>\n</ul>"}},{"type":"prose","value":{"id":"原始值","title":"原始值","isH3":false,"content":"<p>除对象类型（object）以外的其它任何类型定义的不可变的值（值本身无法被改变）。例如（与 C 语言不同），JavaScript 中字符串是不可变的（译注：如，JavaScript 中对字符串的操作一定返回了一个新字符串，原始字符串并没有被改变）。我们称这些类型的值为“<em>原始值</em>”。</p>"}},{"type":"prose","value":{"id":"布尔类型","title":"布尔类型","isH3":true,"content":"<p>布尔表示一个逻辑实体，可以有两个值：<code>true</code> 和 <code>false</code>。更多详情可查看 <a href=\"/zh-CN/docs/Glossary/Boolean\">Boolean</a> 和 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a>。</p>"}},{"type":"prose","value":{"id":"null_类型","title":"Null 类型","isH3":true,"content":"<p>Null 类型只有一个值：<code>null</code>，更多详情可查看 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> 和 <a href=\"/zh-CN/docs/Glossary/Null\">Null</a>。</p>"}},{"type":"prose","value":{"id":"undefined_类型","title":"Undefined 类型","isH3":true,"content":"<p>一个没有被赋值的变量会有个默认值 <code>undefined</code>，更多详情可查看 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> 和 <a href=\"/zh-CN/docs/Glossary/undefined\">Undefined</a>。</p>"}},{"type":"prose","value":{"id":"数字类型","title":"数字类型","isH3":true,"content":"<p>ECMAScript 标准定义了两种内建数值类型：<strong>Number</strong>（数字类型）和 <strong>BigInt</strong>（见下方）。</p>\n<p>数字类型是一种<a href=\"https://zh.wikipedia.org/wiki/%E9%9B%99%E7%B2%BE%E5%BA%A6%E6%B5%AE%E9%BB%9E%E6%95%B8\" class=\"external\" rel=\" noopener\">基于 IEEE 754 标准的双精度 64 位二进制格式的值</a>（从 <code>-(2^53 -1)</code> 到 <code>2^53 - 1</code> 之间的数字）。除了能够表示浮点数外，还有三个带符号的值：<code>+Infinity</code>、<code>-Infinity</code> 和 <code>NaN</code>（非数值，<strong>N</strong>ot-<strong>a</strong>-<strong>N</strong>umber）。</p>\n<p>要检查值是否大于或小于 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>±Infinity</code></a>，你可以使用常量 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE\"><code>Number.MAX_VALUE</code></a> 和 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE\"><code>Number.MIN_VALUE</code></a>。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 从 ECMAScript 2015 开始，除了 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\"><code>Number.MAX_SAFE_INTEGER</code></a> 和 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER\"><code>Number.MIN_SAFE_INTEGER</code></a>，你还可以通过 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger\"><code>Number.isSafeInteger()</code></a> 来检查值是否在双精度浮点数的取值范围内。</p>\n  <p>超出这个范围，JavaScript 中的<strong>整数</strong>将不再安全，该值将表示为与该值近似的双精度浮点数。</p>\n</div>\n<p>数字类型中只有一个整数有两种表示方法：<code>0</code> 可表示为 <code>-0</code> 和 <code>+0</code>（<code>0</code> 是 <code>+0</code> 的简写）。</p>\n<p>在实践中，这几乎没有任何影响。例如，<code>+0 === -0</code> 为真。但是，你需要注意除以零的情况：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token operator\">&gt;</span> <span class=\"token number\">42</span> <span class=\"token operator\">/</span> <span class=\"token operator\">+</span><span class=\"token number\">0</span>\n<span class=\"token number\">Infinity</span>\n<span class=\"token operator\">&gt;</span> <span class=\"token number\">42</span> <span class=\"token operator\">/</span> <span class=\"token operator\">-</span><span class=\"token number\">0</span>\n<span class=\"token operator\">-</span><span class=\"token number\">Infinity</span>\n</code></pre></div>\n<p>尽管一个数字通常仅代表它本身的值，但 JavaScript 提供了一些<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators\"><code>位运算符</code></a>。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 虽然位运算符可通过 <a href=\"https://zh.wikipedia.org/wiki/%E6%8E%A9%E7%A0%81\" class=\"external\" rel=\" noopener\">掩码</a> 同时表示多个布尔类型的值，但这通常被认为是不好的。JavaScript 提供了其他的方式来表示一组布尔值（如一个布尔值数组或一个布尔值分配给命名属性的对象）。掩码也容易使代码变得难以阅读、理解和维护。</p>\n</div>\n<p>在一些非常受限的情况下，可能需要用到这些技术，比如试图应对本地存储的存储限制，或在一些极端场景下（例如，网络传输的每一比特都尤为重要时）。位操作只应该是用来优化字节数的最后选择。</p>"}},{"type":"prose","value":{"id":"bigint_类型","title":"BigInt 类型","isH3":true,"content":"<p>BigInt 类型是 JavaScript 中的一个基础的数值类型，可以表示任意精度的整数。使用 BigInt，您可以安全地存储和操作大整数，甚至可以超过<strong>数字类型</strong>的安全整数限制。</p>\n<p>BigInt 是通过在整数末尾附加字母 <code>n</code> 或调用构造函数来创建的。</p>\n<p>通过使用常量 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\"><code>Number.MAX_SAFE_INTEGER</code></a>，您可以获得可以用数字递增的最安全的值。通过引入 BigInt，您可以操作超过 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\"><code>Number.MAX_SAFE_INTEGER</code></a> 的数字。</p>\n<p>以下示例演示了，递增超过 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\"><code>Number.MAX_SAFE_INTEGER</code></a> 的值可以返回预期的结果：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// BigInt</span>\n<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SAFE_INTEGER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">9007199254740991n</span>\n<span class=\"token operator\">&gt;</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1n</span> <span class=\"token operator\">===</span> x <span class=\"token operator\">+</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9007199254740992n === 9007199254740993n</span>\n<span class=\"token boolean\">false</span>\n\n<span class=\"token comment\">// Number</span>\n<span class=\"token operator\">&gt;</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SAFE_INTEGER</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">===</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SAFE_INTEGER</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9007199254740992 === 9007199254740992</span>\n<span class=\"token boolean\">true</span>\n</code></pre></div>\n<p>可以对 BigInt 使用运算符 <code>+</code>、<code>*</code>、<code>-</code>、<code>**</code> 和 <code>%</code>，就像对数字一样。BigInt 严格来说并不等同于一个数字，但它也同样可以轻松地使用。</p>\n<p>在将 BigInt 转换为 <code>Boolean</code> 时（例如：<code>if</code>、<code>||</code>、<code>&amp;&amp;</code>、<code>Boolean</code> 和 <code>!</code>），它的行为类似于一个数字。</p>\n<p><code>BigInt</code> 不能与数字相互运算。否则，将抛出 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>。</p>"}},{"type":"prose","value":{"id":"字符串类型","title":"字符串类型","isH3":true,"content":"<p>JavaScript 的字符串类型用于表示文本数据。它是一组 16 位的无符号整数值的“元素”。在字符串中的每个元素占据了字符串的位置。第一个元素的索引为 <code>0</code>，下一个是索引 <code>1</code>，依此类推。字符串的长度是它的元素的数量。</p>\n<p>不同于一些编程语言（例如，C 语言），JavaScript 的字符串是不可更改的。这意味着字符串一旦被创建，就不能被修改。</p>\n<p>但是，可以基于对原始字符串的操作来创建新的字符串。例如：</p>\n<ul>\n  <li>获取一个字符串的子串可通过选择个别字母或者使用 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substr\"><code>String.substr()</code></a>。</li>\n  <li>两个字符串的连接使用连接运算符（<code>+</code>）或者 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/concat\"><code>String.concat()</code></a>。</li>\n</ul>\n<h4 id=\"注意代码中的“字符串类型”！\">注意代码中的“字符串类型”！</h4>\n<p>可以使用字符串来表达复杂的数据。以下是一些很好的性质：</p>\n<ul>\n  <li>容易通过字符串拼接来构造复杂的字串符</li>\n  <li>字符串容易被调试（你看到的往往在字符串里）</li>\n  <li>字符串通常是许多 APIs 的常见标准（<a href=\"/zh-CN/docs/Web/API/HTMLInputElement\">input fields</a>、<a href=\"/zh-CN/docs/Web/API/Web_Storage_API\">local storage</a> 中的值，以及 <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> 使用 <code>responseText</code> 等作为响应）而且这些 APIs 可能只能与字符串一同使用。</li>\n</ul>\n<p>使用约定，字符串一般可以用来表示任何数据结构。但这并不总是一个好主意。例如，使用一个分隔符，可以模拟一个列表（而 JavaScript 数组可能更适合）。不幸的是，当分隔符用于列表中的元素时，列表就会被破坏。这时可以选择转义字符，等等。所有这些都需要约定，并造成不必要的维护负担。</p>\n<p>表示文本数据时候推荐使用字符串。当需要表示复杂的数据时，使用字符串解析并使用适当的抽象。</p>"}},{"type":"prose","value":{"id":"符号类型","title":"符号类型","isH3":true,"content":"<p>符号（Symbols）类型是<strong>唯一</strong>且<strong>不可修改</strong>的原始值，并且可以用来作为对象的键 (key)（如下），在某些语言当中也有与之相似的类型（原子类型，atoms）。</p>\n<p>更多详情可查看 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a> 和 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a>。</p>"}},{"type":"prose","value":{"id":"对象","title":"对象","isH3":false,"content":"<p>在计算机科学中，对象（object）是指内存中的可以被<a href=\"/zh-CN/docs/Glossary/Identifier\">标识符</a>引用的一块区域。</p>"}},{"type":"prose","value":{"id":"属性","title":"属性","isH3":true,"content":"<p>在 JavaScript 中，对象可以被看作是一组属性的集合。用<a href=\"/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F_object_literals\">对象字面量语法</a>来定义一个对象时，会自动初始化一组属性。而后，这些属性还可以被添加和移除。属性的值可以是任意类型，包括其它对象。属性使用键（key）来标识，它的键值可以是一个<a href=\"/zh-CN/docs/Glossary/String\">字符串</a>或者<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">符号值</a>（Symbol）。</p>\n<p>对象拥有两种属性：<a href=\"#%E6%95%B0%E6%8D%AE%E5%B1%9E%E6%80%A7\">数据属性</a>和<a href=\"#%E8%AE%BF%E9%97%AE%E5%99%A8%E5%B1%9E%E6%80%A7\">访问器属性</a>。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 每个属性（property）都有对应的特性（attributes）。JavaScript 引擎在内部使用了特性（attributes），因此你不能直接访问它们。这就是为什么特性（attributes）被放在两对方括号内，而不是单独列出的原因。</p>\n  <p>参见 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a>。</p>\n</div>\n<h4 id=\"数据属性\">数据属性</h4>\n<p>数据属性是键值对，并且每个数据属性拥有下列特性：</p>\n<table class=\"standard-table\">\n  <caption>数据属性的特性（Attributes of a data property）</caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">特性</th>\n      <th scope=\"col\">数据类型</th>\n      <th scope=\"col\">描述</th>\n      <th scope=\"col\">默认值</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>[[Value]]</td>\n      <td>任何 Javascript 类型</td>\n      <td>包含这个属性的数据值。</td>\n      <td><code>undefined</code></td>\n    </tr>\n    <tr>\n      <td>[[Writable]]</td>\n      <td>Boolean</td>\n      <td>如果该值为 <code>false</code>，则该属性的 [[Value]] 特性不能被修改。</td>\n      <td><code>false</code></td>\n    </tr>\n    <tr>\n      <td>[[Enumerable]]</td>\n      <td>Boolean</td>\n      <td>\n        <p>\n          如果该值为 <code>true</code>，则该属性可以用\n          <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in\"><code>for...in</code></a>\n          循环来枚举。<br>参见\n          <a href=\"/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">属性的可枚举性和所有权</a>。\n        </p>\n      </td>\n      <td><code>false</code></td>\n    </tr>\n    <tr>\n      <td>[[Configurable]]</td>\n      <td>Boolean</td>\n      <td>\n        如果该值为 <code>false</code>，则该属性不能被删除（对于访问器属性则不能被修改），并且除了\n        [[Value]] 和 [[Writable]]\n        以外的特性都不能被修改。\n      </td>\n      <td><code>false</code></td>\n    </tr>\n  </tbody>\n</table>\n<table>\n  <thead>\n    <tr>\n      <th>特性</th>\n      <th>类型</th>\n      <th>描述</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Read-only</td>\n      <td>Boolean</td>\n      <td>ES5 [[Writable]] 属性的反状态 (Reversed state)。</td>\n    </tr>\n    <tr>\n      <td>DontEnum</td>\n      <td>Boolean</td>\n      <td>ES5 [[Enumerable]] 属性的反状态。</td>\n    </tr>\n    <tr>\n      <td>DontDelete</td>\n      <td>Boolean</td>\n      <td>ES5 [[Configurable]] 属性的反状态。</td>\n    </tr>\n  </tbody>\n</table>\n<h4 id=\"访问器属性\">访问器属性</h4>\n<p>访问器属性有一个或两个访问器函数（<code>get</code> 和 <code>set</code>）来存取数值。</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>备注：</strong> 它是访问器<strong>属性</strong>，而非访问器<strong>方法</strong>。我们可以将函数作为值赋给 JavaScript 对象的访问器（使得对象表现得像一个类）——但这不会使对象变成类。</p>\n</div>\n<p>访问器属性具有以下特性（attributes）：</p>\n<table>\n  <thead>\n    <tr>\n      <th>特性</th>\n      <th>类型</th>\n      <th>描述</th>\n      <th>默认值</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>[[Get]]</td>\n      <td>函数对象或者 <code>undefined</code></td>\n      <td>该函数使用一个空的参数列表，用于在有权访问的情况下读取属性值。参见 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Functions/get\"><code>get</code></a>。</td>\n      <td><code>undefined</code></td>\n    </tr>\n    <tr>\n      <td>[[Set]]</td>\n      <td>函数对象或者 <code>undefined</code></td>\n      <td>该函数有一个参数，用于在有权访问的情况下写入属性值。参见 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Functions/set\"><code>set</code></a>。</td>\n      <td><code>undefined</code></td>\n    </tr>\n    <tr>\n      <td>[[Enumerable]]</td>\n      <td>Boolean</td>\n      <td>如果该值为 <code>true</code>，则该属性可以用 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in\"><code>for...in</code></a> 循环来枚举。</td>\n      <td><code>false</code></td>\n    </tr>\n    <tr>\n      <td>[[Configurable]]</td>\n      <td>Boolean</td>\n      <td>如果该值为 <code>false</code>，则该属性不能被删除，且不能被转变成<strong>数据属性</strong></td>\n      <td><code>false</code></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"“标准的”对象和函数","title":"“标准的”对象和函数","isH3":true,"content":"<p>一个 JavaScript 对象就是键和值之间的映射。键是一个字符串（或者 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a>），值可以是任意类型的。这使得对象非常符合<a href=\"https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8\" class=\"external\" rel=\" noopener\">哈希表</a>。</p>\n<p>函数是一个附带可被调用功能的常规对象。</p>"}},{"type":"prose","value":{"id":"日期","title":"日期","isH3":true,"content":"<p>当你想要显示日期时，毋庸置疑，使用 JavaScript 内建的 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a> 对象。</p>"}},{"type":"prose","value":{"id":"有序集：数组和类型数组","title":"有序集：数组和类型数组","isH3":true,"content":"<p><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\">数组</a>是一种使用整数作为键（integer-keyed）属性并与长度（length）属性关联的常规对象。</p>\n<p>此外，数组对象还继承了 <code>Array.prototype</code> 的一些操作数组的便捷方法。例如，<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>indexOf()</code></a>（搜索数组中的一个值）或 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push\"><code>push()</code></a>（向数组中添加一个元素），等等。这使得数组是表示列表或集合的最优选择。</p>\n<p><a href=\"/zh-CN/docs/Web/JavaScript/Typed_arrays\">类型数组 (Typed Arrays)</a> 是 ECMAScript 2015 中新定义的 JavaScript 内建对象，提供了一个基本的二进制数据缓冲区的类数组视图。下面的表格能帮助你找到对等的 C 语言数据类型：</p>\n<table>\n  <thead>\n    <tr>\n      <th>类型</th>\n      <th>取值范围</th>\n      <th>占用字节数</th>\n      <th>描述</th>\n      <th>Web IDL 类型</th>\n      <th>对等的 C 语言类型</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a></td>\n      <td><code>-128</code> 到 <code>127</code></td>\n      <td>1</td>\n      <td>8 位有符号整数（补码）</td>\n      <td><code>byte</code></td>\n      <td><code>int8_t</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a></td>\n      <td><code>0</code> 到 <code>255</code></td>\n      <td>1</td>\n      <td>8 位无符号整数</td>\n      <td><code>octet</code></td>\n      <td><code>uint8_t</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\"><code>Uint8ClampedArray</code></a></td>\n      <td><code>0</code> 到 <code>255</code></td>\n      <td>1</td>\n      <td>8 位无符号整数（固定数组）</td>\n      <td><code>octet</code></td>\n      <td><code>uint8_t</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a></td>\n      <td><code>-32768</code> 到 <code>32767</code></td>\n      <td>2</td>\n      <td>16 位有符号整数（补码）</td>\n      <td><code>short</code></td>\n      <td><code>int16_t</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a></td>\n      <td><code>0</code> 到 <code>65535</code></td>\n      <td>2</td>\n      <td>16 位无符号整数</td>\n      <td><code>unsigned short</code></td>\n      <td><code>uint16_t</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a></td>\n      <td><code>-2147483648</code> 到 <code>2147483647</code></td>\n      <td>4</td>\n      <td>32 位有符号整数（补码）</td>\n      <td><code>long</code></td>\n      <td><code>int32_t</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a></td>\n      <td><code>0</code> 到 <code>4294967295</code></td>\n      <td>4</td>\n      <td>32 位无符号整数</td>\n      <td><code>unsigned long</code></td>\n      <td><code>uint32_t</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\"><code>Float32Array</code></a></td>\n      <td><code>1.2E-38</code> 到 <code>3.4E38</code></td>\n      <td>4</td>\n      <td>32 位 IEEE 浮点数（7 位有效数字，例如：<code>1.1234567</code>）</td>\n      <td><code>unrestricted float</code></td>\n      <td><code>float</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\"><code>Float64Array</code></a></td>\n      <td><code>5E-324</code> 到 <code>1.8E308</code></td>\n      <td>8</td>\n      <td>64 位 IEEE 浮点数（16 位有效数字，例如：<code>1.123...15</code>）</td>\n      <td><code>unrestricted double</code></td>\n      <td><code>double</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a></td>\n      <td><code>-2^63</code> 到 <code>2^63 - 1</code></td>\n      <td>8</td>\n      <td>64 位有符号整数（补码）</td>\n      <td><code>bigint</code></td>\n      <td><code>int64_t (signed long long)</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a></td>\n      <td><code>0</code> 到 <code>2^64 - 1</code></td>\n      <td>8</td>\n      <td>64 位无符号整数</td>\n      <td><code>bigint</code></td>\n      <td><code>uint64_t (unsigned long long)</code></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"带键的集合：maps_sets_weakmaps_weaksets","title":"带键的集合：Maps, Sets, WeakMaps, WeakSets","isH3":true,"content":"<p>这些数据结构把对象的引用当作键，其在 ECMAScript 第 6 版中有介绍。当 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> 和 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\"><code>WeakMap</code></a> 把一个值和对象关联起来的时候，<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> 和 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\"><code>WeakSet</code></a> 表示一组对象。Map 和 WeakMaps 之间的差别在于，在前者中，对象键是可枚举的。这允许垃圾收集器优化后面的枚举（This allows garbage collection optimizations in the latter case）。</p>\n<p>在纯 ECMAScript 5 下可以实现 <code>Maps</code> 和 <code>Sets</code>。然而，因为对象并不能进行比较（就对象“小于”示例来讲），所以查询必定是线性的。它们的原生实现（包括 <code>WeakMap</code>）所需要的查询时间则是相对恒定的（呈对数增长）。</p>\n<p>通常，可以通过直接在对象上设置属性或使用 <code>data-*</code> 属性，将绑定数据到 DOM 节点。然而缺陷是在任何的脚本内，数据都运行在同样的上下文中。<code>Map</code> 和 <code>WeakMap</code> 能够方便地将数据<em>私密</em>地绑定到一个对象。</p>"}},{"type":"prose","value":{"id":"结构化数据：json","title":"结构化数据：JSON","isH3":true,"content":"<p>JSON（<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation）是一种轻量级的数据交换格式，来源于 JavaScript，同时也被多种语言所使用。JSON 用于构建通用的数据结构。</p>\n<p>参见 <a href=\"/zh-CN/docs/Glossary/JSON\">JSON</a> 和 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON\"><code>JSON</code></a> 以了解更多。</p>"}},{"type":"prose","value":{"id":"标准库中更多的对象","title":"标准库中更多的对象","isH3":true,"content":"<p>JavaScript 有一个内置对象的标准库。请查看<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects\">参考</a>以了解更多对象。</p>"}},{"type":"prose","value":{"id":"使用_typeof_操作符判断对象类型","title":"使用 <code>typeof</code> 操作符判断对象类型","isH3":false,"content":"<p><code>typeof</code> 运算符可以帮助你查询变量的类型。要了解更多细节和注意事项请阅读<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof\">参考页</a>。</p>","titleAsText":"使用 typeof 操作符判断对象类型"}},{"type":"prose","value":{"id":"参见","title":"参见","isH3":false,"content":"<ul>\n  <li><a href=\"https://github.com/trekhleb/javascript-algorithms\" class=\"external\" rel=\" noopener\">JavaScript Data Structures and Algorithms by Oleksii Trekhleb</a></li>\n  <li><a href=\"https://github.com/nzakas/computer-science-in-javascript/\" class=\"external\" rel=\" noopener\">Nicholas Zakas collection of common data structure and common algorithms in JavaScript.</a></li>\n  <li><a href=\"https://github.com/monmohan/DataStructures_In_Javascript\" class=\"external\" rel=\" noopener\">Search Tre(i)es implemented in JavaScript</a></li>\n  <li><a href=\"https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values\" class=\"external\" rel=\" noopener\">Data Types and Values in the ECMAScript specification</a></li>\n</ul>"}}],"toc":[{"text":"动态类型","id":"动态类型"},{"text":"数据类型","id":"数据类型"},{"text":"原始值","id":"原始值"},{"text":"对象","id":"对象"},{"text":"使用 <code>typeof</code> 操作符判断对象类型","id":"使用_typeof_操作符判断对象类型"},{"text":"参见","id":"参见"}],"summary":"编程语言都具有内建的数据结构，但各种编程语言的数据结构常有不同之处。本文试图列出 JavaScript 语言中内建的数据结构及其属性，它们可以用来构建其他的数据结构。同时尽可能地描述与其他语言的不同之处。","popularity":0.0028,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"JavaScript data types and data structures","locale":"en-US","native":"English (US)"},{"title":"Tipos de datos y estructuras en JavaScript","locale":"es","native":"Español"},{"title":"Types et structures de données JavaScript","locale":"fr","native":"Français"},{"title":"JavaScript のデータ型とデータ構造","locale":"ja","native":"日本語"},{"title":"JavaScript의 타입과 자료구조","locale":"ko","native":"한국어"},{"title":"Estrutura de dados do Javascript","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Типы данных JavaScript и структуры данных","locale":"ru","native":"Русский"},{"title":"JavaScript 的資料型別與資料結構","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/web/javascript/data_structures","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/javascript/data_structures/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/zh-CN/docs/Web/JavaScript/Data_structures","title":"JavaScript 数据类型和数据结构"}],"pageTitle":"JavaScript 数据类型和数据结构 - JavaScript | MDN","noIndexing":false}}