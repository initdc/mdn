{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Error","mdn_url":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects\">标准内置对象</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>属性</strong></a><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause\"><code>Error.prototype.cause</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber\"><code>Error.prototype.columnNumber</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName\"><code>Error.prototype.fileName</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\"><code>Error.prototype.lineNumber</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/message\"><code>Error.prototype.message</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/name\"><code>Error.prototype.name</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/Stack\"><code>Error.prototype.stack</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>方法</strong></a><ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/toString\"><code>Error.prototype.toString()</code></a></li></ol></li><li><strong>相关页面：</strong></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/EvalError\"><code>EvalError</code></a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/InternalError\"><code>InternalError</code></a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\"><code>ReferenceError</code></a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\"><code>SyntaxError</code></a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/URIError\"><code>URIError</code></a></strong></li><li><strong>继承</strong></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>属性</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\"><code>Function.prototype.prototype</code> <small>(en-US)</small></a></li></ol></li><li><a href=\"#\"><strong>方法</strong></a><ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>属性</strong></a><ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>方法</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>当运行时错误产生时，<code>Error</code> 对象会被抛出。<code>Error</code> 对象也可用于用户自定义的异常的基础对象。下面列出了各种内建的标准错误类型。</p>"}},{"type":"prose","value":{"id":"描述","title":"描述","isH3":false,"content":"<p>当代码运行时的发生错误，会创建新的 <code>Error</code> 对象，并将其抛出。</p>"}},{"type":"prose","value":{"id":"错误类型","title":"错误类型","isH3":true,"content":"<p>除了通用的 <code>Error</code> 构造函数外，JavaScript 还有其它类型的错误构造函数。对于客户端异常，详见<a href=\"/zh-CN/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E8%AF%AD%E5%8F%A5\">异常处理语句</a>。</p>\n<dl>\n  <dt id=\"evalerror\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/EvalError\"><code>EvalError</code></a></dt>\n  <dd>\n    <p>创建一个 error 实例，表示错误的原因：与 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a> 有关。</p>\n  </dd>\n  <dt id=\"rangeerror\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a></dt>\n  <dd>\n    <p>创建一个 error 实例，表示错误的原因：数值变量或参数超出其有效范围。</p>\n  </dd>\n  <dt id=\"referenceerror\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\"><code>ReferenceError</code></a></dt>\n  <dd>\n    <p>创建一个 error 实例，表示错误的原因：无效引用。</p>\n  </dd>\n  <dt id=\"syntaxerror\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\"><code>SyntaxError</code></a></dt>\n  <dd>\n    <p>创建一个 error 实例，表示错误的原因：语法错误。</p>\n  </dd>\n  <dt id=\"typeerror\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></dt>\n  <dd>\n    <p>创建一个 error 实例，表示错误的原因：变量或参数不属于有效类型。</p>\n  </dd>\n  <dt id=\"urierror\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/URIError\"><code>URIError</code></a></dt>\n  <dd>\n    <p>创建一个 error 实例，表示错误的原因：给 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\"><code>encodeURI()</code></a> 或 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\"><code>decodeURI()</code></a> 传递的参数无效。</p>\n  </dd>\n  <dt id=\"aggregateerror\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\"><code>AggregateError</code></a></dt>\n  <dd>\n    <p>创建一个 error 实例，其中包裹了由一个操作产生且需要报告的多个错误。如：<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/any\"><code>Promise.any()</code></a> 产生的错误。</p>\n  </dd>\n  <dt id=\"internalerror\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/InternalError\"><code>InternalError</code></a> <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg></dt>\n  <dd>\n    <p>创建一个代表 Javascript 引擎内部错误的异常抛出的实例。如：递归太多。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"构造函数","title":"构造函数","isH3":false,"content":"<dl>\n  <dt id=\"error\"><a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>Error()</code></a></dt>\n  <dd>\n    <p>创建一个新的 <code>Error</code> 对象。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"静态方法","title":"静态方法","isH3":false,"content":"<dl>\n  <dt id=\"error.capturestacktrace\"><code>Error.captureStackTrace()</code> <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg></dt>\n  <dd>\n    <p>一个非标准的 V8 函数，用于在 Error 实例上创建 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/Stack\"><code>stack</code></a> 属性。</p>\n  </dd>\n  <dt id=\"error.stacktracelimit\"><code>Error.stackTraceLimit</code> <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg></dt>\n  <dd>\n    <p>一个非标准的 V8 数值属性，用于限制错误堆栈跟踪中包含堆栈帧数量。</p>\n  </dd>\n  <dt id=\"error.preparestacktrace\"><code>Error.prepareStackTrace()</code> <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg> <span class=\"badge inline optional\">可选</span></dt>\n  <dd>\n    <p>一个非标准的 V8 函数，如果提供了这一函数，V8 JavaScript 引擎会调用该函数来抛出异常。这个函数允许用户提供自定义的堆栈跟踪格式。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"实例属性","title":"实例属性","isH3":false,"content":"<dl>\n  <dt id=\"error.prototype.message\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/message\"><code>Error.prototype.message</code></a></dt>\n  <dd>\n    <p>错误消息。对于用户创建的 <code>Error</code> 对象，这是构造函数的第一个参数提供的字符串。</p>\n  </dd>\n  <dt id=\"error.prototype.name\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/name\"><code>Error.prototype.name</code></a></dt>\n  <dd>\n    <p>错误名称。这是由构造函数决定的。</p>\n  </dd>\n  <dt id=\"error.prototype.cause_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause\"><code>Error.prototype.cause</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>表示导致当前错误被抛出的原因——通常是另一个错误。对于用户创建的 <code>Error</code> 对象，这是构造函数的第二个参数提供的值。</p>\n  </dd>\n  <dt id=\"error.prototype.filename\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName\"><code>Error.prototype.fileName</code></a> <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg></dt>\n  <dd>\n    <p>一个非标准的 Mozilla 属性，用于表示引发此错误的文件的路径。</p>\n  </dd>\n  <dt id=\"error.prototype.linenumber\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\"><code>Error.prototype.lineNumber</code></a> <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg></dt>\n  <dd>\n    <p>一个非标准的 Mozilla 属性，用于表示引发此错误的代码所在的文件的行号。</p>\n  </dd>\n  <dt id=\"error.prototype.columnnumber\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber\"><code>Error.prototype.columnNumber</code></a> <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg></dt>\n  <dd>\n    <p>一个非标准的 Mozilla 属性，用于表示引发此错误的代码在文件中所在行的列号。</p>\n  </dd>\n  <dt id=\"error.prototype.stack\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/Stack\"><code>Error.prototype.stack</code></a> <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg></dt>\n  <dd>\n    <p>一个非标准的属性，用于堆栈跟踪。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"实例方法","title":"实例方法","isH3":false,"content":"<dl>\n  <dt id=\"error.prototype.tostring\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/toString\"><code>Error.prototype.toString()</code></a></dt>\n  <dd>\n    <p>返回表示该对象的字符串。覆盖了 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a> 方法。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":""}},{"type":"prose","value":{"id":"抛出一个基本错误","title":"抛出一个基本错误","isH3":true,"content":"<p>通常你会使用 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/throw\"><code>throw</code></a> 关键字来抛出你创建的 <code>Error</code> 对象。可以使用 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/try...catch\"><code>try...catch</code></a> 结构来处理异常：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Whoops!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': '</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"处理一个特定错误","title":"处理一个特定错误","isH3":true,"content":"<p>你可以通过判断异常的类型来特定处理某一类的异常，即判断 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>constructor</code></a> 属性，当使用现代 JavaScript 引擎时，可使用 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof\"><code>instanceof</code></a> 关键字：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">.</span><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">EvalError</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': '</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">RangeError</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">': '</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ... etc</span>\n\n  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// If none of our cases matched leave the Error unhandled</span>\n    <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"区分相似的错误","title":"区分相似的错误","isH3":true,"content":"<p>有时，对于代码块的错误需要根据其原因进行不同的处理，但错误的原因又较为相似（例如：错误的类型和消息均相同）。</p>\n<p>如果你无法控制原有错误的抛出，那么一种方法是捕获错误然后抛出一个新的错误，并在新的错误中给出更加具体的错误消息。原始错误应该被传递到新的 <code>Error</code> 的构造函数的 <code>option</code> 参数（<code>cause</code> 属性）中，这确保了原始的错误和堆栈追踪信息在上层的 try/catch 块中可用。</p>\n<p>以下示例展示了两种方法会在失败时抛出相似的错误（<code>doFailSomeWay()</code> 和 <code>doFailAnotherWay()</code>）：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doFailSomeWay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Failed in some way'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">cause</span><span class=\"token operator\">:</span> err <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doFailAnotherWay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Failed in another way'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">cause</span><span class=\"token operator\">:</span> err <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'Failed in some way'</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">handleFailSomeWay</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>cause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'Failed in another way'</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">handleFailAnotherWay</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>cause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 如果你在创建一个函数库，你应该使用错误原因来区分不同的错误——而不是要求你的函数库的使用者来解析错误消息。相关的示例，请参见<a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">提供错误原因 (en-US)</a>。</p>\n</div>\n<p><a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%94%99%E8%AF%AF%E7%B1%BB%E5%9E%8B\">自定义错误类型</a>也可以使用 <a href=\"#error.prototype.cause\"><code>cause</code></a> 属性，前提是通过 <code>super()</code> 调用子类的构造函数时传递 <code>options</code> 参数。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* some arguments */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Needs to pass both `message` and `options` to install the \"cause\" property.</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"自定义错误类型","title":"自定义错误类型","isH3":true,"content":"<p>你可能希望自定义基于 <code>Error</code> 的异常类型，使得你能够 <code>throw new MyError()</code> 并可以使用 <code>instanceof MyError</code> 来检查某个异常的类型。这种需求的通用解决方法如下。</p>\n<p>参考 StackOverflow 上关于<a href=\"https://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript\" class=\"external\" rel=\" noopener\">“What's a good way to extend Error in JavaScript?”</a>的讨论。</p>\n<h4 id=\"es6_自定义错误类\">ES6 自定义错误类</h4>\n<div class=\"notecard warning\" id=\"sect2\">\n  <p><strong>警告：</strong> Babel 7 之前的版本可以处理 <code>CustomError</code> 类方法，但类方法需要使用 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\">Object.defineProperty()</a> 定义。否则，旧版本的 Babel 和其它转译器在没有<a href=\"https://github.com/loganfsmyth/babel-plugin-transform-builtin-extend\" class=\"external\" rel=\" noopener\">额外配置</a>的情况下将无法正确处理下面的代码。</p>\n</div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 在使用 ES2015 的类时，一些浏览器会在堆栈跟踪中包含 <code>CustomError</code> 构造函数。</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>foo <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Pass remaining arguments (including vendor specific ones) to parent constructor</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Maintains proper stack trace for where our error was thrown (only available on V8)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Error<span class=\"token punctuation\">.</span>captureStackTrace<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Error<span class=\"token punctuation\">.</span><span class=\"token function\">captureStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> CustomError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'CustomError'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Custom debugging information</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'baz'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bazMessage'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// CustomError</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// baz</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bazMessage</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// stacktrace</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"es5_自定义错误对象\">ES5 自定义错误对象</h4>\n<div class=\"notecard warning\" id=\"sect4\">\n  <p><strong>警告：</strong> 在使用原型声明时，所有浏览器都会在堆栈跟踪中包含 <code>CustomError</code> 的构造函数。</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">CustomError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">foo<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">,</span> lineNumber</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">,</span> lineNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  instance<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CustomError</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Error<span class=\"token punctuation\">.</span>captureStackTrace<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Error<span class=\"token punctuation\">.</span><span class=\"token function\">captureStackTrace</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> CustomError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomError</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>CustomError<span class=\"token punctuation\">,</span> Error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">CustomError</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'CustomError'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'baz'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bazMessage'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// CustomError</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// baz</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bazMessage</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-error-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Error"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"javascript.builtins.Error","dataURL":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error/bcd.json"}},{"type":"prose","value":{"id":"参见","title":"参见","isH3":false,"content":"<ul>\n  <li><a href=\"https://github.com/zloirock/core-js\" class=\"external\" rel=\" noopener\"><code>core-js</code></a> 中提供了具有现代行为（如：支持 <code>cause</code>）的 <a href=\"https://github.com/zloirock/core-js#ecmascript-error\" class=\"external\" rel=\" noopener\"><code>Error</code> 的 polyfill</a></li>\n  <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/throw\"><code>throw</code></a></li>\n  <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/try...catch\"><code>try...catch</code></a></li>\n  <li>关于 <code>Error.captureStackTrace()</code>、<code>Error.stackTraceLimit</code> 和 <code>Error.prepareStackTrace()</code> 的 <a href=\"https://v8.dev/docs/stack-trace-api\" class=\"external\" rel=\" noopener\">V8 文档</a>。</li>\n</ul>"}}],"toc":[{"text":"描述","id":"描述"},{"text":"构造函数","id":"构造函数"},{"text":"静态方法","id":"静态方法"},{"text":"实例属性","id":"实例属性"},{"text":"实例方法","id":"实例方法"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"参见","id":"参见"}],"summary":"当运行时错误产生时，Error 对象会被抛出。Error 对象也可用于用户自定义的异常的基础对象。下面列出了各种内建的标准错误类型。","popularity":0.0012,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Error","locale":"en-US","native":"English (US)"},{"title":"Error","locale":"es","native":"Español"},{"title":"Error","locale":"fr","native":"Français"},{"title":"Error","locale":"ja","native":"日本語"},{"title":"Error","locale":"ko","native":"한국어"},{"title":"Error","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Error","locale":"ru","native":"Русский"},{"title":"Error","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/web/javascript/reference/global_objects/error","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/javascript/reference/global_objects/error/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/zh-CN/docs/Web/JavaScript/Reference","title":"JavaScript 参考"},{"uri":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects","title":"JavaScript 标准内置对象"},{"uri":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error","title":"Error"}],"pageTitle":"Error - JavaScript | MDN","noIndexing":false}}