{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"DataView","mdn_url":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects\">标准内置对象</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>属性</strong></a><ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/buffer\"><code>DataView.prototype.buffer</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteLength\"><code>DataView.prototype.byteLength</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteOffset\"><code>DataView.prototype.byteOffset</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>方法</strong></a><ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/getBigInt64\"><code>DataView.prototype.getBigInt64()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/getBigUint64\"><code>DataView.prototype.getBigUint64()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat32\"><code>DataView.prototype.getFloat32()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat64\"><code>DataView.prototype.getFloat64()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt16\"><code>DataView.prototype.getInt16()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt32\"><code>DataView.prototype.getInt32()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt8\"><code>DataView.prototype.getInt8()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint16\"><code>DataView.prototype.getUint16()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32\"><code>DataView.prototype.getUint32()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint8\"><code>DataView.prototype.getUint8()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigInt64\"><code>DataView.prototype.setBigInt64()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigUint64\"><code>DataView.prototype.setBigUint64()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat32\"><code>DataView.prototype.setFloat32()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat64\"><code>DataView.prototype.setFloat64()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt16\"><code>DataView.prototype.setInt16()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt32\"><code>DataView.prototype.setInt32()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt8\"><code>DataView.prototype.setInt8()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint16\"><code>DataView.prototype.setUint16()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint32\"><code>DataView.prototype.setUint32()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint8\"><code>DataView.prototype.setUint8()</code></a></li></ol></li><li><strong>继承</strong></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>属性</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\"><code>Function.prototype.prototype</code> <small>(en-US)</small></a></li></ol></li><li><a href=\"#\"><strong>方法</strong></a><ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>属性</strong></a><ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>方法</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>DataView</code></strong> 视图是一个可以从 二进制<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> 对象中读写多种数值类型的底层接口，使用它时，不用考虑不同平台的<a href=\"/zh-CN/docs/Glossary/Endianness\">字节序</a>问题。</p><iframe class=\"interactive\" height=\"490\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/dataview-constructor.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"语法","title":"语法","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: plain notranslate\">new DataView(buffer [, byteOffset [, byteLength]])\n</pre></div>"}},{"type":"prose","value":{"id":"参数","title":"参数","isH3":true,"content":"<dl>\n  <dt id=\"buffer\"><code>buffer</code></dt>\n  <dd>\n    <p>一个 已经存在的<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> 或 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> <svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg> 对象，<code>DataView</code> 对象的数据源。</p>\n  </dd>\n  <dt id=\"byteoffset\"><code>byteOffset</code> <span class=\"badge inline optional\">可选</span></dt>\n  <dd>\n    <p>此 <code>DataView</code> 对象的第一个字节在 buffer 中的字节偏移。如果未指定，则默认从第一个字节开始。</p>\n  </dd>\n  <dt id=\"bytelength\"><code>byteLength</code> <span class=\"badge inline optional\">可选</span></dt>\n  <dd>\n    <p>此 DataView 对象的字节长度。如果未指定，这个视图的长度将匹配 buffer 的长度。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"返回值","title":"返回值","isH3":true,"content":"<p>一个表示指定数据缓存区的新<code>DataView</code> 对象。（这句话也许不是非常有助于说明清楚）</p>\n<p>你可以把返回的对象想象成一个二进制字节缓存区 array buffer 的“解释器”——它知道如何在读取或写入时正确地转换字节码。这意味着它能在二进制层面处理整数与浮点转化、字节顺序等其他有关的细节问题。</p>"}},{"type":"prose","value":{"id":"异常","title":"异常","isH3":true,"content":"<dl>\n  <dt id=\"rangeerror\"><code><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a></code></dt>\n  <dd>\n    <p>\n      如果 <code>byteOffset</code> 或者 <code>byteLength</code> 参数的值导致视图超出了 buffer 的结束位置就会抛出此异常。\n      例如，假设 buffer（缓冲对象）是 16 字节长度，<code>byteOffset</code> 参数为 8，<code>byteLength</code> 参数为 10，这个错误就会抛出，这是因为结果视图试图超出 buffer 对象的总长度 2 个字节。\n    </p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"描述","title":"描述","isH3":false,"content":""}},{"type":"prose","value":{"id":"endianness（字节序）","title":"Endianness（字节序）","isH3":true,"content":"<p>需要多个字节来表示的数值，在存储时其字节在内存中的相对顺序依据平台架构的不同而不同，参照 <a href=\"/zh-CN/docs/Glossary/Endianness\">Endianness</a>。而使用 DataView 的访问函数时，不需要考虑平台架构中所使用的是哪种字节序。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> littleEndian <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataView</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setInt16</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* 设置值时，使用小端字节序 */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Int16Array 使用系统字节序（由此可以判断系统字节序是否为小端字节序）</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Int16Array</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>littleEndian<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回 true 或 false</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"64_位整数值","title":"64 位整数值","isH3":true,"content":"<p>因为 JavaScript 目前不包含对 64 位整数值支持的标准，所以 <code>DataView</code> 不提供原生的 64 位操作。作为变通，您可以实现自己的 <code>getUint64()</code> 函数，以获得精度高达 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\"><code>Number.MAX_SAFE_INTEGER</code></a> 的值，可以满足某些特定情况的需求。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">getUint64</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dataview<span class=\"token punctuation\">,</span> byteOffset<span class=\"token punctuation\">,</span> littleEndian</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 将 64 位整数值分成两份 32 位整数值</span>\n  <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span>  dataview<span class=\"token punctuation\">.</span><span class=\"token function\">getUint32</span><span class=\"token punctuation\">(</span>byteOffset<span class=\"token punctuation\">,</span> littleEndian<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> dataview<span class=\"token punctuation\">.</span><span class=\"token function\">getUint32</span><span class=\"token punctuation\">(</span>byteOffset<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> littleEndian<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 合并两个 32 位整数值</span>\n  <span class=\"token keyword\">const</span> combined <span class=\"token operator\">=</span> littleEndian<span class=\"token operator\">?</span> left <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">32</span><span class=\"token operator\">*</span>right <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">32</span><span class=\"token operator\">*</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isSafeInteger</span><span class=\"token punctuation\">(</span>combined<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span>combined<span class=\"token punctuation\">,</span> <span class=\"token string\">'exceeds MAX_SAFE_INTEGER. Precision may be lost'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> combined<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>或者，如果需要填满 64 位，可以创建一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>。此外，尽管原生 BigInt 要比用户端的库中模拟的 BigInt 快得多，但在 JavaScript 中，BigInt 总是比 32 位整数慢得多，这是因为 BigInt 的大小是可变的。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> BigInt <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>BigInt<span class=\"token punctuation\">,</span> bigThirtyTwo <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bigZero <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getUint64BigInt</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dataview<span class=\"token punctuation\">,</span> byteOffset<span class=\"token punctuation\">,</span> littleEndian</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 将 64 位整数值分成两份 32 位整数值</span>\n  <span class=\"token keyword\">const</span> left <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span>dataview<span class=\"token punctuation\">.</span><span class=\"token function\">getUint32</span><span class=\"token punctuation\">(</span>byteOffset<span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>littleEndian<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;&gt;&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> right <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span>dataview<span class=\"token punctuation\">.</span><span class=\"token function\">getUint32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>byteOffset<span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>littleEndian<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;&gt;&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 合并两个 32 位整数值并返回</span>\n  <span class=\"token keyword\">return</span> littleEndian <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>right<span class=\"token operator\">&lt;&lt;</span>bigThirtyTwo<span class=\"token punctuation\">)</span><span class=\"token operator\">|</span>left <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>left<span class=\"token operator\">&lt;&lt;</span>bigThirtyTwo<span class=\"token punctuation\">)</span><span class=\"token operator\">|</span>right<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"属性","title":"属性","isH3":false,"content":"<p>所有 <code>DataView</code> 实例都继承自 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView.prototype</code> <small>(en-US)</small></a>，并且允许向 DataView 对象中添加额外属性。</p>{{page('zh-CN/Web/JavaScript/Reference/Global_Objects/DataView/prototype', '属性')}}"}},{"type":"prose","value":{"id":"方法","title":"方法","isH3":false,"content":"{{page('zh-CN/Web/JavaScript/Reference/Global_Objects/DataView/prototype', '方法')}}"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> view <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataView</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nview<span class=\"token punctuation\">.</span><span class=\"token function\">setInt16</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nview<span class=\"token punctuation\">.</span><span class=\"token function\">getInt16</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/structured-data.html#sec-dataview-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.DataView"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"javascript.builtins.DataView","dataURL":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/bcd.json"}},{"type":"prose","value":{"id":"兼容性提示","title":"兼容性提示","isH3":false,"content":"<p>从 FireFox 40 开始，DataView 对象需要通过 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code></a> 操作符来构造。如果不使用 <code>new</code> 而是直接将 <code>DataView()</code> 作为函数调用的话，会抛出 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> 异常。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">var</span> dv <span class=\"token operator\">=</span> <span class=\"token function\">DataView</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 抛出异常，错误信息翻译为：禁止在不用 new 的情况下直接调用 DataView 的构造函数。</span>\n<span class=\"token comment\">// TypeError: calling a builtin DataView constructor without new is forbidden</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">var</span> dv <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataView</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"请参阅","title":"请参阅","isH3":false,"content":"<ul>\n  <li><a href=\"https://github.com/jDataView/jDataView\" class=\"external\" rel=\" noopener\">jDataView</a>：DataView 的垫片（polyfill）库，使其能够用于所有浏览器及 Node.js 环境。同时，该库还对 DataView 进行了一些扩展。</li>\n  <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a></li>\n  <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a></li>\n</ul>"}}],"toc":[{"text":"语法","id":"语法"},{"text":"描述","id":"描述"},{"text":"属性","id":"属性"},{"text":"方法","id":"方法"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"兼容性提示","id":"兼容性提示"},{"text":"请参阅","id":"请参阅"}],"summary":"DataView 视图是一个可以从 二进制ArrayBuffer 对象中读写多种数值类型的底层接口，使用它时，不用考虑不同平台的字节序问题。","popularity":0.0011,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"DataView","locale":"en-US","native":"English (US)"},{"title":"DataView","locale":"fr","native":"Français"},{"title":"DataView","locale":"ja","native":"日本語"},{"title":"DataView","locale":"ko","native":"한국어"},{"title":"DataView","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"DataView","locale":"ru","native":"Русский"},{"title":"DataView","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/web/javascript/reference/global_objects/dataview","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/javascript/reference/global_objects/dataview/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/zh-CN/docs/Web/JavaScript/Reference","title":"JavaScript 参考"},{"uri":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects","title":"JavaScript 标准内置对象"},{"uri":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView","title":"DataView"}],"pageTitle":"DataView - JavaScript | MDN","noIndexing":false}}