{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Symbol","mdn_url":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects\">标准内置对象</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>属性</strong></a><ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator\"><code>Symbol.asyncIterator</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description\"><code>Symbol.prototype.description</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance\"><code>Symbol.hasInstance</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable\"><code>Symbol.isConcatSpreadable</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator\"><code>Symbol.iterator</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/match\"><code>Symbol.match</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/matchAll\"><code>Symbol.matchAll</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace\"><code>Symbol.replace</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/search\"><code>Symbol.search</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species\"><code>Symbol.species</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split\"><code>Symbol.split</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive\"><code>Symbol.toPrimitive</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag\"><code>Symbol.toStringTag</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/unscopables\"><code>Symbol.unscopables</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>方法</strong></a><ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive\"><code>Symbol.prototype[@@toPrimitive]</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for\"><code>Symbol.for()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor\"><code>Symbol.keyFor()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString\"><code>Symbol.prototype.toString()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/valueOf\"><code>Symbol.prototype.valueOf()</code></a></li></ol></li><li><strong>继承</strong></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>属性</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\"><code>Function.prototype.prototype</code> <small>(en-US)</small></a></li></ol></li><li><a href=\"#\"><strong>方法</strong></a><ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>属性</strong></a><ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>方法</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>symbol</strong> 是一种基本数据类型（<a href=\"/zh-CN/docs/Glossary/Primitive\">primitive data type</a>）。<code>Symbol()</code> 函数会返回 <strong>symbol</strong> 类型的值，该类型具有静态属性和静态方法。它的静态属性会暴露几个内建的成员对象；它的静态方法会暴露全局的 symbol 注册，且类似于内建对象类，但作为构造函数来说它并不完整，因为它不支持语法：\"<code>new Symbol()</code>\"。</p>\n<p>每个从 <code>Symbol()</code> 返回的 symbol 值都是唯一的。一个 symbol 值能作为对象属性的标识符；这是该数据类型仅有的目的。更进一步的解析见—— <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">glossary entry for Symbol</a>。</p><iframe class=\"interactive\" height=\"490\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/symbol-constructor.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"语法","title":"语法","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: plain notranslate\">Symbol([description])\n</pre></div>"}},{"type":"prose","value":{"id":"参数","title":"参数","isH3":true,"content":"<dl>\n  <dt id=\"description\"><code>description</code> <span class=\"badge inline optional\">可选</span></dt>\n  <dd>\n    <p>可选的，字符串类型。对 symbol 的描述，可用于调试但不是访问 symbol 本身。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"描述","title":"描述","isH3":false,"content":"<p>直接使用<code>Symbol()</code>创建新的 symbol 类型，并用一个可选的字符串作为其描述。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> sym1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> sym2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> sym3 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>上面的代码创建了三个新的 symbol 类型。注意，<code>Symbol(\"foo\")</code> 不会强制将字符串“foo”转换成 symbol 类型。它每次都会创建一个新的 symbol 类型：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>\n<p>下面带有 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code></a> 运算符的语法将抛出 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> 错误：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> sym <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError</span>\n</code></pre></div>\n<p>这会阻止创建一个显式的 Symbol 包装器对象而不是一个 Symbol 值。围绕原始数据类型创建一个显式包装器对象从 ECMAScript 6 开始不再被支持。然而，现有的原始包装器对象，如 <code>new Boolean</code>、<code>new String</code>以及<code>new Number</code>，因为遗留原因仍可被创建。</p>\n<p>如果你真的想创建一个 <strong>Symbol 包装器对象</strong> (<code>Symbol wrapper object</code>)，你可以使用 <code>Object()</code> 函数：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> sym <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> sym<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// \"symbol\"</span>\n<span class=\"token keyword\">var</span> symObj <span class=\"token operator\">=</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span>sym<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> symObj<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"object\"</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"全局共享的_symbol","title":"全局共享的 Symbol","isH3":true,"content":"<p>上面使用 <code>Symbol()</code> 函数的语法，不会在你的整个代码库中创建一个可用的全局的 symbol 类型。要创建跨文件可用的 symbol，甚至跨域（每个都有它自己的全局作用域），使用 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for\"><code>Symbol.for()</code></a> 方法和 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor\"><code>Symbol.keyFor()</code></a> 方法从全局的 symbol 注册表设置和取得 symbol。</p>"}},{"type":"prose","value":{"id":"在对象中查找_symbol_属性","title":"在对象中查找 Symbol 属性","isH3":true,"content":"<p><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\"><code>Object.getOwnPropertySymbols()</code></a> 方法让你在查找一个给定对象的符号属性时返回一个 symbol 类型的数组。注意，每个初始化的对象都是没有自己的 symbol 属性的，因此这个数组可能为空，除非你已经在对象上设置了 symbol 属性。</p>"}},{"type":"prose","value":{"id":"属性","title":"属性","isH3":false,"content":"<dl>\n  <dt id=\"symbol.length\"><code>Symbol.length</code></dt>\n  <dd>\n    <p>长度属性，值为 0。</p>\n  </dd>\n  <dt id=\"symbol.prototype_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol.prototype</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p><code>symbol</code> 构造函数的原型。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"众所周知的_symbols","title":"众所周知的 symbols","isH3":true,"content":"<p>除了自己创建的 symbol，JavaScript 还内建了一些在 ECMAScript 5 之前没有暴露给开发者的 symbol，它们代表了内部语言行为。它们可以使用以下属性访问：</p>\n<dl>\n  <dt id=\"迭代_symbols\">迭代 symbols <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator\"><code>Symbol.iterator</code></a></dt>\n  <dd>\n    <p>一个返回一个对象默认迭代器的方法。被 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> 使用。</p>\n  </dd>\n  <dt id=\"symbol.asynciterator\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator\"><code>Symbol.asyncIterator</code></a> <svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg></dt>\n  <dd>\n    <p>一个返回对象默认的异步迭代器的方法。被 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/for-await...of\"><code>for await of</code></a> 使用。</p>\n  </dd>\n  <dt id=\"正则表达式_symbols\">正则表达式 symbols <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/match\"><code>Symbol.match</code></a></dt>\n  <dd>\n    <p>一个用于对字符串进行匹配的方法，也用于确定一个对象是否可以作为正则表达式使用。被 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a> 使用。</p>\n  </dd>\n  <dt id=\"symbol.replace\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace\"><code>Symbol.replace</code></a></dt>\n  <dd>\n    <p>一个替换匹配字符串的子串的方法。被 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace()</code></a> 使用。</p>\n  </dd>\n  <dt id=\"symbol.search\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/search\"><code>Symbol.search</code></a></dt>\n  <dd>\n    <p>一个返回一个字符串中与正则表达式相匹配的索引的方法。被 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search\"><code>String.prototype.search()</code></a> 使用。</p>\n  </dd>\n  <dt id=\"symbol.split\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split\"><code>Symbol.split</code></a></dt>\n  <dd>\n    <p>一个在匹配正则表达式的索引处拆分一个字符串的方法.。被 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code>String.prototype.split()</code></a> 使用。</p>\n  </dd>\n  <dt id=\"其他_symbols\">其他 symbols <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance\"><code>Symbol.hasInstance</code></a></dt>\n  <dd>\n    <p>一个确定一个构造器对象识别的对象是否为它的实例的方法。被 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof\"><code>instanceof</code></a> 使用。</p>\n  </dd>\n  <dt id=\"symbol.isconcatspreadable\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable\"><code>Symbol.isConcatSpreadable</code></a></dt>\n  <dd>\n    <p>一个布尔值，表明一个对象是否应该 flattened 为它的数组元素。被 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>Array.prototype.concat()</code></a> 使用。</p>\n  </dd>\n  <dt id=\"symbol.unscopables\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/unscopables\"><code>Symbol.unscopables</code></a></dt>\n  <dd>\n    <p>拥有和继承属性名的一个对象的值被排除在与环境绑定的相关对象外。</p>\n  </dd>\n  <dt id=\"symbol.species\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species\"><code>Symbol.species</code></a></dt>\n  <dd>\n    <p>一个用于创建派生对象的构造器函数。</p>\n  </dd>\n  <dt id=\"symbol.toprimitive\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive\"><code>Symbol.toPrimitive</code></a></dt>\n  <dd>\n    <p>一个将对象转化为基本数据类型的方法。</p>\n  </dd>\n  <dt id=\"symbol.tostringtag\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag\"><code>Symbol.toStringTag</code></a></dt>\n  <dd>\n    <p>用于对象的默认描述的字符串值。被 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a> 使用。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"方法","title":"方法","isH3":false,"content":"<dl>\n  <dt id=\"symbol.forkey\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for\"><code>Symbol.for(key)</code></a></dt>\n  <dd>\n    <p>使用给定的 key 搜索现有的 symbol，如果找到则返回该 symbol。否则将使用给定的 key 在全局 symbol 注册表中创建一个新的 symbol。</p>\n  </dd>\n  <dt id=\"symbol.keyforsym\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor\"><code>Symbol.keyFor(sym)</code></a></dt>\n  <dd>\n    <p>从全局 symbol 注册表中，为给定的 symbol 检索一个共享的？symbol key。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"symbol_原型","title":"Symbol 原型","isH3":false,"content":"<p>所有 Symbols 继承自 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol.prototype</code> <small>(en-US)</small></a>.</p>"}},{"type":"prose","value":{"id":"实例属性","title":"实例属性","isH3":true,"content":"<dl>\n  <dt id=\"symbol.prototype.description\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description\"><code>Symbol.prototype.description</code></a></dt>\n  <dd>\n    <p>一个只读的字符串，意为对该 Symbol 对象的描述</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"实例方法","title":"实例方法","isH3":true,"content":"<dl>\n  <dt id=\"symbol.prototype.tosource\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString\"><code>Symbol.prototype.toSource</code></a></dt>\n  <dd>\n    <p>返回该 Symbol 对象的源代码。该方法重写了 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toSource</code></a> 方法</p>\n  </dd>\n  <dt id=\"symbol.prototype.tostring\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString\"><code>Symbol.prototype.toString</code></a></dt>\n  <dd>\n    <p>返回一个包含着该 Symbol 对象描述的字符串。该方法重写了 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString</code></a> 方法</p>\n  </dd>\n  <dt id=\"symbol.prototype.valueof\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/valueOf\"><code>Symbol.prototype.valueOf</code></a></dt>\n  <dd>\n    <p>返回该 Symbol 对象。该方法重写了 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf</code></a> 方法</p>\n  </dd>\n  <dt id=\"symbol.prototypetoprimitive\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive\"><code>Symbol.prototype[@@toPrimitive]</code></a></dt>\n  <dd>\n    <p>返回该 Symbol 对象。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":""}},{"type":"prose","value":{"id":"对_symbol_使用_typeof_运算符","title":"对 symbol 使用 typeof 运算符","isH3":true,"content":"<p><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof\"><code>typeof</code></a>运算符能帮助你识别 symbol 类型</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'symbol'</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'symbol'</span>\n<span class=\"token keyword\">typeof</span> Symbol<span class=\"token punctuation\">.</span>iterator <span class=\"token operator\">===</span> <span class=\"token string\">'symbol'</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"symbol_类型转换","title":"Symbol 类型转换","isH3":true,"content":"<p>当使用 symbol 值进行类型转换时需要注意一些事情：</p>\n<ul>\n  <li>尝试将一个 symbol 值转换为一个 number 值时，会抛出一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> 错误 (e.g. <code>+sym</code> or <code>sym | 0</code>).</li>\n  <li>使用宽松相等时，<code>Object(sym) == sym</code> returns <code>true.</code></li>\n  <li>这会阻止你从一个 symbol 值隐式地创建一个新的 string 类型的属性名。例如，<code>Symbol(\"foo\") + \"bar\"</code> 将抛出一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> (can't convert symbol to string).</li>\n  <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String#string_conversion\">\"safer\" <code>String(sym)</code> conversion</a> 的作用会像 symbol 类型调用 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString\"><code>Symbol.prototype.toString()</code></a> 一样，但是注意 <code>new String(sym)</code> 将抛出异常。</li>\n</ul>"}},{"type":"prose","value":{"id":"symbols_与_for...in_迭代","title":"Symbols 与 <code>for...in</code> 迭代","isH3":true,"content":"<p>Symbols 在 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in\"><code>for...in</code></a> 迭代中不可枚举。另外，<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\"><code>Object.getOwnPropertyNames()</code></a> 不会返回 symbol 对象的属性，但是你能使用 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\"><code>Object.getOwnPropertySymbols()</code></a> 得到它们。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">[</span><span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">[</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>d <span class=\"token operator\">=</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs \"c\" and \"d\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","titleAsText":"Symbols 与 for...in 迭代"}},{"type":"prose","value":{"id":"symbols_与_json.stringify","title":"Symbols 与 <code>JSON.stringify()</code>","isH3":true,"content":"<p>当使用 JSON.stringify() 时，以 symbol 值作为键的属性会被完全忽略：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// '{}'</span>\n</code></pre></div>\n<p>更多细节，请看 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a>。</p>","titleAsText":"Symbols 与 JSON.stringify()"}},{"type":"prose","value":{"id":"symbol_包装器对象作为属性的键","title":"Symbol 包装器对象作为属性的键","isH3":true,"content":"<p>当一个 Symbol 包装器对象作为一个属性的键时，这个对象将被强制转换为它包装过的 symbol 值：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> sym <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>sym<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">[</span>sym<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 1</span>\nobj<span class=\"token punctuation\">[</span><span class=\"token function\">Object</span><span class=\"token punctuation\">(</span>sym<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// still 1</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-symbol-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Symbol"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"javascript.builtins.Symbol","dataURL":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/bcd.json"}},{"type":"prose","value":{"id":"参考文档","title":"参考文档","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Glossary: Symbol data type</a></li>\n  <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof\"><code>typeof</code></a></li>\n  <li><a href=\"/zh-CN/docs/Web/JavaScript/Data_structures\">Data types and data structures</a></li>\n  <li><a href=\"https://hacks.mozilla.org/2015/06/es6-in-depth-symbols/\" class=\"external\" rel=\" noopener\">\"ES6 In Depth: Symbols\"（深入 ES6 Symbols）on hacks.mozilla.org</a></li>\n</ul>"}}],"toc":[{"text":"语法","id":"语法"},{"text":"描述","id":"描述"},{"text":"属性","id":"属性"},{"text":"方法","id":"方法"},{"text":"Symbol 原型","id":"symbol_原型"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"参考文档","id":"参考文档"}],"summary":"symbol 是一种基本数据类型（primitive data type）。Symbol() 函数会返回 symbol 类型的值，该类型具有静态属性和静态方法。它的静态属性会暴露几个内建的成员对象；它的静态方法会暴露全局的 symbol 注册，且类似于内建对象类，但作为构造函数来说它并不完整，因为它不支持语法：\"new Symbol()\"。","popularity":0.0033,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Symbol","locale":"en-US","native":"English (US)"},{"title":"Symbol","locale":"es","native":"Español"},{"title":"Symbol","locale":"fr","native":"Français"},{"title":"Symbol (シンボル)","locale":"ja","native":"日本語"},{"title":"Symbol","locale":"ko","native":"한국어"},{"title":"Símbolo","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Symbol","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/javascript/reference/global_objects/symbol","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/javascript/reference/global_objects/symbol/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/zh-CN/docs/Web/JavaScript/Reference","title":"JavaScript 参考"},{"uri":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects","title":"JavaScript 标准内置对象"},{"uri":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol","title":"Symbol"}],"pageTitle":"Symbol - JavaScript | MDN","noIndexing":false}}