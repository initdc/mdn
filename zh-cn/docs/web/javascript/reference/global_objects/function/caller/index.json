{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Function.caller","mdn_url":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/caller","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects\">标准内置对象</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>属性</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><em><code>Function.prototype.caller</code></em></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\"><code>Function.prototype.prototype</code> <small>(en-US)</small></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>方法</strong></a><ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong>继承</strong></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>属性</strong></a><ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>方法</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard warning\" id=\"sect1\"><p><strong>非标准:</strong> 该特性是非标准的，请尽量不要在生产环境中使用它！</p></div>"}},{"type":"prose","value":{"id":"概述","title":"概述","isH3":false,"content":"<p>返回调用指定函数的函数。</p>\n<p>该属性不是 ECMA-262 第 3 版标准的一部分。不过，<a href=\"/zh-CN/SpiderMonkey\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">SpiderMonkey</a> (Mozilla 的 JavaScript 引擎) (查看<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=65683\" class=\"external\" rel=\" noopener\">bug&nbsp;65683</a>), V8 (Chrome 的 JavaScript 引擎) 和 JScript(IE 的 ECMAScript 实现) 都已经支持了它。</p>"}},{"type":"prose","value":{"id":"描述","title":"描述","isH3":false,"content":"<p>如果一个函数 <code>f</code> 是在全局作用域内被调用的，则 <code>f.caller 为</code> <code>null</code>。相反，如果一个函数是在另外一个函数作用域内被调用的，则 <code>f.caller</code> 指向调用它的那个函数。</p>\n<p>该属性的常用形式 <code>arguments.callee.caller</code> 替代了被废弃的 <a href=\"/zh-CN/docs/JavaScript/Reference/Functions_and_function_scope/arguments/caller\">arguments.caller</a>.</p>"}},{"type":"prose","value":{"id":"备注","title":"备注","isH3":true,"content":"<p>注意，在使用递归调用时，你不能使用此属性来重现出调用栈。请考虑以下代码：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>当 <code>stop()</code> 函数被调用时，调用栈是这样的：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>由于下面的表达式为 true (只保留函数最后一次被调用时的 caller)：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>stop<span class=\"token punctuation\">.</span>caller <span class=\"token operator\">===</span> g <span class=\"token operator\">&amp;&amp;</span> f<span class=\"token punctuation\">.</span>caller <span class=\"token operator\">===</span> g <span class=\"token operator\">&amp;&amp;</span> g<span class=\"token punctuation\">.</span>caller <span class=\"token operator\">===</span> f\n</code></pre></div>\n<p>所以如果你尝试在 <code>stop()</code> 函数中获取调用栈的话：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> stop<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> stack <span class=\"token operator\">=</span> <span class=\"token string\">\"调用栈：\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  stack <span class=\"token operator\">+=</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n  f <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>caller<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>则上面的代码会进入一个死循环。</p>\n<p>有一个特殊属性 <code>__caller__</code>, 可以返回调用当前函数的函数的活动对象 (可以用来重现出整个调用栈), 但由于安全原因的考虑，该属性已被删除。</p>"}},{"type":"prose","value":{"id":"例子","title":"例子","isH3":false,"content":""}},{"type":"prose","value":{"id":"例子：检测一个函数的_caller_属性的值","title":"例子：检测一个函数的 <code>caller</code> 属性的值","isH3":true,"content":"<p>下例用来得出一个函数是被谁调用的。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myFunc<span class=\"token punctuation\">.</span>caller <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"该函数在全局作用域内被调用！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"调用我的是函数是\"</span> <span class=\"token operator\">+</span> myFunc<span class=\"token punctuation\">.</span>caller<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","titleAsText":"例子：检测一个函数的 caller 属性的值"}},{"type":"prose","value":{"id":"浏览器兼容性","title":"浏览器兼容性","isH3":false,"content":"<p>Function.caller 目前被所有主流浏览器支持：Firefox、Safari、Chrome、Opera 和 IE。<a href=\"http://dl.dropbox.com/u/534786/callertest.html\" class=\"external\" rel=\" noopener\">查看检测结果</a>。</p>"}}],"toc":[{"text":"概述","id":"概述"},{"text":"描述","id":"描述"},{"text":"例子","id":"例子"},{"text":"浏览器兼容性","id":"浏览器兼容性"}],"summary":"返回调用指定函数的函数。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Function.prototype.caller","locale":"en-US","native":"English (US)"},{"title":"Function.caller","locale":"es","native":"Español"},{"title":"Function.caller","locale":"fr","native":"Français"},{"title":"Function.caller","locale":"ja","native":"日本語"},{"title":"Function.caller","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Function.caller","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/javascript/reference/global_objects/function/caller","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/javascript/reference/global_objects/function/caller/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/zh-CN/docs/Web/JavaScript/Reference","title":"JavaScript 参考"},{"uri":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects","title":"JavaScript 标准内置对象"},{"uri":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function","title":"Function"},{"uri":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/caller","title":"Function.caller"}],"pageTitle":"Function.caller - JavaScript | MDN","noIndexing":false}}