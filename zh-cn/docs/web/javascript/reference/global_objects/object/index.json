{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Object","mdn_url":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects\">标准内置对象</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>属性</strong></a><ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>方法</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"><code>Object.assign()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\"><code>Object.defineProperties()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\"><code>Object.entries()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\"><code>Object.freeze()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries\"><code>Object.fromEntries()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\"><code>Object.getOwnPropertyDescriptor()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors\"><code>Object.getOwnPropertyDescriptors()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\"><code>Object.getOwnPropertyNames()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\"><code>Object.getOwnPropertySymbols()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/GetPrototypeOf\"><code>Object.getPrototypeOf()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn\"><code>Object.hasOwn()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\"><code>Object.isExtensible()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\"><code>Object.isFrozen()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\"><code>Object.isSealed()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\"><code>Object.preventExtensions()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\"><code>Object.seal()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/values\"><code>Object.values()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>Object</code></strong> 是 JavaScript 的一种 <a href=\"/zh-CN/docs/Web/JavaScript/Data_structures\">数据类型</a> 。它用于存储各种键值集合和更复杂的实体。Objects 可以通过 <code><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/Object\"><code>Object()</code></a></code> 构造函数或者使用 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Object_initializer\">对象字面量</a> 的方式创建</p>"}},{"type":"prose","value":{"id":"描述","title":"描述","isH3":false,"content":"<p>\n  在 JavaScript 中，几乎所有的对象都是 <code>Object</code> 类型的实例，它们都会从 <code>Object.prototype</code> 继承属性和方法，虽然大部分属性都会被覆盖（shadowed）或者说被重写了（overridden）。\n  除此之外，<code>Object</code> 还可以被故意的创建，但是这个对象并不是一个“真正的对象”（例如：通过 <code><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create(null)</code></a></code>），或者通过一些手段改变对象，使其不再是一个“真正的对象”（比如说：<code><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf</code></a></code>）。\n</p>\n<p>通过原型链，所有的 <code>object</code> 都能观察到 Object 原型对象（Object prototype object）的改变，除非这些受到改变影响的属性和方法沿着原型链被进一步的重写。尽管有潜在的危险，但这为覆盖或扩展对象的行为提供了一个非常强大的机制。</p>\n<p><code>Object</code> 构造函数为给定的参数创建一个包装类对象（object wrapper），具体有以下情况：</p>\n<ul>\n  <li>如果给定值是 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> 或 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>，将会创建并返回一个空对象</li>\n  <li>如果传进去的是一个基本类型的值，则会构造其包装类型的对象</li>\n  <li>如果传进去的是引用类型的值，仍然会返回这个值，经他们复制的变量保有和源对象相同的引用地址</li>\n</ul>\n<p>当以非构造函数形式被调用时，<code>Object</code> 的行为等同于 <code>new Object()</code>。</p>\n<p>可查看 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Object_initializer\">对象初始化/字面量语法</a>。</p>"}},{"type":"prose","value":{"id":"从一个对象上删除一个属性","title":"从一个对象上删除一个属性","isH3":true,"content":"<p>Object 自身没有提供方法删除其自身属性（Map 中的 <code><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/delete\"><code>Map.prototype.delete()</code></a></code> 可以删除自身属性）为了删除对象上的属性，必须使用 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/delete\">delete 操作符</a></p>"}},{"type":"prose","value":{"id":"构造函数","title":"构造函数","isH3":false,"content":"<dl>\n  <dt id=\"object\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/Object\"><code>Object()</code></a></dt>\n  <dd>\n    <p>创建一个新的 <code>Object</code> 对象。该对象将会包裹（wrapper）传入的参数</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"静态方法","title":"静态方法","isH3":false,"content":"<dl>\n  <dt id=\"object.assign\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"><code>Object.assign()</code></a></dt>\n  <dd>\n    <p>通过复制一个或多个对象来创建一个新的对象。</p>\n  </dd>\n  <dt id=\"object.create\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a></dt>\n  <dd>\n    <p>使用指定的原型对象和属性创建一个新对象。</p>\n  </dd>\n  <dt id=\"object.defineproperty\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a></dt>\n  <dd>\n    <p>给对象添加一个属性并指定该属性的配置。</p>\n  </dd>\n  <dt id=\"object.defineproperties\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\"><code>Object.defineProperties()</code></a></dt>\n  <dd>\n    <p>给对象添加多个属性并分别指定它们的配置。</p>\n  </dd>\n  <dt id=\"object.entries\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\"><code>Object.entries()</code></a></dt>\n  <dd>\n    <p>返回给定对象自身可枚举属性的 <code>[key, value]</code> 数组。</p>\n  </dd>\n  <dt id=\"object.freeze\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\"><code>Object.freeze()</code></a></dt>\n  <dd>\n    <p>冻结对象：其他代码不能删除或更改任何属性。</p>\n  </dd>\n  <dt id=\"object.getownpropertydescriptor\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\"><code>Object.getOwnPropertyDescriptor()</code></a></dt>\n  <dd>\n    <p>返回对象指定的属性配置。</p>\n  </dd>\n  <dt id=\"object.getownpropertynames\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\"><code>Object.getOwnPropertyNames()</code></a></dt>\n  <dd>\n    <p>返回一个数组，它包含了指定对象所有的可枚举或不可枚举的属性名。</p>\n  </dd>\n  <dt id=\"object.getownpropertysymbols\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\"><code>Object.getOwnPropertySymbols()</code></a></dt>\n  <dd>\n    <p>返回一个数组，它包含了指定对象自身所有的符号属性。</p>\n  </dd>\n  <dt id=\"object.getprototypeof\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/GetPrototypeOf\"><code>Object.getPrototypeOf()</code></a></dt>\n  <dd>\n    <p>返回指定对象的原型对象。</p>\n  </dd>\n  <dt id=\"object.is\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is()</code></a></dt>\n  <dd>\n    <p>比较两个值是否相同。所有 NaN 值都相等（这与==和===不同）。</p>\n  </dd>\n  <dt id=\"object.isextensible\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\"><code>Object.isExtensible()</code></a></dt>\n  <dd>\n    <p>判断对象是否可扩展。</p>\n  </dd>\n  <dt id=\"object.isfrozen\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\"><code>Object.isFrozen()</code></a></dt>\n  <dd>\n    <p>判断对象是否已经冻结。</p>\n  </dd>\n  <dt id=\"object.issealed\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\"><code>Object.isSealed()</code></a></dt>\n  <dd>\n    <p>判断对象是否已经密封。</p>\n  </dd>\n  <dt id=\"object.keys\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys()</code></a></dt>\n  <dd>\n    <p>返回一个包含所有给定对象<strong>自身</strong>可枚举属性名称的数组。</p>\n  </dd>\n  <dt id=\"object.preventextensions\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\"><code>Object.preventExtensions()</code></a></dt>\n  <dd>\n    <p>防止对象的任何扩展。</p>\n  </dd>\n  <dt id=\"object.seal\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\"><code>Object.seal()</code></a></dt>\n  <dd>\n    <p>防止其他代码删除对象的属性。</p>\n  </dd>\n  <dt id=\"object.setprototypeof\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></dt>\n  <dd>\n    <p>设置对象的原型（即内部 <code>[[Prototype]]</code> 属性）。</p>\n  </dd>\n  <dt id=\"object.values\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/values\"><code>Object.values()</code></a></dt>\n  <dd>\n    <p>返回给定对象自身可枚举值的数组。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"实例属性","title":"实例属性","isH3":false,"content":"<dl>\n  <dt id=\"object.prototype.constructor\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></dt>\n  <dd>\n    <p>一个引用值，指向 Object 构造函数</p>\n  </dd>\n  <dt id=\"object.prototype.__proto__\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></dt>\n  <dd>\n    <p>指向一个对象，当一个 object 实例化时，使用该对象作为实例化对象的原型</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"实例方法","title":"实例方法","isH3":false,"content":"<dl>\n  <dt id=\"object.prototype.__definegetter__\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></dt>\n  <dd>\n    <p>将一个属性与一个函数相关联，当该属性被访问时，执行该函数，并且返回函数的返回值。</p>\n  </dd>\n  <dt id=\"object.prototype.__definesetter__\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></dt>\n  <dd>\n    <p>将一个属性与一个函数相关联，当该属性被设置时，执行该函数，执行该函数去修改某个属性。</p>\n  </dd>\n  <dt id=\"object.prototype.__lookupgetter__\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></dt>\n  <dd>\n    <p>返回一个函数，该函数通过给定属性的 <code><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></code> 得出。</p>\n  </dd>\n  <dt id=\"object.prototype.__lookupsetter__\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></dt>\n  <dd>\n    <p>返回一个函数，该函数通过给定属性的 <code><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></code> 得出。</p>\n  </dd>\n  <dt id=\"object.prototype.hasownproperty\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></dt>\n  <dd>\n    <p>返回一个布尔值，用于表示一个对象自身是否包含指定的属性，该方法并不会查找原型链上继承来的属性。</p>\n  </dd>\n  <dt id=\"object.prototype.isprototypeof\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></dt>\n  <dd>\n    <p>返回一个布尔值，用于表示该方法所调用的对象是否在指定对象的原型链中。</p>\n  </dd>\n  <dt id=\"object.prototype.propertyisenumerable\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></dt>\n  <dd>\n    <p>返回一个布尔值，用于表示内部属性 <a href=\"/zh-CN/docs/Web/JavaScript/Data_structures#%E5%B1%9E%E6%80%A7\">ECMAScript [[Enumerable]] attribute</a> 是否被设置。</p>\n  </dd>\n  <dt id=\"object.prototype.tolocalestring\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></dt>\n  <dd>\n    <p>调用 <code>toString()</code>。</p>\n  </dd>\n  <dt id=\"object.prototype.tostring\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></dt>\n  <dd>\n    <p>返回一个代表该对象的字符串。</p>\n  </dd>\n  <dt id=\"object.prototype.valueof\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></dt>\n  <dd>\n    <p>返回指定对象的原始值。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":""}},{"type":"prose","value":{"id":"给定_undefined_和_null_类型使用_object","title":"给定 <code>undefined</code> 和 <code>null</code> 类型使用 <code>Object</code>","isH3":true,"content":"<p>下面的例子将一个空的 <code>Object</code> 对象存到 <code>o</code> 中：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","titleAsText":"给定 undefined 和 null 类型使用 Object"}},{"type":"prose","value":{"id":"使用_object_生成布尔对象","title":"使用 <code>Object</code> 生成布尔对象","isH3":true,"content":"<p>下面的例子将<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> 对象存到 <code>o</code> 中：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 等价于 o = new Boolean(true);</span>\n<span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 等价于 o = new Boolean(false);</span>\n<span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","titleAsText":"使用 Object 生成布尔对象"}},{"type":"prose","value":{"id":"object_prototypes","title":"Object prototypes","isH3":true,"content":"<p>\n  当我们要修改现有的 <code>Object.prototype</code> 方法时，请你考虑一下在已经存在的逻辑之前或者之后通过包装扩展代码的方式来注入代码。\n  比如说，有一段代码将会在执行内部逻辑或者是其他扩展之前，有条件的执行一段自定义的逻辑。\n</p>\n<p>\n  当一个函数被调用时，调用的参数被保存在一个类似数组的“变量” <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments\">arguments</a>。\n  比如说：在调用 <code>myFn(a, b, c)</code> 时，myFunc 函数体中的 arguments 将会包含三个类似数组的元素，对应 <code>(a, b , c)</code>\n</p>\n<p>When modifying prototypes with hooks, pass <code>this</code> and the arguments (the call state) to the current behavior by calling <code>apply()</code> on the function. This pattern can be used for any prototype, such as <code>Node.prototype</code>, <code>Function.prototype</code>, etc.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> current <span class=\"token operator\">=</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>valueOf<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Since my property \"-prop-value\" is cross-cutting and isn't always</span>\n<span class=\"token comment\">// on the same prototype chain, I want to modify Object.prototype:</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">valueOf</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-prop-value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token string\">'-prop-value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// It doesn't look like one of my objects, so let's fall back on</span>\n    <span class=\"token comment\">// the default behavior by reproducing the current behavior as best we can.</span>\n    <span class=\"token comment\">// The apply behaves like \"super\" in some other languages.</span>\n    <span class=\"token comment\">// Even though valueOf() doesn't take arguments, some other hook may.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">current</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Since JavaScript doesn't exactly have sub-class objects, prototype is a useful workaround to make a “base class” object of certain functions that act as objects. For example:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canTalk <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">greet</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canTalk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi, I am '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Employee</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Person</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Employee<span class=\"token punctuation\">;</span> <span class=\"token comment\">//If you don't set Object.prototype.constructor to Employee,</span>\n                                             <span class=\"token comment\">//it will take prototype.constructor of Person (parent).</span>\n                                             <span class=\"token comment\">//To avoid that, we set the prototype.constructor to Employee (child).</span>\n\n  <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">greet</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canTalk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi, I am '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">', the '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Customer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Person</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Customer<span class=\"token punctuation\">;</span> <span class=\"token comment\">//If you don't set Object.prototype.constructor to Customer,</span>\n                                             <span class=\"token comment\">//it will take prototype.constructor of Person (parent).</span>\n                                             <span class=\"token comment\">//To avoid that, we set the prototype.constructor to Customer (child).</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Mime</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Person</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canTalk <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Mime</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Mime</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Mime<span class=\"token punctuation\">;</span> <span class=\"token comment\">//If you don't set Object.prototype.constructor to Mime,</span>\n                                     <span class=\"token comment\">//it will take prototype.constructor of Person (parent).</span>\n                                     <span class=\"token comment\">//To avoid that, we set the prototype.constructor to Mime (child).</span>\n\n  <span class=\"token keyword\">var</span> bob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Builder'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> joe <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Joe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> rg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Red Green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Handyman'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> mike <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mike'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> mime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mime</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mime'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  bob<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Hi, I am Bob, the Builder</span>\n\n  joe<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Hi, I am Joe</span>\n\n  rg<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Hi, I am Red Green, the Handyman</span>\n\n  mike<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Hi, I am Mike</span>\n\n  mime<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Object"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"javascript.builtins.Object","dataURL":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/bcd.json"}},{"type":"prose","value":{"id":"相关链接","title":"相关链接","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Object_initializer\">初始化对象</a></li>\n</ul>"}}],"toc":[{"text":"描述","id":"描述"},{"text":"构造函数","id":"构造函数"},{"text":"静态方法","id":"静态方法"},{"text":"实例属性","id":"实例属性"},{"text":"实例方法","id":"实例方法"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"相关链接","id":"相关链接"}],"summary":"Object 是 JavaScript 的一种 数据类型 。它用于存储各种键值集合和更复杂的实体。Objects 可以通过 Object() 构造函数或者使用 对象字面量 的方式创建","popularity":0.0116,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Object","locale":"en-US","native":"English (US)"},{"title":"Object","locale":"es","native":"Español"},{"title":"Object","locale":"fr","native":"Français"},{"title":"Object","locale":"ja","native":"日本語"},{"title":"Object","locale":"ko","native":"한국어"},{"title":"Object","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Object","locale":"ru","native":"Русский"},{"title":"Object","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/web/javascript/reference/global_objects/object","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/javascript/reference/global_objects/object/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/zh-CN/docs/Web/JavaScript/Reference","title":"JavaScript 参考"},{"uri":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects","title":"JavaScript 标准内置对象"},{"uri":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object","title":"Object"}],"pageTitle":"Object - JavaScript | MDN","noIndexing":false}}