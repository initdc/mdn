{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Map","mdn_url":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects\">标准内置对象</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>属性</strong></a><ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/@@species\"><code>get Map[@@species]</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/@@toStringTag\"><code>Map.prototype[@@toStringTag]</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/size\"><code>Map.prototype.size</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>方法</strong></a><ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator\"><code>Map.prototype[@@iterator]()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/clear\"><code>Map.prototype.clear()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/delete\"><code>Map.prototype.delete()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/entries\"><code>Map.prototype.entries()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\"><code>Map.prototype.forEach()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/get\"><code>Map.prototype.get()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/has\"><code>Map.prototype.has()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/keys\"><code>Map.prototype.keys()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/set\"><code>Map.prototype.set()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/values\"><code>Map.prototype.values()</code></a></li></ol></li><li><strong>继承</strong></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>属性</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\"><code>Function.prototype.prototype</code> <small>(en-US)</small></a></li></ol></li><li><a href=\"#\"><strong>方法</strong></a><ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>属性</strong></a><ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>方法</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>Map</code></strong> 对象保存键值对，并且能够记住键的原始插入顺序。任何值（对象或者<a href=\"/zh-CN/docs/Glossary/Primitive\">基本类型</a>）都可以作为一个键或一个值。</p><iframe class=\"interactive\" height=\"692\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/map.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"描述","title":"描述","isH3":false,"content":"<p>一个 <code>Map</code> 对象在迭代时会根据对象中元素的插入顺序来进行——一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a> 循环在每次迭代后会返回一个形式为 <code>[key，value]</code> 的数组。</p>"}},{"type":"prose","value":{"id":"键的相等","title":"键的相等","isH3":true,"content":"<ul>\n  <li>键的比较基于<a href=\"/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness#%E9%9B%B6%E5%80%BC%E7%9B%B8%E7%AD%89\">零值相等</a>算法。</li>\n  <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> 是与 <code>NaN</code> 相等的（虽然 <code>NaN !== NaN</code>），剩下所有其它的值是根据 <code>===</code> 运算符的结果判断是否相等。</li>\n  <li>在目前的 ECMAScript 规范中，<code>-0</code> 和 <code>+0</code> 被认为是相等的，尽管这在早期的草案中并不是这样。有关详细信息，请参阅<a href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7\">浏览器兼容性</a>表中的“Value equality for -0 and 0”。</li>\n</ul>"}},{"type":"prose","value":{"id":"objects_和_maps_的比较","title":"Objects 和 maps 的比较","isH3":true,"content":"<p><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> 和 <code>Map</code> 类似的是，它们都允许你按键存取一个值、删除键、检测一个键是否绑定了值。因此（并且也没有其他内建的替代方式了）过去我们一直都把对象当成 <code>Map</code> 使用。</p>\n<p>不过 <code>Map</code> 和 <code>Object</code> 有一些重要的区别，在下列情况中使用 <code>Map</code> 会是更好的选择：</p>\n<table class=\"standard-table\">\n  <thead>\n    <tr>\n      <th scope=\"row\"></th>\n      <th scope=\"col\">Map</th>\n      <th scope=\"col\">Object</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">意外的键</th>\n      <td><code>Map</code> 默认情况不包含任何键。只包含显式插入的键。</td>\n      <td>\n        <p>一个 <code>Object</code> 有一个原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。</p>\n        <div class=\"notecard note\" id=\"sect1\">\n          <p><strong>备注：</strong>虽然从 ES5 开始可以用 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create(null)</code></a> 来创建一个没有原型的对象，但是这种用法不太常见。</p>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">键的类型</th>\n      <td>一个 <code>Map</code> 的键可以是<strong>任意值</strong>，包括函数、对象或任意基本类型。</td>\n      <td>一个 <code>Object</code> 的键必须是一个 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> 或是 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a>。</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">键的顺序</th>\n      <td>\n        <p><code>Map</code> 中的键是有序的。因此，当迭代的时候，一个 <code>Map</code> 对象以插入的顺序返回键值。</p>\n      </td>\n      <td>\n        <p>虽然 <code>Object</code> 的键目前是有序的，但并不总是这样，而且这个顺序是复杂的。因此，最好不要依赖属性的顺序。</p>\n        <p>\n          自 ECMAScript 2015 规范以来，对象的属性被定义为是有序的；ECMAScript 2020 则额外定义了继承属性的顺序。参见 <a href=\"https://tc39.es/ecma262/#sec-ordinaryownpropertykeys\" class=\"external\" rel=\" noopener\">OrdinaryOwnPropertyKeys</a>\n          和\n          <a href=\"https://tc39.es/ecma262/#sec-enumerate-object-properties\" class=\"external\" rel=\" noopener\">EnumerateObjectProperties</a> 抽象规范说明。但是，请注意没有可以迭代对象所有属性的机制，每一种机制只包含了属性的不同子集。（<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in\"><code>for-in</code></a>\n          仅包含了以字符串为键的属性；<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys</code></a>\n          仅包含了对象自身的、可枚举的、以字符串为键的属性；<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\"><code>Object.getOwnPropertyNames</code></a>\n          包含了所有以字符串为键的属性，即使是不可枚举的；<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\"><code>Object.getOwnPropertySymbols</code></a>\n          与前者类似，但其包含的是以 <code>Symbol</code> 为键的属性，等等。）\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Size</th>\n      <td><code>Map</code> 的键值对个数可以轻易地通过 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/size\"><code>size</code></a> 属性获取。</td>\n      <td><code>Object</code> 的键值对个数只能手动计算。</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">迭代</th>\n      <td><code>Map</code> 是 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols\">可迭代的</a> 的，所以可以直接被迭代。</td>\n      <td>\n        <p><code>Object</code> 没有实现 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">迭代协议</a>，所以使用 JavaSctipt 的 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a> 表达式并不能直接迭代对象。</p>\n        <div class=\"notecard note\" id=\"sect2\">\n          <p><strong>备注：</strong></p>\n          <ul>\n            <li>对象可以实现迭代协议，或者你可以使用 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys</code></a> 或 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\"><code>Object.entries</code></a>。</li>\n            <li>\n              <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a>\n              表达式允许你迭代一个对象的<em>可枚举</em>属性。\n            </li>\n          </ul>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">性能</th>\n      <td>\n        <p>在频繁增删键值对的场景下表现更好。</p>\n      </td>\n      <td>\n        <p>在频繁添加和删除键值对的场景下未作出优化。</p>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">序列化和解析</th>\n      <td>\n        <p>没有元素的序列化和解析的支持。</p>\n        <p>（但是你可以使用携带 <em>replacer</em> 参数的 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a> 创建一个自己的对 <code>Map</code> 的序列化和解析支持。参见 Stack Overflow 上的提问：<a href=\"https://stackoverflow.com/q/29085197/\" class=\"external\" rel=\" noopener\">How do you JSON.stringify an ES6 Map?</a>）</p>\n      </td>\n      <td>\n        <p>原生的由 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> 到 JSON 的序列化支持，使用 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a>。</p>\n        <p>原生的由 JSON 到 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> 的解析支持，使用 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\"><code>JSON.parse()</code></a>。</p>\n      </td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"设置对象属性","title":"设置对象属性","isH3":true,"content":"<p>设置对象属性同样适用于 Map 对象，但容易造成困扰。</p>\n<p>即，以下的代码能够正常运行（但不推荐）：</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> wrongMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nwrongMap<span class=\"token punctuation\">[</span><span class=\"token string\">'bla'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'blaa'</span>\nwrongMap<span class=\"token punctuation\">[</span><span class=\"token string\">'bla2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'blaaa2'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>wrongMap<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Map { bla: 'blaa', bla2: 'blaaa2' }</span>\n</code></pre></div>\n<p>但这种设置属性的方式不会改变 Map 的数据结构。它使用的是通用对象的特性。<code>'bla'</code> 的值未被存储在 Map 中，无法被查询到。其它的对这一数据的操作也会失败：</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code>wrongMap<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bla'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// false</span>\nwrongMap<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bla'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>wrongMap<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Map { bla: 'blaa', bla2: 'blaaa2' }</span>\n</code></pre></div>\n<p>正确的存储数据到 Map 中的方式是使用 <code>set(key, value)</code> 方法。</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> contacts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jessie'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">phone</span><span class=\"token operator\">:</span> <span class=\"token string\">\"213-555-1234\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123 N 1st Ave\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jessie'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hilary'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hilary'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">phone</span><span class=\"token operator\">:</span> <span class=\"token string\">\"617-555-4321\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token string\">\"321 S 2nd St\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jessie'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// {phone: \"213-555-1234\", address: \"123 N 1st Ave\"}</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Raymond'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jessie'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>contacts<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"构造函数","title":"构造函数","isH3":false,"content":"<dl>\n  <dt id=\"map\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/Map\"><code>Map()</code></a></dt>\n  <dd>\n    <p>创建 <code>Map</code> 对象</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"静态属性","title":"静态属性","isH3":false,"content":"<dl>\n  <dt id=\"get_mapspecies\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/@@species\"><code>get Map[@@species]</code></a></dt>\n  <dd>\n    <p>用于创建派生对象的构造函数。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"实例属性","title":"实例属性","isH3":false,"content":"<dl>\n  <dt id=\"map.prototype.size\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/size\"><code>Map.prototype.size</code></a></dt>\n  <dd>\n    <p>返回 <code>Map</code> 对象中的键值对数量。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"实例方法","title":"实例方法","isH3":false,"content":"<dl>\n  <dt id=\"map.prototype.clear\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/clear\"><code>Map.prototype.clear()</code></a></dt>\n  <dd>\n    <p>移除 <code>Map</code> 对象中所有的键值对。</p>\n  </dd>\n  <dt id=\"map.prototype.deletekey\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/delete\"><code>Map.prototype.delete(<var>key</var>)</code></a></dt>\n  <dd>\n    <p>移除 <code>Map</code> 对象中指定的键值对，如果键值对存在并成功被移除，返回 <code>true</code>，否则返回 <code>false</code>。调用 <code>delete</code> 后再调用 <code>Map.prototype.has(key)</code> 将返回 <code>false</code>。</p>\n  </dd>\n  <dt id=\"map.prototype.getkey\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/get\"><code>Map.prototype.get(<var>key</var>)</code></a></dt>\n  <dd>\n    <p>返回与 <code>key</code> 关联的值，若不存在关联的值，则返回 <code>undefined</code>。</p>\n  </dd>\n  <dt id=\"map.prototype.haskey\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/has\"><code>Map.prototype.has(<var>key</var>)</code></a></dt>\n  <dd>\n    <p>返回一个布尔值，用来表明 <code>Map</code> 对象中是否存在与 <code>key</code> 关联的值。</p>\n  </dd>\n  <dt id=\"map.prototype.setkey_value\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/set\"><code>Map.prototype.set(<var>key</var>, <var>value</var>)</code></a></dt>\n  <dd>\n    <p>在 <code>Map</code> 对象中设置与指定的键 <code>key</code> 关联的值 <code>value</code>，并返回 <code>Map</code> 对象。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"迭代方法","title":"迭代方法","isH3":true,"content":"<dl>\n  <dt id=\"map.prototypeiterator\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator\"><code>Map.prototype[@@iterator]()</code></a></dt>\n  <dd>\n    <p>返回一个新的迭代对象，其为一个包含 <code>Map</code> 对象中所有键值对的 <strong><code>[key, value]</code> 数组</strong>，并以插入 <code>Map</code> 对象的顺序排列。</p>\n  </dd>\n  <dt id=\"map.prototype.keys\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/keys\"><code>Map.prototype.keys()</code></a></dt>\n  <dd>\n    <p>返回一个新的迭代对象，其中包含 <code>Map</code> 对象中所有的<strong>键</strong>，并以插入 <code>Map</code> 对象的顺序排列。</p>\n  </dd>\n  <dt id=\"map.prototype.values\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/values\"><code>Map.prototype.values()</code></a></dt>\n  <dd>\n    <p>返回一个新的迭代对象，其中包含 <code>Map</code> 对象中所有的<strong>值</strong>，并以插入 <code>Map</code> 对象的顺序排列。</p>\n  </dd>\n  <dt id=\"map.prototype.entries\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/entries\"><code>Map.prototype.entries()</code></a></dt>\n  <dd>\n    <p>返回一个新的迭代对象，其为一个包含 <code>Map</code> 对象中所有键值对的 <strong><code>[key, value]</code> 数组</strong>，并以插入 <code>Map</code> 对象的顺序排列。</p>\n  </dd>\n  <dt id=\"map.prototype.foreachcallbackfn_thisarg\"><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\"><code>Map.prototype.forEach(<var>callbackFn</var>[,\n    <var>thisArg</var>])</code></a></dt>\n  <dd>\n    <p>以插入的顺序对 <code>Map</code> 对象中存在的键值对分别调用一次 <code>callbackFn</code>。如果给定了 <code>thisArg</code> 参数，这个参数将会是回调函数中 <code>this</code> 的值。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":""}},{"type":"prose","value":{"id":"使用_map_对象","title":"使用 Map 对象","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> keyString <span class=\"token operator\">=</span> <span class=\"token string\">'a string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> keyObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">keyFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 添加键</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>keyString<span class=\"token punctuation\">,</span> <span class=\"token string\">\"和键'a string'关联的值\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>keyObj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"和键 keyObj 关联的值\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>keyFunc<span class=\"token punctuation\">,</span> <span class=\"token string\">\"和键 keyFunc 关联的值\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyMap<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n<span class=\"token comment\">// 读取值</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>keyString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// \"和键'a string'关联的值\"</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>keyObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// \"和键 keyObj 关联的值\"</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>keyFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// \"和键 keyFunc 关联的值\"</span>\n\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a string'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// \"和键'a string'关联的值\"</span>\n                         <span class=\"token comment\">// 因为 keyString === 'a string'</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// undefined，因为 keyObj !== {}</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined，因为 keyFunc !== function () {}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"将_nan_作为_map_的键","title":"将 NaN 作为 Map 的键","isH3":true,"content":"<p><code>NaN</code> 也可以作为 <code>Map</code> 对象的键。虽然 <code>NaN</code> 与任何值甚至与自己都不相等（<code>NaN !== NaN</code> 返回 true），但是因为所有的 <code>NaN</code> 的值都是无法区分的，所以下面的例子成立：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'not a number'</span><span class=\"token punctuation\">)</span>\n\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"not a number\"</span>\n\n<span class=\"token keyword\">const</span> otherNaN <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>otherNaN<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// \"not a number\"</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"使用_for..of_方法迭代_map","title":"使用 for..of 方法迭代 Map","isH3":true,"content":"<p><code>Map</code> 可以使用 <code>for..of</code> 循环来实现迭代：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'zero'</span><span class=\"token punctuation\">)</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'one'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> myMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">' = '</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 0 = zero</span>\n<span class=\"token comment\">// 1 = one</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">of</span> myMap<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 0</span>\n<span class=\"token comment\">// 1</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> value <span class=\"token keyword\">of</span> myMap<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// zero</span>\n<span class=\"token comment\">// one</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> myMap<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">' = '</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 0 = zero</span>\n<span class=\"token comment\">// 1 = one</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"使用_foreach_方法迭代_map","title":"使用 forEach() 方法迭代 Map","isH3":true,"content":"<p><code>Map</code> 也可以通过 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\"><code>forEach()</code></a> 方法迭代：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>myMap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">' = '</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 0 = zero</span>\n<span class=\"token comment\">// 1 = one</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"map_与数组的关系","title":"Map 与数组的关系","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> kvArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 使用常规的 Map 构造函数可以将一个二维键值对数组转换成一个 Map 对象</span>\n<span class=\"token keyword\">const</span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>kvArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回值为 \"value1\"</span>\n\n<span class=\"token comment\">// 使用 Array.from 函数可以将一个 Map 对象转换成一个二维键值对数组</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出和 kvArray 相同的数组</span>\n\n<span class=\"token comment\">// 更简洁的方法来做如上同样的事情，使用展开运算符</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>myMap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 或者在键或者值的迭代器上使用 Array.from，进而得到只含有键或者值的数组</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 [\"key1\", \"key2\"]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"复制或合并_maps","title":"复制或合并 Maps","isH3":true,"content":"<p><code>Map</code> 能像数组一样被复制：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'one'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> clone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>clone<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// one</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original <span class=\"token operator\">===</span> clone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false. 浅比较 不为同一个对象的引用</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 请记住，<em>数据本身</em>未被克隆。</p>\n</div>\n<p><code>Map</code> 对象间可以进行合并，但是会保持键的唯一性。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'one'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> second <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'uno'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dos'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 合并两个 Map 对象时，如果有重复的键值，则后面的会覆盖前面的。</span>\n<span class=\"token comment\">// 展开运算符本质上是将 Map 对象转换成数组。</span>\n<span class=\"token keyword\">const</span> merged <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>second<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>merged<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// uno</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>merged<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// dos</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>merged<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// three</span>\n</code></pre></div>\n<p><code>Map</code> 对象也能与数组合并：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'one'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> second <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'uno'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dos'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Map 对象同数组进行合并时，如果有重复的键值，则后面的会覆盖前面的。</span>\n<span class=\"token keyword\">const</span> merged <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>second<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'eins'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>merged<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eins</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>merged<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// dos</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>merged<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// three</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/keyed-collections.html#sec-map-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Map"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"javascript.builtins.Map","dataURL":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/bcd.json"}},{"type":"prose","value":{"id":"参见","title":"参见","isH3":false,"content":"<ul>\n  <li>\n    A polyfill of <code>Map</code> is available in\n    <a href=\"https://github.com/zloirock/core-js#map\" class=\"external\" rel=\" noopener\"><code>core-js</code></a>\n  </li>\n  <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a></li>\n  <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\"><code>WeakMap</code></a></li>\n  <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\"><code>WeakSet</code></a></li>\n</ul>"}}],"toc":[{"text":"描述","id":"描述"},{"text":"构造函数","id":"构造函数"},{"text":"静态属性","id":"静态属性"},{"text":"实例属性","id":"实例属性"},{"text":"实例方法","id":"实例方法"},{"text":"示例","id":"示例"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"参见","id":"参见"}],"summary":"Map 对象保存键值对，并且能够记住键的原始插入顺序。任何值（对象或者基本类型）都可以作为一个键或一个值。","popularity":0.0151,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Map","locale":"en-US","native":"English (US)"},{"title":"Map","locale":"fr","native":"Français"},{"title":"Map","locale":"ja","native":"日本語"},{"title":"Map","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Map","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/web/javascript/reference/global_objects/map","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/javascript/reference/global_objects/map/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/zh-CN/docs/Web/JavaScript/Reference","title":"JavaScript 参考"},{"uri":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects","title":"JavaScript 标准内置对象"},{"uri":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map","title":"Map"}],"pageTitle":"Map - JavaScript | MDN","noIndexing":false}}