{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Math.imul()","mdn_url":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/imul","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects\">标准内置对象</a></strong></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math\"><code>Math</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>属性</strong></a><ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/E\"><code>Math.E</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/LN10\"><code>Math.LN10</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/LN2\"><code>Math.LN2</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG10E\"><code>Math.LOG10E</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG2E\"><code>Math.LOG2E</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/PI\"><code>Math.PI</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT1_2\"><code>Math.SQRT1_2</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT2\"><code>Math.SQRT2</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>方法</strong></a><ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/abs\"><code>Math.abs()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/acos\"><code>Math.acos()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh\"><code>Math.acosh()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/asin\"><code>Math.asin()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh\"><code>Math.asinh()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/atan\"><code>Math.atan()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2\"><code>Math.atan2()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh\"><code>Math.atanh()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt\"><code>Math.cbrt()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\"><code>Math.ceil()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\"><code>Math.clz32()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\"><code>Math.cos()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh\"><code>Math.cosh()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/exp\"><code>Math.exp()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1\"><code>Math.expm1()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\"><code>Math.floor()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/fround\"><code>Math.fround()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot\"><code>Math.hypot()</code></a></li><li><em><code>Math.imul()</code></em></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/log\"><code>Math.log()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/log10\"><code>Math.log10()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p\"><code>Math.log1p()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/log2\"><code>Math.log2()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/max\"><code>Math.max()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/min\"><code>Math.min()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/pow\"><code>Math.pow()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/random\"><code>Math.random()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/round\"><code>Math.round()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\"><code>Math.sign()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/sin\"><code>Math.sin()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh\"><code>Math.sinh()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt\"><code>Math.sqrt()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/tan\"><code>Math.tan()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh\"><code>Math.tanh()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc\"><code>Math.trunc()</code></a></li></ol></li><li><strong>继承</strong></li><li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>属性</strong></a><ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>方法</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p></p>该函数将两个参数分别转换为 32 位整数，相乘后返回 32 位结果，类似 C 语言的 32 位整数相乘。<p></p><iframe class=\"interactive\" height=\"490\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/math-imul.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"语法","title":"语法","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: plain notranslate\">var product = Math.imul(a, b)\n</pre></div>"}},{"type":"prose","value":{"id":"参数","title":"参数","isH3":true,"content":"<dl>\n  <dt id=\"a\"><code>a</code></dt>\n  <dd>\n    <p>被乘数。</p>\n  </dd>\n  <dt id=\"b\"><code>b</code></dt>\n  <dd>\n    <p>乘数。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"返回值","title":"返回值","isH3":true,"content":"<p>类似 C 语言 32 位整数相乘的结果。</p>"}},{"type":"prose","value":{"id":"描述","title":"描述","isH3":false,"content":"<p><code>Math.imul()</code> 可以进行类似 C 语言的 32 位整数相乘。该特性对于一些项目比如 <a href=\"http://en.wikipedia.org/wiki/Emscripten\" class=\"external\" rel=\" noopener\">Emscripten</a> 很有用。因为 <code>imul()</code> 是 <code>Math</code> 的静态方法，所以用法是 <code>Math.imul()</code>，而不是新创建的 <code>Math</code> 对象的方法 (<code>Math</code> 不是构造函数)。如果使用 JavaScript 浮点数做为 <code>imul</code> 的参数，会有性能损失。这是因为相乘前 imul 会将浮点数转换为整数，相乘后会将整数重新转换为浮点数，这两步转换的开销是比较大的。imul 存在的原因是在 AsmJS(目前为止唯一一种环境) 下它是快速的。AsmJS 使 JIST-optimizers 更容易实现 JavaScript 内部的整数。现代浏览器中，唯一能体现出 imul 性能优越的场景是两个 Number 内部以整数的形式相乘 (仅在 AsmJS 下可行)。</p>"}},{"type":"prose","value":{"id":"例子","title":"例子","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Math<span class=\"token punctuation\">.</span><span class=\"token function\">imul</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 8</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">imul</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -8</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">imul</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">imul</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xffffffff</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//-5</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">imul</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xfffffffe</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//-10</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"polyfill","title":"Polyfill","isH3":false,"content":"<p>下面的 JavaScript 代码可以实现该函数：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Math<span class=\"token punctuation\">.</span>imul<span class=\"token punctuation\">)</span> Math<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">imul</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> aHi <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> aLo <span class=\"token operator\">=</span> a <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> bHi <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> bLo <span class=\"token operator\">=</span> b <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// the shift by 0 fixes the sign on the high part</span>\n  <span class=\"token comment\">// the final |0 converts the unsigned value into a signed value</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>aLo <span class=\"token operator\">*</span> bLo<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>aHi <span class=\"token operator\">*</span> bLo <span class=\"token operator\">+</span> aLo <span class=\"token operator\">*</span> bHi<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>然而，下面的实现性能会更好一些。因为运行这段 polyfill 的浏览器很有可能会在内部使用浮点数，而不是整数表示 javascript 的 Number。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Math<span class=\"token punctuation\">.</span>imul<span class=\"token punctuation\">)</span> Math<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">imul</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">opA<span class=\"token punctuation\">,</span> opB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  opB <span class=\"token operator\">|=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ensure that opB is an integer. opA will automatically be coerced.</span>\n  <span class=\"token comment\">// floating points give us 53 bits of precision to work with plus 1 sign bit</span>\n  <span class=\"token comment\">// automatically handled for our convienence:</span>\n  <span class=\"token comment\">// 1. 0x003fffff /*opA &amp; 0x000fffff*/ * 0x7fffffff /*opB*/ = 0x1fffff7fc00001</span>\n  <span class=\"token comment\">//    0x1fffff7fc00001 &lt; Number.MAX_SAFE_INTEGER /*0x1fffffffffffff*/</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>opA <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x003fffff</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> opB<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 2. We can remove an integer coersion from the statement above because:</span>\n  <span class=\"token comment\">//    0x1fffff7fc00001 + 0xffc00000 = 0x1fffffff800001</span>\n  <span class=\"token comment\">//    0x1fffffff800001 &lt; Number.MAX_SAFE_INTEGER /*0x1fffffffffffff*/</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>opA <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffc00000</span> <span class=\"token comment\">/*!== 0*/</span><span class=\"token punctuation\">)</span> result <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>opA <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffc00000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> opB <span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result <span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-math.imul","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Math.imul"}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"query":"javascript.builtins.Math.imul","dataURL":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/imul/bcd.json"}}],"toc":[{"text":"语法","id":"语法"},{"text":"描述","id":"描述"},{"text":"例子","id":"例子"},{"text":"Polyfill","id":"polyfill"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"}],"summary":"被乘数。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Math.imul()","locale":"en-US","native":"English (US)"},{"title":"Math.imul()","locale":"fr","native":"Français"},{"title":"Math.imul()","locale":"ja","native":"日本語"},{"title":"Math.imul()","locale":"ko","native":"한국어"},{"title":"Math.imul()","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/javascript/reference/global_objects/math/imul","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/javascript/reference/global_objects/math/imul/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/zh-CN/docs/Web/JavaScript/Reference","title":"JavaScript 参考"},{"uri":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects","title":"JavaScript 标准内置对象"},{"uri":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math","title":"Math"},{"uri":"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/imul","title":"Math.imul()"}],"pageTitle":"Math.imul() - JavaScript | MDN","noIndexing":false}}