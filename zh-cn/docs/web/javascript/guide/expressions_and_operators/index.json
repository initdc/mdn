{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"表达式与运算符","mdn_url":"/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n <ol>\n  <li><a href=\"/zh-CN/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/zh-CN/docs/Web/JavaScript/Tutorials\"><strong>教程:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>快速入门</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript 基础知识</a></li>\n        <li><a href=\"/zh-CN/docs/Learn/JavaScript/First_steps\">JavaScript first steps</a></li>\n        <li><a href=\"/zh-CN/docs/Learn/JavaScript/Building_blocks\">JavaScript building blocks</a></li>\n        <li><a href=\"/zh-CN/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>JavaScript 指南</summary>\n      <ol>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Introduction\">Introduction</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_Types\">Grammar and types</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Control flow and error handling</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Loops_and_iteration\">Loops and iteration</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Functions\">Functions</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressions and operators</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Numbers_and_dates\">Numbers and dates</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Text_formatting\">Text formatting</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions\">Regular expressions</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections\">Indexed collections</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Keyed_collections\">Keyed collections</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects\">Working with objects</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Details of the object model</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_generators\">Iterators and generators</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Meta_programming\">Meta programming</a></li>\n          <li><a href=\"/zh-CN/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>中级教程</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">深入 JavaScript</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Data_structures\">JavaScript 数据结构</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness\">如何正确判断相等性</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Closures\">Closures</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>高级</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">继承和原型链</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Strict_mode\">严格模式</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Typed_arrays\">JavaScript 类型化数组</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Memory_Management\">内存管理</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/EventLoop\">Concurrency model and Event Loop</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/zh-CN/docs/Web/JavaScript/Reference\">引用:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>内置对象</summary>\n        <ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>表达式和运算符</summary>\n      <ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>语句和声明</summary>\n      <ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>函数</summary>\n      <ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>更多</summary>\n      <ol>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/JavaScript_technologies_overview\">JavaScript 知识概要</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar\">词法文法</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Data_structures\">JavaScript 数据结构</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">属性的可枚举性和所有权</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols\">Iteration protocols</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Strict_mode\">严格模式</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">切换到严格模式</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Template_literals\">模板字符串</a></li>\n        <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">已废弃的特性</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/JavaScript/Guide/Functions\">« 上一页</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/JavaScript/Guide/Numbers_and_dates\">下一页  »</a></li>\n</ul>\n<p>本章描述了 JavaScript 的表达式和运算符，包括了赋值，比较，算数，位运算，逻辑，字符串，三元等等。</p>\n<p>一个完整详细的运算符列表和表达式可以参见 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators\">reference</a>.</p>"}},{"type":"prose","value":{"id":"运算符","title":"运算符","isH3":false,"content":"<p>JavaScript 拥有如下类型的运算符。本节描述了运算符和运算符的优先级。</p>\n<ul>\n  <li><a href=\"#%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6\">赋值运算符（Assignment operators）</a></li>\n  <li><a href=\"#%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6\">比较运算符（Comparison operators）</a></li>\n  <li><a href=\"#%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6\">算数运算符（Arithmetic operators）</a></li>\n  <li><a href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6\">位运算符（Bitwise operators）</a></li>\n  <li><a href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\">逻辑运算符（Logical operators）</a></li>\n  <li><a href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%90%E7%AE%97%E7%AC%A6\">字符串运算符（String operators）</a></li>\n  <li><a href=\"#conditional_operator\">条件（三元）运算符（Conditional operator）</a></li>\n  <li><a href=\"#comma_operator\">逗号运算符（Comma operator）</a></li>\n  <li><a href=\"#delete\">一元运算符（Unary operators）</a></li>\n  <li><a href=\"#%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6\">关系运算符（Relational operator）</a></li>\n</ul>\n<p>JavaScript 拥有二元和一元运算符，和一个特殊的三元运算符（条件运算符）。一个二元运算符需要两个操作数，分别在运算符的前面和后面：</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">操作数 1 运算符 操作数 2\n</pre></div>\n<p>例如，<code>3+4</code> 或 <code>x*y</code>。</p>\n<p>一个一元运算符需要一个操作数，在运算符前面或后面：</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">运算符 操作数\n</pre></div>\n<p>或</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">操作数 运算符\n</pre></div>\n<p>例如，<code>x++</code> 或 <code>++x</code>。</p>"}},{"type":"prose","value":{"id":"赋值运算符","title":"赋值运算符","isH3":true,"content":"<p>一个 <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">赋值运算符 (assignment operator) (en-US)</a> 将它右边操作数的值赋给它左边的操作数。最简单的赋值运算符是等于（<code>=</code>），它将右边的操作数值赋给左边的操作数。那么 <code>x = y</code> 就是将 y 的值赋给 x。</p>\n<p>还有一些复合赋值操作符，它们是下表列出的这些操作的缩写：</p>\n<table>\n  <thead>\n    <tr>\n      <th>名字</th>\n      <th>简写的操作符</th>\n      <th>含义</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">赋值 (Assignment) (en-US)</a></td>\n      <td><code>x = y</code></td>\n      <td><code>x = y</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#addition_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">加法赋值 (Addition assignment) (en-US)</a></td>\n      <td><code>x += y</code></td>\n      <td><code>x = x + y</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#subtraction_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">减法赋值 (Subtraction assignment) (en-US)</a></td>\n      <td><code>x -= y</code></td>\n      <td><code>x = x - y</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#multiplication_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">乘法赋值 (Multiplication assignment) (en-US)</a></td>\n      <td><code>x *= y</code></td>\n      <td><code>x = x * y</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#division_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">除法赋值 (Division assignment) (en-US)</a></td>\n      <td><code>x /= y</code></td>\n      <td><code>x = x / y</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#remainder_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">求余赋值 (Remainder assignment) (en-US)</a></td>\n      <td><code>x %= y</code></td>\n      <td><code>x = x % y</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#exponentiation_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">求幂赋值 (Exponentiation assignment) (en-US)</a></td>\n      <td><code>x **= y</code></td>\n      <td><code>x = x ** y</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#left_shift_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">左移位赋值 (Left shift assignment) (en-US)</a></td>\n      <td><code>x &lt;&lt;= y</code></td>\n      <td><code>x = x &lt;&lt; y</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#right_shift_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">右移位赋值 (Right shift assignment) (en-US)</a></td>\n      <td><code>x &gt;&gt;= y</code></td>\n      <td><code>x = x &gt;&gt; y</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#unsigned_right_shift_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">无符号右移位赋值 (Unsigned right shift assignment) (en-US)</a></td>\n      <td><code>x &gt;&gt;&gt;= y</code></td>\n      <td><code>x = x &gt;&gt;&gt; y</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#bitwise_and_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">按位与赋值 (Bitwise AND assignment) (en-US)</a></td>\n      <td><code>x &amp;= y</code></td>\n      <td><code>x = x &amp; y</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#bitwise_xor_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">按位异或赋值 (Bitwise XOR assignment) (en-US)</a></td>\n      <td><code>x ^= y</code></td>\n      <td><code>x = x ^ y</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#bitwise_or_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">按位或赋值 (Bitwise OR assignment) (en-US)</a></td>\n      <td><code>x |= y</code></td>\n      <td><code>x = x | y</code></td>\n    </tr>\n  </tbody>\n</table>\n<h4 id=\"解构\">解构</h4>\n<p>对于更复杂的赋值，<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">解构赋值</a>语法是一个能从数组或对象对应的数组结构或对象字面量里提取数据的 Javascript 表达式。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 不使用解构</span>\n<span class=\"token keyword\">var</span> one   <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> two   <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> three <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 使用解构</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span>one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">,</span> three<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"比较运算符","title":"比较运算符","isH3":true,"content":"<p><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">比较运算符 (en-US)</a>比较它的操作数并返回一个基于表达式是否为真的逻辑值。操作数可以是数字，字符串，逻辑，对象值。字符串比较是基于标准的字典顺序，使用 Unicode 值。在多数情况下，如果两个操作数不是相同的类型，JavaScript 会尝试转换它们为恰当的类型来比较。这种行为通常发生在数字作为操作数的比较。类型转换的例外是使用 <code>===</code> 和 <code>!==</code> 操作符，它们会执行严格的相等和不相等比较。这些运算符不会在检查相等之前转换操作数的类型。下面的表格描述了该示例代码中的各比较运算符</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> var1 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> var2 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<table>\n  <thead>\n    <tr>\n      <th>运算符</th>\n      <th>描述</th>\n      <th>返回 true 的示例</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#equality\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">等于 Equal (en-US)</a> (<code>==</code>)</td>\n      <td>如果两边操作数相等时返回 true。</td>\n      <td><code>3 == var1</code> <code>\"3\" == var1</code> <code>3 == '3'</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#inequality\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">不等于 Not equal (en-US)</a> (<code>!=</code>)</td>\n      <td>如果两边操作数不相等时返回 true</td>\n      <td><code>var1 != 4 var2 != \"3\"</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#identity\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">全等 Strict equal (en-US)</a> (<code>===</code>)</td>\n      <td>两边操作数相等且类型相同时返回 true。参见 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is</code></a> and <a href=\"/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness\">sameness in JS</a>.</td>\n      <td><code>3 === var1</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#nonidentity\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">不全等 Strict not equal (en-US)</a> (<code>!==</code>)</td>\n      <td>两边操作数不相等或类型不同时返回 true。</td>\n      <td><code>var1 !== \"3\" 3 !== '3'</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#greater_than_operator\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">大于 Greater than (en-US)</a> (<code>&gt;</code>)</td>\n      <td>左边的操作数大于右边的操作数返回 true</td>\n      <td><code>var2 &gt; var1 \"12\" &gt; 2</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#greater_than_or_equal_operator\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">大于等于 Greater than or equal (en-US)</a> (<code>&gt;=</code>)</td>\n      <td>左边的操作数大于或等于右边的操作数返回 true</td>\n      <td><code>var2 &gt;= var1 var1 &gt;= 3</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#less_than_operator\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">小于 Less than (en-US)</a> (<code>&lt;</code>)</td>\n      <td>左边的操作数小于右边的操作数返回 true</td>\n      <td><code>var1 &lt; var2 \"2\" &lt; 12</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#less_than_or_equal_operator\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">小于等于 Less than or equal (en-US)</a> (<code>&lt;=</code>)</td>\n      <td>左边的操作数小于或等于右边的操作数返回 true</td>\n      <td><code>var1 &lt;= var2 var2 &lt;= 5</code></td>\n    </tr>\n  </tbody>\n</table>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> （<strong>=&gt;</strong>）不是运算符，而是<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">箭头函数</a>的标记符号。</p>\n</div>"}},{"type":"prose","value":{"id":"算术运算符","title":"算术运算符","isH3":true,"content":"<p>算术运算符使用数值 (字面量或者变量) 作为操作数并返回一个数值。标准的算术运算符就是加减乘除 (+ - * /)。当操作数是浮点数时，这些运算符表现得跟它们在大多数编程语言中一样（特殊要注意的是，除零会产生<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>）。例如：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 0.5</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>除了标准的算术运算符（+， - ，* /），JavaScript 还提供了下表中的算术运算符。</p>\n<table>\n  <thead>\n    <tr>\n      <th>Operator</th>\n      <th>Description</th>\n      <th>Example</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>求余 (<code>%</code>)</td>\n      <td>二元运算符。返回相除之后的余数。</td>\n      <td>12 % 5 返回 2。</td>\n    </tr>\n    <tr>\n      <td>自增 (<code>++</code>)</td>\n      <td>一元运算符。将操作数的值加一。如果放在操作数前面 (<code>++x</code>), 则返回加一后的值; 如果放在操作数后面 (<code>x++</code>), 则返回操作数原值，然后再将操作数加一。</td>\n      <td><code>var x=3;</code> <code>console.log(++x); //4</code> <code>console.log(x); //4</code> <code>var y=3;</code> <code>console.log(y++); //3</code> <code>console.log(y); //4</code></td>\n    </tr>\n    <tr>\n      <td>自减 (<code>--</code>)</td>\n      <td>一元运算符。将操作数的值减一。前后缀两种用法的返回值类似自增运算符。</td>\n      <td>var x=3; console.log(--x); //输入 2,x=2var y=3;console.log(y--);//输出 3,x=2;</td>\n    </tr>\n    <tr>\n      <td>一元负值符 (<code>-</code>)</td>\n      <td>一元运算符，返回操作数的负值。</td>\n      <td>var x=3; console.log(-x); //输入 -3</td>\n    </tr>\n    <tr>\n      <td>一元正值符 (+)</td>\n      <td>一元运算符，如果操作数在之前不是 number，试图将其转换为 number</td>\n      <td><code>console.log( +'3' ); // 3</code> <code>console.log( '3' ); // '3'</code> <code>console.log(+true); // 1</code></td>\n    </tr>\n    <tr>\n      <td>指数运算符 (**)</td>\n      <td>计算 <code>base(底数)</code> 的 <code>exponent(</code>指数<code>) 次方</code>, 表示为<code>base^exponent</code></td>\n      <td><code>2 ** 3</code> returns <code>8</code>. <code>10 ** -1</code> returns <code>0.1</code>.</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"位运算符","title":"位运算符","isH3":true,"content":"<p>位运算符将它的操作数视为 32 位元的二进制串（0 和 1 组成）而非十进制八进制或十六进制数。例如：十进制数字 9 用二进制表示为 1001，位运算符就是在这个二进制表示上执行运算，但是返回结果是标准的 JavaScript 数值。</p>\n<p>下表总结了 JavaScript 的位运算符。</p>\n<table>\n  <thead>\n    <tr>\n      <th>Operator</th>\n      <th>Usage</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>按位与 <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#bitwise_and\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">AND (en-US)</a></td>\n      <td><code>a &amp; b</code></td>\n      <td>在 a,b 的位表示中，每一个对应的位都为 1 则返回 1，否则返回 0.</td>\n    </tr>\n    <tr>\n      <td>按位或 <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#bitwise_or\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">OR (en-US)</a></td>\n      <td><code>a | b</code></td>\n      <td>在 a,b 的位表示中，每一个对应的位，只要有一个为 1 则返回 1，否则返回 0.</td>\n    </tr>\n    <tr>\n      <td>按位异或 <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#bitwise_xor\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">XOR (en-US)</a></td>\n      <td><code>a ^ b</code></td>\n      <td>在 a,b 的位表示中，每一个对应的位，两个不相同则返回 1，相同则返回 0.</td>\n    </tr>\n    <tr>\n      <td>按位非 <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#bitwise_not\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">NOT (en-US)</a></td>\n      <td><code>~ a</code></td>\n      <td>反转被操作数的位。</td>\n    </tr>\n    <tr>\n      <td>左移 <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#left_shift\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">shift (en-US)</a></td>\n      <td><code>a &lt;&lt; b</code></td>\n      <td>将 a 的二进制串向左移动 b 位，右边移入 0.</td>\n    </tr>\n    <tr>\n      <td>算术右移</td>\n      <td><code>a &gt;&gt; b</code></td>\n      <td>把 a 的二进制表示向右移动 b 位，丢弃被移出的所有位。(译注：算术右移左边空出的位是根据最高位是 0 和 1 来进行填充的)</td>\n    </tr>\n    <tr>\n      <td>无符号右移 (左边空出位用 0 填充)</td>\n      <td><code>a &gt;&gt;&gt; b</code></td>\n      <td>把 a 的二进制表示向右移动 b 位，丢弃被移出的所有位，并把左边空出的位都填充为 0</td>\n    </tr>\n  </tbody>\n</table>\n<h4 id=\"位逻辑运算符\">位逻辑运算符</h4>\n<p>概念上来讲，位逻辑运算符工作流程如下：</p>\n<ul>\n  <li>操作数被转换为 32bit 整數，以位序列（0 和 1 组成）表示。若超過 32bits，則取低位 32bit，如下所示：</li>\n</ul>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">  Before: 11100110111110100000000000000110000000000001\n  After:              10100000000000000110000000000001\n</pre></div>\n<ul>\n  <li>第一个操作数的每一位都与第二个操作数的对应位组对：第一位对应第一位，第二位对应第二位，以此类推。</li>\n  <li>运算符被应用到每一对\"位\"上，最终的运算结果由每一对“位”的运算结果组合起来。</li>\n</ul>\n<p>例如，十进制数 9 的二进制表示是 1001，十进制数 15 的二进制表示是 1111.因此，当位运算符应用到这两个值时，结果如下：</p>\n<table>\n  <thead>\n    <tr>\n      <th>表达式</th>\n      <th>结果</th>\n      <th>二进制描述</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>15 &amp; 9</code></td>\n      <td><code>9</code></td>\n      <td><code>1111 &amp; 1001 = 1001</code></td>\n    </tr>\n    <tr>\n      <td><code>15 | 9</code></td>\n      <td><code>15</code></td>\n      <td><code>1111 | 1001 = 1111</code></td>\n    </tr>\n    <tr>\n      <td><code>15 ^ 9</code></td>\n      <td><code>6</code></td>\n      <td><code>1111 ^ 1001 = 0110</code></td>\n    </tr>\n    <tr>\n      <td><code>~15</code></td>\n      <td><code>-16</code></td>\n      <td><code>~ 0000 0000 … 0000 1111 = 1111 1111 … 1111 0000</code></td>\n    </tr>\n    <tr>\n      <td><code>~9</code></td>\n      <td><code>-10</code></td>\n      <td><code>~ 0000 0000 … 0000 1001 = 1111 1111 … 1111 0110</code></td>\n    </tr>\n  </tbody>\n</table>\n<p>注意位运算符“非”将所有的 32 位取反，而值的最高位 (最左边的一位) 为 1 则表示负数 (2-补码表示法)。</p>\n<h4 id=\"移位运算符\">移位运算符</h4>\n<p>移位运算符带两个操作数：第一个是待移位的数，第二个是指定第一个数要被移多少位的数。移位的方向由运算符来控制。</p>\n<p>移位运算符把操作数转为 32bit 整数，然后得出一个与待移位数相同种类的值。</p>\n<p>移位运算符列表如下。</p>\n<p><strong>移位运算符</strong></p>\n<table>\n  <thead>\n    <tr>\n      <th>运算符</th>\n      <th>描述</th>\n      <th>范例</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>&lt;&lt;</code> (左移位)</td>\n      <td>将第一个操作数向左移动指定数量的位。左边移出位被抛弃。左边移出的几位被丢弃。右边多出的空位由 0 补齐</td>\n      <td><code>9&lt;&lt;2 产生 36，因为 1001 移位 2 比特向左变为 100100，它是 36。</code></td>\n    </tr>\n    <tr>\n      <td><code>&gt;&gt;</code> (带符号右移)</td>\n      <td>将第一个操作数向右移动指定数量的位。右边移出位被抛弃。左边多出的空位由原值的最左边数字补齐。</td>\n      <td><code>9&gt;&gt;2 产生 2，因为 1001 移位 2 位向右变为 10，其是 2。同样，-9&gt;&gt;2 产生 -3，由于符号被保留。</code></td>\n    </tr>\n    <tr>\n      <td><code>&gt;&gt;&gt;</code> (补零右移)</td>\n      <td>将第一个操作数向右移动指定数量的位。右边移出位被抛弃。左边多出的空位由 0 补齐。</td>\n      <td><code>19&gt;&gt;&gt;2</code>产生 4，因为 10011 移位 2 位向右变为 100，它是 4。对非负数值，补零右移和带符号右移产生相同结果。</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"逻辑运算符","title":"逻辑运算符","isH3":true,"content":"<p>逻辑运算符常用于布尔（逻辑）值之间; 当操作数都是布尔值时，返回值也是布尔值。不过实际上<code>&amp;&amp;</code>和<code>||</code>返回的是一个特定的操作数的值，所以当它用于非布尔值的时候，返回值就可能是非布尔值。逻辑运算符的描述如下。</p>\n<p><strong>逻辑运算符</strong></p>\n<table>\n  <thead>\n    <tr>\n      <th>运算符</th>\n      <th>范例</th>\n      <th>描述</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#logical_and\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">逻辑与 (en-US)</a> <code>(&amp;&amp;</code>)</td>\n      <td><code>expr1 &amp;&amp; expr2</code></td>\n      <td>(逻辑与) 如果 expr1 能被转换为 false，那么返回 expr1；否则，返回<code>expr2</code>。因此<code>，&amp;&amp;</code>用于布尔值时，当操作数都为 true 时返回 true；否则返回 false.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#logical_or\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">逻辑或 (en-US)</a> (<code>||</code>)</td>\n      <td><code>expr1 || expr2</code></td>\n      <td>(逻辑或) 如果 expr1 能被转换为 true，那么返回 expr1；否则，返回<code>expr2</code>。因此，|| 用于布尔值时，当任何一个操作数为 true 则返回 true；如果操作数都是 false 则返回 false。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#logical_not\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">逻辑非 (en-US)</a> <code>(!)</code></td>\n      <td><code>!expr</code></td>\n      <td>(逻辑非) 如果操作数能够转换为 true 则返回 false；否则返回 true。</td>\n    </tr>\n  </tbody>\n</table>\n<p>能被转换为<code>false</code>的值有<code>null</code>, <code>0</code>, <code>NaN</code>, 空字符串 (\"\") 和<code>undefined</code>。（译者注：也可以称作”falsy“）</p>\n<p>下面是&amp;&amp;（逻辑\"与\"）操作符的示例。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a1 <span class=\"token operator\">=</span>  <span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// t &amp;&amp; t returns true</span>\n<span class=\"token keyword\">var</span> a2 <span class=\"token operator\">=</span>  <span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t &amp;&amp; f returns false</span>\n<span class=\"token keyword\">var</span> a3 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// f &amp;&amp; t returns false</span>\n<span class=\"token keyword\">var</span> a4 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f &amp;&amp; f returns false</span>\n<span class=\"token keyword\">var</span> a5 <span class=\"token operator\">=</span> <span class=\"token string\">\"Cat\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"Dog\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t &amp;&amp; t returns Dog</span>\n<span class=\"token keyword\">var</span> a6 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"Cat\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// f &amp;&amp; t returns false</span>\n<span class=\"token keyword\">var</span> a7 <span class=\"token operator\">=</span> <span class=\"token string\">\"Cat\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t &amp;&amp; f returns false</span>\n</code></pre></div>\n<p>下面是 ||（逻辑\"或\"）操作符的示例。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> o1 <span class=\"token operator\">=</span>  <span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// t || t returns true</span>\n<span class=\"token keyword\">var</span> o2 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// f || t returns true</span>\n<span class=\"token keyword\">var</span> o3 <span class=\"token operator\">=</span>  <span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t || f returns true</span>\n<span class=\"token keyword\">var</span> o4 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f || f returns false</span>\n<span class=\"token keyword\">var</span> o5 <span class=\"token operator\">=</span> <span class=\"token string\">\"Cat\"</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"Dog\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t || t returns Cat</span>\n<span class=\"token keyword\">var</span> o6 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"Cat\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// f || t returns Cat</span>\n<span class=\"token keyword\">var</span> o7 <span class=\"token operator\">=</span> <span class=\"token string\">\"Cat\"</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t || f returns Cat</span>\n</code></pre></div>\n<p>下面是！（逻辑\"非\"）操作符的示例。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> n1 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// !t returns false</span>\n<span class=\"token keyword\">var</span> n2 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// !f returns true</span>\n<span class=\"token keyword\">var</span> n3 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token string\">\"Cat\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// !t returns false</span>\n</code></pre></div>\n<h4 id=\"短路求值\">短路求值</h4>\n<p>作为逻辑表达式进行求值是从左到右，它们是为可能的“短路”的出现而使用以下规则进行测试：</p>\n<ul>\n  <li><code>false</code> &amp;&amp; <em>anything</em> // 被短路求值为 false</li>\n  <li><code>true</code> || <em>anything</em> // 被短路求值为 true</li>\n</ul>\n<p>逻辑的规则，保证这些评估是总是正确的。请注意，上述表达式的<code>anything</code>部分不会被求值，所以这样做不会产生任何副作用。</p>"}},{"type":"prose","value":{"id":"字符串运算符","title":"字符串运算符","isH3":true,"content":"<p>除了比较操作符，它可以在字符串值中使用，连接操作符（+）连接两个字符串值相连接，返回另一个字符串，它是两个操作数串的结合。</p>\n<p>例如，</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// console logs the string \"my string\".</span>\n</code></pre></div>\n<p>简写操作符 <code>+=</code> 也可以用来拼接字符串，例如：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myString <span class=\"token operator\">=</span> <span class=\"token string\">\"alpha\"</span><span class=\"token punctuation\">;</span>\n\nmyString <span class=\"token operator\">+=</span> <span class=\"token string\">\"bet\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回 \"alphabet\"</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"条件（三元）运算符","title":"条件（三元）运算符","isH3":true,"content":"<p><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">条件运算符</a>是 JavaScript 中唯一需要三个操作数的运算符。运算的结果根据给定条件在两个值中取其一。语法为：</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">条件 ? 值 1 : 值 2\n</pre></div>\n<p>如果<code>条件</code>为真，则结果取<code>值 1</code>。否则为<code>值 2</code>。你能够在任何允许使用标准运算符的地方使用条件运算符。</p>\n<p>例如，</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> status <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>age <span class=\"token operator\">&gt;=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"adult\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"minor\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>当 <code>age</code> 大于等于 18 的时候，将“adult”赋值给 <code>status</code>；否则将“minor”赋值给 <code>status</code>。</p>"}},{"type":"prose","value":{"id":"逗号操作符","title":"逗号操作符","isH3":true,"content":"<p><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">逗号操作符</a>（<code>,</code>）对两个操作数进行求值并返回最终操作数的值。它常常用在 <code>for</code> 循环中，在每次循环时对多个变量进行更新。</p>\n<p>例如，假如 <code>a</code> 是一个二维数组，每个维度各有 10 个元素，以下代码利用逗号操作符来同时改变两个变量的值。这段代码的功能是打印出该二维数组的对角线元素的值：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a['</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">']['</span> <span class=\"token operator\">+</span> j <span class=\"token operator\">+</span> <span class=\"token string\">']= '</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"一元操作符","title":"一元操作符","isH3":true,"content":"<p>一元操作符仅对应一个操作数。</p>\n<h4 id=\"delete\"><code>delete</code></h4>\n<p><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/delete\"><code>delete</code></a>操作符，删除一个对象的属性或者一个数组中某一个键值。语法如下：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">delete</span> objectName<span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> objectName<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> property<span class=\"token punctuation\">;</span> <span class=\"token comment\">// legal only within a with statement</span>\n</code></pre></div>\n<p><code>objectName</code>是一个对象名，<code>property</code> 是一个已经存在的属性，<code>index</code>是数组中的一个已经存在的键值的索引值。</p>\n<p>第三行的形式只在<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/with\"><code>with</code></a>声明的状态下是合法的，从对象中删除一个属性。</p>\n<p>你能使用 <code>delete</code> 删除各种各样的隐式声明，但是被<code>var</code>声明的除外。</p>\n<p>如果 <code>delete</code> 操作成功，属性或者元素会变成 <code>undefined</code>。如果 <code>delete</code>可行会返回<code>true</code>，如果不成功返回<code>false</code>。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>x <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">43</span><span class=\"token punctuation\">;</span>\nmyobj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyobj<span class=\"token punctuation\">.</span>h <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// create property h</span>\n<span class=\"token keyword\">delete</span> x<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// returns true (can delete if declared implicitly)</span>\n<span class=\"token keyword\">delete</span> y<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// returns false (cannot delete if declared with var)</span>\n<span class=\"token keyword\">delete</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns false (cannot delete predefined properties)</span>\n<span class=\"token keyword\">delete</span> myobj<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns true (can delete user-defined properties)</span>\n<span class=\"token keyword\">delete</span> myobj<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// returns true (can delete if declared implicitly)</span>\n</code></pre></div>\n<h5 id=\"删除数组元素\">删除数组元素</h5>\n<p>删除数组中的元素时，数组的长度是不变的，例如删除 <code>a[3]</code>, <code>a[4]</code>，<code>a[4]</code> 和 <code>a[3]</code> 仍然存在变成了 <code>undefined</code>。</p>\n<p><code>delete</code> 删除数组中的一个元素，这个元素就不在数组中了。例如，<code>trees[3]</code>被删除，<code>trees[3]</code> 仍然可寻址并返回 <code>undefined</code>。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> trees <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redwood\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bay\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cedar\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"oak\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"maple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> trees<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 不会被执行</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>如果想让数组中存在一个元素但是是<code>undefined</code>值，使用<code>undefined</code>关键字而不是<code>delete</code>操作。如下： <code>trees[3] 分配一个 undefined</code>,但是这个数组元素仍然存在：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> trees <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redwood\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bay\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cedar\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"oak\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"maple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntrees<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// this gets executed（会被执行）</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"typeof\"><code>typeof</code></h4>\n<p><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof\">typeof 操作符</a> 可通过下面 2 种方式使用：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> operand\n<span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span>operand<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>typeof 操作符返回一个表示 operand 类型的字符串值。operand 可为字符串、变量、关键词或对象，其类型将被返回。operand 两侧的括号为可选。</p>\n<p>假设你定义了如下的变量：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myFun <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5 + 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> shape <span class=\"token operator\">=</span> <span class=\"token string\">\"round\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> size <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> today <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>typeof 操作符将会返回如下的结果：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> myFun<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// returns \"function\"</span>\n<span class=\"token keyword\">typeof</span> shape<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// returns \"string\"</span>\n<span class=\"token keyword\">typeof</span> size<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// returns \"number\"</span>\n<span class=\"token keyword\">typeof</span> today<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// returns \"object\"</span>\n<span class=\"token keyword\">typeof</span> dontExist<span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns \"undefined\"</span>\n</code></pre></div>\n<p>对于关键词 <code>true</code> 和 <code>null</code>， <code>typeof</code> 操作符将会返回如下结果：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns \"boolean\"</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns \"object\"</span>\n</code></pre></div>\n<p>对于一个数值或字符串， <code>typeof</code> 操作符将会返回如下结果：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> <span class=\"token number\">62</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// returns \"number\"</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns \"string\"</span>\n</code></pre></div>\n<p>对于属性值，typeof 操作符将会返回属性所包含值的类型：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> document<span class=\"token punctuation\">.</span>lastModified<span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns \"string\"</span>\n<span class=\"token keyword\">typeof</span> window<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// returns \"number\"</span>\n<span class=\"token keyword\">typeof</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">LN2</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// returns \"number\"</span>\n</code></pre></div>\n<p>对于方法和函数，typeof 操作符将会返回如下结果：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> blur<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// returns \"function\"</span>\n<span class=\"token keyword\">typeof</span> eval<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// returns \"function\"</span>\n<span class=\"token keyword\">typeof</span> parseInt<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// returns \"function\"</span>\n<span class=\"token keyword\">typeof</span> shape<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns \"function\"</span>\n</code></pre></div>\n<p>对于预定义的对象，typeof 操作符将会返回如下结果：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> Date<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// returns \"function\"</span>\n<span class=\"token keyword\">typeof</span> Function<span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns \"function\"</span>\n<span class=\"token keyword\">typeof</span> Math<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// returns \"object\"</span>\n<span class=\"token keyword\">typeof</span> Option<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// returns \"function\"</span>\n<span class=\"token keyword\">typeof</span> String<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// returns \"function\"</span>\n</code></pre></div>\n<h4 id=\"void\"><code>void</code></h4>\n<p>void 运算符运用方法如下：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> expression\n</code></pre></div>\n<p>void 运算符，表明一个运算没有返回值。expression 是 javaScript 表达式，括号中的表达式是一个可选项，当然使用该方式是一种好的形式。</p>\n<p>你可以使用 void 运算符指明一个超文本链接。该表达式是有效的，但是并不会在当前文档中进行加载。</p>\n<p>如下创建了一个超链接文本，当用户单击该文本时，不会有任何效果。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javascript:void(0)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Click here to do nothing<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>下面的代码创建了一个超链接，当用户单击它时，提交一个表单。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javascript:void(document.form.submit())<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\nClick here to submit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"关系运算符","title":"关系运算符","isH3":true,"content":"<p>关系运算符对操作数进行比较，根据比较结果真或假，返回相应的布尔值。</p>\n<h4 id=\"in\"><code>in</code></h4>\n<p><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/in\"><code>in</code>操作符</a>，如果所指定的<strong>属性</strong>确实存在于所指定的对象中，则会返回<code>true</code>，语法如下：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>propNameOrNumber <span class=\"token keyword\">in</span> objectName\n</code></pre></div>\n<p>在这里 <code>propNameOrNumber</code>可以是一个代表着属性名的字符串或者是一个代表着数组索引的数值表达式，而<code>objectName</code>则是一个对象名。</p>\n<p>下面的例子是 <code>in</code> 操作的常见用法。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Arrays</span>\n<span class=\"token keyword\">var</span> trees <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redwood\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bay\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cedar\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"oak\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"maple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">0</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// returns true</span>\n<span class=\"token number\">3</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// returns true</span>\n<span class=\"token number\">6</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// returns false</span>\n<span class=\"token string\">\"bay\"</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// returns false (you must specify the index number,</span>\n                   <span class=\"token comment\">// not the value at that index)</span>\n<span class=\"token string\">\"length\"</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns true (length is an Array property)</span>\n\n<span class=\"token comment\">// Predefined objects</span>\n<span class=\"token string\">\"PI\"</span> <span class=\"token keyword\">in</span> Math<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// returns true</span>\n<span class=\"token keyword\">var</span> myString <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"coral\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"length\"</span> <span class=\"token keyword\">in</span> myString<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// returns true</span>\n\n<span class=\"token comment\">// Custom objects</span>\n<span class=\"token keyword\">var</span> mycar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">make</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Honda\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Accord\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token number\">1998</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"make\"</span> <span class=\"token keyword\">in</span> mycar<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// returns true</span>\n<span class=\"token string\">\"model\"</span> <span class=\"token keyword\">in</span> mycar<span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns true</span>\n</code></pre></div>\n<h4 id=\"instanceof\"><code>instanceof</code></h4>\n<p>如果所判别的对象确实是所指定的类型，则返回<code>true</code>。其语法如下：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>objectName <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">objectType</span>\n</code></pre></div>\n<p><code>objectName</code> 是需要做判别的对象的名称，而<code>objectType</code>是假定的对象的类型，例如<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a>或 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>.</p>\n<p>当你需要确认一个对象在运行时的类型时，可使用<code>instanceof</code>. 例如，需要 catch 异常时，你可以针对抛出异常的类型，来做不同的异常处理。</p>\n<p>例如，下面的代码使用<code>instanceof</code>去判断 <code>theDay</code>是否是一个 <code>Date</code> 对象。<code>因为 theDay</code>是一个<code>Date</code>对象，<code>所以 if</code>中的代码会执行。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> theDay <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">1995</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>theDay <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// statements to execute</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"运算符优先级","title":"运算符优先级","isH3":true,"content":"<p>运算符的优先级，用于确定一个表达式的计算顺序。在你不能确定优先级时，可以通过使用括号显式声明运算符的优先级。</p>\n<p>下表列出了描述符的优先级，从最高到最低。</p>\n<p><strong>运算符优先级</strong></p>\n<table>\n  <thead>\n    <tr>\n      <th>Operator type</th>\n      <th>Individual operators</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>member</td>\n      <td><code>. []</code></td>\n    </tr>\n    <tr>\n      <td>call / create instance</td>\n      <td><code>() new</code></td>\n    </tr>\n    <tr>\n      <td>negation/increment</td>\n      <td><code>! ~ - + ++ -- typeof void delete</code></td>\n    </tr>\n    <tr>\n      <td>multiply/divide</td>\n      <td><code>* / %</code></td>\n    </tr>\n    <tr>\n      <td>addition/subtraction</td>\n      <td><code>+ -</code></td>\n    </tr>\n    <tr>\n      <td>bitwise shift</td>\n      <td><code>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</code></td>\n    </tr>\n    <tr>\n      <td>relational</td>\n      <td><code>&lt; &lt;= &gt; &gt;= in instanceof</code></td>\n    </tr>\n    <tr>\n      <td>equality</td>\n      <td><code>== != === !==</code></td>\n    </tr>\n    <tr>\n      <td>bitwise-and</td>\n      <td><code>&amp;</code></td>\n    </tr>\n    <tr>\n      <td>bitwise-xor</td>\n      <td><code>^</code></td>\n    </tr>\n    <tr>\n      <td>bitwise-or</td>\n      <td><code>|</code></td>\n    </tr>\n    <tr>\n      <td>logical-and</td>\n      <td><code>&amp;&amp;</code></td>\n    </tr>\n    <tr>\n      <td>logical-or</td>\n      <td><code>||</code></td>\n    </tr>\n    <tr>\n      <td>conditional</td>\n      <td><code>?:</code></td>\n    </tr>\n    <tr>\n      <td>assignment</td>\n      <td><code>= += -= *= /= %= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;= &amp;= ^= |=</code></td>\n    </tr>\n    <tr>\n      <td>comma</td>\n      <td><code>,</code></td>\n    </tr>\n  </tbody>\n</table>\n<p>上表有一个更详细的版本，它包含了各操作符更详细的说明，可在 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#table\">JavaScript 参考手册</a>中找到。</p>"}},{"type":"prose","value":{"id":"表达式","title":"表达式","isH3":false,"content":"<p>表达式是一组代码的集合，它返回一个值。（译注：定义比较不好理解，看下面的举例就很好懂了。）</p>\n<p>每一个合法的表达式都能计算成某个值，但从概念上讲，有两种类型的表达式：有副作用的（比如赋值）和单纯计算求值的。</p>\n<p>表达式 x=7 是第一类型的一个例子。该表达式使用=运算符将值 7 赋予变量 x。这个表达式自己的值等于 7。</p>\n<p>代码 3 + 4 是第二个表达式类型的一个例子。该表达式使用 + 运算符把 3 和 4 加到一起但并没有把结果（7）赋值给一个变量。</p>\n<p>JavaScript 有以下表达式类型：</p>\n<ul>\n  <li>算数：得出一个数字，例如 3.14159。（通常使用<a href=\"#%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6\">算数运算符</a>）</li>\n  <li>字符串：得出一个字符串，例如，\"Fred\" 或 \"234\"。（通常使用<a href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%90%E7%AE%97%E7%AC%A6\">字符串运算符</a>。）</li>\n  <li>逻辑值：得出 true 或者 false。（经常涉及到<a href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\">逻辑运算符</a>。）</li>\n  <li>基本表达式：javascript 中基本的关键字和一般表达式。</li>\n  <li>左值表达式：分配给左值。</li>\n</ul>"}},{"type":"prose","value":{"id":"基本表达式","title":"基本表达式","isH3":true,"content":"<h4 id=\"this\"><code>this</code></h4>\n<p><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/this\"><code>this</code></a>关键字被用于指代当前的对象，通常，<code>this</code>指代的是方法中正在被调用的对象。用法如下：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"propertyName\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>propertyName\n</code></pre></div>\n<p>假设一个用于验证对象<code>value</code>属性的<code>validate</code>函数，传参有对象，最高值和最低值。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> lowval<span class=\"token punctuation\">,</span> hival</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> lowval<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&gt;</span> hival<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid Value!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>你可以在任何表单元素的<code>onchange</code>事件处理中调用<code>validat</code>函数，用<code>this</code>来指代当前的表单元素，用例如下：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Enter a number between 18 and 99:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>3</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onChange</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"分组操作符\">分组操作符</h4>\n<p>分组操作符（）控制了表达式中计算的优先级。举例来说，你可以改变先乘除后加减的顺序，转而先计算加法。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 默认优先级</span>\na <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> c     <span class=\"token comment\">// 7</span>\n<span class=\"token comment\">// 默认是这样计算的</span>\na <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> c<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 7</span>\n\n<span class=\"token comment\">// 现在使加法优先于乘法</span>\n<span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> c   <span class=\"token comment\">// 9</span>\n\n<span class=\"token comment\">// 这等价于</span>\na <span class=\"token operator\">*</span> c <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> c <span class=\"token comment\">// 9</span>\n</code></pre></div>\n<h5 id=\"数值推导\">数值推导</h5>\n<p>Comprehensions 是一个带有实验性质的 JavaScript 特性，计划将在未来的 ECMAScript 版本中加入该特性。有两种类型的 comprehensions:</p>\n<dl>\n  <dt id=\"sect2\"><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg> <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\"><code>[for (x of y) x]</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>数列数值推导（非标准用法）</p>\n  </dd>\n  <dt id=\"sect3\"><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg> <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\"><code>(for (x of y) y)</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>生成器数值推导（译者注：生成器数值推导标准化可能不大，推荐使用 <a href=\"/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">生成器函数 (en-US)</a>）</p>\n  </dd>\n</dl>\n<p>Comprehensions 特性被许多编程语言所采用，该特性能够使你快速地通过一个已有的数组来创建出一个新的数组，比如：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">[</span><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">of</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> i<span class=\"token operator\">*</span>i <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [ 1, 4, 9 ]</span>\n\n<span class=\"token keyword\">var</span> abc <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>letters <span class=\"token keyword\">of</span> abc<span class=\"token punctuation\">)</span> letters<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [ \"a\", \"b\", \"c\" ]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"左值表达式","title":"左值表达式","isH3":true,"content":"<p>左值可以作为赋值的目标。</p>\n<h4 id=\"new\"><code>new</code></h4>\n<p>你可以使用<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code> operator</a> 创建一个自定义类型或者是<code>预置类型</code>的对象实例。用法如下：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> objectName <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">objectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>param1<span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> paramN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>super</p>\n<p><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/super\">super</a> 关键字可以用来调用一个对象父类的函数，它在用来调用一个<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Classes\">类</a>的父类的构造函数时非常有用，比如：</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">super([arguments]); // calls the parent constructor. super.functionOnParent([arguments]);\n</pre></div>\n<h4 id=\"扩展语句\">扩展语句</h4>\n<p><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">扩展语句</a>符允许一个表达式在原地展开，当需要多个参数 (比如函数调用时) 或者多个值 (比如字面量数组) 。</p>\n<p>**例如：**现在你有一个数组，你想创建一个新数组，并将刚才那个作为它的一部分，用 array 的字面语法是不够的，你不得不写一些代码实现它，比如用些<code>push</code>, <code>splice</code>, <code>concat 等等。但是用</code>spread syntax 就没问题了：</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">var parts = ['shoulder', 'knees'];\nvar lyrics = ['head', ...parts, 'and', 'toes'];\n</pre></div>\n<p>类似的，扩展语句也可以用在函数调用的时候：</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">function f(x, y, z) { }\nvar args = [0, 1, 2];\nf(...args);\n</pre></div><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/JavaScript/Guide/Functions\">« 上一页</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/JavaScript/Guide/Numbers_and_dates\">下一页  »</a></li>\n</ul>"}}],"toc":[{"text":"运算符","id":"运算符"},{"text":"表达式","id":"表达式"}],"summary":"本章描述了 JavaScript 的表达式和运算符，包括了赋值，比较，算数，位运算，逻辑，字符串，三元等等。","popularity":0.0029,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Expressions and operators","locale":"en-US","native":"English (US)"},{"title":"Expresiones y operadores","locale":"es","native":"Español"},{"title":"Expressions et opérateurs","locale":"fr","native":"Français"},{"title":"式と演算子","locale":"ja","native":"日本語"},{"title":"표현식과 연산자","locale":"ko","native":"한국어"},{"title":"Expressões e operadores","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Выражения и операторы","locale":"ru","native":"Русский"},{"title":"運算式與運算子","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/web/javascript/guide/expressions_and_operators","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/javascript/guide/expressions_and_operators/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/zh-CN/docs/Web/JavaScript/Guide","title":"JavaScript 指南"},{"uri":"/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators","title":"表达式与运算符"}],"pageTitle":"表达式与运算符 - JavaScript | MDN","noIndexing":false}}