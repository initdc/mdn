{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"CSS and JavaScript animation performance","mdn_url":"/zh-CN/docs/Web/Performance/CSS_JavaScript_animation_performance","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>对众多应用程序而言，动画对提供友好的用户体验有着关键的作用，我们有很多方式生成 web 动画，比如 CSS <a href=\"/zh-CN/docs/Web/CSS/transition\"><code>transitions</code></a>/<a href=\"/zh-CN/docs/Web/CSS/animation\"><code>animations</code></a> 或者 JavaScript 动画 (使用 <a href=\"/zh-CN/docs/Web/API/Window/requestAnimationFrame\" title=\"requestAnimationFrame()\"><code>requestAnimationFrame()</code></a>).</p>\n<p>在这篇文章中，我们分析 CSS 动画和 JavaScript 动画的性能差异</p>"}},{"type":"prose","value":{"id":"css_过渡和动画","title":"CSS 过渡和动画","isH3":false,"content":"<p>CSS 中过渡和动画都可以用于编写动画，它们都有各自的使用场景：</p>\n<ul>\n  <li>CSS <a href=\"/zh-CN/docs/Web/CSS/transition\"><code>transitions</code></a> 提供了一个简单的的方式去创造当前样式与结束状态样式之间的动画，比如一个 button 的普通状态和 hover 状态。尽管一个元素处于过渡状态中，新的过渡动画也会立即从当前样式开始，而不是直接跳转到 CSS 的最终状态。浏览 <a href=\"/zh-CN/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions\">Using CSS transitions</a> 以获取更多细节。</li>\n  <li>另一方面，CSS <a href=\"/zh-CN/docs/Web/CSS/animation\"><code>animations</code></a>, 允许开发者去通过一个初始状态属性值集合与最终状态属性值集合创造动画，而不是单单的初始和最终状态。CSS animations 由两部分组成：一个描述 CSS 动画的样式，以及一个指定动画初始状态，中间状态以及最终状态样式的关键帧集合。浏览 <a href=\"/zh-CN/docs/Web/CSS/CSS_Animations/Using_CSS_animations\">Using CSS animations</a> 以获取更多细节。</li>\n</ul>\n<p>就性能方面来说，无论通过 CSS animations 还是 transitions 创造动画，都没有区别。在这篇文章中二者都归类为基于 CSS 的动画。</p>"}},{"type":"prose","value":{"id":"requestanimationframe","title":"requestAnimationFrame","isH3":false,"content":"<p><a href=\"/zh-CN/docs/Web/API/Window/requestAnimationFrame\" title=\"requestAnimationFrame()\"><code>requestAnimationFrame()</code></a>提供了一种用 JavaScript 代码制作动画的高效方式。本方法的回调函数在绘制下一帧之前由浏览器调用。与需要一个延迟参数的<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/setTimeout\"><code>setTimeout()</code> <small>(en-US)</small></a>/<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/setInterval\"><code>setInterval()</code> <small>(en-US)</small></a>相比，requestAnimationFrame() 效率高得多。开发人员可以在 requestAnimationFrame 回调函数中通过简单地改变元素的样式 (或者更新画布绘制，等等) 来创建动画。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 像 CSS 转换和动画一样，当页面在后台运行时，requestAnimationFrame() 会暂停。</p>\n</div>\n<p>更多细节请阅读 <a href=\"https://hacks.mozilla.org/2011/08/animating-with-javascript-from-setinterval-to-requestanimationframe/\" class=\"external\" rel=\" noopener\">animating with JavaScript from setinterval to requestAnimationFrame</a>.</p>"}},{"type":"prose","value":{"id":"性能对比：transitions_vs._requestanimationframe","title":"性能对比：<br>transitions vs. requestAnimationFrame","isH3":false,"content":"<p>事实上，大多数场景下，基于 CSS 的 动画几乎是跟 JavaScript 动画表现一致 — 至少在 FireFox 上是如此。一些基于 Javascript 的动画库，像 <a href=\"https://greensock.com/gsap\" class=\"external\" rel=\" noopener\">GSAP</a> and <a href=\"http://velocityjs.org/\" class=\"external\" rel=\" noopener\">Velocity.JS</a>, 甚至声称他们在性能上可以做得比 <a href=\"https://css-tricks.com/myth-busting-css-animations-vs-javascript/\" class=\"external\" rel=\" noopener\">native CSS transitions/animations</a> （原生的 CSS transitions/animations）更好。这是可能的，因为在重绘事件发生之前，CSS transitions/animations 在主的 UI 线程仅仅是重新采集元素的样式，这跟通过 <code>requestAnimationFrame()</code> 回调，获取重新采集元素样式是一样的，也是在下一次重绘之前触发。假如二者都是在主 UI 线程创建的动画，那它们在性能方面没有差异。</p>\n<p>在这一节，我们将会使用 FireFox 通过一个性能测试，去看看哪种动画方式更好</p>","titleAsText":"性能对比：transitions vs. requestAnimationFrame"}},{"type":"prose","value":{"id":"启用_fps_工具","title":"启用 FPS 工具","isH3":true,"content":"<p>在进行示例之前，请启用 FPS 工具先查看当前帧速率：</p>\n<ol>\n  <li>\n    在地址栏中，输入 about:config;点击\" I’ll be careful, I promise!\"按钮，以输入配置屏幕。\n    \n    <img src=\"/en-US/docs/Web/Performance/CSS_JavaScript_animation_performance/pic1.png\" alt=\"\" width=\"671\" height=\"390\" loading=\"lazy\">\n  </li>\n  <li>在搜索栏中搜索 layers.acceleration.draw-fps 首选项</li>\n  <li>\n    双击该条目将值设置为 true。.现在您可以在 Firefox 窗口的左上角看到三个紫色的框。第一个框代表 FPS。\n    \n    <img src=\"/en-US/docs/Web/Performance/CSS_JavaScript_animation_performance/pic2.png\" alt=\"\" width=\"562\" height=\"215\" loading=\"lazy\">\n  </li>\n</ol>"}},{"type":"prose","value":{"id":"运行性能测试","title":"运行性能测试","isH3":true,"content":"<p>开始在下面的测试中，总共 1000 个<a href=\"/zh-CN/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a>元素通过 css 动画进行坐标转换。</p><p><iframe allowfullscreen=\"allowfullscreen\" width=\"756\" height=\"480\" src=\"https://jsfiddle.net/zt94oew2/1/embedded/\" loading=\"lazy\"></iframe></p>\n<p>动画可以通过点击\"toggle\"按钮切换到 <code>requestAnimationFrame()</code> 。</p>\n<p>试着两个都运行一下，比较两者的 FPS 值（第一个紫色框），可以看到 CSS 动画和<code>requestAnimationFrame() 是非常接近的</code>。</p>"}},{"type":"prose","value":{"id":"脱离主线程的动画","title":"脱离主线程的动画","isH3":true,"content":"<p>即使是上面给出的测试结果，我们仍然认为 CSS 动画是更好的选择。为什么？关键是只要动画涉及的属性不引起 reflow（重新布局）（参考<a href=\"https://csstriggers.com/\" class=\"external\" rel=\" noopener\">CSS triggers</a>获得更多信息），我们可以把采用操作移出主线程。最常见的属性是 CSS transform。如果一个元素被提升为一个<a href=\"https://wiki.mozilla.org/Gecko:Overview#Graphics\" class=\"external\" rel=\" noopener\">layer</a>，transform 属性动画就可以在 GPU 中进行。这意味着更好地性能，特别实在移动设备上。在<a href=\"https://wiki.mozilla.org/Platform/GFX/OffMainThreadCompositing\" class=\"external\" rel=\" noopener\">OffMainThreadCompositing</a>上寻找更多细节。</p>\n<p>要在火狐中激活 OMTA (脱离主线程的动画) ，你需要前往<em>about:config 然后搜索</em> <code>layers.offmainthreadcomposition.async-animations</code> 。切换到 <code>true</code>.</p>\n<p>\n  <img src=\"/en-US/docs/Web/Performance/CSS_JavaScript_animation_performance/pic3.png\" alt=\"\" width=\"536\" height=\"210\" loading=\"lazy\">\n</p>\n<p>激活之后，再次运行上面的例子。可以看到 CSS 动画的帧速率现在高多了。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 在 Nightly/Developer 版本，你可能看到 OMTA 缺省就是激活的，所以你需要反过来测试。（先测试激活 OMTA 的情况，然后是没有激活的情况）</p>\n</div>"}},{"type":"prose","value":{"id":"总结","title":"总结","isH3":false,"content":"<p>浏览器可以优化渲染流程。总之，我们总是可以尽可能通过 CSS 过渡/动画创建动画。如果你的动画真的很复杂，你可能不得不依赖于 JavaScript 动画。</p>"}}],"toc":[{"text":"CSS 过渡和动画","id":"css_过渡和动画"},{"text":"requestAnimationFrame","id":"requestanimationframe"},{"text":"性能对比：<br>transitions vs. requestAnimationFrame","id":"性能对比：transitions_vs._requestanimationframe"},{"text":"总结","id":"总结"}],"summary":"对众多应用程序而言，动画对提供友好的用户体验有着关键的作用，我们有很多方式生成 web 动画，比如 CSS transitions/animations 或者 JavaScript 动画 (使用 requestAnimationFrame()).","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"CSS and JavaScript animation performance","locale":"en-US","native":"English (US)"},{"title":"Производительность CSS и JavaScript анимации","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/performance/css_javascript_animation_performance","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/performance/css_javascript_animation_performance/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/Performance","title":"Web 性能"},{"uri":"/zh-CN/docs/Web/Performance/CSS_JavaScript_animation_performance","title":"CSS and JavaScript animation performance"}],"pageTitle":"CSS and JavaScript animation performance - Web 性能 | MDN","noIndexing":false}}