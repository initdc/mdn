{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Lazy loading","mdn_url":"/zh-CN/docs/Web/Performance/Lazy_loading","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>延迟加载 (懒加载)</strong> 是一种将资源标识为非阻塞（非关键）资源并仅在需要时加载它们的策略。这是一种缩短<a href=\"/zh-CN/docs/Web/Performance/Critical_rendering_path\">关键渲染路径</a>长度的方法，可以缩短页面加载时间。</p>\n<p>延迟加载可以在应用程序的不同时刻发生，但通常会在某些用户交互（例如滚动和导航）上发生。</p>"}},{"type":"prose","value":{"id":"概览","title":"概览","isH3":false,"content":"<p>随着网络的发展，我们已经看到发送给用户的资产数量和规模都在急剧增加。从 2011 年到 2019 年，台式机的资源中位数从 <strong>~100KB</strong> 增至 <strong>~400KB</strong>，移动版的资源中位数从 <strong>~50KB</strong> 增至**~350KB**。图像大小已从台式机上的**~250KB** 增至 <strong>~900KB</strong>，而移动设备上的 <strong>~100KB</strong>增至**~850KB**。</p>\n<p>解决这个问题的方法之一是延迟加载对第一次渲染并不重要的资源来缩短<a href=\"/zh-CN/docs/Web/Performance/Critical_rendering_path\">关键渲染路径</a>的长度。一个实际例子是，当用户打开一个电商网站的主页时，该页面有一个指向购物车页面/区域的链接，并且<strong>只有</strong>在用户导航到购物车页面/区域时才会下载其所有资源（JS、CSS、images……）。</p>"}},{"type":"prose","value":{"id":"策略","title":"策略","isH3":false,"content":"<p>延迟加载可以通过多种策略应用于多个资源。</p>"}},{"type":"prose","value":{"id":"综述","title":"综述","isH3":true,"content":"<p>\n  <strong>代码拆分</strong>\n  可以将 JavaScript、CSS 和 HTML 分割成小块，以发送最少的代码提供关键信息，以优化页面加载时间。其余的部分可以在需要时加载。\n</p>\n<ul>\n  <li>Entry point splitting: separates code by entry point(s) in the app</li>\n  <li>Dynamic splitting: separates code where <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Statements/import\">dynamic import()</a> statements are used</li>\n</ul>"}},{"type":"prose","value":{"id":"javascript","title":"JavaScript","isH3":true,"content":"<p>\n  脚本类型模块\n  任何类型为 <code>type=\"module\"</code> 的脚本标签都被视为一个 <a href=\"/zh-CN/docs/Web/JavaScript/Guide/Modules\">JavaScript 模块</a>，并且默认情况下会被延迟。\n</p>"}},{"type":"prose","value":{"id":"css","title":"CSS","isH3":true,"content":"<p>默认情况下，CSS 被视为<a href=\"/zh-CN/docs/Web/Performance/Critical_rendering_path\">渲染阻塞</a>资源，因此，在 <a href=\"/zh-CN/docs/Web/API/CSS_Object_Model\">CSSOM</a> 被构造完成之前，浏览器不会渲染任何已处理的内容。CSS 必须很薄，才能尽快交付，建议使用媒体类型和查询实现非阻塞渲染。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">&lt;link href=\"style.css\"    rel=\"stylesheet\" media=\"all\"&gt;\n&lt;link href=\"portrait.css\" rel=\"stylesheet\" media=\"orientation:portrait\"&gt;\n&lt;link href=\"print.css\"    rel=\"stylesheet\" media=\"print\"&gt;\n</pre></div>\n<p>可以执行一些 <a href=\"/zh-CN/docs/Learn/Performance/CSS\">CSS 优化</a>来实现这一目标。</p>"}},{"type":"prose","value":{"id":"fonts","title":"Fonts","isH3":true,"content":"<p>默认情况下，字体请求会延迟到构造渲染树之前，这可能会导致文本渲染延迟。</p>\n<p>It is possible to override the default behaviour and preload web font resources using <code>&lt;link rel=\"preload\"&gt;</code>, the <a href=\"/zh-CN/docs/Web/CSS/@font-face/font-display\">CSS font-display property</a>, and the <a href=\"/zh-CN/docs/Web/API/CSS_Font_Loading_API\">Font Loading API</a>.</p>\n<p>See also: <a href=\"/zh-CN/docs/Web/HTML/Element/link\">Element Link</a></p>"}},{"type":"prose","value":{"id":"images_and_iframes","title":"Images and iframes","isH3":true,"content":"<p>Very often, webpages contain many images that contribute to data-usage and how fast a page can load. Most of those images are off-screen (<a href=\"/zh-CN/docs/Web/Performance/Critical_rendering_path\">non-critical</a>), requiring user interaction (an example being scroll) in order to view them.</p>\n<p>\n  <strong>Loading</strong> 属性\n  The <a href=\"/zh-CN/docs/Web/HTML/Element/img#attr-loading\"><code>loading</code></a> attribute on an <a href=\"/zh-CN/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a> element (or the <a href=\"/zh-CN/docs/Web/HTML/Element/iframe#attr-loading\"><code>loading</code></a> attribute on an <a href=\"/zh-CN/docs/Web/HTML/Element/iframe\"><code>&lt;iframe&gt;</code></a>) can be used to instruct the browser to defer loading of images/iframes that are off-screen until the user scrolls near them.\n</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">&lt;img src=\"image.jpg\" alt=\"...\" loading=\"lazy\"&gt;\n&lt;iframe src=\"video-player.html\" title=\"...\" loading=\"lazy\"&gt;&lt;/iframe&gt;\n</pre></div>\n<p>The <code>load</code> event fires when the eagerly-loaded content has all been loaded; at that time, it's entirely possible (or even likely) that there may be lazily-loaded images that are within the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Visual_Viewport\">visual viewport <small>(en-US)</small></a> that haven't yet loaded.</p>\n<p>You can determine if a given image has finished loading by examining the value of its Boolean <a href=\"/zh-CN/docs/Web/API/HTMLImageElement/complete\" title=\"complete\"><code>complete</code></a> property.</p>\n<p>\n  <strong>Polyfill</strong>\n  Include this polyfill to provide support for older and currently incompatible browsers:\n  <a href=\"https://github.com/mfranzke/loading-attribute-polyfill\" class=\"external\" rel=\" noopener\">loading-attribute-polyfill</a>\n</p>\n<p>\n  <strong>交叉观察者 API</strong>\n  <a href=\"/zh-CN/docs/Web/API/IntersectionObserver\">Intersection Observers</a> allow the user to know when an observed element enters or exits the browser’s viewport.\n</p>\n<p>\n  <strong>事件处理程序</strong>\n  当浏览器的兼容性至关重要时，有以下几种选择：\n</p>\n<ul>\n  <li><a href=\"https://github.com/w3c/IntersectionObserver\" class=\"external\" rel=\" noopener\">polyfill intersection observer</a></li>\n  <li>后退以滚动，调整大小或改变方向的事件处理程序，以确定特定元素是否在视口中</li>\n</ul>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"specifications":[{"bcdSpecificationURL":"https://html.spec.whatwg.org/multipage/#lazy-loading-attributes","title":"HTML Standard"}],"query":"undefined"}},{"type":"prose","value":{"id":"查看更多","title":"查看更多","isH3":false,"content":"<ul>\n  <li><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css\" class=\"external\" rel=\" noopener\">Render blocking CSS</a></li>\n  <li><a href=\"https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/webfont-optimization#optimizing_loading_and_rendering\" class=\"external\" rel=\" noopener\">Optimizing loading and rendering</a></li>\n  <li><a href=\"https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video\" class=\"external\" rel=\" noopener\">Lazy loading images and video</a></li>\n</ul>"}}],"toc":[{"text":"概览","id":"概览"},{"text":"策略","id":"策略"},{"text":"规范","id":"规范"},{"text":"查看更多","id":"查看更多"}],"summary":"延迟加载 (懒加载) 是一种将资源标识为非阻塞（非关键）资源并仅在需要时加载它们的策略。这是一种缩短关键渲染路径长度的方法，可以缩短页面加载时间。","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Lazy loading","locale":"en-US","native":"English (US)"},{"title":"Le chargement différé","locale":"fr","native":"Français"},{"title":"Lazy loading","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/performance/lazy_loading","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/performance/lazy_loading/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/Performance","title":"Web 性能"},{"uri":"/zh-CN/docs/Web/Performance/Lazy_loading","title":"Lazy loading"}],"pageTitle":"Lazy loading - Web 性能 | MDN","noIndexing":false}}