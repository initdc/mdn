{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Introduction to using XPath in JavaScript","mdn_url":"/zh-CN/docs/Web/XPath/Introduction_to_using_XPath_in_JavaScript","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>该篇文档描述了如何在扩展和网站内部通过 JavaScript 调用 <a href=\"/zh-CN/XPath\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">XPath</a> 接口。Mozilla 实现了相当多的 <a href=\"https://www.w3.org/TR/DOM-Level-3-XPath/xpath.html\" class=\"external\" rel=\" noopener\">DOM 3 XPath</a>，意味着 Xpath 表达式已经可以在 HTML 和 XML 文档中使用。</p>\n<p>使用 XPath 的主要接口是 <a href=\"/zh-CN/docs/Web/API/Document\">document</a> 对象的 <a href=\"/zh-CN/docs/Web/API/Document/evaluate\">evaluate</a> 方法。</p>"}},{"type":"prose","value":{"id":"document.evaluate","title":"document.evaluate","isH3":false,"content":"<p>此方法针对基于 <a href=\"/zh-CN/docs/Glossary/XML\">XML</a> 的文档（包括 HTML 文档）评估 XPath 表达式，并返回 <a href=\"/en-US/docs/Web/API/XPathResult\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">XPathResult (en-US)</a> 对象，该对象可以是单个节点或一组节点。这个方法的现有文档位于 <a href=\"/zh-CN/docs/Web/API/Document/evaluate\">document.evaluate</a>，但是对于我们现在的需求来说它相当稀疏；下面将给出更全面的研究。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> xpathResult <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span> xpathExpression<span class=\"token punctuation\">,</span> contextNode<span class=\"token punctuation\">,</span> namespaceResolver<span class=\"token punctuation\">,</span> resultType<span class=\"token punctuation\">,</span> result <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"参数","title":"参数","isH3":true,"content":"<p><a href=\"/zh-CN/docs/Web/API/Document/evaluate\">evaluate</a> 函数共有五个参数：</p>\n<ul>\n  <li><code>xpathExpression</code>：包含要评估的 XPath 表达式的字符串。</li>\n  <li><code>contextNode</code>：应评估 <code>xpathExpression</code> 的文档中的节点，包括其任何和所有子节点。document 节点是最常用的。</li>\n  <li><code>namespaceResolver</code>：将传递包含在 <code>xpathExpression</code> 中的任何命名空间前缀的函数，它返回一个表示与该前缀关联的命名空间 URI 的字符串。这使得能够在 XPath 表达式中使用的前缀和文档中使用的可能不同的前缀之间进行转换。该转换函数可以是：\n    <ul>\n      <li>使用 <a href=\"/en-US/docs/Web/XPath/Introduction_to_using_XPath_in_JavaScript#node-specific_evaluator_function\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">XPathEvaluator (en-US)</a> 对象的 <a href=\"/en-US/docs/Web/API/Document/createNSResolver\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">createNSResolver (en-US)</a> 方法<a href=\"/zh-CN/docs/Web/XPath/Introduction_to_using_XPath_in_JavaScript#implementing_a_default_namespace_resolver\">创建</a>。</li>\n      <li><code>null</code>。其可以用于 HTML 文档或者当不使用命名空间前缀时。注意，如果 <code>xpathExpression</code> 包含命名空间前缀，这将导致一个带有 <code>NAMESPACE_ERR</code> 的 <code>DOMException</code> 抛出。</li>\n      <li>用户定义的函数。有关详细信息，请参阅附录中的 <a href=\"/zh-CN/docs/Web/XPath/Introduction_to_using_XPath_in_JavaScript#implementing_a_user_defined_namespace_resolver\">使用一个用户定义的命名空间解析器</a> 部分。</li>\n    </ul>\n  </li>\n  <li><code>resultType</code>：指定作为评估结果返回的所需结果类型的<a href=\"/zh-CN/docs/Web/XPath/Introduction_to_using_XPath_in_JavaScript#xpathresult_defined_constants\">常数</a>。最常传递的常量是 <code>XPathResult.ANY_TYPE</code>，它将返回 XPath 表达式的结果作为最自然的类型。附录中有一个部分，其中包含<a href=\"/zh-CN/docs/Web/XPath/Introduction_to_using_XPath_in_JavaScript#xpathresult_defined_constants\">可用常数</a>的完整列表。它们在下面“<a href=\"/zh-CN/docs/Web/XPath/Introduction_to_using_XPath_in_JavaScript#specifying_the_return_type\">指定返回类型</a>”部分中进行解释。</li>\n  <li><code>result</code>：如果指定了现有的 <code>XPathResult</code> 对象，它将被重用以返回结果。指定 <code>null</code> 将创建一个新的 <code>XPathResult</code> 对象。</li>\n</ul>"}},{"type":"prose","value":{"id":"返回值","title":"返回值","isH3":true,"content":"<p>返回 <code>xpathResult</code>，它是 <code>resultType</code> 参数中<a href=\"/zh-CN/docs/Web/XPath/Introduction_to_using_XPath_in_JavaScript#specifying_the_return_type\">指定的</a>类型的 <code>XPathResult</code> 对象。<code>XPathResult</code> 在<a href=\"http://mxr.mozilla.org/mozilla-central/source/dom/interfaces/xpath/nsIDOMXPathResult.idl\" class=\"external\" rel=\" noopener\">这里</a>定义。</p>"}},{"type":"prose","value":{"id":"实现默认的命名空间解析器","title":"实现默认的命名空间解析器","isH3":true,"content":"<p>我们使用 document 对象的 <code>createNSResolver</code> 方法创建一个命名空间解析器。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> nsResolver <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createNSResolver</span><span class=\"token punctuation\">(</span> contextNode<span class=\"token punctuation\">.</span>ownerDocument <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> contextNode<span class=\"token punctuation\">.</span>documentElement <span class=\"token operator\">:</span> contextNode<span class=\"token punctuation\">.</span>ownerDocument<span class=\"token punctuation\">.</span>documentElement <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>或者，也可以使用 <code>XPathEvaluator</code> 对象的 <code>createNSResolver</code> 方法。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> xpEvaluator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XPathEvaluator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> nsResolver <span class=\"token operator\">=</span> xpEvaluator<span class=\"token punctuation\">.</span><span class=\"token function\">createNSResolver</span><span class=\"token punctuation\">(</span> contextNode<span class=\"token punctuation\">.</span>ownerDocument <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> contextNode<span class=\"token punctuation\">.</span>documentElement <span class=\"token operator\">:</span> contextNode<span class=\"token punctuation\">.</span>ownerDocument<span class=\"token punctuation\">.</span>documentElement <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>然后传递 <code>document.evaluate</code>，将 <code>nsResolver</code> 变量作为 <code>namespaceResolver</code> 参数。</p>\n<p>注意：XPath 定义不带前缀的 QNames，以仅匹配 null 命名空间中的元素。XPath 没有办法选择应用于常规元素引用的默认命名空间（例如，<code>p[@id='_myid']</code> 对应于 <code>xmlns='http://www.w3.org/1999/xhtml'</code>）。要匹配非命名空间中的默认元素，您必须使用如 <code>[namespace-uri()='http://www.w3.org/1999/xhtml' and name()='p' and @id='_id']</code>（<a href=\"/zh-CN/docs/Web/XPath/Introduction_to_using_XPath_in_JavaScript#using_xpath_functions_to_reference_elements_with_a_default_namespace\">这种方法</a>适用于命名空间未知的动态 XPath），或者使用前缀名测试，并创建一个命名空间解析器将前缀映射到命名空间。如果你想采取后一种方法，阅读更多关于<a href=\"/zh-CN/docs/Web/XPath/Introduction_to_using_XPath_in_JavaScript#implementing_a_user_defined_namespace_resolver\">如何创建一个用户定义的命名空间解析器</a>。</p>"}},{"type":"prose","value":{"id":"注意","title":"注意","isH3":true,"content":"<p>适应任何 DOM 节点以解析命名空间，以便可以相对于文档中出现的节点的上下文轻松地评估 XPath 表达式。此适配器的工作方式类似于 DOM 级别 3 方法 <code>lookupNamespaceURI</code> 在解析 <code>namespaceuRI</code> 时节点的层次结构中的可用的当前信息的节点。也正确解析了隐式 <code>xml</code> 前缀。</p>"}},{"type":"prose","value":{"id":"指定返回类型","title":"指定返回类型","isH3":true,"content":"<p><code>document.evaluate</code> 返回的变量 <code>xpathResult</code> 可以由单个节点（<a href=\"/zh-CN/docs/Web/XPath/Introduction_to_using_XPath_in_JavaScript#simple_types\">简单类型</a>）或节点集合（<a href=\"/zh-CN/docs/Web/XPath/Introduction_to_using_XPath_in_JavaScript#node-set_types\">节点集类型</a>）组成。</p>\n<h4 id=\"简单类型\">简单类型</h4>\n<p>当 <code>resultType</code> 中的所需结果类型指定为：</p>\n<ul>\n  <li><code>NUMBER_TYPE</code> - a double</li>\n  <li><code>STRING_TYPE</code> - a string</li>\n  <li><code>BOOLEAN_TYPE</code> - a boolean</li>\n</ul>\n<p>我们通过分别访问 <code>XPathResult</code> 对象的以下属性来获取表达式的返回值。</p>\n<ul>\n  <li><code>numberValue</code></li>\n  <li><code>stringValue</code></li>\n  <li><code>booleanValue</code></li>\n</ul>\n<h5 id=\"示例\">示例</h5>\n<p>以下使用 XPath 表达式 <a href=\"/en-US/docs/Web/XPath/Functions/count\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">count(//p) (en-US)</a> 来获取 HTML 文档中的 <code>&lt;p&gt;</code> 元素数：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> paragraphCount <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'count(//p)'</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> XPathResult<span class=\"token punctuation\">.</span><span class=\"token constant\">ANY_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'This document contains '</span> <span class=\"token operator\">+</span> paragraphCount<span class=\"token punctuation\">.</span>numberValue <span class=\"token operator\">+</span> <span class=\"token string\">' paragraph elements'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>虽然 JavaScript 允许我们将数字转换为一个字符串进行显示，但 XPath 接口不会自动转换数字结果，如果 <code>stringValue</code> 属性被请求，所以下面的代码将<strong>不</strong>工作：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> paragraphCount <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count(//p)'</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> XPathResult<span class=\"token punctuation\">.</span><span class=\"token constant\">ANY_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'This document contains '</span> <span class=\"token operator\">+</span> paragraphCount<span class=\"token punctuation\">.</span>stringValue <span class=\"token operator\">+</span> <span class=\"token string\">' paragraph elements'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>相反，它将返回一个带有 <code>NS_DOM_TYPE_ERROR</code> 的异常。</p>\n<h4 id=\"节点集类型\">节点集类型</h4>\n<p><code>XPathResult</code> 对象允许以 3 种主要不同类型返回节点集：</p>\n<ul>\n  <li><a href=\"#iterators\">Iterators</a></li>\n  <li><a href=\"#snapshots\">Snapshots</a></li>\n  <li><a href=\"#first_node\">First Nodes</a></li>\n</ul>\n<h5 id=\"iterators\">Iterators</h5>\n<p>当 <code>resultType</code> 参数中的指定结果类型为：</p>\n<ul>\n  <li><code>UNORDERED_NODE_ITERATOR_TYPE</code></li>\n  <li><code>ORDERED_NODE_ITERATOR_TYPE</code></li>\n</ul>\n<p>返回的 <code>XPathResult</code> 对象是一个匹配节点的节点集，它将作为迭代器，允许我们使用 <code>XPathResult</code> 的 <code>iterateNext()</code> 方法访问包含的各个节点。</p>\n<p>一旦迭代完成所有的匹配节点，<code>iterateNext()</code> 将返回 <code>null</code>。</p>\n<p>但请注意，如果在迭代过程中，文档发生突变（文档树被修改），将使迭代无效，并且 <code>XPathResult</code> 的 <code>invalidIteratorState</code> 属性设置为 <code>true</code>，抛出 <code>NS_ERROR_DOM_INVALID_STATE_ERR</code> 异常。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> iterator <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//phoneNumber'</span><span class=\"token punctuation\">,</span> documentNode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> XPathResult<span class=\"token punctuation\">.</span><span class=\"token constant\">UNORDERED_NODE_ITERATOR_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> thisNode <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">iterateNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>thisNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> thisNode<span class=\"token punctuation\">.</span>textContent <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    thisNode <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">iterateNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'Error: Document tree modified during iteration '</span> <span class=\"token operator\">+</span> e <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h5 id=\"snapshots\">Snapshots</h5>\n<p>当 <code>resultType</code> 参数中的指定结果类型为：</p>\n<ul>\n  <li><code>UNORDERED_NODE_SNAPSHOT_TYPE</code></li>\n  <li><code>ORDERED_NODE_SNAPSHOT_TYPE</code></li>\n</ul>\n<p>返回的 <code>XPathResult</code> 对象是一个匹配节点的静态节点集，这允许我们通过 <code>XPathResult</code> 对象的 <code>snapshotItem(itemNumber)</code> 方法访问每个节点，其中 <code>itemNumber</code> 是要检索的节点的索引。包含的节点总数可以通过 <code>snapshotLength</code> 属性访问。</p>\n<p>快照不随文档突变而改变，因此与迭代器不同，快照不会变得无效，但是它可能不对应于当前文档，例如节点可能已被移动，它可能包含不再存在的节点，或新节点可能已添加。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> nodesSnapshot <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//phoneNumber'</span><span class=\"token punctuation\">,</span> documentNode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> XPathResult<span class=\"token punctuation\">.</span><span class=\"token constant\">ORDERED_NODE_SNAPSHOT_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nodesSnapshot<span class=\"token punctuation\">.</span>snapshotLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span> nodesSnapshot<span class=\"token punctuation\">.</span><span class=\"token function\">snapshotItem</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h5 id=\"first_node\">First Node</h5>\n<p>当 <code>resultType</code> 参数中的指定结果类型为：</p>\n<ul>\n  <li><code>ANY_UNORDERED_NODE_TYPE</code></li>\n  <li><code>FIRST_ORDERED_NODE_TYPE</code></li>\n</ul>\n<p>返回的 <code>XPathResult</code> 对象只是匹配 XPath 表达式的第一个找到的节点。这可以通过 <code>XPathResult</code> 对象的 <code>singleNodeValue</code> 属性访问。如果节点集为空，这将为 <code>null</code>。</p>\n<p>请注意，对于无序子类型，返回的单个节点可能不是文档顺序中的第一个，但是对于有序子类型，保证以文档顺序获取第一个匹配的节点。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> firstPhoneNumber <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//phoneNumber'</span><span class=\"token punctuation\">,</span> documentNode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> XPathResult<span class=\"token punctuation\">.</span><span class=\"token constant\">FIRST_ORDERED_NODE_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">dump</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'The first phone number found is '</span> <span class=\"token operator\">+</span> firstPhoneNumber<span class=\"token punctuation\">.</span>singleNodeValue<span class=\"token punctuation\">.</span>textContent <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"any_type_常量\">ANY_TYPE 常量</h4>\n<p>当 <code>resultType</code> 参数中的结果类型指定为 <code>ANY_TYPE</code> 时，返回的 <code>XPathResult</code> 对象将是由表达式求值自然产生的任何类型。</p>\n<p>它可以是任何简单类型（<code>NUMBER_TYPE</code>，<code>STRING_TYPE</code>，<code>BOOLEAN_TYPE</code> ），<strong>但</strong>如果返回的结果类型是节点集，那么它将<strong>只</strong>是一个 <code>UNORDERED_NODE_ITERATOR_TYPE</code>。</p>\n<p>要在评估后确定类型，我们使用 <code>XPathResult</code> 对象的 <code>resultType</code> 属性。此属性的<a href=\"/zh-CN/docs/Web/XPath/Introduction_to_using_XPath_in_JavaScript#xpathresult_defined_constants\">常量</a>值在附录中定义。None Yet =====Any_Type Example===== &lt;pre&gt; &lt;/pre&gt;</p>"}},{"type":"prose","value":{"id":"示例_2","title":"示例","isH3":false,"content":""}},{"type":"prose","value":{"id":"在_html_文档中","title":"在 HTML 文档中","isH3":true,"content":"<p>以下代码旨在放置在要针对其评估 XPath 表达式的 HTML 文档中内嵌或外链的任何 JavaScript 片段中。</p>\n<p>要使用 XPath 提取 HTML 文档中的所有 <code>&lt;h2&gt;</code> 标题元素，<code>xpathExpression</code> 只是 <code>//h2</code>。其中，<code>//</code> 是递归下降运算符，在文档树中的任何位置将元素与 nodeName <code>h2</code> 相匹配。这个的完整代码是：link to introductory xpath doc</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> headings <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//h2'</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> XPathResult<span class=\"token punctuation\">.</span><span class=\"token constant\">ANY_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>请注意，由于 HTML 没有命名空间，因此我们为 <code>namespaceResolver</code> 参数传递了 <code>null</code>。</p>\n<p>因为希望在整个文档中搜索标题，所以我们使用 document 对象本身作为 <code>contextNode</code>。</p>\n<p>此表达式的结果是 <code>XPathResult</code> 对象。如果想知道返回的结果的类型，我们可以评估返回的对象的 <code>resultType</code> 属性。在这种情况下，这将评估为 <code>4</code>，即 <code>UNORDERED_NODE_ITERATOR_TYPE</code>。这是 XPath 表达式的结果是节点集时的默认返回类型。它一次提供对单个节点的访问，并且可能不以特定顺序返回节点。要访问返回的节点，我们使用返回对象的 <code>iterateNext()</code> 方法：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> thisHeading <span class=\"token operator\">=</span> headings<span class=\"token punctuation\">.</span><span class=\"token function\">iterateNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> alertText <span class=\"token operator\">=</span> <span class=\"token string\">'Level 2 headings in this document are:\\n'</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>thisHeading<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  alertText <span class=\"token operator\">+=</span> thisHeading<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n  thisHeading <span class=\"token operator\">=</span> headings<span class=\"token punctuation\">.</span><span class=\"token function\">iterateNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>一旦迭代到一个节点，我们就可以访问该节点上的所有标准 DOM 接口。在遍历从表达式返回的所有 <code>h2</code> 元素之后，对 <code>iterateNext()</code> 的任何进一步调用都将返回 <code>null</code> 。</p>"}},{"type":"prose","value":{"id":"针对扩展中的_xml_文档进行评估","title":"针对扩展中的 XML 文档进行评估","isH3":true,"content":"<p>以下使用位于 <a href=\"\">chrome://yourextension/content/peopleDB.xml</a> 的 XML 文档作为示例。</p>\n<div class=\"code-example\"><pre class=\"brush: xml notranslate\"><code><span class=\"token prolog\">&lt;?xml version=\"1.0\"?&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>people</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xul</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>person</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span> <span class=\"token attr-name\">first</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>george<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">last</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bush<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>address</span> <span class=\"token attr-name\">street</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1600 pennsylvania avenue<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">city</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>washington<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">country</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>usa<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>phoneNumber</span><span class=\"token punctuation\">&gt;</span></span>202-456-1111<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>phoneNumber</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>person</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>person</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span> <span class=\"token attr-name\">first</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tony<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">last</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blair<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>address</span> <span class=\"token attr-name\">street</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10 downing street<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">city</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>london<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">country</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>uk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>phoneNumber</span><span class=\"token punctuation\">&gt;</span></span>020 7925 0918<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>phoneNumber</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>person</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>people</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>为了使 XML 文档的内容在扩展中可用，我们创建一个 <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> 对象以同步加载文档，变量 <code>xmlDoc</code> 将包含该文档作为 <a href=\"/zh-CN/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a> 对象，我们可以使用 <code>evaluate</code> 方法。</p>\n<p>JavaScript 用于扩展 xul/js 文档。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"chrome://yourextension/content/peopleDB.xml\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> xmlDoc <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>responseXML<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> nsResolver <span class=\"token operator\">=</span> xmlDoc<span class=\"token punctuation\">.</span><span class=\"token function\">createNSResolver</span><span class=\"token punctuation\">(</span> xmlDoc<span class=\"token punctuation\">.</span>ownerDocument <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> xmlDoc<span class=\"token punctuation\">.</span>documentElement <span class=\"token operator\">:</span> xmlDoc<span class=\"token punctuation\">.</span>ownerDocument<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> personIterator <span class=\"token operator\">=</span> xmlDoc<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//person'</span><span class=\"token punctuation\">,</span> xmlDoc<span class=\"token punctuation\">,</span> nsResolver<span class=\"token punctuation\">,</span> XPathResult<span class=\"token punctuation\">.</span><span class=\"token constant\">ANY_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"注意_2","title":"注意","isH3":true,"content":"<p>当未定义 XPathResult 对象时，可以使用 <code>Components.interfaces.nsIDOMXPathResult.ANY_TYPE</code> (<code>CI.nsIDOMXPathResult</code>) 在特权代码中检索常量。类似地，可以使用以下创建 XPathEvaluator：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Components<span class=\"token punctuation\">.</span>classes<span class=\"token punctuation\">[</span><span class=\"token string\">\"@mozilla.org/dom/xpath-evaluator;1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span>Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">.</span>nsIDOMXPathEvaluator<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"附录","title":"附录","isH3":false,"content":"<h4 id=\"实现用户定义的命名空间解析器\">实现用户定义的命名空间解析器</h4>\n<p>这只是一个例子。此函数将需要从 <code>xpathExpression</code> 获取命名空间前缀，并返回与该前缀对应的 URI。例如，表达式：</p>\n<pre class=\"notranslate\">'//xhtml:td/mathml:math'\n</pre>\n<p>将选择作为 (X)HTML 表数据单元元素的子项的所有 <a href=\"/zh-CN/docs/Web/API/MathML\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">MathML</a> 表达式。</p>\n<p>为了将使用命名空间 URI <code>http://www.w3.org/1998/Math/MathML</code> 的 <code>mathml:</code> 前缀和使用 URI <code>http://www.w3.org/1999/xhtml</code> 的 <code>xhtml:</code> 关联，我们提供了一个函数：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">nsResolver</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prefix</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> ns <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'xhtml'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'http://www.w3.org/1999/xhtml'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'mathml'</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://www.w3.org/1998/Math/MathML'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> ns<span class=\"token punctuation\">[</span>prefix<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>我们对 <code>document.evaluate</code> 的调用将如下所示：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'//xhtml:td/mathml:math'</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">,</span> nsResolver<span class=\"token punctuation\">,</span> XPathResult<span class=\"token punctuation\">.</span><span class=\"token constant\">ANY_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"为_xml_文档实现默认命名空间\">为 XML 文档实现默认命名空间</h4>\n<p>如前面<a href=\"/zh-CN/docs/Web/XPath/Introduction_to_using_XPath_in_JavaScript#implementing_a_default_namespace_resolver\">实现默认命名空间解析器</a>中所述，默认解析器不处理 XML 文档的默认命名空间。例如使用本文档：</p>\n<div class=\"code-example\"><pre class=\"brush: xml notranslate\"><code><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>feed</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2005/Atom<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>feed</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p><code>doc.evaluate('//entry', doc, nsResolver, XPathResult.ANY_TYPE, null)</code> 将返回一个空集，其中 <code>nsResolver</code> 是 <code>createNSResolver</code> 返回的解析器。传递一个 <code>null</code> 解析器再好不过了。</p>\n<p>一种可能的解决方法是创建一个自定义解析器，返回正确的默认命名空间（本例中为 Atom 命名空间）。请注意，您仍然必须在 XPath 表达式中使用一些命名空间前缀，以便解析器函数能够将其更改为所需的命名空间。例如：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">resolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'http://www.w3.org/2005/Atom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\ndoc<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//myns:entry'</span><span class=\"token punctuation\">,</span> doc<span class=\"token punctuation\">,</span> resolver<span class=\"token punctuation\">,</span> XPathResult<span class=\"token punctuation\">.</span><span class=\"token constant\">ANY_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>请注意，如果文档使用多个命名空间，则需要更复杂的解析器。</p>\n<p>下一节将介绍一种可能更好的方法（并允许不提前知道命名空间）。</p>\n<h4 id=\"使用_xpath_函数引用具有默认命名空间的元素\">使用 XPath 函数引用具有默认命名空间的元素</h4>\n<p>另一种匹配非空命名空间中的默认的元素的方法（以及对于动态 XPath 表达式很有效，其中命名空间可能未知），涉及使用如 <code>[namespace-uri()='http://www.w3.org/1999/xhtml' and name()='p' and @id='_myid']</code>。这避免了 XPath 查询无法检测到定期标记的元素上的默认命名空间的问题。</p>\n<h4 id=\"获取特定的命名空间元素和属性，而不考虑前缀\">获取特定的命名空间元素和属性，而不考虑前缀</h4>\n<p>如果希望在命名空间（像预期的那样）中提供灵活性，当发现命名空间元素或属性时不一定需要使用特定的前缀，必须使用特殊技术。</p>\n<p>虽然可以修改上述部分中的方法来测试命名空间元素，而不管选择的前缀（使用 <a href=\"/en-US/docs/Web/XPath/Functions/local-name\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">local-name() (en-US)</a> 结合 <a href=\"/en-US/docs/Web/XPath/Functions/namespace-uri\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">namespace-uri() (en-US)</a> 而不是 <a href=\"/en-US/docs/Web/XPath/Functions/name\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">name() (en-US)</a>），但是会发生更具挑战性的情况，如果希望在谓词中获取具有特定命名空间属性的元素（假设在 XPath 1.0 中没有与实现无关的变量）。</p>\n<p>例如，可能尝试（不正确地）使用 namespaced 属性获取元素，如下所示： <code>var xpathlink = someElements[local-name(@*)=\"href\" and namespace-uri(@*)='http://www.w3.org/1999/xlink'];</code></p>\n<p>这可能会无意中抓取一些元素，如果它的一个属性存在，本地名称为 <code>href</code>，但它是一个不同的属性，有目标（XLink）命名空间（而不是 <code>@href</code>）。</p>\n<p>为了使用 XLink <code>@href</code> 属性（而不仅限于命名空间解析器中的预定义前缀）精确地抓取元素，可以按如下方式获取它们：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> xpathEls <span class=\"token operator\">=</span> <span class=\"token string\">'someElements[@*[local-name() = \"href\" and namespace-uri() = \"http://www.w3.org/1999/xlink\"]]'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Grabs elements with any single attribute that has both the local name 'href' and the XLink namespace</span>\n<span class=\"token keyword\">var</span> thislevel <span class=\"token operator\">=</span> xml<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>xpathEls<span class=\"token punctuation\">,</span> xml<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> XPathResult<span class=\"token punctuation\">.</span><span class=\"token constant\">ANY_TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> thisitemEl <span class=\"token operator\">=</span> thislevel<span class=\"token punctuation\">.</span><span class=\"token function\">iterateNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"xpathresult_定义的常量\">XPathResult 定义的常量</h4>\n<table class=\"standard-table\">\n  <thead>\n    <tr>\n      <td class=\"header\">结果类型定义的常数</td>\n      <td class=\"header\">值</td>\n      <td class=\"header\">描述</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>ANY_TYPE</td>\n      <td>0</td>\n      <td>\n        包含任何类型的结果集，从表达式的评估中自然地产生。注意，如果结果是节点集，则\n        UNORDERED_NODE_ITERATOR_TYPE 始终是结果类型。\n      </td>\n    </tr>\n    <tr>\n      <td>NUMBER_TYPE</td>\n      <td>1</td>\n      <td>\n        包含单个数字的结果。这非常有用，例如，在 XPath 表达式中使用\n        <code>count()</code> 函数。\n      </td>\n    </tr>\n    <tr>\n      <td>STRING_TYPE</td>\n      <td>2</td>\n      <td>包含单个字符串的结果。</td>\n    </tr>\n    <tr>\n      <td>BOOLEAN_TYPE</td>\n      <td>3</td>\n      <td>\n        包含单个布尔值的结果。这非常有用，例如，在 XPath 表达式中使用\n        <code>not()</code> 函数。\n      </td>\n    </tr>\n    <tr>\n      <td>UNORDERED_NODE_ITERATOR_TYPE</td>\n      <td>4</td>\n      <td>包含与表达式匹配的所有节点的结果节点集。节点可能不一定与它们在文档中出现的顺序相同。</td>\n    </tr>\n    <tr>\n      <td>ORDERED_NODE_ITERATOR_TYPE</td>\n      <td>5</td>\n      <td>包含与表达式匹配的所有节点的结果节点集。结果集中的节点与文档中显示的节点顺序相同。</td>\n    </tr>\n    <tr>\n      <td>UNORDERED_NODE_SNAPSHOT_TYPE</td>\n      <td>6</td>\n      <td>包含与表达式匹配的所有节点的快照的结果节点集。节点可能不一定与它们在文档中出现的顺序相同。</td>\n    </tr>\n    <tr>\n      <td>ORDERED_NODE_SNAPSHOT_TYPE</td>\n      <td>7</td>\n      <td>包含与表达式匹配的所有节点的快照的结果节点集。结果集中的节点与文档中显示的节点顺序相同。</td>\n    </tr>\n    <tr>\n      <td>ANY_UNORDERED_NODE_TYPE</td>\n      <td>8</td>\n      <td>包含与表达式匹配的任何单个节点的结果节点集。该节点不一定是文档中与表达式匹配的第一个节点。</td>\n    </tr>\n    <tr>\n      <td>FIRST_ORDERED_NODE_TYPE</td>\n      <td>9</td>\n      <td>包含文档中与表达式匹配的第一个节点的结果节点集。</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"参见","title":"参见","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/Using_XPath\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Using XPath</a></li>\n</ul>"}},{"type":"prose","value":{"id":"original_document_information","title":"Original Document Information","isH3":false,"content":"<ul>\n  <li>Based Upon Original Document <a href=\"https://www-xray.ast.cam.ac.uk/~jgraham/mozilla/xpath-tutorial.html\" class=\"external\" rel=\" noopener\">Mozilla XPath Tutorial</a></li>\n  <li>Original Source Author: James Graham.</li>\n  <li>Other Contributors: James Thompson.</li>\n  <li>Last Updated Date: 2006-3-25.</li>\n</ul>"}}],"toc":[{"text":"document.evaluate","id":"document.evaluate"},{"text":"示例","id":"示例_2"},{"text":"附录","id":"附录"},{"text":"参见","id":"参见"},{"text":"Original Document Information","id":"original_document_information"}],"summary":"该篇文档描述了如何在扩展和网站内部通过 JavaScript 调用 XPath 接口。Mozilla 实现了相当多的 DOM 3 XPath，意味着 Xpath 表达式已经可以在 HTML 和 XML 文档中使用。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Introduction to using XPath in JavaScript","locale":"en-US","native":"English (US)"},{"title":"Introducción al uso de XPath en Javascript","locale":"es","native":"Español"},{"title":"Introduction à l'utilisation de XPath avec JavaScript","locale":"fr","native":"Français"},{"title":"JavaScript での XPath の利用の手引き","locale":"ja","native":"日本語"},{"title":"Introduction to using XPath in JavaScript","locale":"ko","native":"한국어"}],"source":{"folder":"zh-cn/web/xpath/introduction_to_using_xpath_in_javascript","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/xpath/introduction_to_using_xpath_in_javascript/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/XPath","title":"XPath"},{"uri":"/zh-CN/docs/Web/XPath/Introduction_to_using_XPath_in_JavaScript","title":"Introduction to using XPath in JavaScript"}],"pageTitle":"Introduction to using XPath in JavaScript - XPath | MDN","noIndexing":false}}