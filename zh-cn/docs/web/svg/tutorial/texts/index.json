{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Texts","mdn_url":"/zh-CN/docs/Web/SVG/Tutorial/Texts","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/SVG/Tutorial/Patterns\">« 上一页</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/SVG/Tutorial/Basic_Transformations\">下一页  »</a></li>\n</ul>\n<p>在 SVG 中有两种截然不同的文本模式。一种是写在图像中的文本，另一种是 SVG 字体。关于后者我们将在教程的后面进行讲解，现在我们主要集中前者：写在图像中的文本。</p>"}},{"type":"prose","value":{"id":"基础","title":"基础","isH3":false,"content":"<p>我们已经在之前<a href=\"/zn-CN/docs/Web/SVG/Tutorial/Getting_Started\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">入门示例</a>中看到了，在一个 SVG 文档中，&lt;text&gt;元素内部可以放任何的文字。</p>\n<div class=\"code-example\"><pre class=\"brush: xml notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>text</span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Hello World!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>text</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>属性 x 和属性 y 性决定了文本在视口中显示的位置。属性<code>text-anchor</code>，可以有这些值：start、middle、end 或 inherit，允许决定从这一点开始的文本流的方向。</p>\n<p>和形状元素类似，属性<code>fill</code>可以给文本填充颜色，属性<code>stroke</code>可以给文本描边，形状元素和文本元素都可以引用渐变或图案，相比较 CSS2.1 只能绘制简单的彩色文字，SVG 显得更具有优势。</p>"}},{"type":"prose","value":{"id":"设置字体属性","title":"设置字体属性","isH3":false,"content":"<p>文本的一个至关重要的部分是它显示的字体。SVG 提供了一些属性，类似于它们的 CSS 同行，用来激活文本选区。下列每个属性可以被设置为一个 SVG 属性或者成为一个 CSS 声明：<code>font-family</code>、<code>font-style</code>、<code>font-weight</code>、<code>font-variant</code>、<code>font-stretch</code>、<code>font-size</code>、<code>font-size-adjust</code>、<code>kerning</code>、<code>letter-spacing</code>、<code>word-spacing</code>和<code>text-decoration</code>。</p>"}},{"type":"prose","value":{"id":"其它文本相关的元素","title":"其它文本相关的元素","isH3":false,"content":""}},{"type":"prose","value":{"id":"tspan","title":"tspan","isH3":true,"content":"<p>该元素用来标记大块文本的子部分，它必须是一个<code>text</code>元素或别的<code>tspan</code>元素的子元素。一个典型的用法是把句子中的一个词变成粗体红色。</p>\n<div class=\"code-example\"><pre class=\"brush: xml notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>text</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tspan</span> <span class=\"token attr-name\">font-weight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bold<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>This is bold and red<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tspan</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>text</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p><code>tspan</code>元素有以下的自定义属性：</p>\n<p>\n  <strong>x</strong>\n  为容器设置一个新绝对<code>x</code>坐标。它覆盖了默认的当前的文本位置。这个属性可以包含一个数列，它们将一个一个地应用到<code>tspan</code>元素内的每一个字符上。\n</p>\n<p>\n  <strong>dx</strong>\n  从当前位置，用一个水平偏移开始绘制文本。这里，你可以提供一个值数列，可以应用到连续的字体，因此每次累积一个偏移。\n</p>\n<p>此外还有属性<strong>y</strong>和属性<strong>dy</strong>作垂直转换。</p>\n<p>\n  <strong>rotate</strong>\n  把所有的字符旋转一个角度。如果是一个数列，则使每个字符旋转分别旋转到那个值，剩下的字符根据最后一个值旋转。\n</p>\n<p>\n  <strong>textLength</strong>\n  这是一个很模糊的属性，给出字符串的计算长度。它意味着如果它自己的度量文字和长度不满足这个提供的值，则允许渲染引擎精细调整字型的位置。\n</p>\n<h4 id=\"tref\">tref</h4>\n<p><code>tref</code>元素允许引用已经定义的文本，高效地把它复制到当前位置。你可以使用<code>xlink:href</code>属性，把它指向一个元素，取得其文本内容。你可以独立于源样式化它、修改它的外观。</p>\n<div class=\"code-example\"><pre class=\"brush: xml notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>text</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>This is an example text.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>text</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>text</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tref</span> <span class=\"token attr-name\"><span class=\"token namespace\">xlink:</span>href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#example<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>text</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"textpath\">textPath</h4>\n<p>该元素利用它的<code>xlink:href</code>属性取得一个任意路径，把字符对齐到路径，于是字体会环绕路径、顺着路径走：</p>\n<div class=\"code-example\"><pre class=\"brush: xml notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my_path<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>M 20,20 C 40,40 80,40 100,20<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transparent<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>text</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textPath</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xlink</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/1999/xlink<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xlink:</span>href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#my_path<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    This text follows a curve.\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textPath</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>text</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/SVG/Tutorial/Patterns\">« 上一页</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/SVG/Tutorial/Basic_Transformations\">下一页  »</a></li>\n</ul>"}}],"toc":[{"text":"基础","id":"基础"},{"text":"设置字体属性","id":"设置字体属性"},{"text":"其它文本相关的元素","id":"其它文本相关的元素"}],"summary":"在 SVG 中有两种截然不同的文本模式。一种是写在图像中的文本，另一种是 SVG 字体。关于后者我们将在教程的后面进行讲解，现在我们主要集中前者：写在图像中的文本。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Texts","locale":"en-US","native":"English (US)"},{"title":"Textes","locale":"fr","native":"Français"},{"title":"Texts","locale":"ja","native":"日本語"},{"title":"Текст","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/svg/tutorial/texts","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/svg/tutorial/texts/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/SVG","title":"SVG：可缩放矢量图形"},{"uri":"/zh-CN/docs/Web/SVG/Tutorial","title":"SVG 教程"},{"uri":"/zh-CN/docs/Web/SVG/Tutorial/Texts","title":"Texts"}],"pageTitle":"Texts - SVG：可缩放矢量图形 | MDN","noIndexing":false}}