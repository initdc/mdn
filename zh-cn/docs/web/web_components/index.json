{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Web Components","mdn_url":"/zh-CN/docs/Web/Web_Components","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li class=\"toggle\"><details open=\"\"><summary>指南</summary><ol><li><a href=\"/zh-CN/docs/Web/Web_Components/Using_custom_elements\">Using custom elements</a></li><li><a href=\"/zh-CN/docs/Web/Web_Components/Using_shadow_DOM\">Using shadow DOM</a></li><li><a href=\"/zh-CN/docs/Web/Web_Components/Using_templates_and_slots\">Using templates and slots</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>接口</summary><ol><li><a href=\"/zh-CN/docs/Web/API/CustomElementRegistry\"><code>CustomElementRegistry</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLSlotElement\"><code>HTMLSlotElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLTemplateElement\"><code>HTMLTemplateElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ShadowRoot\"><code>ShadowRoot</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Element/shadowRoot\"><code>Element.shadowRoot</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Element/slot\"><code>Element.slot</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Event/composed\"><code>Event.composed</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Event/composedPath\"><code>Event.composedPath</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/isConnected\"><code>Node.isConnected</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Window/customElements\"><code>Window.customElements</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Document/createElement\"><code>Document.createElement()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Element/attachShadow\"><code>Element.attachShadow()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/getRootNode\"><code>Node.getRootNode()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Web Components 是一套不同的技术，允许您创建可重用的定制元素（它们的功能封装在您的代码之外）并且在您的 web 应用中使用它们。</p>"}},{"type":"prose","value":{"id":"概念和使用","title":"概念和使用","isH3":false,"content":"<p>作为开发者，我们都知道尽可能多的重用代码是一个好主意。这对于自定义标记结构来说通常不是那么容易 — 想想复杂的 HTML（以及相关的样式和脚本），有时您不得不写代码来呈现自定义 UI 控件，并且如果您不小心的话，多次使用它们会使您的页面变得一团糟。</p>\n<p>Web Components 旨在解决这些问题 — 它由三项主要技术组成，它们可以一起使用来创建封装功能的定制元素，可以在你喜欢的任何地方重用，不必担心代码冲突。</p>\n<ul>\n  <li><strong>Custom elements（自定义元素）</strong>：一组 JavaScript API，允许您定义 custom elements 及其行为，然后可以在您的用户界面中按照需要使用它们。</li>\n  <li><strong>Shadow DOM（影子 DOM）</strong>：一组 JavaScript API，用于将封装的“影子”DOM 树附加到元素（与主文档 DOM 分开呈现）并控制其关联的功能。通过这种方式，您可以保持元素的功能私有，这样它们就可以被脚本化和样式化，而不用担心与文档的其他部分发生冲突。</li>\n  <li><strong>HTML templates（HTML 模板）：</strong> <a href=\"/zh-CN/docs/Web/HTML/Element/template\"><code>&lt;template&gt;</code></a> 和 <a href=\"/zh-CN/docs/Web/HTML/Element/slot\"><code>&lt;slot&gt;</code></a> 元素使您可以编写不在呈现页面中显示的标记模板。然后它们可以作为自定义元素结构的基础被多次重用。</li>\n</ul>\n<p>实现 web component 的基本方法通常如下所示：</p>\n<ol>\n  <li>创建一个类或函数来指定 web 组件的功能，如果使用类，请使用 ECMAScript 2015 的类语法 (参阅<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Classes\">类</a>获取更多信息)。</li>\n  <li>使用 <a href=\"/zh-CN/docs/Web/API/CustomElementRegistry/define\"><code>CustomElementRegistry.define()</code></a> 方法注册您的新自定义元素，并向其传递要定义的元素名称、指定元素功能的类、以及可选的其所继承自的元素。</li>\n  <li>如果需要的话，使用<a href=\"/zh-CN/docs/Web/API/Element/attachShadow\"><code>Element.attachShadow()</code></a> 方法将一个 shadow DOM 附加到自定义元素上。使用通常的 DOM 方法向 shadow DOM 中添加子元素、事件监听器等等。</li>\n  <li>如果需要的话，使用 <a href=\"/zh-CN/docs/Web/HTML/Element/template\"><code>&lt;template&gt;</code></a> 和<a href=\"/zh-CN/docs/Web/HTML/Element/slot\"><code>&lt;slot&gt;</code></a> 定义一个 HTML 模板。再次使用常规 DOM 方法克隆模板并将其附加到您的 shadow DOM 中。</li>\n  <li>在页面任何您喜欢的位置使用自定义元素，就像使用常规 HTML 元素那样。</li>\n</ol>"}},{"type":"prose","value":{"id":"教程","title":"教程","isH3":false,"content":"<dl>\n  <dt id=\"using_custom_elements\"><a href=\"/zh-CN/docs/Web/Web_Components/Using_custom_elements\">Using custom elements</a></dt>\n  <dd>\n    <p>介绍如何使用自定义元素的功能来创建简单的 web components，以及生命周期回调和其他更高级的功能。</p>\n  </dd>\n  <dt id=\"using_shadow_dom\"><a href=\"/zh-CN/docs/Web/Web_Components/Using_shadow_DOM\">Using shadow DOM</a></dt>\n  <dd>\n    <p>介绍 shadow DOM 的基础知识，展示如何向元素中附加 shadow DOM，添加到 shadow DOM 树，添加样式等等。</p>\n  </dd>\n  <dt id=\"using_templates_and_slots\"><a href=\"/zh-CN/docs/Web/Web_Components/Using_templates_and_slots\">Using templates and slots</a></dt>\n  <dd>\n    <p>介绍如何使用<a href=\"/zh-CN/docs/Web/HTML/Element/template\"><code>&lt;template&gt;</code></a> 和 <a href=\"/zh-CN/docs/Web/HTML/Element/slot\"><code>&lt;slot&gt;</code></a> 元素定义可重用的 HTML 结构，然后在 Web components 中使用该结构。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"参考","title":"参考","isH3":false,"content":""}},{"type":"prose","value":{"id":"custom_elements","title":"Custom elements","isH3":true,"content":"<dl>\n  <dt id=\"customelementregistry\"><a href=\"/zh-CN/docs/Web/API/CustomElementRegistry\"><code>CustomElementRegistry</code></a></dt>\n  <dd>\n    <p>包含自定义元素相关功能，最值得注意的是 <a href=\"/zh-CN/docs/Web/API/CustomElementRegistry/define\"><code>CustomElementRegistry.define()</code></a> 方法用来注册新的自定义元素，这样就可以在文档中使用它们。</p>\n  </dd>\n  <dt id=\"window.customelements\"><a href=\"/zh-CN/docs/Web/API/Window/customElements\"><code>Window.customElements</code></a></dt>\n  <dd>\n    <p>返回 <code>CustomElementRegistry</code> 对象的引用。</p>\n  </dd>\n  <dt id=\"生命周期回调\"><a href=\"/zh-CN/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks\">生命周期回调</a></dt>\n  <dd>\n    <p>定义在自定义元素的类定义中的特殊回调函数，影响其行为：</p>\n    <ul>\n      <li><code>connectedCallback</code>：当自定义元素第一次被连接到文档 DOM 时被调用。</li>\n      <li><code>disconnectedCallback</code>：当自定义元素与文档 DOM 断开连接时被调用。</li>\n      <li><code>adoptedCallback</code>：当自定义元素被移动到新文档时被调用。</li>\n      <li><code>attributeChangedCallback</code>：当自定义元素的一个属性被增加、移除或更改时被调用。</li>\n    </ul>\n  </dd>\n  <dt id=\"创建自定义内置元素的扩展\">创建自定义内置元素的扩展</dt>\n  <dd>\n    <p>定义了以下扩展：</p>\n    <ul>\n      <li><a href=\"/zh-CN/docs/Web/HTML/Global_attributes#attr-is\"><code>is</code></a> 全局 HTML 属性：允许您指定一个标准 HTML 元素应该表现得像一个已注册的自定义内置元素。</li>\n      <li><a href=\"/zh-CN/docs/Web/API/Document/createElement\"><code>Document.createElement()</code></a> 方法的“is”选项：允许您创建一个标准 HTML 元素的实例，表现得像一个给定的已注册的自定义内置元素。</li>\n    </ul>\n  </dd>\n  <dt id=\"css_伪类\">CSS 伪类</dt>\n  <dd>\n    <p>与自定义元素特别相关的伪类：</p>\n    <ul>\n      <li><a href=\"/zh-CN/docs/Web/CSS/:defined\"><code>:defined</code></a>：匹配任何已定义的元素，包括内置元素和使用 <code>CustomElementRegistry.define()</code> 定义的自定义元素。</li>\n      <li><a href=\"/zh-CN/docs/Web/CSS/:host\"><code>:host</code></a>：选择 <a href=\"/zh-CN/docs/Web/Web_Components/Using_shadow_DOM\">shadow DOM</a> 的 shadow host，内容是它内部使用的 CSS（containing the CSS it is used inside）。</li>\n      <li><a href=\"/zh-CN/docs/Web/CSS/:host_function\"><code>:host()</code></a>：选择 <a href=\"/zh-CN/docs/Web/Web_Components/Using_shadow_DOM\">shadow DOM</a> 的 shadow host，内容是它内部使用的 CSS（这样您可以从 shadow DOM 内部选择自定义元素）— 但只匹配给定方法的选择器的 shadow host 元素。</li>\n      <li><a href=\"/zh-CN/docs/Web/CSS/:host-context\"><code>:host-context()</code></a>: 选择 <a href=\"/zh-CN/docs/Web/Web_Components/Using_shadow_DOM\">shadow DOM</a> 的 shadow host，内容是它内部使用的 CSS（这样您可以从 shadow DOM 内部选择自定义元素）— 但只匹配给定方法的选择器匹配元素的子 shadow host 元素。</li>\n    </ul>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"shadow_dom","title":"Shadow DOM","isH3":true,"content":"<dl>\n  <dt id=\"shadowroot\"><a href=\"/zh-CN/docs/Web/API/ShadowRoot\"><code>ShadowRoot</code></a></dt>\n  <dd>\n    <p>表示 shadow DOM 子树的根节点。</p>\n  </dd>\n  <dt id=\"documentorshadowroot\"><a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>DocumentOrShadowRoot</code></a></dt>\n  <dd>\n    <p>定义了可在文档和 shadow 根中使用的功能的 mixin。</p>\n  </dd>\n  <dt id=\"element\"><a href=\"/zh-CN/docs/Web/API/Element\"><code>Element</code></a> extensions</dt>\n  <dd>\n    <p>与 shadow DOM 有关的 <code>Element</code> 接口的扩展：</p>\n    <ul>\n      <li><a href=\"/zh-CN/docs/Web/API/Element/attachShadow\"><code>Element.attachShadow()</code></a> 方法将 shadow DOM 树附加给特定元素。</li>\n      <li><a href=\"/zh-CN/docs/Web/API/Element/shadowRoot\"><code>Element.shadowRoot</code></a> 属性返回附加给特定元素的 shadow root，或者 <code>null</code> 如果没有 shadow root 被附加。</li>\n    </ul>\n  </dd>\n  <dt id=\"node\"><a href=\"/zh-CN/docs/Web/API/Node\"><code>Node</code></a> 相关拓展</dt>\n  <dd>\n    <p>与 shadow DOM 相关的 <code>Node</code> 接口的拓展：</p>\n    <ul>\n      <li><a href=\"/zh-CN/docs/Web/API/Node/getRootNode\"><code>Node.getRootNode()</code></a> 方法返回上下文对象的根，可以选择包含 shadow root，如果可用的话。</li>\n      <li><a href=\"/zh-CN/docs/Web/API/Node/isConnected\"><code>Node.isConnected</code></a> 属性返回一个布尔值表示节点是否连接（直接或间接）到上下文对象。例如，在普通 DOM 的情况下为 <a href=\"/zh-CN/docs/Web/API/Document\"><code>Document</code></a> 对象，或者在 shadow DOM 的情况下为 <a href=\"/zh-CN/docs/Web/API/ShadowRoot\"><code>ShadowRoot</code></a> 。</li>\n    </ul>\n  </dd>\n  <dt id=\"event\"><a href=\"/zh-CN/docs/Web/API/Event\"><code>Event</code></a> 拓展</dt>\n  <dd>\n    <p>与 shadow DOM 相关的 <code>Event</code> 接口的扩展：</p>\n    <ul>\n      <li><a href=\"/zh-CN/docs/Web/API/Event/composed\"><code>Event.composed</code></a>：返回 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> 它表明事件是否会通过 shadow DOM 边界传播到标准 DOM。</li>\n      <li>返回事件的路径（侦听器将被调用的对象）。如果 shadow root 是使用 <a href=\"/zh-CN/docs/Web/API/ShadowRoot/mode\"><code>ShadowRoot.mode</code></a> 为 closed 创建的，则不包括 shadow 树中的节点。</li>\n    </ul>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"html_templates","title":"HTML templates","isH3":true,"content":"<dl>\n  <dt id=\"template\"><a href=\"/zh-CN/docs/Web/HTML/Element/template\"><code>&lt;template&gt;</code></a></dt>\n  <dd>\n    <p>包含一个 HTML 片段，不会在文档初始化时渲染。但是可以在运行时使用 JavaScript 显示。主要用作自定义元素结构的基础。关联的 DOM 接口是<a href=\"/zh-CN/docs/Web/API/HTMLTemplateElement\"><code>HTMLTemplateElement</code></a>。</p>\n  </dd>\n  <dt id=\"slot\"><a href=\"/zh-CN/docs/Web/HTML/Element/slot\"><code>&lt;slot&gt;</code></a></dt>\n  <dd>\n    <p>web component 中的一个占位符，你可以填充自己的标记，这样你就可以创建单独的 DOM 树并将它们呈现在一起。关联的 DOM 接口是<a href=\"/zh-CN/docs/Web/API/HTMLSlotElement\"><code>HTMLSlotElement</code></a>。</p>\n  </dd>\n  <dt id=\"the\">The <a href=\"/zh-CN/docs/Web/HTML/Global_attributes/slot\"><code>slot</code></a> global HTML attribute</dt>\n  <dd>\n    <p>将在 shadow DOM 树中的插槽分配给一个元素。</p>\n  </dd>\n  <dt id=\"slotable_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Element\"><code>Slotable</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>由 <a href=\"/zh-CN/docs/Web/API/Element\"><code>Element</code></a> 和 <a href=\"/zh-CN/docs/Web/API/Text\"><code>Text</code></a> 节点实现的 mixin，定义了允许它们成为 <a href=\"/zh-CN/docs/Web/HTML/Element/slot\"><code>&lt;slot&gt;</code></a> 元素内容的特性。mixin 定义了一个属性， <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Element/assignedSlot\"><code>Slotable.assignedSlot</code> <small>(en-US)</small></a>，返回节点所插入的插槽的引用。</p>\n  </dd>\n  <dt id=\"element_2\"><a href=\"/zh-CN/docs/Web/API/Element\"><code>Element</code></a> extensions</dt>\n  <dd>\n    <p>与插槽相关的 <code>Element</code> 接口的扩展：</p>\n    <ul>\n      <li><a href=\"/zh-CN/docs/Web/API/Element/slot\"><code>Element.slot</code></a>：返回附加到元素上的 shadow DOM 插槽的名字。</li>\n    </ul>\n  </dd>\n  <dt id=\"css_pseudo-elements\">CSS pseudo-elements</dt>\n  <dd>\n    <p>slots 特别相关的伪元素：</p>\n    <ul>\n      <li><a href=\"/zh-CN/docs/Web/CSS/::slotted\"><code>::slotted</code></a>：匹配任何已经插入一个 slot 的内容。</li>\n    </ul>\n  </dd>\n  <dt id=\"slotchange\"><code><a href=\"/zh-CN/docs/Web/Reference/Events/slotchange\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">slotchange</a></code> event</dt>\n  <dd>\n    <p>当插槽中的节点改变时在 <a href=\"/zh-CN/docs/Web/API/HTMLSlotElement\"><code>HTMLSlotElement</code></a> 实例（<a href=\"/zh-CN/docs/Web/HTML/Element/slot\"><code>&lt;slot&gt;</code></a> 元素）上触发。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"例子","title":"例子","isH3":false,"content":"<p>在 <a href=\"https://github.com/mdn/web-components-examples\" class=\"external\" rel=\" noopener\">web-components-examples</a>，我们正在构建一些例子。以后会添加更多。</p>"}},{"type":"specifications","value":{"title":"规范","id":"规范","isH3":false,"query":"html.elements.template,api.ShadowRoot","specifications":[]}},{"type":"browser_compatibility","value":{"title":"浏览器兼容性","id":"浏览器兼容性","isH3":false,"data":null,"query":"html.elements.template,api.ShadowRoot","browsers":null}},{"type":"prose","value":{"id":"另见","title":"另见","isH3":false,"content":"<ul>\n  <li><a href=\"https://www.webcomponents.org/\" class=\"external\" rel=\" noopener\">webcomponents.org</a> — site featuring web components examples, tutorials, and other information.</li>\n  <li><a href=\"https://github.com/hybridsjs/hybrids\" class=\"external\" rel=\" noopener\">Hybrids</a> — Open source web components library, which favors plain objects and pure functions over <code>class</code> and this syntax. It provides a simple and functional API for creating custom elements.</li>\n  <li><a href=\"https://www.polymer-project.org/\" class=\"external\" rel=\" noopener\">Polymer</a> — Google's web components framework — a set of polyfills, enhancements, and examples. Currently the easiest way to use web components cross-browser.</li>\n  <li><a href=\"https://github.com/devpunks/snuggsi#readme\" class=\"external\" rel=\" noopener\">Snuggsi.es</a> — Easy Web Components in ~1kB <em>Including polyfill</em> — All you need is a browser and basic understanding of HTML, CSS, and JavaScript classes to be productive.</li>\n  <li><a href=\"https://github.com/slimjs/slim.js\" class=\"external\" rel=\" noopener\">Slim.js</a> — Open source web components library — a high-performant library for rapid and easy component authoring; extensible and pluggable and cross-framework compatible.</li>\n  <li><a href=\"https://www.htmlelements.com/\" class=\"external\" rel=\" noopener\">Smart.js</a> — Web Components library with simple API for creating cross-browser custom elements.</li>\n  <li><a href=\"https://stenciljs.com/\" class=\"external\" rel=\" noopener\">Stencil</a> — Toolchain for building reusable, scalable design systems in web components.</li>\n</ul>"}}],"toc":[{"text":"概念和使用","id":"概念和使用"},{"text":"教程","id":"教程"},{"text":"参考","id":"参考"},{"text":"例子","id":"例子"},{"text":"规范","id":"规范"},{"text":"浏览器兼容性","id":"浏览器兼容性"},{"text":"另见","id":"另见"}],"summary":"Web Components 是一套不同的技术，允许您创建可重用的定制元素（它们的功能封装在您的代码之外）并且在您的 web 应用中使用它们。","popularity":0.0032,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Web Components","locale":"en-US","native":"English (US)"},{"title":"Web Components","locale":"es","native":"Español"},{"title":"Web Components (composants web)","locale":"fr","native":"Français"},{"title":"ウェブコンポーネント","locale":"ja","native":"日本語"},{"title":"웹 컴포넌트","locale":"ko","native":"한국어"},{"title":"Web Components","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Веб-компоненты","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/web_components","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/web_components/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/Web_Components","title":"Web Components"}],"pageTitle":"Web Components | MDN","noIndexing":false}}