{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"使用 custom elements","mdn_url":"/zh-CN/docs/Web/Web_Components/Using_custom_elements","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li class=\"toggle\"><details open=\"\"><summary>指南</summary><ol><li><a href=\"/zh-CN/docs/Web/Web_Components/Using_custom_elements\">Using custom elements</a></li><li><a href=\"/zh-CN/docs/Web/Web_Components/Using_shadow_DOM\">Using shadow DOM</a></li><li><a href=\"/zh-CN/docs/Web/Web_Components/Using_templates_and_slots\">Using templates and slots</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>接口</summary><ol><li><a href=\"/zh-CN/docs/Web/API/CustomElementRegistry\"><code>CustomElementRegistry</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLSlotElement\"><code>HTMLSlotElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/HTMLTemplateElement\"><code>HTMLTemplateElement</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ShadowRoot\"><code>ShadowRoot</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>属性</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Element/shadowRoot\"><code>Element.shadowRoot</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Element/slot\"><code>Element.slot</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Event/composed\"><code>Event.composed</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Event/composedPath\"><code>Event.composedPath</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/isConnected\"><code>Node.isConnected</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Window/customElements\"><code>Window.customElements</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>方法</summary><ol><li><a href=\"/zh-CN/docs/Web/API/Document/createElement\"><code>Document.createElement()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Element/attachShadow\"><code>Element.attachShadow()</code></a></li><li><a href=\"/zh-CN/docs/Web/API/Node/getRootNode\"><code>Node.getRootNode()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Web Components 标准非常重要的一个特性是，它使开发者能够将 HTML 页面的功能封装为 custom elements（自定义标签），而往常，开发者不得不写一大堆冗长、深层嵌套的标签来实现同样的页面功能。这篇文章将会介绍如何使用 HTML 的 custom elements。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> Firefox、Chrome 和 Opera 默认就支持 custom elements。Safari 目前只支持 autonomous custom elements（自主自定义标签），而 Edge 也正在积极实现中。</p>\n</div>"}},{"type":"prose","value":{"id":"概述","title":"概述","isH3":false,"content":"<p><a href=\"/zh-CN/docs/Web/API/CustomElementRegistry\"><code>CustomElementRegistry</code></a> 接口的实例用来处理 web 文档中的 custom elements — 该对象允许你注册一个 custom element，返回已注册 custom elements 的信息，等等。</p>\n<p><a href=\"/zh-CN/docs/Web/API/CustomElementRegistry/define\"><code>CustomElementRegistry.define()</code></a> 方法用来注册一个 custom element，该方法接受以下参数：</p>\n<ul>\n  <li>表示所创建的元素名称的符合 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>DOMString</code></a> 标准的字符串。注意，custom element 的名称不能是单个单词，且其中<a href=\"https://html.spec.whatwg.org/#valid-custom-element-name\" class=\"external\" rel=\" noopener\">必须要有短横线</a>。</li>\n  <li>用于定义元素行为的 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Classes\">类</a> 。</li>\n  <li><code>可选参数</code>，一个包含 <code>extends</code> 属性的配置对象，是可选参数。它指定了所创建的元素继承自哪个内置元素，可以继承任何内置元素。</li>\n</ul>\n<p>作为示例，我们可以像这样定义一个叫做 <a href=\"https://mdn.github.io/web-components-examples/word-count-web-component/\" class=\"external\" rel=\" noopener\">word-count</a> 的 custom element：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'word-count'</span><span class=\"token punctuation\">,</span> WordCount<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token string\">'p'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这个元素叫做 <code>word-count</code>，它的类对象是 <code>WordCount</code>, 继承自 <a href=\"/zh-CN/docs/Web/HTML/Element/p\"><code>&lt;p&gt;</code></a> 元素。</p>\n<p>一个 custom element 的类对象可以通过 ES 2015 标准里的类语法生成。所以，<code>WordCount</code>可以写成下面这样：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">WordCount</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLParagraphElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 必须首先调用 super 方法</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 元素的功能代码写在这里</span>\n\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>上面只是一个简单的例子，我们能做的不只这些。在构造函数中，我们可以设定一些生命周期的回调函数，在特定的时间，这些回调函数将会被调用。例如，<code>connectedCallback</code>会在 custom element 首次被插入到文档 DOM 节点上时被调用，而 <code>attributeChangedCallback</code>则会在 custom element 增加、删除或者修改某个属性时被调用。</p>\n<p>你可以在 <a href=\"#%E4%BD%BF%E7%94%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0\">使用生命周期回调函数</a>段落中了解更多相关信息。</p>\n<p>共有两种 custom elements：</p>\n<ul>\n  <li><strong>Autonomous custom elements</strong> 是独立的元素，它不继承其他内建的 HTML 元素。你可以直接把它们写成 HTML 标签的形式，来在页面上使用。例如 <code>&lt;popup-info&gt;</code>，或者是<code>document.createElement(\"popup-info\")</code>这样。</li>\n  <li><strong>Customized built-in elements</strong> 继承自基本的 HTML 元素。在创建时，你必须指定所需扩展的元素（正如上面例子所示），使用时，需要先写出基本的元素标签，并通过 <a href=\"/zh-CN/docs/Web/HTML/Global_attributes#attr-is\"><code>is</code></a> 属性指定 custom element 的名称。例如<code>&lt;p is=\"word-count\"&gt;</code>, 或者 <code>document.createElement(\"p\", { is: \"word-count\" })</code>。</li>\n</ul>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<p>让我们来看几个简单示例，来了解如何创建 custom elements。</p>"}},{"type":"prose","value":{"id":"autonomous_custom_elements","title":"Autonomous custom elements","isH3":true,"content":"<p>我们来看一下 <a href=\"https://github.com/mdn/web-components-examples/tree/master/popup-info-box-web-component\" class=\"external\" rel=\" noopener\"><code>&lt;popup-info-box&gt;</code></a> (查看<a href=\"https://mdn.github.io/web-components-examples/popup-info-box-web-component/\" class=\"external\" rel=\" noopener\">在线示例</a>)，一个关于 autonomous custom element 的例子。它包含有一个图标和一段文字，并且图标显示在页面上。在这个图标获取焦点时，它会显示一个包含该段文字的信息框，用于展示更多的信息。</p>\n<p>为了实现这个功能，首先创建一个 JavaScript 文件，定义一个叫做<code>PopUpInfo</code>的类，它继承自<a href=\"/zh-CN/docs/Web/API/HTMLElement\"><code>HTMLElement</code></a>。Autonomous custom elements 总是继承自<code>HTMLElement</code>。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">PopUpInfo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 必须首先调用 super 方法</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 元素的功能代码写在这里</span>\n\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>上述代码片段中，类的构造函数<a class=\"page-not-created\" title=\"此文档尚未被撰写，期待你的贡献!\"><code>constructor</code></a>总是先调用<a href=\"/zh-CN/docs/Web/JavaScript/Reference/Operators/super\"><code>super()</code></a>来建立正确的原型链继承关系。</p>\n<p>在构造函数中，我们会定义元素实例所拥有的全部功能。作为示例，我们首先会将 shadow root 附加到 custom element 上，然后通过一系列 DOM 操作创建 custom element 的内部阴影 DOM（shadow DOM）结构，再将其附加到 shadow root 上，最后再将一些 CSS 附加到 shadow root 的 style 节点上。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 创建一个 shadow root</span>\n<span class=\"token keyword\">var</span> shadow <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 创建一个 spans</span>\n<span class=\"token keyword\">var</span> wrapper <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwrapper<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'wrapper'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> icon <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nicon<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'icon'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nicon<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tabindex'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> info <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninfo<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 获取 text 属性上的内容，并添加到一个 span 标签内</span>\n<span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninfo<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 插入 icon</span>\n<span class=\"token keyword\">var</span> imgUrl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  imgUrl <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  imgUrl <span class=\"token operator\">=</span> <span class=\"token string\">'img/default.png'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nimg<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> imgUrl<span class=\"token punctuation\">;</span>\nicon<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 创建一些 CSS，并应用到 shadow dom 上</span>\n<span class=\"token keyword\">var</span> style <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstyle<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'.wrapper {'</span> <span class=\"token operator\">+</span>\n<span class=\"token comment\">// 简洁起见，省略了具体的 CSS</span>\n\n<span class=\"token comment\">// 将创建的元素附加到 shadow dom</span>\n\nshadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nshadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwrapper<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>icon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwrapper<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>最后，我们使用之前提到的<code>define()</code>方法将 custom element 注册到<code>CustomElementRegistry</code>上，在方法的参数里，我们指定了元素的名称，以及定义了元素功能的类。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-info'</span><span class=\"token punctuation\">,</span> PopUpInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>现在我们可以在页面上使用我们定义的 custom element 了，就像下面这样：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>popup-info</span> <span class=\"token attr-name\">img</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>img/alt.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Your card validation code (CVC)\n  is an extra security feature — it is the last 3 or 4 numbers on the\n  back of your card.<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 上方代码不是最新，你可以在这里找到<a href=\"https://github.com/mdn/web-components-examples/blob/master/popup-info-box-web-component/main.js\" class=\"external\" rel=\" noopener\">完整的源码</a>。</p>\n</div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 在 Chrome 版本 76.0.3809.132（正式版本）（64 位）中测试发现，<code>customElements.define()</code>必须在 js 文件中调用，且引用此 js 文件时必须在<code>script</code>标签上添加<code>defer</code>属性，否则<code>this.getAttribute('属性名称')</code>无法获取到值。</p>\n</div>"}},{"type":"prose","value":{"id":"customized_built-in_elements","title":"Customized built-in elements","isH3":true,"content":"<p>现在让我们来看一下另一个有关 customized built in element（自定义内置元素）的示例— <a href=\"https://github.com/mdn/web-components-examples/tree/master/expanding-list-web-component\" class=\"external\" rel=\" noopener\">expanding-list</a> (<a href=\"https://mdn.github.io/web-components-examples/expanding-list-web-component/\" class=\"external\" rel=\" noopener\">查看在线示例</a>)。该示例将所有的无序列表转化为一个可收起/展开的菜单。</p>\n<p>首先，我们定义一个元素的类，这和之前一样：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">ExpandingList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLUListElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 必须首先调用 super 方法</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 元素的功能代码写在这里</span>\n\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>在这里，我们不会详细解释元素的功能细节，你可以在源码中了解它的工作方式。这里的真正不同点在于元素继承的是<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLUListElement\"><code>HTMLUListElement</code> <small>(en-US)</small></a> 接口，而不是<a href=\"/zh-CN/docs/Web/API/HTMLElement\"><code>HTMLElement</code></a>。所以它拥有<a href=\"/zh-CN/docs/Web/HTML/Element/ul\"><code>&lt;ul&gt;</code></a> 元素所有的特性，以及在此基础上我们定义的功能，这是与独立元素（standalone element）不同之处。这也是为什么我们称它为 customized built-in 元素，而不是一个 autonomous 元素。</p>\n<p>接下来，和之前一样，我们使用<code>define()</code>方法注册一个元素，但不同的是，我们需要添加一个配置对象，用于指定我们需要继承的元素：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'expanding-list'</span><span class=\"token punctuation\">,</span> ExpandingList<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ul\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在页面上使用 built-in element 看起来也会有所不同：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">is</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>expanding-list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  ...\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>你可以正常使用<code>&lt;ul&gt;</code>标签，也可以通过<code>is</code>属性来指定一个 custom element 的名称。</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>备注：</strong> 同样的，你可以在这里找到完整的 <a href=\"https://github.com/mdn/web-components-examples/blob/master/expanding-list-web-component/main.js\" class=\"external\" rel=\" noopener\">JavaScript 源码</a>。</p>\n</div>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>备注：</strong> 在 chrome 66 版本上，该示例无法正确工作，相关问题：<a href=\"https://stackoverflow.com/questions/39986046/how-to-create-new-instance-of-an-extended-class-of-custom-elements\" class=\"external\" rel=\" noopener\">How to create new instance of an extended class of custom elements</a></p>\n</div>"}},{"type":"prose","value":{"id":"使用生命周期回调函数","title":"使用生命周期回调函数","isH3":false,"content":"<p>在 custom element 的构造函数中，可以指定多个不同的回调函数，它们将会在元素的不同生命时期被调用：</p>\n<ul>\n  <li><code>connectedCallback</code>：当 custom element 首次被插入文档 DOM 时，被调用。</li>\n  <li><code>disconnectedCallback</code>：当 custom element 从文档 DOM 中删除时，被调用。</li>\n  <li><code>adoptedCallback</code>：当 custom element 被移动到新的文档时，被调用。</li>\n  <li><code>attributeChangedCallback</code>: 当 custom element 增加、删除、修改自身属性时，被调用。</li>\n</ul>\n<p>我们来看一下它们的一下用法示例。下面的代码出自<a href=\"https://github.com/mdn/web-components-examples/tree/master/life-cycle-callbacks\" class=\"external\" rel=\" noopener\">life-cycle-callbacks</a>示例（<a href=\"https://mdn.github.io/web-components-examples/life-cycle-callbacks/\" class=\"external\" rel=\" noopener\">查看在线示例</a>）。这个简单示例只是生成特定大小、颜色的方块。custom element 看起来像下面这样：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>custom-square</span> <span class=\"token attr-name\">l</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">c</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>custom-square</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>这里，类的构造函数很简单 — 我们将 shadow DOM 附加到元素上，然后将一个<a href=\"/zh-CN/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a>元素和<a href=\"/zh-CN/docs/Web/HTML/Element/style\"><code>&lt;style&gt;</code></a>元素附加到 shadow root 上：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> shadow <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> style <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nshadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nshadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>示例中的关键函数是 <code>updateStyle()</code>—它接受一个元素作为参数，然后获取该元素的 shadow root，找到<code>&lt;style&gt;</code>元素，并添加<a href=\"/zh-CN/docs/Web/CSS/width\"><code>width</code></a>，<a href=\"/zh-CN/docs/Web/CSS/height\"><code>height</code></a>以及<a href=\"/zh-CN/docs/Web/CSS/background-color\"><code>background-color</code></a>样式。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">updateStyle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> shadow <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span>shadowRoot<span class=\"token punctuation\">;</span>\n  shadow<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"style\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    div {\n      width: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>elem<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"l\"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px;\n      height: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>elem<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"l\"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px;\n      background-color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>elem<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n    }\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>实际的更新操作是在生命周期的回调函数中处理的，我们在构造函数中设定类这些回调函数。当元素插入到 DOM 中时，<code>connectedCallback()</code>函数将会执行 — 在该函数中，我们执行<code>updateStyle()</code> 函数来确保方块按照定义来显示；</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Custom square element added to page.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">updateStyle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>disconnectedCallback()</code>和<code>adoptedCallback()</code>回调函数只是简单地将消息发送到控制台，提示我们元素什么时候从 DOM 中移除、或者什么时候移动到不同的页面：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">disconnectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Custom square element removed from page.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">adoptedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Custom square element moved to new page.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>每当元素的属性变化时，<code>attributeChangedCallback()</code>回调函数会执行。正如它的属性所示，我们可以查看属性的名称、旧值与新值，以此来对元素属性做单独的操作。在当前的示例中，我们只是再次执行了<code>updateStyle()</code>函数，以确保方块的样式在元素属性值变化后得以更新：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Custom square element attributes changed.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">updateStyle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>需要注意的是，如果需要在元素属性变化后，触发<code>attributeChangedCallback()</code>回调函数，你必须监听这个属性。这可以通过定义<code>observedAttributes()</code> get 函数来实现，<code>observedAttributes()</code>函数体内包含一个 return 语句，返回一个数组，包含了需要监听的属性名称：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'l'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>在我们的例子中，该段代码处于构造函数的上方。</p>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>备注：</strong> 在这里查看<a href=\"https://github.com/mdn/web-components-examples/blob/master/life-cycle-callbacks/main.js\" class=\"external\" rel=\" noopener\">完整的 JavaScript 源码</a>。</p>\n</div>"}}],"toc":[{"text":"概述","id":"概述"},{"text":"示例","id":"示例"},{"text":"使用生命周期回调函数","id":"使用生命周期回调函数"}],"summary":"Web Components 标准非常重要的一个特性是，它使开发者能够将 HTML 页面的功能封装为 custom elements（自定义标签），而往常，开发者不得不写一大堆冗长、深层嵌套的标签来实现同样的页面功能。这篇文章将会介绍如何使用 HTML 的 custom elements。","popularity":0.0013,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using custom elements","locale":"en-US","native":"English (US)"},{"title":"Usando elementos personalizados","locale":"es","native":"Español"},{"title":"Utilisation d'éléments personnalisés","locale":"fr","native":"Français"},{"title":"カスタム要素の使用","locale":"ja","native":"日本語"},{"title":"사용자 정의 요소 사용하기","locale":"ko","native":"한국어"},{"title":"Usando custom elements","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Использование пользовательских элементов","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/web_components/using_custom_elements","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/web_components/using_custom_elements/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/Web_Components","title":"Web Components"},{"uri":"/zh-CN/docs/Web/Web_Components/Using_custom_elements","title":"使用 custom elements"}],"pageTitle":"使用 custom elements - Web Components | MDN","noIndexing":false}}