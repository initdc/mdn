{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Getting Started","mdn_url":"/zh-CN/docs/Web/Guide/AJAX/Getting_Started","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"<ol><li><strong><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>指南</summary><ol><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\">Using XMLHttpRequest</a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/HTML_in_XMLHttpRequest\">HTML in XMLHttpRequest</a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest_in_IE6\">Using XMLHttpRequest in IE6</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>接口</summary><ol><li><a href=\"/zh-CN/docs/Web/API/FormData\"><code>FormData</code></a></li><li><a href=\"/zh-CN/docs/Web/API/ProgressEvent\"><code>ProgressEvent</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequestEventTarget\"><code>XMLHttpRequestEventTarget</code></a></li><li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequestUpload\"><code>XMLHttpRequestUpload</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>这篇文章旨在帮助你了解 AJAX 基础，并提供两个可上手的简单案例供你学习。</p>"}},{"type":"prose","value":{"id":"什么是_ajax？","title":"什么是 AJAX？","isH3":false,"content":"<p>AJAX 是异步的 JavaScript 和 XML（<strong>A</strong>synchronous <strong>J</strong>avaScript <strong>A</strong>nd <strong>X</strong>ML）。简单点说，就是使用 <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> 对象与服务器通信。它可以使用 JSON，XML，HTML 和 text 文本等格式发送和接收数据。AJAX 最吸引人的就是它的“异步”特性，也就是说它可以在不重新刷新页面的情况下与服务器通信，交换数据，或更新页面。</p>\n<p>你可以使用 AJAX 最主要的两个特性做下列事：</p>\n<ul>\n  <li>在不重新加载页面的情况下发送请求给服务器。</li>\n  <li>接受并使用从服务器发来的数据。</li>\n</ul>"}},{"type":"prose","value":{"id":"step_1_–_怎样发送_http_请求","title":"Step 1 – 怎样发送 http 请求","isH3":false,"content":"<p>为了使用 JavaScript 向服务器发送一个 http 请求，你需要一个包含必要函数功能的对象实例。这就是为什么会有 <code>XMLHttpRequest</code> 的原因。这是 IE 浏览器的 ActiveX 对象 <code>XMLHTTP</code>的前身。随后 Mozilla，Safari 和其他浏览器也都实现了类似的方法，被称为 <code>XMLHttpRequest</code> 。同时，微软也实现了 XMLHttpRequest 方法。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Old compatibility code, no longer needed.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>XMLHttpRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Mozilla, Safari, IE7+ ...</span>\n    httpRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>ActiveXObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// IE 6 and older</span>\n    httpRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ActiveXObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Microsoft.XMLHTTP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 面代码只是简单版的如何创建一个 XMLHttp 实例。更实际的例子，请看本篇文章的 step 3。**</p>\n</div>\n<p>发送一个请求后，你会收到响应。在这一阶段，你要告诉 XMLHttp 请求对象是由哪一个 JavaScript 函数处理响应，在设置了对象的 <code>onreadystatechange</code> 属性后给他命名，当请求状态改变时调用函数。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>httpRequest<span class=\"token punctuation\">.</span>onreadystatechange <span class=\"token operator\">=</span> nameOfTheFunction<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>要注意的是，函数名后没有参数，因为你把一个引用赋值给了函数，而不是真正的调用了它。此外，如果不使用函数名的方式，你还可以用 JavaScript 的匿名函数响应处理的动作，就像下面这样：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>httpRequest<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Process the server response here.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>接下来，声明当你接到响应后要做什么，你要发送一个实际的请求，通过调用 HTTP 请求对象的 <code>open()</code> 和 <code>send()</code> 方法，像下面这样：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>httpRequest<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://www.example.org/some.file'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhttpRequest<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<ul>\n  <li><code>open()</code> 的第一个参数是 HTTP 请求方法 - 有 GET，POST，HEAD 以及服务器支持的其他方法。保证这些方法一定要是大写字母，否则其他一些浏览器（比如 FireFox）可能无法处理这个请求。更多关于 HTTP 的请求方法，可以查看 <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\" class=\"external\" rel=\" noopener\">W3C specs</a>。</li>\n  <li>第二个参数是你要发送的 URL。由于安全原因，默认不能调用第三方 URL 域名。确保你在页面中使用的是正确的域名，否则在调用 <code>open()</code> 方法是会有 \"permission denied\" 错误提示。一个容易犯的错误是你企图通过 <code>domain.tld</code> 访问网站，而不是使用 <code>www.domain.tld</code>。如果你真的需要向另一个域名发送请求，可以查看 <a href=\"/en-US/HTTP_access_control\">HTTP access control</a>。</li>\n  <li>第三个参数是可选的，用于设置请求是否是异步的。如果设为 <code>true</code> (默认值)，即开启异步，JavaScript 就不会在此语句阻塞，使得用户能在服务器还没有响应的情况下与页面进行交互。</li>\n</ul>\n<p><code>send()</code> 方法的参数可以是任何你想发送给服务器的内容，如果是 <code>POST</code> 请求的话。发送表单数据时应该用服务器可以解析的格式，像查询语句：</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">\"name=value&amp;anothername=\"+encodeURIComponent(myVar)+\"&amp;so=on\"\n</pre></div>\n<p>或者其他格式，类似 <code>multipart/form-data</code>，JSON，XML 等。</p>\n<p>如果你使用 POST 数据，那就需要设置请求的 MIME 类型。比如，在调用 <code>send()</code> 方法获取表单数据前要有下面这个：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>httpRequest<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/x-www-form-urlencoded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"step_2_–_处理服务器响应","title":"Step 2 – 处理服务器响应","isH3":false,"content":"<p>在发送请求时，你提供的 JavaScript 函数名负责处理响应：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>httpRequest<span class=\"token punctuation\">.</span>onreadystatechange <span class=\"token operator\">=</span> nameOfTheFunction<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这个函数应该做什么？首先，函数要检查请求的状态。如果状态的值是 <code>XMLHttpRequest.DONE</code> （对应的值是 4），意味着服务器响应收到了并且是没问题的，然后就可以继续执行。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> XMLHttpRequest<span class=\"token punctuation\">.</span><span class=\"token constant\">DONE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Everything is good, the response was received.</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Not ready yet.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>全部 readyState 状态值都在 <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest#properties\">XMLHTTPRequest.readyState</a>，如下也是：</p>\n<ul>\n  <li>0 (未初始化) or (<strong>请求还未初始化</strong>)</li>\n  <li>1 (正在加载) or (<strong>已建立服务器链接</strong>)</li>\n  <li>2 (加载成功) or (<strong>请求已接受</strong>)</li>\n  <li>3 (交互) or (<strong>正在处理请求</strong>)</li>\n  <li>4 (完成) or (<strong>请求已完成并且响应已准备好</strong>)</li>\n</ul>\n<p>(<a href=\"http://msdn.microsoft.com/en-us//library/ms534361%28en-us,VS.85%29.aspx\" class=\"external\" rel=\" noopener\">Source</a>)</p>\n<p>接下来，点击 HTTP 响应的 <a href=\"/zh-CN/HTTP#HTTP_Response_Codes\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">response code</a>。可能的响应码都已经列在 <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\" class=\"external\" rel=\" noopener\">W3C</a>这个列表里。在下面的例子中，我们通过检查响应码 <code>200 OK</code> 判断 AJAX 有没有成功。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Perfect!</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// There was a problem with the request.</span>\n    <span class=\"token comment\">// For example, the response may have a 404 (Not Found)</span>\n    <span class=\"token comment\">// or 500 (Internal Server Error) response code.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>在检查完请求状态和 HTTP 响应码后，你就可以用服务器返回的数据做任何你想做的了。你有两个方法去访问这些数据：</p>\n<ul>\n  <li><code>httpRequest.responseText</code> – 服务器以文本字符的形式返回</li>\n  <li><code>httpRequest.responseXML</code> – 以 XMLDocument 对象方式返回，之后就可以使用 JavaScript 来处理</li>\n</ul>\n<p>注意上面这一步只在你发起异步请求时有效（即 <code>open()</code> 的第三个参数未特别指定或设为 <code>true</code>）。如果你你发起的是<strong>同步</strong>请求则不必使用函数，但是非常不推荐这样子做，它的用户体验很糟糕。</p>"}},{"type":"prose","value":{"id":"step_3_–_一个简单的例子","title":"Step 3 – 一个简单的例子","isH3":false,"content":"<p>让我们把所有的知识都集中起来做一个简单的 HTTP 请求。这个 JavaScript 会请求一个 HTML 文档 <code>test.html</code>，包含 \"I'm a test\" 内容。然后我们 <code>alert()</code> 响应的内容。注意这个例子我们只是用了 JavaScript，没有用 jQuery。而且，HTML，XML 和 PHP 文件都要放在用一个目录下。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ajaxButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Make a request<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> httpRequest<span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ajaxButton\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> makeRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">makeRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    httpRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>httpRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Giving up :( Cannot create an XMLHTTP instance'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    httpRequest<span class=\"token punctuation\">.</span>onreadystatechange <span class=\"token operator\">=</span> alertContents<span class=\"token punctuation\">;</span>\n    httpRequest<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    httpRequest<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">alertContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> XMLHttpRequest<span class=\"token punctuation\">.</span><span class=\"token constant\">DONE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'There was a problem with the request.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>在这个例子中：</p>\n<ul>\n  <li>用户点击“Make a request”按钮；</li>\n  <li>事件处理调用 <code>makeRequest()</code> 函数；</li>\n  <li>请求已通过然后（<code>onreadystatechange</code>）传给 <code>alertContents()</code> 执行。</li>\n  <li><code>alertContents()</code> 检查返回的响应是否 OK，然后 <code>alert()</code> <code>test.html</code> 文件内容。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 如果你向一个代码片段发送请求，将返回 XML，而不是静态 XML 文件，在 IE 浏览器上则必须要设置响应头才能正常工作。如果不设置响应头为 <code>Content-Type:application/xml</code> ，IE 浏览器会在你访问 XML 元素时抛出“Object Expected”错误。</p>\n</div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 如果不设置响应头 <code>Cache-Control: no-cache</code> 浏览器将会把响应缓存下来而且再也无法重新提交请求。你也可以添加一个总是不同的 GET 参数，比如时间戳或者随机数 (详情见 <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#bypassing_the_cache\">bypassing the cache</a>)</p>\n</div>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>备注：</strong> 如果变量 <code>httpRequest</code> 在全局范围内使用，它会在 <code>makeRequest()</code> 函数中被相互覆盖，从而导致资源竞争。为了避免这个情况，请在包含 AJAX 函数的<a href=\"/zh-CN/docs/Web/JavaScript/Closures\">闭包</a>中声明 <code>httpRequest</code> 变量。</p>\n</div>\n<p>在通信错误的事件中（例如服务器宕机），在访问响应状态 onreadystatechange 方法中会抛出一个例外。为了缓和这种情况，则可以使用 <code>try...catch</code> 把 <code>if...then</code> 语句包裹起来。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">alertContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> XMLHttpRequest<span class=\"token punctuation\">.</span><span class=\"token constant\">DONE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'There was a problem with the request.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span> e <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Caught Exception: '</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"step_4_–_处理_xml_响应","title":"Step 4 – 处理 XML 响应","isH3":false,"content":"<p>在上一个例子中，在收到 HTTP 请求的响应后我们会请求对象的 <code>responseText</code> 属性，包含 <code>test.html</code> 文件的内容。现在我们试试 <code>responseXML</code> 属性。</p>\n<p>首先，我们创建一个稍后将要请求的有效的 XML 文档。文档（<code>test.html</code>）包含以下内容：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token prolog\">&lt;?xml version=\"1.0\" ?&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>root</span><span class=\"token punctuation\">&gt;</span></span>\n    I'm a test.\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>root</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>在脚本里我们只需要把请求行改为：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>...\nonclick=\"makeRequest('test.xml')\"&gt;\n...\n</code></pre></div>\n<p>然后在 <code>alertContents()</code> 里，我们把 <code>alert(httpRequest.responseText)</code> 改为：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> xmldoc <span class=\"token operator\">=</span> httpRequest<span class=\"token punctuation\">.</span>responseXML<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> root_node <span class=\"token operator\">=</span> xmldoc<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>root_node<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这部分代码采用 <code>responseXML</code> 提供的 <code>XMLDocument</code> 对象，并使用 DOM 方法访问 XML 文档中包含的一些数据。你可以在<a href=\"https://www.w3clubs.com/mozdev/test.xml\" class=\"external\" rel=\" noopener\">这里</a>查看 <code>test.xml</code> 并且在<a href=\"https://www.w3clubs.com/mozdev/httprequest_test_xml.html\" class=\"external\" rel=\" noopener\">这里</a>更新测试代码。</p>"}},{"type":"prose","value":{"id":"step_5_–_处理数据","title":"Step 5 – 处理数据","isH3":false,"content":"<p>最后，我们发送一个数据给服务器并收到响应。这次我们用 JavaScript 请求动态页面，<code>test.php</code> 并返回一个计算后的字符串 - “Hello, [user date]”，并用 <code>alert()</code> 出来。</p>\n<p>首先要添加一个文本到 HTML 中以方便用户输入名字：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span>Your name:\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ajaxTextbox<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ajaxButton<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span> <span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> underline</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>\n  Make a request\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>还要添加事件处理程序，从表单中获取用户数据连同服务器端的 UTL 一并发送给 makeRequest() 函数：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ajaxButton\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> userName <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ajaxTextbox\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">makeRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.php'</span><span class=\"token punctuation\">,</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>我们还要修改 <code>makeRequest()</code> 让它接受用户数据并将其发给服务器。把请求方法从 <code>GET</code> 改为 <code>POST</code>，把数据作为参数让 <code>httpRequest.send()</code> 调用。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">function</span> <span class=\"token function\">makeRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> userName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token operator\">...</span>\n\n    httpRequest<span class=\"token punctuation\">.</span>onreadystatechange <span class=\"token operator\">=</span> alertContents<span class=\"token punctuation\">;</span>\n    httpRequest<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    httpRequest<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/x-www-form-urlencoded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    httpRequest<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'userName='</span> <span class=\"token operator\">+</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>如果这就是服务器返回的全部内容，<code>alertContents()</code> 函数可以使用 step 3 中的相同函数写。可是，服务器会返回计算后的内容和原内容。所以，如果用户输入“Jane”在输入框中，那服务器就会返回如下内容：</p>\n<p><code>{\"userData\":\"Jane\",\"computedString\":\"Hi, Jane!\"}</code></p>\n<p>为了在 <code>alertContents()</code> 中使用这个数据，我们可不能只是 alert <code>responseText</code> ，我们要解析它并 alert <code>computedString</code>，我们想要的属性：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">alertContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> XMLHttpRequest<span class=\"token punctuation\">.</span><span class=\"token constant\">DONE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> response <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>httpRequest<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>computedString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'There was a problem with the request.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>test.php 文件应该包含以下内容：</code></p>\n<div class=\"code-example\"><pre class=\"brush: php notranslate\"><code><span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'userName'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'userName'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token string single-quoted-string\">'no name'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$computedString</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"Hi, \"</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'userName'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'computedString'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$computedString</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>想获取更多 DOM 方法，可以查看 <code>Mozilla's DOM implementation</code> 文档。</p>"}}],"toc":[{"text":"什么是 AJAX？","id":"什么是_ajax？"},{"text":"Step 1 – 怎样发送 http 请求","id":"step_1_–_怎样发送_http_请求"},{"text":"Step 2 – 处理服务器响应","id":"step_2_–_处理服务器响应"},{"text":"Step 3 – 一个简单的例子","id":"step_3_–_一个简单的例子"},{"text":"Step 4 – 处理 XML 响应","id":"step_4_–_处理_xml_响应"},{"text":"Step 5 – 处理数据","id":"step_5_–_处理数据"}],"summary":"这篇文章旨在帮助你了解 AJAX 基础，并提供两个可上手的简单案例供你学习。","popularity":0.0007,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Getting Started","locale":"en-US","native":"English (US)"},{"title":"Primeros Pasos","locale":"es","native":"Español"},{"title":"Premiers pas","locale":"fr","native":"Français"},{"title":"始めましょう","locale":"ja","native":"日本語"},{"title":"Ajax 시작하기","locale":"ko","native":"한국어"},{"title":"Primeiros passos","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"С чего начать","locale":"ru","native":"Русский"},{"title":"入門篇","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"zh-cn/web/guide/ajax/getting_started","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/guide/ajax/getting_started/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/Guide","title":"Web 开发者指南"},{"uri":"/zh-CN/docs/Web/Guide/AJAX","title":"Ajax"},{"uri":"/zh-CN/docs/Web/Guide/AJAX/Getting_Started","title":"Getting Started"}],"pageTitle":"Getting Started - Web 开发者指南 | MDN","noIndexing":false}}