{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Parsing and serializing XML","mdn_url":"/zh-CN/docs/Web/Guide/Parsing_and_serializing_XML","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>有时，你可能需要解析 <a href=\"/zh-CN/docs/Glossary/XML\">XML</a> 内容，并把它转换为 <a href=\"/zh-CN/docs/Glossary/DOM\">DOM</a> 树，或者，反过来将现有的 DOM 树序列化成 XML。在本文中，我们将查看 Web 平台提供的对象，以便轻松地序列化和解析 XML 的常见任务。</p>\n<dl>\n  <dt id=\"xmlserializer\"><a href=\"/zh-CN/docs/Web/API/XMLSerializer\"><code>XMLSerializer</code></a></dt>\n  <dd>\n    <p>序列化 DOM 树，把它们转换成包含 XML 的字符串。</p>\n  </dd>\n  <dt id=\"domparser\"><a href=\"/zh-CN/docs/Web/API/DOMParser\"><code>DOMParser</code></a></dt>\n  <dd>\n    <p>通过解析一个包含 XML 的字符串来构建 DOM 树，返回一个基于输入数据的适当的 <a href=\"/zh-CN/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a> 或者是 <a href=\"/zh-CN/docs/Web/API/Document\"><code>Document</code></a>。</p>\n  </dd>\n  <dt id=\"xmlhttprequest\"><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a></dt>\n  <dd>\n    <p>从一个 URL 中加载内容；XML 的内容被作为一个带有内建 XML 的 DOM 树的 XML <a href=\"/zh-CN/docs/Web/API/Document\"><code>Document</code></a> 对象返回。</p>\n  </dd>\n  <dt id=\"xpath\"><a href=\"/zh-CN/docs/Web/XPath\">XPath</a></dt>\n  <dd>\n    <p>一种创建包含 XML 文档特定部分的地址，并基于这些地址进行 XML 节点定位的字符串的技术。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"创建一个_xml_文档","title":"创建一个 XML 文档","isH3":false,"content":"<p>使用以下方法来创建一个 XML 文档（该文档是 <a href=\"/zh-CN/docs/Web/API/Document\"><code>Document</code></a> 的一个例子）。</p>"}},{"type":"prose","value":{"id":"把字符串解析成_dom_树","title":"把字符串解析成 DOM 树","isH3":true,"content":"<p>下面这个例子使用 <a href=\"/zh-CN/docs/Web/API/DOMParser\"><code>DOMParser</code></a> 把字符串中的 XML 片段转换为 DOM 树：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> sMyString <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;a id=\"a\"&gt;&lt;b id=\"b\"&gt;hey!&lt;/b&gt;&lt;/a&gt;'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> oParser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DOMParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> oDOM <span class=\"token operator\">=</span> oParser<span class=\"token punctuation\">.</span><span class=\"token function\">parseFromString</span><span class=\"token punctuation\">(</span>sMyString<span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// print the name of the root element or error message</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>oDOM<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>nodeName <span class=\"token operator\">==</span> <span class=\"token string\">\"parsererror\"</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"error while parsing\"</span> <span class=\"token operator\">:</span> oDOM<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"把可寻址的_url_资源解析成_dom_树","title":"把可寻址的 URL 资源解析成 DOM 树","isH3":true,"content":"<h4 id=\"使用_xmlhttprequest\">使用 XMLHttpRequest</h4>\n<p>下列示例代码读取一个可寻址的 URL 资源文件并将其解析成 DOM 树：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseXML<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error while getting XML.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"example.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">\"document\"</span><span class=\"token punctuation\">;</span>\nxhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在 <code>xhr</code> 对象 <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest/responseXML\" title=\"responseXML\"><code>responseXML</code></a> 域中返回的值 是一个通过解析 XML 构造的 <a href=\"/zh-CN/docs/Web/API/Document\"><code>Document</code></a>。</p>\n<p>如果这个文档是 <a href=\"/zh-CN/docs/Glossary/HTML\">HTML</a>，上面实例代码将会返回一个 <a href=\"/zh-CN/docs/Web/API/Document\"><code>Document</code></a>。如果它是 XML，那获取的结果对象实际上是一个 <a href=\"/zh-CN/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a>。这两种类型实质上是一样的; 不同点大部分是历史遗留的，尽管区分它们也会有一些实际好处。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 事实上，<a href=\"/zh-CN/docs/Web/API/HTMLDocument\"><code>HTMLDocument</code></a> 也是一个接口，但是它不必是一个独立的类型。在一些浏览器上是，但在另外一些浏览器上它仅仅是 <code>Document</code> 接口的别名。</p>\n</div>"}},{"type":"prose","value":{"id":"序列化一个_xml_文档","title":"序列化一个 XML 文档","isH3":false,"content":"<p>被给一个 <a href=\"/zh-CN/docs/Web/API/Document\"><code>Document</code></a>，你可以使用 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLSerializer/serializeToString\"><code>XMLSerializer.serializeToString()</code> <small>(en-US)</small></a> 方法把文档的 DOM 树序列化为 XML。</p>\n<p>使用下面的方法来序列化在先前章节中创建的 XML 文档内容。</p>"}},{"type":"prose","value":{"id":"把_dom_树_序列化成字符串","title":"把 DOM 树 序列化成字符串","isH3":true,"content":"<p>首先，使用<a href=\"/zh-CN/docs/Web/API/Document_Object_Model/How_to_create_a_DOM_tree\">如何创建一个 DOM 树</a>中的方法构建一个 DOM 树。也可以使用从 <a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> 中获得的 DOM 树。</p>\n<p>为了序列化 DOM 树的 <code>doc</code> 为 XML 文档，调用 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/XMLSerializer/serializeToString\"><code>XMLSerializer.serializeToString()</code> <small>(en-US)</small></a>：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> oSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> sXML <span class=\"token operator\">=</span> oSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">serializeToString</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"序列化_html_文档","title":"序列化 HTML 文档","isH3":true,"content":"<p>如果你手上的 DOM 是一个 HTML 文档，你可以使用 <code>serializeToString()</code>，但是也有一个更简单的选择：直接用 <a href=\"/zh-CN/docs/Web/API/Element/innerHTML\"><code>Element.innerHTML</code></a> 属性（如果你仅仅想得到指定节点的后代的话）或者是如果你想得到节点本身及它所有的后代的话，你可以使用 <a href=\"/zh-CN/docs/Web/API/Element/outerHTML\"><code>Element.outerHTML</code></a> 属性。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> docHTML <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>因此，<code>docHTML</code> is 一个包含 HTML 内容的文档的 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>DOMString</code></a>; 也就是说，<a href=\"/zh-CN/docs/Web/HTML/Element/body\"><code>&lt;body&gt;</code></a> 元素的内容。</p>\n<p>你可以使用以下代码得到 <code>&lt;body&gt;</code> 和它的后代对应的 HTML：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> docHTML <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>outerHTML<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"参见","title":"参见","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-CN/docs/Web/XPath\">XPath</a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a></li>\n  <li><a href=\"/zh-CN/docs/Web/API/Document\"><code>Document</code></a>、<a href=\"/zh-CN/docs/Web/API/XMLDocument\"><code>XMLDocument</code></a>，和 <a href=\"/zh-CN/docs/Web/API/HTMLDocument\"><code>HTMLDocument</code></a></li>\n</ul>"}}],"toc":[{"text":"创建一个 XML 文档","id":"创建一个_xml_文档"},{"text":"序列化一个 XML 文档","id":"序列化一个_xml_文档"},{"text":"参见","id":"参见"}],"summary":"有时，你可能需要解析 XML 内容，并把它转换为 DOM 树，或者，反过来将现有的 DOM 树序列化成 XML。在本文中，我们将查看 Web 平台提供的对象，以便轻松地序列化和解析 XML 的常见任务。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Parsing and serializing XML","locale":"en-US","native":"English (US)"},{"title":"Convertir código a cadena de texto (serializing) y visceversa (parsing) a un  XML","locale":"es","native":"Español"},{"title":"XML のパースとシリアライズ","locale":"ja","native":"日本語"},{"title":"XML 파싱 및 직렬화","locale":"ko","native":"한국어"},{"title":"Прямая и обратная обработка XML","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/guide/parsing_and_serializing_xml","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/guide/parsing_and_serializing_xml/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/Guide","title":"Web 开发者指南"},{"uri":"/zh-CN/docs/Web/Guide/Parsing_and_serializing_XML","title":"Parsing and serializing XML"}],"pageTitle":"Parsing and serializing XML - Web 开发者指南 | MDN","noIndexing":false}}