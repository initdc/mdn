{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"实时传输 Web 音频与视频","mdn_url":"/zh-CN/docs/Web/Guide/Audio_and_video_delivery/Live_streaming_web_audio_and_video","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>实时流技术经常应用在一些现场输出的转播活动，类似体育活动、演唱会和更平常的电视播放及广播节目。这通常称为流媒体，实时流就是将媒体“实时”传输到计算机和设备的过程。这是一个包含多个元素的、非常复杂且较为新生的主题，所以我们会通过这篇文章，向你介绍它并让你知道如何开始。</p>\n<p>将媒体传输到浏览器的关键考虑因素是，我们不是在播放一个大小明确的文件，而是在转播一个即时创建的文件，并且它没有预先确定的开始或结束位置。</p>"}},{"type":"prose","value":{"id":"流媒体与静态媒体的主要区别","title":"流媒体与静态媒体的主要区别","isH3":false,"content":"<p>在这里，无论是 mp3 还是 WebM 文件，我们都称之为静态媒体。这些文件存放在服务端，可以像其他文件那样传输到浏览器端。这通常被称为渐进式下载。</p>\n<p>跟静态媒体文件比起来，实时流媒体没有有限的开始和结束时间，它通常是一种自适应的、从服务端向下传输到浏览器端的数据流（见下文）。通常我们需要不同格式和特定的服务端软件来实现这个。</p>"}},{"type":"prose","value":{"id":"自适应流","title":"自适应流","isH3":false,"content":"<p>实时流最优先考虑的事项之一就是让播放器保持与流同步：自适应流是一种可以在低带宽下执行此操作的技术。这种方法就是通过监控数据传输速率，如果速率慢，跟不上，我们就降低到低带宽（因此质量较低）的数据流。为了拥有这种能力，我们需要使用能实现该功能的数据格式。实时流格式通常是把流分割成许多不同质量和比特率的小片段，以此来实现自适应流的特性。</p>"}},{"type":"prose","value":{"id":"流式音频与视频的点播","title":"流式音频与视频的点播","isH3":false,"content":"<p>流式技术不只是用于直播。它也能用来替换传统的渐进式下载点播音频和视频：</p>\n<p>优点如下：</p>\n<ul>\n  <li>延迟通常较低，所以媒体可以快速播放</li>\n  <li>自适应流可以在不同设备上获得更好的体验</li>\n  <li>媒体实时下载，提高带宽效率</li>\n</ul>"}},{"type":"prose","value":{"id":"流式协议","title":"流式协议","isH3":false,"content":"<p>静态媒体通常是使用 HTTP 协议传输，但是自适应流媒体却有很多种协议，让我们看一下这些选择。</p>"}},{"type":"prose","value":{"id":"http","title":"HTTP","isH3":true,"content":"<p>目前来说，HTTP 是媒体点播或直播最常使用的协议。</p>"}},{"type":"prose","value":{"id":"rtmp","title":"RTMP","isH3":true,"content":"<p>实时消息协议 (RTMP) 是由 Macromedia（即现在的 Adobe）公司研发的专有协议，并且它支持 Adobe Flash 插件。RTMP 共有 RTMPE（加密的）、RTMPS（基于 SSL/TLS 的安全协议）和 RTMPT（封装成 HTTP 请求）这几种形式</p>"}},{"type":"prose","value":{"id":"rtsp","title":"RTSP","isH3":true,"content":"<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 实时流协议 (RTSP) 控制媒体在两端传输的会话，且同时使用实时传输协议 (RTP) 和实时控制协议 (RTCP) 来传输媒体流。将 RTP 与 RTCP 结合使用可以实现自适应流。目前大部分浏览器还无法原生支持，但请留意 <a href=\"https://www.mozilla.org/en-US/firefox/os/notes/1.3/\" class=\"external\" rel=\" noopener\">Firefox OS 1.3 支持 RTSP</a>。</p>\n  <p>某些厂商实现了专有的传输协议，类似 RealNetworks 以及他们的真实数据传输 (RDT)。</p>\n</div>"}},{"type":"prose","value":{"id":"rtsp_2.0","title":"RTSP 2.0","isH3":true,"content":"<p>RTSP 2.0 目前处于开发阶段，并且无法向后兼容 RSTP 1.0。</p>\n<div class=\"notecard warning\" id=\"sect2\">\n  <p><strong>警告：</strong> 虽然 <a href=\"/zh-CN/docs/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a> 与 <a href=\"/zh-CN/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a> 标签与协议无关，但是目前没有浏览器可以在无插件的情况下支持除了 HTTP 外的协议，尽管这种局面可能会有所转变，但除了 HTTP 以外的协议可能会被防火墙或代理服务器拦截。</p>\n</div>"}},{"type":"prose","value":{"id":"使用流式协议","title":"使用流式协议","isH3":false,"content":"<p>如果你习惯于通过 HTTP 传输媒体，那么使用其它的协议也会让你感到熟悉。</p>\n<p>举个例子：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rtsp://myhost.com/mymedia.format<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token comment\">&lt;!-- Fallback here --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"媒体源扩展_mse","title":"媒体源扩展 (MSE)","isH3":false,"content":"<p><a href=\"https://dvcs.w3.org/hg/html-media/raw-file/tip/media-source/media-source.html\" class=\"external\" rel=\" noopener\">Media Source Extensions</a> 是一个 W3C 的工作草案，计划用来扩展 <a href=\"/zh-CN/docs/Web/API/HTMLMediaElement\"><code>HTMLMediaElement</code></a> 使其支持使用 JavaScript 来生成用于播放的媒体流。使用 JavaScript 来生成流对于自适应流和时移实时流来说非常好用。</p>\n<p>比如，<a href=\"https://web.archive.org/web/20170504035455/https://msopentech.com/blog/2014/01/03/streaming_video_player/\" class=\"external\" rel=\" noopener\">在卸载 MSE 解码器后，你可以通过 JavaScript 实现 MPEG-DASH</a>.</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong> 时移是在直播流发生后使用实时流的过程。</p>\n</div>"}},{"type":"prose","value":{"id":"视频流文件格式","title":"视频流文件格式","isH3":false,"content":"<p>一些基于 HTTP 的实时流视频格式开始得到跨浏览器支持。</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>备注：</strong> 你可以通过 <a href=\"/en-US/docs/Web/Guide/Audio_and_video_delivery/Setting_up_adaptive_streaming_media_sources\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">设置自适应流媒体源 (en-US)</a> 找到在 web 中使用的 HLS 和 MPEG-DASH 的编码指南。</p>\n</div>"}},{"type":"prose","value":{"id":"mpeg-dash","title":"MPEG-DASH","isH3":true,"content":"<p>DASH 意即基于 HTTP 的动态自适应流，最近已经被 Chrome、以及运行在 Window 8.1 的 IE 11 浏览器所支持。它依赖于媒体源扩展 (MSE)，这些扩展被<a href=\"https://github.com/Dash-Industry-Forum/dash.js/\" class=\"external\" rel=\" noopener\">DASH.js</a>之类的 JavaScript 库所使用。这种方式允许我们通过 XHR 下载视频流的数据块，并且将它“添加”到 <a href=\"/zh-CN/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a>元素正在播放的流中。正因如此，如果我们检测到网络缓慢，我们可以从下一段开始请求低质量（较小）的数据块。这种技术也允许添加广告片段到流中。</p>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>备注：</strong> 你也可以 <a href=\"http://wiki.webmproject.org/adaptive-streaming/webm-dash-specification\" class=\"external\" rel=\" noopener\">将 MPEG-DASH 自适应流式系统与 WebM 一起使用</a>.</p>\n</div>"}},{"type":"prose","value":{"id":"hls","title":"HLS","isH3":true,"content":"<p>HLS(HTTP Live Streaming) 是由苹果公司研发的协议，支持在 IOS、Safari 及安卓上最新版本的浏览器/Chrome 浏览器。HLS 也是自适应的。</p>\n<p>HLS 也能被 JavaScript 解码，这意味着我们能在最新版本的 Firefox，Chrome 和 IE10+ 浏览器上使用。看这个 <a href=\"https://github.com/dailymotion/hls.js\" class=\"external\" rel=\" noopener\">HTTP Live Streaming JavaScript player</a>.</p>\n<p>在流式会话的开始阶段， <a href=\"https://en.wikipedia.org/wiki/M3U8#Extended_M3U_directives\" class=\"external\" rel=\" noopener\">extended M3U (m3u8) playlist</a> 已经下载完成。它包含了所提供的各个子流的元数据。</p>"}},{"type":"prose","value":{"id":"流式文件格式支持","title":"流式文件格式支持","isH3":true,"content":"<table>\n  <thead>\n    <tr>\n      <th>Browser</th>\n      <th>DASH</th>\n      <th>HLS</th>\n      <th>Opus (Audio)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Firefox 32</td>\n      <td>✓ [1]</td>\n      <td>✓ [2]</td>\n      <td>✓ 14+</td>\n    </tr>\n    <tr>\n      <td>Safari 6+</td>\n      <td></td>\n      <td>✓</td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>Chrome 24+</td>\n      <td>✓ [1]</td>\n      <td>✓</td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>Opera 20+</td>\n      <td>✓ [1]</td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>Internet Explorer 10+</td>\n      <td>✓ 11</td>\n      <td>✓ [2]</td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>Firefox Mobile</td>\n      <td>✓</td>\n      <td>✓</td>\n      <td>✓</td>\n    </tr>\n    <tr>\n      <td>Safari iOS6+</td>\n      <td></td>\n      <td>✓</td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>Chrome Mobile</td>\n      <td>✓</td>\n      <td>✓ [2]</td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>Opera Mobile</td>\n      <td>✓ [1]</td>\n      <td>✓</td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>Internet Explorer Mobile</td>\n      <td>✓ 11</td>\n      <td>✓ [2]</td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>Android</td>\n      <td>✓</td>\n      <td></td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>\n<p>[1] 使用 JavaScript 与 MSE</p>\n<p>[2] 使用 JavaScript 与跨域代理</p>"}},{"type":"prose","value":{"id":"视频备选方案","title":"视频备选方案","isH3":true,"content":"<p>DASH 与 HLS 可以在很大一部分主流浏览器上获得支持，但我们仍需要备选方案来支持其余的浏览器。</p>\n<p>一个流行的方案是通过 Flash 播放器来支持 RTMP。当然，这就有个问题，我们需要编码三个不同的格式。</p>"}},{"type":"prose","value":{"id":"音频流文件格式","title":"音频流文件格式","isH3":false,"content":"<p>目前也有一些音频格式开始在不同浏览器上获得支持。</p>"}},{"type":"prose","value":{"id":"opus","title":"Opus","isH3":true,"content":"<p>Opus 是一个无版权的开放格式，针对不同类型文件使用不同的比特率来优化音频质量。音乐或演讲会可以通过不同方式来优化，Opus 就借助了 SILK 和 CELT 来实现。</p>\n<p>目前，Opus 被桌面端和移动端的 Firefox 以及桌面端的 Chrome 和 Opera 浏览器所支持。</p>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>备注：</strong> 对于浏览器端实现 WebRTC 功能来说，<a href=\"https://datatracker.ietf.org/doc/html/draft-ietf-rtcweb-audio-05\" class=\"external\" rel=\" noopener\">Opus 是必须要用到的格式</a>。</p>\n</div>"}},{"type":"prose","value":{"id":"mp3_aac_ogg_vorbis","title":"MP3, AAC, Ogg Vorbis","isH3":true,"content":"<p>大部分通用的音频格式能够通过特殊的服务端技术进行传输。</p>\n<div class=\"notecard note\" id=\"sect7\">\n  <p><strong>备注：</strong> 相对于视频来说，音频没有键帧，可能更容易通过非流式格式来传输。</p>\n</div>"}},{"type":"prose","value":{"id":"服务端流式技术","title":"服务端流式技术","isH3":false,"content":"<p>为了实时传输音频和视频，你需要在你的服务器上运行特定的流式软件，或者使用第三方服务。</p>"}},{"type":"prose","value":{"id":"gstreamer","title":"GStreamer","isH3":true,"content":"<p><a href=\"https://gstreamer.freedesktop.org/\" class=\"external\" rel=\" noopener\">GStreamer</a> 是一个开源的跨平台的多媒体框架，它可以让你创建各种媒体处理组件，包括流式组件。GStreamer 通过它的插件系统，支持了一百多种编码 (包括 MPEG-1, MPEG-2, MPEG-4, H.261, H.263, H.264, RealVideo, MP3, WMV，和 FLV。)</p>\n<p>GStreamer 的插件如 <a href=\"https://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-good-plugins/html/gst-plugins-good-plugins-plugin-soup.html\" class=\"external\" rel=\" noopener\">souphttpclientsink</a> 和 <a href=\"https://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-good/html/gst-plugins-good-plugins-shout2send.html\" class=\"external\" rel=\" noopener\">shout2send</a> 通过 HTTP 来传输媒体。你也可以集成 Python 的 Twisted 框架或者使用一些类似 <a href=\"http://www.flumotion.net/features/\" class=\"external\" rel=\" noopener\">Flumotion</a> (open source streaming software) 的东西。</p>\n<p>至于传输 RTMP，你可以使用 <a href=\"https://github.com/arut/nginx-rtmp-module\" class=\"external\" rel=\" noopener\">Nginx RTMP Module</a>。</p>"}},{"type":"prose","value":{"id":"shoutcast","title":"SHOUTcast","isH3":true,"content":"<p><a href=\"https://en.wikipedia.org/wiki/SHOUTcast\" class=\"external\" rel=\" noopener\">SHOUTcast</a> 是一种跨平台的，针对流式媒体的专有技术。它由 Nullsoft 开发，可以播放 MP3 或 AAC 格式的数字音频内容。对于 Web 端使用，SHOUTcast 通过 HTTP 传输流。</p>\n<div class=\"notecard note\" id=\"sect8\">\n  <p><strong>备注：</strong> <a href=\"https://stackoverflow.com/questions/2743279/how-could-i-play-a-shoutcast-icecast-stream-using-html5\" class=\"external\" rel=\" noopener\">SHOUTcast 的 URL 可能需要加上分号</a>.</p>\n</div>"}},{"type":"prose","value":{"id":"icecast","title":"Icecast","isH3":true,"content":"<p><a href=\"https://www.icecast.org/\" class=\"external\" rel=\" noopener\">Icecast</a> 服务是一种针对流式媒体的开源技术。它由 <a href=\"https://www.xiph.org/\" class=\"external\" rel=\" noopener\">Xiph.org Foundation</a> 进行维护，通过 SHOUTcast 协议来传输 Ogg Vorbis/Theora 以及 MP3 和 AAC 格式。</p>\n<div class=\"notecard note\" id=\"sect9\">\n  <p><strong>备注：</strong> SHOUTcast 和 Icecast 是最流行的已确立的技术之一，但也有 <a href=\"https://en.wikipedia.org/wiki/List_of_streaming_media_systems#Servers\" class=\"external\" rel=\" noopener\">更多流媒体系统可用</a>.</p>\n</div>"}},{"type":"prose","value":{"id":"流式服务","title":"流式服务","isH3":true,"content":"<p>虽然你可以安装类似 GStreamer，SHOUTcast 和 lcecast 的软件，但也可以从 <a href=\"https://en.wikipedia.org/wiki/Comparison_of_streaming_media_systems\" class=\"external\" rel=\" noopener\">第三方流式服务</a> 中找到大量的服务帮助你完成工作。</p>"}},{"type":"prose","value":{"id":"参见","title":"参见","isH3":false,"content":"<ul>\n  <li><a href=\"https://en.wikipedia.org/wiki/HTTP_Live_Streaming\" class=\"external\" rel=\" noopener\">HTTP 实时流式传输</a></li>\n  <li><a href=\"https://www.jwplayer.com/html5/hls/\" class=\"external\" rel=\" noopener\">HLS 浏览器支持</a></li>\n  <li><a href=\"https://github.com/RReverser/mpegts\" class=\"external\" rel=\" noopener\">基于 HTTP Live Streaming 的 JavaScript 播放器</a></li>\n  <li><a href=\"https://larryjordan.com/articles/basics-of-http-live-streaming/\" class=\"external\" rel=\" noopener\">HTTP Live Streaming 的基础知识</a></li>\n  <li><a href=\"/zh-CN/docs/Web/Media/DASH_Adaptive_Streaming_for_HTML_5_Video\">用于 HTML 5 视频的 DASH 自适应流</a></li>\n  <li><a href=\"https://en.wikipedia.org/wiki/Dynamic_Adaptive_Streaming_over_HTTP\" class=\"external\" rel=\" noopener\">HTTP 上的动态自适应流式传输 (MPEG-DASH)</a></li>\n  <li><a href=\"https://dash-mse-test.appspot.com/media.html\" class=\"external\" rel=\" noopener\">MPEG-DASH 媒体源演示</a></li>\n  <li><a href=\"https://dashif.org/reference/players/javascript/1.0.0/index.html\" class=\"external\" rel=\" noopener\">DASH 参考客户端</a></li>\n  <li><a href=\"https://en.wikipedia.org/wiki/Dynamic_Adaptive_Streaming_over_HTTP\" class=\"external\" rel=\" noopener\">HTTP 上的动态流式传输</a></li>\n  <li><a href=\"https://www.streamingmediaglobal.com/Articles/Editorial/Featured-Articles/The-State-of-MPEG-DASH-Deployment-96144.aspx\" class=\"external\" rel=\" noopener\">MPEG-DASH 的部署状态</a></li>\n  <li><a href=\"https://www.bbc.co.uk/rd/blog/2014/03/media-source-extensions\" class=\"external\" rel=\" noopener\">看，无需插件：使用媒体源扩展和 MPEG-DASH 实时流式传输到浏览器</a></li>\n  <li><a href=\"https://dvcs.w3.org/hg/html-media/raw-file/tip/media-source/media-source.html\" class=\"external\" rel=\" noopener\">媒体源扩展 (W3C)</a></li>\n  <li><a href=\"https://en.wikipedia.org/wiki/Icecast\" class=\"external\" rel=\" noopener\">Icecast</a></li>\n  <li><a href=\"https://en.wikipedia.org/wiki/Shoutcast\" class=\"external\" rel=\" noopener\">SHOUTcast</a></li>\n  <li><a href=\"https://en.wikipedia.org/wiki/GStreamer\" class=\"external\" rel=\" noopener\">GStreamer</a></li>\n  <li><a href=\"https://coaxion.net/blog/2013/10/streaming-gstreamer-pipelines-via-http/\" class=\"external\" rel=\" noopener\">通过 HTTP 流式传输 GStreamer 管道</a></li>\n  <li><a href=\"http://www.svesoftware.com/passkeeper/cms/article/streaming-media-using-gstreamer-web/\" class=\"external\" rel=\" noopener\">在 web 上使用 GStreamer 传输媒体</a></li>\n  <li><a href=\"https://nginx-rtmp.blogspot.it/2013/07/gstreamer-and-raspberry-pi.html\" class=\"external\" rel=\" noopener\">GStreamer 和树莓派</a></li>\n  <li><a href=\"http://msopentech.com/blog/2014/01/09/acceptance-media-source-extensions-w3c-candidate-recommendation-will-accelerate-adoption-dash-js/\" class=\"external\" rel=\" noopener\">接受媒体源扩展 (MSE) 作为 W3C 候选推荐将加速 dash.js 的使用</a></li>\n  <li><a href=\"https://en.wikipedia.org/wiki/Comparison_of_streaming_media_systems\" class=\"external\" rel=\" noopener\">流媒体系统对比</a></li>\n  <li><a href=\"https://hacks.mozilla.org/2015/07/streaming-media-on-demand-with-media-source-extensions/\" class=\"external\" rel=\" noopener\">Mozilla Hacks - 使用媒体源扩展 (MSE) 传输媒体</a></li>\n</ul>"}}],"toc":[{"text":"流媒体与静态媒体的主要区别","id":"流媒体与静态媒体的主要区别"},{"text":"自适应流","id":"自适应流"},{"text":"流式音频与视频的点播","id":"流式音频与视频的点播"},{"text":"流式协议","id":"流式协议"},{"text":"使用流式协议","id":"使用流式协议"},{"text":"媒体源扩展 (MSE)","id":"媒体源扩展_mse"},{"text":"视频流文件格式","id":"视频流文件格式"},{"text":"音频流文件格式","id":"音频流文件格式"},{"text":"服务端流式技术","id":"服务端流式技术"},{"text":"参见","id":"参见"}],"summary":"实时流技术经常应用在一些现场输出的转播活动，类似体育活动、演唱会和更平常的电视播放及广播节目。这通常称为流媒体，实时流就是将媒体“实时”传输到计算机和设备的过程。这是一个包含多个元素的、非常复杂且较为新生的主题，所以我们会通过这篇文章，向你介绍它并让你知道如何开始。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Live streaming web audio and video","locale":"en-US","native":"English (US)"},{"title":"Live streaming web Audio et Vidéo","locale":"fr","native":"Français"},{"title":"ウェブの音声や動画のライブストリーミング","locale":"ja","native":"日本語"}],"source":{"folder":"zh-cn/web/guide/audio_and_video_delivery/live_streaming_web_audio_and_video","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/guide/audio_and_video_delivery/live_streaming_web_audio_and_video/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/Guide","title":"Web 开发者指南"},{"uri":"/zh-CN/docs/Web/Guide/Audio_and_video_delivery","title":"Audio and Video Delivery"},{"uri":"/zh-CN/docs/Web/Guide/Audio_and_video_delivery/Live_streaming_web_audio_and_video","title":"实时传输 Web 音频与视频"}],"pageTitle":"实时传输 Web 音频与视频 - Web 开发者指南 | MDN","noIndexing":false}}