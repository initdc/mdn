{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"约束验证","mdn_url":"/zh-CN/docs/Web/Guide/HTML/Constraint_validation","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>创建 web 表单始终是一个复杂的任务。仅仅组装表单是容易的，但是检查每一个字段的值是否有效并且一致是一件更加困难的事情，而向用户指明错误可能会令人头痛。<a href=\"/en-US/docs/Glossary/HTML5\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">HTML5 (en-US)</a> 引入了表单相关的一些新的机制：为<a href=\"/zh-CN/docs/Web/HTML/Element/Input\"><code>&lt;input&gt;</code></a>元素和强制校验增加了一些新的语义类型，使得在客户端检查表单内容的工作变得容易。基本上，在填写字段时，通常这些约束都会被检查，而不需要额外的 JavaScript 代码进行校验；对于更复杂的约束条件的校验可以尝试使用 HTML5 <a href=\"/en-US/docs/Learn/Forms#constraint_validation_api\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Constraint Validation API (en-US)</a>.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> HTML5 Constraint validation doesn't remove the need for validation on the <em>server side</em>. Even though far fewer invalid form requests are to be expected, invalid ones can still be sent by non-compliant browsers (for instance, browsers without HTML5 and without JavaScript) or by bad guys trying to trick your web application. Therefore, like with HTML4, you need to also validate input constraints on the server side, in a way that is consistent with what is done on the client side.</p>\n</div>"}},{"type":"prose","value":{"id":"固有和基本的约束","title":"固有和基本的约束","isH3":false,"content":"<p>在 HTML5 中，声明基本的约束有两种方式：</p>\n<ul>\n  <li>给 <a href=\"/zh-CN/docs/Web/HTML/Element/Input\"><code>&lt;input&gt;</code></a> 元素的 <a href=\"/zh-CN/docs/Web/HTML/Element/Input#attr-type\"><code>type</code></a> 特性选择最合适的语义化的值，比如，选择 email 类型将会自动创建一个约束用于检查输入的值是否是一个有效的 e-mail 地址。</li>\n  <li>设置验证相关的特性值，允许用一种简单的方式来描述基本的约束，而不必要使用 JavaScript。</li>\n</ul>"}},{"type":"prose","value":{"id":"语义的_input_类型","title":"语义的 input 类型","isH3":true,"content":"<p><a href=\"/zh-CN/docs/Web/HTML/Element/Input#attr-type\"><code>type</code></a> 特性中固有约束：</p>\n<table class=\"no-markdown\">\n  <thead>\n    <tr>\n      <th scope=\"col\">Input 类型</th>\n      <th scope=\"col\">约束描述</th>\n      <th scope=\"col\">Associated violation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>&lt;input type=\"URL\"&gt;</td>\n      <td>值必须是绝对的 URL，即，是下面的某一种：\n        <ul>\n          <li>\n            a valid URI (as defined in\n            <a href=\"https://www.ietf.org/rfc/rfc3986.txt\" class=\"external\" rel=\" noopener\">RFC 3986</a>)\n          </li>\n          <li>\n            a valid IRI, without a query component (as defined in\n            <a href=\"https://www.ietf.org/rfc/rfc3987.txt\" class=\"external\" rel=\" noopener\">RFC 3987</a>)\n          </li>\n          <li>\n            a valid IRI, with a query component without any unescaped non-ASCII\n            character (as defined in\n            <a href=\"https://www.ietf.org/rfc/rfc3987.txt\" class=\"external\" rel=\" noopener\">RFC 3987</a>)\n          </li>\n          <li>\n            a valid IRI, and the character set for the document is UTF-8 or\n            UTF-16 (as defined in\n            <a href=\"https://www.ietf.org/rfc/rfc3987.txt\" class=\"external\" rel=\" noopener\">RFC 3987</a>)\n          </li>\n        </ul>\n      </td>\n      <td><strong>Type mismatch </strong>constraint violation</td>\n    </tr>\n    <tr>\n      <td>&lt;input type=\"email\"&gt;</td>\n      <td>\n        The value must follow the\n        <a href=\"https://www.ietf.org/rfc/std/std68.txt\" class=\"external\" rel=\" noopener\">ABNF</a> production:\n        <code>1*( atext / \".\" ) \"@\" ldh-str 1*( \".\" ldh-str )</code> where:\n        <ul>\n          <li>\n            <code>atext</code> is defined in\n            <a href=\"https://tools.ietf.org/html/rfc5322\" class=\"external\" rel=\" noopener\">RFC 5322</a>, i.e., a\n            US-ASCII letter (A to Z and a-z), a digit (0 to 9) or one of the\n            following! # $ % &amp; ' * + - / = ? ` { } | ~ special character,\n          </li>\n          <li>\n            <code>ldh-str</code> is defined in\n            <a href=\"http://www.apps.ietf.org/rfc/rfc1034.html#sec-3.5\" class=\"external\" rel=\" noopener\">RFC 1034</a>, i.e., US-ASCII letters, mixed with digits and - grouped in words\n            separated by a dot (.).\n          </li>\n        </ul>\n        <div class=\"note notecard\" id=\"sect2\">\n          <strong>Note:</strong> if the\n          <a href=\"/zh-CN/docs/Web/HTML/Element/Input#attr-multiple\"><code>multiple</code></a> attribute is set,\n          several e-mail addresses can be set, as a comma-separated list, for\n          this input. If any of these do not satisfy the condition described\n          here, the <strong>Type mismatch </strong>constraint violation is\n          triggered.\n        </div>\n      </td>\n      <td><strong>Type mismatch </strong>constraint violation</td>\n    </tr>\n  </tbody>\n</table>\n<p>Note that most input types don't have intrinsic constraints, as some are simply barred from constraint validation or have a sanitization algorithm transforming incorrect values to a correct default.</p>"}},{"type":"prose","value":{"id":"验证相关的特性（attribute）","title":"验证相关的特性（Attribute）","isH3":true,"content":"<p>下列特性用于描述基本的约束：</p>\n<table class=\"no-markdown\">\n  <thead>\n    <tr>\n      <th scope=\"col\">特性</th>\n      <th scope=\"col\">支持该特性的 Input 类型</th>\n      <th scope=\"col\">可接受的值</th>\n      <th scope=\"col\">约束描述</th>\n      <th scope=\"col\">Associated violation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/HTML/Element/Input#attr-pattern\"><code>pattern</code></a></td>\n      <td>text, search, url, tel, email, password</td>\n      <td>\n        A\n        <a href=\"/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions\">JavaScript regular expression</a>\n        (compiled with the\n        <a href=\"https://www.ecma-international.org/publications/standards/Ecma-262.htm\" class=\"external\" rel=\" noopener\">ECMAScript 5</a>\n        <code title=\"\">global</code>, <code title=\"\">ignoreCase</code>, and\n        <code title=\"\">multiline</code> flags <em>disabled)</em>\n      </td>\n      <td>输入的值必须匹配设置的模式。</td>\n      <td><strong>Pattern mismatch</strong> constraint violation</td>\n    </tr>\n    <tr>\n      <td rowspan=\"3\"><a href=\"/zh-CN/docs/Web/HTML/Element/Input#attr-min\"><code>min</code></a></td>\n      <td>range, number</td>\n      <td>A valid number</td>\n      <td rowspan=\"3\">输入的值必须大于等于设置的最小值。</td>\n      <td rowspan=\"3\"><strong>Underflow</strong> constraint violation</td>\n    </tr>\n    <tr>\n      <td>date, month, week</td>\n      <td>A valid date</td>\n    </tr>\n    <tr>\n      <td>datetime, datetime-local, time</td>\n      <td>A valid date and time</td>\n    </tr>\n    <tr>\n      <td rowspan=\"3\"><a href=\"/zh-CN/docs/Web/HTML/Element/Input#attr-max\"><code>max</code></a></td>\n      <td>range, number</td>\n      <td>A valid number</td>\n      <td rowspan=\"3\">输入的值必须小于等于设置的最大值。</td>\n      <td rowspan=\"3\"><strong>Overflow</strong> constraint violation</td>\n    </tr>\n    <tr>\n      <td>date, month, week</td>\n      <td>A valid date</td>\n    </tr>\n    <tr>\n      <td>datetime, datetime-local, time</td>\n      <td>A valid date and time</td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/HTML/Element/Input#attr-required\"><code>required</code></a></td>\n      <td>\n        text, search, url, tel, email, password, date, datetime, datetime-local,\n        month, week, time, number, checkbox, radio, file; also on the\n        <a href=\"/zh-CN/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> and\n        <a href=\"/zh-CN/docs/Web/HTML/Element/textarea\"><code>&lt;textarea&gt;</code></a> elements\n      </td>\n      <td>\n        <em>none</em> as it is a Boolean attribute: its presence means\n        <em>true</em>, its absence means <em>false</em>\n      </td>\n      <td>There must be a value (if set).</td>\n      <td><strong>Missing</strong> constraint violation</td>\n    </tr>\n    <tr>\n      <td rowspan=\"5\"><a href=\"/zh-CN/docs/Web/HTML/Element/Input#attr-step\"><code>step</code></a></td>\n      <td>date</td>\n      <td>An integer number of days</td>\n      <td rowspan=\"5\">\n        Unless the step is set to the any literal, the value must be\n        <strong>min</strong> + an integral multiple of the step.\n      </td>\n      <td rowspan=\"5\"><strong>Step mismatch </strong>constraint violation</td>\n    </tr>\n    <tr>\n      <td>month</td>\n      <td>An integer number of months</td>\n    </tr>\n    <tr>\n      <td>week</td>\n      <td>An integer number of weeks</td>\n    </tr>\n    <tr>\n      <td>datetime, datetime-local, time</td>\n      <td>An integer number of seconds</td>\n    </tr>\n    <tr>\n      <td>range, number</td>\n      <td>An integer</td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-CN/docs/Web/HTML/Element/Input#attr-maxlength\"><code>maxlength</code></a></td>\n      <td>\n        text, search, url, tel, email, password; also on the\n        <a href=\"/zh-CN/docs/Web/HTML/Element/textarea\"><code>&lt;textarea&gt;</code></a> element\n      </td>\n      <td>An integer length</td>\n      <td>\n        The number of characters (code points) must not exceed the value of the\n        attribute.\n      </td>\n      <td><strong>Too long</strong> constraint violation</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"constraint_validation_process","title":"Constraint validation process","isH3":false,"content":"<p>Constraint validation is done through the Constraint Validation API either on a single form element or at the form level, on the <a href=\"/zh-CN/docs/Web/HTML/Element/form\"><code>&lt;form&gt;</code></a> element itself. The constraint validation is done in the following ways:</p>\n<ul>\n  <li>By a call to the checkValidity() method of a form-related <a href=\"/en-US/docs/Web/API/Document_Object_Model\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">DOM (en-US)</a> interface (<a href=\"/zh-CN/docs/Web/API/HTMLInputElement\"><code>HTMLInputElement</code></a>, <a href=\"/zh-CN/docs/Web/API/HTMLSelectElement\"><code>HTMLSelectElement</code></a>, <a href=\"/zh-CN/docs/Web/API/HTMLButtonElement\"><code>HTMLButtonElement</code></a> or <a href=\"/zh-CN/docs/Web/API/HTMLTextAreaElement\"><code>HTMLTextAreaElement</code></a>), which evaluates the constraints only on this element, allowing a script to get this information. (This is typically done by the user-agent when determining which of the <a href=\"/zh-CN/docs/Web/CSS\">CSS</a> pseudo-classes, <a href=\"/zh-CN/docs/Web/CSS/:valid\"><code>:valid</code></a> or <a href=\"/zh-CN/docs/Web/CSS/:invalid\"><code>:invalid</code></a>, applies.)</li>\n  <li>By a call to the checkValidity() function on the <a href=\"/zh-CN/docs/Web/API/HTMLFormElement\"><code>HTMLFormElement</code></a> interface, which is called <em>statically validating the constraints</em>.</li>\n  <li>By submitting the form itself, which is called <em>interactively validating the constraints</em>.</li>\n</ul>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>备注：</strong></p>\n  <ul>\n    <li>If the <a href=\"/zh-CN/docs/Web/HTML/Element/form#attr-novalidate\"><code>novalidate</code></a> attribute is set on the <a href=\"/zh-CN/docs/Web/HTML/Element/form\"><code>&lt;form&gt;</code></a> element, interactive validation of the constraints doesn't happen.</li>\n    <li>Calling the send() method on the <a href=\"/zh-CN/docs/DOM/HTMLFormElement\">HTMLFormElement</a> interface doesn't trigger a constraint validation. In other words, this method sends the form data to the server even if doesn't satisfy the constraints.</li>\n  </ul>\n</div>"}},{"type":"prose","value":{"id":"complex_constraints_using_html5_constraint_api","title":"Complex constraints using HTML5 Constraint API","isH3":false,"content":"<p>Using JavaScript and the Constraint API, it is possible to implement more complex constraints, for example, constraints combining several fields, or constraints involving complex calculations.</p>\n<p>Basically, the idea is to trigger JavaScript on some form field event (like <strong>onchange</strong>) to calculate whether the constraint is violated, and then to use the method <code>field.setCustomValidity()</code> to set the result of the validation: an empty string means the constraint is satisfied, and any other string means there is an error and this string is the error message to display to the user.</p>"}},{"type":"prose","value":{"id":"constraint_combining_several_fields_postal_code_validation","title":"Constraint combining several fields: Postal code validation","isH3":true,"content":"<p>The postal code format varies from one country to another. Not only do most countries allow an optional prefix with the country code (like <code>D-</code> in Germany, <code>F-</code> in France or Switzerland), but some countries have postal codes with only a fixed number of digits; others, like the UK, have more complex structures, allowing letters at some specific positions.</p>\n<blockquote>\n  <p>**备注：**This is not a comprehensive postal code validation library, but rather a demonstration of the key concepts.</p>\n</blockquote>\n<p>As an example, we will add a script checking the constraint validation for this simple form:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ZIP<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>ZIP : <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ZIP<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Country<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Country : <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Country<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ch<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Switzerland<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fr<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>France<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>de<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Germany<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>The Netherlands<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Validate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>This displays the following form:</p><iframe class=\"sample-code-frame\" title=\"Constraint combining several fields: Postal code validation sample\" id=\"frame_constraint_combining_several_fields_postal_code_validation\" src=\"https://yari-demos.prod.mdn.mozit.cloud/zh-CN/docs/Web/Guide/HTML/Constraint_validation/_sample_.constraint_combining_several_fields_postal_code_validation.html\" loading=\"lazy\"></iframe>\n<p>First, we write a function checking the constraint itself:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">checkZIP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// For each country, defines the pattern that the ZIP has to follow</span>\n  <span class=\"token keyword\">var</span> constraints <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">ch</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'^(CH-)?\\\\d{4}$'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Switzerland ZIPs must have exactly 4 digits: e.g. CH-1950 or 1950\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">fr</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'^(F-)?\\\\d{5}$'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"France ZIPs must have exactly 5 digits: e.g. F-75012 or 75012\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">de</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'^(D-)?\\\\d{5}$'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"Germany ZIPs must have exactly 5 digits: e.g. D-12345 or 12345\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">nl</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'^(NL-)?\\\\d{4}\\\\s*([A-RT-Z][A-Z]|S[BCE-RT-Z])$'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"Nederland ZIPs must have exactly 4 digits, followed by 2 letters except SA, SD and SS\"</span> <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Read the country id</span>\n  <span class=\"token keyword\">var</span> country <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Country\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Get the NPA field</span>\n  <span class=\"token keyword\">var</span> ZIPField <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ZIP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Build the constraint checker</span>\n  <span class=\"token keyword\">var</span> constraint <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>constraints<span class=\"token punctuation\">[</span>country<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>constraint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n  <span class=\"token comment\">// Check it!</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constraint<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>ZIPField<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The ZIP follows the constraint, we use the ConstraintAPI to tell it</span>\n    ZIPField<span class=\"token punctuation\">.</span><span class=\"token function\">setCustomValidity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The ZIP doesn't follow the constraint, we use the ConstraintAPI to</span>\n    <span class=\"token comment\">// give a message about the format required for this country</span>\n    ZIPField<span class=\"token punctuation\">.</span><span class=\"token function\">setCustomValidity</span><span class=\"token punctuation\">(</span>constraints<span class=\"token punctuation\">[</span>country<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Then we link it to the <strong>onchange</strong> event for the <a href=\"/zh-CN/docs/Web/HTML/Element/select\"><code>&lt;select&gt;</code></a> and the <strong>oninput</strong> event for the <a href=\"/zh-CN/docs/Web/HTML/Element/Input\"><code>&lt;input&gt;</code></a>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Country\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>onchange <span class=\"token operator\">=</span> checkZIP<span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ZIP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>oninput <span class=\"token operator\">=</span> checkZIP<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>You can see a <a href=\"/@api/deki/files/4744/=constraint.html\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">live example</a> of the postal code validation.</p>"}},{"type":"prose","value":{"id":"limiting_the_size_of_a_file_before_its_upload","title":"Limiting the size of a file before its upload","isH3":true,"content":"<p>Another common constraint is to limit the size of a file to be uploaded. Checking this on the client side before the file is transmitted to the server requires combining the Constraint API, and especially the field.setCustomValidity() method, with another JavaScript API, here the HTML5 File API.</p>\n<p>Here is the HTML part:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>FS<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Select a file smaller than 75 kB : <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>FS<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>This displays:</p><iframe class=\"sample-code-frame\" title=\"Limiting the size of a file before its upload sample\" id=\"frame_limiting_the_size_of_a_file_before_its_upload\" src=\"https://yari-demos.prod.mdn.mozit.cloud/zh-CN/docs/Web/Guide/HTML/Constraint_validation/_sample_.limiting_the_size_of_a_file_before_its_upload.html\" loading=\"lazy\"></iframe>\n<p>The JavaScript reads the file selected, uses the File.size() method to get its size, compares it to the (hard coded) limit, and calls the Constraint API to inform the browser if there is a violation:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">checkFileSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> <span class=\"token constant\">FS</span> <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> files <span class=\"token operator\">=</span> <span class=\"token constant\">FS</span><span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// If there is (at least) one file selected</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">&gt;</span> <span class=\"token number\">75</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Check the constraint</span>\n       <span class=\"token constant\">FS</span><span class=\"token punctuation\">.</span><span class=\"token function\">setCustomValidity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The selected file must not be larger than 75 kB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// No custom constraint violation</span>\n  <span class=\"token constant\">FS</span><span class=\"token punctuation\">.</span><span class=\"token function\">setCustomValidity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Finally we hook the method with the correct event:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>onchange <span class=\"token operator\">=</span> checkFileSize<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>You can see a <a href=\"/@api/deki/files/4745/=fileconstraint.html\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">live example</a> of the File size constraint validation.</p>"}},{"type":"prose","value":{"id":"visual_styling_of_constraint_validation","title":"Visual styling of constraint validation","isH3":false,"content":"<p>Apart from setting constraints, web developers want to control what messages are displayed to the users and how they are styled.</p>"}},{"type":"prose","value":{"id":"controlling_the_look_of_elements","title":"Controlling the look of elements","isH3":true,"content":"<p>The look of elements can be controlled via CSS pseudo-classes.</p>\n<h4 id=\"required_and_optional_css_pseudo-classes\">:required and :optional CSS pseudo-classes</h4>\n<p>The <a href=\"/zh-CN/docs/Web/CSS/:required\"><code>:required</code></a> and <a href=\"/zh-CN/docs/Web/CSS/:optional\"><code>:optional</code></a> <a href=\"/zh-CN/docs/Web/CSS/Pseudo-classes\">pseudo-classes</a> allow writing selectors that match form elements that have the <a href=\"/zh-CN/docs/Web/HTML/Global_attributes#attr-required\"><code>required</code></a> attribute, or that don't have it.</p>\n<h4 id=\"-moz-placeholder_css_pseudo-class\">:-moz-placeholder CSS pseudo-class</h4>\n<p>See <a href=\"/en-US/docs/Web/CSS/:placeholder-shown\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">:-moz-placeholder (en-US)</a>.</p>\n<h4 id=\"valid_invalid_css_pseudo-classes\">:valid :invalid CSS pseudo-classes</h4>\n<p>The <a href=\"/zh-CN/docs/Web/CSS/:valid\">:valid</a> and <a href=\"/zh-CN/docs/Web/CSS/:invalid\">:invalid</a> <a href=\"/zh-CN/docs/Web/CSS/Pseudo-classes\">pseudo-classes</a> are used to represent &lt;input&gt; elements whose content validates and fails to validate respectively according to the input's type setting. These classes allow the user to style valid or invalid form elements to make it easier to identify elements that are either formatted correctly or incorrectly.</p>\n<h4 id=\"default_styles\">Default styles</h4>"}},{"type":"prose","value":{"id":"controlling_the_text_of_constraints_violation","title":"Controlling the text of constraints violation","isH3":true,"content":"<h4 id=\"the_x-moz-errormessage_attribute\">The x-moz-errormessage attribute</h4>\n<p>The x-moz-errormessage attribute is a Mozilla extension that allows you to specify the error message to display when a field does not successfully validate.</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>备注：</strong> Note: This extension is non-standard.</p>\n</div>\n<h4 id=\"constraint_apis_element.setcustomvalidity\">Constraint API's element.setCustomValidity()</h4>\n<p>The element.setCustomValidity(error) method is used to set a custom error message to be displayed when a form is submitted. The method works by taking a string parameter error. If error is a non-empty string, the method assumes validation was unsuccessful and displays error as an error message. If error is an empty string, the element is considered validated and resets the error message.</p>\n<h4 id=\"constraint_apis_validitystate_object\">Constraint API's ValidityState object</h4>\n<p>The DOM <a href=\"/zh-CN/docs/Web/API/ValidityState\"><code>ValidityState</code></a> interface represents the <em>validity states</em> that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.</p>"}},{"type":"prose","value":{"id":"examples_of_personalized_styling","title":"Examples of personalized styling","isH3":true,"content":""}},{"type":"prose","value":{"id":"html4_fallback","title":"HTML4 fallback","isH3":true,"content":"<h4 id=\"trivial_fallback\">Trivial fallback</h4>\n<h4 id=\"js_fallback\">JS fallback</h4>"}},{"type":"prose","value":{"id":"conclusion","title":"Conclusion","isH3":false,"content":""}}],"toc":[{"text":"固有和基本的约束","id":"固有和基本的约束"},{"text":"Constraint validation process","id":"constraint_validation_process"},{"text":"Complex constraints using HTML5 Constraint API","id":"complex_constraints_using_html5_constraint_api"},{"text":"Visual styling of constraint validation","id":"visual_styling_of_constraint_validation"},{"text":"Conclusion","id":"conclusion"}],"summary":"创建 web 表单始终是一个复杂的任务。仅仅组装表单是容易的，但是检查每一个字段的值是否有效并且一致是一件更加困难的事情，而向用户指明错误可能会令人头痛。HTML5 (en-US) 引入了表单相关的一些新的机制：为<input>元素和强制校验增加了一些新的语义类型，使得在客户端检查表单内容的工作变得容易。基本上，在填写字段时，通常这些约束都会被检查，而不需要额外的 JavaScript 代码进行校验；对于更复杂的约束条件的校验可以尝试使用 HTML5 Constraint Validation API (en-US).","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Constraint validation","locale":"en-US","native":"English (US)"},{"title":"制約検証","locale":"ja","native":"日本語"},{"title":"Валидация ограничений","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/web/guide/html/constraint_validation","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/guide/html/constraint_validation/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/Guide","title":"Web 开发者指南"},{"uri":"/zh-CN/docs/Web/Guide/HTML/Constraint_validation","title":"约束验证"}],"pageTitle":"约束验证 - Web 开发者指南 | MDN","noIndexing":false}}