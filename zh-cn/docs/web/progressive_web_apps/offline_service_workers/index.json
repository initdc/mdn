{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"通过 Service workers 让 PWA 离线工作","mdn_url":"/zh-CN/docs/Web/Progressive_web_apps/Offline_Service_workers","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n<ol><li><a href=\"/zh-CN/docs/Web/Progressive_web_apps/App_structure\">PWA 结构</a></li><li><a href=\"/zh-CN/docs/Web/Progressive_web_apps/Add_to_home_screen\">添加到主屏幕</a></li><li><a href=\"/zh-CN/docs/Web/Progressive_web_apps/Introduction\">渐进式 Web 应用介绍</a></li><li><a href=\"/zh-CN/docs/Web/Progressive_web_apps/Loading\">渐进式加载</a></li><li><a href=\"/zh-CN/docs/Web/Progressive_web_apps/Installable_PWAs\">让 PWA 易于安装</a></li><li><a href=\"/zh-CN/docs/Web/Progressive_web_apps/Offline_Service_workers\">通过 Service workers 让 PWA 离线工作</a></li><li><a href=\"/zh-CN/docs/Web/Progressive_web_apps/Re-engageable_Notifications_Push\">通过通知推送让 PWA 可重用</a></li></ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/Progressive_web_apps/App_structure\"> 上一页 </a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/Progressive_web_apps\"> Overview: Progressive web apps</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/Progressive_web_apps/Installable_PWAs\"> 下一页  </a></li>\n</ul>\n<p>我们已经看到了 js13kPWA 的结构，并且看到了 shell 启动和运行的基本方式，那么现在让我们把目光转向如何使用 Service Worker 实现离线功能。在本文，我们将看到它在 <a href=\"https://mdn.github.io/pwa-examples/js13kpwa/\" class=\"external\" rel=\" noopener\">js13kPWA example</a> 中是如何使用的（<a href=\"https://github.com/mdn/pwa-examples/tree/master/js13kpwa\" class=\"external\" rel=\" noopener\">另请参阅源代码</a>）。我们将研究如何添加脱机功能。</p>"}},{"type":"prose","value":{"id":"service_worker_解释","title":"Service Worker 解释","isH3":false,"content":"<p>Service Worker 是浏览器和网络之间的虚拟代理。它们终于解决了前端开发人员多年来一直在努力解决的一些问题，其中最值得关注的是，解决了如何正确缓存网站资源并使其在离线时可用的问题。</p>\n<p>Service Worker 运行在一个与页面 JavaScript 主线程独立的线程上，并且无权访问 DOM 结构。这引入了一种与传统 Web 编程不同的方式：它的 API 是非阻塞的，并且可以在不同的上下文之间发送和接收信息。您可分配给 Service Worker 一些任务，并通过基于 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a> 的方法在任务完成时收到结果。</p>\n<p>它不仅仅提供离线功能，还可以做包括处理通知、在单独的线程上执行繁重的计算等事务。Service workers 非常强大，因为他们可以控制网络请求、修改网络请求、返回缓存的自定义响应，或者合成响应。</p>"}},{"type":"prose","value":{"id":"安全","title":"安全","isH3":true,"content":"<p>因为它们非常强大，所以 Service Worker 只能在安全的上下文中执行（即 HTTPS）。如果您想在将代码推送到生产环境之前先进行实验，则可以始终在本地主机上进行测试或设置 GitHub Pages，这两者都支持 HTTPS。</p>"}},{"type":"prose","value":{"id":"离线优先","title":"离线优先","isH3":false,"content":"<p>“离线优先”或“缓存优先”模式是向用户提供内容的最流行策略。如果资源已缓存且可脱机使用，就在尝试从服务器下载资源之前先将其返回；如果它已经不在缓存中，就下载并缓存以备将来使用。</p>"}},{"type":"prose","value":{"id":"pwa_中的_p（渐进，progressive）","title":"PWA 中的 P（渐进，Progressive）","isH3":false,"content":"<p>Service Worker 当正确地作为渐进功能实装时，可以为支持其 API 的现代浏览器用户提供离线支持使其受益，但也不会使用旧版浏览器的用户造成负面影响。</p>"}},{"type":"prose","value":{"id":"js13kpwa_应用程序中的_service_worker","title":"js13kPWA 应用程序中的 Service worker","isH3":false,"content":"<p>理论看够了，让我们看一些源代码！</p>"}},{"type":"prose","value":{"id":"注册_service_worker","title":"注册 Service Worker","isH3":true,"content":"<p>首先让我们看看在 app.js 文件中注册新 Service Worker 的代码：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">'serviceWorker'</span> <span class=\"token keyword\">in</span> navigator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    navigator<span class=\"token punctuation\">.</span>serviceWorker<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/pwa-examples/js13kpwa/sw.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>如果浏览器支持 Service Workers API，则使用 <a href=\"/zh-CN/docs/Web/API/ServiceWorkerContainer/register\"><code>ServiceWorkerContainer.register()</code></a> 方法在该站点注册。其内容在 sw.js 文件中，可以在注册成功后执行。它是 app.js 文件中唯一与 Service Worker 有关的代码; 其他关于 Service Worker 的内容都写在 sw.js 文件中。</p>"}},{"type":"prose","value":{"id":"service_worker_的生命周期","title":"Service Worker 的生命周期","isH3":true,"content":"<p>注册完成后，sw.js 文件会自动下载、安装，然后激活。</p>\n<h4 id=\"安装\">安装</h4>\n<p>Service Workers API 允许我们为我们感兴趣的关键事件添加事件监听器 - 第一个是 <code>install</code> 事件：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'install'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[Service Worker] Install'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在 <code>install</code> 的监听函数中，我们可以初始化缓存并添加离线应用时所需的文件，js13kPWA 应用确实也是这么做的。</p>\n<p>首先，创建一个存储缓存名字的变量，App Shell 所需的文件也被记录在一个数组上：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> cacheName <span class=\"token operator\">=</span> <span class=\"token string\">'js13kPWA-v1'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> appShellFiles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/index.html'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/app.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/style.css'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/fonts/graduate.eot'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/fonts/graduate.ttf'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/fonts/graduate.woff'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/favicon.ico'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/img/js13kgames.png'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/img/bg.png'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/icons/icon-32.png'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/icons/icon-64.png'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/icons/icon-96.png'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/icons/icon-128.png'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/icons/icon-168.png'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/icons/icon-192.png'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/icons/icon-256.png'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'/pwa-examples/js13kpwa/icons/icon-512.png'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>接下来，从 data/games.js 的内容中解析出来的图片链接被赋值到另一个数组上，之后，两个数组会用 <a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>Array.prototype.concat()</code></a> 方法合并起来。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> gamesImages <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>games<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  gamesImages<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data/img/'</span><span class=\"token operator\">+</span>games<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>slug<span class=\"token operator\">+</span><span class=\"token string\">'.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> contentToCache <span class=\"token operator\">=</span> appShellFiles<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>gamesImages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>接着我们可以监听 install 事件：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'install'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[Service Worker] Install'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>cacheName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cache</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[Service Worker] Caching all: app shell and content'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>contentToCache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>有两件事需要在这里解释一下：<a href=\"/zh-CN/docs/Web/API/ExtendableEvent/waitUntil\"><code>ExtendableEvent.waitUntil</code></a> 做了什么？<a href=\"/zh-CN/docs/Web/API/caches\" title=\"caches\"><code>caches</code></a> 对象又是什么东西？</p>\n<p>Service Worker 会等到 <code>waitUntil</code> 里面的代码执行完毕之后才开始安装。它返回的是一个 Promise——因为安装过程可能需要一些时间，而我们必须等待它完成。</p>\n<p><code>caches</code> 是一个特殊的 <a href=\"/zh-CN/docs/Web/API/CacheStorage\"><code>CacheStorage</code></a> 对象，它能在 Service Worker 指定的范围内提供数据存储的能力（Service Worker 在注册时，第二个参数是选填的，可以被用来指定你想让 Service Worker 控制的内容的子目录，译者注）。因为 Web Storage 的执行是同步的（此处理解为 Web Storage 并不返回一个 Promise，译者注），在 Service Worker 中使用 <a href=\"/zh-CN/docs/Web/API/Web_Storage_API\">Web Storage</a> 将不会有效果，所以我们使用 Cache API 作为替代。</p>\n<p>这里，我们使用给定的名字开启了一个缓存，并且将我们的应用所需要缓存的文件全部添加进去，当我们再次加载这些资源时，由请求 URL 确定的对应缓存就是可用的。</p>\n<h4 id=\"激活\">激活</h4>\n<p>还有一个 <code>activate</code> 事件，它的用法跟 <code>install</code> 事件相同。这个事件通常用来删除那些我们已经不需要的文件或者做一些清理工作。因为在我们的 App 里面没有使用到，这里我们暂时跳过它。</p>"}},{"type":"prose","value":{"id":"响应请求","title":"响应请求","isH3":true,"content":"<p><code>fetch</code> 事件对我们很有用，它在每次应用发起 HTTP 请求的时候被触发。这个事件对我们来说非常有用，它允许我们拦截请求并对请求作出自定义的响应，下面是一个简单的例子：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetch'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[Service Worker] Fetched resource '</span><span class=\"token operator\">+</span>e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>请求的响应可以是任何我们想要的东西：请求过的文件缓存下来的副本，或者一段做了具体操作的 JavaScript 代码——这里有无限的可能。</p>\n<p>在我们的示例代码中，当缓存存在时，我们使用缓存来提供服务，而不重新请求数据。不管当前应用是在线还是离线，我们都这么做。当请求的文件不在缓存中时，我们会在响应之前将数据添加到缓存中。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetch'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[Service Worker] Fetching resource: '</span><span class=\"token operator\">+</span>e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> r <span class=\"token operator\">||</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>cacheName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cache</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[Service Worker] Caching new resource: '</span><span class=\"token operator\">+</span>e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>上述代码中，对于请求我们首先会在缓存中查找资源是否被缓存：如果存在，将会返回缓存的资源；如果不存在，会转而从网络中请求数据，然后将它缓存起来，这样下次有相同的请求发生时，我们就可以直接使用缓存。</p>\n<p><a href=\"/zh-CN/docs/Web/API/FetchEvent/respondWith\"><code>FetchEvent.respondWith</code></a> 方法将会接管响应控制，它会作为服务器和应用之间的代理服务。它允许我们对每一个请求作出我们想要的任何响应：Service Worker 会处理这一切，从缓存中获取这些数据，并在需要的情况下对它们进行修改。</p>\n<p>就是这样，我们的应用会在 install 触发时缓存资源，并且在 fetch 事件触发时返回缓存中的资源，这就是它甚至在离线状态下也能使用的原因。当我们添加新的内容时，它也会随时将其缓存下来。</p>"}},{"type":"prose","value":{"id":"更新","title":"更新","isH3":false,"content":"<p>还有一点需要考虑：当我们的应用有了一个新版本，并且它包含了一些可用的新资源时，我们应该如何去更新它的 Service Worker？我们存放在缓存名称中的版本号是这个问题的关键：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> cacheName <span class=\"token operator\">=</span> <span class=\"token string\">'js13kPWA-v1'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>当我们把版本号更新到 v2，Service Worker 会将我们所有的文件（包括那些新的文件）添加到一个新的缓存中。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>contentToCache<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/pwa-examples/js13kpwa/icons/icon-32.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'install'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'js13kPWA-v2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cache</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>contentToCache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这个时候一个新的 Service Worker 会在后台被安装，而旧的 Service Worker 仍然会正常运行，直到没有任何页面使用到它为止，这时候新的 Service Worker 将会被激活，然后接管所有的页面。</p>"}},{"type":"prose","value":{"id":"缓存的清理","title":"缓存的清理","isH3":false,"content":"<p>还记得我们前面跳过的那个 <code>activate</code> 事件吗？它可以用来清理那些我们不再需要的缓存：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'activate'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyList</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>keyList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cacheName<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> caches<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这样能确保只有那些我们需要的文件会保留在缓存中，我们不需要留下任何的垃圾，毕竟<a href=\"/zh-CN/docs/Web/API/IndexedDB_API/Browser_storage_limits_and_eviction_criteria\">浏览器的缓存空间是有限的</a>，手动清理掉这些不需要的缓存是不错的主意。</p>"}},{"type":"prose","value":{"id":"其他用途","title":"其他用途","isH3":false,"content":"<p>从缓存中加载资源并不是 Service Worker 的唯一能力，如果你有比较耗时的计算，你可以把它们从主线程中抽离出来，在 Service Worker 中进行计算，最后在它们计算完毕的时候从 Service Worker 中取得计算结果。性能方面，你可以在 Service Worker 中对即将使用到的资源进行预加载，这样当你使用到这些资源的时候，应用的加载速度会更快。</p>"}},{"type":"prose","value":{"id":"总结","title":"总结","isH3":false,"content":"<p>在这篇文章中我们简单的了解了如何使用 Service Worker 让你的 PWA 实现离线功能。如果你想要学习更多关于 <a href=\"/zh-CN/docs/Web/API/Service_Worker_API\">Service Worker API</a> 的概念，以及使用 Service Worker 方面的相关细节，你可以进一步查阅我们的文档。</p>\n<p>Service Worker 在处理<a href=\"/zh-CN/docs/Web/API/Push_API\">消息推送</a>的时候也会经常被用到，这一部分我们将会在后面的章节进行讨论。</p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/Progressive_web_apps/App_structure\"> 上一页 </a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/Progressive_web_apps\"> Overview: Progressive web apps</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/Progressive_web_apps/Installable_PWAs\"> 下一页  </a></li>\n</ul>"}}],"toc":[{"text":"Service Worker 解释","id":"service_worker_解释"},{"text":"离线优先","id":"离线优先"},{"text":"PWA 中的 P（渐进，Progressive）","id":"pwa_中的_p（渐进，progressive）"},{"text":"js13kPWA 应用程序中的 Service worker","id":"js13kpwa_应用程序中的_service_worker"},{"text":"更新","id":"更新"},{"text":"缓存的清理","id":"缓存的清理"},{"text":"其他用途","id":"其他用途"},{"text":"总结","id":"总结"}],"summary":"我们已经看到了 js13kPWA 的结构，并且看到了 shell 启动和运行的基本方式，那么现在让我们把目光转向如何使用 Service Worker 实现离线功能。在本文，我们将看到它在 js13kPWA example 中是如何使用的（另请参阅源代码）。我们将研究如何添加脱机功能。","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Making PWAs work offline with Service workers","locale":"en-US","native":"English (US)"},{"title":"Hacer que las PWAs trabajen desconectadas con servicio workers","locale":"es","native":"Español"},{"title":"Faire fonctionner les PWAs en mode déconnecté grâce aux Service workers","locale":"fr","native":"Français"},{"title":"サービスワーカーで PWA をオフラインで動作させる","locale":"ja","native":"日本語"},{"title":"Service worker를 사용해 PWA를 오프라인에서 동작하게 만들기","locale":"ko","native":"한국어"}],"source":{"folder":"zh-cn/web/progressive_web_apps/offline_service_workers","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/progressive_web_apps/offline_service_workers/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/Progressive_web_apps","title":"渐进式 Web 应用（PWA）"},{"uri":"/zh-CN/docs/Web/Progressive_web_apps/Offline_Service_workers","title":"通过 Service workers 让 PWA 离线工作"}],"pageTitle":"通过 Service workers 让 PWA 离线工作 - 渐进式 Web 应用（PWA） | MDN","noIndexing":false}}