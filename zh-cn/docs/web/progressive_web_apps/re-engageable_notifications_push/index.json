{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"通过通知推送让 PWA 可重用","mdn_url":"/zh-CN/docs/Web/Progressive_web_apps/Re-engageable_Notifications_Push","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n<ol><li><a href=\"/zh-CN/docs/Web/Progressive_web_apps/App_structure\">PWA 结构</a></li><li><a href=\"/zh-CN/docs/Web/Progressive_web_apps/Add_to_home_screen\">添加到主屏幕</a></li><li><a href=\"/zh-CN/docs/Web/Progressive_web_apps/Introduction\">渐进式 Web 应用介绍</a></li><li><a href=\"/zh-CN/docs/Web/Progressive_web_apps/Loading\">渐进式加载</a></li><li><a href=\"/zh-CN/docs/Web/Progressive_web_apps/Installable_PWAs\">让 PWA 易于安装</a></li><li><a href=\"/zh-CN/docs/Web/Progressive_web_apps/Offline_Service_workers\">通过 Service workers 让 PWA 离线工作</a></li><li><a href=\"/zh-CN/docs/Web/Progressive_web_apps/Re-engageable_Notifications_Push\">通过通知推送让 PWA 可重用</a></li></ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/Progressive_web_apps/Installable_PWAs\"> 上一页 </a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/Progressive_web_apps\"> Overview: Progressive web apps</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/Progressive_web_apps/Loading\"> 下一页  </a></li>\n</ul>\n<p>以本地缓存实现离线应用是一个强大的特性。允许用户在主屏幕上安装 Web 应用程序则显得更了不起。但除了单纯依赖用户手动打开应用之外，我们还可以走得更远，利用通知和消息推送提高用户参与度，并且随时提供新的内容。</p>"}},{"type":"prose","value":{"id":"两个_api，一个目标","title":"两个 API，一个目标","isH3":false,"content":"<p><a href=\"/zh-CN/docs/Web/API/Push_API\">推送 API</a>和<a href=\"/zh-CN/docs/Web/API/Notifications_API\">通知 API</a>是两个相互独立的 API，但在提高用户参与度这件事上，它们可以配合得很好。推送 API 可以用来从服务端推送新的内容而无需客户端介入，它是由应用的 Service Worker 来实现的；通知功能则可以通过 Service Worker 来向用户展示一些新信息，或者至少提醒用户应用已经更新了某些功能。</p>\n<p>跟 Service Worker 一样，这些工作是在浏览器外部实现的，所以即使应用被隐藏到后台甚至被关闭了，我们仍然能够推送更新或者通知给用户。</p>"}},{"type":"prose","value":{"id":"通知","title":"通知","isH3":false,"content":"<p>让我们先从通知 API 开始，它能够脱离推送 API 单独工作，但两者结合起来会非常的有用，我们先看看它单独能做什么。</p>"}},{"type":"prose","value":{"id":"请求授权","title":"请求授权","isH3":true,"content":"<p>为了能够显示通知，我们需要先请求用户的授权。最佳的实践经验告诉我们，不应该直接请求授权，而应该引导用户点击一个按钮，然后才弹出授权窗口：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"notifications\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbutton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Notification<span class=\"token punctuation\">.</span><span class=\"token function\">requestPermission</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">===</span> <span class=\"token string\">'granted'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">randomNotification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>下面的图片展示了如何通过系统的通知服务显示一个授权窗口：</p>\n<p>\n  <img src=\"/en-US/docs/Web/Progressive_web_apps/Re-engageable_Notifications_Push/js13kpwa-notification.png\" alt=\"js13kPWA 的授权窗口。\" width=\"360\" height=\"640\" loading=\"lazy\">\n</p>\n<p>当用户确定接收通知，应用就可以获得推送通知的功能。用户的授权的结果有三种，default（默认）、granted（允许）或者 denied（拒绝），当用户没有做出选择的时候，授权结果会返回 default，另外两种结果分别在用户选择了允许或者拒绝的时候返回。</p>\n<p>一旦用户选择授权，这个授权结果对通知 API 和推送 API 两者都有效。</p>"}},{"type":"prose","value":{"id":"创建一个通知","title":"创建一个通知","isH3":true,"content":"<p>我们的示例应用通过可用的数据来创建通知。随机选择一个游戏数据来填充通知的主体：用游戏的名称来作为通知的标题，通知的主体会提及游戏的作者，用游戏的图片来作为通知的图标：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">randomNotification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> randomItem <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>games<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> notifTitle <span class=\"token operator\">=</span> games<span class=\"token punctuation\">[</span>randomItem<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> notifBody <span class=\"token operator\">=</span> <span class=\"token string\">'Created by '</span><span class=\"token operator\">+</span>games<span class=\"token punctuation\">[</span>randomItem<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>author<span class=\"token operator\">+</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> notifImg <span class=\"token operator\">=</span> <span class=\"token string\">'data/img/'</span><span class=\"token operator\">+</span>games<span class=\"token punctuation\">[</span>randomItem<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>slug<span class=\"token operator\">+</span><span class=\"token string\">'.jpg'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> notifBody<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">icon</span><span class=\"token operator\">:</span> notifImg\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> notif <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Notification</span><span class=\"token punctuation\">(</span>notifTitle<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>randomNotification<span class=\"token punctuation\">,</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>上述代码每隔三十秒会创建一个通知，直到用户觉得通知有点烦人并手动关闭掉它为止。一个真正的 App，对通知的频率必须进行严格的控制，通知内容也要更加有用才行。通知 API 的优势在于它使用了操作系统的通知功能，这意味着即使用户当前并没有在使用我们的应用，我们的通知也能够展示，它看起来跟一个原生应用发出的通知差不多。</p>"}},{"type":"prose","value":{"id":"推送","title":"推送","isH3":false,"content":"<p>推送比通知要复杂一些，我们需要从服务端订阅一个服务，之后服务端会推送数据到客户端应用。应用的 Service Worker 将会接收到从服务端推送的数据，这些数据可以用来做通知推送，或者实现其他的需求。</p>\n<p>这个技术还处在非常初级的阶段，一些可用示例使用了谷歌云的消息推送平台，但它们正在被重写以支持 <a href=\"https://blog.mozilla.org/services/2016/08/23/sending-vapid-identified-webpush-notifications-via-mozillas-push-service/\" class=\"external\" rel=\" noopener\">VAPID</a> (Voluntary Application Identification)，它能为你的应用提供一层额外的安全防护。你可以看一下 <a href=\"https://serviceworke.rs/push-payload.html\" class=\"external\" rel=\" noopener\">Service Workers Cookbook 里的一些例子</a>，尝试用 <a href=\"https://firebase.google.com/\" class=\"external\" rel=\" noopener\">Firebase</a> 配置一个消息推送服务，或者构建自己的推送服务（例如使用 Node.js）。</p>\n<p>之前提到，为了接收到推送的消息，你需要有一个 Service Worker，这部分的基础知识我们已经在文章<a href=\"/en-US/docs/Web/Progressive_web_apps/Offline_Service_workers\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">通过 Service workers 让 PWA 离线工作 (en-US)</a>里面解释过。在 Service Worker 内部，存在一个消息推送服务订阅机制。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>registration<span class=\"token punctuation\">.</span>pushManager<span class=\"token punctuation\">.</span><span class=\"token function\">getSubscription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>一旦用户订阅了通知服务，他们就能接收到服务器推送的通知。</p>\n<p>从服务端的角度来看，出于安全的目的，这整个过程必须使用非对称加密技术进行保护：允许任何人用你的应用发送未加密的消息就大有问题了。你可以通过阅读<a href=\"https://jrconlin.github.io/WebPushDataTestPage/\" class=\"external\" rel=\" noopener\">Web 推送数据加密测试页</a>里面的详细信息来保护你的服务器。当用户订阅服务时，服务器会储存所有接收到的信息，以便在后续需要的时候能将信息推送出去。</p>\n<p>为了能够接收到推送的消息，我们需要在 Service Worker 文件里面监听 <code><a href=\"/zh-CN/docs/Web/Reference/Events/push\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">push</a></code> 事件：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>self<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'push'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这些数据被接收后，将会以通知的方式立刻展现给用户，例如提醒用户一些待办事项，或者让用户知道 App 有了新内容。</p>"}},{"type":"prose","value":{"id":"推送例子","title":"推送例子","isH3":true,"content":"<p>推送需要服务端，但因为应用托管在 GitHub 上，而 GitHub 只提供静态页面托管，我们没办法将服务端的例子包含进 js13kPWA 这个应用里面。<a href=\"https://serviceworke.rs/\" class=\"external\" rel=\" noopener\">Service Worker Cookbook</a> 这个页面上有详细的说明，demo 请看 <a href=\"https://serviceworke.rs/push-payload.html\" class=\"external\" rel=\" noopener\">Push Payload Demo</a>。</p>\n<p>这个 demo 包含三个文件：</p>\n<ul>\n  <li><a href=\"https://github.com/mozilla/serviceworker-cookbook/blob/master/push-payload/index.js\" class=\"external\" rel=\" noopener\">index.js</a>, 包含我们应用的源代码</li>\n  <li><a href=\"https://github.com/mozilla/serviceworker-cookbook/blob/master/push-payload/server.js\" class=\"external\" rel=\" noopener\">server.js</a>,包含服务端的源代码 (用 Node.js 编写)</li>\n  <li><a href=\"https://github.com/mozilla/serviceworker-cookbook/blob/master/push-payload/service-worker.js\" class=\"external\" rel=\" noopener\">service-worker.js</a>, 包含 Service Worker 的具体代码。</li>\n</ul>\n<p>让我们一起看看这些代码：</p>\n<h4 id=\"index.js\">index.js</h4>\n<p>index.js 的开头注册了 Service Worker：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>navigator<span class=\"token punctuation\">.</span>serviceWorker<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'service-worker.js'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">registration</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> registration<span class=\"token punctuation\">.</span>pushManager<span class=\"token punctuation\">.</span><span class=\"token function\">getSubscription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">subscription</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 注册部分</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">subscription</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 订阅部分</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这个 Service Worker 比我们在 <a href=\"https://mdn.github.io/pwa-examples/js13kpwa/\" class=\"external\" rel=\" noopener\">js13kPWA demo</a> 看到的要稍微复杂一些。在这部分代码里，Service Worker 注册完成之后，我们使用 registration 对象来发起订阅，然后使用 subscription 对象来完成整个流程。</p>\n<p>注册部分的代码看起来大致是这个样子：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>subscription<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> subscription<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>如果用户已经完成订阅，我们直接返回 subscription 对象并且跳转到订阅部分。如果没有，我们会初始化一个新的 subscription 对象：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./vapidPublicKey'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> vapidPublicKey <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> convertedVapidKey <span class=\"token operator\">=</span> <span class=\"token function\">urlBase64ToUint8Array</span><span class=\"token punctuation\">(</span>vapidPublicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>App 会从服务器请求一个公钥并且把响应结果转化成文本，最后它还需要转化成一个 Uint8Array（为了兼容 Chrome）。如果你想学习更多关于 VAPID 的内容可以阅读 <a href=\"https://blog.mozilla.org/services/2016/08/23/sending-vapid-identified-webpush-notifications-via-mozillas-push-service/\" class=\"external\" rel=\" noopener\">Sending VAPID identified WebPush Notifications via Mozilla’s Push Service</a> 这篇文章。</p>\n<p>App 现在可以使用 <a href=\"/zh-CN/docs/Web/API/PushManager\"><code>PushManager</code></a> 来订阅新用户。这个方法支持传递两个参数：第一个是 <code>userVisibleOnly: true</code>，意思是发送给用户的所有通知对他们都是可见的，第二个是 <code>applicationServerKey</code>，这个参数包含我们之前从服务端取得并转化的 VAPID key。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">return</span> registration<span class=\"token punctuation\">.</span>pushManager<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">userVisibleOnly</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">applicationServerKey</span><span class=\"token operator\">:</span> convertedVapidKey\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>现在我们把注意力转移到订阅部分：App 首先使用 fetch 将 subscription 以 JSON 的方式发送给服务器。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./register'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">'Content-type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">subscription</span><span class=\"token operator\">:</span> subscription\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>接着给“注册”按钮绑定了一个函数：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'doIt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> payload <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notification-payload'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> delay <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notification-delay'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> ttl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notification-ttl'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./sendNotification'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string-property property\">'Content-type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">subscription</span><span class=\"token operator\">:</span> subscription<span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> payload<span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">delay</span><span class=\"token operator\">:</span> delay<span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">ttl</span><span class=\"token operator\">:</span> ttl<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>当按钮被点击的时候，<code>fetch</code> 会请求服务器根据给定的参数发送通知，<code>payload</code> 参数包含通知里面要显示的文本，<code>delay</code> 参数定义了通知将会延迟展示的秒数，<code>ttl</code> 是 time-to-live 的缩写，用来设置通知在服务器上的存活时间，依然是以秒为单位。</p>\n<p>接着，我们进入下一个 JavaScript 文件。</p>\n<h4 id=\"server.js\">server.js</h4>\n<p>服务端的代码是用 Node.js 编写的，它需要被托管在合适的地方。这部分内容已经够单独再写一篇文章了。所以这里我们只提供一个简单的概览。</p>\n<p><a href=\"https://www.npmjs.com/package/web-push\" class=\"external\" rel=\" noopener\">web-push</a> 模块被用来配置 VAPID 密钥，如果没有的话，还可以生成一个。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">const webPush = require('web-push');\n\nif (!process.env.VAPID_PUBLIC_KEY || !process.env.VAPID_PRIVATE_KEY) {\n  console.log(\"You must set the VAPID_PUBLIC_KEY and VAPID_PRIVATE_KEY \"+\n    \"environment variables. You can use the following ones:\");\n  console.log(webPush.generateVAPIDKeys());\n  return;\n}\n\nwebPush.setVapidDetails(\n  'https://serviceworke.rs/',\n  process.env.VAPID_PUBLIC_KEY,\n  process.env.VAPID_PRIVATE_KEY\n);\n</pre></div>\n<p>接着，一个模块定义并导出了所有应用需要处理的路由：获取 VAPID 公钥、注册、发送通知等等。你可以看到来自 <code>index.js</code> 的 <code>payload</code>, <code>delay</code> 和<code>ttl</code> 变量在这里被用到了。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">module.exports = function(app, route) {\n  app.get(route + 'vapidPublicKey', function(req, res) {\n    res.send(process.env.VAPID_PUBLIC_KEY);\n  });\n\n  app.post(route + 'register', function(req, res) {\n\n    res.sendStatus(201);\n  });\n\n  app.post(route + 'sendNotification', function(req, res) {\n    const subscription = req.body.subscription;\n    const payload = req.body.payload;\n    const options = {\n      TTL: req.body.ttl\n    };\n\n    setTimeout(function() {\n      webPush.sendNotification(subscription, payload, options)\n      .then(function() {\n        res.sendStatus(201);\n      })\n      .catch(function(error) {\n        console.log(error);\n        res.sendStatus(500);\n      });\n    }, req.body.delay * 1000);\n  });\n};\n</pre></div>\n<h4 id=\"service-worker.js\">service-worker.js</h4>\n<p>最后我们要看的文件是 Service Worker。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">self.addEventListener('push', function(event) {\n    const payload = event.data ? event.data.text() : 'no payload';\n    event.waitUntil(\n        self.registration.showNotification('ServiceWorker Cookbook', {\n            body: payload,\n        })\n    );\n});\n</pre></div>\n<p>它做的就只是监听 <code><a href=\"/zh-CN/docs/Web/Reference/Events/push\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">push</a></code> 事件，创建 payload 变量，这个变量包含了来自 event.data 的文本（如果 data 是空的，就设置成 \"no payload\" 字符串），然后一直等到通知推送给用户为止。</p>\n<p>如果你想知道它们具体是怎么处理的，请随意探索 <a href=\"https://serviceworke.rs/\" class=\"external\" rel=\" noopener\">Service Worker Cookbook</a> 里面剩下的例子。<a href=\"https://github.com/mozilla/serviceworker-cookbook/\" class=\"external\" rel=\" noopener\">GitHub 上面提供了完整的源代码</a>，也有大量的示例展示了各种用法，包括 Web 推送、缓存策略、性能、离线运行等等。</p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/Progressive_web_apps/Installable_PWAs\"> 上一页 </a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/Progressive_web_apps\"> Overview: Progressive web apps</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/Progressive_web_apps/Loading\"> 下一页  </a></li>\n</ul>"}}],"toc":[{"text":"两个 API，一个目标","id":"两个_api，一个目标"},{"text":"通知","id":"通知"},{"text":"推送","id":"推送"}],"summary":"以本地缓存实现离线应用是一个强大的特性。允许用户在主屏幕上安装 Web 应用程序则显得更了不起。但除了单纯依赖用户手动打开应用之外，我们还可以走得更远，利用通知和消息推送提高用户参与度，并且随时提供新的内容。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"How to make PWAs re-engageable using Notifications and Push","locale":"en-US","native":"English (US)"},{"title":"Cómo hacer que las PWAs se puedan volver a conectar usando Notificaciones y Push","locale":"es","native":"Español"},{"title":"Comment faire pour que les PWAs relancent les utilisateurs en utilisant des notifications et des messages poussés","locale":"fr","native":"Français"},{"title":"通知とプッシュを利用して PWA を再エンゲージ可能にするには","locale":"ja","native":"日本語"},{"title":"알림과 푸시를 사용해 PWA를 재참여(re-engageable)가능하게 만드는 방법","locale":"ko","native":"한국어"}],"source":{"folder":"zh-cn/web/progressive_web_apps/re-engageable_notifications_push","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/progressive_web_apps/re-engageable_notifications_push/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/Progressive_web_apps","title":"渐进式 Web 应用（PWA）"},{"uri":"/zh-CN/docs/Web/Progressive_web_apps/Re-engageable_Notifications_Push","title":"通过通知推送让 PWA 可重用"}],"pageTitle":"通过通知推送让 PWA 可重用 - 渐进式 Web 应用（PWA） | MDN","noIndexing":false}}