{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"渐进式加载","mdn_url":"/zh-CN/docs/Web/Progressive_web_apps/Loading","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n<ol><li><a href=\"/zh-CN/docs/Web/Progressive_web_apps/App_structure\">PWA 结构</a></li><li><a href=\"/zh-CN/docs/Web/Progressive_web_apps/Add_to_home_screen\">添加到主屏幕</a></li><li><a href=\"/zh-CN/docs/Web/Progressive_web_apps/Introduction\">渐进式 Web 应用介绍</a></li><li><a href=\"/zh-CN/docs/Web/Progressive_web_apps/Loading\">渐进式加载</a></li><li><a href=\"/zh-CN/docs/Web/Progressive_web_apps/Installable_PWAs\">让 PWA 易于安装</a></li><li><a href=\"/zh-CN/docs/Web/Progressive_web_apps/Offline_Service_workers\">通过 Service workers 让 PWA 离线工作</a></li><li><a href=\"/zh-CN/docs/Web/Progressive_web_apps/Re-engageable_Notifications_Push\">通过通知推送让 PWA 可重用</a></li></ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/Progressive_web_apps/Re-engageable_Notifications_Push\"> 上一页 </a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/Progressive_web_apps\"> Overview: Progressive web apps</a></li>\n    \n</ul>\n<p>在前面的文章我们介绍了很多 API，例如：<a href=\"en-US/docs/Web/Apps/Progressive/Offline_Service_workers\">Service Workers</a>,、<a href=\"/en-US/docs/Web/Progressive_web_apps/Installable_PWAs\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Web Manifests (en-US)</a>、<a href=\"/en-US/docs/Web/Progressive_web_apps/Re-engageable_Notifications_Push\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Notifications and Push (en-US)</a>，它们让我们的示例应用 <a href=\"https://mdn.github.io/pwa-examples/js13kpwa/\" class=\"external\" rel=\" noopener\">js13kPWA</a> 成为一个渐进式 Web 应用。在这篇文章里我们将会更进一步，使用资源渐进式加载来提高整个应用的性能。</p>"}},{"type":"prose","value":{"id":"首次有效渲染","title":"首次有效渲染","isH3":false,"content":"<p>尽快把有效的信息输送给用户是一件非常重要的事情：等待页面加载的时间越长，用户在页面加载完成之前离开的概率就越大。为了达到这个目的，网页加载完成前，我们应该用占位符在最终资源将会加载的地方展示最起码的视图骨架。</p>\n<p>这个功能可以用渐进式加载来实现，它也被称为<a href=\"https://zh.wikipedia.org/wiki/%E6%83%B0%E6%80%A7%E8%BC%89%E5%85%A5\" class=\"external\" rel=\" noopener\">惰性加载</a>。它的做法是延迟加载尽可能多的资源（HTML、CSS 和 JavaScript），只有在用户第一次使用到它的时候，它才会被立刻加载。</p>"}},{"type":"prose","value":{"id":"打包还是拆分","title":"打包还是拆分","isH3":false,"content":"<p>大部分用户不会用到一个网站的所有页面，但我们通常的做法却是把所有的功能都打包进一个很大的文件里面。一个 <code>bundle.js</code> 文件的大小可能会有几 M，一个打包后的 <code>style.css</code> 会包含网站的一切样式，从 CSS 结构定义到网站在各个版本的样式：移动端、平板、桌面、打印版等等。</p>\n<p>通常来说，只加载一个较大的打包后文件会比加载很多个小文件要快一些，但如果用户并不是一开始就需要所有的资源，我们就可以首先加载那些关键的资源，其他的资源等到需要的时候再去加载它。</p>"}},{"type":"prose","value":{"id":"阻塞渲染的资源","title":"阻塞渲染的资源","isH3":false,"content":"<p>将所有文件打包到一起是不良做法，因为浏览器在把计算结果渲染到屏幕之前，需要先把 HTML、CSS 和 JavaScript 下载下来。在页面被打开到加载完成的这段时间里，用户将会看到一个空白的页面，体验显然很差。</p>\n<p>为了解决这个问题，举个例子，我们可以在 script 标签上面加上一个 <code>defer</code>：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">defer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>它们会等到文档解析完成之后再开始下载和执行，所以不会阻塞 HTML 页面的渲染。我们还可以拆分 CSS 文件并给它们加上 media 属性：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>style.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>print.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>print<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>这种做法告诉浏览器，只有在条件满足的情况下才加载这些资源（例如指定了 print，则在打印环境下才会加载这些资源，译者注）。</p>\n<p>在我们这个 js13kPWA 应用里面，由于 CSS 非常的简单，因此所有样式都被放到一个文件里面，并没有具体的规则来指导它如何加载 CSS。但我们可以做得更好，例如把 <code>style.css</code> 里面的所有内容移动到一个 <code>&lt;style&gt;</code> 标签里面，并把它放到 <code>index.html</code> 的 <code>&lt;head&gt;</code> 标签里面。这样做可以进一步提升应用的性能，但为了使代码更具可读性，我们并未选择这么做。</p>"}},{"type":"prose","value":{"id":"图片","title":"图片","isH3":false,"content":"<p>除了 JavaScript 和 CSS，网站通常还会包含大量的图片。当你把 <a href=\"/zh-CN/docs/Web/HTML/Element/img\"><code>&lt;img&gt;</code></a> 元素添加到网站里面时，对应的所有图片资源都会在页面初始化时被下载下来。在网站就绪之前下载几 M 的图片资源并不罕见，但它还是会给人一种性能不好的印象。我们并不需要在一打开网站的时候就以最高的画质呈现所有的图片。</p>\n<p>这也是可以优化的。首先，你可以使用类似 <a href=\"https://tinypng.com/\" class=\"external\" rel=\" noopener\">TinyPNG</a> 这类服务，它可以在不过分降低画质的情况下压缩文件的大小。如果你已经做了这一点，那就可以考虑一下如何通过 JavaScript 来优化图片的下载了，我们将会在下面的篇幅提到这些内容。</p>"}},{"type":"prose","value":{"id":"图片占位符","title":"图片占位符","isH3":true,"content":"<p>在 js13kPWA 示例中，我们可以通过 JavaScript 有选择地加载图片，而不是把所有的游戏截图路径都直接放进 <code>&lt;img&gt;</code> 标签的 <code>src</code> 属性里面，因为这会使浏览器自动下载所有的图片。在图片最终加载之前，示例页面会将图片的最终路径存放到 <code>data-src</code> 中。在这个阶段，应用会使用图片占位符来代替真正的图片，它更轻量级，体积更小（加载也更快，译者注）。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>data/img/placeholder.png<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">data-src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>data/img/SLUG.jpg<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>NAME<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>这些图片会在网站构建完 HTML 主体框架之后通过 JavaScript 进行加载。图片占位符被缩放到和真正的图片一样大小，所以它会占据同样的空间，在真正的图片完成加载后，也不会导致页面重绘。</p>"}},{"type":"prose","value":{"id":"通过_javascript_进行加载","title":"通过 JavaScript 进行加载","isH3":true,"content":"<p><code>app.js</code> 这个文件处理 <code>data-src</code> 属性的过程如下所示：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> imagesToLoad <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img[data-src]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">loadImages</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">image</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  image<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  image<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    image<span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>当函数 <code>loadImages</code> 把图片地址从 <code>data-src</code> 移动到 <code>src</code> 上时，<code>imagesToLoad</code> 变量包含了所有图片的链接。当每个图片都已经加载完成时，我们会把 <code>data-src</code> 属性移除掉，因为它已经没有任何用处了。我们遍历所有的图片，然后加载它们：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>imagesToLoad<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">img</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">loadImages</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"用_css_制造模糊效果","title":"用 CSS 制造模糊效果","isH3":true,"content":"<p>为了让整个过程视觉效果更好，图片占位符的样式用 CSS 做了模糊处理：</p>\n<p>\n  <img src=\"/en-US/docs/Web/Progressive_web_apps/Loading/js13kpwa-placeholders.png\" alt=\"js13kPWA 应用中占位符图片的效果截图\" width=\"675\" height=\"684\" loading=\"lazy\">\n</p>\n<p>我们一开始用模糊滤镜来渲染图像，然后就可以实现从模糊到清晰图像的过渡效果：</p>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">article img[data-src]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">blur</span><span class=\"token punctuation\">(</span>0.2em<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">article img</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">blur</span><span class=\"token punctuation\">(</span>0em<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> filter 0.5s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>这个样式会在半秒钟内移除模糊效果，它会让加载效果看起来更好看。</p>"}},{"type":"prose","value":{"id":"按需加载","title":"按需加载","isH3":false,"content":"<p>上面讨论的图片加载机制还不错：在 HTML 文档加载完成之后再开始加载图片，在加载过程中还提供了一个很漂亮的过渡效果。问题是，即使用户有可能只看前两张或者三张图片，它仍然会一次性加载所有的图片。</p>\n<p>这个问题可以用新的 <a href=\"/zh-CN/docs/Web/API/Intersection_Observer_API\">Intersection Observer API</a> 来解决。通过这个 API，我们可以确保只有当图片出现在可见区域时，它才会被加载。</p>"}},{"type":"prose","value":{"id":"intersection_observer","title":"Intersection Observer","isH3":true,"content":"<p>这是为上述可用示例提供的一个渐进增强功能：<a href=\"/zh-CN/docs/Web/API/Intersection_Observer_API\">Intersection Observer</a> 只有在用户向下滚动页面，并且图片显示在屏幕上时，才会开始加载目标图片。</p>\n<p>这里有相关的代码示例：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">'IntersectionObserver'</span> <span class=\"token keyword\">in</span> window<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">items<span class=\"token punctuation\">,</span> observer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>isIntersecting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">loadImages</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        observer<span class=\"token punctuation\">.</span><span class=\"token function\">unobserve</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  imagesToLoad<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">img</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  imagesToLoad<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">img</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">loadImages</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>如果浏览器支持 <a href=\"/zh-CN/docs/Web/API/IntersectionObserver\"><code>IntersectionObserver</code></a> 对象，应用会新建一个它的实例。当一个或多个监听对象跟 Observer 发生交互时（即图片出现在视口中时），作为参数传递的函数可以用来处理一些回调事务（例如图片加载，译者注）。我们可以迭代每一个对象，并对它们进行相应的处理：当图片可见时，我们开始加载真正的图片并且停止监听这张图片，因为在图片加载完成之后，我们已经没必要再知道它的状态了。</p>\n<p>重申我们之前提到的渐进增强理念：代码这么写的好处在于，不管浏览器支不支持 Intersection Observer，应用都能够正常工作。如果浏览器不支持 Intersection Observer，我们就会用上面提到的基础方法来实现图片的加载。</p>"}},{"type":"prose","value":{"id":"更多改进","title":"更多改进","isH3":false,"content":"<p>要记得，有许多方法都可以用来优化应用加载时间，这个示例只探讨了其中的一种方法。你可以尝试让你的应用变的更加健壮，让它在没有 JavaScript 的情况下也能工作，例如使用 <a href=\"/zh-CN/docs/Web/HTML/Element/noscript\"><code>&lt;noscript&gt;</code></a> 标签来展示已经分配了最终 <code>src</code> 路径的图片，或者在 <code>&lt;img&gt;</code> 外面套上一个 <a href=\"/zh-CN/docs/Web/HTML/Element/a\"><code>&lt;a&gt;</code></a> 标签并指向对应的图片资源，当用户想看的时候，他们可以点击图片来查看。</p>\n<p>不过这个 app 本身依赖于 JavaScript，所以我们没有这么做：没有 JavaScript，游戏列表就无法加载，Service Worker 相关的代码也将无法执行。</p>\n<p>我们可以重写整个加载过程，让它不止加载图片，而是加载整个列表项，包括详细介绍和链接。当用户往下滚动的时候，就加载新的项目，让它像一个可以无限滚动的页面。这样，HTML 页面体积就能达到最小，加载时间可以更短，我们也可以获得更大的性能优势。</p>"}},{"type":"prose","value":{"id":"结论","title":"结论","isH3":false,"content":"<p>初始化时加载更少的文件、分拆成更小的模块、使用占位符，以及按需加载更多的内容，这些都能让我们获得更短的首次加载时间。这既能让应用开发者受益，也能给用户提供更加丝滑的体验。</p>\n<p>记住渐进增强的要点：不管在任何硬件或平台，都能提供一个可用的应用，但在现代浏览器中可以有更好的用户体验。</p>"}},{"type":"prose","value":{"id":"结语","title":"结语","isH3":false,"content":"<p>这就是这个系列的所有内容了。我们通过 <a href=\"https://github.com/mdn/pwa-examples/tree/master/js13kpwa\" class=\"external\" rel=\" noopener\">js13kPWA 示例应用的源码</a> 学习了渐进式 Web 应用的的用法，包括 <a href=\"/zh-CN/docs/Web/Progressive_web_apps/Introduction\">PWA 介绍</a>、<a href=\"/zh-CN/docs/Web/Progressive_web_apps/App_structure\">PWA 结构</a>、<a href=\"/en-US/docs/Web/Progressive_web_apps/Offline_Service_workers\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">通过 Service Worker 让 PWA 离线工作 (en-US)</a>、<a href=\"/en-US/docs/Web/Progressive_web_apps/Installable_PWAs\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">让 PWA 易于安装 (en-US)</a>，以及最后的通知功能。在 <a href=\"https://serviceworke.rs/\" class=\"external\" rel=\" noopener\">Service Worker Cookbook</a> 的帮助下，我们还解释了推送的原理。而在本篇文章中，我们探讨了渐进式加载的概念，包括一个使用了 <a href=\"/zh-CN/docs/Web/API/Intersection_Observer_API\">Intersection Observer API</a> 的有趣示例。</p>\n<p>请随意试验这些代码，使用 PWA 的特性来让你现有的应用更加健壮，或者创作出一点新东西。相对于常规的 Web 应用，PWA 存在巨大的优势。</p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/Progressive_web_apps/Re-engageable_Notifications_Push\"> 上一页 </a></li>\n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Web/Progressive_web_apps\"> Overview: Progressive web apps</a></li>\n    \n</ul>"}}],"toc":[{"text":"首次有效渲染","id":"首次有效渲染"},{"text":"打包还是拆分","id":"打包还是拆分"},{"text":"阻塞渲染的资源","id":"阻塞渲染的资源"},{"text":"图片","id":"图片"},{"text":"按需加载","id":"按需加载"},{"text":"更多改进","id":"更多改进"},{"text":"结论","id":"结论"},{"text":"结语","id":"结语"}],"summary":"在前面的文章我们介绍了很多 API，例如：Service Workers,、Web Manifests (en-US)、Notifications and Push (en-US)，它们让我们的示例应用 js13kPWA 成为一个渐进式 Web 应用。在这篇文章里我们将会更进一步，使用资源渐进式加载来提高整个应用的性能。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Progressive loading","locale":"en-US","native":"English (US)"},{"title":"Carga progresiva","locale":"es","native":"Español"},{"title":"Chargement progressif","locale":"fr","native":"Français"},{"title":"プログレッシブ読み込み","locale":"ja","native":"日本語"}],"source":{"folder":"zh-cn/web/progressive_web_apps/loading","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/web/progressive_web_apps/loading/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Web","title":"Web 开发技术"},{"uri":"/zh-CN/docs/Web/Progressive_web_apps","title":"渐进式 Web 应用（PWA）"},{"uri":"/zh-CN/docs/Web/Progressive_web_apps/Loading","title":"渐进式加载"}],"pageTitle":"渐进式加载 - 渐进式 Web 应用（PWA） | MDN","noIndexing":false}}