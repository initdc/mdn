{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"移动端触摸控制","mdn_url":"/zh-CN/docs/Games/Techniques/Control_mechanisms/Mobile_touch","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n  <ol>\n    <li class=\"toggle\">\n        <details>\n            <summary>Introduction</summary>\n            <ol>\n              <li><a href=\"/zh-CN/docs/Games/Introduction\">Introduction</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Anatomy\">Anatomy</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Examples\">Examples</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>APIs for game development</summary>\n            <ol>\n              <li><a href=\"/zh-CN/docs/Web/API/Canvas_API\">Canvas</a></li>\n              <li><a href=\"/zh-CN/docs/Web/CSS\">CSS</a></li>\n              <li><a href=\"/zh-CN/docs/Web/API/Fullscreen_API\">Full screen</a></li>\n              <li><a href=\"/zh-CN/docs/Web/API/Gamepad_API\">Gamepad</a></li>\n              <li><a href=\"/zh-CN/docs/Web/API/IndexedDB_API\">IndexedDB</a></li>\n              <li><a href=\"/zh-CN/docs/Web/JavaScript\">JavaScript</a></li>\n              <li><a href=\"/zh-CN/docs/Web/API/Pointer_Lock_API\">Pointer Lock</a></li>\n              <li><a href=\"/zh-CN/docs/Web/SVG\">SVG</a></li>\n              <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">Typed Arrays</a></li>\n              <li><a href=\"/zh-CN/docs/Web/API/Web_Audio_API\">Web Audio</a></li>\n              <li><a href=\"/zh-CN/docs/Web/API/WebGL_API\">WebGL</a></li>\n              <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API\">WebRTC</a></li>\n              <li><a href=\"/zh-CN/docs/Web/API/WebSockets_API\">WebSockets</a></li>\n              <li><a href=\"/zh-CN/docs/Web/API/WebVR_API\">WebVR</a></li>\n              <li><a href=\"/zh-CN/docs/Web/API/Web_Workers_API\">Web Workers</a></li>\n              <li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Techniques</summary>\n            <ol>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/Async_scripts\">Using async scripts for asm.js</a></li>\n              <li><a href=\"/zh-CN/docs/Web/Apps/Developing/Optimizing_startup_performance\">Optimizing startup performance</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/WebRTC_data_channels\">Using WebRTC peer-to-peer data channels</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/Efficient_animation_for_web_games\">Efficient animation for web games</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/Audio_for_Web_Games\">Audio for Web Games</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/2D_collision_detection\">2D collision detection</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/Tilemaps\">Tiles and tilemaps overview</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>3D games on the Web</summary>\n            <ol>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/3D_on_the_web\">3D games on the Web overview</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/3D_on_the_web/Basic_theory\">Explaining basic 3D theory</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_A-Frame\">Building up a basic demo with A-Frame</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Babylon.js\">Building up a basic demo with Babylon.js</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_PlayCanvas\">Building up a basic demo with PlayCanvas</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Three.js\">Building up a basic demo with Three.js</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/3D_on_the_web/WebVR\">WebVR</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/3D_collision_detection\">3D collision detection</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/3D_collision_detection/Bounding_volume_collision_detection_with_THREE.js\">Bounding volume collision detection with THREE.js</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Implementing game control mechanisms</summary>\n            <ol>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/Control_mechanisms\">Control mechanisms</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/Control_mechanisms/Mobile_touch\">Mobile touch</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/Control_mechanisms/Desktop_with_mouse_and_keyboard\">Desktop with mouse and keyboard</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/Control_mechanisms/Desktop_with_gamepad\">Desktop with gamepad</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/Control_mechanisms/Other\">Other</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Tutorials</summary>\n            <ol>\n              <li><a href=\"/zh-CN/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript\">2D breakout game using pure JavaScript</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Tutorials/2D_breakout_game_Phaser\">2D breakout game using Phaser</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Tutorials/HTML5_Gamedev_Phaser_Device_Orientation\">2D maze_game with device orientation</a></li>\n              <li><a href=\"https://mozdevs.github.io/html5-games-workshop/en/guides/platformer/start-here/\">2D platform game using Phaser</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Publishing games</summary>\n            <ol>\n              <li><a href=\"/zh-CN/docs/Games/Publishing_games\">Publishing games overview</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Publishing_games/Game_distribution\">Game distribution</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Publishing_games/Game_promotion\">Game promotion</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Publishing_games/Game_monetization\">Game monetization</a></li>\n            </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    \n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Games/Techniques/Control_mechanisms\"> Overview: Control mechanisms</a></li>\n    <li><a class=\"button minimal only-in-en-us\" href=\"/en-US/docs/Games/Techniques/Control_mechanisms/Desktop_with_mouse_and_keyboard\" title=\"Currently only available in English (US)\"> 下一页   (en-US)</a></li>\n</ul>\n<p>未来手游一定是 Web 的天下，许多开发在游戏开发过程中首先选择手游 — 既然如此，触摸控制是不可少的。我们将在本教程中了解怎样简单地在移动端 H5 游戏中实现触摸控制，只要移动端支持触摸，你就可以尽情的玩。</p>\n<p><strong>说明</strong>：游戏 <a href=\"http://rogers2.enclavegames.com/demo/\" class=\"external\" rel=\" noopener\">Captain Rogers: Battle at Andromeda</a> 是基于<a href=\"http://phaser.io/\" class=\"external\" rel=\" noopener\">Phaser</a> 和 Phaser-based 管理控制，但它也可以用纯 JavaScript 实现。使用 Phaser 的好处它提供了辅助变量和方法可以直接调用，有助于快速的开发游戏，这需要根据项目实际情况选择。</p>"}},{"type":"prose","value":{"id":"纯_javascript_方式实现","title":"纯 JavaScript 方式实现","isH3":false,"content":"<p>我们可以实现自己的触摸事件 — 给 document 添加事件监听，并传入自定义功能的方法，非常简单：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nel<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"touchstart\"</span><span class=\"token punctuation\">,</span> handleStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nel<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"touchmove\"</span><span class=\"token punctuation\">,</span> handleMove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nel<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"touchend\"</span><span class=\"token punctuation\">,</span> handleEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nel<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"touchcancel\"</span><span class=\"token punctuation\">,</span> handleCancel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这样，在移动设备上屏幕上触摸游戏的 <a href=\"/zh-CN/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> 将触发这些事件，因为我们就可以随意操控游戏（如：移动太空船）。事件如下所示：</p>\n<ul>\n  <li><a href=\"/zh-CN/docs/Web/API/Element/touchstart_event\">touchstart</a> 当用户手指放在屏幕上触发。</li>\n  <li><a href=\"/zh-CN/docs/Web/API/Element/touchmove_event\">touchmove</a> 当他们在屏幕上移动手指时触发。</li>\n  <li><a href=\"/en-US/docs/Web/API/Element/touchend_event\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">touchend (en-US)</a> 当用户在屏幕上停止移动时触发。</li>\n  <li><a href=\"/zh-CN/docs/Web/API/Element/touchcancel_event\">touchcancel</a> 触摸被取消是触发，例如当用户将他们的手指移动到屏幕之外时。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 这篇 <a href=\"/zh-CN/docs/Web/API/Touch_events\">touch events</a> 参考文章提供了更多的实例和介绍。</p>\n</div>"}},{"type":"prose","value":{"id":"纯_javascript_示例","title":"纯 JavaScript 示例","isH3":true,"content":"<p>这个实现了移动端触摸的<a href=\"https://github.com/end3r/JavaScript-Game-Controls/\" class=\"external\" rel=\" noopener\">little demo</a>代码已经放到了 GibHub 上，我们下载这个示例就可以实现在移动端屏幕上移动飞船。</p>\n<p>我们将两种事件：<code>touchstart</code> 和<code>touchmove</code> 放到一个方法里处理。为什么呢？ <code>touchHandler</code> 方法定义的飞船位置变量适合下面两种情况下：当玩家触摸时，但不移动它（<code>touchstart</code>）和当手指在屏幕上开始移动（<code>touchmove</code>）：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"touchstart\"</span><span class=\"token punctuation\">,</span> touchHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"touchmove\"</span><span class=\"token punctuation\">,</span> touchHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>touchHandler</code> 方法的代码如下：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">touchHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>touches<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        playerX <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>touches<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pageX <span class=\"token operator\">-</span> canvas<span class=\"token punctuation\">.</span>offsetLeft <span class=\"token operator\">-</span> playerWidth <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        playerY <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>touches<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pageY <span class=\"token operator\">-</span> canvas<span class=\"token punctuation\">.</span>offsetTop <span class=\"token operator\">-</span> playerHeight <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        output<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"Touch: \"</span><span class=\"token operator\">+</span> <span class=\"token string\">\" x: \"</span> <span class=\"token operator\">+</span> playerX <span class=\"token operator\">+</span> <span class=\"token string\">\", y: \"</span> <span class=\"token operator\">+</span> playerY<span class=\"token punctuation\">;</span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>If the touch occurs (<code>touches</code> object is not empty), then we will have all the info we need in that object. We can get the first touch (<code>e.touches[0]</code>, our example is not multitouch-enabled), extract the <code>pageX</code> and <code>pageY</code> variables and set the player's ship position on the screen by subtracting the Canvas offset (distance from the Canvas and the edge of the screen) and half the player's width and height.</p>\n<p>\n  <img src=\"/en-US/docs/Games/Techniques/Control_mechanisms/Mobile_touch/controls-touch.png\" alt=\"Touch controls for the player's ship, with visible output of the x and y position.\" width=\"600\" height=\"455\" loading=\"lazy\">\n</p>\n<p>To see if it's working correctly we can output the <code>x</code> and <code>y</code> positions using the <code>output</code> element. The <code>preventDefault()</code> function is needed to prevent the browser from moving — without it you'd have the default behaviour, and the Canvas would be dragged around the page, which would show the browser scroll bars and look messy.</p>"}},{"type":"prose","value":{"id":"touch_events_in_phaser","title":"Touch events in Phaser","isH3":false,"content":"<p>We don't have to do this on our own; frameworks like Phaser offer systems for managing touch events for us — see <a href=\"http://phaser.io/docs/2.6.1/Phaser.Touch.html\" class=\"external\" rel=\" noopener\">managing the touch events</a>.</p>"}},{"type":"prose","value":{"id":"pointer_theory","title":"Pointer theory","isH3":true,"content":"<p>A <a href=\"http://phaser.io/docs/2.6.1/Phaser.Pointer.html\" class=\"external\" rel=\" noopener\">pointer</a> represents a single finger on the touch screen. Phaser starts two pointers by default, so two fingers can perform an action at once. Captain Rogers is a simple game — it can be controlled by two fingers, the left one moving the ship and the right one controlling the ship's gun. There's no multitouch or gestures — everything is handled by single pointer inputs.</p>\n<p>You can add more pointers to the game by using; <code>this.game.input.addPointer</code> up to ten pointers can be managed simultaneously. The most recently used pointer is available in the <code>this.game.input.activePointer</code> object — the most recent finger active on the screen.</p>\n<p>If you need to access a specific pointer, they are all available at, <code>this.game.input.pointer1</code>, <code>this.game.input.pointer2</code>, etc. They are assigned dynamically, so if you put three fingers on the screen, then, <code>pointer1</code>, <code>pointer2</code>, and <code>pointer3</code> will be active. Removing the second finger, for example, won't affect the other two, and setting it back again will use the first available property, so <code>pointer2</code> will be used again.</p>\n<p>You can quickly get the coordinates of the most recently active pointer via the <code>this.game.input.x</code> and <code>this.game.input.y</code> variables.</p>"}},{"type":"prose","value":{"id":"input_events","title":"Input events","isH3":true,"content":"<p>Instead of using the pointers directly it is also possible to listen for <code>this.game.input</code> events, like <code>onDown</code>, <code>onUp</code>, <code>onTap</code> and <code>onHold</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span>onDown<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>itemTouched<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">itemTouched</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pointer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do something</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The <code>itemTouched()</code> function will be executed when the <code>onDown</code> event is dispatched by touching the screen. The <code>pointer</code> variable will contain the information about the pointer that activated the event.</p>\n<p>This approach uses the generally available <code>this.game.input</code> object, but you can also detect the actions on any game objects like sprites or buttons by using <code>onInputOver</code>, <code>onInputOut</code>, <code>onInputDown</code>, <code>onInputUp</code>, <code>onDragStart</code>, or <code>onDragStop</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">.</span>onInputOver<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>itemTouched<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">itemTouched</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">button<span class=\"token punctuation\">,</span> pointer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do something</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>That way you'll be able to attach an event to any object in the game, like the player's ship, and react to the actions performed by the user.</p>\n<p>An additional advantage of using Phaser is that the buttons you create will take any type of input, whether it's a touch on mobile or a click on desktop — the framework sorts this out in the background for you.</p>"}},{"type":"prose","value":{"id":"implementation","title":"Implementation","isH3":true,"content":"<p>The easiest way to add an interactive object that will listen for user input is to create a button:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> buttonEnclave <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">.</span><span class=\"token function\">button</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'logo-enclave'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clickEnclave<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>This one is formed in the <code>MainMenu</code> state — it will be placed ten pixels from the top left corner of the screen, use the <code>logo-enclave</code> image, and execute the <code>clickEnclave()</code> function when it is touched. This will work on mobile and desktop out of the box. There are a few buttons in the main menu, including the one that will start the game.</p>\n<p>For the actual gameplay, instead of creating more buttons and covering the small mobile screen with them, we can use something a little bit different: we'll create invisible areas which respond to the given action. From a design point of view, it is better to make the field of activity bigger without covering half of the screen with button images. For example, tapping on the right side of the screen will fire the weapon:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buttonShoot <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">.</span><span class=\"token function\">button</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>world<span class=\"token punctuation\">.</span>width<span class=\"token operator\">*</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'button-alpha'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buttonShoot<span class=\"token punctuation\">.</span>onInputDown<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>goShootPressed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buttonShoot<span class=\"token punctuation\">.</span>onInputUp<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>goShootReleased<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The code above will create a new button using a transparent image that covers the right half of the screen. You can assign functions on input down and input up separately if you'd like to perform more complicated actions, but in this game touching the right side of the screen will simply fire the bullets to the right — this is all we need in this case.</p>\n<p>Moving the player could be managed by creating the four directional buttons, but we can take the advantage of touch screens and drag the player's ship around:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> player <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">.</span><span class=\"token function\">sprite</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ship'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nplayer<span class=\"token punctuation\">.</span>inputEnabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nplayer<span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">enableDrag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nplayer<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">.</span>onDragStart<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>onDragStart<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nplayer<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">.</span>onDragStop<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>onDragStop<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">onDragStart</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sprite<span class=\"token punctuation\">,</span> pointer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do something when dragging</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>We can pull the ship around and do something in the meantime, and react when the drag is stopped. Hauling in Phaser, if enabled, will work out of the box — you don't have to set the position of the sprite yourself manually, so you could leave the <code>onDragStart()</code> function empty, or place some debug output to see if it's working correctly. The <code>pointer</code> element contains the <code>x</code> and <code>y</code> variables storing the current position of the dragged element.</p>"}},{"type":"prose","value":{"id":"dedicated_plugins","title":"Dedicated plugins","isH3":true,"content":"<p>You could go even further and use dedicated plugins like <a href=\"http://phaser.io/shop/plugins/virtualjoystick\" class=\"external\" rel=\" noopener\">Virtual Joystick</a> — this is a paid, official Phaser plugin, but you can find free and <a href=\"https://github.com/Gamegur-us/phaser-touch-control-plugin\" class=\"external\" rel=\" noopener\">open source alternatives</a>. The initialization of Virtual Joystick looks like this:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pad <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>Phaser<span class=\"token punctuation\">.</span>VirtualJoystick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pad<span class=\"token punctuation\">.</span><span class=\"token function\">addStick</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'generic'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>In the <code>create()</code> function of the <code>Game</code> state we're creating a virtual pad and a generic stick that has four directional virtual buttons by default. This is placed 30 pixels from the top and left edges of the screen and is 80 pixels wide.</p>\n<p>The stick being pressed can be handled during the gameplay in the <code>update</code> function like so:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stick<span class=\"token punctuation\">.</span>isDown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// move the player</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>We can adjust the player's velocity based on the current angle of the stick and move him appropriately.</p>"}},{"type":"prose","value":{"id":"摘要","title":"摘要","isH3":false,"content":"<p>这篇文章主要讲解如何在移动端实现触摸控制; 下一篇文章我们将看到怎样添加键盘和鼠标支持。</p><ul class=\"prev-next\">\n    \n    <li><a class=\"button minimal\" href=\"/zh-CN/docs/Games/Techniques/Control_mechanisms\"> Overview: Control mechanisms</a></li>\n    <li><a class=\"button minimal only-in-en-us\" href=\"/en-US/docs/Games/Techniques/Control_mechanisms/Desktop_with_mouse_and_keyboard\" title=\"Currently only available in English (US)\"> 下一页   (en-US)</a></li>\n</ul>"}}],"toc":[{"text":"纯 JavaScript 方式实现","id":"纯_javascript_方式实现"},{"text":"Touch events in Phaser","id":"touch_events_in_phaser"},{"text":"摘要","id":"摘要"}],"summary":"未来手游一定是 Web 的天下，许多开发在游戏开发过程中首先选择手游 — 既然如此，触摸控制是不可少的。我们将在本教程中了解怎样简单地在移动端 H5 游戏中实现触摸控制，只要移动端支持触摸，你就可以尽情的玩。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Mobile touch controls","locale":"en-US","native":"English (US)"}],"source":{"folder":"zh-cn/games/techniques/control_mechanisms/mobile_touch","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/games/techniques/control_mechanisms/mobile_touch/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Games","title":"游戏开发环境"},{"uri":"/zh-CN/docs/Games/Techniques","title":"Techniques for game development"},{"uri":"/zh-CN/docs/Games/Techniques/Control_mechanisms","title":"Implementing game control mechanisms"},{"uri":"/zh-CN/docs/Games/Techniques/Control_mechanisms/Mobile_touch","title":"移动端触摸控制"}],"pageTitle":"移动端触摸控制 - 游戏开发环境 | MDN","noIndexing":false}}