{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"GLSL 着色器","mdn_url":"/zh-CN/docs/Games/Techniques/3D_on_the_web/GLSL_Shaders","locale":"zh-CN","native":"中文 (简体)","sidebarHTML":"\n  <ol>\n    <li class=\"toggle\">\n        <details>\n            <summary>Introduction</summary>\n            <ol>\n              <li><a href=\"/zh-CN/docs/Games/Introduction\">Introduction</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Anatomy\">Anatomy</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Examples\">Examples</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>APIs for game development</summary>\n            <ol>\n              <li><a href=\"/zh-CN/docs/Web/API/Canvas_API\">Canvas</a></li>\n              <li><a href=\"/zh-CN/docs/Web/CSS\">CSS</a></li>\n              <li><a href=\"/zh-CN/docs/Web/API/Fullscreen_API\">Full screen</a></li>\n              <li><a href=\"/zh-CN/docs/Web/API/Gamepad_API\">Gamepad</a></li>\n              <li><a href=\"/zh-CN/docs/Web/API/IndexedDB_API\">IndexedDB</a></li>\n              <li><a href=\"/zh-CN/docs/Web/JavaScript\">JavaScript</a></li>\n              <li><a href=\"/zh-CN/docs/Web/API/Pointer_Lock_API\">Pointer Lock</a></li>\n              <li><a href=\"/zh-CN/docs/Web/SVG\">SVG</a></li>\n              <li><a href=\"/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">Typed Arrays</a></li>\n              <li><a href=\"/zh-CN/docs/Web/API/Web_Audio_API\">Web Audio</a></li>\n              <li><a href=\"/zh-CN/docs/Web/API/WebGL_API\">WebGL</a></li>\n              <li><a href=\"/zh-CN/docs/Web/API/WebRTC_API\">WebRTC</a></li>\n              <li><a href=\"/zh-CN/docs/Web/API/WebSockets_API\">WebSockets</a></li>\n              <li><a href=\"/zh-CN/docs/Web/API/WebVR_API\">WebVR</a></li>\n              <li><a href=\"/zh-CN/docs/Web/API/Web_Workers_API\">Web Workers</a></li>\n              <li><a href=\"/zh-CN/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Techniques</summary>\n            <ol>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/Async_scripts\">Using async scripts for asm.js</a></li>\n              <li><a href=\"/zh-CN/docs/Web/Apps/Developing/Optimizing_startup_performance\">Optimizing startup performance</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/WebRTC_data_channels\">Using WebRTC peer-to-peer data channels</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/Efficient_animation_for_web_games\">Efficient animation for web games</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/Audio_for_Web_Games\">Audio for Web Games</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/2D_collision_detection\">2D collision detection</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/Tilemaps\">Tiles and tilemaps overview</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>3D games on the Web</summary>\n            <ol>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/3D_on_the_web\">3D games on the Web overview</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/3D_on_the_web/Basic_theory\">Explaining basic 3D theory</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_A-Frame\">Building up a basic demo with A-Frame</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Babylon.js\">Building up a basic demo with Babylon.js</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_PlayCanvas\">Building up a basic demo with PlayCanvas</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Three.js\">Building up a basic demo with Three.js</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/3D_on_the_web/WebVR\">WebVR</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/3D_collision_detection\">3D collision detection</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/3D_collision_detection/Bounding_volume_collision_detection_with_THREE.js\">Bounding volume collision detection with THREE.js</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Implementing game control mechanisms</summary>\n            <ol>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/Control_mechanisms\">Control mechanisms</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/Control_mechanisms/Mobile_touch\">Mobile touch</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/Control_mechanisms/Desktop_with_mouse_and_keyboard\">Desktop with mouse and keyboard</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/Control_mechanisms/Desktop_with_gamepad\">Desktop with gamepad</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Techniques/Control_mechanisms/Other\">Other</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Tutorials</summary>\n            <ol>\n              <li><a href=\"/zh-CN/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript\">2D breakout game using pure JavaScript</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Tutorials/2D_breakout_game_Phaser\">2D breakout game using Phaser</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Tutorials/HTML5_Gamedev_Phaser_Device_Orientation\">2D maze_game with device orientation</a></li>\n              <li><a href=\"https://mozdevs.github.io/html5-games-workshop/en/guides/platformer/start-here/\">2D platform game using Phaser</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Publishing games</summary>\n            <ol>\n              <li><a href=\"/zh-CN/docs/Games/Publishing_games\">Publishing games overview</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Publishing_games/Game_distribution\">Game distribution</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Publishing_games/Game_promotion\">Game promotion</a></li>\n              <li><a href=\"/zh-CN/docs/Games/Publishing_games/Game_monetization\">Game monetization</a></li>\n            </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>使用 GLSL 的着色器 (shader), GLSL 是一门特殊的有着类似于 C 语言的语法，在图形管道 (graphic pipeline) 中直接可执行的 OpenGL 着色语言。着色器有两种类型 -- 顶点着色器 (Vertex Shader) 和片段着色器 (Fragment Shader). 前者是将形状转换到真实的 3D 绘制坐标中，后者是计算最终渲染的颜色和其他属性用的。</p>\n<p>GLSL 不同于 JavaScript, 它是强类型语言，并且内置很多数学公式用于计算向量和矩阵。快速编写着色器非常复杂，但创建一个简单的着色器并不难。在这篇文章我们将介绍使用着色器的基础知识，并且构建一个使用 Three.js 的例子来加速代码编写。</p>\n<p>你可能记得<a href=\"/zh-CN/docs/Games/Techniques/3D_on_the_web/Basic_theory\">基本原理</a>那篇文章，一个顶点 (vertex) 是在空间中有自己 3D 坐标的点，并且通常包含些被定义的其他信息。空间本身会被坐标系统定义。在那个 3D 空间中一切都是关于形状的呈现。</p>"}},{"type":"prose","value":{"id":"着色器类型","title":"着色器类型","isH3":false,"content":"<p>一个着色器实际上就是一个绘制东西到屏幕上的函数。着色器运行在 GPU 中，它对这些操作进行了很多的优化，这样你就可以卸载很多不必要的 CPU, 然后集中处理能力去执行你自己的代码。</p>"}},{"type":"prose","value":{"id":"顶点着色器","title":"顶点着色器","isH3":true,"content":"<p>顶点着色器操作 3D 空间的坐标并且每个顶点都会调用一次这个函数。其目的是设置 <code>gl_Position</code> 变量 -- 这是一个特殊的全局内置变量，它是用来存储当前顶点的位置：</p>\n<div class=\"code-example\"><pre class=\"brush: glsl notranslate\"><code><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  gl_Position <span class=\"token operator\">=</span> makeCalculationsToHaveCoordinates<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>这个 <code>void main()</code> 函数是定义全局<code>gl_Position</code> 变量的标准方式。所有在这个函数里面的代码都会被着色器执行。如果将 3D 空间中的位置投射到 2D 屏幕上这些信息都会保存在计算结果的变量中。</p>"}},{"type":"prose","value":{"id":"片段着色器","title":"片段着色器","isH3":true,"content":"<p>片段 (或者纹理) 着色器 在计算时定义了每像素的 RGBA 颜色 — 每个像素只调用一次片段着色器。这个着色器的作用是设置 <code>gl_FragColor</code> 变量，也是一个 GLSL 内置变量：</p>\n<div class=\"code-example\"><pre class=\"brush: glsl notranslate\"><code><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  gl_FragColor <span class=\"token operator\">=</span> makeCalculationsToHaveColor<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>计算结果包含 RGBA 颜色信息。</p>"}},{"type":"prose","value":{"id":"示例","title":"示例","isH3":false,"content":"<p>让我们构建一个简单的例子来解释这些着色器的动作。假设你已经看过<a href=\"/zh-CN/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Three.js\">Three.js 教程</a>并掌握了场景，物体和材质的基本概念。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>备注：</strong> 记住你没必要使用 Three.js 或者其他库来编写着色器 -- 纯<a href=\"/zh-CN/docs/Web/API/WebGL_API\">WebGL</a> 完全够了。我们这里使用 Three.js 来制作背景代码更简单和易理解。所以你只需关注着色器代码。Three.js 和其他 3D 库给你抽象了很多东西出来 -- 如果你想要用纯 WebGL 创建这个例子，你得写很多其他的代码才能运行。</p>\n</div>"}},{"type":"prose","value":{"id":"环境设置","title":"环境设置","isH3":true,"content":"<p>要开始编写 WebGL 着色器你不需要做太多，只需：</p>\n<ul>\n  <li>确保你在使用对 <a href=\"/zh-CN/docs/Web/API/WebGL_API\">WebGL</a> 有良好支持的现代浏览器，比如最新版的 Firefox 或 Chrome.</li>\n  <li>创建一个目录保存你的实验。</li>\n  <li>拷贝一份的 <a href=\"https://threejs.org/build/three.min.js\" class=\"external\" rel=\" noopener\">压缩版的 Three.js 库</a> 到你的目录。</li>\n</ul>"}},{"type":"prose","value":{"id":"html_结构","title":"HTML 结构","isH3":true,"content":"<p>这是将用到的 HTML 结构。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>MDN Games: Shaders demo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token style\"><span class=\"token language-css\">\n        <span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token selector\">canvas</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>three.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>vertexShader<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x-shader/x-vertex<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token comment\">// 顶点着色器代码在这里</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fragmentShader<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x-shader/x-fragment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token comment\">// 片段着色器代码在这里</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token comment\">// 场景设置在这里</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>其包含了一些基本信息比如文档的 <a href=\"/zh-CN/docs/Web/HTML/Element/title\"><code>&lt;title&gt;</code></a>，并且设置了 <a href=\"/zh-CN/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> 元素 css 样式的宽高，Three.js 会插入到页面中占满整个可视区域。<a href=\"/zh-CN/docs/Web/HTML/Element/script\"><code>&lt;script&gt;</code></a> 元素在包含 Three.js 库的 <a href=\"/zh-CN/docs/Web/HTML/Element/head\"><code>&lt;head&gt;</code></a> 中。我们的代码将写在 <a href=\"/zh-CN/docs/Web/HTML/Element/body\"><code>&lt;body&gt;</code></a> 标签中的 script 标签中：</p>\n<ol>\n  <li>首先将包含顶点着色器。</li>\n  <li>然后包含片段着色器。</li>\n  <li>最后会包含一些生成实际场景的 JavaScript 代码。</li>\n</ol>\n<p>阅读之前，复制这些代码到一个新的文本文件中，保存到你的工作目录作为 <code>index.html</code>. 我们将在这个文件中创建一个简单的立方体来解释着色器是如何工作的。</p>"}},{"type":"prose","value":{"id":"立方体源代码","title":"立方体源代码","isH3":true,"content":"<p>我们可以复用<a href=\"/zh-CN/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Three.js\">Building up a basic demo with Three.js</a> 中立方体的源代码，大多数元素例如渲染器，摄像机和灯光都没有发生改变，但是基本的材质会用到自己写的着色器。</p>\n<p>去<a href=\"https://github.com/end3r/MDN-Games-3D/blob/gh-pages/Three.js/cube.html\" class=\"external\" rel=\" noopener\">cube.html file on GitHub</a>中，复制第二个<a href=\"/zh-CN/docs/Web/HTML/Element/script\"><code>&lt;script&gt;</code></a>元素中所有的 JavaScript 代码，粘贴到当前例子中的第三个<code>&lt;script&gt;</code> 标签中。保存并运行 <code>index.html</code> — 然后你会看到一个蓝色立方体</p>"}},{"type":"prose","value":{"id":"顶点着色器代码","title":"顶点着色器代码","isH3":true,"content":"<p>让我们继续编写顶点着色器 — 添加下面这段代码到你 body 的第一个 <code>&lt;script&gt;</code> 标签：</p>\n<div class=\"code-example\"><pre class=\"brush: glsl notranslate\"><code><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  gl_Position <span class=\"token operator\">=</span> projectionMatrix <span class=\"token operator\">*</span> modelViewMatrix <span class=\"token operator\">*</span> <span class=\"token keyword\">vec4</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">.</span>z<span class=\"token operator\">+</span><span class=\"token number\">5.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>每次的<code>gl_Position</code> 的结果是计算 model-view 矩阵和投射矩阵和投射矩阵相乘并得到最后的顶点位置。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>备注：</strong> 你可以在 <a href=\"/zh-CN/docs/Games/Techniques/3D_on_the_web/Basic_theory#vertex_processing\">顶点处理</a>中学到更多关于模型，视图和投射变换，并且你可以在文末看到更多学习链接。</p>\n</div>\n<p><code>projectionMatrix</code> 和 <code>modelViewMatrix</code> 两个函数都是 Three.js 提供的，并且传入了一个新的 3D 位置向量，转成着色器之后直接导致立方体向 <code>x</code> 轴移动 10 个单位，向<code>z</code> 轴移动了 5 个单位。我们可以忽略第四个参数并且保持为默认的<code>1.0</code> ; 这是用来控制 3D 空间中订单位置裁剪的，这个例子中不需要。</p>"}},{"type":"prose","value":{"id":"纹理着色器代码","title":"纹理着色器代码","isH3":true,"content":"<p>现在我们将添加纹理着色器代码 — 将以下代码复制到第二个 <code>&lt;script&gt;</code> 标签中：</p>\n<div class=\"code-example\"><pre class=\"brush: glsl notranslate\"><code><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  gl_FragColor <span class=\"token operator\">=</span> <span class=\"token keyword\">vec4</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.58</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.86</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>这将设置一个 RGBA 颜色来重建当前的蓝色灯光 — 前三个浮点数 (范围是 0.0 到 1.0) 代表红，绿，蓝，第四个值代表 alpha 通道，控制透明度 (0.0 完全透明，1.0 是完全不透明).</p>"}},{"type":"prose","value":{"id":"设置着色器","title":"设置着色器","isH3":true,"content":"<p>实际上是创建了一个新的着色器给立方体，先用 <code>basicMaterial</code> 来定义：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// var basicMaterial = new THREE.MeshBasicMaterial({color: 0x0095DD});</span>\n</code></pre></div>\n<p>然后创建 <a href=\"https://threejs.org/docs/#Reference/Materials/ShaderMaterial\" class=\"external\" rel=\" noopener\"><code>shaderMaterial</code></a>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> shaderMaterial <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>ShaderMaterial</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">vertexShader</span><span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'vertexShader'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">fragmentShader</span><span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'fragmentShader'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>这个着色器材质使用脚本中的代码并将它们赋予给材质所赋予的物体</p>\n<p>然后，在定义立方体材质那一行我们需要替换<code>basicMaterial</code> :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> cube <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Mesh</span><span class=\"token punctuation\">(</span>boxGeometry<span class=\"token punctuation\">,</span> basicMaterial<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>使用新创建的 <code>shaderMaterial</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> cube <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Mesh</span><span class=\"token punctuation\">(</span>boxGeometry<span class=\"token punctuation\">,</span> shaderMaterial<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Three.js 编译和运行这两个这两个着色器到材质所在的网格 (mesh) 上。在这个例子中，为立方体添加了有顶点和纹理着色器。好了，你已经创建了最简单的着色器，祝贺！</p>\n<p>下图是立方体最终效果：</p>\n<p>\n  <img src=\"/en-US/docs/Games/Techniques/3D_on_the_web/GLSL_Shaders/cube.png\" alt=\"Three.js blue cube demo\" width=\"600\" height=\"350\" loading=\"lazy\">\n</p>\n<p>它看起来好像和 Three.js 的立方体 demo 一样，但不同的是，位置有点轻微变化，而且同样的蓝色使用的是着色器实现。你可以看看实际操作，这里有最终代码:</p><p><iframe allowfullscreen=\"allowfullscreen\" width=\"756\" height=\"350\" src=\"https://jsfiddle.net/end3r/LL55bhrz/embedded/\" loading=\"lazy\"></iframe></p><p></p>\n<p>你也可以在 <a href=\"https://github.com/end3r/MDN-Games-3D/blob/gh-pages/Shaders/shaders.html\" class=\"external\" rel=\" noopener\">GitHub</a> 看这个例子。</p>"}},{"type":"prose","value":{"id":"总结","title":"总结","isH3":false,"content":"<p>本文教了你最基本的着色器实现。我们虽然只能做这么多，但你可以用着色器做很更多炫酷的事情 — 在 <a href=\"http://shadertoy.com/\" class=\"external\" rel=\" noopener\">ShaderToy</a> 上去看真正炫酷的例子找找灵感吧</p>"}},{"type":"prose","value":{"id":"其他链接","title":"其他链接","isH3":false,"content":"<ul>\n  <li><a href=\"http://learningwebgl.com/blog/?page_id=1217\" class=\"external\" rel=\" noopener\">学习 WebGL</a> — 基本 WebGL 知识</li>\n  <li><a href=\"https://webglfundamentals.org/webgl/lessons/webgl-shaders-and-glsl.html\" class=\"external\" rel=\" noopener\">WebGL 着色器和 WebGL 中的 GLSL 基础</a> — GLSL 特定信息</li>\n</ul>"}}],"toc":[{"text":"着色器类型","id":"着色器类型"},{"text":"示例","id":"示例"},{"text":"总结","id":"总结"},{"text":"其他链接","id":"其他链接"}],"summary":"使用 GLSL 的着色器 (shader), GLSL 是一门特殊的有着类似于 C 语言的语法，在图形管道 (graphic pipeline) 中直接可执行的 OpenGL 着色语言。着色器有两种类型 -- 顶点着色器 (Vertex Shader) 和片段着色器 (Fragment Shader). 前者是将形状转换到真实的 3D 绘制坐标中，后者是计算最终渲染的颜色和其他属性用的。","popularity":0.0006,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"GLSL Shaders","locale":"en-US","native":"English (US)"},{"title":"GLSL シェーダー","locale":"ja","native":"日本語"},{"title":"GLSL Шейдеры","locale":"ru","native":"Русский"}],"source":{"folder":"zh-cn/games/techniques/3d_on_the_web/glsl_shaders","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-cn/games/techniques/3d_on_the_web/glsl_shaders/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-CN/docs/Games","title":"游戏开发环境"},{"uri":"/zh-CN/docs/Games/Techniques","title":"Techniques for game development"},{"uri":"/zh-CN/docs/Games/Techniques/3D_on_the_web","title":"3D games on the Web"},{"uri":"/zh-CN/docs/Games/Techniques/3D_on_the_web/GLSL_Shaders","title":"GLSL 着色器"}],"pageTitle":"GLSL 着色器 - 游戏开发环境 | MDN","noIndexing":false}}