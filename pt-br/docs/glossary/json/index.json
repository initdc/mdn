{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"JSON","mdn_url":"/pt-BR/docs/Glossary/JSON","locale":"pt-BR","native":"Português (do Brasil)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>JSON</strong> (Notação de Objetos JavaScript) e um formato de dados permutável. Ele assemelha - se próximo a um sub tipo da sintaxe do <a href=\"/pt-BR/docs/Trash/MDN/JavaScript/About_JavaScript\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">JavaScript</a>, mas ele não é um tipo de script. (Veja <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a> em <a href=\"/en-US/JavaScript/Reference\">Referências JavaScript</a> para todos os detalhes). Isto é útil quando escrevemos qualquer tipo de aplicação baseada em JavaScript, incluindo web sites e extensões de navegadores. Por exemplo, você pode armazenar informações no formato em JSON no formato de <a href=\"/en-US/DOM/document.cookie\">cookies</a>, ou você pode armazenar as preferências de extensões em JSON como valor de texto nas preferências do navegador.</p>\n<p>JSON e capaz de representar números, booleanos, textos, vazios, e listas (sequência ordenada de valores) e objetos (mapeamento de valores de texto) composto por estes valores (ou por outras listas e objetos). Ele não representa nativamente tipos complexos de dados como funções, expressões regulares, datas, e muito mais. (Objetos de dados por padrão inicializam como texto contendo os dados no formato ISO, enquanto eles não mudam, a informação não é completamente perdida.) Se você precisa preservar muitos valores, você pode transformar valores como eles são inicializados, ou prioritariamente descontinuados, para habilitar JSON para representar tipos de dados adicionais.</p>"}},{"type":"prose","value":{"id":"documentação","title":"Documentação","isH3":false,"content":"<dl>\n  <dt id=\"objetos_json\"><a href=\"/en-US/JavaScript/Reference/Global_Objects/JSON\">Objetos JSON</a></dt>\n  <dd>\n    <p>Os objetos JSON contém métodos para converter valores para Notação de objetos javascript (JSON) e para converter JSON para valores.</p>\n  </dd>\n  <dt id=\"usando_o_json_nativo\"><a href=\"/en-US/Using_native_JSON\">Usando o JSON nativo</a></dt>\n  <dd>\n    <p>Este artigo cobre o ECMAScript 5 compilando a linguagem nativa JSON somado em Gecko 1.9.1.</p>\n  </dd>\n  <dt id=\"caminho_json\"><a href=\"/en-US/JSON/JSONPath\">Caminho JSON</a></dt>\n  <dd>\n    <p>Caminho JSON significa o uso XPath como sintaxe para a estrutura de requisições do JSON. Ele não é o padrão, mas apresenta maneiras de requisição em JavaScript diretamente sem precisar converte - la para xml.</p>\n  </dd>\n  <dt id=\"baixando_json_e_extensões_em_javascript\"><a href=\"/en-US/Downloading_JSON_and_JavaScript_in_extensions\">Baixando JSON e extensões em Javascript</a></dt>\n  <dd>\n    <p>A pratica habitual encontrada em muitas extensões está usando XMLHttpRequest (ou outros mecanismos) para baixar Javascript ou <a href=\"/en-US/JSON\">JSON</a> (eles são diferentes) para um site web remoto. Uma vez o conteúdo já sido baixado, a extensão escrita procedida pelo uso <a href=\"/en-US/docs/JavaScript/Reference/Functions/eval\">eval()</a> para decodificar o texto contendo objetos JavaScript, a escolha e uma prática perigosa e não deve, de fato passar na revisão <a href=\"https://addons.mozilla.org\" class=\"external\" rel=\" noopener\">AMO.</a> Este artigo mostra como evitar isto.</p>\n  </dd>\n  <dt id=\"jxon\"><a href=\"/en-US/JXON\">JXON</a></dt>\n  <dd>\n    <p>JXON padrões sem perdas de Notação de Objetos JavaScript XML, ele é um nome genérico pelo qual e definida a representação da árvore dos objetos JavaScript (JSON) usando XML.</p>\n  </dd>\n  <dt id=\"método_json.stringify\"><a href=\"/en-US/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>Método JSON.stringify</code></a></dt>\n  <dd>\n    <p>Converta valores para JSON, opcionalmente substituindo valores se a função for específica, ou opcionalmente incluindo somente propriedades especificas se a substituição na lista for especifica.</p>\n  </dd>\n  <dt id=\"método_json.parse\"><a href=\"/en-US/JavaScript/Reference/Global_Objects/JSON/parse\"><code>Método JSON.parse</code></a></dt>\n  <dd>\n    <p>Analisa a string como JSON, opcionalmente transforma o valor produzido pela análise.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"comunidade","title":"Comunidade","isH3":false,"content":"<ul>\n  <li>Veja os foruns Mozilla...</li>\n  <li><ul>\n  <li><a href=\"https://lists.mozilla.org/listinfo/dev-tech-json\" class=\"external\" rel=\" noopener\">Lista de E-mails</a></li>\n  \n  \n  <li><a href=\"https://groups.google.com/group/mozilla.dev.tech.json\" class=\"external\" rel=\" noopener\">grupo de discussão</a></li>\n  <li><a href=\"https://groups.google.com/group/mozilla.dev.tech.json/feeds\" class=\"external\" rel=\" noopener\">RSS feed</a></li>\n</ul></li>\n</ul>"}},{"type":"prose","value":{"id":"ferramentas","title":"Ferramentas","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/JavaScript/Reference/Global_Objects/JSON#browser_compatibility\">JSON polyfills</a></li>\n  <li><a href=\"http://jsonselect.org\" class=\"external\" rel=\" noopener\">JSONSelect</a></li>\n</ul>"}},{"type":"prose","value":{"id":"topicos_relacionados","title":"Topicos Relacionados","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/AJAX\">AJAX</a>,</li>\n  <li><a href=\"/en-US/JavaScript\">JavaScript</a>,</li>\n  <li><a href=\"/en-US/XUL\">XUL</a></li>\n</ul>"}},{"type":"prose","value":{"id":"usando_json_atráves_de_objetos_javascript_json","title":"Usando JSON atráves de objetos JavaScript JSON","isH3":false,"content":"<p>O mais simples, fácil caminho para usar JSON e através do padrão de <a href=\"/en-US/JavaScript/Reference/Global_Objects/JSON\">objetos JSON</a> em JavaScript. Use <a href=\"/en-US/JavaScript/Reference/Global_Objects/JSON/stringify\">JSON.stringify</a> para inicializar valores em JSON, e use <a href=\"/en-US/JavaScript/Reference/Global_Objects/JSON/parse\">JSON.parse</a> para deserializar um valor JSON.</p>\n<p>Por exemplo, para inicializar um objeto JavaScript, use o método JSON.stringify():</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> <span class=\"token string\">\"new property\"</span><span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">.</span>baz <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> JSONfoo <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>JSONfoo</code> now holds <code>{\"bar\":\"new property\",\"baz\":3}</code>. Para fazer JSONfoo voltar a ser um objeto JavaScript faça:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> backToJS <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>JSONfoo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Para mais informações, veja a <a href=\"/en-US/JavaScript/Reference/Global_Objects/JSON\">documentação de objetos JSON</a>.</p>"}},{"type":"prose","value":{"id":"método_tojson","title":"Método toJSON()","isH3":false,"content":"<p>Se um objeto define o método toJSON(), JSON.stringify pode se chamar estes métodos para determinar a representação de objetos JSON. Por exemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nx<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\nx<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toJSON</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> json1 <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>json1</code> now contains '\"bar\"'.</p>"}},{"type":"prose","value":{"id":"limitações","title":"Limitações","isH3":false,"content":"<p>Você não pode inicializar objetos que sejam membros escolhidos para funções. As especificações JSON não permitem. Por exemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>foo<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">qwerty</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foobar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">qwerty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> JSONfoo <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>will raise a <code>TypeError on line XXX: No JSON representation for this object!</code></p>"}},{"type":"prose","value":{"id":"usando_json_através_do_nsijson","title":"Usando JSON através do nsIJSON","isH3":false,"content":"<p>Versões do Firefox anteriores a 3.5 nativamente não suportam JSON, e há um único caminho para acessar as funcionalidades JSON é através do componente <code>nsIJSON, implementado</code> desde o Firefox 3. Codificando e decodificando são executados através nsIJON's métodos de codificação e decodificação. Estes métodos não acessam o JSON através de objetos JSON, e eles somente suportam valores escolhidos por listas de objetos, sem textos, booleanos, números ou vazios. (Estes valores são suportados somente por listas e objetos: o simples número 5 não irá funcionar, mas o objeto {\"valor\": 5} funcionará.)</p>\n<p>Por causa nsIJSON não ser tão eficaz como um objeto JSON, ele codifica e decodifica métodos já removidos para Firefox 7. Desenvolvedores devem escolher para uso objeto JSON.</p>\n<p>O seguinte código inicializa um objeto JavaScript usando <code>nsIJSON</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> Ci <span class=\"token operator\">=</span> Components<span class=\"token punctuation\">.</span>interfaces<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> Cc <span class=\"token operator\">=</span> Components<span class=\"token punctuation\">.</span>classes<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> <span class=\"token string\">\"new property\"</span><span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">.</span>baz <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> nativeJSON <span class=\"token operator\">=</span> Cc<span class=\"token punctuation\">[</span><span class=\"token string\">\"@mozilla.org/dom/json;1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span>Ci<span class=\"token punctuation\">.</span>nsIJSON<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> JSONfoo <span class=\"token operator\">=</span> nativeJSON<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The <code>JSONfoo</code> variable now holds the string <code>{\"bar\":\"new property\",\"baz\":3}</code>. To create an object corresponding to <code>JSONfoo</code>, just do:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> backToJS <span class=\"token operator\">=</span> nativeJSON<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>JSONfoo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"usando_json_em_outras_situações","title":"Usando JSON em outras situações","isH3":false,"content":"<p>Enquanto na teoria e possível usar JSON usando <a href=\"/en-US/JavaScript/Reference/Global_Objects/eval\">eval</a> (mas somente para descerializar objetos, e não para inicializar textos) ou usando <a href=\"https://github.com/douglascrockford/JSON-js\" class=\"external\" rel=\" noopener\">json2.js</a>, Está não é uma boa ideia. Isto não e seguro para analisar JSON usando eval por que ele permite muito mais sintaxe que JSON faz (Melhora para execução de um código aleatório). Como para json2.js, este problema e que ele adiciona métodos para compilação como Object.prototype, escolha o mais útil para parar a execução do código antecipando está possibilidade.</p>\n<p>Você deve quase sempre usa - lo ou os métodos formulados para usar JSON em preferências para qualquer outro caminho.</p>"}},{"type":"prose","value":{"id":"veja_também","title":"Veja também","isH3":false,"content":"<ul>\n  <li><code>nsIJSON</code></li>\n</ul>"}}],"toc":[{"text":"Documentação","id":"documentação"},{"text":"Comunidade","id":"comunidade"},{"text":"Ferramentas","id":"ferramentas"},{"text":"Topicos Relacionados","id":"topicos_relacionados"},{"text":"Usando JSON atráves de objetos JavaScript JSON","id":"usando_json_atráves_de_objetos_javascript_json"},{"text":"Método toJSON()","id":"método_tojson"},{"text":"Limitações","id":"limitações"},{"text":"Usando JSON através do nsIJSON","id":"usando_json_através_do_nsijson"},{"text":"Usando JSON em outras situações","id":"usando_json_em_outras_situações"},{"text":"Veja também","id":"veja_também"}],"summary":"JSON (Notação de Objetos JavaScript) e um formato de dados permutável. Ele assemelha - se próximo a um sub tipo da sintaxe do JavaScript, mas ele não é um tipo de script. (Veja JSON em Referências JavaScript para todos os detalhes). Isto é útil quando escrevemos qualquer tipo de aplicação baseada em JavaScript, incluindo web sites e extensões de navegadores. Por exemplo, você pode armazenar informações no formato em JSON no formato de cookies, ou você pode armazenar as preferências de extensões em JSON como valor de texto nas preferências do navegador.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"JSON","locale":"en-US","native":"English (US)"},{"title":"JSON","locale":"es","native":"Español"},{"title":"JSON","locale":"fr","native":"Français"},{"title":"JSON","locale":"ja","native":"日本語"},{"title":"JSON","locale":"ko","native":"한국어"},{"title":"JSON","locale":"ru","native":"Русский"},{"title":"JSON","locale":"zh-CN","native":"中文 (简体)"},{"title":"JSON","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"pt-br/glossary/json","github_url":"https://github.com/mdn/translated-content/blob/main/files/pt-br/glossary/json/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/pt-BR/docs/Glossary","title":"Glossário"},{"uri":"/pt-BR/docs/Glossary/JSON","title":"JSON"}],"pageTitle":"JSON - Glossário | MDN","noIndexing":false}}