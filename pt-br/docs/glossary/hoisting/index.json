{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Hoisting","mdn_url":"/pt-BR/docs/Glossary/Hoisting","locale":"pt-BR","native":"Português (do Brasil)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Hoisting (içamento, em português) é um termo que você <em>não</em> encontrará usado em nenhuma prosa de especificação normativa antes da <a href=\"https://www.ecma-international.org/ecma-262/6.0/index.html\" class=\"external\" rel=\" noopener\">especificação de idioma do ECMAScript® 2015</a>. Hoisting foi pensado como uma maneira geral de pensar sobre como os contextos de execução (especificamente as fases de criação e execução) funcionam em JavaScript. No entanto, o conceito pode ser um pouco confuso a princípio.</p>\n<p>Conceitualmente, por exemplo, uma definição estrita de elevação sugere que as declarações de variáveis e funções são fisicamente movidas para o topo do seu código, mas isso não é realmente o que acontece. Em vez disso, as declarações de variável e função são colocadas na memória durante a fase de <em>compilação</em>, mas permanecem exatamente onde você as digitou no seu código.</p>"}},{"type":"prose","value":{"id":"aprenda_mais","title":"Aprenda mais","isH3":false,"content":""}},{"type":"prose","value":{"id":"exemplo_técnico","title":"Exemplo técnico","isH3":true,"content":"<p>Variáveis:</p>\n<p>Uma das vantagens do JavaScript em colocar declarações de função na memória antes de executar qualquer segmento de código é que ele permite que você use uma função antes de declara-la em seu código. Por exemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"O nome do meu gato é \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tigger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\nO resultado do código acima é: \"O nome do meu gato é Tigger\"\n*/</span>\n</code></pre></div>\n<p>O trecho de código acima é como você escreveria o código para que ele funcionasse. Agora, vamos ver o que acontece quando chamamos a função antes de escrevê-la:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Chloe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"O nome do meu gato é \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\nO resultado do código acima é: \"O nome do meu gato é Chloe\"\n*/</span>\n</code></pre></div>\n<p>Mesmo que chamemos a função em nosso código primeiro, antes que a função seja escrita, o código ainda funciona. Isto ocorre por conta de como a execução de contexto funciona em JavaScript.</p>\n<p>Hoisting funciona bem com outros tipos de dados e variáveis. As variáveis podem ser inicializadas e usadas antes de serem declaradas.</p>"}},{"type":"prose","value":{"id":"apenas_declarações_são_hoistediçadas_em_português","title":"Apenas declarações são hoisted(içadas, em português)","isH3":true,"content":"<p>O JavaScript apenas eleva (hoists) as declarações, não as inicializações. Se uma variável for declarada e inicializada após usá-la, o valor será undefined. Por exemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Retorna undefined</span>\n<span class=\"token keyword\">var</span> num<span class=\"token punctuation\">;</span>\nnum <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Se você declarar a variável depois que ela for usada, mas inicializá-la antecipadamente, ela retornará o valor:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>num <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna 6</span>\n<span class=\"token keyword\">var</span> num<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Abaixo estão mais exemplos demonstrando a elevação (hoisting).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">//Exemplo 1 - Não eleva (hoist)</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Inicializa x</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '1 undefined'</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Initialize y</span>\n<span class=\"token comment\">//Isso não funcionará, pois o JavaScript apenas eleva declarações</span>\n\n<span class=\"token comment\">//Example 2 - Hoists</span>\n<span class=\"token keyword\">var</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Declara e inicializa num1</span>\nnum2 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Inicializa num2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//'3 4'</span>\n<span class=\"token keyword\">var</span> num2<span class=\"token punctuation\">;</span> <span class=\"token comment\">//Declara num2 para hoisting</span>\n\n<span class=\"token comment\">//Example 3 - Hoists</span>\na <span class=\"token operator\">=</span> <span class=\"token string\">'Cran'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Inicializa a</span>\nb <span class=\"token operator\">=</span> <span class=\"token string\">'berry'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Inicializa b</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Cranberry'</span>\n<span class=\"token keyword\">var</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">//Declara ambos a &amp; b para hoisting</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"referência_técnica","title":"Referência técnica","isH3":true,"content":"<ul>\n  <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/var\">var statement</a> — MDN</li>\n  <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/function\">function statement</a> — MDN</li>\n</ul>"}}],"toc":[{"text":"Aprenda mais","id":"aprenda_mais"}],"summary":"Hoisting (içamento, em português) é um termo que você não encontrará usado em nenhuma prosa de especificação normativa antes da especificação de idioma do ECMAScript® 2015. Hoisting foi pensado como uma maneira geral de pensar sobre como os contextos de execução (especificamente as fases de criação e execução) funcionam em JavaScript. No entanto, o conceito pode ser um pouco confuso a princípio.","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Hoisting","locale":"en-US","native":"English (US)"},{"title":"Hoisting","locale":"es","native":"Español"},{"title":"Hoisting","locale":"fr","native":"Français"},{"title":"Hoisting (巻き上げ、ホイスティング)","locale":"ja","native":"日本語"},{"title":"호이스팅","locale":"ko","native":"한국어"},{"title":"Поднятие","locale":"ru","native":"Русский"},{"title":"Hoisting（变量提升）","locale":"zh-CN","native":"中文 (简体)"},{"title":"提升（Hoisting）","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"pt-br/glossary/hoisting","github_url":"https://github.com/mdn/translated-content/blob/main/files/pt-br/glossary/hoisting/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/pt-BR/docs/Glossary","title":"Glossário"},{"uri":"/pt-BR/docs/Glossary/Hoisting","title":"Hoisting"}],"pageTitle":"Hoisting - Glossário | MDN","noIndexing":false}}