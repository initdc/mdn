{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Função First-class","mdn_url":"/pt-BR/docs/Glossary/First-class_Function","locale":"pt-BR","native":"Português (do Brasil)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Entende-se que uma linguagem de programação tem <strong>Função First-class</strong> quando suas funções são tratadas como qualquer outra variável. Por exemplo, numa linguagem desse tipo, a função pode ser passada como argumento pra outras funções, ser retornada por outra função e pode ser atribuída como um valor à uma variável.</p>"}},{"type":"prose","value":{"id":"exemplo_atribuir_uma_função_à_uma_variável","title":"Exemplo | Atribuir uma função à uma variável","isH3":false,"content":""}},{"type":"prose","value":{"id":"javascript","title":"JavaScript","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foobar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Chamar a função usando a variável</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Nós atribuímos uma <code>Função Anônima</code> à uma <code>Variável</code>, então usamos a variável pra chamar a função adicionando parênteses <code>()</code> no fim.</p>\n<blockquote>\n  <p><strong>Nota:</strong> <strong>Mesmo se sua função for nomeada,</strong> você pode usar o nome da variável pra chamá-la. Nomeá-la será útil quando for debugar seu código. <em>Mas não afetará a maneira que à chamamos.</em></p>\n</blockquote>"}},{"type":"prose","value":{"id":"exemplo_passar_uma_função_como_um_argumento","title":"Exemplo | Passar uma função como um Argumento","isH3":false,"content":""}},{"type":"prose","value":{"id":"javascript_2","title":"JavaScript","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello, \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">helloMessage<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">helloMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Passar `sayHello` como um argumento pra função `greeting`</span>\n<span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span>sayHello<span class=\"token punctuation\">,</span> <span class=\"token string\">\"JavaScript!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Nós estamos passando a função <code>sayHello()</code> como um argumento pra função <code>greeting()</code>, isso explica como estamos tratando a função como um <code>valor</code>.</p>\n<blockquote>\n  <p><strong>Nota:</strong> A função que passamos como um argumento pra outra função, chamou uma <strong><a href=\"/pt-BR/docs/Glossary/Callback_function\">Função Callback</a>.</strong> <em><code>sayHello</code> é uma Função Callback.</em></p>\n</blockquote>"}},{"type":"prose","value":{"id":"exemplo_retornar_uma_função","title":"Exemplo | Retornar uma função","isH3":false,"content":""}},{"type":"prose","value":{"id":"javascript_3","title":"JavaScript","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Neste exemplo; Precisamos retornar uma função de outra função - <em>Podemos retornar uma função porque tratamos função em JavaScript como um <strong><code>valor</code></strong>.</em></p>\n<blockquote>\n  <p><strong>Nota:</strong> Uma função que retorna uma função é chamada de <strong>Higher-Order Function</strong></p>\n</blockquote>\n<p>De volta ao nosso exemplo; Agora, precisamos chamar a função <code>sayHello</code> e a <code>Função anônima</code> retornada. Existem duas maneiras para fazermos isso:</p>"}},{"type":"prose","value":{"id":"1-_usando_uma_variável","title":"1- Usando uma variável","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> myFunc <span class=\"token operator\">=</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Dessa maneira, ela retorna a mensagem <code>Hello!</code>.</p>\n<blockquote>\n  <p><strong>Nota:</strong> Você tem que usar outra variável. Se você fosse chamar <code>sayHello</code> diretamente, ela retornaria a função em si <strong>sem chamar a função retornada</strong>.</p>\n</blockquote>"}},{"type":"prose","value":{"id":"2-_usando_parênteses_duplo","title":"2- Usando parênteses duplo","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Estamos usando parênteses duplo <code>()()</code> pra chamar também a função retornada.</p>"}},{"type":"prose","value":{"id":"saiba_mais","title":"Saiba mais","isH3":false,"content":""}},{"type":"prose","value":{"id":"conhecimento_geral","title":"Conhecimento geral","isH3":true,"content":"<ul>\n  <li><a title=\"First-class functions\" href=\"https://pt.wikipedia.org/wiki/First-class_function\" class=\"external\" rel=\" noopener\">First-class functions</a> na Wikipedia</li>\n</ul>"}}],"toc":[{"text":"Exemplo | Atribuir uma função à uma variável","id":"exemplo_atribuir_uma_função_à_uma_variável"},{"text":"Exemplo | Passar uma função como um Argumento","id":"exemplo_passar_uma_função_como_um_argumento"},{"text":"Exemplo | Retornar uma função","id":"exemplo_retornar_uma_função"},{"text":"Saiba mais","id":"saiba_mais"}],"summary":"Entende-se que uma linguagem de programação tem Função First-class quando suas funções são tratadas como qualquer outra variável. Por exemplo, numa linguagem desse tipo, a função pode ser passada como argumento pra outras funções, ser retornada por outra função e pode ser atribuída como um valor à uma variável.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"First-class Function","locale":"en-US","native":"English (US)"},{"title":"Funcion de primera clase","locale":"es","native":"Español"},{"title":"Fonction de première classe","locale":"fr","native":"Français"},{"title":"First-class Function (第一級関数)","locale":"ja","native":"日本語"},{"title":"일급 함수","locale":"ko","native":"한국어"},{"title":"Функции первого класса","locale":"ru","native":"Русский"},{"title":"First-class Function（头等函数）","locale":"zh-CN","native":"中文 (简体)"},{"title":"一級函式（First-class Function）","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"pt-br/glossary/first-class_function","github_url":"https://github.com/mdn/translated-content/blob/main/files/pt-br/glossary/first-class_function/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/pt-BR/docs/Glossary","title":"Glossário"},{"uri":"/pt-BR/docs/Glossary/First-class_Function","title":"Função First-class"}],"pageTitle":"Função First-class - Glossário | MDN","noIndexing":false}}