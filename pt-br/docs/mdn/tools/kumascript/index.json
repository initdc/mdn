{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"KumaScript","mdn_url":"/pt-BR/docs/MDN/Tools/KumaScript","locale":"pt-BR","native":"Português (do Brasil)","sidebarHTML":"\n  <ol>\n    <li><a href=\"/pt-BR/docs/MDN/About\">Sobre a MDN</a></li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Ajudar a melhorar a MDN</summary>\n            <ol>\n                <li><a href=\"/pt-BR/docs/MDN/Contribute/Getting_started\">Primeiros passos na MDN</a></li>\n                <li><a href=\"/pt-BR/docs/MDN/Contribute\">Ajudar a melhorar a MDN</a></li>\n                <li><a href=\"/pt-BR/docs/MDN/Contribute/Howto\">O que pode fazer</a></li>\n                <li><a href=\"/pt-BR/docs/MDN/Contribute/Localize\">Localizando a MDN</a></li>\n                <li><a href=\"/pt-BR/docs/MDN/Guidelines\">Diretrizes</a></li>\n                <li><a href=\"/pt-BR/docs/MDN/Structures\">Estruturas de conteúdo</a></li>\n             </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":"overview","title":"Overview","isH3":false,"content":"<p>On the <a href=\"/pt-BR/docs/MDN/Yari\">Kuma</a> platform that powers MDN, the template system for automating aspects of content on the wiki is called <a href=\"https://github.com/mdn/kumascript\" class=\"external\" rel=\" noopener\">KumaScript</a>. KumaScript is powered by server-side JavaScript, implemented using <a href=\"https://nodejs.org/en/\" class=\"external\" rel=\" noopener\">Node.js</a>. This article provides basic information on how to use KumaScript.</p>\n<p>For a detailed overview and Q&amp;A of KumaScript, watch the MDN dev team's <a href=\"https://vreplay.mozilla.com/replay/showRecordDetails.html?sortBy=date&amp;viewCount=1&amp;currentPage=1&amp;groupBy=combo&amp;roomFilter=&amp;usernameFilter=&amp;searchFilter=&amp;usernameFullFilter=&amp;myManager=-1&amp;adminManager=0&amp;webCast=0&amp;command=&amp;recId=1082&amp;auxMessage=&amp;auxMessage1=&amp;lang=en&amp;langChanged=&amp;tenantFilter=&amp;securityTab=\" class=\"external\" rel=\" noopener\">KumaScript Fireside Chat</a> (the meeting starts at 10 minutes into the video). KumaScript replaced DekiScript, which was the template language for MindTouch, the previous platform used by MDN.</p>"}},{"type":"prose","value":{"id":"what_is_kumascript","title":"What is KumaScript?","isH3":true,"content":"<ul>\n  <li>A way to reuse and localize content that appears repeatedly between documents (e.g., compatibility labels, section navigation, warning banners).</li>\n  <li>A way to build documents out of content pulled from other documents.</li>\n  <li>A way to fetch and include content from other web sites and services (e.g., Bugzilla).</li>\n</ul>"}},{"type":"prose","value":{"id":"what_kumascript_is_not","title":"What KumaScript is not","isH3":true,"content":"<ul>\n  <li>KumaScript does not support interactive scripting of the kind that can accept form submissions.</li>\n  <li>KumaScript does not have access to a database, files, or any other way to store information persistently.</li>\n  <li>KumaScript does not support site personalization based on the user currently logged in.</li>\n  <li>KumaScript does not have access to user information, only to the content and metadata of a wiki page being viewed.</li>\n</ul>"}},{"type":"prose","value":{"id":"basics","title":"Basics","isH3":false,"content":"<p>KumaScript is used on MDN in <a href=\"https://github.com/visionmedia/ejs\" class=\"external\" rel=\" noopener\">embedded JavaScript templates</a>. These templates can be invoked in document content by any MDN author, through the use of macros.</p>\n<p>A script in KumaScript is a <em>template</em>, and each template is a file in <a href=\"https://github.com/mdn/kumascript/tree/master/macros\" class=\"external\" rel=\" noopener\">the macros directory of the KumaScript repository</a> on Github. A <a href=\"https://github.com/mdn/kumascript/blob/master/macros/hello.ejs\" class=\"external\" rel=\" noopener\">template</a> looks like this:</p>\n<pre class=\"notranslate\">&lt;% for (var i = 0; i &lt; $0; i++) { %&gt;\nHello #&lt;%= i %&gt;\n&lt;% } %&gt;\n</pre>\n<p>Invoking a template is done with a <em>macro</em>, which can be used anywhere in any wiki content. A macro looks like this:</p>\n<pre class=\"notranslate\">{{ hello(\"3\") }}\n</pre>\n<p>The output of the macro looks like this:</p>\n<pre class=\"notranslate\">Hello #0\nHello #1\nHello #2\n</pre>"}},{"type":"prose","value":{"id":"macro_syntax","title":"Macro syntax","isH3":true,"content":"<p>KumaScript templates are invoked in document content with macros, like this:</p>\n<pre class=\"notranslate\">{{ templateName(\"arg0\", \"arg1\", ..., \"argN\") }}\n</pre>\n<p>Macro syntax consists of these rules:</p>\n<ul>\n  <li>Macros start and end with <code>{{</code> and <code>}}</code> characters.</li>\n  <li>The first part of the macro is the name of a template. The lowercase value of this name should match the lowercase value of one of the filenames under <a href=\"https://github.com/mdn/kumascript/tree/master/macros\" class=\"external\" rel=\" noopener\">the macros directory of KumaScript</a>.</li>\n  <li>A template can accept parameters, and this parameter list starts and ends with parentheses.</li>\n  <li>All non-numeric parameters must be in quotes. Numbers can be left unquoted.</li>\n</ul>\n<h4 id=\"using_json_as_a_macro_parameter\">Using JSON as a macro parameter</h4>\n<p>As a semi-experimental feature (not guaranteed to work), you can supply a JSON object for the first and only parameter, like so:</p>\n<pre class=\"notranslate\">{{ templateName({ \"Alpha\":\"one\", \"Beta\":[\"a\",\"b\",\"c\"], \"Foo\":\"http:\\/\\/mozilla.org\\/\" }) }}\n</pre>\n<p>The data from this macro is available in template code as an object in the <code>$0</code> argument (e.g., <code>$0.Alpha</code>, <code>$0.Beta</code>, <code>$0.Foo</code>). This also allows you to express complex data structures in macro parameters that are hard or impossible to do with a simple list of parameters.</p>\n<p>Note that this parameter style is very picky — it must adhere to <a href=\"http://json.org/\" class=\"external\" rel=\" noopener\">JSON syntax</a> exactly, which has some requirements about escaping characters that are easy to miss (e.g., all forward slashes are escaped). When in doubt, <a href=\"http://jsonlint.com/\" class=\"external\" rel=\" noopener\">try running your JSON through a validator</a>.</p>\n<h4 id=\"how_to_write_in_text\">How to write \"{{\" in text</h4>\n\n<p>Since the character sequence \"<code>{{</code>\" is used to indicate the start of a macro, this can be troublesome if you actually just want to use \"<code>{{</code>\" and \"<code>}}\" in a page. It will probably produce <code>DocumentParsingError</code> messages.In this case, you can escape the first brace with a backslash, like so: <code>\\{</code>\n</code></p>"}},{"type":"prose","value":{"id":"advanced_features","title":"Advanced Features","isH3":false,"content":"<h3 id=\"template_syntax\"><code>Template syntax</code></h3><code>\n<p>Each KumaScript template is a file under <a href=\"https://github.com/mdn/kumascript/tree/master/macros\" class=\"external\" rel=\" noopener\">the macros directory of KumaScript</a>. You create and edit these files as you would the files of any open-source project on GitHub (see <a href=\"https://github.com/mdn/kumascript\" class=\"external\" rel=\" noopener\">the KumaScript README</a> for more information).</p>\n<p>KumaScript templates are processed by an <a href=\"https://github.com/visionmedia/ejs\" class=\"external\" rel=\" noopener\">embedded JavaScript template engine</a> with a few simple rules:</p>\n<ul>\n  <li>Within a template, the parameters passed in from the macro are available as the variables <code>$0</code>, <code>$1</code>, <code>$2</code>, and so on. The entire list of parameters is also available in a template as the variable <code>arguments</code>.</li>\n  <li>Most text is treated as output and included in the output stream.</li>\n  <li>JavaScript variables and expressions can be inserted into the output stream with these blocks:\n    <ul>\n      <li><code>&lt;%= expr %&gt;</code> — the value of a JavaScript expression is escaped for HTML before being included in output (e.g., characters like <code>&lt;</code> and <code>&gt;</code> are turned into <code>&amp;lt;</code> and <code>&amp;gt;</code>).</li>\n      <li><code>&lt;%- expr %&gt;</code> — the value of a JavaScript expression is included in output without any escaping. (Use this if you want to dynamically build markup or use the results of another template that may include markup.)</li>\n      <li>It is an error to include semicolons inside these blocks.</li>\n    </ul>\n  </li>\n  <li>Anything inside a <code>&lt;% %&gt;</code> block is interpreted as JavaScript. This can include loops, conditionals, etc.</li>\n  <li>Nothing inside a <code>&lt;% %&gt;</code> block can ever contribute to the output stream. But, you can transition from JS mode to output mode using <code>&lt;% %&gt;</code>—for example:\n    <pre class=\"notranslate\">&lt;% for (var i = 0; i &lt; $0; i++) { %&gt;\nHello #&lt;%= i %&gt;\n&lt;% } %&gt;\n</pre>Note how the JavaScript code is contained in <code>&lt;% ... %&gt;</code>, and output happens in the space between <code>%&gt; ... &lt;%</code>. The <code>for</code> loop in JS can begin with one <code>&lt;% %&gt;</code> block, transition to output mode, and finish up in a second <code>&lt;% %&gt;</code> JS block.\n  </li>\n  <li>For more details on EJS syntax, <a href=\"https://github.com/visionmedia/ejs\" class=\"external\" rel=\" noopener\">check out the upstream module documentation</a>.</li>\n</ul>\n<h3 id=\"tips\">Tips</h3>\n<p>You can see a list of macros and how they are used on MDN on the <a href=\"/en-US/dashboards/macros\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">macros dashboard</a>.</p>\n\n<p>Beyond the basics, the KumaScript system offers some advanced features.</p>\n<h3 id=\"environment_variables\">Environment variables</h3>\n<p>When the wiki makes a call to the KumaScript service, it passes along some context on the current document that KumaScript makes available to templates as variables:</p>\n<dl>\n  <dt id=\"env.path\"><code>env.path</code></dt>\n  <dd>\n    <p>The path to the current wiki document</p>\n  </dd>\n  <dt id=\"env.url\"><code>env.url</code></dt>\n  <dd>\n    <p>The full URL to the current wiki document</p>\n  </dd>\n  <dt id=\"env.id\"><code>env.id</code></dt>\n  <dd>\n    <p>A short, unique ID for the current wiki document</p>\n  </dd>\n  <dt id=\"env.files\"><code>env.files</code></dt>\n  <dd>\n    <p>An array of the files attached to the current wiki document; each object in the array is as described under <a href=\"#file_objects\">File objects</a> below</p>\n  </dd>\n  <dt id=\"env.review_tags\"><code>env.review_tags</code></dt>\n  <dd>\n    <p>An array of the review tags on the article (\"technical\", \"editorial\", etc.)</p>\n  </dd>\n  <dt id=\"env.locale\"><code>env.locale</code></dt>\n  <dd>\n    <p>The locale of the current wiki document</p>\n  </dd>\n  <dt id=\"env.title\"><code>env.title</code></dt>\n  <dd>\n    <p>The title of the current wiki document</p>\n  </dd>\n  <dt id=\"env.slug\"><code>env.slug</code></dt>\n  <dd>\n    <p>The URL slug of the current wiki document</p>\n  </dd>\n  <dt id=\"env.tags\"><code>env.tags</code></dt>\n  <dd>\n    <p>An array list of tag names for the current wiki document</p>\n  </dd>\n  <dt id=\"env.modified\"><code>env.modified</code></dt>\n  <dd>\n    <p>Last modified timestamp for the current wiki document</p>\n  </dd>\n  <dt id=\"env.cache_control\"><code>env.cache_control</code></dt>\n  <dd>\n    <p><code>Cache-Control</code> header sent in the request for the current wiki document, useful in deciding whether to invalidate caches</p>\n  </dd>\n</dl>\n<h4 id=\"file_objects\">File objects</h4>\n<p>Each file object has the following fields:</p>\n<dl>\n  <dt id=\"title\"><code>title</code></dt>\n  <dd>\n    <p>The attachment's title</p>\n  </dd>\n  <dt id=\"description\"><code>description</code></dt>\n  <dd>\n    <p>A textual description of the current revision of the file</p>\n  </dd>\n  <dt id=\"filename\"><code>filename</code></dt>\n  <dd>\n    <p>The file's name</p>\n  </dd>\n  <dt id=\"size\"><code>size</code></dt>\n  <dd>\n    <p>The size of the file in bytes</p>\n  </dd>\n  <dt id=\"author\"><code>author</code></dt>\n  <dd>\n    <p>The username of the person who uploaded the file</p>\n  </dd>\n  <dt id=\"mime\"><code>mime</code></dt>\n  <dd>\n    <p>The MIME type of the file</p>\n  </dd>\n  <dt id=\"url\"><code>url</code></dt>\n  <dd>\n    <p>The URL at which the file can be found</p>\n  </dd>\n</dl>\n<h4 id=\"working_with_tag_lists\">Working with tag lists</h4>\n<p>The <code>env.tags</code> and <code>env.review_tags</code> variables return arrays of tags. You can work with these in many ways, of course, but here are a couple of suggestions.</p>\n<h5 id=\"looking_to_see_if_a_specific_tag_is_set\">Looking to see if a specific tag is set</h5>\n<p>You can look to see if a specific tag exists on a page like this:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">.</span>tags<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tag\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> −<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// The page has the tag \"tag\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h5 id=\"iterating_over_all_the_tags_on_a_page\">Iterating over all the tags on a page</h5>\n<p>You can also iterate over all the tags on a page, like this:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>env<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tag</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// do whatever you need to do, such as:</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this tag starts with \"a\" - woohoo!</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3 id=\"apis_and_modules\">APIs and Modules</h3>\n<p>KumaScript offers some built-in methods and APIs for KumaScript macros. Macros can also use <code>module.exports</code> to export new API methods.</p>\n<p>API changes require updating the KumaScript engine or macros via a pull request to the <a href=\"https://github.com/mdn/kumascript\" class=\"external\" rel=\" noopener\">KumaScript repository</a>.</p>\n<h4 id=\"built-in_methods\">Built-in methods</h4>\n<p>This manually-maintained documentation is likely to fall out of date with the code. With that in mind, <a href=\"https://github.com/mdn/kumascript/blob/master/lib/kumascript/api.js#L175\" class=\"external\" rel=\" noopener\">you can always check out the latest state of built-in APIs in the KumaScript source</a>. But here is a selection of useful methods exposed to templates:</p>\n<dl>\n  <dt id=\"md5string\"><code>md5(string)</code></dt>\n  <dd>\n    <p>Returns an MD5 hex digest of the given string.</p>\n  </dd>\n  <dt id=\"templatename_arg0_arg1_..._argn\"><code>template(\"name\", [\"arg0\", \"arg1\", ..., \"argN\"])</code></dt>\n  <dd>\n    <p>Executes and returns the result of the named template with the given list of parameters.</p>\n    <p>Example: <code>&lt;%- template(\"warning\", [\"foo\", \"bar\", \"baz\"]) %&gt;</code>.</p>\n    <p>Example using the <code>domxref</code> macro: <code>&lt;%- template(\"domxref\", [\"Event.bubbles\", \"bubbles\"]) %&gt;</code>.</p>\n    <p>This is a JavaScript function. So, if one of the parameters is an arg variable like $2, do not put it in quotes. Like this: <code>&lt;%- template(\"warning\", [$1, $2, \"baz\"]) %&gt;</code>. If you need to call another template from within a block of code, do not use <code>&lt;%</code> ... <code>%&gt;</code>. Example: <code>myvar = \"&lt;li&gt;\" + template(\"LXRSearch\", [\"ident\", \"i\", $1]) + \"&lt;/li&gt;\";</code></p>\n  </dd>\n  <dt id=\"requirename\"><code>require(name)</code></dt>\n  <dd>\n    <p>Loads another template as a module; any output is ignored. Anything assigned to <code>module.exports</code> in the template is returned.</p>\n    <p>Used in templates like so: <code>&lt;% var my_module = require('MyModule'); %&gt;</code>.</p>\n  </dd>\n  <dt id=\"cachefnkey_timeout_function_to_cache\"><code>cacheFn(key, timeout, function_to_cache)</code></dt>\n  <dd>\n    <p>Using the given key and cache entry lifetime, cache the results of the given function. Honors the value of <code>env.cache_control</code> to invalidate cache on <code>no-cache</code>, which can be sent by a logged-in user hitting shift-refresh.</p>\n  </dd>\n  <dt id=\"request\"><code>request</code></dt>\n  <dd>\n    <p>Access to <a href=\"https://github.com/mikeal/request\" class=\"external\" rel=\" noopener\"><code>mikeal/request</code></a>, a library for making HTTP requests. Using this module in KumaScript templates is not yet very friendly, so you may want to wrap usage in module APIs that simplify things.</p>\n  </dd>\n  <dt id=\"log.debugstring\"><code>log.debug(string)</code></dt>\n  <dd>\n    <p>Outputs a debug message into the script log on the page (i.e. the big red box that usually displays errors).</p>\n  </dd>\n</dl>\n<h4 id=\"built-in_api_modules\">Built-in API modules</h4>\n<p>There's only one API built in at the moment, in the <code>kuma</code> namespace. You can see the most up to date list of methods under <code>kuma</code> from <a href=\"https://github.com/mdn/kumascript/blob/master/lib/kumascript/api.js#L74\" class=\"external\" rel=\" noopener\">the KumaScript source code</a>, but here are a few:</p>\n<dl>\n  <dt id=\"kuma.inspectobject\"><code>kuma.inspect(object)</code></dt>\n  <dd>\n    <p>Renders any JS object as a string, handy for use with <code>log.debug()</code>. See also: <a href=\"https://nodejs.org/api/util.html#util_util_inspect_object_options\" class=\"external\" rel=\" noopener\">node.js <code>util.inspect()</code></a>.</p>\n  </dd>\n</dl><!---->\n<dl>\n  <dt id=\"kuma.htmlescapestring\"><code>kuma.htmlEscape(string)</code></dt>\n  <dd>\n    <p>Escapes the characters <code>&amp;, &lt;, &gt;, \"</code> to <code>&amp;amp, &amp;lt;, &amp;gt;, &amp;quot;</code>, respectively.</p>\n  </dd>\n  <dt id=\"kuma.url\"><code>kuma.url</code></dt>\n  <dd>\n    <p>See also: <a href=\"https://nodejs.org/api/url.html\" class=\"external\" rel=\" noopener\">node.js <code>url</code> module</a>.</p>\n  </dd>\n  <dt id=\"kuma.fetchfeedurl\"><code>kuma.fetchFeed(url)</code></dt>\n  <dd>\n    <p>Fetch an RSS feed and parse it into a JS object. See also: <a href=\"https://github.com/mdn/kumascript/blob/master/macros/InsertFeedLinkList.ejs\" class=\"external\" rel=\" noopener\"><code>InsertFeedLinkList</code></a></p>\n  </dd>\n</dl>\n<h4 id=\"creating_modules\">Creating modules</h4>\n<p>Using the built-in <code>require()</code> method, you can load a template as a module to share common variables and methods between templates. A module can be defined in a template like this:</p>\n<pre class=\"notranslate\">&lt;%\nmodule.exports = {\n    add: function (a, b) {\n        return a + b;\n    }\n}\n%&gt;\n</pre>\n<p>Assuming this template is saved under <a href=\"https://github.com/mdn/kumascript/tree/master/macros\" class=\"external\" rel=\" noopener\">https://github.com/mdn/kumascript/tree/master/macros</a> as <code>MathLib.ejs</code>, you can use it in another template like so:</p>\n<pre class=\"notranslate\">&lt;%\nvar math_lib = require(\"MathLib\");\n%&gt;\nThe result of 2 + 2 = &lt;%= math_lib.add(2, 2) %&gt;\n</pre>\n<p>And, the output of this template will be:</p>\n<pre class=\"notranslate\">The result of 2 + 2 = 4\n</pre>\n<h4 id=\"auto-loaded_modules\">Auto-loaded modules</h4>\n<p>There are a set of modules editable as wiki templates that are automatically loaded and made available to every template. This set is defined in the configuration file for the KumaScript service - any changes to this requires an IT bug to edit configuration and a restart of the service.</p>\n<p>For the most part, these attempt to provide stand-ins for legacy DekiScript features to ease template migration. But, going forward, these can be used to share common variables and methods between templates:</p>\n<ul>\n  <li><code>mdn.*</code> - <a href=\"https://github.com/mdn/kumascript/blob/master/macros/MDN-Common.ejs\" class=\"external\" rel=\" noopener\">MDN-Common</a></li>\n  <li><code>Page.*</code> - <a href=\"https://github.com/mdn/kumascript/blob/master/macros/DekiScript-Page.ejs\" class=\"external\" rel=\" noopener\">DekiScript-Page</a></li>\n  <li><code>String.*</code> - <a href=\"https://github.com/mdn/kumascript/blob/master/macros/DekiScript-String.ejs\" class=\"external\" rel=\" noopener\">DekiScript-String</a></li>\n  <li><code>Uri.*</code> - <a href=\"https://github.com/mdn/kumascript/blob/master/macros/DekiScript-Uri.ejs\" class=\"external\" rel=\" noopener\">DekiScript-Uri</a></li>\n  <li><code>Web.*</code> - <a href=\"https://github.com/mdn/kumascript/blob/master/macros/DekiScript-Web.ejs\" class=\"external\" rel=\" noopener\">DekiScript-Web</a></li>\n  <li><code>Wiki.*</code> - <a href=\"https://github.com/mdn/kumascript/blob/master/macros/DekiScript-Wiki.ejs\" class=\"external\" rel=\" noopener\">DekiScript-Wiki</a></li>\n</ul>\n<p><strong>Note:</strong> You might notice that the DekiScript modules use a built-in method named <code>buildAPI()</code>, like so:</p>\n<pre class=\"notranslate\">&lt;% module.exports = buildAPI({\n    StartsWith: function (str, sub_str) {\n        return (''+str).indexOf(sub_str) === 0;\n    }\n}); %&gt;\n</pre>\n<p>The reason for this is because DekiScript is case-insensitive when it comes to references to API methods, whereas JavaScript is strict about uppercase and lowercase in references. So, <code>buildAPI()</code> is a hack to try to cover common case variations in DekiScript calls found in legacy templates.</p>\n<blockquote>\n  <p><strong>Nota:</strong> With that in mind, please do not use <code>buildAPI()</code> in new modules.</p>\n</blockquote>\n<h2 id=\"tips_and_caveats\">Tips and caveats</h2>\n<h3 id=\"debugging\">Debugging</h3>\n<p>A useful tip when debugging. You can use the <code>log.debug()</code> method to output text to the scripting messages area at the top of the page that's running your template. Note that you need to be really sure to remove these when you're done debugging, as they're visible to all users! To use it, just do something like this:</p>\n<pre class=\"notranslate\">&lt;%- log.debug(\"Some text goes here\"); %&gt;\n</pre>\n<p>You can, of course, create more complex output using script code if it's helpful.</p>\n<h3 id=\"caching\">Caching</h3>\n<p>KumaScript templates are heavily cached to improve performance. For the most part, this works great to serve up content that doesn't change very often. But, as a logged-in user, you have two options to force a page to be regenerated, in case you notice issues with scripting:</p>\n<ul>\n  <li>Hit Refresh in your browser. This causes KumaScript to invalidate its cache for the content on the current page by issuing a request with a <code>Cache-Control: max-age=0</code> header.</li>\n  <li>Hit Shift-Refresh in your browser. This causes KumaScript to invalidate cache for the current page, as well as for any templates or content used by the current page by issuing a request with a <code>Cache-Control: no-cache</code> header.</li>\n</ul>\n<h3 id=\"using_search_keywords_to_open_template_pages\">Using search keywords to open template pages</h3>\n<p>When using templates, it's common to open the template's code in a browser window to review the comments at the top, which are used to document the template, its parameters, and how to use it properly. To quickly access templates, you can create a Firefox <a href=\"http://kb.mozillazine.org/Using_keyword_searches\" class=\"external\" rel=\" noopener\">search keyword</a>, which gives you a shortcut you can type in the URL box to get to a template more easily.</p>\n<p>To create a search keyword, open the bookmarks window by choosing \"Show all bookmarks\" in the Bookmarks menu, or by pressing <kbd>Control</kbd>-<kbd>Shift</kbd>-<kbd>B</kbd> (<kbd>Command</kbd>-<kbd>Shift</kbd>-<kbd>B</kbd> on Mac). Then from the utility (\"Gear\") menu in the Library window that appears, choose \"New Bookmark...\".</p>\n<p>This causes the bookmark editing dialog to appear. Fill that out as follows:</p>\n<dl>\n  <dt id=\"name\">Name</dt>\n  <dd>\n    <p>A suitable name for your search keyword; \"Open MDN Template\" is a good one.</p>\n  </dd>\n  <dt id=\"location\">Location</dt>\n  <dd>\n    <p></p>\n    <p><a href=\"https://github.com/mdn/kumascript/blob/master/macros/%25s\" class=\"external\" rel=\" noopener\">https://github.com/mdn/kumascript/blob/master/macros/%s</a></p>\n  </dd>\n  <dt id=\"tags\">Tags <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>A list of tags used to organize your bookmarks; these are entirely optional and what (if any) tags you use is up to you.</p>\n  </dd>\n  <dt id=\"keyword\">Keyword</dt>\n  <dd>\n    <p>The shortcut text you wish to use to access the template. Ideally, this should be something short and quick to type, such as simply \"t\" or \"mdnt\".</p>\n  </dd>\n  <dt id=\"description_2\">Description <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>A suitable description explaining what the search keyword does.</p>\n  </dd>\n</dl>\n<p>The resulting dialog looks something like this:</p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/14432/Screen%20Shot%202016-11-28%20at%203.08.39%20PM.png\" alt=\"\" loading=\"lazy\">\n</p>\n<p>Then click the \"Add\" button to save your new search keyword. From then on, typing your keyword, then a space, then the name of a macro will open that macro in your current tab. So if you used \"t\" as the keyword, typing <kbd>t ListSubpages</kbd> will show you the page at <code class=\"templateLink\"><a href=\"https://github.com/mdn/yari/tree/main/kumascript/macros/ListSubpages.ejs\" class=\"external\" rel=\" noopener\">ListSubpages</a></code>.</p>\n<h2 id=\"cookbook\">Cookbook</h2>\n<p>This section will list examples of common patterns for templates used on MDN, including samples of legacy DekiScript templates and their new KumaScript equivalents.</p>\n<h3 id=\"force_templates_used_on_a_page_to_be_reloaded\">Force templates used on a page to be reloaded</h3>\n<p>It bears repeating: To force templates used on a page to be reloaded after editing, hit Shift-Reload. Just using Reload by itself will cause the page contents to be regenerated, but using cached templates and included content. A Shift-Reload is necessary to invalidate caches beyond just the content of the page itself.</p>\n<h3 id=\"recovering_from_unknown_error\">Recovering from \"Unknown Error\"</h3>\n<p>Sometimes, you'll see a scripting message like this when you load a page:</p>\n<pre class=\"notranslate\">Kumascript service failed unexpectedly: &lt;class 'httplib.BadStatusLine'&gt;\n</pre>\n<p>This is probably a temporary failure of the KumaScript service. If you Refresh the page, the error may disappear. If that doesn't work, try a Shift-Refresh. If, after a few tries, the error persists - <a href=\"https://bugzilla.mozilla.org/enter_bug.cgi?product=mozilla.org&amp;format=itrequest\" class=\"external\" rel=\" noopener\">file an IT bug</a> for Mozilla Developer Network to ask for an investigation.</p>\n<h3 id=\"broken_wiki.languages_macros\">Broken wiki.languages() macros</h3>\n<p>On some pages, you'll see a scripting error like this:</p>\n<pre class=\"notranslate\">Syntax error at line 436, column 461: Expected valid JSON object as the parameter of the preceding macro but...\n</pre>\n<p>If you edit the page, you'll probably see a macro like this at the bottom of the page:</p>\n<pre class=\"notranslate\">{{ wiki.languages({ \"zh-tw\": \"zh_tw/Core_JavaScript_1.5_教學/JavaScript_概要\", ... }) }}\n</pre>\n<p>To fix the problem, just delete the macro. Or, replace the curly braces on either side with HTML comments <code>&lt;!-- --&gt;</code> to preserve the information, like so:</p>\n<pre class=\"notranslate\">&lt;!-- wiki.languages({ \"zh-tw\": \"zh_tw/Core_JavaScript_1.5_教學/JavaScript_概要\", ... }) --&gt;\n</pre>\n<p>Because Kuma supports localization differently, these macros aren't actually needed any more. But, they've been left intact in case we need to revisit the relationships between localized pages. Unfortunately, it seems like migration has failed to convert some of them properly.</p>\n<h3 id=\"finding_the_current_pages_language\">Finding the Current Page's Language</h3>\n<p>In KumaScript, the locale of the current document is exposed as an environment variable:</p>\n<pre class=\"notranslate\">var lang = env.locale;\n</pre>\n<p>The <code>env.locale</code> variable should be reliable and defined for every document.</p>\n<h3 id=\"reading_the_contents_of_a_page_attachment\">Reading the contents of a page attachment</h3>\n<p>You can read the contents of an attached file by using the <code>mdn.getFileContent()</code> function, like this:</p>\n<pre class=\"notranslate\">&lt;%\n  var contents = mdn.getFileContent(fileUrl);\n  ... do stuff with the contents ...\n%&gt;\n</pre>\n<p>or</p>\n<pre class=\"notranslate\">&lt;%-mdn.getFileContent(fileObject)%&gt;\n</pre>\n<p>In other words, you may specify either the URL of the file to read or as a file object. The file objects for a page can be accessed through the array <code>env.files</code>. So, for example, to embed the contents of the first file attached to the article, you can do this:</p>\n<pre class=\"notranslate\">&lt;%-mdn.getFileContent(env.files[0])%&gt;\n</pre>\n<blockquote>\n  <p><strong>Nota:</strong> You probably don't want to try to embed the contents of a non-text file this way, as the raw contents would be injected as text. This is meant to let you access the contents of text attachments.</p>\n</blockquote>\n<p>If the file isn't found, an empty string is returned. There is currently no way to tell the difference between an empty file and a nonexistent one. But if you're putting empty files on the wiki, you're doing it wrong.</p>\n<h3 id=\"localizing_template_content\">Localizing template content</h3>\n<p>Templates are not translated like wiki pages, rather any single template might be used for any number of locales.</p>\n<p>So the main way to output content tailored to the current document locale is to pivot on the value of <code>env.locale</code>. There are many ways to do this, but a few patterns are common in the conversion of legacy DekiScript templates:</p>\n<h4 id=\"ifelse_blocks_in_kumascript\">If/else blocks in KumaScript</h4>\n<p>The KumaScript equivalent of this can be achieved with simple if/else blocks, like so:</p>\n<pre class=\"notranslate\">&lt;% if (\"fr\" == env.locale) { %&gt;\n&lt;%- template(\"CSSRef\") %&gt; « &lt;a title=\"Référence_CSS/Extensions_Mozilla\" href=\"/fr/docs/Référence_CSS/Extensions_Mozilla\"&gt;Référence CSS:Extensions Mozilla&lt;/a&gt;\n&lt;% } else if (\"ja\" == env.locale) { %&gt;\n&lt;%- template(\"CSSRef\") %&gt; « &lt;a title=\"CSS_Reference/Mozilla_Extensions\" href=\"/ja/docs/CSS_Reference/Mozilla_Extensions\"&gt;CSS リファレンス:Mozilla 拡張仕様&lt;/a&gt;\n&lt;% } else if (\"pl\" == env.locale) { %&gt;\n&lt;%- template(\"CSSRef\") %&gt; « &lt;a title=\"Dokumentacja_CSS/Rozszerzenia_Mozilli\" href=\"/pl/docs/Dokumentacja_CSS/Rozszerzenia_Mozilli\"&gt;Dokumentacja CSS:Rozszerzenia Mozilli&lt;/a&gt;\n&lt;% } else if (\"de\" == env.locale) { %&gt;\n&lt;%- template(\"CSSRef\") %&gt; « &lt;a title=\"CSS_Referenz/Mozilla_CSS_Erweiterungen\" href=\"/de/docs/CSS_Referenz/Mozilla_CSS_Erweiterungen\"&gt;CSS Referenz: Mozilla Erweiterungen&lt;/a&gt;\n&lt;% } else { %&gt;\n&lt;%- template(\"CSSRef\") %&gt; « &lt;a title=\"CSS_Reference/Mozilla_Extensions\" href=\"/en-US/docs/CSS_Reference/Mozilla_Extensions\"&gt;CSS Reference:Mozilla Extensions&lt;/a&gt;\n&lt;% } %&gt;\n</pre>\n<p>Depending on what text editor is your favorite, you may be able to copy &amp; paste from the browser-based editor and attack this pattern with a series of search/replace regexes to get you most of the way there.</p>\n<p>My favorite editor is MacVim, and a series of regexes like this does the bulk of the work with just a little manual clean up following:</p>\n<pre class=\"notranslate\">%s#&lt;span#^M&lt;span#g\n%s#&lt;span lang=\"\\(.*\\)\" .*&gt;#&lt;% } else if (\"\\1\" == env.locale) { %&gt;#g\n%s#&lt;span class=\"script\"&gt;template.Cssxref(#&lt;%- template(\"Cssxref\", [#\n%s#)&lt;/span&gt; &lt;/span&gt;#]) %&gt;\n</pre>\n<p>Your mileage may vary, and patterns change slightly from template to template. That's why the migration script was unable to just handle this automatically, after all.</p>\n<h4 id=\"string_variables_and_switch\">String variables and switch</h4>\n<p>Rather than switch between full chunks of markup, you can define a set of strings, switch them based on locale, and then use them to fill in placeholders in a single chunk of markup:</p>\n<pre class=\"notranslate\">&lt;%\nvar s_title = 'Firefox for Developers';\nswitch (env.locale) {\n    case 'de':\n        s_title = \"Firefox für Entwickler\";\n        break;\n    case 'fr':\n        s_title = \"Firefox pour les développeurs\";\n        break;\n    case 'es':\n        s_title = \"Firefox para desarrolladores\";\n        break;\n};\n%&gt;\n&lt;span class=\"title\"&gt;&lt;%= s_title %&gt;&lt;/span&gt;\n</pre>\n<h4 id=\"use_mdn.localstring\">Use <code>mdn.localString()</code></h4>\n<p>A recent addition to the <code>MDN:Common</code> module is <code>mdn.localString()</code>, used like this:</p>\n<pre class=\"notranslate\">&lt;%\nvar s_title = mdn.localString({\n  \"en-US\": \"Firefox for Developers\",\n  \"de\": \"Firefox für Entwickler\",\n  \"es\": \"Firefox para desarrolladores\"\n});\n%&gt;\n&lt;span class=\"title\"&gt;&lt;%= s_title %&gt;&lt;/span&gt;\n</pre>\n<p>This is more concise than the switch statement, and may be a better choice where a single string is concerned. However, if many strings need to be translated (e.g., as in <a href=\"https://github.com/mdn/kumascript/blob/master/macros/CSSRef.ejs\" class=\"external\" rel=\" noopener\">CSSRef</a>), a switch statement might help keep all the strings grouped by locale and more easily translated that way.</p>\n<p>When the object does not have the appropriate locale, the value of \"en-US\" is used as the initial value.</p>\n<h2 id=\"see_also\">See also</h2>\n<ul>\n  <li><a href=\"http://kuma.readthedocs.io/en/latest/\" class=\"external\" rel=\" noopener\">Getting started with Kuma</a></li>\n  <li><a href=\"https://github.com/mdn/kumascript\" class=\"external\" rel=\" noopener\">KumaScript reference</a></li>\n  <li><a href=\"https://wiki.mozilla.org/MDN/Kuma\" class=\"external\" rel=\" noopener\">Kuma wiki</a></li>\n</ul>\n</code>"}}],"toc":[{"text":"Overview","id":"overview"},{"text":"Basics","id":"basics"},{"text":"Advanced Features","id":"advanced_features"}],"summary":"On the Kuma platform that powers MDN, the template system for automating aspects of content on the wiki is called KumaScript. KumaScript is powered by server-side JavaScript, implemented using Node.js. This article provides basic information on how to use KumaScript.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"KumaScript","locale":"en-US","native":"English (US)"},{"title":"Introducción a KumaScript","locale":"es","native":"Español"},{"title":"KumaScript","locale":"ja","native":"日本語"},{"title":"KumaScript","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"pt-br/mdn/tools/kumascript","github_url":"https://github.com/mdn/translated-content/blob/main/files/pt-br/mdn/tools/kumascript/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/pt-BR/docs/MDN","title":"O projeto MDN"},{"uri":"/pt-BR/docs/MDN/Tools","title":"Ferramentas do MDN"},{"uri":"/pt-BR/docs/MDN/Tools/KumaScript","title":"KumaScript"}],"pageTitle":"KumaScript - O projeto MDN | MDN","noIndexing":false}}