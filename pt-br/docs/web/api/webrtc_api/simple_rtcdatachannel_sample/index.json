{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Uma simples amostra de RTCDataChannel","mdn_url":"/pt-BR/docs/Web/API/WebRTC_API/Simple_RTCDataChannel_sample","locale":"pt-BR","native":"Português (do Brasil)","sidebarHTML":"\n <ol>\n  <li><a href=\"/pt-BR/docs/Web/API/WebRTC_API\"><strong>WebRTC API</strong></a></li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>WebRTC Guides</summary>\n      <ol>\n        <li><a href=\"/pt-BR/docs/Web/API/WebRTC_API/Architecture\">WebRTC Architecture</a></li>\n        <li><a href=\"/pt-BR/docs/Web/API/WebRTC_API/WebRTC_Basics\">WebRTC Basics</a></li>\n        <li><a href=\"/pt-BR/docs/Web/API/WebRTC_API/Protocols\">WebRTC Protocols</a></li>\n        <li><a href=\"/pt-BR/docs/Web/API/WebRTC_API/Connectivity\">Dealing with connectivity</a></li>\n        <li><a href=\"/pt-BR/docs/Web/API/WebRTC_API/Overview\">Overview of WebRTC interfaces</a></li>\n        <li><a href=\"/pt-BR/docs/Web/API/WebRTC_API/Session_lifetime\">Lifetime of a WebRTC Session</a></li>\n        <li><a href=\"/pt-BR/docs/Web/API/WebRTC_API/Using_data_channels\">Using data channels</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>WebRTC Tutorials</summary>\n      <ol>\n        <li><a href=\"/pt-BR/docs/Web/API/WebRTC_API/adapter.js\">Interoperability with adapter.js</a></li>\n        <li><a href=\"/pt-BR/docs/Web/API/WebRTC_API/Taking_still_photos\">Taking still photos from the camera</a></li>\n        <li><a href=\"/pt-BR/docs/Web/API/WebRTC_API/Simple_RTCDataChannel_sample\">A simple data channel example</a></li>\n        <li><a href=\"/pt-BR/docs/Web/API/WebRTC_API/Build_a_phone_with_peerjs\">Building an internet-connected phone with Peer.js</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Interfaces</summary>\n      <ol>\n        <li><a href=\"/pt-BR/docs/Web/API/MediaDevices\"><code>MediaDevices</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStream\"><code>MediaStream</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MediaStreamEvent\"><code>MediaStreamEvent</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/pt-BR/docs/Web/API/MediaStreamTrack\"><code>MediaStreamTrack</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/MessageEvent\"><code>MessageEvent</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/pt-BR/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCIceCandidate\"><code>RTCIceCandidate</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/pt-BR/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnectionIceEvent\"><code>RTCPeerConnectionIceEvent</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCSessionDescription\"><code>RTCSessionDescription</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCStatsReport\"><code>RTCStatsReport</code> <small>(en-US)</small></a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/pt-BR/docs/MDN\">Documentation:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Contribute</summary>\n      <ol>\n        <li><a href=\"/pt-BR/docs/MDN\">The MDN project</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>A interface <a href=\"/pt-BR/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a> é um recurso da <a href=\"/pt-BR/docs/Web/API/WebRTC_API\">WebRTC API</a> que permite abrir um canal entre dois pares sobre os quais você pode enviar e receber dados arbitrários. A API é intencionalmente semelhante à <a href=\"/en-US/docs/Web/API/WebSockets_API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">WebSocket API (en-US)</a>, de modo que o mesmo modelo de programação pode ser usado para ambos.</p>\n<p>Neste exemplo, abriremos um <a href=\"/pt-BR/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a> para realizar a conexão entre dois elementos na mesma página. Embora seja obviamente um cenário artificial, é útil para demonstrar o fluxo de conexão entre dois pares. Vamos cobrir a mecânica necessária para conectar, transmitir e receber dados, mas vamos deixar para outro exemplo os detalhes sobre como localizar e se conectar a um computador remoto.</p>"}},{"type":"prose","value":{"id":"o_html","title":"O HTML","isH3":false,"content":"<p>Primeiro, vamos dar uma olhada rápida no <a href=\"https://github.com/mdn/samples-server/tree/master/s/webrtc-simple-datachannel/index.html\" class=\"external\" rel=\" noopener\">HTML que é necessário</a>. Não há nada incrivelmente complicado aqui. Primeiro, temos um par de botões para estabelecer e fechar a conexão:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>connectButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>connectButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>buttonleft<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  Conectar\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>disconnectButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>disconnectButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>buttonright<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">disabled</span><span class=\"token punctuation\">&gt;</span></span>\n  Desconectar\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>Depois, há uma caixa que contém o campo de <em>input</em> no qual o usuário pode digitar uma mensagem para transmitir, com um botão para enviar o texto digitado. Este <a href=\"/pt-BR/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a> será o primeiro ponto (peer) no canal.</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>messagebox<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>message<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Insira a mensagem:\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>message<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>message<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Texto da mensagem<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">inputmode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>latin<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>60</span> <span class=\"token attr-name\">maxlength</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>120</span> <span class=\"token attr-name\">disabled</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sendButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sendButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>buttonright<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">disabled</span><span class=\"token punctuation\">&gt;</span></span>\n      Enviar\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>Finalmente, há uma pequena caixa na qual vamos inserir as mensagens. Este bloco <a href=\"/pt-BR/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a> será o segundo ponto do par (peer).</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>messagebox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>receivebox<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Mensagens recebidas:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"o_código_javascript","title":"O código JavaScript","isH3":false,"content":"<p>Como você pode simplesmente <a href=\"https://github.com/mdn/samples-server/tree/master/s/webrtc-simple-datachannel/main.js\" class=\"external\" rel=\" noopener\">ver o próprio código no GitHub</a>, abaixo, analisaremos as partes do código que fazem o trabalho pesado.</p>\n<p>A WebRTC API faz um intenso uso de <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>s. Que tornam muito fácil encadear as etapas do processo de conexão; Se você ainda não leu sobre esta funcionalidade do <a href=\"/pt-BR/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">ECMAScript 2015</a>, você deveria ler sobre eles. Da mesma forma, este exemplo usa <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">arrow functions</a> para simplificar a sintaxe.</p>"}},{"type":"prose","value":{"id":"começando","title":"Começando","isH3":true,"content":"<p>Quando o script é executado, configuramos um <code><a href=\"/en-US/docs/Web/API/Window/load_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">load (en-US)</a></code> ouvinte de eventos (event listener), De modo que, uma vez que a página esteja totalmente carregada, nossa função <code>startup()</code> seja chamada.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">startup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  connectButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connectButton'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  disconnectButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'disconnectButton'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  sendButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sendButton'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  messageInputBox <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  receiveBox <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'receivebox'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Define os ouvintes de eventos para os elementos da interface do usuário</span>\n\n  connectButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> connectPeers<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  disconnectButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> disconnectPeers<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  sendButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> sendMessage<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Isso é bastante direto. Pegamos referências de todos os elementos da página que precisaremos acessar e, em seguida, configuramos <a href=\"/pt-BR/docs/conflicting/Web/API/EventTarget/addEventListener\" title=\"event listeners\"><code>event listeners</code></a> nos três botões.</p>"}},{"type":"prose","value":{"id":"estabelecendo_uma_conexão","title":"Estabelecendo uma conexão","isH3":true,"content":"<p>Quando o usuário clica no botão \"Conectar\", o método <code>connectPeers()</code> é chamado. Para que fique mais claro, iremos quebrar o código em mais partes, e analisar um pouco de cada vez.</p>\n<blockquote>\n  <p><strong>Nota:</strong> Mesmo que ambas as extremidades da nossa conexão estejam na mesma página, vamos nos referir ao ponto que inicia a conexão como \"local\", e ao outro como sendo o \"remoto\".</p>\n</blockquote>\n<h4 id=\"configurando_o_ponto_local_local_peer\">Configurando o ponto local (local peer)</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>localConnection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RTCPeerConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsendChannel <span class=\"token operator\">=</span> localConnection<span class=\"token punctuation\">.</span><span class=\"token function\">createDataChannel</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sendChannel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsendChannel<span class=\"token punctuation\">.</span>onopen <span class=\"token operator\">=</span> handleSendChannelStatusChange<span class=\"token punctuation\">;</span>\nsendChannel<span class=\"token punctuation\">.</span>onclose <span class=\"token operator\">=</span> handleSendChannelStatusChange<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>O primeiro passo é criar o ponto \"local\" da conexão. Este é o ponto que enviará o pedido de conexão. O próximo passo é criar o <a href=\"/pt-BR/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a> chamando <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/createDataChannel\"><code>RTCPeerConnection.createDataChannel()</code> <small>(en-US)</small></a> e configurando ouvintes de eventos (event listeners) para monitorar o canal, e para que possamos saber quando ele for aberto e fechado (isto é, quando o canal está conectado ou desconectado dentro dessa conexão entre pares (peer connection)).</p>\n<p>É importante ter em mente que cada extremidade do canal tem seu próprio objeto <a href=\"/pt-BR/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a> .</p>\n<h4 id=\"configurando_o_ponto_remoto_remote_peer\">Configurando o ponto remoto (remote peer)</h4>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>remoteConnection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RTCPeerConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nremoteConnection<span class=\"token punctuation\">.</span>ondatachannel <span class=\"token operator\">=</span> receiveChannelCallback<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>O ponto remoto está configurado de forma semelhante, exceto que não precisamos nós mesmos criar explicitamente um <a href=\"/pt-BR/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a> , uma vez que vamos ser conectados através do canal estabelecido acima. Em vez disso, criamos um <code><a href=\"/pt-BR/docs/Web/Reference/Events/datachannel\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">datachannel</a></code> manipulador de eventos (event handler); Isso será chamado quando o canal de dados (data channel) for aberto; Este manipulador (handler) receberá um objeto <code>RTCDataChannel</code>; você verá isso abaixo.</p>\n<h4 id=\"configurando_ice_candidates\">Configurando ICE candidates</h4>\n<p>O próximo passo é configurar cada conexão com os ouvintes do ICE que serão chamados quando houver um novo candidato ICE para comunicar com o outro lado.</p>\n<blockquote>\n  <p><strong>Nota:</strong> Em um cenário do mundo real em que os dois pares não estão sendo executados no mesmo contexto, o processo é um pouco mais complexo; Cada lado fornece, um de cada vez, um sugestão sobre como conectar (por exemplo, UDP, UDP com um relay, TCP, etc.) chamando <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/addIceCandidate\"><code>RTCPeerConnection.addIceCandidate()</code> <small>(en-US)</small></a>, e eles vão de um lado para outro até chegarem a um acordo. Mas aqui, acabamos de aceitar a primeira oferta de cada lado, uma vez que não existe uma rede real envolvida.</p>\n</blockquote>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>    localConnection<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onicecandidate</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">!</span>e<span class=\"token punctuation\">.</span>candidate\n        <span class=\"token operator\">||</span> remoteConnection<span class=\"token punctuation\">.</span><span class=\"token function\">addIceCandidate</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>candidate<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>handleAddCandidateError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    remoteConnection<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onicecandidate</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">!</span>e<span class=\"token punctuation\">.</span>candidate\n        <span class=\"token operator\">||</span> localConnection<span class=\"token punctuation\">.</span><span class=\"token function\">addIceCandidate</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>candidate<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>handleAddCandidateError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Configuramos cada <a href=\"/pt-BR/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> para ter um manipulador de eventos (event handler) para o evento <code><a href=\"/pt-BR/docs/Web/Reference/Events/icecandidate\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">icecandidate</a></code> .</p>\n<h4 id=\"iniciando_a_tentativa_de_conexão\">Iniciando a tentativa de conexão</h4>\n<p>A última coisa que precisamos fazer para começar a conectar nossos pares é criar uma oferta de conexão.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>    localConnection<span class=\"token punctuation\">.</span><span class=\"token function\">createOffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">offer</span> <span class=\"token operator\">=&gt;</span> localConnection<span class=\"token punctuation\">.</span><span class=\"token function\">setLocalDescription</span><span class=\"token punctuation\">(</span>offer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> remoteConnection<span class=\"token punctuation\">.</span><span class=\"token function\">setRemoteDescription</span><span class=\"token punctuation\">(</span>localConnection<span class=\"token punctuation\">.</span>localDescription<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> remoteConnection<span class=\"token punctuation\">.</span><span class=\"token function\">createAnswer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">answer</span> <span class=\"token operator\">=&gt;</span> remoteConnection<span class=\"token punctuation\">.</span><span class=\"token function\">setLocalDescription</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> localConnection<span class=\"token punctuation\">.</span><span class=\"token function\">setRemoteDescription</span><span class=\"token punctuation\">(</span>remoteConnection<span class=\"token punctuation\">.</span>localDescription<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>handleCreateDescriptionError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Vamos passar por isto linha por linha e decifrar o que significa.</p>\n<ol>\n  <li>Primeiro chamamos <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/createOffer\"><code>RTCPeerConnection.createOffer()</code> <small>(en-US)</small></a> método para criar um resumo <a href=\"/pt-BR/docs/Glossary/SDP\">SDP</a> (Session Description Protocol) descrevendo a conexão que queremos fazer. Este método aceita, opcionalmente, um objeto com restrições a serem suportadas pela conexão para atender às suas necessidades, como no caso da conexão precisar suportar áudio, vídeo ou ambos. Em nosso exemplo simples, não temos restrições.</li>\n  <li>Se a oferta for criada com sucesso, passamos o resumo junto ao método de conexões locais <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/setLocalDescription\"><code>RTCPeerConnection.setLocalDescription()</code> <small>(en-US)</small></a> . Isso configura o ponto local da conexão.</li>\n  <li>O próximo passo é conectar o ponto local ao remoto comunicando ao ponto remoto sobre ele. Isso é feito chamando <code>remoteConnection.</code><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/setRemoteDescription\"><code>RTCPeerConnection.setRemoteDescription()</code> <small>(en-US)</small></a>. Agora o <code>remoteConnection</code> conhece a conexão que está sendo construída.</li>\n  <li>Isso significa que é hora do ponto remoto responder. Ele faz isso chamando o método <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/createAnswer\"><code>createAnswer()</code> <small>(en-US)</small></a> . Isso gera um resumo de SDP que descreve a conexão que o ponto remoto está disposto e capaz de estabelecer. Essa configuração está em algum lugar na união das opções que ambos os pares podem suportar.</li>\n  <li>Uma vez que a resposta foi criada, ela é passada para o <em>remoteConnection</em> chamando <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/setLocalDescription\"><code>RTCPeerConnection.setLocalDescription()</code> <small>(en-US)</small></a>. Isso estabelece o ponto remoto da conexão (que, para o ponto remoto, é o ponto local. Isso pode parecer confuso, mas você irá se acostumar com isso.</li>\n  <li>Finalmente, a descrição local das conexões remotas está configurada para se referir ao ponto remoto, chamando localConnection's <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCPeerConnection/setRemoteDescription\"><code>RTCPeerConnection.setRemoteDescription()</code> <small>(en-US)</small></a>.</li>\n  <li>O <code>catch()</code> chama uma rotina que lida com os erros que ocorrem.</li>\n</ol>\n<blockquote>\n  <p><strong>Nota:</strong> Mais uma vez, esse processo não é uma implementação do mundo real; No uso normal, há dois pedaços de código executados em duas máquinas, interagindo e negociando a conexão.</p>\n</blockquote>\n<h4 id=\"manipulação_da_conexão_de_pares_bem_sucedida\">Manipulação da conexão de pares bem sucedida</h4>\n<p>Como cada lado da conexão peer-to-peer é conectado com sucesso, o evento correspondente <a href=\"/pt-BR/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a>'s <code><a href=\"/pt-BR/docs/Web/Reference/Events/icecandidate\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">icecandidate</a></code> é disparado. Esses manipuladores podem fazer o que for necessário, mas, neste exemplo, tudo o que precisamos fazer é atualizar a interface do usuário:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">function</span> <span class=\"token function\">handleLocalAddCandidateSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    connectButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handleRemoteAddCandidateSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    disconnectButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>A única coisa que fazemos aqui é desativar o botão \"Conectar\" quando o ponto local estiver conectado e ativar o botão \"Desconectar\" quando o ponto remoto se conectar.</p>\n<h4 id=\"conectando_o_canal_de_dados\">Conectando o canal de dados</h4>\n<p>Uma vez que o <a href=\"/pt-BR/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a> é aberto, o evento <code><a href=\"/pt-BR/docs/Web/Reference/Events/datachannel\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">datachannel</a></code> é enviado para o ponto remoto para completar o processo de abertura do canal de dados; Isso invoca nosso método <code>receiveChannelCallback()</code>, que se parece com isso:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">function</span> <span class=\"token function\">receiveChannelCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    receiveChannel <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>channel<span class=\"token punctuation\">;</span>\n    receiveChannel<span class=\"token punctuation\">.</span>onmessage <span class=\"token operator\">=</span> handleReceiveMessage<span class=\"token punctuation\">;</span>\n    receiveChannel<span class=\"token punctuation\">.</span>onopen <span class=\"token operator\">=</span> handleReceiveChannelStatusChange<span class=\"token punctuation\">;</span>\n    receiveChannel<span class=\"token punctuation\">.</span>onclose <span class=\"token operator\">=</span> handleReceiveChannelStatusChange<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>O evento<code><a href=\"/pt-BR/docs/Web/Reference/Events/datachannel\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">datachannel</a></code> inclui, em sua propriedade de canal, uma referência a um <a href=\"/pt-BR/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a> Representando o ponto remoto do canal. Isso é salvo, e nós configuramos, no canal, ouvintes de eventos para os eventos que queremos manipular. Uma vez feito isso, nosso método <code>handleReceiveMessage()</code> Será chamado cada vez que os dados são recebidos pelo ponto remoto, e o método <code>handleReceiveChannelStatusChange()</code> será chamado sempre que mudar o estado da conexão do canal, para que possamos reagir quando o canal estiver totalmente aberto e quando ele for fechado.</p>"}},{"type":"prose","value":{"id":"lidando_com_as_mudanças_de_status_do_canal","title":"Lidando com as mudanças de status do canal","isH3":true,"content":"<p>Ambos nossos pontos locais e remotos usam um único método para lidar com eventos que indicam alguma alteração no status da conexão do canal.</p>\n<p>Quando o ponto local experimenta um evento aberto ou fechado, o método<code>handleSendChannelStatusChange()</code> é chamado:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">function</span> <span class=\"token function\">handleSendChannelStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sendChannel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> state <span class=\"token operator\">=</span> sendChannel<span class=\"token punctuation\">.</span>readyState<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">===</span> <span class=\"token string\">\"open\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        messageInputBox<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        messageInputBox<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sendButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        disconnectButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        connectButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        messageInputBox<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        sendButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        connectButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        disconnectButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Se o estado do canal mudou para \"open\", isso indica que terminamos de estabelecer o link entre os dois pares. A interface do usuário é atualizada de forma correspondente: ativando o elemento de input de texto para a mensagem a ser enviada, focando este elemento de input para que o usuário comece imediatamente a digitar, habilitando os botões \"Enviar\" e \"Desconectar\", que são agora utilizáveis, E desativando o botão \"Conectar\", uma vez que não é necessário quando a conexão está aberta.</p>\n<p>Se o estado do canal mudou para \"closed\", ocorre o conjunto oposto de ações: a caixa de entrada de texto e o botão \"Enviar\" estão desativados, o botão \"Conectar\" está habilitado para que o usuário possa abrir uma nova conexão se desejar, e o botão \"Desconectar\" está desativado, uma vez que não é útil quando não existe conexão.</p>\n<p>Nosso exemplo de par remoto, por outro lado, ignora os eventos de alteração de status, exceto para registrar o evento no console:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">function</span> <span class=\"token function\">handleReceiveChannelStatusChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>receiveChannel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Receive channel's status has changed to \"</span> <span class=\"token operator\">+</span>\n                  receiveChannel<span class=\"token punctuation\">.</span>readyState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>O método <code>handleReceiveChannelStatusChange()</code> recebe como parâmetro de entrada o evento que ocorreu; Este será um <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCDataChannelEvent\"><code>RTCDataChannelEvent</code> <small>(en-US)</small></a>.</p>"}},{"type":"prose","value":{"id":"enviando_mensagens","title":"Enviando mensagens","isH3":true,"content":"<p>Quando o usuário pressiona o botão \"Enviar\", o método sendMessage() que estabelecemos como o manipulador para o evento do botão <code><a href=\"/en-US/docs/Web/API/Element/click_event\" title=\"Currently only available in English (US)\" class=\"only-in-en-us\">click (en-US)</a></code> é chamado. Esse método é bastante simples:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">function</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> message <span class=\"token operator\">=</span> messageInputBox<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    sendChannel<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    messageInputBox<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    messageInputBox<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Primeiro, o texto da mensagem é obtido dos atributos do elemento de <em>input</em> <a href=\"/pt-BR/docs/Web/HTML/Element/Input#attr-value\"><code>value</code></a> . Isso é enviado para o ponto remoto, ligando para <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/RTCDataChannel/send\"><code>sendChannel.send()</code> <small>(en-US)</small></a>. E está tudo aí! O resto deste método é apenas um pouco de açúcar para experiência do usuário - a caixa de entrada é esvaziada e re-focada para que o usuário comece imediatamente a digitar outra mensagem.</p>"}},{"type":"prose","value":{"id":"recebendo_mensagens","title":"Recebendo mensagens","isH3":true,"content":"<p>Quando ocorre um evento de \"mensagem\" no canal remoto, nosso método <code>handleReceiveMessage()</code> é chamado como o manipulador de eventos.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">function</span> <span class=\"token function\">handleReceiveMessage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> txtNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    el<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>txtNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    receiveBox<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Este método simplesmente executa alguns injeções básicas <a href=\"/pt-BR/docs/Glossary/DOM\">DOM</a> ; cria um novo <a href=\"/pt-BR/docs/Web/HTML/Element/p\"><code>&lt;p&gt;</code></a> (paragraph) elemento, então cria um novo nó <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Text\"><code>Text</code> <small>(en-US)</small></a> contendo o texto da mensagem, que é recebido na propriedade de dados do evento. Este nó de texto é anexado como um filho do novo elemento, que é então inserido no bloco <em>receiveBox</em>, fazendo com que ele desenhe na janela do navegador.</p>"}},{"type":"prose","value":{"id":"desconectando_os_pares_peers","title":"Desconectando os pares (peers)","isH3":true,"content":"<p>Quando o usuário clica no botão \"Desconectar\", o método <code>disconnectPeers()</code> previamente configurado como o manipulador desse botão é chamado.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">function</span> <span class=\"token function\">disconnectPeers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// Close the RTCDataChannels if they're open.</span>\n\n    sendChannel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    receiveChannel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Close the RTCPeerConnections</span>\n\n    localConnection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    remoteConnection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    sendChannel <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    receiveChannel <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    localConnection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    remoteConnection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Update user interface elements</span>\n\n    connectButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    disconnectButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    sendButton<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    messageInputBox<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    messageInputBox<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Isso começa por fechar cada par <a href=\"/pt-BR/docs/Web/API/RTCDataChannel\"><code>RTCDataChannel</code></a>, então, de forma semelhante, cada um <a href=\"/pt-BR/docs/Web/API/RTCPeerConnection\"><code>RTCPeerConnection</code></a>. Então, todas as referências salvas desses objetos são definidas como null para evitar a reutilização acidental, e a interface do usuário é atualizada para refletir o fato de que a conexão foi fechada.</p>"}},{"type":"prose","value":{"id":"próximos_passos","title":"Próximos passos","isH3":false,"content":"<p>Você poderia <a href=\"https://mdn-samples.mozilla.org/s/webrtc-simple-datachannel\" class=\"external\" rel=\" noopener\">tentar este exemplo</a> e dar uma olhada no código fonte <a href=\"https://github.com/mdn/samples-server/tree/master/s/webrtc-simple-datachannel\" class=\"external\" rel=\" noopener\">webrtc-simple-datachannel</a>, disponível no GitHub.</p>"}}],"toc":[{"text":"O HTML","id":"o_html"},{"text":"O código JavaScript","id":"o_código_javascript"},{"text":"Próximos passos","id":"próximos_passos"}],"summary":"A interface RTCDataChannel é um recurso da WebRTC API que permite abrir um canal entre dois pares sobre os quais você pode enviar e receber dados arbitrários. A API é intencionalmente semelhante à WebSocket API (en-US), de modo que o mesmo modelo de programação pode ser usado para ambos.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"A simple RTCDataChannel sample","locale":"en-US","native":"English (US)"},{"title":"Простой пример RTCDataChannel","locale":"ru","native":"Русский"},{"title":"RTCDataChannel 简单示例","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"pt-br/web/api/webrtc_api/simple_rtcdatachannel_sample","github_url":"https://github.com/mdn/translated-content/blob/main/files/pt-br/web/api/webrtc_api/simple_rtcdatachannel_sample/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/pt-BR/docs/Web","title":"Tecnologia Web para desenvolvedores"},{"uri":"/pt-BR/docs/Web/API","title":"APIs da Web"},{"uri":"/pt-BR/docs/Web/API/WebRTC_API","title":"WebRTC API"},{"uri":"/pt-BR/docs/Web/API/WebRTC_API/Simple_RTCDataChannel_sample","title":"Uma simples amostra de RTCDataChannel"}],"pageTitle":"Uma simples amostra de RTCDataChannel - APIs da Web | MDN","noIndexing":false}}