{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Whitespace no DOM","mdn_url":"/pt-BR/docs/Web/API/Document_Object_Model/Whitespace","locale":"pt-BR","native":"Português (do Brasil)","sidebarHTML":"","body":[{"type":"prose","value":{"id":"o_problema","title":"O problema","isH3":false,"content":"<p>A presença de espaço branco no <a href=\"/en-US/docs/Web/API/Document_Object_Model\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">DOM (en-US)</a> pode dificultar a manipulação da árvore de conteúdo de formas imprevisíveis. No Mozilla, todo o espaço branco no conteúdo de texto do documento original é representado no DOM (isso não inclui <a href=\"/en-US/docs/Web/API/Document_Object_Model/Whitespace\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">whitespace (en-US)</a> entre tags). (Isso é necessário internamente para que o editor possa preservar a formatação de documentos e também que <code>white-space: pre</code> irá funcionar em <a href=\"/pt-BR/docs/Web/CSS\">CSS</a>). Isso significa que:</p>\n<ul>\n  <li>haverão alguns nós de texto que contêm somente <a href=\"/en-US/docs/Web/API/Document_Object_Model/Whitespace\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">whitespace (en-US)</a>, e</li>\n  <li>alguns nós de texto terão <a href=\"/en-US/docs/Web/API/Document_Object_Model/Whitespace\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">whitespace (en-US)</a> no início ou no final.</li>\n</ul>\n<p>Em outras palavras, a árvore do DOM para o documento seguinte irá parecer como a imagem abaixo (usando \"\\n\" para representar novas linhas):</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token comment\">&lt;!-- Meu documento --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Meu documento<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>Cabeçalho<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n    Parágrafo\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/854/whitespace_tree.png\" alt=\"\" loading=\"lazy\">\n</p>\n<p>Isto pode fazer as coisas um pouco difíceis para qualquer usuário do DOM que quer iterar através do conteúdo, excluindo o <a href=\"/en-US/docs/Web/API/Document_Object_Model/Whitespace\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">whitespace (en-US)</a>.</p>"}},{"type":"prose","value":{"id":"facilitando_as_coisas","title":"Facilitando as coisas","isH3":false,"content":"<p>É possível formatar o código como mostrado abaixo para contornar o problema:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token comment\">&lt;!-- Impressão bonita convencional\n     com espaços brancos (whitespaces) entre as tags:\n --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Posição 1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Posição 2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Posição 3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">&lt;!-- Impressão bonita ajustada ao problema:\n --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n <span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span>\n  <span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Posição 1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span>\n  <span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Posição 2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span>\n  <span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Posição 3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span>\n <span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span>\n<span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>O código Javascript abaixo define funções diversas que fazem a manipulação de <a href=\"/en-US/docs/Web/API/Document_Object_Model/Whitespace\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">whitespace (en-US)</a> no DOM mais fácil.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/**\n * Em todo, o whitespace é definido como um dos caracteres\n *  \"\\t\" TAB \\u0009\n *  \"\\n\" LF  \\u000A\n *  \"\\r\" CR  \\u000D\n *  \" \"  SPC \\u0020\n *\n * Isto não usa o \"\\s\" do Javascript porque inclui espaços\n * que não quebram (e alguns outros caracteres).\n */</span>\n\n\n<span class=\"token comment\">/**\n * Determina se um conteúdo de texto do nó é inteiramente whitespace.\n *\n * @param nod  Um nó implementando a interface |CharacterData| (por exemplo:\n *             |Text|, |Comment|, ou nó |CDATASection|\n * @return     Verdadeiro se todo conteúdo de texto de |nod| é whitespace,\n *             de outra forma é falso.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">is_all_ws</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">nod</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Usa as características do ECMA-262 Edition 3 String e RegExp</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[^\\t\\n\\r ]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>nod<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">/**\n * Determina se um nó deve ser ignorado pela função de iterador.\n *\n * @param nod  Um objeto implementando a interface DOM1 |Node|.\n * @return     verdadeiro se o nó é:\n *                1) Um nó |Text| que é todo whitespace\n *                2) Um nó |Comment|\n *             do contrário é falso.\n */</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">is_ignorable</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">nod</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> nod<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">==</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token comment\">// Um nó de comentário</span>\n         <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>nod<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">is_all_ws</span><span class=\"token punctuation\">(</span>nod<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// um nó de texto, todo whitespace</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Versão de |previousSibling| que pula nós que são inteiramente\n * whitespace ou comentários.  (Normalmente |previousSibling| é uma propriedade\n * de todos os nós do DOM que dá o nó irmão, o nó que é\n * um filho do mesmo parente, que ocorre imediatamente antes do\n * nó de referência.)\n *\n * @param sib  O nó de referência.\n * @return     Ou:\n *               1) O irmão mais próximo do |sib| que não é\n *                  ignorável de acordo com |is_ignorable|, ou\n *               2) nulo se tal nó não existe.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">node_before</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">sib</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sib <span class=\"token operator\">=</span> sib<span class=\"token punctuation\">.</span>previousSibling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_ignorable</span><span class=\"token punctuation\">(</span>sib<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> sib<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Versão de |nextSibling| que pula nós que são inteiramente\n * whitespace ou comentários.\n *\n * @param sib  O nó de referência.\n * @return     Ou:\n *               1) O irmão mais próximo do |sib| que não é\n *                  ignorável de acordo com |is_ignorable|, ou\n *               2) nulo se tal nó não existe.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">node_after</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">sib</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sib <span class=\"token operator\">=</span> sib<span class=\"token punctuation\">.</span>nextSibling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_ignorable</span><span class=\"token punctuation\">(</span>sib<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> sib<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Versão de  |lastChild| que pula nós que são inteiramente\n * whitespace ou comentários.  (Normalmente |lastChild| é uma propriedade\n * de todos os nós do DOM que dá o último dos nós contidos\n * diretamente no nó de referência.)\n *\n * @param sib  O nó de referência.\n * @return     Ou:\n *               1) O último filho do |sib| que não é\n *                  ignorável de acordo com |is_ignorable|, ou\n *               2) nulo se tal nó não existe.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">last_child</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">par</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> res<span class=\"token operator\">=</span>par<span class=\"token punctuation\">.</span>lastChild<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_ignorable</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    res <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>previousSibling<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Versão de |firstChild| que pula nós que são inteiramente\n * whitespace ou comentários.\n *\n * @param sib  O nó de referência.\n * @return     Ou:\n *               1) O primeiro nó do |sib| que não é\n *                  ignorável de acordo com |is_ignorable|, ou\n *               2) nulo se tal nó não existe.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">first_child</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">par</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> res<span class=\"token operator\">=</span>par<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_ignorable</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    res <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>nextSibling<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Versão de |data| que não inclui whitespace no início\n * e final e normaliza todos whitespaces para um espaço individual.  (Normalmente\n * |data| é uma propriedade de nós de texto que dá o texto do nó.)\n *\n * @param txt  O nó de texto do qual data deve ser retornado\n * @return     Uma string dando os conteúdos de um nó de texto com\n *             whitespace colapsado.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">data_of</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">txt</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> txt<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Usa características do ECMA-262 Edition 3 String e RegExp</span>\n  data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\t\\n\\r ]+</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n    data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n    data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"exemplo","title":"Exemplo","isH3":false,"content":"<p>O código seguinte demonstra o uso das funções acima. Ele itera através dos filhos de um elemento (dos quais filhos são todos os elementos) para encontrar aquele cujo o texto seja <code>\"Este é o terceiro parágrafo\"</code>, e então muda o atributo da classe e os conteúdos daquele parágrafo.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> cur <span class=\"token operator\">=</span> <span class=\"token function\">first_child</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"teste\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">data_of</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Este é o terceiro parágrafo.\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n      cur<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">\"mágica\"</span><span class=\"token punctuation\">;</span>\n      cur<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">\"Este é o parágrafo mágico\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  cur <span class=\"token operator\">=</span> <span class=\"token function\">node_after</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}}],"toc":[{"text":"O problema","id":"o_problema"},{"text":"Facilitando as coisas","id":"facilitando_as_coisas"},{"text":"Exemplo","id":"exemplo"}],"summary":"A presença de espaço branco no DOM (en-US) pode dificultar a manipulação da árvore de conteúdo de formas imprevisíveis. No Mozilla, todo o espaço branco no conteúdo de texto do documento original é representado no DOM (isso não inclui whitespace (en-US) entre tags). (Isso é necessário internamente para que o editor possa preservar a formatação de documentos e também que white-space: pre irá funcionar em CSS). Isso significa que:","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"How whitespace is handled by HTML, CSS, and in the DOM","locale":"en-US","native":"English (US)"},{"title":"Cómo manejan el espacio en blanco HTML, CSS y el DOM","locale":"es","native":"Español"},{"title":"Gestion des espaces dans le DOM","locale":"fr","native":"Français"},{"title":"ホワイトスペースは HTML、 CSS、そして DOM 内でどう扱われるか","locale":"ja","native":"日本語"},{"title":"DOM 中的空白符","locale":"zh-CN","native":"中文 (简体)"},{"title":"DOM 中的空白字元","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"pt-br/web/api/document_object_model/whitespace","github_url":"https://github.com/mdn/translated-content/blob/main/files/pt-br/web/api/document_object_model/whitespace/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/pt-BR/docs/Web","title":"Tecnologia Web para desenvolvedores"},{"uri":"/pt-BR/docs/Web/API","title":"APIs da Web"},{"uri":"/pt-BR/docs/Web/API/Document_Object_Model","title":"Modelo de Objeto de Documento (DOM)"},{"uri":"/pt-BR/docs/Web/API/Document_Object_Model/Whitespace","title":"Whitespace no DOM"}],"pageTitle":"Whitespace no DOM - APIs da Web | MDN","noIndexing":false}}