{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"CustomElementRegistry.define()","mdn_url":"/pt-BR/docs/Web/API/CustomElementRegistry/define","locale":"pt-BR","native":"Português (do Brasil)","sidebarHTML":"<ol><li><strong><a href=\"/pt-BR/docs/Web/API/CustomElementRegistry\"><code>CustomElementRegistry</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Métodos</summary><ol><li><em><code>define()</code></em></li><li><a href=\"/pt-BR/docs/Web/API/CustomElementRegistry/get\"><code>get()</code></a></li><li><a href=\"/pt-BR/docs/Web/API/CustomElementRegistry/upgrade\"><code>upgrade()</code></a></li><li><a href=\"/pt-BR/docs/Web/API/CustomElementRegistry/whenDefined\"><code>whenDefined()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>O método <strong><code>define()</code></strong> da interface <a href=\"/pt-BR/docs/Web/API/CustomElementRegistry\"><code>CustomElementRegistry</code></a> define um novo elemento personalizado.</p>\n<p>Dois tipos de elementos personalizados podem ser criados:</p>\n<ul>\n  <li><strong>Elementos personalizados autônomos</strong>: Elementos autônomos; estes herdam de HTMLElement (Elemento HTML genérico).</li>\n  <li>\n    <strong>Elementos personalizados pré-construídos</strong>: Estes elementos herdam - e estendem - elementos HTML já existentes (p.ej HTMLParagraphElement que é um elemento HTML\n    <a href=\"/pt-BR/docs/Web/HTML/Element/p\"><code>&lt;p&gt;</code></a>).\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"sintaxe","title":"Sintaxe","isH3":false,"content":"<pre class=\"notranslate\">customElements.define(name, constructor, options);\n</pre>"}},{"type":"prose","value":{"id":"parâmetros","title":"Parâmetros","isH3":true,"content":"<dl>\n  <dt id=\"name\">name</dt>\n  <dd>\n    <p>Nome do novo item personalizado. Observe que os nomes dos elementos personalizados devem conter um hífen.</p>\n  </dd>\n  <dt id=\"constructor\">constructor</dt>\n  <dd>\n    <p>Construtor para o novo elemento personalizado</p>\n  </dd>\n  <dt id=\"options\">options <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>Um objeto que controla como o elemento é definido. Atualmente, apenas uma opção é permitida:</p>\n    <ul>\n      <li><code>extends</code>: String que especifica o nome do elemento pré-definido a partir do qual se estende. Usado para criar<em>elementos personalizados pré-construídos</em>.</li>\n    </ul>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"valor_de_retorno","title":"Valor de retorno","isH3":true,"content":"<p>Void.</p>"}},{"type":"prose","value":{"id":"exceções","title":"Exceções","isH3":true,"content":"<table>\n  <thead>\n    <tr>\n      <th>Exceção</th>\n      <th>Descrição</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>NotSupportedError</code></td>\n      <td>El <a href=\"/pt-BR/docs/Web/API/CustomElementRegistry\"><code>CustomElementRegistry</code></a> já contém uma entrada com o mesmo nome ou o mesmo construtor (ou já foi definido de alguma outra forma), ou foi especificado <code>extends</code> mas o elemento do qual você está tentando estender é desconhecido.</td>\n    </tr>\n    <tr>\n      <td><code>SyntaxError</code></td>\n      <td>O nome fornecido não é um <a href=\"https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\" class=\"external\" rel=\" noopener\">nome de elemento personalizado válido</a>.</td>\n    </tr>\n    <tr>\n      <td><code>TypeError</code></td>\n      <td>O constructor referenciado não é um constructor</td>\n    </tr>\n  </tbody>\n</table>\n<blockquote>\n  <p>\n    <strong>Nota:</strong> Exceções são frequentemente obtidas <code>NotSupportedError</code>s quando o método <code>define()</code> está falhando, mas é realmente um problema relacionado a\n    <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Element/attachShadow\"><code>Element.attachShadow()</code> <small>(en-US)</small></a>.\n  </p>\n</blockquote>"}},{"type":"prose","value":{"id":"exemplos","title":"Exemplos","isH3":false,"content":""}},{"type":"prose","value":{"id":"elemento_personalizado_autônomo","title":"Elemento personalizado autônomo","isH3":true,"content":"<p>O código a seguir é retirado do nosso exemplo <a href=\"https://github.com/mdn/web-components-examples/tree/master/popup-info-box-web-component\" class=\"external\" rel=\" noopener\">popup-info-box-web-component</a> (<a href=\"https://mdn.github.io/web-components-examples/popup-info-box-web-component/\" class=\"external\" rel=\" noopener\">ver ao vivo</a>).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Crie uma classe para o elemento</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PopUpInfo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Sempre a primeira coisa a fazer é chamar super no construtor</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// crie um shadow root</span>\n    <span class=\"token keyword\">var</span> shadow <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Crie três elementos span</span>\n    <span class=\"token keyword\">var</span> wrapper <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'wrapper'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> icon <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    icon<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'icon'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    icon<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tabindex'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> info <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    info<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Pegue o conteúdo do atributo de texto e coloque-o no span info</span>\n    <span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    info<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Pegue o conteúdo do atributo img (se existir) e coloque-o no ícone de span</span>\n    <span class=\"token keyword\">var</span> imgUrl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      imgUrl <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      imgUrl <span class=\"token operator\">=</span> <span class=\"token string\">'img/default.png'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// A extensão não pode ter diretamente uma imagem, mas se contiver um elemento img</span>\n    <span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> imgUrl<span class=\"token punctuation\">;</span>\n    icon<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Crie os estilos CSS e inclua-os no shadow DOM</span>\n    <span class=\"token keyword\">var</span> style <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    style<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'.wrapper {'</span> <span class=\"token operator\">+</span>\n                           <span class=\"token string\">'position: relative;'</span> <span class=\"token operator\">+</span>\n                        <span class=\"token string\">'}'</span> <span class=\"token operator\">+</span>\n\n                         <span class=\"token string\">'.info {'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'font-size: 0.8rem;'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'width: 200px;'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'display: inline-block;'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'border: 1px solid black;'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'padding: 10px;'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'background: white;'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'border-radius: 10px;'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'opacity: 0;'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'transition: 0.6s all;'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'position: absolute;'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'bottom: 20px;'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'left: 10px;'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'z-index: 3;'</span> <span class=\"token operator\">+</span>\n                          <span class=\"token string\">'}'</span> <span class=\"token operator\">+</span>\n\n                          <span class=\"token string\">'img {'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'width: 1.2rem'</span> <span class=\"token operator\">+</span>\n                          <span class=\"token string\">'}'</span> <span class=\"token operator\">+</span>\n\n                          <span class=\"token string\">'.icon:hover + .info, .icon:focus + .info {'</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">'opacity: 1;'</span> <span class=\"token operator\">+</span>\n                          <span class=\"token string\">'}'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// anexar os elementos criados (extensões e estilo) ao shadow DOM</span>\n    <span class=\"token comment\">// observe que o span wrapper contém o ícone e os spans de informações</span>\n\n    shadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    shadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>icon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n <span class=\"token comment\">// Defina um novo elemento</span>\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-info'</span><span class=\"token punctuation\">,</span> PopUpInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>popup-info</span> <span class=\"token attr-name\">img</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>img/alt.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>O código de validação do seu cartão (CVC) é um recurso segurança extra - consiste em 3 ou 4 números no verso do seu cartão.<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<blockquote>\n  <p><strong>Nota:</strong> Construtores de elementos personalizados autocontidos devem estender <a href=\"/pt-BR/docs/Web/API/HTMLElement\"><code>HTMLElement</code></a>.</p>\n</blockquote>"}},{"type":"prose","value":{"id":"elemento_personalizado_pré-construído","title":"Elemento personalizado pré-construído","isH3":true,"content":"<p>O código a seguir é retirado do nosso exemplo <a href=\"https://github.com/mdn/web-components-examples/tree/master/word-count-web-component\" class=\"external\" rel=\" noopener\">word-count-web-component</a> (<a href=\"https://mdn.github.io/web-components-examples/word-count-web-component/\" class=\"external\" rel=\" noopener\">ver ao vivo</a>).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>    <span class=\"token comment\">// Crie uma classe para o elemento</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WordCount</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLParagraphElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Sempre a primeira coisa a fazer é chamar super no construtor</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// contar palavras do pai deste elemento</span>\n    <span class=\"token keyword\">var</span> wcParent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// A função countWords conta palavras (mesmo que sejam separadas por amis de um espaço)</span>\n    <span class=\"token comment\">// que existe no nó passado como parâmetro.</span>\n    <span class=\"token comment\">// innerText está definido para objetos HTMLElement, enquanto textContent para todos os objetos Node</span>\n    <span class=\"token comment\">// o operador || nos faz pegar pelo menos um dos dois</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">countWords</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">||</span> node<span class=\"token punctuation\">.</span>textContent\n      <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\s+</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token string\">'Words: '</span> <span class=\"token operator\">+</span> <span class=\"token function\">countWords</span><span class=\"token punctuation\">(</span>wcParent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// crie um shadow root</span>\n    <span class=\"token keyword\">var</span> shadow <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Crie um nó span com o número de palavras</span>\n    <span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    text<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Adicione ao shadow root</span>\n    shadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token comment\">// Atualize o contador quando o conteúdo do elemento mudar</span>\n    <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token string\">'Words: '</span> <span class=\"token operator\">+</span> <span class=\"token function\">countWords</span><span class=\"token punctuation\">(</span>wcParent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      text<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Defina o novo elemento</span>\ncustomElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'word-count'</span><span class=\"token punctuation\">,</span> WordCount<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token string\">'p'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">is</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>word-count<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"criando_elemento_que_desativa_a_capacidade_de_utilizar_attach_no_shadow_root","title":"Criando elemento que desativa a capacidade de utilizar attach no shadow root","isH3":true,"content":"<p>\n  Se a classe usada para o elemento contém a propriedade estática <code>disabledFeatures</code> retornando a string \"shadow\" isso fará com que <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Element/attachShadow\"><code>Element.attachShadow()</code> <small>(en-US)</small></a> retorne um\n  <a href=\"/pt-BR/docs/Web/API/DOMException\"><code>DOMException</code></a> <code>NotSupportedError</code>.\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">PopUpInfo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">disabledFeatures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'shadow'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token keyword\">var</span> shadow <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// isso fará com que um erro seja lançado quando o elemento for definido.</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"especificações","title":"Especificações","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>Especificação</th>\n      <th>Estado</th>\n      <th>Comentário</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://html.spec.whatwg.org/multipage/custom-elements.html#dom-customelementregistry-define\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">HTML Living Standard<br><small lang=\"pt-BR\">The definition of 'customElements.define()' in that specification.</small></a></td>\n      <td><span class=\"spec-living\">Padrão em tempo real</span></td>\n      <td>Initial definition.</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"Compatibilidade com navegadores","id":"compatibilidade_com_navegadores","isH3":false,"query":"api.CustomElementRegistry.define","dataURL":"/pt-BR/docs/Web/API/CustomElementRegistry/define/bcd.json"}}],"toc":[{"text":"Sintaxe","id":"sintaxe"},{"text":"Exemplos","id":"exemplos"},{"text":"Especificações","id":"especificações"},{"text":"Compatibilidade com navegadores","id":"compatibilidade_com_navegadores"}],"summary":"O método define() da interface CustomElementRegistry define um novo elemento personalizado.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"CustomElementRegistry.define()","locale":"en-US","native":"English (US)"},{"title":"CustomElementRegistry.define()","locale":"es","native":"Español"},{"title":"CustomElementRegistry.define()","locale":"ja","native":"日本語"},{"title":"CustomElementRegistry.define()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"pt-br/web/api/customelementregistry/define","github_url":"https://github.com/mdn/translated-content/blob/main/files/pt-br/web/api/customelementregistry/define/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/pt-BR/docs/Web","title":"Tecnologia Web para desenvolvedores"},{"uri":"/pt-BR/docs/Web/API","title":"APIs da Web"},{"uri":"/pt-BR/docs/Web/API/CustomElementRegistry","title":"CustomElementRegistry"},{"uri":"/pt-BR/docs/Web/API/CustomElementRegistry/define","title":"CustomElementRegistry.define()"}],"pageTitle":"CustomElementRegistry.define() - APIs da Web | MDN","noIndexing":false}}