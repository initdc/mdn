{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"EventTarget.removeEventListener()","mdn_url":"/pt-BR/docs/Web/API/EventTarget/removeEventListener","locale":"pt-BR","native":"Português (do Brasil)","sidebarHTML":"<ol><li><strong><a href=\"/pt-BR/docs/Web/API/EventTarget\"><code>EventTarget</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Construtor</summary><ol><li><a href=\"/pt-BR/docs/Web/API/EventTarget/EventTarget\"><code>EventTarget()</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Métodos</summary><ol><li><a href=\"/pt-BR/docs/Web/API/EventTarget/addEventListener\"><code>addEventListener()</code></a></li><li><a href=\"/pt-BR/docs/Web/API/EventTarget/dispatchEvent\"><code>dispatchEvent()</code></a></li><li><em><code>removeEventListener()</code></em></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Remove o event listener anteriormente registrado com <a href=\"/pt-BR/docs/Web/API/EventTarget/addEventListener\"><code>EventTarget.addEventListener()</code></a>.</p>"}},{"type":"prose","value":{"id":"sintaxe","title":"Sintaxe","isH3":false,"content":"<pre class=\"notranslate\">target.removeEventListener(type, listener[, useCapture])\n</pre>\n<dl>\n  <dt id=\"type\"><code>type</code></dt>\n  <dd>\n    <p>Uma string indicando o tipo de evento a ser removido.</p>\n  </dd>\n  <dt id=\"listener\"><code>listener</code></dt>\n  <dd>\n    <p>A função <a href=\"/pt-BR/docs/conflicting/Web/API/EventTarget/addEventListener\"><code>EventListener</code></a> a ser removida do event target.</p>\n  </dd>\n  <dt id=\"usecapture\"><code>useCapture</code> <span class=\"badge inline optional\">Optional</span></dt>\n  <dd>\n    <p>Indica quando o <a href=\"/pt-BR/docs/conflicting/Web/API/EventTarget/addEventListener\"><code>EventListener</code></a> a ser removido foi registrado ou não como <em>capturing listener</em>. Caso este parâmetro seja omitido, o valor <em>false</em> será assumido por padrão.</p>\n    <p>Se um listener foi registrado duas vezes, uma com o parâmetro <em>capture</em> especificado e outra sem, cada um deve ser removido separadamente. A remoção de um <em>capturing listener</em> não afeta a versão <em>non-capturing</em> do mesmo listener, e vice versa.</p>\n  </dd>\n</dl>\n<blockquote>\n  <p><strong>Nota:</strong> <code>useCapture</code> era obrigatório em versões mais antigas dos navegadores. Para ampla compatibilidade, sempre informe o parâmetro <code>useCapture.</code></p>\n</blockquote>"}},{"type":"prose","value":{"id":"notas","title":"Notas","isH3":false,"content":"<p>Se um <a href=\"/pt-BR/docs/conflicting/Web/API/EventTarget/addEventListener\"><code>EventListener</code></a> é removido de um <a href=\"/pt-BR/docs/Web/API/EventTarget\"><code>EventTarget</code></a> enquanto <strong><em>este</em></strong> está processando um evento, esse não será disparado pelas <em>current actions</em>. Um <a href=\"/pt-BR/docs/conflicting/Web/API/EventTarget/addEventListener\"><code>EventListener</code></a> não será invocado para o evento o qual foi registrado depois de ter sido removido, porém pode ser registrado novamente.</p>\n<p>Chamar <code>removeEventListener()</code> com argumentos que não identifiquem nenhum <a href=\"/pt-BR/docs/conflicting/Web/API/EventTarget/addEventListener\"><code>EventListener</code></a> registrado no <code>EventTarget</code> não tem qualquer efeito.</p>"}},{"type":"prose","value":{"id":"exemplo","title":"Exemplo","isH3":false,"content":"<p>Este é um exemplo de como associar e remover um event listener.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">listener</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* faça alguma coisa... */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ndiv<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndiv<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"browser_compatibility","value":{"title":"Compatibilidade com navegadores","id":"compatibilidade_com_navegadores","isH3":false,"query":"api.EventTarget.removeEventListener","dataURL":"/pt-BR/docs/Web/API/EventTarget/removeEventListener/bcd.json"}},{"type":"prose","value":{"id":"notas_para_gecko","title":"Notas para Gecko","isH3":true,"content":"<ul>\n  <li>Antes do Firefox 6, o navegador poderia retornar um erro se o parâmetro <code>useCapture não estive explicitamente cofigurado como</code> false. Antes do Gecko 9.0 (Firefox 9.0 / Thunderbird 9.0 / SeaMonkey 2.6), <code>addEventListener()</code> retornaria uma exception se o parâmetro do listener fosse <code>null</code>; agora o método retorna sem erros, mas sem fazer nada.</li>\n</ul>"}},{"type":"prose","value":{"id":"notas_para_opera","title":"Notas para Opera","isH3":true,"content":"<ul>\n  <li>Opera 12.00 fez com que o uso de <code>useCapture</code> seja opcional (<a href=\"https://my.opera.com/ODIN/blog/2011/09/29/what-s-new-in-opera-development-snapshots-28-september-2011-edition\" class=\"external\" rel=\" noopener\">source</a>).</li>\n</ul>"}},{"type":"prose","value":{"id":"notas_para_webkit","title":"Notas para WebKit","isH3":true,"content":"<ul>\n  <li>Embora o WebKit tenha adicionado explicitamente \"<code>[optional]</code>\" ao parâmetro <code>useCapture</code> para Safari 5.1 e Chrome 13, isto já funcionava antes da mudança.</li>\n</ul>"}},{"type":"prose","value":{"id":"veja_também","title":"Veja também","isH3":false,"content":"<p><a href=\"/pt-BR/docs/Web/API/EventTarget/addEventListener\"><code>EventTarget.addEventListener()</code></a>.</p>"}},{"type":"prose","value":{"id":"especificação","title":"Especificação","isH3":true,"content":"<ul>\n  <li><a href=\"https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget-removeEventListener\" class=\"external\" rel=\" noopener\">removeEventListener</a></li>\n</ul>"}},{"type":"prose","value":{"id":"polyfill_para_oferecer_suporte_aos_navegadores_antigos","title":"Polyfill para oferecer suporte aos navegadores antigos","isH3":false,"content":"<p><code>addEventListener()</code> e <code>removeEventListener()</code> não estão presentes em navegadores antigos. Isto pode ser contornado se você inserir o código abaixo no início dos seus scripts, permitindo o uso de <code>addEventListener()</code> e <code>removeEventListener()</code> em implementações as quais não oferecem suporte nativo. Entretanto, este método não funciona para o Internet Explorer 7 ou versões anteriores, uma vez que não era possível extender o Element.prototype até o Internet Explorer 8.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Element</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>addEventListener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> oListeners <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">runListeners</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>oEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> oEvent <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> iLstId <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> iElId <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> oEvtListeners <span class=\"token operator\">=</span> oListeners<span class=\"token punctuation\">[</span>oEvent<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> iElId <span class=\"token operator\">&lt;</span> oEvtListeners<span class=\"token punctuation\">.</span>aEls<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> iElId<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oEvtListeners<span class=\"token punctuation\">.</span>aEls<span class=\"token punctuation\">[</span>iElId<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>iLstId<span class=\"token punctuation\">;</span> iLstId <span class=\"token operator\">&lt;</span> oEvtListeners<span class=\"token punctuation\">.</span>aEvts<span class=\"token punctuation\">[</span>iElId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> iLstId<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> oEvtListeners<span class=\"token punctuation\">.</span>aEvts<span class=\"token punctuation\">[</span>iElId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>iLstId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> oEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token class-name\">Element</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">addEventListener</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>sEventType<span class=\"token punctuation\">,</span> fListener <span class=\"token comment\">/*, useCapture (will be ignored!) */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oListeners<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>sEventType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> oEvtListeners <span class=\"token operator\">=</span> oListeners<span class=\"token punctuation\">[</span>sEventType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> nElIdx <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> iElId <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> iElId <span class=\"token operator\">&lt;</span> oEvtListeners<span class=\"token punctuation\">.</span>aEls<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> iElId<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oEvtListeners<span class=\"token punctuation\">.</span>aEls<span class=\"token punctuation\">[</span>iElId<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> nElIdx <span class=\"token operator\">=</span> iElId<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nElIdx <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        oEvtListeners<span class=\"token punctuation\">.</span>aEls<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        oEvtListeners<span class=\"token punctuation\">.</span>aEvts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>fListener<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"on\"</span> <span class=\"token operator\">+</span> sEventType<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> runListeners<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> aElListeners <span class=\"token operator\">=</span> oEvtListeners<span class=\"token punctuation\">.</span>aEvts<span class=\"token punctuation\">[</span>nElIdx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"on\"</span> <span class=\"token operator\">+</span> sEventType<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> runListeners<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          aElListeners<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"on\"</span> <span class=\"token operator\">+</span> sEventType<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> runListeners<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> iLstId <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> iLstId <span class=\"token operator\">&lt;</span> aElListeners<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> iLstId<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aElListeners<span class=\"token punctuation\">[</span>iLstId<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> fListener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        aElListeners<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      oListeners<span class=\"token punctuation\">[</span>sEventType<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">aEls</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">aEvts</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span>fListener<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"on\"</span> <span class=\"token operator\">+</span> sEventType<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> runListeners<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Element</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">removeEventListener</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>sEventType<span class=\"token punctuation\">,</span> fListener <span class=\"token comment\">/*, useCapture (will be ignored!) */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>oListeners<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>sEventType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> oEvtListeners <span class=\"token operator\">=</span> oListeners<span class=\"token punctuation\">[</span>sEventType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> nElIdx <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> iElId <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> iElId <span class=\"token operator\">&lt;</span> oEvtListeners<span class=\"token punctuation\">.</span>aEls<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> iElId<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oEvtListeners<span class=\"token punctuation\">.</span>aEls<span class=\"token punctuation\">[</span>iElId<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> nElIdx <span class=\"token operator\">=</span> iElId<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nElIdx <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> iLstId <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> aElListeners <span class=\"token operator\">=</span> oEvtListeners<span class=\"token punctuation\">.</span>aEvts<span class=\"token punctuation\">[</span>nElIdx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> iLstId <span class=\"token operator\">&lt;</span> aElListeners<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> iLstId<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aElListeners<span class=\"token punctuation\">[</span>iLstId<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> fListener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> aElListeners<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>iLstId<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}}],"toc":[{"text":"Sintaxe","id":"sintaxe"},{"text":"Notas","id":"notas"},{"text":"Exemplo","id":"exemplo"},{"text":"Compatibilidade com navegadores","id":"compatibilidade_com_navegadores"},{"text":"Veja também","id":"veja_também"},{"text":"Polyfill para oferecer suporte aos navegadores antigos","id":"polyfill_para_oferecer_suporte_aos_navegadores_antigos"}],"summary":"Remove o event listener anteriormente registrado com EventTarget.addEventListener().","popularity":0.0009,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"EventTarget.removeEventListener()","locale":"en-US","native":"English (US)"},{"title":"EventTarget.removeEventListener()","locale":"es","native":"Español"},{"title":"element.removeEventListener","locale":"fr","native":"Français"},{"title":"EventTarget.removeEventListener()","locale":"ja","native":"日本語"},{"title":"EventTarget.removeEventListener()","locale":"ko","native":"한국어"},{"title":"Метод EventTarget.removeEventListener()","locale":"ru","native":"Русский"},{"title":"EventTarget.removeEventListener()","locale":"zh-CN","native":"中文 (简体)"},{"title":"EventTarget.removeEventListener()","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"pt-br/web/api/eventtarget/removeeventlistener","github_url":"https://github.com/mdn/translated-content/blob/main/files/pt-br/web/api/eventtarget/removeeventlistener/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/pt-BR/docs/Web","title":"Tecnologia Web para desenvolvedores"},{"uri":"/pt-BR/docs/Web/API","title":"APIs da Web"},{"uri":"/pt-BR/docs/Web/API/EventTarget","title":"EventTarget"},{"uri":"/pt-BR/docs/Web/API/EventTarget/removeEventListener","title":"EventTarget.removeEventListener()"}],"pageTitle":"EventTarget.removeEventListener() - APIs da Web | MDN","noIndexing":false}}