{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Manipulando o histórico do navegador","mdn_url":"/pt-BR/docs/Web/API/History_API","locale":"pt-BR","native":"Português (do Brasil)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>O objeto DOM <a href=\"/pt-BR/docs/Web/API/Window\"><code>window</code></a> fornece acesso ao histórico do navegador através do objeto <a href=\"/pt-BR/docs/Web/API/Window/history\" title=\"history\"><code>history</code></a>. Ele expõe métodos e propriedades úteis que permitem que você se mova para trás e para frente através do histórico de navegação do usuário, bem como -- iniciando com o HTML5 -- manipular o conteúdo da pilha de históricos.</p>"}},{"type":"prose","value":{"id":"navegando_através_do_histórico","title":"Navegando através do histórico","isH3":false,"content":"<p>Mover para trás e para a frente através do histórico do usuário é feito usando os métodos <code>back()</code>, <code>forward()</code> e <code>go()</code>.</p>"}},{"type":"prose","value":{"id":"movendo_para_frente_e_para_trás","title":"Movendo para frente e para trás","isH3":true,"content":"<p>Para mover para trás no histórico, apenas faça:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Isso funcionará exatamente como se o usuário clicasse no botão Voltar na barra de ferramentas do navegador.</p>\n<p>Da mesma forma, você pode avançar (como se o usuário clicasse no botão Avançar), assim:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"movendo_para_um_ponto_específico_no_histórico","title":"Movendo para um ponto específico no histórico","isH3":true,"content":"<p>Você pode usar o método <code>go()</code> para carregar uma página específica do histórico. Cada página é identificada por sua posição relativa à página atual (sendo a página atual o indíce 0).</p>\n<p>Para retornar uma página (equivalente ao método <code>back()</code>):</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Para avançar uma página (equivalente ao método <code>forward()</code>):</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>O número de páginas do histórico pode ser determinado pela propriedade <em>length</em>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> numberOfEntries <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<blockquote>\n  <p>**Nota:**O Internet Explorer suporta URLs como argumento para o método <code>go()</code>; isso não é um comportamento padrão e não é suportado pelo Gecko.</p>\n</blockquote>"}},{"type":"prose","value":{"id":"adicionando_e_modificando_entradas","title":"Adicionando e modificando entradas","isH3":false,"content":"<p>O HTML5 introduziu os métodos <a href=\"/en-US/docs/Web/API/History/pushState\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">history.pushState() (en-US)</a> e <a href=\"/pt-BR/docs/Web/API/History_API#The_replaceState()_method\" aria-current=\"page\">history.replaceState()</a>, que permitem adicionar e modificar entradas no histórico, respectivamente. Estes métodos funcionam em conjunto com o evento <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Window/popstate_event\"><code>window.onpopstate</code> <small>(en-US)</small></a>.</p>\n<p>Usar <code>history.pushState()</code> modifica a referência que é utilizada no cabeçalho HTTP para objetos <a href=\"/en-US/DOM/XMLHttpRequest\"><code>XMLHttpRequest</code></a> criados após a utilização do método. A referência será a URL do documento cuja janela é o <code>this</code> no momento de criação do objeto <a href=\"/en-US/DOM/XMLHttpRequest\"><code>XMLHttpRequest</code></a>.</p>"}},{"type":"prose","value":{"id":"exemplo_do_método_pushstate","title":"Exemplo do método pushState()","isH3":true,"content":"<p>Suponha que <code>http://mozilla.org/foo.html</code> executa o seguinte JavaScript:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> stateObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bar\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span>stateObj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"page 2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Isto fará com que a barra URL mostre <code>http://mozilla.org/bar.html</code>, porém não fará com que o navegador carregue <code>bar.html</code> ou verifique se <code>bar.html</code> existe.</p>\n<p>Agora suponha que o usuário navegue para <code>http://google.com</code> e logo em seguida clique no botão Voltar. Nesse momento, a barra de URL mostrará <code>http://mozilla.org/bar.html</code>, e se você ler o <code>history.state</code> você receberá o <code>stateObj</code>. O evento <code>popstate</code> não será disparado pois a página foi recarregada. A página carregada será <code>bar.html</code>.</p>\n<p>Se clicarmos no botão Voltar novamente, a URL modificará para <code>http://mozilla.org/foo.html</code>, e o documento receberá um evento <code>popstate</code>, dessa vez com objeto de estado sendo nulo. Nesse momento, o documento também não altera seu conteúdo em relação ao passo anterior, porém o documento pode atualizar seu conteúdo manualmente após o recebimento do evento <code>popstate</code>.</p>"}},{"type":"prose","value":{"id":"o_método_pushstate","title":"O método pushState()","isH3":true,"content":"<p><code>pushState()</code> recebe três parâmetros: um objeto de estado, um título (que atualmente é ignorado) e (opcionalmente) uma URL. Vamos examinar cada um dos argumentos com mais detalhes:</p>\n<ul>\n  <li><strong>objeto de estado</strong> — O objeto de estado é um objeto JavaScript que é associado com uma nova entrada no histórico criado por <code>pushState()</code>. Sempre que o usuário navegar para o novo estado um evento <code>popstate</code> é disparado e a propriedade <code>state</code> do evento contém uma cópia do objeto de estado da entrada no histórico.</li>\n  <li>O objeto de estado pode ser qualquer coisa que possa ser serializada. O Firefox salva o objeto de estado no disco do usuário para que possa ser restaurado após um reinício do navegador. É imposto um limite de 640k caracteres na representação serializada do objeto de estado. Caso um objeto de estado serializado maior que este valor seja passado como argumento para <code>pushState()</code>, o método irá ativar uma exceção. Caso você precise de mais espaço do que 640k, é recomendada a utilização do <code>sessionStorage</code> e/ou <code>localStorage</code>.</li>\n  <li><strong>título</strong> — Atualmente o Firefox ignora este parâmetro. Passar uma string vazia é suficiente contra futuras mudanças no método. Alternativamente, você pode passar um título curto para o estado.</li>\n  <li><strong>URL</strong> — A URL da nova entrada no histórico é passada por este parâmetro. Note que o navegador não tentará carregar essa URL após uma chamada do método <code>pushState()</code>, porém pode tentar carregar a URL mais tarde, por exemplo depois que o usuário reinicie o navegador. A nova URL não precisa ser absoluta; caso seja relativa, é resolvida em relação a atual URL. A nova URL precisar ser da mesma origem que a URL atual; caso contrário, <code>pushState()</code> ativará uma exceção. Este parâmetro é opcional; caso seja especificado, é utilizado como a atual URL do documento.</li>\n</ul>\n<blockquote>\n  <p>**Nota:**No Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1) até Gecko 5.0 (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2), o objeto passado é serializado utilizando JSON. A partir do Gecko 6.0 (Firefox 6.0 / Thunderbird 6.0 / SeaMonkey 2.3), o objeto é serializado usando <a href=\"/en-US/DOM/The_structured_clone_algorithm\">o algorítmo de clonagem estruturada</a>. Isso permite que uma variedade maior de objetos possam ser serializados.</p>\n</blockquote>\n<p>De certa forma, chamar o método <code>pushState()</code> é similar a executar <code>window.location = \"#foo\"</code>, no sentido de que ambos criarão e ativarão uma nova entrada no histórico associado com o documento atual. Porém <code>pushState()</code> tem algumas vantagens:</p>\n<ul>\n  <li>A nova URL pode ser qualquer URL na mesma origem da atual. Em contrapartida, modificar o valor de <code>window.location</code> o mantém no mesmo <a href=\"/pt-BR/docs/Web/API/Document\"><code>document</code></a> somente se apenas a hash é modificada.</li>\n  <li>Você não precisa mudar a URL caso não queira. Em contrapartida, executar <code>window.location = \"#foo\"</code> só cria uma nova entrada no histórico se a atual hash não for <code>#foo</code>.</li>\n  <li>Você pode associar dados arbitrários com a nova entrada do histórico. Com a solução baseada em hash, você precisa codificar todos os dados relevantes em uma string curta.</li>\n  <li>Se <code>title</code> for utilizado pelos navegadores, esse dado pode ser utilizado (independente do hash).</li>\n</ul>\n<p>Note que <code>pushState()</code> nunca causa a ativação de um evento <code>hashchange</code>, mesmo se a nova URL diferir somente na hash,</p>\n<p>Em um documento <a href=\"/pt-BR/docs/Mozilla/Tech/XUL\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">XUL</a> é criado o elemento XUL especificado.</p>\n<p>Em outros documentos, é criado um elemento com um namespace <code>null</code> de URI.</p>"}},{"type":"prose","value":{"id":"o_método_replacestate","title":"O método replaceState()","isH3":true,"content":"<p><code>history.replaceState()</code> opera exatamente igual à <code>history.pushState()</code> com exceção de modificar a atual entrada no histórico ao invés de criar uma nova. Note que isso não impede a criação de uma nova entrada no histórico global do navegador.</p>\n<p><code>replaceState()</code> é particularmente útil quando você quer atualizar o objeto de estado ou a URL da atual entrada do histórico como resposta a alguma ação do usuário.</p>\n<blockquote>\n  <p>**Nota:**Em Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1) até Gecko 5.0 (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2), o objeto passado é serializado utilizando JSON. Começando do Gecko 6.0 (Firefox 6.0 / Thunderbird 6.0 / SeaMonkey 2.3), o objeto é serializado usando <a href=\"/en-US/DOM/The_structured_clone_algorithm\">o algorítmo de clonagem estruturada</a>. Isso permite que uma variedade maior de objetos possam ser serializados.</p>\n</blockquote>"}},{"type":"prose","value":{"id":"exemplo_do_método_replacestate","title":"Exemplo do método replaceState()","isH3":true,"content":"<p>Suponha que <code>http://mozilla.org/foo.html</code> execute o seguinte JavaScript:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> stateObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bar\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span>stateObj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"page 2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>A explicação destas duas linhas acima pode ser encontrada na seção \"Exemplo do método pushState()\". Suponha, então, que <code>http://mozilla.org/bar.html</code> execute o seguinte JavaScript:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>history<span class=\"token punctuation\">.</span><span class=\"token function\">replaceState</span><span class=\"token punctuation\">(</span>stateObj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"page 3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar2.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Isso fará com que a barra de URL do navegador exiba <code>http://mozilla.org/bar2.html</code>, mas não fará com que o navegador carregue <code>bar2.html</code> ou cheque se <code>bar2.html</code> existe.</p>\n<p>Suponha agora que o usuário navegue até <code>http://www.microsoft.com</code> e, em seguida, clique no botão voltar. Neste momento, a barra de URL mostrará <code>http://mozilla.org/bar2.html</code>. Caso o usuário clique novamente no botão voltar, a barra de URL mostrará <code>http://mozilla.org/foo.html</code> e ignorará completamente <code>bar.html</code>.</p>"}},{"type":"prose","value":{"id":"o_evento_popstate","title":"O evento popstate","isH3":true,"content":"<p>O evento <code>popstate</code> é disparado sempre que a entrada do histórico ativo é alterada. Se a entrada do histórico ativa foi criada por uma chamada <code>pushState</code> ou afetada por uma chamada <code>replaceState</code>, a propriedade <code>state</code> do evento <code>popstate</code> contém uma cópia do objeto de estado da entrada do histórico.</p>\n<p>Veja <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Window/popstate_event\"><code>window.onpopstate</code> <small>(en-US)</small></a> para exemplo de utilização.</p>"}},{"type":"prose","value":{"id":"lendo_o_estado_atual","title":"Lendo o estado atual","isH3":true,"content":"<p>Quando sua página é carregada, ela pode ter um objeto de estado não nulo. Isso pode acontecer, por exemplo, se a página definir um objeto de estado (usando <code>pushState()</code> ou <code>replaceState()</code>) e, em seguida, o usuário reiniciar seu navegador. Quando sua página é recarregada, ela receberá um evento <code>onload</code>, mas nenhum evento <code>popstate</code>. No entanto, se você ler a propriedade <code>history.state</code>, receberá o objeto de estado que teria obtido se um <code>popstate</code> tivesse sido disparado.</p>\n<p>Você pode ler o estado da entrada do histórico atual sem esperar por um evento <code>popstate</code> usando a propriedade <code>history.state</code> como o exemplo abaixo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> currentState <span class=\"token operator\">=</span> history<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"exemplos","title":"Exemplos","isH3":false,"content":"<p>Para um exemplo completo de um web site AJAX, veja: <a href=\"/en-US/docs/Web/API/History_API/Example\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Exemplo de navegação Ajax (en-US)</a>.</p>"}},{"type":"prose","value":{"id":"especificações","title":"Especificações","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>Especificação</th>\n      <th>Status</th>\n      <th>Comentário</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://html.spec.whatwg.org/multipage/browsers.html#history\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">HTML Living Standard<br><small lang=\"pt-BR\">The definition of 'History' in that specification.</small></a></td>\n      <td><span class=\"spec-living\">Padrão em tempo real</span></td>\n      <td>Nenhuma alteração do <a href=\"https://www.w3.org/TR/html52/\" hreflang=\"en\" lang=\"en\" class=\"external\" title=\"The 'HTML5' specification\" rel=\" noopener\">HTML5</a>.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www.w3.org/TR/html52/browsers.html#history\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">HTML5<br><small lang=\"pt-BR\">The definition of 'History' in that specification.</small></a></td>\n      <td><span class=\"spec-rec\">Recomendação</span></td>\n      <td>Definição inicial</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"Compatibilidade com navegadores","id":"compatibilidade_com_navegadores","isH3":false,"query":"api.History","dataURL":"/pt-BR/docs/Web/API/History_API/bcd.json"}}],"toc":[{"text":"Navegando através do histórico","id":"navegando_através_do_histórico"},{"text":"Adicionando e modificando entradas","id":"adicionando_e_modificando_entradas"},{"text":"Exemplos","id":"exemplos"},{"text":"Especificações","id":"especificações"},{"text":"Compatibilidade com navegadores","id":"compatibilidade_com_navegadores"}],"summary":"O objeto DOM window fornece acesso ao histórico do navegador através do objeto history. Ele expõe métodos e propriedades úteis que permitem que você se mova para trás e para frente através do histórico de navegação do usuário, bem como -- iniciando com o HTML5 -- manipular o conteúdo da pilha de históricos.","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"History API","locale":"en-US","native":"English (US)"},{"title":"Manipulando el historial del navegador","locale":"es","native":"Español"},{"title":"Manipuler l'historique du navigateur","locale":"fr","native":"Français"},{"title":"History API","locale":"ja","native":"日本語"},{"title":"History API","locale":"ko","native":"한국어"},{"title":"History API","locale":"ru","native":"Русский"},{"title":"History API","locale":"zh-CN","native":"中文 (简体)"},{"title":"操控瀏覽器歷史紀錄","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"pt-br/web/api/history_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/pt-br/web/api/history_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/pt-BR/docs/Web","title":"Tecnologia Web para desenvolvedores"},{"uri":"/pt-BR/docs/Web/API","title":"APIs da Web"},{"uri":"/pt-BR/docs/Web/API/History_API","title":"Manipulando o histórico do navegador"}],"pageTitle":"Manipulando o histórico do navegador - APIs da Web | MDN","noIndexing":false}}