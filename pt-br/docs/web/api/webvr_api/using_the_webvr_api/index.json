{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Using the WebVR API","mdn_url":"/pt-BR/docs/Web/API/WebVR_API/Using_the_WebVR_API","locale":"pt-BR","native":"Português (do Brasil)","sidebarHTML":"<ol><li><strong><a href=\"/pt-BR/docs/Web/API/WebVR_API\">WebVR API</a></strong></li><li><strong><a href=\"/pt-BR/docs/Web/API/WebVR_API\"><code>WebVR_API</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Páginas relacionadas a WebVR API</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Gamepad/displayId\"><code>Gamepad.displayId</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Navigator/activeVRDisplays\"><code>Navigator.activeVRDisplays</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Navigator/getVRDisplays\"><code>Navigator.getVRDisplays()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplay\"><code>VRDisplay</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplayCapabilities\"><code>VRDisplayCapabilities</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplayEvent\"><code>VRDisplayEvent</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VREyeParameters\"><code>VREyeParameters</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRFieldOfView\"><code>VRFieldOfView</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRFrameData\"><code>VRFrameData</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRLayerInit\"><code>VRLayerInit</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRPose\"><code>VRPose</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRStageParameters\"><code>VRStageParameters</code> <small>(en-US)</small></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<div class=\"notecard deprecated\" id=\"sect1\"><p><strong>Deprecated:</strong> This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p></div>\n<blockquote>\n  <p><strong>Nota:</strong> WebVR API is replaced by <a href=\"/en-US/docs/Web/API/WebXR_Device_API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">WebXR API (en-US)</a>. WebVR was never ratified as a standard, was implemented and enabled by default in very few browsers and supported a small number of devices.</p>\n</blockquote>\n<p>The WebVR API is a fantastic addition to the web developer's toolkit, allowing WebGL scenes to be presented in virtual reality displays such as the Oculus Rift and HTC Vive. But how do you get started with developing VR apps for the Web? This article will guide you through the basics.</p>\n<blockquote>\n  <p><strong>Nota:</strong> The WebVR API's most stable version — 1.1 — has recently been implemented in Firefox 55 (Windows in release version, and Mac OS X on Nightly only) and is also available in Chrome when used with Google Daydream hardware. There is also a later evolution of the spec — 2.0 — but this is at an early stage right now. You can find information on the latest state of the specs at <a href=\"https://w3c.github.io/webvr/\" class=\"external\" rel=\" noopener\">WebVR Spec Version List</a>.</p>\n</blockquote>"}},{"type":"prose","value":{"id":"getting_started","title":"Getting started","isH3":false,"content":"<p>To get started, you need:</p>\n<ul>\n  <li>Supporting VR hardware.\n    <ul>\n      <li>The cheapest option is to use a mobile device, supporting browser, and device mount (e.g. Google Cardboard). This won't be quite as good an experience as dedicated hardware, but you won't need to purchase a powerful computer or dedicated VR display.</li>\n      <li>Dedicated hardware can be costly, but it does provide a better experience. The most WebVR-compatible hardware at the moment is the HTC VIVE, and The Oculus Rift. The frontpage of <a href=\"https://webvr.info/\" class=\"external\" rel=\" noopener\">webvr.info</a> has some further useful information about available hardware, and what browser support them.</li>\n    </ul>\n  </li>\n  <li>A computer powerful enough to handle rendering/displaying of VR scenes using your dedicated VR Hardware, if required. To give you an idea of what you need, look at the relevant guide for the VR you are purchasing (e.g. <a href=\"https://www.vive.com/us/ready/\" class=\"external\" rel=\" noopener\">VIVE READY Computers</a>).</li>\n  <li>A supporting browser installed — the latest <a href=\"https://www.mozilla.org/en-US/firefox/channel/desktop/\" class=\"external\" rel=\" noopener\">Firefox Nightly</a> or <a href=\"https://www.google.com/chrome/index.html\" class=\"external\" rel=\" noopener\">Chrome</a> are your best options right now, on desktop or mobile.</li>\n</ul>\n<p>Once you have everything assembled, you can test to see whether your setup works with WebVR by going to our <a href=\"https://mdn.github.io/webvr-tests/aframe-demo/\" class=\"external\" rel=\" noopener\">simple A-Frame demo</a>, and seeing whether the scene renders and whether you can enter VR display mode by pressing the button at the bottom right.</p>\n<p><a href=\"https://aframe.io/\" class=\"external\" rel=\" noopener\">A-Frame</a> is by far the best option if you want to create a WebVR-compatible 3D scene quickly, without needing to understand a bunch of new JavaScript code. It doesn't however teach you how the raw WebVR API works, and this is what we'll get on to next.</p>"}},{"type":"prose","value":{"id":"introducing_our_demo","title":"Introducing our demo","isH3":false,"content":"<p>To illustrate how the WebVR API works, we'll study our raw-webgl-example, which looks a bit like this:</p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/15121/Capture1.png\" alt=\"\" loading=\"lazy\">\n</p>\n<blockquote>\n  <p><strong>Nota:</strong> You can find the <a href=\"https://github.com/mdn/webvr-tests/tree/master/raw-webgl-example\" class=\"external\" rel=\" noopener\">source code of our demo</a> on GitHub, and <a href=\"https://mdn.github.io/webvr-tests/raw-webgl-example/\" class=\"external\" rel=\" noopener\">view it live</a> also.</p>\n</blockquote>\n<blockquote>\n  <p><strong>Nota:</strong> If WebVR isn't working in your browser, you might need to make sure it is running through your graphics card. For example for NVIDIA cards, if you've got the NVIDIA control panel set up successfully, there will be a context menu option available — right click on Firefox, then choose <em>Run with graphics processor &gt; High-performance NVIDIA processor</em>.</p>\n</blockquote>\n<p>Our demo features the holy grail of WebGL demos — a rotating 3D cube. We've implemented this using raw <a href=\"/pt-BR/docs/Web/API/WebGL_API\">WebGL API</a> code. We won't be teaching any basic JavaScript or WebGL, just the WebVR parts.</p>\n<p>Our demo also features:</p>\n<ul>\n  <li>A button to start (and stop) our scene from being presented in the VR display.</li>\n  <li>A button to show (and hide) VR pose data, i.e. the position and orientation of the headset, updated in real time.</li>\n</ul>\n<p>When you look through the source code of <a href=\"https://github.com/mdn/webvr-tests/blob/master/raw-webgl-example/webgl-demo.js\" class=\"external\" rel=\" noopener\">our demo's main JavaScript file</a>, you can easily find the WebVR-specific parts by searching for the string \"WebVR\" in preceding comments.</p>\n<blockquote>\n  <p><strong>Nota:</strong> To find out more about basic JavaScript and WebGL, consult our <a href=\"/pt-BR/docs/Learn/JavaScript\">JavaScript learning material</a>, and our <a href=\"/pt-BR/docs/Web/API/WebGL_API/Tutorial\">WebGL Tutorial</a>.</p>\n</blockquote>"}},{"type":"prose","value":{"id":"how_does_it_work","title":"How does it work?","isH3":false,"content":"<p>At this point, let's look at how the WebVR parts of the code work.</p>\n<p>A typical (simple) WebVR app works like this:</p>\n<ol>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Navigator/getVRDisplays\"><code>Navigator.getVRDisplays()</code> <small>(en-US)</small></a> is used to get a reference to your VR display.</li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplay/requestPresent\"><code>VRDisplay.requestPresent()</code> <small>(en-US)</small></a> is used to start presenting to the VR display.</li>\n  <li>WebVR's dedicated <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplay/requestAnimationFrame\"><code>VRDisplay.requestAnimationFrame()</code> <small>(en-US)</small></a> method is used to run the app's rendering loop at the correct refresh rate for the display.</li>\n  <li>Inside the rendering loop, you grab the data required to display the current frame (<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplay/getFrameData\"><code>VRDisplay.getFrameData()</code> <small>(en-US)</small></a>), draw the displayed scene twice — once for the view in each eye — then submit the rendered view to the display to show to the user via (<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplay/submitFrame\"><code>VRDisplay.submitFrame()</code> <small>(en-US)</small></a>).</li>\n</ol>\n<p>In the below sections we'll look at our raw-webgl-demo in detail, and see where exactly the above features are used.</p>"}},{"type":"prose","value":{"id":"starting_with_some_variables","title":"Starting with some variables","isH3":true,"content":"<p>The first WebVR-related code you'll meet is this following block:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// WebVR variables</span>\n\n<span class=\"token keyword\">var</span> frameData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VRFrameData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> vrDisplay<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.stop-start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> normalSceneFrame<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> vrSceneFrame<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> poseStatsBtn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.pose-stats'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> poseStatsSection <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'section'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nposeStatsSection<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>visibility <span class=\"token operator\">=</span> <span class=\"token string\">'hidden'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hide it initially</span>\n\n<span class=\"token keyword\">var</span> posStats <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.pos'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> orientStats <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.orient'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> linVelStats <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.lin-vel'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> linAccStats <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.lin-acc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> angVelStats <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.ang-vel'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> angAccStats <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.ang-acc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> poseStatsDisplayed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Let's briefly explain these:</p>\n<ul>\n  <li><code>frameData</code> contains a <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRFrameData\"><code>VRFrameData</code> <small>(en-US)</small></a> object, created using the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRFrameData/VRFrameData\"><code>VRFrameData()</code> <small>(en-US)</small></a> constructor. This is initially empty, but will later contain the data required to render each frame to show in the VR display, updated constantly as the rendering loop runs.</li>\n  <li><code>vrDisplay</code> starts uninitialized, but will later on hold a reference to our VR headset (<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplay\"><code>VRDisplay</code> <small>(en-US)</small></a> — the central control object of the API).</li>\n  <li><code>btn</code> and <code>poseStatsBtn</code> hold references to the two buttons we are using to control our app.</li>\n  <li><code>normalSceneFrame</code> and <code>vrSceneFrame</code> start uninitialized, but later on will hold references to <a href=\"/pt-BR/docs/Web/API/Window/requestAnimationFrame\"><code>Window.requestAnimationFrame()</code></a> and <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplay/requestAnimationFrame\"><code>VRDisplay.requestAnimationFrame()</code> <small>(en-US)</small></a> calls — these will initiate the running of a normal rendering loop, and a special WebVR rendering loop; we'll explain the difference between these two later on.</li>\n  <li>The other variables store references to different parts of the VR pose data display box, which you can see in the bottom right hand corner of the UI.</li>\n</ul>"}},{"type":"prose","value":{"id":"getting_a_reference_to_our_vr_display","title":"Getting a reference to our VR display","isH3":true,"content":"<p>One of the major functions inside our code is <code>start()</code> — we run this function when the body has finished loading:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// start</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Called when the body has loaded is created to get the ball rolling.</span>\n\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>onload <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>To begin with, <code>start()</code> retrieves a WebGL context to use to render 3D graphics into the <a href=\"/pt-BR/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> element in <a href=\"https://github.com/mdn/webvr-tests/blob/master/raw-webgl-example/index.html\" class=\"external\" rel=\" noopener\">our HTML</a>. We then check whether the <code>gl</code> context is available — if so, we run a number of functions to set up the scene for display.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"glcanvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">initWebGL</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// Initialize the GL context</span>\n\n  <span class=\"token comment\">// WebGL setup code here</span>\n</code></pre></div>\n<p>Next, we start the process of actually rendering the scene onto the canvas, by setting the canvas to fill the entire browser viewport, and running the rendering loop (<code>drawScene()</code>) for the first time. This is the non-WebVR — normal — rendering loop.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>    <span class=\"token comment\">// draw the scene normally, without WebVR - for those who don't have it and want to see the scene in their browser</span>\n\n    canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">;</span>\n    canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>innerHeight<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">drawScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Now onto our first WebVR-specific code. First of all, we check to see if <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Navigator/getVRDisplays\"><code>Navigator.getVRDisplays</code> <small>(en-US)</small></a> exists — this is the entry point into the API, and therefore good basic feature detection for WebVR. You'll see at the end of the block (inside the <code>else</code> clause) that if this doesn't exist, we log a message to indicate that WebVR 1.1 isn't supported by the browser.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>    <span class=\"token comment\">// WebVR: Check to see if WebVR is supported</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>getVRDisplays<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'WebVR 1.1 supported'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Inside our <code>if() { ... }</code> block, we run the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Navigator/getVRDisplays\"><code>Navigator.getVRDisplays()</code> <small>(en-US)</small></a> function. This returns a promise, which is fulfilled with an array containing all the VR display devices connected to the computer. If none are connected, the array will be empty.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>      <span class=\"token comment\">// Then get the displays attached to the computer</span>\n      navigator<span class=\"token punctuation\">.</span><span class=\"token function\">getVRDisplays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">displays</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n</code></pre></div>\n<p>Inside the promise <code>then()</code> block, we check whether the array length is more than 0; if so, we set the value of our <code>vrDisplay</code> variable to the 0 index item inside the array. <code>vrDisplay</code> now contains a <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplay\"><code>VRDisplay</code> <small>(en-US)</small></a> object representing our connected display!</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>        <span class=\"token comment\">// If a display is available, use it to present the scene</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>displays<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          vrDisplay <span class=\"token operator\">=</span> displays<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Display found'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<blockquote>\n  <p><strong>Nota:</strong> It is unlikely that you'll have multiple VR displays connected to your computer, and this is just a simple demo, so this will do for now.</p>\n</blockquote>"}},{"type":"prose","value":{"id":"starting_and_stopping_the_vr_presentation","title":"Starting and stopping the VR presentation","isH3":true,"content":"<p>Now we have a <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplay\"><code>VRDisplay</code> <small>(en-US)</small></a> object, we can use it do a number of things. The next thing we want to do is wire up functionality to start and stop presentation of the WebGL content to the display.</p>\n<p>Continuing on with the previous code block, we now add an event listener to our start/stop button (<code>btn</code>) — when this button is clicked we want to check whether we are presenting to the display already (we do this in a fairly dumb fashion, by checking what the button <a href=\"/en-US/docs/Web/API/Node/textContent\"><code>textContent</code></a> contains).</p>\n<p>If the display is not already presenting, we use the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplay/requestPresent\"><code>VRDisplay.requestPresent()</code> <small>(en-US)</small></a> method to request that the browser start presenting content to the display. This takes as a parameter an array of the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRLayerInit\"><code>VRLayerInit</code> <small>(en-US)</small></a> objects representing the layers you want to present in the display.</p>\n<p>Since the maximum number of layers you can display is currently 1, and the only required object member is the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRLayerInit/source\"><code>VRLayerInit.source</code> <small>(en-US)</small></a> property (which is a reference to the <a href=\"/pt-BR/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a> you want to present in that layer; the other parameters are given sensible defaults — see <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRLayerInit/leftBounds\"><code>leftBounds</code> <small>(en-US)</small></a> and <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRLayerInit/rightBounds\"><code>rightBounds</code> <small>(en-US)</small></a>)), the parameter is simply [{ source: canvas }].</p>\n<p><code>requestPresent()</code> returns a promise that is fulfilled when the presentation begins successfully.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>          <span class=\"token comment\">// Starting the presentation when the button is clicked: It can only be called in response to a user gesture</span>\n          btn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>btn<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">===</span> <span class=\"token string\">'Start VR display'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              vrDisplay<span class=\"token punctuation\">.</span><span class=\"token function\">requestPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">source</span><span class=\"token operator\">:</span> canvas <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Presenting to WebVR display'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>With our presentation request successful, we now want to start setting up to render content to present to the VRDisplay. First of all we set the canvas to the same size as the VR display area. We do this by getting the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VREyeParameters\"><code>VREyeParameters</code> <small>(en-US)</small></a> for both eyes using <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplay/getEyeParameters\"><code>VRDisplay.getEyeParameters()</code> <small>(en-US)</small></a>.</p>\n<p>We then do some simple math to calculate the total width of the VRDisplay rendering area based on the eye <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VREyeParameters/renderWidth\"><code>VREyeParameters.renderWidth</code> <small>(en-US)</small></a> and <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VREyeParameters/renderHeight\"><code>VREyeParameters.renderHeight</code> <small>(en-US)</small></a>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>                <span class=\"token comment\">// Set the canvas size to the size of the vrDisplay viewport</span>\n\n                <span class=\"token keyword\">var</span> leftEye <span class=\"token operator\">=</span> vrDisplay<span class=\"token punctuation\">.</span><span class=\"token function\">getEyeParameters</span><span class=\"token punctuation\">(</span><span class=\"token string\">'left'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> rightEye <span class=\"token operator\">=</span> vrDisplay<span class=\"token punctuation\">.</span><span class=\"token function\">getEyeParameters</span><span class=\"token punctuation\">(</span><span class=\"token string\">'right'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>leftEye<span class=\"token punctuation\">.</span>renderWidth<span class=\"token punctuation\">,</span> rightEye<span class=\"token punctuation\">.</span>renderWidth<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>leftEye<span class=\"token punctuation\">.</span>renderHeight<span class=\"token punctuation\">,</span> rightEye<span class=\"token punctuation\">.</span>renderHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Next, we <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Window/cancelAnimationFrame\"><code>cancel the animation loop</code> <small>(en-US)</small></a> previously set in motion by the <a href=\"/pt-BR/docs/Web/API/Window/requestAnimationFrame\"><code>Window.requestAnimationFrame()</code></a> call inside the <code>drawScene()</code> function, and instead invoke <code>drawVRScene()</code>. This function renders the same scene as before, but with some special WebVR magic going on. The loop inside here is maintained by WebVR's special <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplay/requestAnimationFrame\"><code>VRDisplay.requestAnimationFrame</code> <small>(en-US)</small></a> method.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>                <span class=\"token comment\">// stop the normal presentation, and start the vr presentation</span>\n                window<span class=\"token punctuation\">.</span><span class=\"token function\">cancelAnimationFrame</span><span class=\"token punctuation\">(</span>normalSceneFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">drawVRScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Finally, we update the button text so that the next time it is pressed, it will stop presentation to the VR display.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>                btn<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Exit VR display'</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>To stop the VR presentation when the button is subsequently pressed, we call <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplay/exitPresent\"><code>VRDisplay.exitPresent()</code> <small>(en-US)</small></a>. We also reverse the button's text content, and swap over the <code>requestAnimationFrame</code> calls. You can see here that we are using <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplay/cancelAnimationFrame\"><code>VRDisplay.cancelAnimationFrame</code> <small>(en-US)</small></a> to stop the VR rendering loop, and starting the normal rendering loop off again by calling <code>drawScene()</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n              vrDisplay<span class=\"token punctuation\">.</span><span class=\"token function\">exitPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Stopped presenting to WebVR display'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n              btn<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Start VR display'</span><span class=\"token punctuation\">;</span>\n\n              <span class=\"token comment\">// Stop the VR presentation, and start the normal presentation</span>\n              vrDisplay<span class=\"token punctuation\">.</span><span class=\"token function\">cancelAnimationFrame</span><span class=\"token punctuation\">(</span>vrSceneFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token function\">drawScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'WebVR API not supported by this browser.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Once the presentation starts, you'll be able to see the stereoscopic view displayed in the browser:</p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/15123/Capture2.png\" alt=\"\" loading=\"lazy\">\n</p>\n<p>You'll learn below how the stereoscopic view is actually produced.</p>"}},{"type":"prose","value":{"id":"why_does_webvr_have_its_own_requestanimationframe","title":"Why does WebVR have its own requestAnimationFrame()?","isH3":true,"content":"<p>This is a good question. The reason is that for smooth rendering inside the VR display, you need to render the content at the display's native refresh rate, not that of the computer. VR display refresh rates are greater than PC refresh rates, typically up to 90fps. The rate will be differ from the computer's core refresh rate.</p>\n<p>Note that when the VR display is not presenting, <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplay/requestAnimationFrame\"><code>VRDisplay.requestAnimationFrame</code> <small>(en-US)</small></a> runs identically to <a href=\"/pt-BR/docs/Web/API/Window/requestAnimationFrame\"><code>Window.requestAnimationFrame</code></a>, so if you wanted, you could just use a single rendering loop, rather than the two we are using in our app. We have used two because we wanted to do slightly different things depending on whether the VR display is presenting or not, and keep things separated for ease of comprehension.</p>"}},{"type":"prose","value":{"id":"rendering_and_display","title":"Rendering and display","isH3":true,"content":"<p>At this point, we've seen all the code required to access the VR hardware, request that we present our scene to the hardware, and start running the rending loop. Let's now look at the code for the rendering loop, and explain how the WebVR-specific parts of it work.</p>\n<p>First of all, we begin the definition of our rendering loop function — <code>drawVRScene()</code>. The first thing we do inside here is make a call to <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplay/requestAnimationFrame\"><code>VRDisplay.requestAnimationFrame()</code> <small>(en-US)</small></a> to keep the loop running after it has been called once (this occurred earlier on in our code when we started presenting to the VR display). This call is set as the value of the global <code>vrSceneFrame</code> variable, so we can cancel the loop with a call to <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplay/cancelAnimationFrame\"><code>VRDisplay.cancelAnimationFrame()</code> <small>(en-US)</small></a> once we exit VR presenting.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">drawVRScene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// WebVR: Request the next frame of the animation</span>\n  vrSceneFrame <span class=\"token operator\">=</span> vrDisplay<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>drawVRScene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Next, we call <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplay/getFrameData\"><code>VRDisplay.getFrameData()</code> <small>(en-US)</small></a>, passing it the name of the variable that we want to use to contain the frame data. We initialized this earlier on — <code>frameData</code>. After the call completes, this variable will contain the data need to render the next frame to the VR device, packaged up as a <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRFrameData\"><code>VRFrameData</code> <small>(en-US)</small></a> object. This contains things like projection and view matrices for rendering the scene correctly for the left and right eye view, and the current <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRPose\"><code>VRPose</code> <small>(en-US)</small></a> object, which contains data on the VR display such as orientation, position, etc.</p>\n<p>This has to be called on every frame so the rendered view is always up-to-date.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token comment\">// Populate frameData with the data of the next frame to display</span>\n  vrDisplay<span class=\"token punctuation\">.</span><span class=\"token function\">getFrameData</span><span class=\"token punctuation\">(</span>frameData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Now we retrieve the current <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRPose\"><code>VRPose</code> <small>(en-US)</small></a> from the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRFrameData/pose\"><code>VRFrameData.pose</code> <small>(en-US)</small></a> property, store the position and orientation for use later on, and send the current pose to the pose stats box for display, if the <code>poseStatsDisplayed</code> variable is set to true.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token comment\">// You can get the position, orientation, etc. of the display from the current frame's pose</span>\n\n  <span class=\"token keyword\">var</span> curFramePose <span class=\"token operator\">=</span> frameData<span class=\"token punctuation\">.</span>pose<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> curPos <span class=\"token operator\">=</span> curFramePose<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> curOrient <span class=\"token operator\">=</span> curFramePose<span class=\"token punctuation\">.</span>orientation<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>poseStatsDisplayed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">displayPoseStats</span><span class=\"token punctuation\">(</span>curFramePose<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>We now clear the canvas before we start drawing on it, so that the next frame is clearly seen, and we don't also see previous rendered frames:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token comment\">// Clear the canvas before we start drawing on it.</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">COLOR_BUFFER_BIT</span> <span class=\"token operator\">|</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">DEPTH_BUFFER_BIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>We now render the view for both the left and right eyes. First of all we need to create projection and view locations for use in the rendering. these are <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLUniformLocation\"><code>WebGLUniformLocation</code> <small>(en-US)</small></a> objects, created using the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderingContext/getUniformLocation\"><code>WebGLRenderingContext.getUniformLocation()</code> <small>(en-US)</small></a> method, passing it the shader program's identifier and an identifying name as parameters.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token comment\">// WebVR: Create the required projection and view matrix locations needed</span>\n  <span class=\"token comment\">// for passing into the uniformMatrix4fv methods below</span>\n\n  <span class=\"token keyword\">var</span> projectionMatrixLocation <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"projMatrix\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> viewMatrixLocation <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"viewMatrix\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The next rendering step involves:</p>\n<ul>\n  <li>Specifying the viewport size for the left eye, using <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderingContext/viewport\"><code>WebGLRenderingContext.viewport</code> <small>(en-US)</small></a> — this is logically the first half of the canvas width, and the full canvas height.</li>\n  <li>Specifying the view and projection matrix values to use to render the left eye — this is done using the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderingContext/uniformMatrix\"><code>WebGLRenderingContext.uniformMatrix4fv</code> <small>(en-US)</small></a> method, which is passed the location values we retrieved above, and the left matrices obtained from the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRFrameData\"><code>VRFrameData</code> <small>(en-US)</small></a> object.</li>\n  <li>Running the <code>drawGeometry()</code> function, which renders the actual scene — because of what we specified in the previous two steps, we will render it for the left eye only.</li>\n</ul>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token comment\">// WebVR: Render the left eye’s view to the left half of the canvas</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">viewport</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniformMatrix4fv</span><span class=\"token punctuation\">(</span>projectionMatrixLocation<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> frameData<span class=\"token punctuation\">.</span>leftProjectionMatrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniformMatrix4fv</span><span class=\"token punctuation\">(</span>viewMatrixLocation<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> frameData<span class=\"token punctuation\">.</span>leftViewMatrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">drawGeometry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>We now do exactly the same thing, but for the right eye:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token comment\">// WebVR: Render the right eye’s view to the right half of the canvas</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">viewport</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniformMatrix4fv</span><span class=\"token punctuation\">(</span>projectionMatrixLocation<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> frameData<span class=\"token punctuation\">.</span>rightProjectionMatrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniformMatrix4fv</span><span class=\"token punctuation\">(</span>viewMatrixLocation<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> frameData<span class=\"token punctuation\">.</span>rightViewMatrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">drawGeometry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Next we define our <code>drawGeometry()</code> function. Most of this is just general WebGL code required to draw our 3D cube. You'll see some WebVR-specific parts in the <code>mvTranslate()</code> and <code>mvRotate()</code> function calls — these pass matrices into the WebGL program that define the translation and rotation of the cube for the current frame</p>\n<p>You'll see that we are modifying these values by the position (<code>curPos</code>) and orientation (<code>curOrient</code>) of the VR display we got from the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRPose\"><code>VRPose</code> <small>(en-US)</small></a> object. The result is that, for example, as you move or rotate your head left, the x position value (<code>curPos[0]</code>) and y rotation value (<code>[curOrient[1]</code>) are added to the x translation value, meaning that the cube will move to the right, as you'd expect when you are looking at something and then move/turn your head left.</p>\n<p>This is a quick and dirty way to use VR pose data, but it illustrates the basic principle.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">function</span> <span class=\"token function\">drawGeometry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Establish the perspective with which we want to view the</span>\n    <span class=\"token comment\">// scene. Our field of view is 45 degrees, with a width/height</span>\n    <span class=\"token comment\">// ratio of 640:480, and we only want to see objects between 0.1 units</span>\n    <span class=\"token comment\">// and 100 units away from the camera.</span>\n\n    perspectiveMatrix <span class=\"token operator\">=</span> <span class=\"token function\">makePerspective</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">640.0</span><span class=\"token operator\">/</span><span class=\"token number\">480.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Set the drawing position to the \"identity\" point, which is</span>\n    <span class=\"token comment\">// the center of the scene.</span>\n\n    <span class=\"token function\">loadIdentity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Now move the drawing position a bit to where we want to start</span>\n    <span class=\"token comment\">// drawing the cube.</span>\n\n    <span class=\"token function\">mvTranslate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n                  <span class=\"token number\">0.0</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>curPos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>curOrient<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token number\">5.0</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>curPos<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>curOrient<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token operator\">-</span><span class=\"token number\">15.0</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>curPos<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Save the current matrix, then rotate before we draw.</span>\n\n    <span class=\"token function\">mvPushMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">mvRotate</span><span class=\"token punctuation\">(</span>cubeRotation<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.25</span> <span class=\"token operator\">-</span> curOrient<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Draw the cube by binding the array buffer to the cube's vertices</span>\n    <span class=\"token comment\">// array, setting attributes, and pushing it to GL.</span>\n\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> cubeVerticesBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">vertexAttribPointer</span><span class=\"token punctuation\">(</span>vertexPositionAttribute<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FLOAT</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Set the texture coordinates attribute for the vertices.</span>\n\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> cubeVerticesTextureCoordBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">vertexAttribPointer</span><span class=\"token punctuation\">(</span>textureCoordAttribute<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FLOAT</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Specify the texture to map onto the faces.</span>\n\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">activeTexture</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindTexture</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> cubeTexture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniform1i</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"uSampler\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Draw the cube.</span>\n\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ELEMENT_ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> cubeVerticesIndexBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setMatrixUniforms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">drawElements</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TRIANGLES</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">UNSIGNED_SHORT</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Restore the original matrix</span>\n\n    <span class=\"token function\">mvPopMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The next bit of the code has nothing to do with WebVR — it just updates the rotation of the cube on each frame:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token comment\">// Update the rotation for the next draw, if it's time to do so.</span>\n\n  <span class=\"token keyword\">var</span> currentTime <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastCubeUpdateTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> delta <span class=\"token operator\">=</span> currentTime <span class=\"token operator\">-</span> lastCubeUpdateTime<span class=\"token punctuation\">;</span>\n\n    cubeRotation <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">30</span> <span class=\"token operator\">*</span> delta<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000.0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  lastCubeUpdateTime <span class=\"token operator\">=</span> currentTime<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The last part of the rendering loop involves us calling <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplay/submitFrame\"><code>VRDisplay.submitFrame()</code> <small>(en-US)</small></a> — now all the work has been done and we've rendered the display on the <a href=\"/pt-BR/docs/Web/HTML/Element/canvas\"><code>&lt;canvas&gt;</code></a>, this method then submits the frame to the VR display so it is displayed on there as well.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token comment\">// WebVR: Indicate that we are ready to present the rendered frame to the VR display</span>\n  vrDisplay<span class=\"token punctuation\">.</span><span class=\"token function\">submitFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"displaying_the_pose_position_orientation_etc._data","title":"Displaying the pose (position, orientation, etc.) data","isH3":true,"content":"<p>In this section we'll discuss the <code>displayPoseStats()</code> function, which displays our updated pose data on each frame. The function is fairly simple.</p>\n<p>First of all, we store the six different property values obtainable from the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRPose\"><code>VRPose</code> <small>(en-US)</small></a> object in their own variables — each one is a <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\"><code>Float32Array</code> <small>(en-US)</small></a>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">displayPoseStats</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pose</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> pos <span class=\"token operator\">=</span> pose<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> orient <span class=\"token operator\">=</span> pose<span class=\"token punctuation\">.</span>orientation<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> linVel <span class=\"token operator\">=</span> pose<span class=\"token punctuation\">.</span>linearVelocity<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> linAcc <span class=\"token operator\">=</span> pose<span class=\"token punctuation\">.</span>linearAcceleration<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> angVel <span class=\"token operator\">=</span> pose<span class=\"token punctuation\">.</span>angularVelocity<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> angAcc <span class=\"token operator\">=</span> pose<span class=\"token punctuation\">.</span>angularAcceleration<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>We then write out the data into the information box, updating it on every frame. We've clamped each value to three decimal places using <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed\"><code>toFixed()</code></a>, as the values are hard to read otherwise.</p>\n<p>You should note that we've used a conditional expression to detect whether the linear acceleration and angular acceleration arrays are successfully returned before we display the data. These values are not reported by most VR hardware as yet, so the code would throw an error if we did not do this (the arrays return <code>null</code> if they are not successfully reported).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  posStats<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Position: x '</span> <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">', y '</span> <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">', z '</span> <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  orientStats<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Orientation: x '</span> <span class=\"token operator\">+</span> orient<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">', y '</span> <span class=\"token operator\">+</span> orient<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">', z '</span> <span class=\"token operator\">+</span> orient<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  linVelStats<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Linear velocity: x '</span> <span class=\"token operator\">+</span> linVel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">', y '</span> <span class=\"token operator\">+</span> linVel<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">', z '</span> <span class=\"token operator\">+</span> linVel<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  angVelStats<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Angular velocity: x '</span> <span class=\"token operator\">+</span> angVel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">', y '</span> <span class=\"token operator\">+</span> angVel<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">', z '</span> <span class=\"token operator\">+</span> angVel<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>linAcc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    linAccStats<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Linear acceleration: x '</span> <span class=\"token operator\">+</span> linAcc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">', y '</span> <span class=\"token operator\">+</span> linAcc<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">', z '</span> <span class=\"token operator\">+</span> linAcc<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    linAccStats<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Linear acceleration not reported'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>angAcc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    angAccStats<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Angular acceleration: x '</span> <span class=\"token operator\">+</span> angAcc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">', y '</span> <span class=\"token operator\">+</span> angAcc<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">', z '</span> <span class=\"token operator\">+</span> angAcc<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    angAccStats<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Angular acceleration not reported'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"webvr_events","title":"WebVR events","isH3":false,"content":"<p>The WebVR spec features a number of events that are fired, allowing our app code to react to changes in the state of the VR display (see <a href=\"/pt-BR/docs/Web/API/WebVR_API#window_events\">Window events</a>). For example:</p>\n<ul>\n  <li><code><a href=\"/pt-BR/docs/Web/Reference/Events/vrdisplaypresentchange\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">vrdisplaypresentchange</a></code> — Fires when the presenting state of a VR display changes — i.e. goes from presenting to not presenting, or vice versa.</li>\n  <li><code><a href=\"/pt-BR/docs/Web/Reference/Events/vrdisplayconnect\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">vrdisplayconnect</a></code> — Fires when a compatible VR display has been connected to the computer.</li>\n  <li><code><a href=\"/pt-BR/docs/Web/Reference/Events/vrdisplaydisconnect\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">vrdisplaydisconnect</a></code> — Fires when a compatible VR display has been disconnected from the computer.</li>\n</ul>\n<p>To demonstrate how they work, our simple demo includes the following example:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vrdisplaypresentchange'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Display '</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>display<span class=\"token punctuation\">.</span>displayId <span class=\"token operator\">+</span> <span class=\"token string\">' presentation has changed. Reason given: '</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>reason <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>As you can see, the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplayEvent\"><code>event object</code> <small>(en-US)</small></a> provides two useful properties — <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplayEvent/display\"><code>VRDisplayEvent.display</code> <small>(en-US)</small></a>, which contains a reference to the <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplay\"><code>VRDisplay</code> <small>(en-US)</small></a> the event was fired in response to, and <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/VRDisplayEvent/reason\"><code>VRDisplayEvent.reason</code> <small>(en-US)</small></a>, which contains a human-readable reason why the event was fired.</p>\n<p>This is a very useful event; you could use it to handle cases where the display gets disconnected unexpectedly, stopping errors from being thrown and making sure the user is aware of the situation. In Google's Webvr.info presentation demo, the event is used to run an <a href=\"https://github.com/toji/webvr.info/blob/master/samples/03-vr-presentation.html#L174\" class=\"external\" rel=\" noopener\"><code>onVRPresentChange()</code> function</a>, which updates the UI controls as appropriate and resizes the canvas.</p>"}},{"type":"prose","value":{"id":"summary","title":"Summary","isH3":false,"content":"<p>This article has given you the very basics of how to create a simple WebVR 1.1 app, to help you get started.</p>"}}],"toc":[{"text":"Getting started","id":"getting_started"},{"text":"Introducing our demo","id":"introducing_our_demo"},{"text":"How does it work?","id":"how_does_it_work"},{"text":"WebVR events","id":"webvr_events"},{"text":"Summary","id":"summary"}],"summary":"This article has given you the very basics of how to create a simple WebVR 1.1 app, to help you get started.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using the WebVR API","locale":"en-US","native":"English (US)"},{"title":"Uso de la API de WebVR","locale":"es","native":"Español"},{"title":"WebVR APIの使い方","locale":"ja","native":"日本語"},{"title":"Использование WebVR API","locale":"ru","native":"Русский"},{"title":"Using the WebVR API","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"pt-br/web/api/webvr_api/using_the_webvr_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/pt-br/web/api/webvr_api/using_the_webvr_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/pt-BR/docs/Web","title":"Tecnologia Web para desenvolvedores"},{"uri":"/pt-BR/docs/Web/API","title":"APIs da Web"},{"uri":"/pt-BR/docs/Web/API/WebVR_API","title":"WebVR API"},{"uri":"/pt-BR/docs/Web/API/WebVR_API/Using_the_WebVR_API","title":"Using the WebVR API"}],"pageTitle":"Using the WebVR API - APIs da Web | MDN","noIndexing":false}}