{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Using server-sent events","mdn_url":"/pt-BR/docs/Web/API/Server-sent_events/Using_server-sent_events","locale":"pt-BR","native":"Português (do Brasil)","sidebarHTML":"<ol><li><strong><a href=\"/pt-BR/docs/Web/API/Server-sent_events\">Server-sent events</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Guias</summary><ol><li><a href=\"/pt-BR/docs/Web/API/Server-sent_events/Using_server-sent_events\">Using server-sent events</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Interfaces</summary><ol><li><a href=\"/pt-BR/docs/Web/API/EventSource\"><code>EventSource</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>É fácil desenvolver um aplicativo Web que usa <a href=\"/pt-BR/docs/Web/API/Server-sent_events\">server-sent events</a>. Você precisará de um pouco de código no servidor para transmitir eventos para o front-end, mas o código do lado do cliente funciona quase de forma idêntica aos <a href=\"/pt-BR/docs/Web/API/WebSockets_API\">websockets</a> em questão de tratamento de eventos recebidos. Essa é uma conexão unidirecional, portanto você não pode enviar eventos de um cliente para um servidor.</p>"}},{"type":"prose","value":{"id":"receiving_events_from_the_server","title":"Receiving events from the server","isH3":false,"content":"<p>The server-sent event API is contained in the <a href=\"/pt-BR/docs/Web/API/EventSource\"><code>EventSource</code></a> interface; to open a connection to the server to begin receiving events from it, create a new <code>EventSource</code> object with the URL of a script that generates the events. For example:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> evtSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ssedemo.php\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>If the event generator script is hosted on a different origin, a new <code>EventSource</code> object should be created with both the URL and an options dictionary. For example, assuming the client script is on <code>example.com</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> evtSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"//api.example.com/ssedemo.php\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">withCredentials</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Once you've instantiated your event source, you can begin listening for messages from the server by attaching a handler for the <code><a href=\"/pt-BR/docs/Web/Reference/Events/message\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">message</a></code> event:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>evtSource<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> eventList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  newElement<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"message: \"</span> <span class=\"token operator\">+</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  eventList<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>This code listens for incoming messages (that is, notices from the server that do not have an <code>event</code> field on them) and appends the message text to a list in the document's HTML.</p>\n<p>You can also listen for events with <code>addEventListener()</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>evtSource<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ping\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> time <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">;</span>\n  newElement<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"ping at \"</span> <span class=\"token operator\">+</span> time<span class=\"token punctuation\">;</span>\n  eventList<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>This code is similar, except that it will be called automatically whenever the server sends a message with the <code>event</code> field set to \"ping\"; it then parses the JSON in the <code>data</code> field and outputs that information.</p>\n<blockquote>\n  <p><strong>Aviso:</strong> When <strong>not used over HTTP/2</strong>, SSE suffers from a limitation to the maximum number of open connections, which can be specially painful when opening various tabs as the limit is <em>per browser</em> and set to a very low number (6). The issue has been marked as \"Won't fix\" in <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=275955\" class=\"external\" rel=\" noopener\">Chrome</a> and <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=906896\" class=\"external\" rel=\" noopener\">Firefox</a>. This limit is per browser + domain, so that means that you can open 6 SSE connections across all of the tabs to <code>www.example1.com</code> and another 6 SSE connections to <code>www.example2.com.</code> (from <a href=\"https://stackoverflow.com/a/5326159/1905229\" class=\"external\" rel=\" noopener\">Stackoverflow</a>). When using HTTP/2, the maximum number of simultaneous <em>HTTP streams</em> is negotiated between the server and the client (defaults to 100).</p>\n</blockquote>"}},{"type":"prose","value":{"id":"sending_events_from_the_server","title":"Sending events from the server","isH3":false,"content":"<p>The server-side script that sends events needs to respond using the MIME type <code>text/event-stream</code>. Each notification is sent as a block of text terminated by a pair of newlines. For details on the format of the event stream, see <a href=\"#event_stream_format\">Event stream format</a>.</p>\n<p>The <a href=\"/pt-BR/docs/Glossary/PHP\">PHP</a> code for the example we're using here follows:</p>\n<div class=\"code-example\"><pre class=\"brush: php notranslate\"><code><span class=\"token function\">date_default_timezone_set</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"America/New_York\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Cache-Control: no-cache\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Content-Type: text/event-stream\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$counter</span> <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Every second, send a \"ping\" event.</span>\n\n  <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"event: ping\\n\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$curDate</span> <span class=\"token operator\">=</span> <span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DATE_ISO8601</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'data: {\"time\": \"'</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$curDate</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'\"}'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"\\n\\n\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Send a simple message at random intervals.</span>\n\n  <span class=\"token variable\">$counter</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$counter</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'data: This is a message at time '</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$curDate</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"\\n\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$counter</span> <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">ob_end_flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>The code above generates an event every second, with the event type \"ping\". Each event's data is a JSON object containing the ISO 8601 timestamp corresponding to the time at which the event was generated. At random intervals, a simple message (with no event type) is sent.</p>\n<blockquote>\n  <p><strong>Nota:</strong> You can find a full example that uses the code shown in this article on GitHub — see <a href=\"https://github.com/mdn/dom-examples/tree/master/server-sent-events\" class=\"external\" rel=\" noopener\">Simple SSE demo using PHP.</a></p>\n</blockquote>"}},{"type":"prose","value":{"id":"error_handling","title":"Error handling","isH3":false,"content":"<p>When problems occur (such as a network timeout or issues pertaining to <a href=\"/en-US/docs/Web/HTTP/CORS\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">access control (en-US)</a>), an error event is generated. You can take action on this programmatically by implementing the <code>onerror</code> callback on the <code>EventSource</code> object:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>evtSource<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"EventSource failed:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"closing_event_streams","title":"Closing event streams","isH3":false,"content":"<p>By default, if the connection between the client and server closes, the connection is restarted. The connection is terminated with the <code>.close()</code> method.</p>\n<pre class=\"notranslate\">evtSource.close();\n</pre>"}},{"type":"prose","value":{"id":"event_stream_format","title":"Event stream format","isH3":false,"content":"<p>The event stream is a simple stream of text data which must be encoded using <a href=\"/pt-BR/docs/Glossary/UTF-8\">UTF-8</a>. Messages in the event stream are separated by a pair of newline characters. A colon as the first character of a line is in essence a comment, and is ignored.</p>\n<blockquote>\n  <p><strong>Nota:</strong> The comment line can be used to prevent connections from timing out; a server can send a comment periodically to keep the connection alive.</p>\n</blockquote>\n<p>Each message consists of one or more lines of text listing the fields for that message. Each field is represented by the field name, followed by a colon, followed by the text data for that field's value.</p>"}},{"type":"prose","value":{"id":"fields","title":"Fields","isH3":true,"content":"<p>Each message received has some combination of the following fields, one per line:</p>\n<dl>\n  <dt id=\"event\"><code>event</code></dt>\n  <dd>\n    <p>A string identifying the type of event described. If this is specified, an event will be dispatched on the browser to the listener for the specified event name; the website source code should use <code>addEventListener()</code> to listen for named events. The <code>onmessage</code> handler is called if no event name is specified for a message.</p>\n  </dd>\n  <dt id=\"data\"><code>data</code></dt>\n  <dd>\n    <p>The data field for the message. When the <code>EventSource</code> receives multiple consecutive lines that begin with <code>data:</code>, <a href=\"https://www.w3.org/TR/eventsource/#dispatchMessage\" class=\"external\" rel=\" noopener\">it will concatenate them</a>, inserting a newline character between each one. Trailing newlines are removed.</p>\n  </dd>\n  <dt id=\"id\"><code>id</code></dt>\n  <dd>\n    <p>The event ID to set the <a href=\"/en-US/Server-sent_events/EventSource\"><code>EventSource</code></a> object's last event ID value.</p>\n  </dd>\n  <dt id=\"retry\"><code>retry</code></dt>\n  <dd>\n    <p>The reconnection time to use when attempting to send the event. This must be an integer, specifying the reconnection time in milliseconds. If a non-integer value is specified, the field is ignored.</p>\n  </dd>\n</dl>\n<p>All other field names are ignored.</p>\n<blockquote>\n  <p><strong>Nota:</strong> If a line doesn't contain a colon, the entire line is treated as the field name with an empty value string.</p>\n</blockquote>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":true,"content":"<h4 id=\"data-only_messages\">Data-only messages</h4>\n<p>In the following example, there are three messages sent. The first is just a comment, since it starts with a colon character. As mentioned previously, this can be useful as a keep-alive if messages may not be sent regularly.</p>\n<p>The second message contains a data field with the value \"some text\". The third message contains a data field with the value \"another message\\nwith two lines\". Note the newline special character in the value.</p>\n<pre class=\"notranslate\">: this is a test stream\n\ndata: some text\n\ndata: another message\ndata: with two lines\n</pre>\n<h4 id=\"named_events\">Named events</h4>\n<p>This example sends some named events. Each has an event name specified by the <code>event</code> field, and a <code>data</code> field whose value is an appropriate JSON string with the data needed for the client to act on the event. The <code>data</code> field could, of course, have any string data; it doesn't have to be JSON.</p>\n<pre class=\"notranslate\">event: userconnect\ndata: {\"username\": \"bobby\", \"time\": \"02:33:48\"}\n\nevent: usermessage\ndata: {\"username\": \"bobby\", \"time\": \"02:34:11\", \"text\": \"Hi everyone.\"}\n\nevent: userdisconnect\ndata: {\"username\": \"bobby\", \"time\": \"02:34:23\"}\n\nevent: usermessage\ndata: {\"username\": \"sean\", \"time\": \"02:34:36\", \"text\": \"Bye, bobby.\"}\n</pre>\n<h4 id=\"mixing_and_matching\">Mixing and matching</h4>\n<p>You don't have to use just unnamed messages or typed events; you can mix them together in a single event stream.</p>\n<pre class=\"notranslate\">event: userconnect\ndata: {\"username\": \"bobby\", \"time\": \"02:33:48\"}\n\ndata: Here's a system message of some kind that will get used\ndata: to accomplish some task.\n\nevent: usermessage\ndata: {\"username\": \"bobby\", \"time\": \"02:34:11\", \"text\": \"Hi everyone.\"}\n</pre>"}},{"type":"prose","value":{"id":"compatibilidade_com_navegadores","title":"Compatibilidade com navegadores","isH3":false,"content":""}},{"type":"browser_compatibility","value":{"title":"EventSource","id":"eventsource","isH3":true,"query":"api.EventSource","dataURL":"/pt-BR/docs/Web/API/Server-sent_events/Using_server-sent_events/bcd.json"}}],"toc":[{"text":"Receiving events from the server","id":"receiving_events_from_the_server"},{"text":"Sending events from the server","id":"sending_events_from_the_server"},{"text":"Error handling","id":"error_handling"},{"text":"Closing event streams","id":"closing_event_streams"},{"text":"Event stream format","id":"event_stream_format"},{"text":"Compatibilidade com navegadores","id":"compatibilidade_com_navegadores"}],"summary":"É fácil desenvolver um aplicativo Web que usa server-sent events. Você precisará de um pouco de código no servidor para transmitir eventos para o front-end, mas o código do lado do cliente funciona quase de forma idêntica aos websockets em questão de tratamento de eventos recebidos. Essa é uma conexão unidirecional, portanto você não pode enviar eventos de um cliente para um servidor.","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using server-sent events","locale":"en-US","native":"English (US)"},{"title":"Utilizando eventos enviados por el servidor (server-sent event)","locale":"es","native":"Español"},{"title":"Utiliser les évènements envoyés par le serveur","locale":"fr","native":"Français"},{"title":"サーバー送信イベントの使用","locale":"ja","native":"日本語"},{"title":"Server-Sent Events 사용하기","locale":"ko","native":"한국어"},{"title":"Using server-sent events","locale":"ru","native":"Русский"},{"title":"使用服务器发送事件","locale":"zh-CN","native":"中文 (简体)"},{"title":"使用 server-sent 事件","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"pt-br/web/api/server-sent_events/using_server-sent_events","github_url":"https://github.com/mdn/translated-content/blob/main/files/pt-br/web/api/server-sent_events/using_server-sent_events/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/pt-BR/docs/Web","title":"Tecnologia Web para desenvolvedores"},{"uri":"/pt-BR/docs/Web/API","title":"APIs da Web"},{"uri":"/pt-BR/docs/Web/API/Server-sent_events","title":"Server-sent events"},{"uri":"/pt-BR/docs/Web/API/Server-sent_events/Using_server-sent_events","title":"Using server-sent events"}],"pageTitle":"Using server-sent events - APIs da Web | MDN","noIndexing":false}}