{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Escrevendo um servidor WebSocket em C #","mdn_url":"/pt-BR/docs/Web/API/WebSockets_API/Writing_WebSocket_server","locale":"pt-BR","native":"Português (do Brasil)","sidebarHTML":"","body":[{"type":"prose","value":{"id":"introdução","title":"Introdução","isH3":false,"content":"<p>Se você quiser usar uma API WebSocket, você precisara ter um servidor. Neste artigo vou mostrar como escrever um WebSocket em C#. Você pode fazer isso em qualquer linguagem server-side, mas para manter as coisas simples e mais compreensíveis eu escolhi uma linguagem Microsoft.</p>\n<p>Este servidor está em conformidade com a <a href=\"https://tools.ietf.org/html/rfc6455\" class=\"external\" rel=\" noopener\">RFC 6455</a>, por isso irá tratar apenas as conexões com os navegadores Chrome versão 16, Firefox 11, IE 10 ou superior.</p>"}},{"type":"prose","value":{"id":"primeiros_passos","title":"Primeiros passos","isH3":false,"content":"<p>Os WebSocket´s se comunicam através de uma conexão TCP (Transmission Control Protocol), felizmente o C# possui a classe <a href=\"https://msdn.microsoft.com/pt-br/library/system.net.sockets.tcplistener.aspx\" class=\"external\" rel=\" noopener\">TcpListener</a> que, como o nome sugere, tem a função de escutar (Listener) as comunicações via TCP. A classe TcpListener está no namespace System.Net.Sockets.</p>\n<blockquote>\n  <p><strong>Nota:</strong> É uma boa idéia usar a palavra chave using para escrever menos. Isso significa que não é preciso você reescrever o namespace toda vez que usar uma classe dele.</p>\n</blockquote>"}},{"type":"prose","value":{"id":"tcplistener","title":"TcpListener","isH3":true,"content":"<p>Construtor:</p>\n<div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code><span class=\"token function\">TcpListener</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>IPAddress localaddr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>Aqui você define onde o servidor será acessível.</p>\n<blockquote>\n  <p><strong>Nota:</strong> Para setar facilmente o tipo esperado no primeiro parâmetro, use o método estático Parse da classe IPAddress.</p>\n</blockquote>\n<p>Métodos:</p>\n<ul>\n  <li>Start()</li>\n  <li>\n    System.Net.Sockets.<a href=\"http://msdn.microsoft.com/en-us/library/system.net.sockets.tcpclient.aspx\" class=\"external\" rel=\" noopener\">TcpClient</a> AcceptTcpClient()\n    Espera por uma conexão TCP, aceita a conexão e retorna um objeto TcpClient.\n  </li>\n</ul>\n<p>Veja como usar o que aprendemos:</p>\n<div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code>​<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Sockets<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Server</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        TcpListener server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TcpListener</span><span class=\"token punctuation\">(</span>IPAddress<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        server<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Server has started on 127.0.0.1:80.{0}Waiting for a connection...\"</span><span class=\"token punctuation\">,</span> Environment<span class=\"token punctuation\">.</span>NewLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        TcpClient client <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">AcceptTcpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A client connected.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"tcpclient","title":"TcpClient","isH3":true,"content":"<p>Métodos:</p>\n<ul>\n  <li>\n    <code>System.Net.Sockets.NetworkStream GetStream()</code>\n    Obtém o fluxo (stream) do canal de comunicação. Ambos os lados do canal de comunicação possuem a capacidade de ler e escrever.\n  </li>\n</ul>\n<p>Propriedades:</p>\n<ul>\n  <li>\n    <code>int Available</code>\n    Este é o numero de bytes de dados que foram enviados. o valor é zero enquanto <em>NetworkStream.DataAvailable</em> for <em>falso</em>.\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"networkstream","title":"NetworkStream","isH3":true,"content":"<p>Métodos:</p>\n<div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>Byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>Grava bytes do buffer, <em>offset</em> e <em>size</em> determinam o tamanho da mensagem.</p>\n<pre class=\"notranslate\">Read(Byte[] buffer, int offset, int size)\n</pre>\n<p>Lê bytes para o <em>buffer</em>, <em>offset</em> e <em>size</em> determinam o tamanho da mensagem.</p>\n<p>Vamos estender nosso exemplo.</p>\n<div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code>TcpClient client <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">AcceptTcpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A client connected.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nNetworkStream stream <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">GetStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//enter to an infinite cycle to be able to handle every change in stream</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stream<span class=\"token punctuation\">.</span>DataAvailable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Byte<span class=\"token punctuation\">[</span>client<span class=\"token punctuation\">.</span>Available<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    stream<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"handshaking","title":"Handshaking","isH3":false,"content":"<p>Quando um cliente se conecta a um servidor, ele envia uma solicitação GET para atualizar a conexão com o WebSocket a partir de uma simples requisição HTTP. Isto é conhecido como handshaking (aperto de mão).</p>\n<blockquote>\n  <p><strong>Aviso:</strong> Este código tem um defeito. Digamos que a propriedade client.<code>Available</code> retorna o valor 2 porque somente a requisição GET está disponível até agora. a expressão regular iria falhar mesmo que os dados recebidos sejam perfeitamente válidos.</p>\n</blockquote>\n<div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code><span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> System<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">.</span>RegularExpressions<span class=\"token punctuation\">;</span>\n\nByte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Byte<span class=\"token punctuation\">[</span>client<span class=\"token punctuation\">.</span>Available<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//translate bytes of request to string</span>\nString data <span class=\"token operator\">=</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetString</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">Regex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^GET\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsMatch</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Criar a resposta é mais fácil do que entender porque você deve fazê-lo desta forma.</p>\n<p>Você deve,</p>\n<ol>\n  <li>Obter o valor do cabeçalho da requisição <em>Sec-WebSocket-Key</em> sem qualquer espaço à direita e à esquerda;</li>\n  <li>Concatenar com \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\";</li>\n  <li>Calcular o código SHA-1 e Base64 dele;</li>\n  <li>Reescreva no cabeçalho de resposta o valor de <em>Sec-WebSocket-Accept</em> como parte de uma resposta HTTP.</li>\n</ol>\n<div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">Regex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^GET\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsMatch</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> response <span class=\"token operator\">=</span> Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HTTP/1.1 101 Switching Protocols\"</span> <span class=\"token operator\">+</span> Environment<span class=\"token punctuation\">.</span>NewLine\n        <span class=\"token operator\">+</span> <span class=\"token string\">\"Connection: Upgrade\"</span> <span class=\"token operator\">+</span> Environment<span class=\"token punctuation\">.</span>NewLine\n        <span class=\"token operator\">+</span> <span class=\"token string\">\"Upgrade: websocket\"</span> <span class=\"token operator\">+</span> Environment<span class=\"token punctuation\">.</span>NewLine\n        <span class=\"token operator\">+</span> <span class=\"token string\">\"Sec-WebSocket-Accept: \"</span> <span class=\"token operator\">+</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToBase64String</span> <span class=\"token punctuation\">(</span>\n            SHA1<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ComputeHash</span> <span class=\"token punctuation\">(</span>\n                Encoding<span class=\"token punctuation\">.</span>UTF8<span class=\"token punctuation\">.</span><span class=\"token function\">GetBytes</span> <span class=\"token punctuation\">(</span>\n                    <span class=\"token keyword\">new</span> <span class=\"token function\">Regex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sec-WebSocket-Key: (.*)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Match</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Groups<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">Trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"</span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Environment<span class=\"token punctuation\">.</span>NewLine\n        <span class=\"token operator\">+</span> Environment<span class=\"token punctuation\">.</span>NewLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    stream<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"decodificação_de_mensagens","title":"Decodificação de mensagens","isH3":false,"content":"<p>Após um <em>handshake</em> de sucesso o cliente ponde enviar mensagens ao servidor, mas agora estas mensagens são codificadas.</p>\n<p>Se nós enviarmos \"MDN\", nós obtemos estes bytes:</p>\n<table>\n  <thead>\n    <tr>\n      <th>129</th>\n      <th>131</th>\n      <th>61</th>\n      <th>84</th>\n      <th>35</th>\n      <th>6</th>\n      <th>112</th>\n      <th>16</th>\n      <th>109</th>\n    </tr>\n  </thead>\n</table>\n<p>- 129:</p>\n<table>\n  <thead>\n    <tr>\n      <th>FIN (Esta é toda a mensagem?)</th>\n      <th>RSV1</th>\n      <th>RSV2</th>\n      <th>RSV3</th>\n      <th>Opcode</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0x1=0001</td>\n    </tr>\n  </tbody>\n</table>\n<p>\n  FIN: Você pode enviar sua mensagem em quadros (frames), mas agora as coisas ficaram mais simples.\n  Opcode <em>0x1</em> significa que este é um texto. Veja aqui a <a href=\"https://tools.ietf.org/html/rfc6455#section-5.2\" class=\"external\" rel=\" noopener\">lista completa de Opcodes</a>.\n</p>\n<p>- 131:</p>\n<p>Se o segundo byte menos 128 estiver entre 0 e 125, este é o tamanho da mensagem. Se for 126, os 2 bytes seguintes (16-bit inteiro sem sinal) e se 127, os 8 bytes seguintes (64-bit inteiro sem sinal) são o comprimento.</p>\n<blockquote>\n  <p><strong>Nota:</strong> Eu posso escolher 128, porque o primeiro bit sempre será 1.</p>\n</blockquote>\n<p>- 61, 84, 35 e 6 são os bytes de chave para decodificar. Sempre mudam.</p>\n<p>- O restante dos bytes codificados são a mensagem.</p>"}},{"type":"prose","value":{"id":"algoritmo_de_decodificação","title":"Algoritmo de decodificação","isH3":true,"content":"<p>byte decodificado = [byte codificado XOR (posição do byte codificado MOD 4º byte da chave)]</p>\n<p>Exemplo em C#:</p>\n<div class=\"code-example\"><pre class=\"brush: cpp notranslate\"><code>Byte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> decoded <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Byte<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nByte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> encoded <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Byte<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token number\">112</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">109</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nByte<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> key <span class=\"token operator\">=</span> Byte<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token number\">61</span><span class=\"token punctuation\">,</span> <span class=\"token number\">84</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> encoded<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    decoded<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Byte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> key<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"link_relacionado","title":"Link Relacionado","isH3":false,"content":"<ul>\n  <li><a href=\"/pt-BR/docs/Web/API/WebSockets_API/Writing_WebSocket_servers\">Writing WebSocket servers</a></li>\n</ul>"}}],"toc":[{"text":"Introdução","id":"introdução"},{"text":"Primeiros passos","id":"primeiros_passos"},{"text":"Handshaking","id":"handshaking"},{"text":"Decodificação de mensagens","id":"decodificação_de_mensagens"},{"text":"Link Relacionado","id":"link_relacionado"}],"summary":"Se você quiser usar uma API WebSocket, você precisara ter um servidor. Neste artigo vou mostrar como escrever um WebSocket em C#. Você pode fazer isso em qualquer linguagem server-side, mas para manter as coisas simples e mais compreensíveis eu escolhi uma linguagem Microsoft.","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Writing a WebSocket server in C#","locale":"en-US","native":"English (US)"},{"title":"Escribiendo un servidor WebSocket en C#","locale":"es","native":"Español"},{"title":"C# で WebSocket サーバーを記述する","locale":"ja","native":"日本語"},{"title":"用 C＃来编写 WebSocket 服务器","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"pt-br/web/api/websockets_api/writing_websocket_server","github_url":"https://github.com/mdn/translated-content/blob/main/files/pt-br/web/api/websockets_api/writing_websocket_server/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/pt-BR/docs/Web","title":"Tecnologia Web para desenvolvedores"},{"uri":"/pt-BR/docs/Web/API","title":"APIs da Web"},{"uri":"/pt-BR/docs/Web/API/WebSockets_API","title":"WebSockets"},{"uri":"/pt-BR/docs/Web/API/WebSockets_API/Writing_WebSocket_server","title":"Escrevendo um servidor WebSocket em C #"}],"pageTitle":"Escrevendo um servidor WebSocket em C # - APIs da Web | MDN","noIndexing":false}}