{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Usando custom elements","mdn_url":"/pt-BR/docs/Web/Web_Components/Using_custom_elements","locale":"pt-BR","native":"Português (do Brasil)","sidebarHTML":"<ol><li class=\"toggle\"><details open=\"\"><summary>Guias</summary><ol><li><a href=\"/pt-BR/docs/Web/Web_Components/Using_custom_elements\">Using custom elements</a></li><li><a href=\"/pt-BR/docs/Web/Web_Components/Using_shadow_DOM\">Using shadow DOM</a></li><li><a href=\"/pt-BR/docs/Web/Web_Components/Using_templates_and_slots\">Using templates and slots</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Interfaces</summary><ol><li><a href=\"/pt-BR/docs/Web/API/CustomElementRegistry\"><code>CustomElementRegistry</code></a></li><li><a href=\"/pt-BR/docs/Web/API/HTMLSlotElement\"><code>HTMLSlotElement</code></a></li><li><a href=\"/pt-BR/docs/Web/API/HTMLTemplateElement\"><code>HTMLTemplateElement</code></a></li><li><a href=\"/pt-BR/docs/Web/API/ShadowRoot\"><code>ShadowRoot</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Propriedades</summary><ol><li><a href=\"/pt-BR/docs/Web/API/Element/shadowRoot\"><code>Element.shadowRoot</code></a></li><li><a href=\"/pt-BR/docs/Web/API/Element/slot\"><code>Element.slot</code></a></li><li><a href=\"/pt-BR/docs/Web/API/Event/composed\"><code>Event.composed</code></a></li><li><a href=\"/pt-BR/docs/Web/API/Event/composedPath\"><code>Event.composedPath</code></a></li><li><a href=\"/pt-BR/docs/Web/API/Node/isConnected\"><code>Node.isConnected</code></a></li><li><a href=\"/pt-BR/docs/Web/API/Window/customElements\"><code>Window.customElements</code></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Métodos</summary><ol><li><a href=\"/pt-BR/docs/Web/API/Document/createElement\"><code>Document.createElement()</code></a></li><li><a href=\"/pt-BR/docs/Web/API/Element/attachShadow\"><code>Element.attachShadow()</code></a></li><li><a href=\"/pt-BR/docs/Web/API/Node/getRootNode\"><code>Node.getRootNode()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Um dos principais recursos do padrão de Web Components é a capacidade de criar elementos personalizados que encapsulam sua funcionalidade em uma página HTML, em vez de ter que se contentar com um lote longo e aninhado de elementos que, juntos, fornecem um recurso de página personalizada. Este artigo apresenta o uso da API de Custom Elements.</p>\n<blockquote>\n  <p><strong>Nota:</strong> Custom elements são suportados por padrão no Firefox, Chrome e Edge (76). Opera e Safari até agora suportam apenas custom elements autônomos.</p>\n</blockquote>"}},{"type":"prose","value":{"id":"visão_de_alto_nível","title":"Visão de alto nível","isH3":false,"content":"<p>O controlador de custom elements em um documento da web é o objeto <a href=\"/pt-BR/docs/Web/API/CustomElementRegistry\"><code>CustomElementRegistry</code></a> — este objeto permite que você registre um custom element na página, retorne informações sobre quais custom elements estão registrados, etc..</p>\n<p>Para registar um custom element na página, use o método <a href=\"/pt-BR/docs/Web/API/CustomElementRegistry/define\"><code>CustomElementRegistry.define()</code></a>. Isso leva como argumentos:</p>\n<ul>\n  <li>Um <a href=\"/pt-BR/docs/conflicting/Web/JavaScript/Reference/Global_Objects/String\"><code>DOMString</code></a> que representa o nome que você está dando ao elemento. Observe que os nomes dos custom elements <a href=\"https://html.spec.whatwg.org/#valid-custom-element-name\" class=\"external\" rel=\" noopener\">requerem o uso de um traço</a> (kebab-case); não podem ser palavras isoladas.</li>\n  <li>Um objeto de <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Classes\">classe</a> que define o comportamento do elemento.</li>\n  <li>Opcionalmente, um objeto de opções contendo uma propriedade <code>extends</code>, que especifica o elemento integrado do qual seu elemento herda, se houver (relevante apenas para elementos integrados personalizados; consulte a definição abaixo).</li>\n</ul>\n<p>Então, por exemplo, podemos definir um custom element <a href=\"https://mdn.github.io/web-components-examples/word-count-web-component/\" class=\"external\" rel=\" noopener\">word-count</a> <code>(contagem-palavras)</code> assim:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'word-count'</span><span class=\"token punctuation\">,</span> WordCount<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token string\">'p'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>O elemento é chamado de <code>word-count</code>, seu objeto de classe é <code>WordCount</code>, e estende o elemento <a href=\"/pt-BR/docs/Web/HTML/Element/p\"><code>&lt;p&gt;</code></a>.</p>\n<p>O objeto de classe de um custom element é escrito usando a sintaxe de classe ES 2015. Por exemplo, <code>WordCount</code> é estruturado assim::</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">WordCount</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLParagraphElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Sempre chame super primeiro no construtor</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Funcionalidade do elemento escrita aqui</span>\n\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Este é apenas um exemplo simples, mas você pode fazer mais aqui. É possível definir retornos de chamada de ciclo de vida específicos dentro da classe, que são executados em pontos específicos do ciclo de vida do elemento. Por exemplo, <code>connectedCallback</code> é invocado cada vez que o custom element é anexado a um elemento conectado ao documento, enquanto <code>attributeChangedCallback</code> é invocado quando um dos atributos do elemento customizado é adicionado, removido ou alterado.</p>\n<p>Você aprenderá mais sobre eles na seção <a href=\"#using_the_lifecycle_callbacks\">Using the lifecycle callbacks</a> abaixo.</p>\n<p>Existem dois tipos de custom elements:</p>\n<ul>\n  <li><strong>Autonomous custom elements</strong> são autonômos — eles não herdam de elementos HTML padrão. Você os usa em uma página, literalmente escrevendo-os como um elemento HTML. Por exemplo <code>&lt;popup-info&gt;</code>, ou <code>document.createElement(\"popup-info\")</code>.</li>\n  <li><strong>Customized built-in elements</strong> herdam de elementos HTML básicos. Para criar um deles, você deve especificar qual elemento eles estendem (como implícito nos exemplos acima), e eles são usados escrevendo o elemento básico, mas especificando o nome do elemento personalizado no atributo <a href=\"/pt-BR/docs/Web/HTML/Global_attributes#attr-is\"><code>is</code></a> (ou propriedade). Por exemplo <code>&lt;p is=\"word-count\"&gt;</code>, ou <code>document.createElement(\"p\", { is: \"word-count\" })</code>.</li>\n</ul>"}},{"type":"prose","value":{"id":"trabalhando_com_alguns_exemplos_simples","title":"Trabalhando com alguns exemplos simples","isH3":false,"content":"<p>Neste ponto, vamos examinar mais alguns exemplos simples para mostrar como os custom elements são criados com mais detalhes.</p>"}},{"type":"prose","value":{"id":"custom_elements_autônomos","title":"Custom elements autônomos","isH3":true,"content":"<p>Vamos dar uma olhada em um exemplo de um custom element autônomo — <a href=\"https://github.com/mdn/web-components-examples/tree/master/popup-info-box-web-component\" class=\"external\" rel=\" noopener\"><code>&lt;popup-info-box&gt;</code></a> (veja um <a href=\"https://mdn.github.io/web-components-examples/popup-info-box-web-component/\" class=\"external\" rel=\" noopener\">exemplo ao vivo</a>). Isso pega um imagem de ícone e uma sequência de texto e incorpora o ícone na página. Quando o ícone está em foco, ele exibe o texto em uma caixa pop-up de informações para fornecer mais informações no contexto.</p>\n<p>Para começar, o arquivo JavaScript define uma classe chamada <code>PopUpInfo</code>, que estende a classe genérica <a href=\"/pt-BR/docs/Web/API/HTMLElement\"><code>HTMLElement</code></a>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">PopUpInfo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Sempre chame super primeiro no construtor</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// escreva a funcionalidade do elemento aqui</span>\n\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>O trecho de código anterior contém a definição do <a href=\"/en-US/docs/Web/JavaScript/Reference/Classes/constructor\"><code>constructor()</code></a> da classe, que sempre começa chamando <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/super\"><code>super()</code></a> para que a cadeia de protótipo correta seja estabelecida.</p>\n<p>Dentro do construtor, definimos toda a funcionalidade que o elemento terá quando uma instância dele for instanciada. Neste caso, anexamos uma shadow root ao custom element, usamos alguma manipulação de DOM para criar a estrutura de shadow DOM interna do elemento - que é então anexada à shadow root - e, finalmente, anexamos algum CSS à shadow root para estilizá-la.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Create a shadow root</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// sets and returns 'this.shadowRoot'</span>\n\n<span class=\"token comment\">// Create (nested) span elements</span>\n<span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwrapper<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'wrapper'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> icon <span class=\"token operator\">=</span> wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nicon<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'icon'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nicon<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tabindex'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Insert icon from defined attribute or default icon</span>\n<span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> icon<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nimg<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">'img/default.png'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> info <span class=\"token operator\">=</span> wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninfo<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Take attribute content and put it inside the info span</span>\ninfo<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create some CSS to apply to the shadow dom</span>\n<span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstyle<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'.wrapper {'</span> <span class=\"token operator\">+</span>\n<span class=\"token comment\">// CSS truncated for brevity</span>\n\n<span class=\"token comment\">// attach the created elements to the shadow DOM</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shadowRoot<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">,</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Por fim, registramos nosso custom element no <code>CustomElementRegistry</code> usando o método<code>define()</code> mencionado anteriormente — nos parâmetros especificamos o nome do elemento e, em seguida, o nome da classe que define sua funcionalidade:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'popup-info'</span><span class=\"token punctuation\">,</span> PopUpInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Agora está disponível para uso em nossa página. Em nosso HTML, nós o usamos assim:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>popup-info</span> <span class=\"token attr-name\">img</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>img/alt.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Your card validation code (CVC)\n  is an extra security feature — it is the last 3 or 4 numbers on the\n  back of your card.<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>popup-info</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<blockquote>\n  <p><strong>Nota:</strong> Você pode ver o <a href=\"https://github.com/mdn/web-components-examples/blob/master/popup-info-box-web-component/main.js\" class=\"external\" rel=\" noopener\">código-fonte JavaScript completo</a> aqui.</p>\n</blockquote>"}},{"type":"prose","value":{"id":"estilos_internos_vs._externos","title":"Estilos internos vs. externos","isH3":true,"content":"<p>No exemplo acima, aplicamos o estilo ao Shadow DOM usando um elemento <a href=\"/pt-BR/docs/Web/HTML/Element/style\"><code>&lt;style&gt;</code></a>, mas é perfeitamente possível fazer isso referenciando uma folha de estilo externa de um elemento <a href=\"/pt-BR/docs/Web/HTML/Element/link\"><code>&lt;link&gt;</code></a> em vez disso.</p>\n<p>Por exemplo, dê uma olhada neste código de nosso exemplo <a href=\"https://mdn.github.io/web-components-examples/popup-info-box-external-stylesheet/\" class=\"external\" rel=\" noopener\">popup-info-box-external-stylesheet</a> (veja o <a href=\"https://github.com/mdn/web-components-examples/blob/master/popup-info-box-external-stylesheet/main.js\" class=\"external\" rel=\" noopener\">código-fonte</a>):</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Aplicar estilos externos ao shadow dom</span>\n<span class=\"token keyword\">const</span> linkElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlinkElem<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rel'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'stylesheet'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlinkElem<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'href'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'style.css'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Anexe o elemento criado ao shadow dom</span>\nshadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>linkElem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Observe que os elementos <a href=\"/pt-BR/docs/Web/HTML/Element/link\"><code>&lt;link&gt;</code></a> não bloqueiam a pintura do shadow root, portanto, pode haver um flash de conteúdo não estilizado (FOUC) enquanto a folha de estilo é carregada.</p>\n<p>Muitos navegadores modernos implementam uma otimização para tags <a href=\"/pt-BR/docs/Web/HTML/Element/style\"><code>&lt;style&gt;</code></a> clonadas de um nó comum ou que tenham texto idêntico, para permitir que compartilhem uma única folha de estilo de apoio. Com essa otimização, o desempenho dos estilos externo e interno deve ser semelhante.</p>"}},{"type":"prose","value":{"id":"customized_built-in_elements","title":"Customized built-in elements","isH3":true,"content":"<p>Agora vamos dar uma olhada em outro exemplo de custom element integrado — <a href=\"https://github.com/mdn/web-components-examples/tree/master/expanding-list-web-component\" class=\"external\" rel=\" noopener\">expanding-list</a> (<a href=\"https://mdn.github.io/web-components-examples/expanding-list-web-component/\" class=\"external\" rel=\" noopener\">ver ao vivo também</a>). Isso transforma qualquer lista não ordenada em um menu de expansão/recolhimento.</p>\n<p>Em primeiro lugar, definimos a classe do nosso elemento, da mesma maneira que antes:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">ExpandingList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLUListElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Sempre chame super primeiro no construtor</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// escreva a funcionalidade do elemento aqui</span>\n\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Não explicaremos a funcionalidade do elemento em detalhes aqui, mas você pode descobrir como ele funciona verificando o código-fonte. A única diferença real aqui é que nosso elemento está estendendo a interface <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/HTMLUListElement\"><code>HTMLUListElement</code> <small>(en-US)</small></a>, e não <a href=\"/pt-BR/docs/Web/API/HTMLElement\"><code>HTMLElement</code></a>. Portanto, ele tem todas as características de um elemento <a href=\"/pt-BR/docs/Web/HTML/Element/ul\"><code>&lt;ul&gt;</code></a> com a funcionalidade que definimos construída no topo, ao invés de ser um elemento autônomo. Isso é o que o torna um elemento integrado personalizado, em vez de um elemento autônomo.</p>\n<p>Em seguida, registramos o elemento usando o método <code>define()</code> como antes, exceto que, desta vez, ele também inclui um objeto de opções que detalha de qual elemento nosso elemento personalizado herda:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'expanding-list'</span><span class=\"token punctuation\">,</span> ExpandingList<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ul\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Usar o elemento integrado em um documento da web também parece um pouco diferente:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">is</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>expanding-list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  ...\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>Você usa um elemento <code>&lt;ul&gt;</code> normalmente, mas especifica o nome do elemento personalizado dentro do atributo <code>is</code>.</p>\n<blockquote>\n  <p><strong>Nota:</strong> Novamente, você pode ver o <a href=\"https://github.com/mdn/web-components-examples/blob/master/expanding-list-web-component/main.js\" class=\"external\" rel=\" noopener\">código-fonte JavaScript completo</a> aqui.</p>\n</blockquote>"}},{"type":"prose","value":{"id":"usando_os_callbacks_do_ciclo_de_vida","title":"Usando os callbacks do ciclo de vida","isH3":false,"content":"<p>Você pode definir vários retornos de chamada diferentes dentro da definição de classe de um custom element, que disparam em diferentes pontos do ciclo de vida do elemento:</p>\n<ul>\n  <li><code>connectedCallback</code>: Chamado sempre que o custom element é anexado a um elemento conectado ao documento. Isso acontecerá sempre que o nó for movido e pode acontecer antes que o conteúdo do elemento tenha sido totalmente analisado.\n    <blockquote>\n      <p><strong>Nota:</strong> <code>connectedCallback</code> pode ser chamado assim que seu elemento não estiver mais conectado, use <a href=\"/pt-BR/docs/Web/API/Node/isConnected\"><code>Node.isConnected</code></a> para ter certeza.</p>\n    </blockquote>\n  </li>\n  <li><code>disconnectedCallback</code>: Invocado sempre que o custom element é desconectado do documento DOM.</li>\n  <li><code>adoptedCallback</code>: Invocado sempre que o custom element é movido para um novo documento.</li>\n  <li><code>attributeChangedCallback</code>: Invocado sempre que um dos atributos do custom element é adicionado, removido ou alterado. Os atributos a serem observados na mudança são especificados em um método estático <code>observedAttributes</code></li>\n</ul>\n<p>Vejamos um exemplo em uso. O código abaixo é retirado do exemplo <a href=\"https://github.com/mdn/web-components-examples/tree/master/life-cycle-callbacks\" class=\"external\" rel=\" noopener\">life-cycle-callbacks</a> (<a href=\"https://mdn.github.io/web-components-examples/life-cycle-callbacks/\" class=\"external\" rel=\" noopener\">ver rodando ao vivo</a>). Este é um exemplo trivial que simplesmente gera um quadrado colorido de tamanho fixo na página. O custom element tem a seguinte aparência:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>custom-square</span> <span class=\"token attr-name\">l</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">c</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>custom-square</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>O construtor da classe é realmente simples - aqui anexamos um shadow DOM ao elemento e, em seguida, anexamos os elementos vazios <a href=\"/pt-BR/docs/Web/HTML/Element/div\"><code>&lt;div&gt;</code></a> e <a href=\"/pt-BR/docs/Web/HTML/Element/style\"><code>&lt;style&gt;</code></a> ao shadow root:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> shadow <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'open'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nshadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nshadow<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>A função chave neste exemplo é <code>updateStyle()</code> — isso pega um elemento, pega seu shadow root, encontra seu elemento <code>&lt;style&gt;</code>, e adiciona <a href=\"/pt-BR/docs/Web/CSS/width\"><code>width</code></a>, <a href=\"/pt-BR/docs/Web/CSS/height\"><code>height</code></a>, e <a href=\"/pt-BR/docs/Web/CSS/background-color\"><code>background-color</code></a> para o estilo.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">updateStyle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> shadow <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span>shadowRoot<span class=\"token punctuation\">;</span>\n  shadow<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    div {\n      width: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>elem<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px;\n      height: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>elem<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px;\n      background-color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>elem<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n    }\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>As atualizações reais são todas tratadas pelos retornos de chamada do ciclo de vida, que são colocados dentro da definição da classe como métodos. O <code>connectedCallback()</code> é executado sempre que o elemento é adicionado ao DOM - aqui, executamos a função <code>updateStyle()</code> para garantir que o quadrado seja estilizado conforme definido em seus atributos:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Custom square element added to page.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">updateStyle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Os retornos de chamada <code>disconnectedCallback()</code> e <code>adoptedCallback()</code> registram mensagens simples no console para nos informar quando o elemento é removido do DOM ou movido para uma página diferente:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">disconnectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Custom square element removed from page.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">adoptedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Custom square element moved to new page.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>O <code>attributeChangedCallback()</code> é executado sempre que um dos atributos do elemento é alterado de alguma forma. Como você pode ver por suas propriedades, é possível atuar sobre os atributos individualmente, observando seus nomes e antigos e novos valores de atributos. Neste caso, entretanto, estamos apenas executando a função <code>updateStyle()</code> novamente para garantir que o estilo do quadrado seja atualizado de acordo com os novos valores:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">attributeChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Custom square element attributes changed.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">updateStyle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Observe que, para fazer com que o retorno de chamada <code>attributeChangedCallback()</code> seja acionado quando um atributo for alterado, você deve observar os atributos. Isso é feito especificando um método <code>static get observedAttributes()</code> dentro da classe de custom element - isso deve <code>retornar</code> um array contendo os nomes dos atributos que você deseja observar:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">observedAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'l'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Isso é colocado bem no topo do construtor, em nosso exemplo.</p>\n<blockquote>\n  <p><strong>Nota:</strong> Encontre o <a href=\"https://github.com/mdn/web-components-examples/blob/master/life-cycle-callbacks/main.js\" class=\"external\" rel=\" noopener\">código-fonte JavaScript completo</a> aqui.</p>\n</blockquote>"}},{"type":"prose","value":{"id":"polyfills_vs._classes","title":"Polyfills vs. classes","isH3":false,"content":"<p>Polyfills de Custom Element podem corrigir construtores nativos, como <code>HTMLElement</code> e outros, e retornar uma instância diferente daquela recém-criada.</p>\n<p>Se você precisar de um <code>constructor</code> e uma chamada de <code>super</code> obrigatória, lembre-se de passar argumentos opcionais e retornar o resultado de tal chamada de <code>super</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomElement</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// self functionality written in here</span>\n    <span class=\"token comment\">// self.addEventListener(...)</span>\n    <span class=\"token comment\">// return the right context</span>\n    <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Se você não precisa realizar nenhuma operação no construtor, você pode simplesmente omiti-lo para que seu comportamento nativo (veja a seguir) seja preservado.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code> <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"transpiladores_vs._classes","title":"Transpiladores vs. classes","isH3":false,"content":"<p>Observe que as classes ES2015 não podem ser transpiladas de forma confiável em Babel 6 ou TypeScript visando navegadores legados. Você pode usar o Babel 7 ou o <a href=\"https://www.npmjs.com/package/babel-plugin-transform-builtin-classes\" class=\"external\" rel=\" noopener\">babel-plugin-transform-builtin-classes</a> para Babel 6, e target ES2015 em TypeScript em vez do legado..</p>"}},{"type":"prose","value":{"id":"bibliotecas","title":"Bibliotecas","isH3":false,"content":"<p>Existem várias bibliotecas que são construídas em Web Components com o objetivo de aumentar o nível de abstração ao criar elementos personalizados. Algumas dessas bibliotecas são <a href=\"https://github.com/devpunks/snuggsi\" class=\"external\" rel=\" noopener\">snuggsi ツ</a>, <a href=\"https://x-tag.github.io/\" class=\"external\" rel=\" noopener\">X-Tag</a>, <a href=\"https://slimjs.com/\" class=\"external\" rel=\" noopener\">Slim.js</a>, <a href=\"https://lit-element.polymer-project.org/\" class=\"external\" rel=\" noopener\">LitElement</a>, <a href=\"https://www.htmlelements.com/\" class=\"external\" rel=\" noopener\">Smart</a>, <a href=\"https://stenciljs.com\" class=\"external\" rel=\" noopener\">Stencil</a> e <a href=\"https://github.com/WebReflection/hyperHTML-Element\" class=\"external\" rel=\" noopener\">hyperHTML-Element</a>.</p>"}}],"toc":[{"text":"Visão de alto nível","id":"visão_de_alto_nível"},{"text":"Trabalhando com alguns exemplos simples","id":"trabalhando_com_alguns_exemplos_simples"},{"text":"Usando os callbacks do ciclo de vida","id":"usando_os_callbacks_do_ciclo_de_vida"},{"text":"Polyfills vs. classes","id":"polyfills_vs._classes"},{"text":"Transpiladores vs. classes","id":"transpiladores_vs._classes"},{"text":"Bibliotecas","id":"bibliotecas"}],"summary":"Um dos principais recursos do padrão de Web Components é a capacidade de criar elementos personalizados que encapsulam sua funcionalidade em uma página HTML, em vez de ter que se contentar com um lote longo e aninhado de elementos que, juntos, fornecem um recurso de página personalizada. Este artigo apresenta o uso da API de Custom Elements.","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using custom elements","locale":"en-US","native":"English (US)"},{"title":"Usando elementos personalizados","locale":"es","native":"Español"},{"title":"Utilisation d'éléments personnalisés","locale":"fr","native":"Français"},{"title":"カスタム要素の使用","locale":"ja","native":"日本語"},{"title":"사용자 정의 요소 사용하기","locale":"ko","native":"한국어"},{"title":"Использование пользовательских элементов","locale":"ru","native":"Русский"},{"title":"使用 custom elements","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"pt-br/web/web_components/using_custom_elements","github_url":"https://github.com/mdn/translated-content/blob/main/files/pt-br/web/web_components/using_custom_elements/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/pt-BR/docs/Web","title":"Tecnologia Web para desenvolvedores"},{"uri":"/pt-BR/docs/Web/Web_Components","title":"Web Components"},{"uri":"/pt-BR/docs/Web/Web_Components/Using_custom_elements","title":"Usando custom elements"}],"pageTitle":"Usando custom elements - Web Components | MDN","noIndexing":false}}