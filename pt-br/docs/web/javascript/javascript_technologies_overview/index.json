{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Visão geral das tecnologias JavaScript","mdn_url":"/pt-BR/docs/Web/JavaScript/JavaScript_technologies_overview","locale":"pt-BR","native":"Português (do Brasil)","sidebarHTML":"","body":[{"type":"prose","value":{"id":"introdução","title":"Introdução","isH3":false,"content":"<p>Enquanto o <a href=\"/pt-BR/docs/Web/HTML\">HTML</a> é usado para armazenar o conteúdo e a formatação de uma página web e o <a href=\"/pt-BR/docs/Web/CSS\">CSS</a> define a formatação e a aparência, o <a href=\"/pt-BR/docs/Web/JavaScript\">JavaScript</a> é usado para adicionar interatividade a uma página web e criar aplicações web ricas.</p>\n<p>No entanto, o termo genérico \"JavaScript\" tal como é entendido no contexto do navegador contém vários elementos bem diferentes. Um deles é a linguagem principal (ECMAScript), outra é a coleção das <a href=\"/en-US/docs/Web/API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Web APIs (en-US)</a>, incluindo o DOM (Document Object Model).</p>"}},{"type":"prose","value":{"id":"javascript_a_linguagem_principal_ecmascript","title":"JavaScript, a linguagem principal (ECMAScript)","isH3":false,"content":"<p>O núcleo da linguagem JavaScript é padronizado pelo comitê ECMA TC39 como uma linguagem chamada <a href=\"/en-US/docs/Web/JavaScript/JavaScript_technologies_overview\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">ECMAScript (en-US)</a>. A última versão da especificação é <a href=\"https://ecma-international.org/ecma-262/5.1/\" class=\"external\" rel=\" noopener\">ECMAScript 5.1</a>.</p>\n<p>Este núcleo da linguagem é também usado em ambientes fora do navegador, por exemplo em <a href=\"https://nodejs.org/\" class=\"external\" rel=\" noopener\">node.js</a>.</p>"}},{"type":"prose","value":{"id":"o_que_se_enquadra_no_escopo_ecmascript","title":"O que se enquadra no escopo ECMAScript?","isH3":true,"content":"<p>Entre outras coisas, o ECMAScript define:</p>\n<ul>\n  <li>A sintaxe da linguagem (regras de análise, palavras-chave, controle de fluxo, inicialização de objetos literais...)</li>\n  <li>Mecanismos para manuseio de erros (<em>throw</em>, <em>try/catch</em>, habilidade para criar tipos de erros definido pelo usuário)</li>\n  <li>Tipos (<em>boolean</em>, <em>number</em>, <em>string</em>, <em>function</em>, <em>object</em>...)</li>\n  <li>O objeto global. Num navegador esse objeto global é o objeto <em>window</em>, mas o ECMAScript apenas define as APIs, não especificamente para navegadores, por exemplo: <em>parseInt</em>, <em>parseFloat</em>, <em>decodeURI</em>, <em>encodeURI</em>...</li>\n  <li>Um mecanismo de herança baseado em protótipo</li>\n  <li>Objetos e funções embutidas (<em>JSON</em>, <em>Math</em>, <em>Array.prototype</em>, <em>Object introspection</em>...)</li>\n  <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Strict_mode\">Modo estrito</a> (rigoroso)</li>\n</ul>"}},{"type":"prose","value":{"id":"suporte_do_navegador","title":"Suporte do navegador","isH3":true,"content":"<p>Desde Agosto de 2014, as atuais versões dos principais navegadores implementaram o <a href=\"/pt-BR/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_5_support_in_Mozilla\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">ECMAScript 5.1</a> e o <a href=\"/pt-BR/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_2015_support_in_Mozilla\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">ECMAScript 2015</a>, mas versões mais antigas continuam usando a implementação do ECMAScript 3 e apenas partes do ECMAScript 5. Navegadores mais modernos já implementaram grande parte do <a href=\"/pt-BR/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">ECMAScript 6</a>.</p>"}},{"type":"prose","value":{"id":"futuro","title":"Futuro","isH3":true,"content":"<p>A 6ª edição principal do ECMAScript foi oficialmente aprovada e publicada como norma em 17 de junho de 2015 pela Assembléia Geral da ECMA. Desde então, as Edições ECMAScript são publicadas anualmente.</p>"}},{"type":"prose","value":{"id":"api_de_internacionalização","title":"API de Internacionalização","isH3":true,"content":"<p>A <a href=\"https://ecma-international.org/ecma-402/1.0/\" class=\"external\" rel=\" noopener\">API de Especificação de Internacionalização do ECMASCRIPT</a> é uma adição para a Especificação de Linguagem ECMAScript, também padronizada pela Ecma TC39. A API de internacionalização fornece intercalação (comparação de string), formatação numérica, formatação de data e tempo para aplicações JavaScript, permitindo que aplicativos escolham o idioma e adaptem a funcionalidade às suas necessidades. O padrão foi aprovado em dezembro de 2012; O status das implementações nos navegadores é rastreado na documentação do objeto Intl. A especificação de Internacionalização hoje em dia também é ratificada anualmente e os navegadores aprimoram as suas implementações constantemente.</p>"}},{"type":"prose","value":{"id":"as_apis_web_e_o_dom","title":"As APIs Web e o DOM","isH3":false,"content":""}},{"type":"prose","value":{"id":"webidl","title":"WebIDL","isH3":true,"content":"<p>A <a href=\"https://dev.w3.org/2006/webapi/WebIDL/\" class=\"external\" rel=\" noopener\">Especificação da WebIDL</a> provê a junção entre as tecnologias DOM e o ECMAScript.</p>"}},{"type":"prose","value":{"id":"o_núcleo_do_dom","title":"O núcleo do DOM","isH3":true,"content":"<p>O Document Object Model (DOM) é uma <strong>convenção multiplataforma</strong> e <strong>lndependente de linguagem</strong> para representação e interação com objetos em documentos HTML, XHTML, e XML. Objetos no <strong>DOM tree</strong> (árvore do DOM) podem ser adereçados e manipulados utilizando métodos em objetos. A W3C padroniza o Core Document Object Model (Núcleo do Documento do Modelo de Objeto), o qual define interfaces de agnóstico de linguagem que abstraem documentos HTML e XML como objetos, e também define mecanismos para manipular essa abstração. Entre as definições do DOM, podemos encontrar:</p>\n<ul>\n  <li>A estrutura do documento, um tree model (modelo de árvore), e a arquitetura do DOM Event (Evento do DOM) no <a href=\"https://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html\" class=\"external\" rel=\" noopener\">DOM core</a> (núceo do DOM): Node, Element, DocumentFragment, Document, DOMImplementation, Event, EventTarget, …</li>\n  <li>Uma definição menos rigorosa do DOM Event Architecture, assim como eventos específicos no <a href=\"https://dev.w3.org/2006/webapi/DOM-Level-3-Events/html/DOM3-Events.html\" class=\"external\" rel=\" noopener\">DOM events</a>.</li>\n  <li>Outras coisas como o <a href=\"https://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html\" class=\"external\" rel=\" noopener\">DOM Traversal</a> e o <a href=\"https://html5.org/specs/dom-range.html\" class=\"external\" rel=\" noopener\">DOM Range</a>.</li>\n</ul>\n<p>Pela perspectiva do EXMScript, objetos definidos na especificação do DOM são chamados de \"host objects\".</p>"}},{"type":"prose","value":{"id":"html_dom","title":"HTML DOM","isH3":true,"content":"<p><a href=\"https://www.whatwg.org/html\" class=\"external\" rel=\" noopener\">HTML</a>, a linguagem de marcação da Web, é especificada nos termos do DOM. Situado além dos conceitos de abstração definidos no DOM Core, o HTML também define o <em>significado</em> dos elementos. O HTML DOM inclui coisas como a propriedade <code>className</code> em elementos HTML, ou APIs como <a href=\"/pt-BR/docs/Web/API/Document/body\"><code>document.body</code></a>.</p>\n<p>A especificação HTML também define restrições nos objetos; por exemplo, ela requer que todos os filhos de um elemento <code>ul</code>, que representam uma lista desordenada, sejam elementos <code>li</code>, que representem itens de lista. Em linhas gerais, ele também proíbe o uso de elementos e atributos que não estão definidos em um padrão.</p>\n<p>Procurando pelo <a href=\"/en-US/docs/Web/API/Document\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Document object (en-US)</a>, <a href=\"/en-US/docs/Web/API/Window\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Window object (en-US)</a>, e outros elementos DOM? Leia a <a href=\"/pt-BR/docs/Gecko_DOM_Reference\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Documentação do DOM</a>.</p>"}},{"type":"prose","value":{"id":"outras_apis_de_destaque","title":"Outras APIs de destaque","isH3":false,"content":"<ul>\n  <li>As funções setTimeout e setInterval foram inicialmente especificadas na interface <a href=\"https://www.whatwg.org/html/#window\" class=\"external\" rel=\" noopener\">Window</a> no Padrão HTML.</li>\n  <li><a href=\"https://dev.w3.org/2006/webapi/XMLHttpRequest-2/\" class=\"external\" rel=\" noopener\">XMLHttpRequest.</a> Possibilita enviar requisições HTTP assíncronas.</li>\n  <li><a href=\"https://dev.w3.org/csswg/cssom/\" class=\"external\" rel=\" noopener\">CSS Object Model.</a> O CSSOM é utilizado para abstrair regras CSS como objetos</li>\n  <li><a href=\"https://www.whatwg.org/specs/web-workers/current-work/\" class=\"external\" rel=\" noopener\">WebWorkers.</a> API que permite computação paralela.</li>\n  <li><a href=\"https://www.whatwg.org/C/#network\" class=\"external\" rel=\" noopener\">WebSockets.</a> API que permite comunicação bi-direcional de baixo-nível.</li>\n  <li><a href=\"https://www.whatwg.org/html/#2dcontext\" class=\"external\" rel=\" noopener\">Canvas 2D Context.</a> API de ilustração (desenho) para o elemento canvas.</li>\n</ul>"}},{"type":"prose","value":{"id":"suporte_de_navegadores","title":"Suporte de Navegadores","isH3":true,"content":"<p>Todo desenvolvedor já percebeu que <a href=\"http://ejohn.org/blog/the-dom-is-a-mess/\" class=\"external\" rel=\" noopener\">o DOM é uma bagunça</a>. A uniformidade no suporte dos Navegadores varia muito de feature para feature. A principal razão para essa situação é o fato de que muitas features importantes do DOM possuem (quando possuem) especificações não muito claras. Além disso, diferentes Navegadores adicionaram features incompatíveis para a sobreposição de casos de uso (como o event model do Internet Explorer). A atual (Junho de 2011) tendência é que a W3C e particularmente a WHATWG estão definindo features mais antigas em detalhes, a fim de melhorar a interoperabilidade. Seguindo esta tendência, Navegadores estão melhorando suas implementações baseados nessas especificações.</p>\n<p>Uma abordagem comum, porém não a mais confiável, para compatibilidade cross-browser é utilizar a biblioteca JavaScript. Essas bibliotecas abstrem as features do DOM e garantem que suas API's funcionem de forma similar nos navegadores. Alguns dos frameworks mais utilizados são o <a href=\"https://jquery.com/\" class=\"external\" rel=\" noopener\">jQuery</a>, o <a href=\"http://www.prototypejs.org/\" class=\"external\" rel=\" noopener\">prototype</a>, e o <a href=\"https://developer.yahoo.com/yui/\" class=\"external\" rel=\" noopener\">YUI</a>.</p>"}}],"toc":[{"text":"Introdução","id":"introdução"},{"text":"JavaScript, a linguagem principal (ECMAScript)","id":"javascript_a_linguagem_principal_ecmascript"},{"text":"As APIs Web e o DOM","id":"as_apis_web_e_o_dom"},{"text":"Outras APIs de destaque","id":"outras_apis_de_destaque"}],"summary":"Enquanto o HTML é usado para armazenar o conteúdo e a formatação de uma página web e o CSS define a formatação e a aparência, o JavaScript é usado para adicionar interatividade a uma página web e criar aplicações web ricas.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"JavaScript technologies overview","locale":"en-US","native":"English (US)"},{"title":"Descripción de las tecnologías JavaScript","locale":"es","native":"Español"},{"title":"Survol des technologies JavaScript","locale":"fr","native":"Français"},{"title":"JavaScript 技術概説","locale":"ja","native":"日本語"},{"title":"JavaScript 기술 개요","locale":"ko","native":"한국어"},{"title":"Обзор JavaScript","locale":"ru","native":"Русский"},{"title":"JavaScript 技术概览","locale":"zh-CN","native":"中文 (简体)"},{"title":"JavaScript 技術概觀","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"pt-br/web/javascript/javascript_technologies_overview","github_url":"https://github.com/mdn/translated-content/blob/main/files/pt-br/web/javascript/javascript_technologies_overview/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/pt-BR/docs/Web","title":"Tecnologia Web para desenvolvedores"},{"uri":"/pt-BR/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/pt-BR/docs/Web/JavaScript/JavaScript_technologies_overview","title":"Visão geral das tecnologias JavaScript"}],"pageTitle":"Visão geral das tecnologias JavaScript - JavaScript | MDN","noIndexing":false}}