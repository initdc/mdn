{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Promise","mdn_url":"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise","locale":"pt-BR","native":"Português (do Brasil)","sidebarHTML":"<ol><li><strong><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Propriedades</strong></a><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/@@species\"><code>get Promise[@@species]</code> <small>(en-US)</small></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>Métodos</strong></a><ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\"><code>Promise.all()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled\"><code>Promise.allSettled()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any\"><code>Promise.any()</code> <small>(en-US)</small></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\"><code>Promise.prototype.catch()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally\"><code>Promise.prototype.finally()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\"><code>Promise.race()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\"><code>Promise.reject()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\"><code>Promise.resolve()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\"><code>Promise.prototype.then()</code></a></li></ol></li><li><strong>Herança:</strong></li><li><strong><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>Propriedades</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\"><code>Function.prototype.prototype</code> <small>(en-US)</small></a></li></ol></li><li><a href=\"#\"><strong>Métodos</strong></a><ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Propriedades</strong></a><ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Métodos</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>Promise</code></strong> é um objeto usado para processamento assíncrono. Uma <code>Promise</code> (<em>de \"promessa\"</em>) representa um valor que pode estar disponível agora, no futuro ou nunca.</p>\n<blockquote>\n  <p><strong>Nota:</strong> Esse artigo descreve o construtor <code>Promise,</code>os métodos e propriedades de tais objetos. Para aprender sobre como promises funcionam e como utilizá-los, é aconselhavel a leitura de <a href=\"/pt-BR/docs/Web/JavaScript/Guide/Using_promises\">utilizando promises</a>. O construtor é utilizado para embrulhar funções sem suporte ao conceito \"promise\".</p>\n</blockquote>"}},{"type":"prose","value":{"id":"descrição","title":"Descrição","isH3":false,"content":"<p>Uma <strong><code>Promise</code></strong> representa um proxy para um valor que não é necessariamente conhecido quando a promessa é criada. Isso permite a associação de métodos de tratamento para eventos da ação assíncrona num caso eventual de sucesso ou de falha. Isto permite que métodos assíncronos retornem valores como métodos síncronos: ao invés do valor final, o método assíncrono retorna uma <em>promessa</em> ao valor em algum momento no futuro.</p>\n<p>Uma <strong><code>Promise</code></strong> está em um destes estados:</p>\n<ul>\n  <li><em>pending (pendent)</em>: Estado inicial, que não foi realizada nem rejeitada.</li>\n  <li><em>fulfilled (realizada)</em>: sucesso na operação.</li>\n  <li><em>rejected (rejeitado)</em>: falha na operação.</li>\n</ul>\n<p>Uma promessa pendente pode se tornar <em>realizada</em> com um valor ou <em>rejeitada</em> por um motivo (erro). Quando um desses estados ocorre, o método <code>then</code> do <code>Promise</code> é chamado, e ele chama o método de tratamento associado ao estado (<code>rejected</code> ou <code>resolved</code>). Se a promessa foi realizada ou rejeitada quando o método de tratamento correspondente for associado, o método será chamado, desta forma não há uma condição de competição entre uma operação assíncrona e seus manipuladores que estão sendo associados.</p>\n<p>Como os métodos <code>Promise.prototype.then</code> e <code>Promise.prototype.catch</code> retornam promises, eles podem ser encadeados — uma operação chamada <em>composição</em>.</p>\n<p>\n  <img src=\"https://mdn.mozillademos.org/files/8633/promises.png\" alt=\"\" loading=\"lazy\">\n</p>"}},{"type":"prose","value":{"id":"propriedades","title":"Propriedades","isH3":false,"content":"<dl>\n  <dt id=\"promise.length\"><code>Promise.length</code></dt>\n  <dd>\n    <p>Propriedade length cujo valor é sempre 1 (número de argumentos do método construtor).</p>\n  </dd>\n  <dt id=\"promise.prototype_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise.prototype</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Representa o protótipo para o método construtor da <code>Promise</code>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"métodos","title":"Métodos","isH3":false,"content":"<dl>\n  <dt id=\"promise.alllista\"><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\"><code>Promise.all(lista)</code></a></dt>\n  <dd>\n    <p>Retorna uma promise que é resolvida quando todas as promises no argumento <em>lista</em> forem resolvidas ou rejeitada assim que uma das promises da lista for rejeitada. Se a promise retornada for resolvida, ela é resolvida com um array dos valores das promises resolvidas da lista. Se a promise for rejeitada, ela é rejeitada com o motivo da primeira promise que foi rejeitada na lista. Este método pode ser útil para agregar resultados de múltiplas promises.</p>\n  </dd>\n  <dt id=\"promise.racelista\"><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\"><code>Promise.race(lista)</code></a></dt>\n  <dd>\n    <p>Retorna uma promise que resolve ou rejeita assim que uma das promises do argumento lista resolve ou rejeita, com um valor ou o motivo daquela promise.</p>\n  </dd>\n</dl><!---->\n<dl>\n  <dt id=\"promise.rejectmotivo\"><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\"><code>Promise.reject(motivo)</code></a></dt>\n  <dd>\n    <p>Retorna um objeto <code>Promise</code> que foi rejeitado por um dado motivo.</p>\n  </dd>\n</dl><!---->\n<dl>\n  <dt id=\"promise.resolvevalor\"><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\"><code>Promise.resolve(valor)</code></a></dt>\n  <dd>\n    <p>Retorna um objeto <code>Promise</code> que foi resolvido com um dado valor. Se o valor é <code>thenable</code> (possui um método <code>then</code>), a promise retornada \"seguirá\" este método, adotando esse estado eventual; caso contrário a promise retornada será realizada com o valor. Geralmente, se você quer saber se um valor é uma promise ou não, utilize <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\"><code>Promise.resolve(valor)</code></a> e trabalhe com a valor de retorno que é sempre uma promise.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"protótipo_promise","title":"Protótipo Promise","isH3":false,"content":""}},{"type":"prose","value":{"id":"propriedades_2","title":"Propriedades","isH3":true,"content":"{{page('pt-BR/Web/JavaScript/Reference/Global_Objects/Promise/prototype','Propriedades')}}"}},{"type":"prose","value":{"id":"métodos_2","title":"Métodos","isH3":true,"content":"{{page('pt-BR/Web/JavaScript/Reference/Global_Objects/Promise/prototype','Métodos')}}"}},{"type":"prose","value":{"id":"exemplos","title":"Exemplos","isH3":false,"content":""}},{"type":"prose","value":{"id":"criando_uma_promise","title":"Criando uma Promise","isH3":true,"content":"<p>&lt;div id=\"log\"&gt;&lt;/div&gt;</p>\n<p>Este pequeno exemplo mostra o mecanismo de uma <code>Promise</code>. O método <code>testPromise()</code> é chamado cada vez que <a href=\"/pt-BR/docs/Web/HTML/Element/button\"><code>&lt;button&gt;</code></a> é clicado. Isso cria uma promise que resolverá, usando <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/setTimeout\"><code>window.setTimeout()</code> <small>(en-US)</small></a>, o contador de promise <code>promiseCount</code> (iniciando em 1) a cada 1 a 3s randomicamente. O construtor <code>Promise()</code> é usado para criar a promise.</p>\n<p>A realização da promise é simplesmente registrada, por meio de configuração na função callback de realização usando <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\"><code>p1.then()</code></a>. Alguns logs mostram como a parte síncrona do método é desacoplada da conclusão assíncrona da promise.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> promiseCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">testPromise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> thisPromiseCount <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>promiseCount<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> log <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'log'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  log<span class=\"token punctuation\">.</span><span class=\"token function\">insertAdjacentHTML</span><span class=\"token punctuation\">(</span><span class=\"token string\">'beforeend'</span><span class=\"token punctuation\">,</span> thisPromiseCount <span class=\"token operator\">+</span>\n      <span class=\"token string\">') Started (&lt;small&gt;Sync code started&lt;/small&gt;)&lt;br/&gt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Criamos uma nova promise: prometemos a contagem dessa promise (após aguardar 3s)</span>\n  <span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// a função resolve() é chamada com a capacidade para resolver ou</span>\n    <span class=\"token comment\">// rejeitar a promise</span>\n    <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      log<span class=\"token punctuation\">.</span><span class=\"token function\">insertAdjacentHTML</span><span class=\"token punctuation\">(</span><span class=\"token string\">'beforeend'</span><span class=\"token punctuation\">,</span> thisPromiseCount <span class=\"token operator\">+</span>\n          <span class=\"token string\">') Promise started (&lt;small&gt;Async code started&lt;/small&gt;)&lt;br/&gt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// Isto é apenas um exemplo para criar assincronismo</span>\n      window<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// Cumprimos a promessa !</span>\n          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>thisPromiseCount<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2000</span> <span class=\"token operator\">+</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// definimos o que fazer quando a promise for realizada</span>\n  p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// apenas logamos a mensagem e o valor</span>\n    <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      log<span class=\"token punctuation\">.</span><span class=\"token function\">insertAdjacentHTML</span><span class=\"token punctuation\">(</span><span class=\"token string\">'beforeend'</span><span class=\"token punctuation\">,</span> val <span class=\"token operator\">+</span>\n          <span class=\"token string\">') Promise fulfilled (&lt;small&gt;Async code terminated&lt;/small&gt;)&lt;br/&gt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  log<span class=\"token punctuation\">.</span><span class=\"token function\">insertAdjacentHTML</span><span class=\"token punctuation\">(</span><span class=\"token string\">'beforeend'</span><span class=\"token punctuation\">,</span> thisPromiseCount <span class=\"token operator\">+</span>\n      <span class=\"token string\">') Promise made (&lt;small&gt;Sync code terminated&lt;/small&gt;)&lt;br/&gt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js hidden notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Promise\"</span> <span class=\"token keyword\">in</span> window<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"btn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   btn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span>testPromise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  log <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'log'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  log<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"Live example not available as your browser doesn't support the Promise interface.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Este exemplo é executado pelo click do botão. Você precisa de uma versão de navegedor com suporte a <code>Promise</code>. Clicando algumas vezes no botão num curto intervalo de tempo, você verá as diferentes promises sendo realizadas uma após a outra.</p><iframe class=\"sample-code-frame\" title=\"Criando uma Promise sample\" id=\"frame_criando_uma_promise\" width=\"500\" height=\"200\" src=\"https://yari-demos.prod.mdn.mozit.cloud/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise/_sample_.criando_uma_promise.html\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"carregando_uma_imagem_com_xhr","title":"Carregando uma imagem com XHR","isH3":true,"content":"<p>Outro simples exemplo usando <code>Promise</code> e <a href=\"/en-US/docs/Web/API/XMLHttpRequest\"><code>XMLHTTPRequest</code></a> para carregar imagens está disponível no repositório GitHub MDN <a href=\"https://github.com/mdn/js-examples/blob/master/promises-test/index.html\" class=\"external\" rel=\" noopener\">promise-test</a>. Você também pode <a href=\"https://mdn.github.io/js-examples/promises-test/\" class=\"external\" rel=\" noopener\">vê-lo em ação</a>. Cada passo é comentado e lhe permite acompanhar de perto a arquitetura de Promise e XHR.</p>"}},{"type":"prose","value":{"id":"especificações","title":"Especificações","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>Especificação</th>\n      <th>Status</th>\n      <th>Comentário</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://github.com/domenic/promises-unwrapping\" class=\"external\" rel=\" noopener\">domenic/promises-unwrapping</a></td>\n      <td>Draft</td>\n      <td>Standardization work is taking place here.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www.ecma-international.org/ecma-262/6.0/#sec-promise-objects\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">ECMAScript 2015 (6th Edition, ECMA-262)<br><small lang=\"pt-BR\">The definition of 'Promise' in that specification.</small></a></td>\n      <td><span class=\"spec-standard\">Padrão</span></td>\n      <td>Initial definition in an ECMA standard.</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"Compatibilidade com navegadores","id":"compatibilidade_com_navegadores","isH3":false,"query":"javascript.builtins.Promise","dataURL":"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise/bcd.json"}},{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Veja também</p>\n<ul>\n  <li><a href=\"https://promisesaplus.com/\" class=\"external\" rel=\" noopener\">Promises/A+ specification</a></li>\n  <li><a href=\"https://www.html5rocks.com/en/tutorials/es6/promises/\" class=\"external\" rel=\" noopener\">Jake Archibald: JavaScript Promises: There and Back Again</a></li>\n  <li><a href=\"https://de.slideshare.net/domenicdenicola/callbacks-promises-and-coroutines-oh-my-the-evolution-of-asynchronicity-in-javascript\" class=\"external\" rel=\" noopener\">Domenic Denicola: Callbacks, Promises, and Coroutines – Asynchronous Programming Patter in JavaScript</a></li>\n  <li><a href=\"https://www.mattgreer.org/articles/promises-in-wicked-detail/\" class=\"external\" rel=\" noopener\">Matt Greer: JavaScript Promises ... In Wicked Detail</a></li>\n  <li><a href=\"https://www.promisejs.org/\" class=\"external\" rel=\" noopener\">Forbes Lindesay: promisejs.org</a></li>\n</ul>"}}],"toc":[{"text":"Descrição","id":"descrição"},{"text":"Propriedades","id":"propriedades"},{"text":"Métodos","id":"métodos"},{"text":"Protótipo Promise","id":"protótipo_promise"},{"text":"Exemplos","id":"exemplos"},{"text":"Especificações","id":"especificações"},{"text":"Compatibilidade com navegadores","id":"compatibilidade_com_navegadores"}],"summary":"Promise é um objeto usado para processamento assíncrono. Uma Promise (de \"promessa\") representa um valor que pode estar disponível agora, no futuro ou nunca.","popularity":0.0042,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Promise","locale":"en-US","native":"English (US)"},{"title":"Promise","locale":"es","native":"Español"},{"title":"Promise","locale":"fr","native":"Français"},{"title":"Promise","locale":"ja","native":"日本語"},{"title":"Promise","locale":"ko","native":"한국어"},{"title":"Promise","locale":"ru","native":"Русский"},{"title":"Promise","locale":"zh-CN","native":"中文 (简体)"},{"title":"Promise","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"pt-br/web/javascript/reference/global_objects/promise","github_url":"https://github.com/mdn/translated-content/blob/main/files/pt-br/web/javascript/reference/global_objects/promise/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/pt-BR/docs/Web","title":"Tecnologia Web para desenvolvedores"},{"uri":"/pt-BR/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/pt-BR/docs/Web/JavaScript/Reference","title":"Referência JavaScript"},{"uri":"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects","title":"Objetos Globais"},{"uri":"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise","title":"Promise"}],"pageTitle":"Promise - JavaScript | MDN","noIndexing":false}}