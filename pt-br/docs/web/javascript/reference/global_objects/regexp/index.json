{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"RegExp","mdn_url":"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/RegExp","locale":"pt-BR","native":"Português (do Brasil)","sidebarHTML":"<ol><li><strong><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Propriedades</strong></a><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@species\"><code>get RegExp[@@species]</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll\"><code>RegExp.prototype.dotAll</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags\"><code>RegExp.prototype.flags</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global\"><code>RegExp.prototype.global</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices\"><code>RegExp.prototype.hasIndices</code> <small>(en-US)</small></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase\"><code>RegExp.prototype.ignoreCase</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/input\"><code>RegExp.input ($_)</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\"><code>RegExp: lastIndex</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastMatch\"><code>RegExp.lastMatch ($&amp;)</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastParen\"><code>RegExp.lastParen ($+)</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/leftContext\"><code>RegExp.leftContext ($`)</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\"><code>RegExp.prototype.multiline</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/n\"><code>RegExp.$1-$9</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/rightContext\"><code>RegExp.rightContext ($')</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source\"><code>RegExp.prototype.source</code> <small>(en-US)</small></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\"><code>RegExp.prototype.sticky</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode\"><code>RegExp.prototype.unicode</code> <small>(en-US)</small></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>Métodos</strong></a><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match\"><code>RegExp.prototype[@@match]()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll\"><code>RegExp.prototype[@@matchAll]()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace\"><code>RegExp.prototype[@@replace]()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search\"><code>RegExp.prototype[@@search]()</code> <small>(en-US)</small></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split\"><code>RegExp.prototype[@@split]()</code> <small>(en-US)</small></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/RegExp/compile\"><code>RegExp.prototype.compile()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>RegExp.prototype.exec()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"><code>RegExp.prototype.test()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toString\"><code>RegExp.prototype.toString()</code></a></li></ol></li><li><strong>Herança:</strong></li><li><strong><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>Propriedades</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\"><code>Function.prototype.prototype</code> <small>(en-US)</small></a></li></ol></li><li><a href=\"#\"><strong>Métodos</strong></a><ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Propriedades</strong></a><ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Métodos</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":"sumário","title":"Sumário","isH3":false,"content":"<p>O construtor <strong><code>RegExp</code></strong> cria um objeto de expressão regular para realizar uma correspondência de texto com um padrão.</p>\n<p>Para uma introdução à expressões regulares, leia o <a href=\"/pt-BR/docs/Web/JavaScript/Guide/Regular_Expressions\">capítulo de Expressões Regulares</a> no <a href=\"/pt-BR/docs/Web/JavaScript/Guide\">Guia de JavaScript</a>.</p>"}},{"type":"prose","value":{"id":"construtor","title":"Construtor","isH3":false,"content":"<p>Notações literais e de construtores são possíveis:</p>\n<pre class=\"notranslate\">/padrão/flags\nnew RegExp(padrão[, flags])\nRegExp(padrão[, flags])\n</pre>"}},{"type":"prose","value":{"id":"parâmetros","title":"Parâmetros","isH3":true,"content":"<dl>\n  <dt id=\"padrão\"><code>padrão</code></dt>\n  <dd>\n    <p>O texto da expressão regular, ou como em ES5, outro objeto RegExp. Os padrões podem incluir caracteres especiais para correspondencia em um intervalo maior de valores do que uma string literal.</p>\n  </dd>\n  <dt id=\"flags\"><code>flags</code></dt>\n  <dd>\n    <p>Se especificado, <kbd>flags</kbd>indica os marcadores que podem ser adicionados, ou se um objeto é suficiente para o padrão, os valores de flags serão substituidos por qualquer uma das flags de objetos. O valor de <kbd>flags</kbd>é uma string contendo qualquer combinação dos seguintes valores:</p>\n    <dl>\n      <dt id=\"g\"><code>g</code></dt>\n      <dd>\n        <p>corresponder globalmente; acha <strong>todas</strong> as correspondências em vez de parar após achar a primeira</p>\n      </dd>\n      <dt id=\"i\"><code>i</code></dt>\n      <dd>\n        <p>ignorar maiúsc./minúsc.; Se a <em>flag <kbd>u</kbd></em> estiver ativa, deve ser utilizado o <em>Unicode case folding</em></p>\n      </dd>\n      <dt id=\"m\"><code>m</code></dt>\n      <dd>\n        <p>multilinha; trata caracteres de início e fim (^ e $) ao operar sobre múltiplas linhas (ou seja, corresponder o início ou fim de <em>cada</em> linha (delimitado por \\n ou \\r), e não apenas o começo ou fim de toda a string de entrada)</p>\n      </dd>\n      <dt id=\"u\"><code>u</code> <svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg></dt>\n      <dd>\n        <p>unicode; trata o padrão como uma sequência de código unicode</p>\n      </dd>\n      <dt id=\"y\"><code>y</code> <svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg></dt>\n      <dd>\n        <p>aderente; corresponde apenas pelo index indicado pela propriedade <code>lastIndex</code> dessa expressão regular na string alvo (e não tenta corresponder de qualquer indexes posteriores).</p>\n      </dd>\n    </dl>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"descrição","title":"Descrição","isH3":false,"content":"<p>Há dois modos de criar um objeto <code>RegExp</code>: uma notação literal e um construtor. Para indicar strings, os parâmetros para a notação literal não usam aspas, enquanto os parâmetros para a função do construtor usam. Então, as seguintes expressões criam a mesma expressão regular:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">ab+c</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ab+c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>A notação literal compila a expressão regular em tempo de execução. Use a notação literal quando a expressão regular permanecerá constante. Por exemplo, se você usar a notação literal para construir a expressão regular usada em um <em>loop</em>, a expressão regular não será recompilada a cada iteração</p>\n<p>O construtor do objeto da expressão regular, por exemplo, <code>new RegExp('ab+c')</code>, fornece uma compilação em tempo de execução da expressão regular. Use a função construtora quando você sabe que o padrão da expressão regular será mudado, ou você não sabe o padrão e o está recebendo de outra fonte, como uma entrada do usuário.</p>\n<p>Começando com ECMAScript 6, <code>new RegExp(/ab+c/, 'i')</code>, deixou de lançar um <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> (\"can't supply flags quando constructing one RegExp from another\") quando o primeiro argumento é um <code>RegExp</code> e o segundo argumento <code>flags</code> está presente. Uma nova <code>RegExp</code> dos argumentos é criada ao invés disso.</p>\n<p>Quando se usa a função construtora, as regras de escapar em uma string (preceder caracteres especiais com \\ quando incluídos na string) são necessárias. Por exemplo, as declarações a seguir são equivalentes:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\w+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\\\w+'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"significado_dos_caracteres_especiais_nas_expressões_regulares","title":"Significado dos caracteres especiais nas expressões regulares","isH3":false,"content":"<ul>\n  <li><a href=\"#character-classes\">Classes de Caracteres</a></li>\n  <li><a href=\"#character-sets\">Conjuntos de Caracteres</a></li>\n  <li><a href=\"#boundaries\">Limites</a></li>\n  <li><a href=\"#grouping-back-references\">Agrupamentos e back references</a></li>\n  <li><a href=\"#quantifiers\">Quantificadores</a></li>\n</ul>\n<table class=\"fullwidth-table\">\n  <tbody>\n    <tr id=\"character-classes\">\n      <th colspan=\"2\">Classes de Caracteres</th>\n    </tr>\n    <tr>\n      <th>Caractere</th>\n      <th>Significado</th>\n    </tr>\n    <tr>\n      <td><code>.</code></td>\n      <td>\n        <p>\n          (O ponto) corresponde um único caracter qualquer <em>exceto</em> os\n          caracteres de nova linha: <code>\\n</code>, <code>\\r</code>,\n          <code>\\u2028</code> ou <code>\\u2029</code>.\n        </p>\n        <p>\n          Note que a flag multilinha <code>m</code> não muda o comportamento do\n          ponto. Então para corresponder um padrão por múltiplas linhas, o\n          conjunto de caracteres <code>[^]</code> pode ser usado, que\n          corresponderá qualquer caractere, incluindo novas linhas.\n        </p>\n        <p>\n          Por exemplo, <code>/.y/</code> corresponde \"my\" e \"ay\", mas não \"yes\",\n          em \"yes make my day\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\d</code></td>\n      <td>\n        <p>\n          Corresponde um caractere de dígito no alfabeto basic Latin.\n          Equivalente <code>a [0-9]</code>.\n        </p>\n        <p>\n          Por exemplo, <code>/\\d/</code> ou <code>/[0-9]/</code> corresponde \"2\"\n          em \"B2 é o número da suíte\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\D</code></td>\n      <td>\n        <p>\n          Corresponde qualquer caractere que não é um dígito no alfabeto basic\n          Latin. Equivalente a <code>[^0-9]</code>.\n        </p>\n        <p>\n          Por exemplo, <code>/\\D/</code> ou <code>/[^0-9]/</code> corresponde\n          \"B\" em \"B2 é o suite number\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\w</code></td>\n      <td>\n        <p>\n          Corresponde qualquer caractere alfanumérico do alfabeto basic Latin,\n          incluindo o underline. Equivalente a <code>[A-Za-z0-9_]</code>.\n        </p>\n        <p>\n          Por exemplo, <code>/\\w/</code> corresponde \"a\" em \"apple\", \"5\" em\n          \"$5.28\", e \"3\" em \"3D\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\W</code></td>\n      <td>\n        <p>\n          Corresponde qualquer caractere que não é um alfanumérico do alfabeto\n          basic Latin. Equivalente a <code>[^A-Za-z0-9_]</code>.\n        </p>\n        <p>\n          Por exemplo, <code>/\\W/</code> ou\n          <code>/[^A-Za-z0-9_]/</code> corresponde \"%\" em \"50%\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\s</code></td>\n      <td>\n        <p>\n          Corresponde um único caractere de espaço em branco, incluindo espaço,\n          tabulação (tab), quebra de página, nova linha (LF) e outros espaços\n          Unicode. Equivalente a\n          <code>[\n\\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e\\u2000​\\u2001\\u2002​\\u2003\\u2004\\u2005\\u2006​\\u2007\\u2008​\\u2009\\u200a​\\u2028\\u2029​\\u202f\\u205f​\\u3000]</code>.\n        </p>\n        <p>Por exemplo, <code>/\\s\\w*/</code> corresponde \" bar\" em \"foo bar\".</p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\S</code></td>\n      <td>\n        <p>\n          Corresponde um único caractere que não seja um espaço em branco.\n          Equivalente a\n          <code>[^\n\\f\\n\\r\\t\\v​\\u00a0\\u1680​\\u180e\\u2000​\\u2001\\u2002​\\u2003\\u2004\\u2005\\u2006​\\u2007\\u2008​\\u2009\\u200a​\\u2028\\u2029​\\u202f\\u205f​\\u3000]</code>.\n        </p>\n        <p>Por exemplo, <code>/\\S\\w*/</code> corresponde \"foo\" em \"foo bar\".</p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\t</code></td>\n      <td>Corresponde uma tabulação.</td>\n    </tr>\n    <tr>\n      <td><code>\\r</code></td>\n      <td>Corresponde uma quebra de linha.</td>\n    </tr>\n    <tr>\n      <td><code>\\n</code></td>\n      <td>Corresponde uma nova linha.</td>\n    </tr>\n    <tr>\n      <td><code>\\v</code></td>\n      <td>Corresponde uma tabulação vertical.</td>\n    </tr>\n    <tr>\n      <td><code>\\f</code></td>\n      <td>Corresponde uma quebra de página.</td>\n    </tr>\n    <tr>\n      <td><code>[\\b]</code></td>\n      <td>Corresponde um caracter backspace. (Não confundir com <code>\\b</code>)</td>\n    </tr>\n    <tr>\n      <td><code>\\0</code></td>\n      <td>Corresponde um caractere NUL. Não coloque outro dígito seguinte a esse.</td>\n    </tr>\n    <tr>\n      <td><code>\\c<em>X</em></code></td>\n      <td>\n        <p>\n          Onde <code><em>X</em></code> é uma letra de A - Z. Corresponde um\n          caractere de controle em uma string.\n        </p>\n        <p>Por exemplo, <code>/\\cM/</code> corresponde control-M em uma string.</p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\x<em>hh</em></code></td>\n      <td>\n        Corresponde o caractere com o código <code><em>hh</em></code> (dois\n        dígitos hexadecimais).\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\u<em>hhhh</em></code></td>\n      <td>\n        Corresponde o caractere com o valor Unicode\n        <code><em>hhhh</em></code> (quatro dígitos hexadecimais).\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\</code></td>\n      <td>\n        <p>\n          Para caracteres que são geralmente tratados literalmente, indica que o\n          próximo caractere é especial e não deve ser interpretado literalmente.\n        </p>\n        <p>\n          Por exemplo, <code>/b/</code> corresponde o caractere \"b\". Colocando\n          uma barra invertida antes do \"b\", ou seja, usando <code>/\\b/</code>, o\n          caractere se torna especial, significando corresponder o limite de uma\n          palavra.\n        </p>\n        <p><em>ou</em></p>\n        <p>\n          Para caracteres que são geralmente tratados especialmente, indica que\n          o próximo caractere não é especial e deve ser interpretado\n          literalmente.\n        </p>\n        <p>\n          Por exemplo, \"*\" é um caractere especial que significa 0 ou mais\n          ocorrências do caractere precedente devem ser correspondidas; por\n          exemplo, <code>/a*/</code> significa corresponder 0 ou mais \"a\"s. Para\n          corresponder <code>*</code> literalmente, preceda-o com uma barra\n          invertida; por exemplo, <code>/a\\*/</code> corresponde \"a*\".\n        </p>\n      </td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr id=\"character-sets\">\n      <th colspan=\"2\">Conjuntos de Caracteres</th>\n    </tr>\n    <tr>\n      <th>Caractere</th>\n      <th>Significado</th>\n    </tr>\n    <tr>\n      <td><code>[xyz]</code></td>\n      <td>\n        <p>\n          Um conjunto de caracteres. Corresponde qualquer um dos caracteres\n          cercados. Você pode especificar uma extensão de caracteres usando um\n          hífen.\n        </p>\n        <p>\n          Por exemplo, <code>[abcd]</code> é o mesmo que <code>[a-d]</code>.\n          Eles correspondem o \"b\" em \"banco\" e o \"c\" em \"cortar\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>[^xyz]</code></td>\n      <td>\n        <p>\n          Um conjunto de caracteres negativo ou complementado. Isto é,\n          corresponde qualquer coisa que não esteja cercada nos colchetes. Você\n          pode especificar uma extensão de caracteres usando um hífen.\n        </p>\n        <p>\n          Por exemplo, <code>[^abc]</code> é o mesmo que <code>[^a-c]</code>.\n          Eles inicialmente correspondem \"n\" em \"banco\" e \"o\" em \"cortar\".\n        </p>\n      </td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr id=\"boundaries\">\n      <th colspan=\"2\">Limites</th>\n    </tr>\n    <tr>\n      <th>Caractere</th>\n      <th>Significado</th>\n    </tr>\n    <tr>\n      <td><code>^</code></td>\n      <td>\n        <p>\n          Corresponde o início de uma entrada. Se a flag multilinha é utilizada,\n          também corresponde imediatamente após um caractere de quebra de linha.\n        </p>\n        <p>\n          Por exemplo, <code>/^A/</code> não corresponde o \"A\" em \"an A\", mas\n          corresponde o primeiro \"A\" em \"An A\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>$</code></td>\n      <td>\n        <p>\n          Corresponde o fim de uma entrada. Se a flag multilinha é utilizada,\n          também corresponde imediatamente antes de um caractere de quebra de\n          linha.\n        </p>\n        <p>\n          Por exemplo, <code>/o$/</code> não corresponde o \"o\" em \"cantor\", mas\n          corresponde em \"canto\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\b</code></td>\n      <td>\n        <p>\n          Corresponde um limite de palavra de largura zero, como entre uma letra\n          e um espaço. (Não confundir com <code>[\\b]</code>)\n        </p>\n        <p>\n          Por exemplo, <code>/\\bno/</code> corresponde o \"no\" em \"de noite\";\n          <code>/ly\\b/</code> corresponde o \"ly\" em \"possibly yesterday\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\B</code></td>\n      <td>\n        <p>\n          Corresponde um limite de uma não palavra de largura zero, como entre\n          duas letras ou entre dois espaços.\n        </p>\n        <p>\n          Por exemplo, <code>/\\Bte/</code> corresponde \"te\" em \"de noite\", e\n          <code>/on\\B/</code> corresponde \"on\" em \"possivelmente ontem\".\n        </p>\n      </td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr id=\"grouping-back-references\">\n      <th colspan=\"2\">Agrupamentos e back references</th>\n    </tr>\n    <tr>\n      <th>Caractere</th>\n      <th>Significado</th>\n    </tr>\n    <tr>\n      <td><code>(<em>x</em>)</code></td>\n      <td>\n        <p>\n          Corresponde <code><em>x</em></code> e memoriza a correspondência.\n          Esses são chamados parênteses de captura.\n        </p>\n        <p>\n          Por exemplo, <code>/(foo)/</code> corresponde e memoriza \"foo\" em \"foo\n          bar\". A substring correspondida pode ser chamada novamente dos\n          elementos do array resultante <code>[1], ..., [n]</code> ou das\n          propriedades predefinidas do objeto <code>RegExp</code>\n          <code>$1, ..., $9</code>.\n        </p>\n        <p>\n          Grupos de captura têm uma falta na performance. Se você não necessita\n          que a substring correspondida seja chamada novamente, prefira\n          parênteses de não-captura (veja mais abaixo).\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\<em>n</em></code></td>\n      <td>\n        <p>\n          Onde <code><em>n</em></code> é um inteiro positivo. A back reference\n          to o last substring matching o n parenthetical no expressão regular\n          (counting left parentheses).\n        </p>\n        <p>\n          Por exemplo, <code>/apple(,)\\sorange\\1/</code> corresponde \"apple,\n          orange,\" em \"apple, orange, cherry, peach\". Um exemplo mais completo\n          está a seguir nesta tabela.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>(?:<em>x</em>)</code></td>\n      <td>\n        Corresponde <code><em>x</em></code> mas não memoriza a correspondência.\n        Esses são chamados parênteses de não-captura. A substring correspondida\n        não pode ser chamada novamente dos elementos do array resultante\n        <code>[1], ..., [n]</code> ou das propriedades predefinidas do objeto\n        <code>RegExp</code> <code>$1, ..., $9</code>.\n      </td>\n    </tr>\n  </tbody>\n  <tbody>\n    <tr id=\"quantifiers\">\n      <th colspan=\"2\">Quantificadores</th>\n    </tr>\n    <tr>\n      <th>Caractere</th>\n      <th>Significado</th>\n    </tr>\n    <tr>\n      <td><code><em>x</em>*</code></td>\n      <td>\n        <p>Corresponde o item precedente <em>x</em> zero ou mais vezes.</p>\n        <p>\n          Por exemplo, <code>/assusto*/</code> corresponde \"assustoooo\" em \"Um\n          fantasma assustoooou\" e \"assust\" em \"Não me assustei\", mas nada em \"Um\n          bode grunhiu\".\n        </p>\n        <p>\n          Note que no caso acima, o único caractere a ser selecionado é \"o\",\n          pois ele é o caractere imediatamente anterior ao asterisco e não há\n          qualquer operador de agrupamento que indique que mais caracteres\n          deveriam ser submetidos à repetição. Se quiséssemos selecionar a\n          ocorrência sequencial da palavra completa \"blah\", por exemplo,\n          poderíamos utilizar algum agrupamento como <code>/(blah)*/</code> o\n          que geraria a seleção de \"blahblahblah\" na frase \"blahblahblah ração\n          para gatos\" ou de \"blah\" na frase \"algoritmo blahut-arimoto\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code><em>x</em>+</code></td>\n      <td>\n        <p>\n          Corresponde o item precedente <em>x</em> uma ou mais vezes.\n          Equivalente a <code>{1,}</code>.\n        </p>\n        <p>\n          Por exemplo, <code>/a+/</code> corresponde o \"o\" em \"doce\" e todos os\n          \"o\"s em \"doooooooce\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code><em>x</em>?</code></td>\n      <td>\n        <p>Corresponde o item precedente <em>x</em> nenhuma ou uma vez.</p>\n        <p>\n          Por exemplo, <code>/e?le?/</code> corresponde o \"el\" em \"angel\" e o\n          \"le\" em \"angle.\"\n        </p>\n        <p>\n          If used imediatamente after qualquer dos quantifiers <code>*</code>,\n          <code>+</code>, <code>?</code>, ou <code>{}</code>, makes o quantifier\n          non-greedy (matching o minimum number of vezes), como opposed to o\n          default, which é greedy (matching o maximum number of vezes).\n        </p>\n        <p>\n          Also used em lookahead assertions, described under <code>(?=)</code>,\n          <code>(?!)</code>, e <code>(?:)</code> em this table.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code><em>x</em>(?=<em>y</em>)</code></td>\n      <td>\n        Corresponde <code><em>x</em></code> apenas se <code><em>x</em></code> é\n        seguido por <code><em>y</em></code>. Por exemplo, <code>/Jack(?=Sprat)/</code> corresponde \"Jack\" apenas\n        se for seguido por \"Sprat\".\n        <code>/Jack(?=Sprat|Frost)/</code> corresponde \"Jack\" apenas se for\n        seguido por \"Sprat\" ou \"Frost\". Porém, nem \"Sprat\" nem \"Frost\" são\n        partes do resultado da correspondência.\n      </td>\n    </tr>\n    <tr>\n      <td><code><em>x</em>(?!<em>y</em>)</code></td>\n      <td>\n        <p>\n          Corresponde <code><em>x</em></code> apenas se\n          <code><em>x</em></code> não é seguido por <code><em>y</em></code>. Por exemplo, <code>/\\d+(?!\\.)/</code> corresponde um número apenas\n          se não for seguido por um ponto.\n        </p>\n        <p>\n          <code>/\\d+(?!\\.)/.exec('3.141')</code> corresponde \"141\", mas não\n          \"3.141\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code><em>x</em>|<em>y</em></code></td>\n      <td>\n        <p>Corresponde <code><em>x</em></code><em> </em>ou <code><em>y</em></code><em>.</em></p>\n        <p>\n          Por exemplo, <code>/verde|vermelha/</code> corresponde \"verde\" em\n          \"maçã verde\" e \"vermelha\" em \"maçã vermelha\".\n        </p>\n        <p>\n          Entretanto, a primeira expressão tem preferência. Se uma string fosse\n          corresponder às duas expressões, ela vai corresponder à que aparece do\n          lado esquerdo do operador <code>|</code>. Por exemplo,\n          <code>/maçãs|maçã/</code> corresponde \"maçãs\" na frase \"<u>maçãs</u>\n          vermelhas\" e \"maçã\" na frase \"<u>maçã</u> verde\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code><em>x</em>{<em>n</em>}</code></td>\n      <td>\n        <p>\n          Onde <code><em>n</em></code> é um número inteiro positivo. Corresponde\n          exatamente <code><em>n</em></code> ocorrências do item precedente\n          <em>x</em>.\n        </p>\n        <p>\n          Por exemplo, <code>/o{2}/</code> não corresponde o \"o\" em\n          \"brigadeiro\", mas corresponde todos os dois \"o\"s em\n          \"brigadeir<u>oo</u>\", e o dois primeiros \"o\"s em\n          \"brigadeir<u>oo</u>o\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code><em>x</em>{<em>n</em>,}</code></td>\n      <td>\n        <p>\n          Onde <code><em>n</em></code> é um número inteiro positivo. Corresponde\n          <em>pelo menos</em> <code><em>n</em></code> ocorrências do item\n          precedente <em>x </em>(sem que haja um limite superior).\n        </p>\n        <p>\n          Por exemplo, <code>/o{2,}/</code> não corresponde o \"o\" em\n          \"brigadeiro\", mas corresponde todos os \"o\"s em \"brigadeir<u>oo</u>\" e\n          em \"brigadeir<u>ooooooooo</u>\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code><em>x</em>{<em>n</em>,<em>m</em>}</code></td>\n      <td>\n        <p>\n          Onde <code><em>n</em></code> e <code><em>m</em></code> são números\n          inteiros positivos. Corresponde pelo menos <code><em>n</em></code> e\n          no máximo <code><em>m</em></code> ocorrências do item precedente\n          <em>x</em>.\n        </p>\n        <p>\n          Por exemplo, <code>/o{2,4}/</code> corresponde nada em \"brigadeiro\",\n          os dois \"o\"s em \"brigadeir<u>oo</u>\", os três \"o\"s em\n          \"brigadeir<u>ooo</u>\", e os primeiros quatro \"o\"s em\n          \"brigadeir<u>oooo</u>o\".\n        </p>\n        <p>\n          É importante perceber que no último caso a correspondência não inclui\n          o último \"o\" de \"brigadeirooooo\". Isso se deve ao fato do operador\n          quantificador ter definido o número máximo de ocorrências como 4,\n          ignorando a quinta repetição do caractere.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <p><code><em>x</em>*?</code><br><code><em>x</em>+?<br><em>x??</em><br><em>x{n,}?</em><br><em>x{n,m}?</em></code></p>\n      </td>\n      <td>\n        <p>\n          <strong>Operadores <em>non-greedy </em>ou<em> lazy</em> (não-gulosos ou\npreguiçosos)</strong><br>Esses operadores com a <code>?</code> no final, operam de\n          maneira semelhante aos seus análogos sem <code>?</code> mostrados\n          acima, correspondendo múltiplas ocorrências do item precedente\n          <em>x.</em> Entretanto, desta vez a ocorrência selecionada será a\n          mínima possível.\n        </p>\n        <p>\n          No exemplo <code>/(blah)*?/</code>, diante da frase \"blahblahblah\n          ração para gatos\", nada seria selecionado, pois a ocorrência mínima\n          aceita pelo operador <code>*?</code> seria ocorrência de 0 (zero)\n          vezes da <em>string</em> \"blah\", o que resulta no nada.\n        </p>\n        <p>\n          Já a expressão regular <code>/(blah)+?/</code>, diante da mesma frase,\n          corresponderia a \"blah\", que é a ocorrência mínima aceita pelo\n          operador <code>+?</code><em>, </em>ou seja, 1 (uma) repetição da\n          sequência \"blah\".\n        </p>\n        <p>\n          Em outro exemplo com mais aplicação prática, digamos que se quer\n          corresponder todos os termos que ficam entre aspas em um texto. Se\n          fizéssemos simplesmente a <em>regex</em> <code>/\".*\"/</code>, diante\n          de um texto com múltiplas ocorrências de termos entre aspas, como:\n          <em>'Eu \"gosto\" muito de \"estudar\" regex'</em>, a nossa expressão\n          regular seria gulosa e selecionaria o maior texto possível que\n          correspondesse à definição, nesse caso, selecionando '<em>\"gosto\" muito de \"estudar\"</em>', pois todo esse texto está compreendido entre a primeira aspa\n          (antes de <em>'gosto'</em>) e a última aspa (após <em>'estudar'</em>),\n          o que é um resultado talvez indesejado.<br>Se usarmos a regex\n          <code>/\".*?\"/</code>, com o operador não-guloso, as correspondências\n          para a mesma frase seriam '<em>\"gosto\"</em>' e '<em>\"estudar\"</em>'\n          separadamente, conforme era a intenção inicial.\n        </p>\n      </td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"propriedades","title":"Propriedades","isH3":false,"content":"<dl>\n  <dt id=\"regexp.prototype_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp.prototype</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Permite a adição de propriedades a todos os objetos.</p>\n  </dd>\n  <dt id=\"regexp.length\"><code>RegExp.length</code></dt>\n  <dd>\n    <p>O valor of <code>RegExp.length</code> é 2.</p>\n  </dd>\n</dl><div class=\"notecard note\" id=\"sect1\">\n\n<div id=\"sect2\"><span>Properties inherited from <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a>:</span></div>\n<div id=\"sect3\"><a class=\"internal page-not-created\" href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/Arity\" title=\"This is a link to an unwritten page\"><code>arity</code></a>, <a class=\"internal\" href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>caller</code></a>, <a class=\"internal only-in-en-us\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" title=\"Currently only available in English (US)\">constructor (en-US)</a>, <a class=\"internal\" href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>length</code></a>, <a class=\"internal\" href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>name</code></a></div>\n</div>"}},{"type":"prose","value":{"id":"métodos","title":"Métodos","isH3":false,"content":"<p>O objeto global <code>RegExp não possui métodos próprios, no entanto, herda alguns métodos através da cadeia de prototype.</code></p><div class=\"notecard note\" id=\"sect4\">\n\n<div id=\"sect5\"><span>Methods inherited from <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a>:</span></div>\n<div id=\"sect6\"><a class=\"internal\" href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>apply</code></a>, <a class=\"internal\" href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>call</code></a>, <a class=\"internal\" href=\"/pt-BR/docs/conflicting/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>toSource</code></a>, <a class=\"internal\" href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>toString</code></a></div>\n</div>"}},{"type":"prose","value":{"id":"objetos_e_instancias","title":"Objetos e instancias","isH3":false,"content":""}},{"type":"prose","value":{"id":"propriedades_2","title":"Propriedades","isH3":true,"content":"{{page('/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/prototype', 'Properties')}}"}},{"type":"prose","value":{"id":"métodos_2","title":"Métodos","isH3":true,"content":"{{page('/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/prototype', 'Methods')}}"}},{"type":"prose","value":{"id":"exemplos","title":"Exemplos","isH3":false,"content":""}},{"type":"prose","value":{"id":"exemplo_usando_uma_expressão_regular_para_mudar_o_fomato_dos_dados","title":"Exemplo: Usando uma expressão regular para mudar o fomato dos dados","isH3":true,"content":"<p>O seguinte script usa o método <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>replace()</code></a> da instância de <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> para casar o nome no format <em>nome sobrenome</em> e produzir no formato <em>sobrenome, nome</em>. No texto substituto, o script usa <code>$1</code> e <code>$2</code> para indicar os respectivos parênteses de casamento no padrão da expressão regular.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(\\w+)\\s(\\w+)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'John Smith'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> newstr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">,</span> <span class=\"token string\">'$2, $1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Isto retornará \"Smith, John\".</p>"}},{"type":"prose","value":{"id":"exemplo_usando_expressões_regulares_para_quebrar_linhas_com_diferentes_fins_de_linhaquebras_de_linha","title":"Exemplo: Usando expressões regulares para quebrar linhas com diferentes <strong>fins de linha</strong>/<strong>quebras de linha</strong>","isH3":true,"content":"<p>O final de linha padrão depende da plataforma utilizada (Unix, Windows, etc.). A divisão(<em>split</em>) de linha fornecida neste exemplo funciona com todas as plataformas.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'Um texto\\nE mais um pouco\\r\\nE ainda mais\\rEsse é o fim'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> lines <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\r\\n|\\r|\\n</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints [ 'Um texto', 'E mais um pouco', 'E ainda mais', 'Esse é o fim' ]</span>\n</code></pre></div>\n<p>Note que a ordem dos padrões na expressão regular importa.</p>","titleAsText":"Exemplo: Usando expressões regulares para quebrar linhas com diferentes fins de linha/quebras de linha"}},{"type":"prose","value":{"id":"exemplo_usando_expressão_regular_sobre_múltiplas_linhas","title":"Exemplo: Usando expressão regular sobre múltiplas linhas","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'Please yes\\nmake my day!'</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">yes.*day</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Retorna null</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">yes[^]*day</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Retorna'yes\\nmake my day'</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"exemplo_using_a_expressão_regular_com_o_sticky_flag","title":"Exemplo: Using a expressão regular com o \"sticky\" flag","isH3":true,"content":"<p>Este exemplo mostra como utilizar a sticky flag em expressões regulares.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'First line\\nSecond line'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(\\S+) line\\n?</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">y</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> match <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// prints 'First'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints '11'</span>\n\n<span class=\"token keyword\">var</span> match2 <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>match2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// prints 'Second'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints '22'</span>\n\n<span class=\"token keyword\">var</span> match3 <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>match3 <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 'true'</span>\n</code></pre></div>\n<p>One can test at run-time whether o sticky flag é supported, using <code>try { … } catch { … }</code>. Para this, either an <code>eval(…)</code> expression ou o <code>RegExp(regex-string, flags-string)</code> syntax must be used (since o <code>/regex/flags</code> notation é processed at compile-time, so throws an exception before o <code>catch</code> block é encountered). Por exemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> supports_sticky<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> supports_sticky <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> supports_sticky <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>supports_sticky<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 'true'</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"exemplo_expressão_regular_e_unicode_caracteres","title":"Exemplo: Expressão regular e Unicode caracteres","isH3":true,"content":"<p>As mentioned above, <code>\\w</code> ou <code>\\W</code> only corresponde ASCII based caracteres; por exemplo, \"a\" to \"z\", \"A\" to \"Z\", \"0\" to \"9\" e \"_\". To match caracteres from other languages such como Cyrillic ou Hebrew, use <code>\\uhhhh</code>, onde \"hhhh\" é o caractere's Unicode valor em hexadecimal. This exemplo demonstrates how one can separate out Unicode caracteres from uma palavra.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> <span class=\"token string\">'Образец text на русском языке'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\u0400-\\u04FF]+</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> match <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// prints 'Образец'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints '7'</span>\n\n<span class=\"token keyword\">var</span> match2 <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>match2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// prints 'на' [não print 'text']</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints '15'</span>\n\n<span class=\"token comment\">// e assim vai</span>\n</code></pre></div>\n<p>Here's an external resource para getting o complete Unicode block range para different scripts: <a href=\"http://kourge.net/projects/regexp-unicode-block\" class=\"external\" rel=\" noopener\">Regexp-unicode-block</a>.</p>"}},{"type":"prose","value":{"id":"exemplo_extracting_subdomain_name_from_url","title":"Exemplo: Extracting subdomain name from URL","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://xxx.domain.com'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[^.]+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 'xxx'</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"especificações","title":"Especificações","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>Specification</th>\n      <th>Status</th>\n      <th>Comment</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>ECMAScript 1st Edition.</td>\n      <td>Standard</td>\n      <td>Initial definition. Implemented em JavaScript 1.1.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www.ecma-international.org/ecma-262/5.1/#sec-15.10\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">ECMAScript 5.1 (ECMA-262)<br><small lang=\"pt-BR\">The definition of 'RegExp' in that specification.</small></a></td>\n      <td><span class=\"spec-standard\">Padrão</span></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www.ecma-international.org/ecma-262/6.0/#sec-regexp-regular-expression-objects\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">ECMAScript 2015 (6th Edition, ECMA-262)<br><small lang=\"pt-BR\">The definition of 'RegExp' in that specification.</small></a></td>\n      <td><span class=\"spec-standard\">Padrão</span></td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"Compatibilidade com navegadores","id":"compatibilidade_com_navegadores","isH3":false,"query":"javascript.builtins.RegExp","dataURL":"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/RegExp/bcd.json"}},{"type":"prose","value":{"id":"veja_também","title":"Veja também","isH3":false,"content":"<ul>\n  <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Regular_Expressions\">Regular Expressions</a> chapter no <a href=\"/pt-BR/docs/Web/JavaScript/Guide\">JavaScript Guide</a></li>\n  <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a></li>\n  <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace()</code></a></li>\n</ul>"}}],"toc":[{"text":"Sumário","id":"sumário"},{"text":"Construtor","id":"construtor"},{"text":"Descrição","id":"descrição"},{"text":"Significado dos caracteres especiais nas expressões regulares","id":"significado_dos_caracteres_especiais_nas_expressões_regulares"},{"text":"Propriedades","id":"propriedades"},{"text":"Métodos","id":"métodos"},{"text":"Objetos e instancias","id":"objetos_e_instancias"},{"text":"Exemplos","id":"exemplos"},{"text":"Especificações","id":"especificações"},{"text":"Compatibilidade com navegadores","id":"compatibilidade_com_navegadores"},{"text":"Veja também","id":"veja_também"}],"summary":"O construtor RegExp cria um objeto de expressão regular para realizar uma correspondência de texto com um padrão.","popularity":0.0022,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"RegExp","locale":"en-US","native":"English (US)"},{"title":"RegExp","locale":"es","native":"Español"},{"title":"RegExp","locale":"fr","native":"Français"},{"title":"RegExp","locale":"ja","native":"日本語"},{"title":"RegExp","locale":"ko","native":"한국어"},{"title":"RegExp","locale":"ru","native":"Русский"},{"title":"RegExp(正则表达式)","locale":"zh-CN","native":"中文 (简体)"},{"title":"RegExp","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"pt-br/web/javascript/reference/global_objects/regexp","github_url":"https://github.com/mdn/translated-content/blob/main/files/pt-br/web/javascript/reference/global_objects/regexp/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/pt-BR/docs/Web","title":"Tecnologia Web para desenvolvedores"},{"uri":"/pt-BR/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/pt-BR/docs/Web/JavaScript/Reference","title":"Referência JavaScript"},{"uri":"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects","title":"Objetos Globais"},{"uri":"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/RegExp","title":"RegExp"}],"pageTitle":"RegExp - JavaScript | MDN","noIndexing":false}}