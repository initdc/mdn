{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Math.clz32()","mdn_url":"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32","locale":"pt-BR","native":"Português (do Brasil)","sidebarHTML":"<ol><li><strong><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects\">Standard built-in objects</a></strong></li><li><strong><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math\"><code>Math</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Propriedades</strong></a><ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/E\"><code>Math.E</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/LN10\"><code>Math.LN10</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/LN2\"><code>Math.LN2</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG10E\"><code>Math.LOG10E</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG2E\"><code>Math.LOG2E</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/PI\"><code>Math.PI</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT1_2\"><code>Math.SQRT1_2</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT2\"><code>Math.SQRT2</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>Métodos</strong></a><ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/abs\"><code>Math.abs()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/acos\"><code>Math.acos()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh\"><code>Math.acosh()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/asin\"><code>Math.asin()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh\"><code>Math.asinh()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/atan\"><code>Math.atan()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2\"><code>Math.atan2()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh\"><code>Math.atanh()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt\"><code>Math.cbrt()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\"><code>Math.ceil()</code></a></li><li><em><code>Math.clz32()</code></em></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\"><code>Math.cos()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh\"><code>Math.cosh()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/exp\"><code>Math.exp()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1\"><code>Math.expm1()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\"><code>Math.floor()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround\"><code>Math.fround()</code> <small>(en-US)</small></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot\"><code>Math.hypot()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\"><code>Math.imul()</code> <small>(en-US)</small></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/log\"><code>Math.log()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/log10\"><code>Math.log10()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p\"><code>Math.log1p()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/log2\"><code>Math.log2()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/max\"><code>Math.max()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/min\"><code>Math.min()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/pow\"><code>Math.pow()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/random\"><code>Math.random()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/round\"><code>Math.round()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\"><code>Math.sign()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/sin\"><code>Math.sin()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh\"><code>Math.sinh()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt\"><code>Math.sqrt()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/tan\"><code>Math.tan()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh\"><code>Math.tanh()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc\"><code>Math.trunc()</code></a></li></ol></li><li><strong>Herança:</strong></li><li><strong><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Propriedades</strong></a><ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Métodos</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>A função Math.clz32 () retorna o número de zero bit inicial na representação binária de 32 bits de um número.</p><iframe class=\"interactive\" height=\"490\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/math-clz32.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"sintaxe","title":"Sintaxe","isH3":false,"content":"<pre class=\"notranslate\">Math.clz32(x)\n</pre>"}},{"type":"prose","value":{"id":"parâmetros","title":"Parâmetros","isH3":true,"content":"<dl>\n  <dt id=\"x\"><em>x</em></dt>\n  <dd>\n    <p>Um número.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"valor_de_retorno","title":"Valor de retorno","isH3":true,"content":"<p>O número de zero bits à esquerda na representação binária de 32 bits do número fornecido.</p>"}},{"type":"prose","value":{"id":"descrição","title":"Descrição","isH3":false,"content":"<p>\"<code>clz32</code>\" é short para<code>CountLeadingZeroes32</code>.</p>\n<p>Se x não for um número, ele será convertido em um número primeiro e depois convertido em um número inteiro não assinado de 32 bits.</p>\n<p>Se o número inteiro não assinado de 32 bits convertido for 0, retorne 32, porque todos os bits são 0.</p>\n<p>Essa função é particularmente útil para sistemas que são compilados para JS, como o Emscripten.</p>"}},{"type":"prose","value":{"id":"exemplos","title":"Exemplos","isH3":false,"content":""}},{"type":"prose","value":{"id":"usando_math.clz32","title":"Usando <code>Math.clz32()</code>","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Math<span class=\"token punctuation\">.</span><span class=\"token function\">clz32</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 31</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">clz32</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 22</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">clz32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 32</span>\n\n<span class=\"token keyword\">var</span> stuff <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nstuff<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=&gt;</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">clz32</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true</span>\n\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">clz32</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 31</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">clz32</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 30</span>\n</code></pre></div>","titleAsText":"Usando Math.clz32()"}},{"type":"prose","value":{"id":"contagem_dos_principais_e_mais_além","title":"Contagem dos principais e mais além","isH3":false,"content":"<p>No momento, não há Math.clon para \"Count Leading Ones\" (chamado \"clon\", não \"clo\", porque \"clo\" e \"clz\" são muito semelhantes, especialmente para pessoas que não falam inglês). No entanto, uma função clon pode ser criada facilmente, invertendo os bits de um número e passando o resultado para Math.clz32. Fazer isso funcionará porque o inverso de 1 é 0 e vice-versa. Assim, a inversão dos bits inverterá a quantidade medida de 0s (de Math.clz32), fazendo com que Math.clz32 conte o número de unidades em vez de contar o número de zeros.</p>\n<p>Considere a seguinte palavra de 32 bits:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">32776</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 00000000000000001000000000001000 (16 zeros à esquerda)</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">clz32</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 16</span>\n\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token operator\">~</span><span class=\"token number\">32776</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 11111111111111110111111111110111 (32776 inverso, 0 zeros à esquerda)</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">clz32</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 0 (isso é igual a quantos líderes existem em um)</span>\n</code></pre></div>\n<p>Usando essa lógica, uma função clon pode ser criada da seguinte maneira:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> clz <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span>clz32<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">clon</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">integer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">clz</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Além disso, essa técnica pode ser estendida para criar funções inumeráveis \"Contagem de zeros à direita\" e funções de contagem de zeros, como mostrado abaixo. A função ctrz abaixo preenche todos os bits altos com o bit mais baixo preenchido e depois os anula para apagar todos os bits mais altos definidos, de modo que o clz possa ser usado.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> clz <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span>clz32<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ctrz</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">integer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// contar zeros à direita</span>\n   <span class=\"token comment\">// 1. preencha todos os bits mais altos após o primeiro</span>\n    integer <span class=\"token operator\">|=</span> integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n    integer <span class=\"token operator\">|=</span> integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n    integer <span class=\"token operator\">|=</span> integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    integer <span class=\"token operator\">|=</span> integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    integer <span class=\"token operator\">|=</span> integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2. Agora, a inversão dos bits revela os bits mais baixos</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">32</span> <span class=\"token operator\">-</span> <span class=\"token function\">clz</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>integer<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// `|0`garante coerção inteira</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ctron</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">integer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// conta os que estão à direita</span>\n     <span class=\"token comment\">// Nenhum operador shift-fill-in-with-ones está disponível em</span>\n     <span class=\"token comment\">// JavaScript, portanto, o código abaixo é o mais rápido</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ctrz</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">/</span> <span class=\"token operator\">*</span> Implementação alternativa para fins demonstrativos<span class=\"token operator\">:</span>\n        <span class=\"token comment\">// 1. apaga todos os bits mais altos após o primeiro zero</span>\n       integer <span class=\"token operator\">&amp;=</span> <span class=\"token punctuation\">(</span>integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">;</span>\n       integer <span class=\"token operator\">&amp;=</span> <span class=\"token punctuation\">(</span>integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x00ff</span><span class=\"token punctuation\">;</span>\n       integer <span class=\"token operator\">&amp;=</span> <span class=\"token punctuation\">(</span>integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x000f</span><span class=\"token punctuation\">;</span>\n       integer <span class=\"token operator\">&amp;=</span> <span class=\"token punctuation\">(</span>integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x0003</span><span class=\"token punctuation\">;</span>\n       integer <span class=\"token operator\">&amp;=</span> <span class=\"token punctuation\">(</span>integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x0001</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 2. Agora, reverter os bits revela os zeros mais baixos</span>\n       <span class=\"token keyword\">return</span> <span class=\"token number\">32</span> <span class=\"token operator\">-</span> <span class=\"token function\">clon</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>integer<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Transforme essas funções auxiliares no módulo ASM.JS; então, você tem uma verdadeira obra-prima de desempenho. Situações como essas são exatamente para o que o ASM.JS foi projetado.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> countTrailsMethods <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stdlib<span class=\"token punctuation\">,</span> foreign<span class=\"token punctuation\">,</span> heap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"use asm\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> clz <span class=\"token operator\">=</span> stdlib<span class=\"token punctuation\">.</span>Math<span class=\"token punctuation\">.</span>clz32<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">ctrz</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">integer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// count trailing zeros</span>\n        integer <span class=\"token operator\">=</span> integer <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// coerce to an integer</span>\n<span class=\"token comment\">// 1. preencha todos os bits mais altos após o primeiro</span>\n<span class=\"token comment\">// ASM js, por algum motivo, não permite ^ =, &amp; = ou | =</span>\n        integer <span class=\"token operator\">=</span> integer <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        integer <span class=\"token operator\">=</span> integer <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        integer <span class=\"token operator\">=</span> integer <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        integer <span class=\"token operator\">=</span> integer <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        integer <span class=\"token operator\">=</span> integer <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>integer <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 2. Agora, a inversão dos bits revela os bits mais baixos</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">32</span> <span class=\"token operator\">-</span> <span class=\"token function\">clz</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>integer<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">ctron</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">integer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//contar os últimos</span>\n        integer <span class=\"token operator\">=</span> integer <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// coagir a um número inteiro</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">ctrz</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>integer<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// infelizmente, o ASM.JS exige objetos compactos lentos:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> ctrz<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> ctron<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctrz <span class=\"token operator\">=</span> countTrailsMethods<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ctron <span class=\"token operator\">=</span> countTrailsMethods<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"polyfill-trecho_de_código","title":"Polyfill-\"Trecho de código\"","isH3":false,"content":"<p>O seguinte polyfill é o mais eficiente.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Math<span class=\"token punctuation\">.</span>clz32<span class=\"token punctuation\">)</span> Math<span class=\"token punctuation\">.</span>clz32 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">log<span class=\"token punctuation\">,</span> <span class=\"token constant\">LN2</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// Seja n ToUint32 (x).</span>\n     <span class=\"token comment\">// Seja p o número de zero bits iniciais em</span>\n     <span class=\"token comment\">// a representação binária de 32 bits de n.</span>\n     <span class=\"token comment\">// Retornar p.</span>\n    <span class=\"token keyword\">var</span> asUint <span class=\"token operator\">=</span> x <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>asUint <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">31</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>asUint<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token constant\">LN2</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// the \"| 0\" acts like math.floor</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">LN2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"especificações","title":"Especificações","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>Especificação</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://tc39.es/ecma262/#sec-math.clz32\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">ECMAScript (ECMA-262)<br><small lang=\"pt-BR\">The definition of 'Math.clz32' in that specification.</small></a></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"Compatibilidade com navegadores","id":"compatibilidade_com_navegadores","isH3":false,"query":"javascript.builtins.Math.clz32","dataURL":"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32/bcd.json"}},{"type":"prose","value":{"id":"veja_também","title":"Veja também","isH3":false,"content":"<ul>\n  <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math\"><code>Math</code></a></li>\n  <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\"><code>Math.imul</code> <small>(en-US)</small></a></li>\n</ul>"}}],"toc":[{"text":"Sintaxe","id":"sintaxe"},{"text":"Descrição","id":"descrição"},{"text":"Exemplos","id":"exemplos"},{"text":"Contagem dos principais e mais além","id":"contagem_dos_principais_e_mais_além"},{"text":"Polyfill-\"Trecho de código\"","id":"polyfill-trecho_de_código"},{"text":"Especificações","id":"especificações"},{"text":"Compatibilidade com navegadores","id":"compatibilidade_com_navegadores"},{"text":"Veja também","id":"veja_também"}],"summary":"A função Math.clz32 () retorna o número de zero bit inicial na representação binária de 32 bits de um número.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Math.clz32()","locale":"en-US","native":"English (US)"},{"title":"Math.clz32()","locale":"fr","native":"Français"},{"title":"Math.clz32()","locale":"ja","native":"日本語"},{"title":"Math.clz32()","locale":"ru","native":"Русский"},{"title":"Math.clz32()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"pt-br/web/javascript/reference/global_objects/math/clz32","github_url":"https://github.com/mdn/translated-content/blob/main/files/pt-br/web/javascript/reference/global_objects/math/clz32/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/pt-BR/docs/Web","title":"Tecnologia Web para desenvolvedores"},{"uri":"/pt-BR/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/pt-BR/docs/Web/JavaScript/Reference","title":"Referência JavaScript"},{"uri":"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects","title":"Objetos Globais"},{"uri":"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math","title":"Math"},{"uri":"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32","title":"Math.clz32()"}],"pageTitle":"Math.clz32() - JavaScript | MDN","noIndexing":false}}