{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Funções","mdn_url":"/pt-BR/docs/Web/JavaScript/Guide/Functions","locale":"pt-BR","native":"Português (do Brasil)","sidebarHTML":"\n <ol>\n  <li><a href=\"/pt-BR/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/pt-BR/docs/Web/JavaScript/Tutorials\"><strong>Tutoriais:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Completos iniciantes</summary>\n      <ol>\n        <li><a href=\"/pt-BR/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">O básico de JavaScript</a></li>\n        <li><a href=\"/pt-BR/docs/Learn/JavaScript/First_steps\">Primeiros passos com JavaScript</a></li>\n        <li><a href=\"/pt-BR/docs/Learn/JavaScript/Building_blocks\">Blocos de construção de JavaScript</a></li>\n        <li><a href=\"/pt-BR/docs/Learn/JavaScript/Objects\">Introdução a objetos JavaScript</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Guia de JavaScript</summary>\n      <ol>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Introduction\">Introdução</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Grammar_and_Types\">Gramática e tipos</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Controle de fluxo e tratamento de erros</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Loops_and_iteration\">Repetição e iteração</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Functions\">Funções</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressões e operadores</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Numbers_and_dates\">Números e datas</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Text_formatting\">Formatação de texto</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Regular_Expressions\">Expressões Regulares</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Indexed_collections\">Coleções indexadas</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Keyed_collections\">Coleções com chave (chave-valor)</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Working_with_Objects\">Trabalhando com objetos</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Detalhes do modelo de objetos</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Using_promises\">Usando \"promises\"</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Iterators_and_generators\">Iteradores e geradores</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Meta_programming\">Metaprogramação</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Intermediário</summary>\n      <ol>\n        <li><a href=\"/pt-BR/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/pt-BR/docs/Learn/JavaScript/Client-side_web_APIs\">APIs Web para aplicações Cliente</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">Uma reintrodução a JavaScript</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Data_structures\">Estruturas de dados de JavaScript</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Comparadores de igualdade e semelhança</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Closures\">Closures</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Avançado</summary>\n      <ol>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Herança e a cadeia de \"prototype\"</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode - Modo estrito</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Typed_arrays\">Arranjos tipados em JavaScript</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Memory_Management\">Gerenciamento de memória</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/EventLoop\">Modelo de concorrência e Loop de Eventos</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/pt-BR/docs/Web/JavaScript/Reference\">Referências:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Objetos pré-definidos</summary>\n        <ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Expressões e operadores</summary>\n      <ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Afirmações e declarações</summary>\n      <ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Funções</summary>\n      <ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Erros</summary>\n      <ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Mais conteúdo</summary>\n      <ol>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/JavaScript_technologies_overview\">Visão geral das Tecnologias JavaScript</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Lexical_grammar\">Gramática léxica</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Data_structures\">Estruturas de dados de JavaScript</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Enumerabilidade e domínio de propriedades</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Iteration_protocols\">Protocolos de iteração</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode - Modo estrito</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Migrando para o \"strict mode\"</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Template_literals\">Template literals</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Funcionalidades depreciadas</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/pt-BR/docs/Web/JavaScript/Guide/Loops_and_iteration\">« Previous</a></li>\n    <li><a class=\"button minimal\" href=\"/pt-BR/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Next  »</a></li>\n</ul>\n<p>Funções são blocos de construção fundamentais em JavaScript. Uma função é um procedimento de JavaScript - um conjunto de instruções que executa uma tarefa ou calcula um valor. Para usar uma função, você deve defini-la em algum lugar no escopo do qual você quiser chamá-la.</p>\n<p>Veja também o capítulo de <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions\">referência sobre funções JavaScript</a> para conhecer os detalhes.</p>"}},{"type":"prose","value":{"id":"definindo_funções","title":"Definindo Funções","isH3":false,"content":""}},{"type":"prose","value":{"id":"declarando_uma_função","title":"Declarando uma função","isH3":true,"content":"<p>A <strong>definição da função</strong> (também chamada de <strong>declaração de função</strong>) consiste no uso da palavra chave <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/function\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">function (en-US)</a>, seguida por:</p>\n<ul>\n  <li>Nome da Função.</li>\n  <li>Lista de argumentos para a função, entre parênteses e separados por vírgulas.</li>\n  <li>Declarações JavaScript que definem a função, entre chaves <code>{ }</code>.</li>\n</ul>\n<p>Por exemplo, o código a seguir define uma função simples chamada <code>square</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numero</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> numero <span class=\"token operator\">*</span> numero<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>A função <code>square</code> recebe um argumento chamado <code>numero</code>. A função consiste em uma instrução que indica para retornar o argumento da função (isto é, <code>numero</code>) multiplicado por si mesmo. A declaração <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/return\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">return (en-US)</a> especifica o valor retornado pela função.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">return</span> numero <span class=\"token operator\">*</span> numero<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Parâmetros primitivos (como um número) são passados para as funções por <strong>valor</strong>; o valor é passado para a função, mas se a função altera o valor do parâmetro, esta mudança não reflete globalmente ou na função chamada.</p>\n<p>Se você passar um objeto (ou seja, um <a href=\"/en-US/docs/Glossary\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">valor não primitivo (en-US)</a>, tal como <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> ou um objeto definido por você) como um parâmetro e a função alterar as propriedades do objeto, essa mudança é visível fora da função, conforme mostrado no exemplo a seguir:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">minhaFuncao</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">objeto</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  objeto<span class=\"token punctuation\">.</span>make <span class=\"token operator\">=</span> <span class=\"token string\">\"Toyota\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> meucarro <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">make</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Honda\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Accord\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token number\">1998</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span>\n\nx <span class=\"token operator\">=</span> meucarro<span class=\"token punctuation\">.</span>make<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// x recebe o valor \"Honda\"</span>\n\n<span class=\"token function\">minhaFuncao</span><span class=\"token punctuation\">(</span>meucarro<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ny <span class=\"token operator\">=</span> meucarro<span class=\"token punctuation\">.</span>make<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// y recebe o valor \"Toyota\"</span>\n                    <span class=\"token comment\">// (a propriedade make foi alterada pela função)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"expressão_de_função","title":"Expressão de função","isH3":true,"content":"<p>Embora a declaração de função acima seja sintaticamente uma declaração, funções também podem ser criadas por uma <strong>expressão de função</strong>. Tal função pode ser <strong>anônima</strong>; ele não tem que ter um nome. Por exemplo, a função <code>square</code> poderia ter sido definida como:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">square</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numero</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> numero <span class=\"token operator\">*</span> numero<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//x recebe o valor 16</span>\n</code></pre></div>\n<p>No entanto, um nome pode ser fornecido com uma expressão de função e pode ser utilizado no interior da função para se referir a si mesma, ou em um debugger para identificar a função em stack traces:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fatorial</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fac</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> n<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> n<span class=\"token operator\">*</span><span class=\"token function\">fac</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fatorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>As expressões de função são convenientes ao passar uma função como um argumento para outra função. O exemplo a seguir mostra uma função <code>map</code> sendo definida e, em seguida, chamada com uma função anônima como seu primeiro parâmetro:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span>a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Cria um novo Array</span>\n  <span class=\"token keyword\">var</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>O código a seguir:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>retorna [0, 1, 8, 125, 1000].</p>\n<p>Em JavaScript, uma função pode ser definida com base numa condição. Por exemplo, a seguinte definição de função define <code>minhaFuncao</code> somente se <code>num</code> é igual a 0:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> minhaFuncao<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">minhaFuncao</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">objeto</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    objeto<span class=\"token punctuation\">.</span>make <span class=\"token operator\">=</span> <span class=\"token string\">\"Toyota\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Além de definir funções, você também pode usar o construtor <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> para criar funções a partir de uma string em tempo real, como no método <a class=\"page-not-created\" title=\"A documentação sobre isto ainda não foi escrita; por favor considere contribuir!\"><code>eval()</code></a>.</p>\n<p>Um <strong>método</strong> é uma função invocada por um objeto. Leia mais sobre objetos e métodos em <a href=\"/en-US/docs/Web/JavaScript/Guide/Working_with_Objects\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Trabalhando com Objetos (en-US)</a>.</p>"}},{"type":"prose","value":{"id":"chamando_funções","title":"Chamando funções","isH3":false,"content":"<p>A definição de uma função não a executa. Definir a função é simplesmente nomear a função e especificar o que fazer quando a função é chamada. Chamar a função executa realmente as ações especificadas com os parâmetros indicados. Por exemplo, se você definir a função <code>square</code>, você pode chamá-la do seguinte modo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>A declaração anterior chama a função com o argumento 5. A função executa as instruções e retorna o valor 25.</p>\n<p>Funções devem estar no escopo quando são chamadas, mas a declaração de uma função pode ser puxada para o topo (aparecem abaixo da chamada no código), como neste exemplo:</p>\n<pre class=\"notranslate\">console.log(square(5));\n/* ... */\nfunction square(n){return n*n}\n</pre>\n<p>O escopo de uma função é a função na qual ela é declarada, ou todo o programa se ela é declarada no nível superior.</p>\n<blockquote>\n  <p><strong>Nota:</strong> Nota: Isso funciona apenas quando a definição da função usa a sintaxe acima (ex., <code>function funcNome(){ })</code>. O código a seguir não vai funcionar.</p>\n</blockquote>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">square</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Os argumentos de uma função não estão limitados a strings e números. Você pode passar objetos para uma função. A função <code>show_props</code> (definido em <a href=\"/pt-BR/docs/Web/JavaScript/Guide/Working_with_Objects#objects_and_properties\">Trabalhando com Objetos</a>) é um exemplo de uma função que recebe um objeto como um argumento.</p>\n<p>Um função pode chamar a si mesma. Por exemplo, a função que calcula os fatoriais recursivamente:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">fatorial</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token function\">fatorial</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Você poderia, então, calcular os fatoriais de um a cinco:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> <span class=\"token function\">fatorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a recebe o valor 1</span>\nb <span class=\"token operator\">=</span> <span class=\"token function\">fatorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// b recebe o valor 2</span>\nc <span class=\"token operator\">=</span> <span class=\"token function\">fatorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// c recebe o valor 6</span>\nd <span class=\"token operator\">=</span> <span class=\"token function\">fatorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// d recebe o valor 24</span>\ne <span class=\"token operator\">=</span> <span class=\"token function\">fatorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// e recebe o valor 120</span>\n</code></pre></div>\n<p>Há outras maneiras de chamar funções. Muitas vezes há casos em que uma função precisa ser chamada dinamicamente, ou o número de argumentos de uma função varia, ou em que o contexto da chamada de função precisa ser definido para um objeto específico determinado em tempo de execução. Acontece que as funções são, por si mesmas, objetos, e esses objetos por sua vez têm métodos (veja objeto <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a>). Um desses, o método <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>apply()</code></a>, pode ser usado para atingir esse objetivo.</p>"}},{"type":"prose","value":{"id":"escopo_da_função","title":"Escopo da função","isH3":false,"content":"<p>As variáveis definidas no interior de uma função não podem ser acessadas de nenhum lugar fora da função, porque a variável está definida apenas no escopo da função. No entanto, uma função pode acessar todas variáveis e funções definida fora do escopo onde ela está definida. Em outras palavras, a função definida no escopo global pode acessar todas as variáveis definidas no escopo global. A função definida dentro de outra função também pode acessar todas as variáveis definidas na função hospedeira e outras variáveis ao qual a função hospedeira tem acesso.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// As seguintes variáveis são definidas no escopo global</span>\n<span class=\"token keyword\">var</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n    num2 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    nome <span class=\"token operator\">=</span> <span class=\"token string\">\"Chamahk\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Esta função é definida no escopo global</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">multiplica</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">*</span> num2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">multiplica</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Retorna 60</span>\n\n<span class=\"token comment\">// Um exemplo de função aninhada</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getScore</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      num2 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> nome <span class=\"token operator\">+</span> <span class=\"token string\">\" scored \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Retorna \"Chamahk scored 5\"</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"escopo_e_a_pilha_de_função","title":"Escopo e a pilha de função","isH3":false,"content":""}},{"type":"prose","value":{"id":"recursão","title":"Recursão","isH3":true,"content":"<p>Uma função pode referir-se e chamar a si própria. Há três maneiras de uma função referir-se a si mesma:</p>\n<ol>\n  <li>o nome da função</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">arguments.callee (en-US)</a></li>\n  <li>uma variável no escopo que se refere a função</li>\n</ol>\n<p>Por exemplo, considere a seguinte definição de função:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// declaracoes</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Dentro do corpo da função, todos, a seguir, são equivalentes:</p>\n<ol>\n  <li><code>bar()</code></li>\n  <li><code>arguments.callee()</code></li>\n  <li><code>foo()</code></li>\n</ol>\n<p>Uma função que chama a si mesma é chamada de função recursiva. Em alguns casos, a recursividade é análoga a um laço. Ambos executam o código várias vezes, e ambos necessitam de uma condição (para evitar um laço infinito, ou melhor, recursão infinita, neste caso). Por exemplo, o seguinte laço:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// \"x &lt; 10\" a condição do laço</span>\n   <span class=\"token comment\">// faça coisas</span>\n   x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>pode ser convertido em função recursiva e uma chamada para a função:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"x &gt;= 10\" a condição de parada (equivalente a \"!(x &lt; 10)\")</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// faça coisas</span>\n   <span class=\"token function\">loop</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// chamada recursiva</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>No entanto, alguns algoritmos não podem ser simples laços iterativos. Por exemplo, conseguir todos os nós da estrutura de uma árvore (por exemplo, o <a href=\"/pt-BR/docs/Web/API/Document_Object_Model\">DOM</a>) é mais fácil se feito recursivamente:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">walkTree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// faça algo com o nó</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> node<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">walkTree</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Em comparação ao laço da função, cada chamada recursiva realiza outras chamadas recursivas.</p>\n<p>É possível converter qualquer algoritmo recursivo para um não recursivo, mas muitas vezes a lógica é muito mais complexa e exige o uso de pilhas. Na verdade a própria recursão usa pilha: a pilha de função.</p>\n<p>O comportamento da pilha pode ser vista a seguir no exemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n   document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token string\">'begin:'</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end:'</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>que produz:</p>\n<pre class=\"notranslate\">begin:3\nbegin:2\nbegin:1\nbegin:0\nend:0\nend:1\nend:2\nend:3\n</pre>"}},{"type":"prose","value":{"id":"funções_aninhadas_e_closures","title":"Funções aninhadas e closures","isH3":true,"content":"<p>Você pode aninhar uma função dentro de outra. A função aninhada (interna) é acessível apenas para a função que a contém (exterior). Isso constitui também uma <em><code>closure</code></em>. Uma closure é uma expressão (tipicamente uma função) que pode ter variáveis livres em conjunto com um ambiente que conecta estas variáveis (que \"fecha\" a expressão).</p>\n<p>Uma vez que uma função aninhada é uma closure, isto significa que uma função aninhada pode \"herdar\" os argumentos e variáveis de sua função de contenção. Em outras palavras, a função interior contém o escopo da função exterior.</p>\n<p>Em resumo:</p>\n<ul>\n  <li>A função interna só pode ser acessada a partir de declarações em função externa.</li>\n  <li>A função interna forma uma closure: a função interna pode usar os argumentos e variáveis da função externa, enquanto a função externa não pode usar os argumentos e variáveis da função interna.</li>\n</ul>\n<p>O exemplo a seguir mostra as funções aninhadas:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">addSquares</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\na <span class=\"token operator\">=</span> <span class=\"token function\">addSquares</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna 13</span>\nb <span class=\"token operator\">=</span> <span class=\"token function\">addSquares</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna 25</span>\nc <span class=\"token operator\">=</span> <span class=\"token function\">addSquares</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna 41</span>\n</code></pre></div>\n<p>Uma vez que a função interna forma uma <em>closure</em>, você pode chamar a função externa e especificar argumentos para a função externa e interna:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">fora</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">dentro</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> dentro<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nfn_inside <span class=\"token operator\">=</span> <span class=\"token function\">fora</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Pense nisso como: Receba uma função que adicionará 3 ao que quer que você repasse para ela</span>\nresult <span class=\"token operator\">=</span> <span class=\"token function\">fn_inside</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna 8</span>\n\nresult1 <span class=\"token operator\">=</span> <span class=\"token function\">fora</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna 8</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"preservação_de_variáveis","title":"Preservação de variáveis","isH3":true,"content":"<p>Observe como <code>x</code> é preservado quando <code>dentro</code> é retornado. Uma <em>closure</em> deve preservar os argumentos e variáveis em todos os escopos que ela referencia. Uma vez que cada chamada fornece potencialmente argumentos diferentes, uma nova closure é criada para cada chamada de <code>fora</code>. A memória só poderá ser liberada quando o <code>dentro</code> retornado já não é mais acessível.</p>\n<p>Isso não é diferente de armazenar referências em outros objetos, mas muitas vezes é menos óbvio, porque um não define diretamente as referências e não pode inspecioná-las.</p>"}},{"type":"prose","value":{"id":"múltiplas_funções_aninhadas","title":"Múltiplas funções aninhadas","isH3":true,"content":"<p>Funções podem ter múltiplo aninhamento, por exemplo, a função (A) contém a função (B) que contém a função (C). Tanto as funções B e C formam uma <em>closure</em>, então B pode acessar A, e C pode acessar B. Além disso, uma vez que C pode acessar B que pode acessar A, C também pode acessar A. Assim, a <em>closure</em> pode conter vários escopos; eles recursivamente contém o escopo das funções que os contém. Isso é chamado <em><code>encadeamento de escopo</code></em>. (O motivo de ser chamado \"encadeamento\" será explicado mais tarde).</p>\n<p>Considere o seguinte exemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">function</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">function</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">z</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token constant\">B</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Exibe um alerta com o valor 6 (1 + 2 + 3)</span>\n</code></pre></div>\n<p>Neste exemplo, <code>C</code> acessa <code>y</code> do <code>B</code> e <code>x</code> do <code>A</code>. Isso pode ser feito porque:</p>\n<ol>\n  <li>B forma uma <em>closure</em> incluindo <code>A</code>, isto é, <code>B</code> pode acessar argumentos e variáveis de <code>A</code>.</li>\n  <li>C forma uma <em>closure</em> incluindo <code>B</code>.</li>\n  <li>Devido a closure <code>B</code> inclui <code>A</code>, a <em>closure</em> <code>C</code> inclui <code>A</code>, <code>C</code> pode acessar tanto argumentos e variáveis de <code>B</code> como de <code>A</code>. Em outras palavras, <code>C</code> <em>encadeia</em> o escopo de <code>B</code> e <code>A</code>, nesta ordem.</li>\n</ol>\n<p>O inverso, no entanto, não é verdadeiro. <code>A</code> não pode acessar <code>C</code>, porque <code>A</code> não pode acessar qualquer argumento ou variável de <code>B</code>. Assim, <code>C</code> é privado somente a <code>B</code>.</p>"}},{"type":"prose","value":{"id":"conflitos_de_nome","title":"Conflitos de nome","isH3":true,"content":"<p>Quando dois argumentos ou variáveis nos escopos da <em>closure</em> tem o mesmo nome, há um <em>conflito de nome</em>. Mas escopos internos tem prioridade, por isso o escopo mais interno tem a maior prioridade, enquanto que o escopo mais externo tem a menor. Esta é a cadeia de escopo. O primeiro da cadeia é o escopo mais interno, e o último é o escopo mais externo. Considere o seguinte:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">fora</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">dentro</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> dentro<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nresult <span class=\"token operator\">=</span> <span class=\"token function\">fora</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna 20 em vez de 10</span>\n</code></pre></div>\n<p>O conflito de nome acontece na declaração <code>return x</code> e está entre o parâmetro <code>x</code> de <code>dentro</code> e a variável <code>x</code> de <code>fora</code>. A cadeia de escopo aqui é {<code>dentro</code>, <code>fora</code>, objeto global}. Por isso o <code>x</code> de <code>dentro</code> tem precedência sobre o <code>x</code> de <code>fora</code>, e 20 (<code>x</code> de <code>dentro</code>) é retornado em vez de 10 (<code>x</code> de fora).</p>"}},{"type":"prose","value":{"id":"closures","title":"Closures","isH3":false,"content":"<p><em>Closures</em> são um dos recursos mais poderosos de JavaScript. JavaScript permite o aninhamento de funções e garante acesso completo à função interna a todas as variáveis e funções definidas dentro da função externa (e todas as outras variáveis e funções que a função externa tem acesso). No entanto, a função externa não tem acesso às variáveis e funções definidas dentro da função interna. Isto proporciona uma espécie de segurança para as variáveis da função interna. Além disso, uma vez que a função interna tem acesso ao escopo da função externa, as variáveis e funções definidas na função externa vão durar na memória mais do que a própria função externa, isto se a função interna permanecer na memória mais tempo do que a função externa. Uma <em>closure</em> é criada quando a função interna é de alguma forma disponibilizada para qualquer escopo fora da função externa.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">pet</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nome</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>          <span class=\"token comment\">// A função externa define uma variável \"nome\"</span>\n      <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getNome</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> nome<span class=\"token punctuation\">;</span>                <span class=\"token comment\">// A função interna tem acesso à variável \"nome\"  da função externa</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">return</span> getNome<span class=\"token punctuation\">;</span>               <span class=\"token comment\">// Retorna a função interna, expondo-a assim para escopos externos</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    myPet <span class=\"token operator\">=</span> <span class=\"token function\">pet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Vivie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">myPet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                            <span class=\"token comment\">// Retorna \"Vivie\"</span>\n</code></pre></div>\n<p>Ela pode ser mais complexa que o código acima. Um objeto contendo métodos para manipular as variáveis da função externa pode ser devolvida.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">criarPet</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nome</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> sex<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">setNome</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newNome</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nome <span class=\"token operator\">=</span> newNome<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function-variable function\">getNome</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> nome<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function-variable function\">getSex</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> sex<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function-variable function\">setSex</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newSex</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> newSex <span class=\"token operator\">==</span> <span class=\"token string\">\"string\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>newSex<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"macho\"</span> <span class=\"token operator\">||</span> newSex<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"fêmea\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sex <span class=\"token operator\">=</span> newSex<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> pet <span class=\"token operator\">=</span> <span class=\"token function\">criarPet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Vivie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npet<span class=\"token punctuation\">.</span><span class=\"token function\">getNome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// Vivie</span>\n\npet<span class=\"token punctuation\">.</span><span class=\"token function\">setNome</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Oliver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npet<span class=\"token punctuation\">.</span><span class=\"token function\">setSex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"macho\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npet<span class=\"token punctuation\">.</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// macho</span>\npet<span class=\"token punctuation\">.</span><span class=\"token function\">getNome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// Oliver</span>\n</code></pre></div>\n<p>Nos códigos acima, a variável <code>nome</code> da função externa é acessível para as funções internas, e não há nenhuma outra maneira para acessar as variáveis internas, exceto pelas funções internas. As variáveis internas da função interna atuam como armazenamento seguro para as funções internas. Elas armazenam \"persistentes\", mas seguros, os dados com os quais as funções internas irão trabalhar. As funções não tem que ser atribuídas a uma variável, ou ter um nome.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> getCode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> secureCode <span class=\"token operator\">=</span> <span class=\"token string\">\"0]Eal(eh&amp;2\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Um código que não queremos que pessoas de fora sejam capazes de modificar</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> secureCode<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Retorna o secureCode</span>\n</code></pre></div>\n<p>Há, no entanto, uma série de armadilhas que se deve ter cuidado ao usar closures. Se uma função fechada define uma variável com o mesmo nome de uma variável em um escopo externo, não há nenhuma maneira de se referir para a variável em um escopo externo novamente.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">createPet</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nome</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// Função externa define uma variável chamada \"nome\"</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">setNome</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nome</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token comment\">// Função fechada define uma variável chamada \"nome\"</span>\n      nome <span class=\"token operator\">=</span> nome<span class=\"token punctuation\">;</span>               <span class=\"token comment\">// ??? Como podemos acessar o \"nome\" definido pela função externa ???</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>A palavra reservada <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/this\">this</a> é muito complicada em <em>closures,</em> elas têm de ser usadas com muito cuidado. O objeto ao que <code>this</code> se refere depende completamente de onde a função foi chamada, ao invés de onde ela foi definida.</p>"}},{"type":"prose","value":{"id":"usando_objeto_de_argumentos","title":"Usando objeto de argumentos","isH3":false,"content":"<p>Os argumentos de uma função são mantidos em um objeto do tipo array. Dentro de uma função, você pode endereçar os argumentos passados para ele conforme:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>onde <code>i</code> é um número ordinal do argumento, começando com zero. Então, o primeiro argumento passado para a função seria <code>arguments[0]</code>. O número total de argumentos é indicado por <code>arguments.length</code>.</p>\n<p>Usando o objeto <code>arguments</code>, você pode chamar a função com mais argumentos do que o formalmente declarado. Isso muitas vezes é útil se você não sabe de antemão quantos argumentos serão passados para a função. Você pode usar <code>arguments.length</code> para determinar a quantidade de argumentos passados para a função, e então acessar cada argumento usando o objeto <code>arguments</code>.</p>\n<p>Por exemplo, considere uma função que concatena várias <em>strings</em>. O argumento formal para a função é uma <em>string</em> que especifica os caracteres que separam os itens para concatenar. A função definida como segue:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">myConcat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">separador</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// inicializa a lista</span>\n       i<span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// itera por meio de argumentos</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result <span class=\"token operator\">+=</span> arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> separador<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Você pode passar qualquer quantidade de argumentos para esta função, e ela concatena cada argumento na <em>string</em> \"list\":</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// retorna \"red, orange, blue, \"</span>\n<span class=\"token function\">myConcat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// retorna \"elephant; giraffe; lion; cheetah; \"</span>\n<span class=\"token function\">myConcat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"; \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"elephant\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"giraffe\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lion\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cheetah\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// retorna \"sage. basil. oregano. pepper. parsley. \"</span>\n<span class=\"token function\">myConcat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\". \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sage\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"basil\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"oregano\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pepper\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"parsley\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<blockquote>\n  <p><strong>Nota:</strong> Nota: A variável <code>arguments</code> é \"como um array\", mas não é um array. Ela é como um array pois possui um índice numerado e a propriedade <code>length</code>. No entanto, não possui todos os métodos de manipulação de array.</p>\n</blockquote>\n<p>Veja objeto <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> na referência do JavaScript para maiores informações.</p>"}},{"type":"prose","value":{"id":"parâmetros_de_função","title":"Parâmetros de função","isH3":false,"content":"<p>Começando com ECMAScript 6, há dois tipos novos de parâmetros: parâmetros padrão e parâmetros rest.</p>"}},{"type":"prose","value":{"id":"parâmetros_padrão","title":"Parâmetros padrão","isH3":true,"content":"<p>Em JavaScript, parâmetros padrões de funções são <code>undefined</code>. No entanto, em algumas situações pode ser útil definir um valor padrão diferente. Isto é onde os parâmetros padrão podem ajudar.</p>\n<p>No passado, a estratégia geral para definir padrões era testar os valores de parâmetro no corpo da função e atribuir um valor se eles fossem <code>undefined</code>. Se, no exemplo a seguir, nenhum valor é fornecido para <code>b</code> na chamada, seu valor seria <code>undefined</code> ao avaliar <code>a*b</code> e a chamada para <code>multiplicar</code> retornaria <code>NaN</code>. No entanto, isso é pego com a segunda linha neste exemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">multiplicar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  b <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> b <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">?</span>  b <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> a<span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">multiplicar</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n</code></pre></div>\n<p>Com parâmetros padrão, a verificação no corpo da função não é mais necessária. Agora você pode simplesmente colocar <code>1</code> como valor padrão para <code>b</code> no campo de declaração de parâmetros:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">multiplicar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">multiplicar</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n</code></pre></div>\n<p>Mais detalhes, consulte <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/Default_parameters\">parâmetros padrão</a> na referência.</p>"}},{"type":"prose","value":{"id":"parâmetros_rest","title":"Parâmetros rest","isH3":true,"content":"<p>A sintaxe de <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/rest_parameters\">parâmetro rest</a> permite representar um número indefinido de argumentos como um <em>array</em>. No exemplo, usamos parâmetros <em>rest</em> para coletar argumentos do segundo argumento ao último. Então os multiplicamos pelo primeiro argumento. Neste exemplo é usado uma <em>arrow function</em>, que será introduzida na próxima seção.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">multiplicar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">multiplicador<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=&gt;</span> multiplicador <span class=\"token operator\">*</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token function\">multiplicar</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2, 4, 6]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"funções_de_seta","title":"Funções de seta","isH3":false,"content":"<p>Uma <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">expressão função de seta</a> (anteriormente conhecida como <strong>função de seta gorda</strong>) tem uma sintaxe pequena em comparação com a expressão de função e lexicalmente vincula o valor <code>this</code>. Funções de seta são sempre anônimas. Consulte também no blog hacks.mozilla.org no post: \"<a href=\"https://hacks.mozilla.org/2015/06/es6-in-depth-arrow-functions/\" class=\"external\" rel=\" noopener\">ES6 In Depth: Arrow functions</a>\".</p>\n<p>Dois fatores influenciaram a introdução de funções de seta: funções mais curtas e o léxico <code>this</code>.</p>"}},{"type":"prose","value":{"id":"funções_curtas","title":"Funções curtas","isH3":true,"content":"<p>Em alguns padrões funcionais, funções curtas são bem-vindas. Compare:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"Hydrogen\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Helium\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Lithium\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"Beryl­lium\"</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> a2 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> a3 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">s</span> <span class=\"token operator\">=&gt;</span> s<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"léxico_this","title":"Léxico this","isH3":true,"content":"<p>Até as funções de seta, cada nova função definia seu próprio valor <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/this\">this</a> (um novo objeto no caso de um construtor, indefinido em chamadas de função no modo estrito, o objeto de contexto se a função é chamada como um \"método de objeto\", etc.). Isso pode ser irritante com um estilo de programação orientada a objetos.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Pessoa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>      <span class=\"token comment\">// O construtor Pessoa() define 'this' como sendo ele.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>idade <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">crescer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    <span class=\"token comment\">// No modo não estrito, a função crescer define 'this'</span>\n            <span class=\"token comment\">// como o objeto global, o que é diferente do 'this'</span>\n            <span class=\"token comment\">// definido pelo construtor Pessoa().</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>idade<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pessoa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>No ECMAScript 3/5, este problema foi resolvido atribuindo o valor em <code>this</code> a uma variável que poderia ser fechada.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Pessoa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Alguns preferem 'that' em vez de 'self'.</span>\n                   <span class=\"token comment\">// Escolha um e seja consistente.</span>\n  self<span class=\"token punctuation\">.</span>idade <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">crescer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// A chamada de retorno refere-se à variável 'self' na qual</span>\n    <span class=\"token comment\">// o valor é o objeto esperado.</span>\n    self<span class=\"token punctuation\">.</span>idade<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Como alternativa, uma <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\">função vinculada</a> poderia ser criada para que o valor da propriedade <code>this</code> seja passado para a função <code>crescer()</code>.</p>\n<p>Funções de seta capturam o valor <code>this</code> do contexto delimitado, então o código a seguir funciona conforme o esperado.</p>\n<pre class=\"notranslate\">function Pessoa(){\n  this.idade = 0;\n\n  setInterval(() =&gt; {\n    this.idade++; // propriedade |this|refere ao objeto pessoa\n  }, 1000);\n}\n\nvar p = new Pessoa();\n</pre>"}},{"type":"prose","value":{"id":"funções_pré-definidas","title":"Funções pré-definidas","isH3":false,"content":"<p>JavaScript tem várias funções pré-definidas:</p>\n<dl>\n  <dt id=\"eval\"><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a></dt>\n  <dd>\n    <p>O método <strong><code>eval()</code></strong> avalia código JavaScript representado como uma <em>string</em>.</p>\n  </dd>\n  <dt id=\"uneval\"><a href=\"/pt-BR/docs/conflicting/Web/JavaScript/Reference/Global_Objects\"><code>uneval()</code></a> <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg></dt>\n  <dd>\n    <p>O método <strong><code>uneval()</code></strong> cria uma representação de <em>string</em> do código-fonte de um <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a>.</p>\n  </dd>\n  <dt id=\"isfinite\"><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/isFinite\"><code>isFinite()</code></a></dt>\n  <dd>\n    <p>A função global <strong><code>isFinite()</code></strong> determina se o valor passado é um número finito. Se necessário, o parâmetro é primeiro convertido para um número.</p>\n  </dd>\n  <dt id=\"isnan\"><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/isNaN\"><code>isNaN()</code></a></dt>\n  <dd>\n    <p>A função <strong><code>isNaN()</code></strong> determina se um valor é <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> ou não. Nota: coerção dentro da função <code>isNaN</code> tem <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/isNaN#description\">regras interessantes</a>; você pode, alternativamente, querer usar <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\"><code>Number.isNaN()</code></a>, como definido no ECMAScript 6, ou você pode usar <code>typeof</code> para determinar se o valor não é um número.</p>\n  </dd>\n  <dt id=\"parsefloat\"><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\"><code>parseFloat()</code></a></dt>\n  <dd>\n    <p>A função <strong><code>parseFloat()</code></strong> analisa um argumento do tipo <em>string</em> e retorna um número de ponto flutuante.</p>\n  </dd>\n  <dt id=\"parseint\"><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/parseInt\"><code>parseInt()</code></a></dt>\n  <dd>\n    <p>A função <strong><code>parseInt()</code></strong> analisa um argumento do tipo <em>string</em> e retorna um inteiro da base especificada (base do sistema numérico).</p>\n  </dd>\n  <dt id=\"decodeuri\"><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\"><code>decodeURI()</code></a></dt>\n  <dd>\n    <p>A função <strong><code>decodeURI()</code></strong> decodifica uma <em>Uniform Resource Identifier</em> (URI) criada anteriormente por <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\"><code>encodeURI</code></a> ou por uma rotina similar.</p>\n  </dd>\n  <dt id=\"decodeuricomponent\"><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\"><code>decodeURIComponent()</code></a></dt>\n  <dd>\n    <p>O método <strong><code>decodeURIComponent()</code></strong> decodifica um componente <em>Uniform Resource Identifier</em> (URI) criado anteriormente por <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\"><code>encodeURIComponent</code></a> ou por uma rotina similar.</p>\n  </dd>\n  <dt id=\"encodeuri\"><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\"><code>encodeURI()</code></a></dt>\n  <dd>\n    <p>O método <strong><code>encodeURI()</code></strong> codifica um Uniform Resource Identifier (URI), substituindo cada ocorrência de determinados caracteres por um, dois, três, ou quatro sequências de escape que representa a codificação UTF-8 do caractere (só serão quatro sequências de escape para caracteres compostos de dois caracteres \"substitutos\").</p>\n  </dd>\n  <dt id=\"encodeuricomponent\"><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\"><code>encodeURIComponent()</code></a></dt>\n  <dd>\n    <p>O método <strong><code>encodeURIComponent()</code></strong> codifica um componente <em>Uniform Resource Identifier</em> (URI), substituindo cada ocorrência de determinados caracteres por um, dois, três, ou quatro sequências de escape que representa a codificação UTF-8 do caractere (só serão quatro sequências de escape para caracteres compostos de dois caracteres \"substitutos\").</p>\n  </dd>\n  <dt id=\"escape\"><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/escape\"><code>escape()</code></a> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg></dt>\n  <dd>\n    <p>O método obsoleto <strong><code>escape()</code></strong> calcula uma nova <em>string</em> na qual certos caracteres foram substituídos por uma sequência de escape hexadecimal. Use <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\"><code>encodeURI</code></a> ou <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\"><code>encodeURIComponent</code></a> em vez disso.</p>\n  </dd>\n  <dt id=\"unescape\"><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/unescape\"><code>unescape()</code></a> <svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg></dt>\n  <dd>\n    <p>O método obsoleto <strong><code>unescape()</code></strong> calcula uma nova <em>string</em> na qual sequências de escape hexadecimais são substituídas pelo caractere que ela representa. As sequências de escape podem ser introduzidas por uma função como <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/escape\"><code>escape</code></a>. Por <code>unescape()</code> estar obsoleto, use <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\"><code>decodeURI()</code></a> ou <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\"><code>decodeURIComponent</code></a> ao invés dele.</p>\n  </dd>\n</dl><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/pt-BR/docs/Web/JavaScript/Guide/Loops_and_iteration\">« Previous</a></li>\n    <li><a class=\"button minimal\" href=\"/pt-BR/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Next  »</a></li>\n</ul>"}}],"toc":[{"text":"Definindo Funções","id":"definindo_funções"},{"text":"Chamando funções","id":"chamando_funções"},{"text":"Escopo da função","id":"escopo_da_função"},{"text":"Escopo e a pilha de função","id":"escopo_e_a_pilha_de_função"},{"text":"Closures","id":"closures"},{"text":"Usando objeto de argumentos","id":"usando_objeto_de_argumentos"},{"text":"Parâmetros de função","id":"parâmetros_de_função"},{"text":"Funções de seta","id":"funções_de_seta"},{"text":"Funções pré-definidas","id":"funções_pré-definidas"}],"summary":"Funções são blocos de construção fundamentais em JavaScript. Uma função é um procedimento de JavaScript - um conjunto de instruções que executa uma tarefa ou calcula um valor. Para usar uma função, você deve defini-la em algum lugar no escopo do qual você quiser chamá-la.","popularity":0.0076,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Functions","locale":"en-US","native":"English (US)"},{"title":"Funciones","locale":"es","native":"Español"},{"title":"Fonctions","locale":"fr","native":"Français"},{"title":"関数","locale":"ja","native":"日本語"},{"title":"함수","locale":"ko","native":"한국어"},{"title":"Функции","locale":"ru","native":"Русский"},{"title":"函数","locale":"zh-CN","native":"中文 (简体)"},{"title":"函式","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"pt-br/web/javascript/guide/functions","github_url":"https://github.com/mdn/translated-content/blob/main/files/pt-br/web/javascript/guide/functions/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/pt-BR/docs/Web","title":"Tecnologia Web para desenvolvedores"},{"uri":"/pt-BR/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/pt-BR/docs/Web/JavaScript/Guide","title":"Guia JavaScript"},{"uri":"/pt-BR/docs/Web/JavaScript/Guide/Functions","title":"Funções"}],"pageTitle":"Funções - JavaScript | MDN","noIndexing":false}}