{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Trabalhando com objetos","mdn_url":"/pt-BR/docs/Web/JavaScript/Guide/Working_with_Objects","locale":"pt-BR","native":"Português (do Brasil)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>A linguagem JavaScript é projetada com base em um simples paradigma orientado a objeto. Um objeto é uma coleção de propriedades, e uma propriedade é uma associação entre um nome (ou <em>chave</em>) e um valor. Um valor de propriedade pode ser uma função, que é então considerada um <em>método</em> do objeto. Além dos objetos que são pré-definidos no browser, você pode definir seus próprios objetos.</strong></p>\n<p><strong>Este capítulo descreve como usar objetos, propriedades, funções, e métodos, e como criar seus próprios objetos.</strong></p>"}},{"type":"prose","value":{"id":"visão_geral_de_objetos","title":"Visão geral de objetos","isH3":false,"content":"<p>Objetos em JavaScript, assim como em muitas outras linguagens de programação, podem ser comparados com objetos na vida real. O conceito de objetos em JavaScript pode ser entendido com objetos tangíveis da vida real.</p>\n<p>Em JavaScript, um objeto é uma entidade independente, com propriedades e tipos. Compare-o com uma xícara, por exemplo. Uma xícara é um objeto, com propriedades. Uma xícara tem uma cor, uma forma, peso, um material de composição, etc. Da mesma forma, objetos em JavaScript podem ter propriedades, que definem suas características.</p>"}},{"type":"prose","value":{"id":"objetos_e_propriedades","title":"Objetos e propriedades","isH3":false,"content":"<p>Um objeto em JavaScript tem propriedades associadas a ele. Uma propriedade de um objeto pode ser explicada como uma variável que é ligada ao objeto. Propriedades de objetos são basicamente as mesmas que variáveis normais em JavaScript, exceto pelo fato de estarem ligadas a objetos. As propriedades de um objeto definem as características do objeto. Você acessa as propriedades de um objeto com uma simples notação de ponto:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>nomeDoObjeto<span class=\"token punctuation\">.</span>nomeDaPropriedade\n</code></pre></div>\n<p>Como as variáveis em JavaScript, o nome do objeto (que poderia ser uma variável normal) e um nome de propriedade diferem em maiúsculas/minúsculas (por exemplo, cor e Cor são propriedades diferentes). Você pode definir uma propriedade atribuindo um valor a ela. Por exemplo, vamos criar um objeto chamado <code>meuCarro</code> e dar a ele propriedades chamadas <code>fabricacao</code>, <code>modelo</code>, e <code>ano</code>, conforme mostrado a seguir:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> meuCarro <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmeuCarro<span class=\"token punctuation\">.</span>fabricacao <span class=\"token operator\">=</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">;</span>\nmeuCarro<span class=\"token punctuation\">.</span>modelo <span class=\"token operator\">=</span> <span class=\"token string\">\"Mustang\"</span><span class=\"token punctuation\">;</span>\nmeuCarro<span class=\"token punctuation\">.</span>ano <span class=\"token operator\">=</span> <span class=\"token number\">1969</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Propriedades não definidas de um objeto são <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> (e não <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a>).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>meuCarro<span class=\"token punctuation\">.</span>semPropriedade<span class=\"token punctuation\">;</span> <span class=\"token comment\">//undefined</span>\n</code></pre></div>\n<p>Propriedades de objetos em JavaScript podem também ser acessadas ou alteradas usando-se notação de colchetes. Objetos são às vezes chamados de <em>arrays associativos</em>, uma vez que cada propriedade é associada com um valor de string que pode ser usado para acessá-la. Então, por exemplo, você poderia acessar as propriedades do objeto <code>meuCarro</code> como se segue:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>meuCarro<span class=\"token punctuation\">[</span><span class=\"token string\">\"fabricacao\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">;</span>\nmeuCarro<span class=\"token punctuation\">[</span><span class=\"token string\">\"modelo\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Mustang\"</span><span class=\"token punctuation\">;</span>\nmeuCarro<span class=\"token punctuation\">[</span><span class=\"token string\">\"ano\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1969</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Um nome de propriedade de um objeto pode ser qualquer string JavaScript válida, ou qualquer coisa que possa ser convertida em uma string, incluindo uma string vazia. No entanto, qualquer nome e propriedade que não é um identificador JavaScript válido (por exemplo, um nome de propriedade que tem um espaço ou um hífen, ou que começa com um número) só pode ser acessado(a) usando-se a notação de colchetes. Essa notação é também muito útil quando nomes de propriedades devem ser determinados dinamicamente (quando o nome da propriedade não é determinado até o momento de execução). Exemplos são mostrados a seguir:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> meuObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    str <span class=\"token operator\">=</span> <span class=\"token string\">\"minhaString\"</span><span class=\"token punctuation\">,</span>\n    aleat <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmeuObj<span class=\"token punctuation\">.</span>tipo               <span class=\"token operator\">=</span> <span class=\"token string\">\"Sintaxe de ponto\"</span><span class=\"token punctuation\">;</span>\nmeuObj<span class=\"token punctuation\">[</span><span class=\"token string\">\"data de criacao\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"String com espaco\"</span><span class=\"token punctuation\">;</span>\nmeuObj<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">]</span>               <span class=\"token operator\">=</span> <span class=\"token string\">\"valor de String\"</span><span class=\"token punctuation\">;</span>\nmeuObj<span class=\"token punctuation\">[</span>aleat<span class=\"token punctuation\">]</span>             <span class=\"token operator\">=</span> <span class=\"token string\">\"Numero Aleatorio\"</span><span class=\"token punctuation\">;</span>\nmeuObj<span class=\"token punctuation\">[</span>obj<span class=\"token punctuation\">]</span>               <span class=\"token operator\">=</span> <span class=\"token string\">\"Objeto\"</span><span class=\"token punctuation\">;</span>\nmeuObj<span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span>                <span class=\"token operator\">=</span> <span class=\"token string\">\"Mesmo uma string vazia\"</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>meuObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Você pode também acessar propriedades usando um valor de string que está armazenado em uma variável:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> nomeDaPropriedade <span class=\"token operator\">=</span> <span class=\"token string\">\"fabricacao\"</span><span class=\"token punctuation\">;</span>\nmeuCarro<span class=\"token punctuation\">[</span>nomeDaPropriedade<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Ford\"</span><span class=\"token punctuation\">;</span>\n\nnomeDaPropriedade <span class=\"token operator\">=</span> <span class=\"token string\">\"modelo\"</span><span class=\"token punctuation\">;</span>\nmeuCarro<span class=\"token punctuation\">[</span>nomeDaPropriedade<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Mustang\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Você pode usar a notação de colchetes com o comando <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a> para iterar por todas as propriedades enumeráveis de um objeto. Para ilustrar como isso funciona, a seguinte função mostra as propriedades de um objeto quando você passa o objeto e o nome do objeto como argumentos para a função:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">mostrarProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> nomeDoObj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> resultado <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        resultado <span class=\"token operator\">+=</span> nomeDoObj <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\" = \"</span> <span class=\"token operator\">+</span> obj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> resultado<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Então, a chamada de função <code>mostrarProps(meuCarro, \"meuCarro\")</code> retornaria o seguinte:</p>\n<pre class=\"notranslate\">meuCarro.fabricacao = Ford\nmeuCarro.modelo = Mustang\nmeuCarro.ano = 1969\n</pre>"}},{"type":"prose","value":{"id":"objetos_tudo","title":"Objetos: tudo","isH3":false,"content":"<p>Em JavaScript, quase tudo é um objeto. Todos os tipos primitivos - com exceção de <code>null</code> e <code>undefined</code> - são tratados como objetos. Eles podem receber propriedades (propriedades atribuídas de alguns tipos não são persistentes), e possuem todas as características de objetos.</p>"}},{"type":"prose","value":{"id":"enumerando_todas_as_propriedades_de_um_objeto","title":"Enumerando todas as propriedades de um objeto","isH3":false,"content":"<p>Começando com a <a href=\"/pt-BR/docs/JavaScript/ECMAScript_5_support_in_Mozilla\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">ECMAScript 5</a>, há três formas nativas de se listar (ou \"caminhar por\") as propriedades de um objeto:</p>\n<ul>\n  <li>\n    <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/for...in\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">for...in (en-US)</a> loops\n    Esse método caminha por todas as propriedades enumeráveis de um objeto e sua cadeia de protótipos\n  </li>\n  <li>\n    <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Object.keys(o) (en-US)</a>\n    Esse método retorna um array com todos os nomes (\"chaves\") de propriedades próprios de um objeto <code>o</code> (mas não na cadeia de protótipos).\n  </li>\n  <li>\n    <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Object.getOwnPropertyNames(o) (en-US)</a>\n    Esse método retorna um array contendo todos os nomes de propriedades próprios (enumeráveis ou não) de um objeto <code>o</code>.\n  </li>\n</ul>\n<p>Antes, na ECMAScript 5, não existia uma forma nativa de se listar todas as propriedades de um objeto. No entanto, isso pode ser feito com a seguinte função:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">listarTodasAsPropriedades</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> objectoASerInspecionado<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> resultado <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>objectoASerInspecionado <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span> objectoASerInspecionado <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> objectoASerInspecionado <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>objectoASerInspecionado<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    resultado <span class=\"token operator\">=</span> resultado<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>objectoASerInspecionado<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> resultado<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Isso pode ser útil para revelar propriedades \"escondidadas\" (propriedades na cadeia de protótipos que não são acessíveis através do objeto, porque outra propriedade possui o mesmo nome anteriormente na cadeia de protótipos). A listagem de propriedades acessíveis só pode ser facilmente feita através da remoção de valores duplicados no array.</p>"}},{"type":"prose","value":{"id":"criando_novos_objetos","title":"Criando novos objetos","isH3":false,"content":"<p>JavaScript possui um número de objetos pré-definidos. Além disso, você pode criar seus próprios objetos. Você pode criar um objeto usando um <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Object_initializer\">objeto inicializador</a>. Alternativamente, você pode primeiro criar uma função construtora e depois instanciar um objeto usando aquela função e o operador <code>new</code>.</p>"}},{"type":"prose","value":{"id":"usando_inicializadores_de_objeto","title":"Usando inicializadores de objeto","isH3":true,"content":"<p>Além de criar objetos usando uma função construtora, você pode criar objetos usando um <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Object_initializer\">inicializador de objeto</a>. O uso de inicializadores de objeto é às vezes conhecido como criar objetos com notação literal. O termo \"inicializador de objeto\" é consistente com a terminologia usada por C++.</p>\n<p>A sintaxe para um objeto usando-se um inicializador de objeto é:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">propriedade_1</span><span class=\"token operator\">:</span>   valor_1<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// propriedade_# pode ser um identificador...</span>\n            <span class=\"token number\">2</span><span class=\"token operator\">:</span>            valor_2<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// ou um numero...</span>\n            <span class=\"token comment\">// ...,</span>\n            <span class=\"token string-property property\">\"propriedade n\"</span><span class=\"token operator\">:</span> valor_n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ou uma string</span>\n</code></pre></div>\n<p>onde <code>obj</code> é o nome do novo objeto, cada <code>propriedade_i</code> é um identificador (um nome, um número, ou uma string literal), e cada <code>valor_i</code> é uma expressão cujo valor é atribuído à <code>propriedade_i</code>. O <code>obj</code> e a atribuição são opcionais; se você não precisa fazer referência a esse objeto em nenhum outro local, você não precisa atribuí-lo a uma variável. (Note que você pode precisar colocar o objeto literal entre parentêses se o objeto aparece onde um comando é esperado, de modo a não confundir o literal com uma declaração de bloco.)</p>\n<p>Se um objeto é criado com um inicializador de objeto em um script de alto nível, JavaScript interpreta o objeto a cada vez que avalia uma expressão contendo o objeto literal. Além disso, um inicializador usado em uma função é criado toda vez que a função é chamada.</p>\n<p>O seguinte comando cria um objeto e o atribui à variável <code>x</code> somente se a expressão <code>cond</code> é verdadeira.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cond<span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">hi</span><span class=\"token operator\">:</span> <span class=\"token string\">\"there\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>O seguinte exemplo cria <code>minhaHonda</code> com três propriedades. Note que a propriedade <code>motor</code> é também um objeto com suas próprias propriedades.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> minhaHonda <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">cor</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vermelho\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">rodas</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">motor</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">cilindros</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">tamanho</span><span class=\"token operator\">:</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Você pode também usar inicializadores de objeto para criar arrays. Veja <a href=\"/pt-BR/docs/Web/JavaScript/Guide/Grammar_and_types#array_literals\">arrays literais</a>.</p>"}},{"type":"prose","value":{"id":"usando_uma_função_construtora","title":"Usando uma função construtora","isH3":true,"content":"<p>Alternativamente, você pode criar um objeto com estes dois passos:</p>\n<ol>\n  <li>Defina o tipo de objeto escrevendo uma função construtora. Há uma forte convenção, e com boa razão, de se usar uma letra inicial maiúscula.</li>\n  <li>Crie uma instância do objeto com <code>new</code>.</li>\n</ol>\n<p>Para definir um tipo de objeto, crie uma função para o tipo de objeto que especifique seu nome, suas propriedades e seus métodos. Por exemplo, suponha que você queira criar um tipo objeto para carros. Você quer que esse tipo de objeto seja chamado <code>carro</code>, e você quer ele tenha propriedades de marca, modelo, e ano. Para fazer isto, você escreveria a seguinte função:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Carro</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">marca<span class=\"token punctuation\">,</span> modelo<span class=\"token punctuation\">,</span> ano</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>marca <span class=\"token operator\">=</span> marca<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modelo <span class=\"token operator\">=</span> modelo<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ano <span class=\"token operator\">=</span> ano<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Note o uso de <code>this</code> para atribuir valores às propriedades do objeto com base nos valores passados para a função.</p>\n<p>Agora você pode criar um objeto chamado <code>meucarro</code> como se segue:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> meucarro <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Carro</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Eagle\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Talon TSi\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1993</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Esse comando cria <code>meucarro</code> e atribui a ele valores especificados para suas propriedade. Então o valor de <code>meucarro.marca</code> é a string \"Eagle\", <code>meucarro.ano</code> é o inteiro 1993, e assim por diante.</p>\n<p>Você pode criar qualquer número de objetos <code>carro</code> com o uso de <code>new</code>. Exemplo,</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> carroDeKen <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Carro</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nissan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"300ZX\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1992</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> carroDeVPG <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Carro</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mazda\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Miata\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1990</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Um objeto pode ter uma propriedade que por si só também é um objeto. Por exemplo, suponha que você define um objeto chamado <code>pessoa</code> como se segue:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Pessoa</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nome<span class=\"token punctuation\">,</span> idade<span class=\"token punctuation\">,</span> sexo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nome <span class=\"token operator\">=</span> nome<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>idade <span class=\"token operator\">=</span> idade<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sexo <span class=\"token operator\">=</span> sexo<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>e então você instancia dois novos objetos <code>pessoa</code> da seguinte forma:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> jose <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pessoa</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jose Silva\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"M\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> paulo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pessoa</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Paulo Santos\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"M\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Então, você pode reescrever a definição de <code>carro</code> de modo a incluir uma propriedade <code>dono</code> que recebe um objeto <code>pessoa</code>, como se segue:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Carro</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">marca<span class=\"token punctuation\">,</span> modelo<span class=\"token punctuation\">,</span> ano<span class=\"token punctuation\">,</span> dono</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>marca <span class=\"token operator\">=</span> marca<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modelo <span class=\"token operator\">=</span> modelo<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ano <span class=\"token operator\">=</span> ano<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dono <span class=\"token operator\">=</span> dono<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Para instanciar os novos objetos, você então usa o seguinte:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> carro1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Carro</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Eagle\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Talon TSi\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1993</span><span class=\"token punctuation\">,</span> jose<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> carro2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Carro</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nissan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"300ZX\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1992</span><span class=\"token punctuation\">,</span> paulo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Perceba que ao invés de passar uma string literal ou um valor inteiro na hora de criar os novos objetos, os comandos acima passam os objetos <code>jose</code> e <code>paulo</code> como os argumentos para os donos. Então se você quiser descobrir o nome do dono de <code>carro2</code>, você pode acessar a seguinte propriedade:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>carro2<span class=\"token punctuation\">.</span>dono\n</code></pre></div>\n<p>Note que você pode sempre adicionar uma propriedade a um objeto definido anteriormente. Por exemplo, o comando</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>carro1<span class=\"token punctuation\">.</span>cor <span class=\"token operator\">=</span> <span class=\"token string\">\"preto\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>adiciona uma propriedade <code>cor</code> ao <code>carro1</code>, e dá a ele o valor <code>\"preto.\"</code> No entanto, isso não afeta nenhum outro objeto. Para adicionar a nova propriedade a todos os objetos do mesmo tipo, você deve adicionar a propriedade na definição do tipo de objeto <code>carro</code>.</p>"}},{"type":"prose","value":{"id":"usando_o_método_object.create","title":"Usando o método Object.create","isH3":true,"content":"<p>Objetos podem também ser criados usando-se o método <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a>. Esse método pode ser muito útil, pois permite que você escolha o objeto protótipo para o objeto que você quer criar, sem a necessidade de se definir uma função construtora.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Encapsulamento das propriedades e métodos de Animal</span>\n<span class=\"token keyword\">var</span> Animal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">tipo</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Invertebrados\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Propriedades de valores padrão</span>\n  <span class=\"token function-variable function\">qualTipo</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// Método que ira mostrar o tipo de Animal</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tipo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Cria um novo tipo de animal chamado animal1</span>\n<span class=\"token keyword\">var</span> animal1 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nanimal1<span class=\"token punctuation\">.</span><span class=\"token function\">qualTipo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Saída:Invertebrados</span>\n\n<span class=\"token comment\">// Cria um novo tipo de animal chamado Peixes</span>\n<span class=\"token keyword\">var</span> peixe <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npeixe<span class=\"token punctuation\">.</span>tipo <span class=\"token operator\">=</span> <span class=\"token string\">\"Peixes\"</span><span class=\"token punctuation\">;</span>\npeixe<span class=\"token punctuation\">.</span><span class=\"token function\">qualTipo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Saída: Peixes</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"herança","title":"Herança","isH3":true,"content":"<p>Todos os objetos em JavaScript herdam de pelo menos um outro objeto. O objeto \"pai\" é conhecido como o protótipo, e as propriedades herdadas podem ser encontradas no objeto <code>prototype</code> do construtor.</p>"}},{"type":"prose","value":{"id":"indexando_propriedades_de_objetos","title":"Indexando Propriedades de Objetos","isH3":false,"content":"<p>Você pode se referir a uma propriedade de um objeto pelo seu nome de propriedade ou pelo seu índice ordinal. Se você inicialmente definiu uma propriedade pelo nome, você deve sempre se referir a ela pelo nome, e se você inicialmente definir uma propriedade por um índice, você deve sempre se referir a ela pelo índice.</p>\n<p>Esta restrição se aplica quando você cria um objeto e suas propriedades com uma função construtora (como fizemos anteriormente com o objeto do tipo carro) e quando você define propriedades individuais explicitamente (por exemplo, <code>meuCarro.cor = \"vermelho\"</code>). Se você inicialmente definir uma propriedade do objeto com um índice, tal como <code>meuCarro[5] = \"25 mpg\"</code>, você pode subsequentemente referir-se á propriedade somente como <code>meuCarro[5]</code>.</p>\n<p>A exceção a esta regra é a objetos refletidos a partir do HTML, como o conjunto de formulários. Você pode sempre se referir a objetos nessas matrizes por seu número de ordem (com base em onde eles aparecem no documento) ou seu nome (se definido). Por exemplo, se a segunda tag <code>&lt;FORM&gt;</code> em um documento tem um atributo <code>NAME</code> de \"meuFormulario\", você pode se referir ao formulário como <code>document.forms[1]</code> ou <code>document.forms[\"meuFormulario\"]</code> ou <code>document.meuFormulario</code>.</p>"}},{"type":"prose","value":{"id":"definindo_propriedades_para_um_tipo_de_objeto","title":"Definindo propriedades para um tipo de objeto","isH3":false,"content":"<p>Você pode adicionar uma propriedade a um tipo de objeto definido anteriormente, utilizando a propriedade prototype. Esta define uma propriedade que é partilhada por todos os objetos do tipo especificado, em vez de apenas uma instância do objeto. O código a seguir adiciona uma propriedade <code>cor</code> para todos os objetos do tipo C<code>arro</code>, em seguida adiciona um valor a propriedade <code>cor</code> do objeto <code>carro1</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token class-name\">Carro</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>cor <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\ncarro1<span class=\"token punctuation\">.</span>cor <span class=\"token operator\">=</span> <span class=\"token string\">\"preto\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Consulte a <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">propriedade (en-US)</a> <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">prototype (en-US)</a> do objeto <code>Function</code> na <a href=\"/pt-BR/docs/Web/JavaScript/Reference\">Referência</a> <a href=\"/pt-BR/docs/Web/JavaScript/Reference\">JavaScript</a> para mais informações.</p>"}},{"type":"prose","value":{"id":"definindo_métodos","title":"Definindo métodos","isH3":false,"content":"<p>Um <em>método</em> é uma função associada a um objeto, ou, simplesmente, um método é uma propriedade de um objeto que é uma função. Métodos são definidos da forma que as funções normais são definidas, exceto que eles tenham que ser atribuídos como propriedade de um objeto. São exemplos:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>nomeDoObjeto<span class=\"token punctuation\">.</span>nomedometodo <span class=\"token operator\">=</span> nome_da_funcao<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> meuObjeto <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">meuMetodo</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parametros</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...faça algo</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Onde <code>nomeDoObjeto</code> é um objeto existente, <code>nomedometodo</code> é o nome que você atribuiu ao método, e <code>nome_da_funcao</code> é o nome da função.</p>\n<p>Em seguida, você pode chamar o método no contexto do objeto da seguinte forma:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>objeto<span class=\"token punctuation\">.</span><span class=\"token function\">nomedometodo</span><span class=\"token punctuation\">(</span>parametros<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Você pode definir métodos para um tipo de objeto incluindo uma definição de metodo na função construtora do objeto. Por exemplo, você poderia definir uma função que iria formatar e mostrar as propriedades do objeto <code>carro</code> previamente definido; por exemplo,</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">mostreCarro</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> resultado <span class=\"token operator\">=</span> <span class=\"token string\">\"Um belo \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ano <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fabricacao\n    <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modelo<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">pretty_print</span><span class=\"token punctuation\">(</span>resultado<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>onde <code>pretty_print</code> é uma função que mostra uma linha horizontal e uma string. Observe o uso de <code>this</code> para referenciar o objeto ao qual o método pertence.</p>\n<p>Você pode fazer desta função um método de <code>carro,</code> adicionando seu estado à definição do objeto.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mostreCarro <span class=\"token operator\">=</span> mostreCarro<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Assim, a definição completa de <code>carro</code> seria agora, parecida com essa:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Carro</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fabricacao<span class=\"token punctuation\">,</span> modelo<span class=\"token punctuation\">,</span> ano<span class=\"token punctuation\">,</span> proprietario</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fabricacao <span class=\"token operator\">=</span> fabricacao<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modelo <span class=\"token operator\">=</span> modelo<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ano <span class=\"token operator\">=</span> ano<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>proprietario <span class=\"token operator\">=</span> proprietario<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mostreCarro <span class=\"token operator\">=</span> mostreCarro<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Então você pode chamar o método <code>mostreCarro</code> para cada objeto seguinte:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>carro1<span class=\"token punctuation\">.</span><span class=\"token function\">mostreCarro</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncarro2<span class=\"token punctuation\">.</span><span class=\"token function\">mostreCarro</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"usando_this_para_referências_de_objetos","title":"Usando <code>this</code> para referências de objetos","isH3":false,"content":"<p>JavaScript tem uma palavra-chave especial, <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/this\">this</a>, que você pode usar dentro de um método para referenciar o objeto corrente. Por exemplo, suponha que você tenha uma função chamada <code>validate</code> que valida o <code>valor</code> da propriedade de um objeto, dado o objeto e os valores altos e baixos:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> lowval<span class=\"token punctuation\">,</span> hival</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> lowval<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&gt;</span> hival<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Valor inválido!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Então, você poderia chamar <code>validate</code> no manipulador de evento <code>onchange</code> em cada elemento do formulário, usando <code>this</code> para passar o elemento, como no exemplo a seguir:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token special-attr\"><span class=\"token attr-name\">onChange</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>No geral, <code>this</code> referencia o objeto chamando um método.</p>\n<p>Quando combinado com a propriedade <code>form</code> , <code>this</code> pode referenciar a forma original do objeto atual. No exemplo seguinte, o formulário <code>myForm</code> contém um objeto <code>Text</code> e um botão. Quando o usuário clica no botão, o valor do objeto <code>Text</code> é definido como nome do formulário. O manipulador de eventos <code>onclick</code> do botão usa <code>this.form</code> para referenciar a forma original, <code>myForm</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myForm<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">&gt;</span></span>Nome do form:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Beluga<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Mostre o Nome do Form<span class=\"token punctuation\">\"</span></span>\n     <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>text1<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>name</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>","titleAsText":"Usando this para referências de objetos"}},{"type":"prose","value":{"id":"definindo_getters_e_setters","title":"Definindo getters e setters","isH3":false,"content":"<p>Um <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/get\">getter</a> é um método que obtém o valor de uma propriedade específica. Um <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/set\">setter</a> é um método que define o valor de uma propriedade específica. Você pode definir getters e setters em qualquer objeto de núcleo pré-definido ou objeto definido pelo usuário que suporta a adição de novas propriedades. A sintaxe para definir getters e setters usa a sintaxe literal do objeto.</p>\n<p>O código a seguir ilustra como getters e setters podem funcionar para um objeto<code>o</code>definido pelo usuário.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> x <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 7</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 8</span>\no<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 25</span>\n</code></pre></div>\n<p>As propriedades do objeto <code>o</code> são:</p>\n<ul>\n  <li><code>o.a</code> — um número</li>\n  <li><code>o.b</code> — um getter que retorna <code>o.a</code> + 1</li>\n  <li><code>o.c</code> — um setter que define o valor de <code>o.a</code> pela metade do valor definindo para <code>o.c</code></li>\n</ul>\n<p>Observe que nomes de função de getters e setters definidos em um objeto literal usando \"[gs]et <em>property</em>()\" (ao contrário de <code>__define[GS]etter__</code> ) não são os próprios nomes dos getters, embora a sintaxe <code>[gs]et propertyName(){ }</code> possa induzir ao erro e você pensar de outra forma. Para nomear uma função getter ou setter usando a sintaxe \"[gs]et <em>property</em>()\", define explicitamente um função nomeada programaticamente usando <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" title=\"en-US/docs/Core JavaScript 1.5 Reference/Global\nObjects/Object/defineProperty\"><code>Object.defineProperty</code></a> (ou o legado fallback <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\" title=\"en-US/docs/Core JavaScript 1.5 Reference/Global\nObjects/Object/defineGetter\"><code>Object.prototype.__defineGetter__</code></a>).</p>\n<p>O código a seguir ilustra como getters e setters podem extender o protótipo <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> para adicionar a propriedade <code>ano</code> para todas as instâncias de classes <code>Date</code> pré-definidas. Ele usa os métodos <code>getFullYear</code> e <code>setFullYear</code> existentes da classe <code>Date</code> para suportar o getter e setter da propriedade <code>ano</code>.</p>\n<p>Estes estados definem um getter e setter para a propriedade <code>ano</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> <span class=\"token string\">\"year\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setFullYear</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Estes estados usam o getter e setter em um objeto <code>Date</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2000</span>\nnow<span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> <span class=\"token number\">2001</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 987617605170</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Wed Apr 18 11:13:25 GMT-0700 (Pacific Daylight Time) 2001</span>\n</code></pre></div>\n<p>A principio, getters e setters podem ser ou</p>\n<ul>\n  <li>definidos usando <a href=\"/pt-BR/docs/Web/JavaScript/Guide/Working_with_Objects#Using_object_initializers\" aria-current=\"page\">objetos inicializadores</a>, ou</li>\n  <li>adicionar posteriormente para qualquer objeto a qualquer tempo usando um método getter ou setter adicionado</li>\n</ul>\n<p>Ao definir getters e setters usando <a href=\"/pt-BR/docs/Web/JavaScript/Guide/Working_with_Objects#Using_object_initializers\" aria-current=\"page\">objetos inicializadores</a> tudo o que você precisa fazer é prefixar um método getter com <code>get</code> e um método setter com <code>set</code>. Claro, o método getter não deve esperar um parâmetro, enquanto o método setter espera exatamente um parâmetro (novo valor para definir). Por exemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> x <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Getters e setters podem também ser adicionado em um objeto a qualquer hora depois da criação usando o método <code>Object.defineProperties</code>. O primeiro parâmetro deste método é o objeto no qual você quer definir o getter ou setter. O segundo parâmetro é um objeto cujos nomes das propriedades são os nomes getter ou setter, e cujo valores das propriedades são objetos para definição de funções getter ou setter. Aqui está um exemplo que define o mesmo getter e setter usado no exemplo anterior:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span><span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">\"b\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"c\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> x <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\no<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token comment\">// Roda o setter, que associa 10 / 2 (5) para a propriedade 'a'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Roda o getter, que yields a + 1 ou 6</span>\n</code></pre></div>\n<p>Escolher qual das duas formas depende do seu estilo de programação e tarefa na mão. Se você já vai para o inicializador de objeto ao definir um protótipo, provavelmente a maior parte do tempo escolherá a primeira forma. Esta forma é mais compacta e natural. No entanto, se você precisar adicionar getters e setters mais tarde - porque você não escreveu o protótipo ou objeto particular - então a segunda forma é a única possível. A segunda forma provavelmente melhor representa a natureza dinâmica do JavaScript - mas pode tornar o código difícil de ler e entender.</p>"}},{"type":"prose","value":{"id":"removendo_propriedades","title":"Removendo propriedades","isH3":false,"content":"<p>Você pode remover uma propriedade não herdada usando o operador <code>delete</code>. O código a seguir mostra como remover uma propriedade.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">//Criando um novo objeto, myobj, com duas propriedades, a e b.</span>\n<span class=\"token keyword\">var</span> myobj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span>\nmyobj<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nmyobj<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Removendo a propriedade a, deixando myobj com apenas a propriedade b.</span>\n<span class=\"token keyword\">delete</span> myobj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span> <span class=\"token keyword\">in</span> myobj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// yields \"false\"</span>\n</code></pre></div>\n<p>Você também pode usar <code>delete</code> para remover uma variável global se a <code>var</code> keyword não estiver sendo usada para declarar a variável:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>g <span class=\"token operator\">=</span> <span class=\"token number\">17</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> g<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"comparando_objetos","title":"Comparando Objetos","isH3":false,"content":"<p>Em JavaScript, objetos são um tipo de referência. Dois objetos distintos nunca são iguais, mesmo que tenham as mesmas propriedades. Apenas comparando o mesmo objeto de referência com ele mesmo produz verdadeiro.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Duas variáveis, dois objetos distintos com as mesmas propriedades</span>\n<span class=\"token keyword\">var</span> fruit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> fruitbear <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nfruit <span class=\"token operator\">==</span> fruitbear <span class=\"token comment\">// return false</span>\nfruit <span class=\"token operator\">===</span> fruitbear <span class=\"token comment\">// return false</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Duas variáveis, um único objeto</span>\n<span class=\"token keyword\">var</span> fruit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> fruitbear <span class=\"token operator\">=</span> fruit<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// assign fruit object reference to fruitbear</span>\n\n<span class=\"token comment\">// Here fruit and fruitbear are pointing to same object</span>\nfruit <span class=\"token operator\">==</span> fruitbear <span class=\"token comment\">// return true</span>\nfruit <span class=\"token operator\">===</span> fruitbear <span class=\"token comment\">// return true</span>\n</code></pre></div>\n<p>Para mais informações sobre comparaçāo de operadores, veja <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Operadores de comparaçāo (en-US)</a>.</p>"}},{"type":"prose","value":{"id":"veja_também","title":"Veja também","isH3":false,"content":"<ul>\n  <li>Para se aprofundar, leia sobre os <a href=\"/pt-BR/docs/conflicting/Web/JavaScript/Inheritance_and_the_prototype_chain\">detalhes do modelo de objetos javaScript</a>.</li>\n  <li>Para saber mais sobre classes em ECMAScript6 (uma nova forma de criar objetos), veja o capítulo <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Classes\">JavaScript classes</a>.</li>\n</ul><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/pt-BR/docs/Web/JavaScript/Guide/Regular_Expressions\">« Previous</a></li>\n    <li><a class=\"button minimal\" href=\"/pt-BR/docs/conflicting/Web/JavaScript/Inheritance_and_the_prototype_chain\">Next  »</a></li>\n</ul>"}}],"toc":[{"text":"Visão geral de objetos","id":"visão_geral_de_objetos"},{"text":"Objetos e propriedades","id":"objetos_e_propriedades"},{"text":"Objetos: tudo","id":"objetos_tudo"},{"text":"Enumerando todas as propriedades de um objeto","id":"enumerando_todas_as_propriedades_de_um_objeto"},{"text":"Criando novos objetos","id":"criando_novos_objetos"},{"text":"Indexando Propriedades de Objetos","id":"indexando_propriedades_de_objetos"},{"text":"Definindo propriedades para um tipo de objeto","id":"definindo_propriedades_para_um_tipo_de_objeto"},{"text":"Definindo métodos","id":"definindo_métodos"},{"text":"Usando <code>this</code> para referências de objetos","id":"usando_this_para_referências_de_objetos"},{"text":"Definindo getters e setters","id":"definindo_getters_e_setters"},{"text":"Removendo propriedades","id":"removendo_propriedades"},{"text":"Comparando Objetos","id":"comparando_objetos"},{"text":"Veja também","id":"veja_também"}],"summary":"A linguagem JavaScript é projetada com base em um simples paradigma orientado a objeto. Um objeto é uma coleção de propriedades, e uma propriedade é uma associação entre um nome (ou chave) e um valor. Um valor de propriedade pode ser uma função, que é então considerada um método do objeto. Além dos objetos que são pré-definidos no browser, você pode definir seus próprios objetos.","popularity":0.0067,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Working with objects","locale":"en-US","native":"English (US)"},{"title":"Trabajando con objetos","locale":"es","native":"Español"},{"title":"Utiliser les objets","locale":"fr","native":"Français"},{"title":"オブジェクトでの作業","locale":"ja","native":"日本語"},{"title":"객체로 작업하기","locale":"ko","native":"한국어"},{"title":"Работа с объектами","locale":"ru","native":"Русский"},{"title":"使用对象","locale":"zh-CN","native":"中文 (简体)"},{"title":"物件的使用","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"pt-br/web/javascript/guide/working_with_objects","github_url":"https://github.com/mdn/translated-content/blob/main/files/pt-br/web/javascript/guide/working_with_objects/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/pt-BR/docs/Web","title":"Tecnologia Web para desenvolvedores"},{"uri":"/pt-BR/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/pt-BR/docs/Web/JavaScript/Guide","title":"Guia JavaScript"},{"uri":"/pt-BR/docs/Web/JavaScript/Guide/Working_with_Objects","title":"Trabalhando com objetos"}],"pageTitle":"Trabalhando com objetos - JavaScript | MDN","noIndexing":false}}