{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Expressões Regulares","mdn_url":"/pt-BR/docs/Web/JavaScript/Guide/Regular_Expressions","locale":"pt-BR","native":"Português (do Brasil)","sidebarHTML":"\n <ol>\n  <li><a href=\"/pt-BR/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/pt-BR/docs/Web/JavaScript/Tutorials\"><strong>Tutoriais:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Completos iniciantes</summary>\n      <ol>\n        <li><a href=\"/pt-BR/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">O básico de JavaScript</a></li>\n        <li><a href=\"/pt-BR/docs/Learn/JavaScript/First_steps\">Primeiros passos com JavaScript</a></li>\n        <li><a href=\"/pt-BR/docs/Learn/JavaScript/Building_blocks\">Blocos de construção de JavaScript</a></li>\n        <li><a href=\"/pt-BR/docs/Learn/JavaScript/Objects\">Introdução a objetos JavaScript</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Guia de JavaScript</summary>\n      <ol>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Introduction\">Introdução</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Grammar_and_Types\">Gramática e tipos</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Controle de fluxo e tratamento de erros</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Loops_and_iteration\">Repetição e iteração</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Functions\">Funções</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressões e operadores</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Numbers_and_dates\">Números e datas</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Text_formatting\">Formatação de texto</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Regular_Expressions\">Expressões Regulares</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Indexed_collections\">Coleções indexadas</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Keyed_collections\">Coleções com chave (chave-valor)</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Working_with_Objects\">Trabalhando com objetos</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Detalhes do modelo de objetos</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Using_promises\">Usando \"promises\"</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Iterators_and_generators\">Iteradores e geradores</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Meta_programming\">Metaprogramação</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Intermediário</summary>\n      <ol>\n        <li><a href=\"/pt-BR/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/pt-BR/docs/Learn/JavaScript/Client-side_web_APIs\">APIs Web para aplicações Cliente</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">Uma reintrodução a JavaScript</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Data_structures\">Estruturas de dados de JavaScript</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Comparadores de igualdade e semelhança</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Closures\">Closures</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Avançado</summary>\n      <ol>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Herança e a cadeia de \"prototype\"</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode - Modo estrito</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Typed_arrays\">Arranjos tipados em JavaScript</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Memory_Management\">Gerenciamento de memória</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/EventLoop\">Modelo de concorrência e Loop de Eventos</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/pt-BR/docs/Web/JavaScript/Reference\">Referências:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Objetos pré-definidos</summary>\n        <ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Expressões e operadores</summary>\n      <ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Afirmações e declarações</summary>\n      <ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Funções</summary>\n      <ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Erros</summary>\n      <ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Mais conteúdo</summary>\n      <ol>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/JavaScript_technologies_overview\">Visão geral das Tecnologias JavaScript</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Lexical_grammar\">Gramática léxica</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Data_structures\">Estruturas de dados de JavaScript</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Enumerabilidade e domínio de propriedades</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Iteration_protocols\">Protocolos de iteração</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode - Modo estrito</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Migrando para o \"strict mode\"</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Template_literals\">Template literals</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Funcionalidades depreciadas</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/pt-BR/docs/Web/JavaScript/Guide/Text_formatting\">« Previous</a></li>\n    <li><a class=\"button minimal\" href=\"/pt-BR/docs/Web/JavaScript/Guide/Indexed_collections\">Next  »</a></li>\n</ul>\n<p>Expressões regulares são padrões utilizados para selecionar combinações de caracteres em uma string. Em JavaScript, expressões regulares também são objetos. Elas podem ser utilizadas com os métodos <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">exec (en-US)</a> e <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">test (en-US)</a> do objeto <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">RegExp (en-US)</a>, e com os métodos <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">match (en-US)</a>, <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">replace (en-US)</a>,<a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">search (en-US)</a>, e <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">split (en-US)</a> do objeto <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>. Este capítulo descreve o uso de expressões regulares em JavaScript.</p>"}},{"type":"prose","value":{"id":"criando_uma_expressão_regular","title":"Criando uma Expressão Regular","isH3":false,"content":"<p>Há duas maneiras de construir uma expressão regular:</p>\n<p>Usando uma expressão literal, que consiste em um padrão fechado entre barras, como o exemplo a seguir:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">ab+c</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>As expressões regulares na forma literal são compiladas quando o script é carregado. Esta forma de construção possui melhor performace quando a expressão regular utilizada é uma constante, ou seja, não muda durante a execução.</p>\n<p>Ou chamando o construtor do objeto <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> re <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ab+c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Usando o construtor, a compilação da expressão regular é realizada em tempo de execução. Use o construtor quando souber que o padrão da expressão regular irá mudar ou quando o padrão for desconhecido, oriundo de outra fonte, uma entrada de usuário por exemplo.</p>\n<blockquote>\n  <p><strong>Nota:</strong> Nota: Se você já está familiarizado com as formas de uma expressão regular, também pode ler o <a href=\"/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Cheatsheet\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">resumo (en-US)</a> para uma rápida pesquisa de um padrão específico.</p>\n</blockquote>"}},{"type":"prose","value":{"id":"escrevendo_um_padrão_de_expressão_regular","title":"Escrevendo um padrão de expressão regular","isH3":false,"content":"<p>Um padrão de expressão é composto por um conjunto de caracteres simples, como <code>/abc/</code>, ou uma combinação de caracteres simples e especiais, como <code>/ab*c/</code> ou <code>/Capitulo (\\d+)\\.\\d*/</code>. O último exemplo contém parênteses, que são usados como um mecanismo de armazenamento. A correspondência feita por essa parte da expressão é armazenada para uso posterior, como descrito em: <a href=\"#using_parenthesized_substring_matches\">Using Parenthesized Substring Matches</a>.</p>"}},{"type":"prose","value":{"id":"uso_de_padrões_simples","title":"Uso de Padrões Simples","isH3":true,"content":"<p>Padrões simples são construídos utilizando os caracteres que você deseja encontrar correspondências diretas. Por exemplo, o padrão <code>/abc/</code> encontra combinações de caracteres em strings apenas quando os caracteres 'abc' forem encontrados juntos e na ordem especificada. Esse padrão será encontrado com sucesso nas strings \"Olá, você conhece o <strong>abc</strong>?\" e \"Os mais recentes aviões evoluíram do sl<strong>abc</strong>raft.\". Em ambos os casos, a correspondência estará no subconjunto 'abc'. Porém, o padrão não será encontrado no texto \"Grab crab\" pois apesar de conter os mesmos caractes do padrão 'ab c', estes não aparecem na ordem especificada.</p>"}},{"type":"prose","value":{"id":"uso_dos_caracteres_especiais","title":"Uso dos Caracteres Especiais","isH3":true,"content":"<p>Quando for necessário buscar algo além de uma correspondência direta, como encontrar uma ou mais ocorrências da letra 'b', ou encontrar espaços em branco, será necessário adicionar caracteres especiais ao padrão. Por exemplo, para encontrar uma única correspondência de 'a' seguido de nenhum ou mais 'b's seguido de 'c', o padrão a utilizar seria <code>/ab*c/.</code> O caractere <code>*</code> seleciona zero ou mais ocorrências do item que o precede. Se aplicada ao texto 'cbb<strong>abbbbc</strong>debc', essa expressão regular encontraria o subconjunto grifado no texto.</p>\n<p>A tabela abaixo fornece uma lista completa dos caracteres especiais que podem ser utilizados nas expressões regulares, com sua respectiva descrição. Para testar os exemplos de expressão regular você pode usar o <a href=\"http://regexr.com/\" class=\"external\" rel=\" noopener\">regExr</a>.</p>\n<table class=\"fullwidth-table\">\n  <caption>Caracteres especiais utilizados em expressões regulares.</caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">Caractere</th>\n      <th scope=\"col\">Descrição</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"#special-backslash\" id=\"special-backslash\" name=\"special-backslash\"><code>\\</code></a></td>\n      <td>\n        <p>Aplicado conforme as seguintes regras:</p>\n        <p>\n          Uma barra invertida que preceda um caractere não especial significa\n          que o caractere seguinte é especial e não deve ser interpretado de\n          forma literal. Por exemplo, o caractere 'b' quando não precedido de\n          uma barra invertida significará uma ocorrência do próprio caractere\n          'b' minúsculo, porém se precedido da barra invertida\n          <code>'\\b'</code> ele passará a significar a ocorrência do caractere\n          especial\n          <a href=\"#special-word-boundary\">fronteira do caractere</a>.\n        </p>\n        <p>\n          Quando a barra invertida preceder um caractere especial isso\n          significará que o próximo caractere deve ser interpretado de forma\n          literal. Por exemplo o padrão <code>/a*/</code>, que selecionará a\n          ocorrência de zero ou mais caracteres 'a' quando utilizado sem a \\\n          para escape. Por outro lado no padrão <code>/a\\*/</code> o asterisco\n          deixa de ter seu significado especial, pois a '\\' de escape fará com\n          que o '*' seja interpretado de forma literal, passando o padrão a\n          selecionar o caractere 'a' seguido do caractere '*'.\n        </p>\n        <p>\n          Quando utilizar o construtor RegExp(\"padrao\"), não se esqueça de fazer\n          o escape do caractere \\, já que esse caractere é também utilizado como\n          caractere de escape em strings.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-caret\" id=\"special-caret\" name=\"special-caret\"><code>^</code></a></td>\n      <td>\n        <p>\n          Corresponde ao início do texto. Se a flag multilinhas é setada para\n          true, também se aplica imediatamente após um caractere de quebra de\n          linha.\n        </p>\n        <p>\n          Por exemplo, <code>/^A/</code> não corresponde ao 'A' em \"Um Alvo\",\n          mas corresponde ao 'A' em \"Alvo Encontrado\".\n        </p>\n        <p>\n          <br>Este caractere tem um significado diferente quando aparece como\n          o primeiro caractere em um conjunto padrão de caracteres. Veja\n          <a href=\"/pt-BR/docs/Web/JavaScript/Guide/Regular_Expressions#special-negated-character-set\" aria-current=\"page\">conjunto de caracteres negados ou complementados</a>\n          para detalhes e mais exemplos.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-dollar\" id=\"special-dollar\" name=\"special-dollar\"><code>$</code></a></td>\n      <td>\n        <p>\n          Corresponde ao final do texto. Se a flag multilinhas é setada para\n          true, também se aplica imediatamente antes de um caractere de quebra\n          de linha.\n        </p>\n        <p>\n          Por exemplo, <code>/r$/</code> não corresponde ao 'r' em \"corre\", mas\n          acha correspondência em \"correr\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-asterisk\" id=\"special-asterisk\" name=\"special-asterisk\"><code>*</code></a></td>\n      <td>\n        <p>\n          Corresponde a expressão que o precede repetida 0 ou mais vezes.\n          Equivalente a {0,}\n        </p>\n        <p>\n          Por exemplo, <code>/bo*/</code> acha uma correspondência para 'boooo'\n          em \"Scoob doo\" e 'b' em \"A bird warbled\", mas nenhuma em \"A goat\n          grunted\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-plus\" id=\"special-plus\" name=\"special-plus\"><code>+</code></a></td>\n      <td>\n        <p>\n          Corresponde a expressão que o precede repetido 1 ou mais vezes.\n          Equivalente a {1,}.\n        </p>\n        <p>\n          Por exemplo, <code>/a+/</code> acha correspondência para o 'a' em\n          \"candy\" e todos os \"as\" em \"caaaaaaandy\", mas nâo encontra em \"cndy\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-questionmark\" id=\"special-questionmark\" name=\"special-questionmark\"><code>?</code></a></td>\n      <td>\n        <p>\n          Corresponde a expressão que o precede repetido 0 ou 1 vez. Equivalente\n          à {0,1}.\n        </p>\n        <p>\n          Por exemplo, <code>/e?le?/</code> encontra o 'el' em \"angel\" e o 'le'\n          em \"angle\" e também o 'l' em \"oslo\".\n        </p>\n        <p>\n          Se usado imediatamente após qualquer um dos quantificadores\n          <code>*</code>, <code>+</code>, <code>? </code>ou <code>{}</code>, faz\n          o quantificador não guloso (combinando o número mínimo de vezes), como\n          um oposto para o padrão que é guloso (combinar o número máximo\n          possível). Por exemplo, aplicando <code>/\\d+/</code> em \"123abc\"\n          encontra \"123\". Mas aplicando <code>/\\d+?/</code>, apenas \"1\" será\n          encontrado.\n        </p>\n        <p>\n          Também usado em declarações lookahead, descritas sob\n          <code>x(?=y)</code> e <code>x(?!y)</code>logo abaixo na tabela.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-dot\" id=\"special-dot\" name=\"special-dot\"><code>.</code></a></td>\n      <td>\n        <p>\n          (O ponto decimal) corresponde com qualquer caracter, exceto o caracter\n          de nova linha.\n        </p>\n        <p>\n          Por exemplo, <code>/.n/</code> acha correspondência para o 'an' e 'on'\n          em \"nove dias restantes para onze de agosto.\", mas não encontra 'no'\n          em 'nove'.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-capturing-parentheses\" id=\"special-capturing-parentheses\" name=\"special-capturing-parentheses\"><code>(x)</code></a></td>\n      <td>\n        <p>\n          Pesquisa correspondência com o caractere 'x' e memoriza-o, como a o\n          exemplo a seguir mostra. Os parênteses são chamados\n          <em>parênteses de captura</em>.\n        </p>\n        <p>\n          Por exemplo, o '(foo)' e '(bar)' no padrão\n          <code>/(foo) (bar) \\1 \\2/</code> encontra e memoriza a primeira das\n          duas palavras na string \"foo bar foo bar\". O \\1 e \\2 no padrão combina\n          as duas últimas palavras da string. Note que \\1, \\2, \\n são utilizados\n          na parte correspondente do regex.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-non-capturing-parentheses\" id=\"special-non-capturing-parentheses\" name=\"special-non-capturing-parentheses\"><code>(?:x)</code></a></td>\n      <td>\n        Pesquisa correspondência com o caractere 'x' porém não o memoriza. Os\n        parênteses são chamados de<em> parênteses de não-captura</em> e permitem\n        que você defina uma subexpressão para operadores de expressão regular\n        trabalhar com eles. Considere essa expressão de exemplo\n        <code>/(?:foo){1,2}/</code>. Se a expressão era <code>/foo{1,2}/</code>,\n        o {1,2} poderia ser aplicado apenas para o último 'o' em 'foo'. Com os\n        parênteses de não-captura, o {1,2} é aplicado para toda a palavra 'foo'.\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-lookahead\" id=\"special-lookahead\" name=\"special-lookahead\"><code>x(?=y)</code></a></td>\n      <td>\n        <p>\n          Pesquisa correspondência em 'x' apenas se 'x' é seguido por 'y'. Isso\n          é chamado de <em>lookahead</em>.\n        </p>\n        <p>\n          Por exemplo, <code>/Jack(?=Sprat)/</code> busca 'Jack' apenas se é\n          seguido por 'Sprat'. <code>/Jack(?=Sprat|Frost)/</code> busca 'Jack'\n          apenas se ele é seguido por 'Sprat' ou 'Frost'. No entanto, 'Sprat'\n          nem 'Frost' faz parte do resultado retornado.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-negated-look-ahead\" id=\"special-negated-look-ahead\" name=\"special-negated-look-ahead\"><code>x(?!y)</code></a></td>\n      <td>\n        <p>\n          Pesquisa correspondência em 'x' apenas se 'x' não é seguido por 'y'.\n          Isso é chamado <em>negação lookahead</em>.\n        </p>\n        <p>\n          Por exemplo, <code>/\\d+(?!\\.)/</code> encontra um número apenas se ele\n          não for seguido por um ponto decimal. A expressão regular\n          <code>/\\d+(?!\\.)/.exec(\"3.141\")</code> encontra '141' mas não '3.141'.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-or\" id=\"special-or\" name=\"special-or\"><code>x|y</code></a></td>\n      <td>\n        <p>Pesquisa correspondência em 'x' ou 'y'.</p>\n        <p>\n          Por exemplo, <code>/verde|vermelha/</code> encontra 'verde' em \"maçã\n          verde\" e 'vermelha' em \"maçã vermelha.\"\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-quantifier\" id=\"special-quantifier\" name=\"special-quantifier\"><code>{n}</code></a></td>\n      <td>\n        <p>\n          Pesquisa n ocorrências correspondentes ao caracter precedido. Onde,\n          <code>n</code> deve ser um inteiro positivo.\n        </p>\n        <p>\n          Por exemplo, <code>/a{2}/</code> não encontra o 'a' em \"candy,\" mas\n          encontra-o se houver a quantidade de a's informarda em \"caandy,\" e os\n          dois primeiros a's em \"caaandy.\"\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-quantifier-range\" id=\"special-quantifier-range\" name=\"special-quantifier-range\"><code>{n,m}</code></a></td>\n      <td>\n        <p>\n          Pesquisa a n menor correspondência e a m maior correspondência do\n          caractere precedido. Quando n ou m é zero, ele poderá ser omitido.\n          Onde, <code>n</code> e <code>m</code> devem ser inteiros positivo.\n        </p>\n        <p>\n          Por exemplo, <code>/a{1,3}/</code> não encontra nada em \"cndy\", mas\n          encontra o 'a' em \"candy\", encontra os dois primeiros a's em \"caandy,\"\n          e encontra os três primeiros a's em \"caaaaaaandy\". Observe que, ao\n          fazer a correspondência de \"caaaaaaandy\", serão encontrados apenas os\n          \"aaa\", mesmo que a string tenha mais a's.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-character-set\" id=\"special-character-set\" name=\"special-character-set\"><code>[xyz]</code></a></td>\n      <td>\n        <p>\n          Um conjunto de caracteres. Pesquisa correspondência para qualquer um\n          dos caracteres entre colchetes. Você pode especificar um intervalo de\n          caracteres usando hífen. Caracteres especiais (como o ponto (.) e o\n          asterisco(*)) não tem significado algum quando está dentro de um\n          conjunto de caracteres. Não necessita utilizar escape neles. Mas, se\n          utilizar escape também irá funcionar.\n        </p>\n        <p>\n          Por exemplo, <code>[abcd]</code> é o mesmo que <code>[a-d]</code>. Com\n          a expressão será encontrado o 'b' em \"beijo\" e o 'c' em \"chop\". A\n          expressão <code>/[a-z.]+/</code> e <code>/[\\w.]+/</code> ambos\n          encontraram as letras que formam \"test.i.ng\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-negated-character-set\" id=\"special-negated-character-set\" name=\"special-negated-character-set\"><code>[^xyz]</code></a></td>\n      <td>\n        <p>\n          Um conjunto de caracteres negados ou complementados. Isto é, combina\n          com qualquer coisa que não esteja listado entre os colchetes. Você\n          pode especificar um intervalo de caracteres usando hífen. Tudo que\n          funciona no conjunto de caracteres (apresentado acima) também funciona\n          aqui.\n        </p>\n        <p>\n          Por exemplo, <code>[^abc]</code> é o mesmo que <code>[^a-c]</code>.\n          Com a expressão será encontrado inicialmente 'e' em \"beijo\" e 'h' em\n          \"chop.\"\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-backspace\" id=\"special-backspace\" name=\"special-backspace\"><code>[\\b]</code></a></td>\n      <td>\n        Pesquisa correspondência com espaço em branco (U+0008). É preciso\n        utilizar os colchetes se você quer encontrar um espaço em branco. (Não\n        confunda-o com <code>\\b</code>.)\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-word-boundary\" id=\"special-word-boundary\" name=\"special-word-boundary\"><code>\\b</code></a></td>\n      <td>\n        <p>\n          Pesquisa correspondência em uma fronteira de caractere. Uma fronteira\n          de caractere corresponde a posição onde um caractere/palavra não é\n          seguido ou antecedido por outro caractere/palavra. Isto é, em\n          fronteira de caractere não pode haver nenhum caractere ou espaço, seu\n          tamanho deve ser vazio. (não confunda-o com [\\b].)\n        </p>\n        <p>\n          Exemplos:<br><code>/\\bmoo/</code> encontra a substring 'moo' em\n          \"moon\" ;<br><code>/oo\\b/</code> não encontra o 'oo' em \"moon\",\n          devido o 'oo' ser seguido por 'n' que é um caractere;<br><code>/oon\\b/</code>\n          encontra a substring 'oon' em \"moon\", devido 'oon' ser o fim da\n          string, ou seja, não é seguido por nenhum caractere;<br><code>/\\w\\b\\w/</code>\n          não encontrará nada, pois o caractere nunca será seguido por um não\n          caractere e um caractere.\n        </p>\n        <div class=\"note notecard\" id=\"sect1\">\n          <p>\n            <strong>Nota:</strong> O mecanismo de expressão regular no\n            JavaScript define um conjunto específico de caracteres para serem\n            caracteres \"palavras\". Qualquer caractere que não esteja neste\n            conjunto é considerado uma quebra de palavra. Este conjunto de\n            caractere é bastante limitado: consiste apenas no alfabeto romano\n            tanto maiúsculo como minúsculo, digítos decimais, e o caractere\n            sublinhado. Caracteres acentuados, tal como \"é\" ou \"ã\" são,\n            infelizmente, tratados como palavras quebradas.\n          </p>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-non-word-boundary\" id=\"special-non-word-boundary\" name=\"special-non-word-boundary\"><code>\\B</code></a></td>\n      <td>\n        <p>\n          Pesquisa correspondência que não seja em uma fronteira de caractere.\n          Para a correspondência é associada uma posição onde o caractere\n          anterior e o próximo tem as mesmas características: ambos são\n          caractere/palavra, ou ambos não sejam caractere/palavra. O início e o\n          fim de uma string não considerados como não caractere/palavra.\n        </p>\n        <p>\n          Por exemplo, /\\B../ encontra correspondente 'oo' em \"boolean\", e\n          /y\\B./ encontra correspondente 'ye' em \"possibly yesterday.\"\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-control\" id=\"special-control\" name=\"special-control\"><code>\\c<em>X</em></code></a></td>\n      <td>\n        <p>\n          Onde X é um caractere pertencente ao conjunto A-Z. Encontra\n          correspondência de um\n          <a href=\"https://pt.wikipedia.org/wiki/Caractere_de_controle\" class=\"external\" rel=\" noopener\">caractere de controle</a>\n          em uma string.\n        </p>\n        <p>\n          Por exemplo, <code>/\\cM/</code> encontra correspondente control-M\n          (U+000D) em uma string.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-digit\" id=\"special-digit\" name=\"special-digit\"><code>\\d</code></a></td>\n      <td>\n        <p>Encontra correspondência com um número. Equivalente a [0-9].</p>\n        <p>\n          Por exemplo, <code>/\\d/</code> ou <code>/[0-9]/</code> encontra\n          correspondente '8' em \"Dróide BB8\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-non-digit\" id=\"special-non-digit\" name=\"special-non-digit\"><code>\\D</code></a></td>\n      <td>\n        <p>\n          Encontra correspondência com um caractere que não seja número.\n          Equivalente a [^0-9].\n        </p>\n        <p>\n          Por exemplo, <code>/\\D/</code> ou <code>/[^0-9]/</code> econtra\n          correspondente 'C' em \"C3 está ativada.\"\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-form-feed\" id=\"special-form-feed\" name=\"special-form-feed\"><code>\\f</code></a></td>\n      <td>\n        Encontra correspondência com um caractere de escape\n        <em>avanço de página</em> (U+000C).\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-line-feed\" id=\"special-line-feed\" name=\"special-line-feed\"><code>\\n</code></a></td>\n      <td>\n        Encontra correspondência com um caractere de escape\n        <em>quebra de linha</em> (U+000A).\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-carriage-return\" id=\"special-carriage-return\" name=\"special-carriage-return\"><code>\\r</code></a></td>\n      <td>\n        Encontra correspondência com um caractere de escape\n        <em>retorno de carro</em> (U+000D).\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-white-space\" id=\"special-white-space\" name=\"special-white-space\"><code>\\s</code></a></td>\n      <td>\n        <p>\n          Encontra correspondência com um único caractere de espaço em branco,\n          espaço, tabulação, avanço de página, quebra de linha. Equivalente a\n          <code>[\n\\f\\n\\r\\t\\v​\\u00A0\\u1680​\\u180e\\u2000​\\u2001\\u2002​\\u2003\\u2004​\\u2005\\u2006​\\u2007\\u2008​\\u2009\\u200a​\\u2028\\u2029​\\u2028\\u2029​\\u202f\\u205f​\\u3000]</code>.\n        </p>\n        <p>\n          Por exemplo, <code>/\\s\\w*/</code> encontra correspondente ' bar' em\n          \"foo bar.\"\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-non-white-space\" id=\"special-non-white-space\" name=\"special-non-white-space\"><code>\\S</code></a></td>\n      <td>\n        <p>\n          Encontra correspondência em um único caractere que não seja espaço em\n          branco. Equivalente a\n          <code>[^\n\\f\\n\\r\\t\\v​\\u00A0\\u1680​\\u180e\\u2000​\\u2001\\u2002​\\u2003\\u2004​\\u2005\\u2006​\\u2007\\u2008​\\u2009\\u200a​\\u2028\\u2029​\\u2028\\u2029​\\u202f\\u205f​\\u3000]</code>.\n        </p>\n        <p>\n          Por exemplo, <code>/\\S\\w*/</code> encontra correspondente 'foo' em\n          \"foo bar.\"\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-tab\" id=\"special-tab\" name=\"special-tab\"><code>\\t</code></a></td>\n      <td>Encontra correspondência em uma tabulação (U+0009).</td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-vertical-tab\" id=\"special-vertical-tab\" name=\"special-vertical-tab\"><code>\\v</code></a></td>\n      <td>Encontra correspondência em uma tabulação vertical (U+000B).</td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-word\" id=\"special-word\" name=\"special-word\"><code>\\w</code></a></td>\n      <td>\n        <p>\n          Encontra correspondência de qualquer caractere alfanumérico incluindo\n          underline. Equivalente a <code>[A-Za-z0-9_]</code>.\n        </p>\n        <p>\n          Por exemplo, <code>/\\w/</code> encontra correspondente 'a' em \"apple,\"\n          '5' em \"$5.28,\" e '3' em \"3D.\"\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-non-word\" id=\"special-non-word\" name=\"special-non-word\"><code>\\W</code></a></td>\n      <td>\n        <p>\n          Encontra correspondência em um não caractere. Equivalente a\n          <code>[^A-Za-z0-9_]</code>.\n        </p>\n        <p>\n          Por exemplo, <code>/\\W/</code> ou\n          <code>/[^A-Za-z0-9_]/</code> encontra correspondente '%' em \"50%.\"\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-backreference\" id=\"special-backreference\" name=\"special-backreference\"><code>\\<em>num</em></code></a></td>\n      <td>\n        <p>\n          Onde num é um inteiro positivo. Faz referência a substring pertencente\n          à um grupo, um grupo é definido entre parênteses. Grupos são numerados\n          de 1 até 9.\n        </p>\n        <p>\n          Por exemplo, /(muito) (cacique) pra \\2 \\1/ encontra 'muito cacique pra\n          cacique muito' em 'Na aldeia tem muito cacique pra cacique muito.'\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-null\" id=\"special-null\" name=\"special-null\"><code>\\0</code></a></td>\n      <td>\n        Encontra correspondência em um caractere NULL (U+0000). Não adicione\n        outro número após o zero, pois\n        <code>\\0&lt;digitos&gt; é um escape para número octal</code>.\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-hex-escape\" id=\"special-hex-escape\" name=\"special-hex-escape\"><code>\\xhh</code></a></td>\n      <td>Encontra correspondência com o código hh (dois valores hexadecimal).</td>\n    </tr>\n    <tr>\n      <td><a href=\"#special-unicode-escape\" id=\"special-unicode-escape\" name=\"special-unicode-escape\"><code>\\uhhhh</code></a></td>\n      <td>Encontra correspondência com o código hhh (três valores hexadecimal).</td>\n    </tr>\n    <tr>\n      <td>\\u{hhhh}</td>\n      <td>\n        (funciona apenas com a flag u) Encontra correspondência com o valor\n        Unicode hhhh (dígitos hexadecimais).\n      </td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"usando_parênteses","title":"Usando Parênteses","isH3":true,"content":"<p>Usar parênteses em volta de qualquer parte de uma expressão regular faz com que essa parte seja lembrada para ser usada depois, como descrito em <a href=\"#using_parenthesized_substring_matches\">Usando as Substrings entre Parênteses na Expressão Regular</a>.</p>\n<p>Por Exemplo, a expressão <code>/Capitulo (\\d+)\\.\\d*/</code> ilustra caracteres adicionais escapados e especiais e indica que parte do padrão deve ser lembrado. Corresponde precisamente aos caracteres 'Capitulo ' seguidos por um ou mais caracteres numéricos (<code>\\d</code> significa qualquer caracter numérico e <code>+</code> significa 1 ou mais vezes), seguidos por um ponto decimal (que é um caracter especial; preceder com um \\ significa que a expressão regular deve buscar pelo caracter literal '.'), seguido por qualquer caracter numérico 0 ou mais vezes (<code>\\d</code> significa caracter numérico, <code>*</code> significa 0 ou mais vezes). Além disso, os parenteses são usados para relembrar os primeiros caracteres numéricos correspondentes.</p>\n<p>Esse padrão é encontrado em \"Abra o capitulo 4.3, parágrafo 6\" o '4' é relembrado. O padrão não é encontrado em \"Capitulo 3 e 4\", porque essa string não tem um período após o '3'.</p>\n<p>Para encontrar uma substring sem que a correspondência seja relembrada, dentro dos parênteses inicie o padrão com <code>?:</code>. Por exemplo, <code>(?:\\d+)</code> corresponde a um ou mais caracteres numéricos mas não relembra os caracteres correspondentes.</p>"}},{"type":"prose","value":{"id":"trabalhando_com_expressões_regulares","title":"Trabalhando com expressões regulares","isH3":false,"content":"<p>Expressões Regulares são usadas com os metodos <code>test</code> e <code>exec</code> do objeto <code>RegExp</code>e com os metodos <code>match</code>, <code>replace</code>, <code>search</code>, e <code>split</code> do objeto <code>String</code>. Estes metodos são explicados em detalhe em <a href=\"/pt-BR/docs/Web/JavaScript/Reference\">JavaScript Reference</a>.</p>\n<table>\n  <thead>\n    <tr>\n      <th>Metodo</th>\n      <th>Descrição</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>exec</code></a></td>\n      <td>Um método <code>RegExp</code> que execute uma pesquisa por uma correspondência em uma string. Retorna um array de informações.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"><code>test</code></a></td>\n      <td>Um método <code>RegExp</code> que testa uma correspondência em uma string. Retorna true ou false.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>match</code></a></td>\n      <td>Um método <code>String</code> que executa uma pesquisa por uma correspondência em uma string. Retorna uma array de informações ou null caso não haja uma correspondência.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search\"><code>search</code></a></td>\n      <td>Um método <code>String</code> que testa uma correspondência em uma string. Retorna o indice da correspondência ou -1 se o teste falhar.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>replace</code></a></td>\n      <td>Um método <code>String</code> que executa uma pesquisa por uma correspondência em uma string, e substitui a substring correspondênte por uma substring de substituição.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code>split</code></a></td>\n      <td>Um método <code>String</code> que usa uma expressão regular ou uma string fixa para quebrar uma string dentro de um array de substrings.</td>\n    </tr>\n  </tbody>\n</table>\n<p>Quando você quer saber se um padrão é encontrado em uma string, use o método <code>test</code> ou <code>search</code>; para mais informações (mas execução mais lenta) use o método <code>exec</code> ou <code>match</code>. Se você usar <code>exec</code> ou <code>match</code> e se houver correspondência, estes métodos retornam um array e atualizam as propriedades do objeto da expressão regular associada e também do objeto da expressão regular predfinada <code>RegExp</code>. Se não houver corespondência, o método <code>exec</code> retorna <code>null</code> (convertido para <code>false</code>).</p>\n<p>No seguinte exemplo, o script usa o método <code>exec</code> para encontrar uma correspondência em uma string.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myRe <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">d(b+)d</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myArray <span class=\"token operator\">=</span> myRe<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cdbbdbsbz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Se você não precisa acessar as propriedades da expressão regular, uma alternativa de criar <code>myArray</code> é com esse script:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myArray <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">d(b+)d</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cdbbdbsbz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Se você quiser construir a expressão regular a partir de uma string, outra alternativa é esse script:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myRe <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d(b+)d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myArray <span class=\"token operator\">=</span> myRe<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cdbbdbsbz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Com esses scripts, a correspondência é encontrada o array é retornado e são atualizadas as propriedades mostradas na tabela a seguir.</p>\n<table class=\"fullwidth-table\">\n  <caption>Table 4.3 Resultados da execução de expressões regulares.</caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">Objeto</th>\n      <th scope=\"col\">Propriedade or indice</th>\n      <th scope=\"col\">Descrição</th>\n      <th scope=\"col\">Nesse exemplo</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td rowspan=\"4\"><code>myArray</code></td>\n      <td></td>\n      <td>A string correspondente e todas as substrings relembradas.</td>\n      <td><code>[\"dbbd\", \"bb\"]</code></td>\n    </tr>\n    <tr>\n      <td><code>index</code></td>\n      <td>O índice do encontro em relação à string original.</td>\n      <td><code>1</code></td>\n    </tr>\n    <tr>\n      <td><code>input</code></td>\n      <td>A string original.</td>\n      <td><code>\"cdbbdbsbz\"</code></td>\n    </tr>\n    <tr>\n      <td><code>[0]</code></td>\n      <td>Os últimos caracteres encontrados.</td>\n      <td><code>\"dbbd\"</code></td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\"><code>myRe</code></td>\n      <td><code>lastIndex</code></td>\n      <td>\n        O índice no qual iniciar a próxima partida. (Esta propriedade é\n        configurada apenas se a expressão regular usar a opção g, descrita em\n        <a href=\"#_advanced_searching_with_flags\">Advanced Searching With Flags</a>.)\n      </td>\n      <td><code>5</code></td>\n    </tr>\n    <tr>\n      <td><code>source</code></td>\n      <td>\n        O texto da expressão regular. Atualizado quando a expressão é criada,\n        não executada.\n      </td>\n      <td><code>\"d(b+)d\"</code></td>\n    </tr>\n  </tbody>\n</table>\n<p>Como mostrado na segunda forma deste exemplo, você pode usar uma expressão regular criada com um inicializador de objeto sem atribuí-la à uma variável. Contudo, se você o fizer, toda ocorrência é uma nova expressão regular. Assim sendo, se você usar esta forma sem atribuí-la à uma variável, você não pode subsequentemente acessar as propriedades da expressão regular. Assumamos que tenha este script, por exemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myRe <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">d(b+)d</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myArray <span class=\"token operator\">=</span> myRe<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cdbbdbsbz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"O útltimo índice é \"</span> <span class=\"token operator\">+</span> myRe<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Este script mostra:</p>\n<pre class=\"notranslate\">O último índice é 5\n</pre>\n<p>Contudo, se tem este script:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myArray <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">d(b+)d</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cdbbdbsbz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"O último índice é \"</span> <span class=\"token operator\">+</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">d(b+)d</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Ele mostra:</p>\n<pre class=\"notranslate\">O último índice é 0\n</pre>\n<p>As ocorrências de <code>/d(b+)d/g</code> nas duas declarações são objetos expressões regulares diferentes e consequentemente têm diferentes valores para suas propriedades <code>lastIndex</code>. Se precisa acessar as propriedades de uma expressão regular criada com um inicializaor de objeto, você deve primeiro atribuí-la à uma variável.</p>"}},{"type":"prose","value":{"id":"usando_as_substrings_entre_parênteses_na_expressão_regular","title":"Usando as Substrings entre Parênteses na Expressão Regular","isH3":true,"content":"<p>A inclusão de parênteses em um padrão de expressão regular faz com que a sub-correspondência correspondente seja lembrada. Por exemplo, <code>/a(b)c/</code> corresponde aos caracteres 'abc' e lembra 'b'. Para recuperar essas correspondências de substring entre parênteses, use o <code>Arra[1]</code>, ..., <code>[n]</code>.</p>\n<p>O número de substring entre parênteses possíveis é ilimitado. A matriz retornada contém tudo o que foi encontrado. Os exemplos a seguir ilustram como usar parênteses entre parênteses.</p>\n<h4 id=\"exemplo_1\">Exemplo 1</h4>\n<p>O script a seguir usa o método <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">replace() (en-US)</a> para alternar as palavras na string. Para o texto de substituição, o script usa o <code>$1</code> e <code>$2</code> na substituição para indicar a primeira e a segunda correspondências de substring entre parênteses.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(\\w+)\\s(\\w+)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"John Smith\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> newstr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">,</span> <span class=\"token string\">\"$2, $1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Isto imprime \"Smith, John\".</p>"}},{"type":"prose","value":{"id":"pesquisa_avançada_com_flags","title":"Pesquisa avançada com Flags","isH3":true,"content":"<p>As expressões regulares possuem quatro flags opcionais as quais se incluem a pesquisa global e case insensitive. Para realizar uma pesquisa global, utilize a flag g. Para realizar uma pesquisa sem diferenciar letras maiúsculas de minúsculas, utilize a flag i. Para realizar uma pesquisa multi-linhas, utilize a flag m. Ao realizar uma pesquisa \"sticky\", o ponto de partida será a posição corrente da string alvo, use com a flag y.Estas flags podem ser usadas separadamente ou juntas, em qualquer ordem, e serão inclusas como parte da expressão regular.</p><div class=\"notecard note\" id=\"sect2\"><p><strong>Firefox 3 note:</strong> Suporte para o sinalizador <code>y </code>foi adicionado no Firefox 3. <br>\n O sinalizador <code>y </code>falha se a correspondência não for bem-sucedida na posição atual na cadeia de destino.</p></div>\n<p>Para incluir um sinalizador com a expressão regular, use esta sintaxe:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>pattern<span class=\"token operator\">/</span>flags<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ou</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pattern\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"flags\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Observe que os sinalizadores são parte integrante de uma expressão regular. Eles não podem ser adicionados ou removidos posteriormente.</p>\n<p>Por exemplo, <code>re = /\\w+\\s/g</code> cria uma expressão regular que procura um ou mais caracteres seguidos por um espaço e procura essa combinação em toda a cadeia.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\w+\\s</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"fee fi fo fum\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myArray <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Isso exibe [\"fee \", \"fi \", \"fo \"]. Neste exemplo, você pode substituir a linha</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\w+\\s</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>por:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\w+\\\\s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>e obtenha o mesmo resultado.</p>\n<p>O sinalizador <code>m</code> é usado para especificar que uma sequência de entrada de múltiplas linhas deve ser tratada como várias linhas. Se o sinalizador <code>m</code> for usado, <code>^</code> e <code>$</code> combinam no início ou no final de qualquer linha na sequência de entrada, em vez do início ou no final de toda a sequência.</p>"}},{"type":"prose","value":{"id":"exemplos","title":"Exemplos","isH3":false,"content":"<p>Os exemplos que se seguem mostram mais usos expressões regulares.</p>"}},{"type":"prose","value":{"id":"alterando_o_pedido_em_uma_string_de_entrada","title":"Alterando o pedido em uma string de entrada","isH3":true,"content":"<p>O exemplo a seguir ilustra a formação de expressões regulares e o uso de <code>string.split()</code> e <code>string.replace()</code>. Ela limpa uma string de entrada formatada com nomes (primeiro nome sobrenome) separados por espaço em branco, tabulações e exatamente um ponto e virgula. Por fim, inverte a ordem do nome (sobrenome e primeiro nome) e ordena a lista</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// A cadeia de nomes contém vários espaços e guias,</span>\n<span class=\"token comment\">// e pode ter vários espaços entre o nome e o sobrenome.</span>\n<span class=\"token keyword\">var</span> names <span class=\"token operator\">=</span> <span class=\"token string\">\"Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ; Chris Hand \"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"---------- String original\\n\"</span><span class=\"token punctuation\">,</span> names <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Prepare dois padrões de expressão regular e armazenamento em array.</span>\n<span class=\"token comment\">// Divide a string em elementos da matriz.</span>\n\n<span class=\"token comment\">// pattern: possível espaço em branco, em seguida, ponto e vírgula, em seguida, possível espaço em branco</span>\n<span class=\"token keyword\">var</span> pattern <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\s*;\\s*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Quebra string em pedaços separados pelo padrão acima e</span>\n<span class=\"token comment\">// armazene as partes em uma matriz chamada nameList</span>\n<span class=\"token keyword\">var</span> nameList <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// new pattern: um ou mais caracteres, espaços e caracteres.</span>\n<span class=\"token comment\">// Use parênteses para \"memorizar\" partes do padrão.</span>\n<span class=\"token comment\">// As partes memorizadas são referenciadas mais tarde.</span>\npattern <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(\\w+)\\s+(\\w+)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Nova matriz para armazenar nomes sendo processados.</span>\n<span class=\"token keyword\">var</span> bySurnameList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Exibe a matriz de nomes e preenche a nova matriz</span>\n<span class=\"token comment\">// com nomes separados por vírgula, último primeiro.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// O método replace remove qualquer coisa que corresponda ao padrão</span>\n<span class=\"token comment\">// e substitui-o pela sequência memorizada - segunda parte memorizada</span>\n<span class=\"token comment\">// seguido por espaço de vírgula seguido pela primeira parte memorizada.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// As variáveis ​​$ 1 e $ 2 se referem às partes</span>\n<span class=\"token comment\">// memorizado enquanto corresponde ao padrão.</span>\n\noutput<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------- Após Separar pela Expressão Regular\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> i<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> nameList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nameList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  bySurnameList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nameList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span> <span class=\"token string\">\"$2, $1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Exibe a nova matriz.</span>\noutput<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------- Nomes Invertidos\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> bySurnameList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>bySurnameList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Classifica pelo sobrenome e exibe a matriz classificada.</span>\nbySurnameList<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noutput<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------- Ordenado\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> bySurnameList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>bySurnameList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\noutput<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------- Fim\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"usando_caracteres_especiais_para_verificar_entradas","title":"Usando caracteres especiais para verificar entradas","isH3":true,"content":"<p>No exemplo a seguir, é esperado que o usuário informe um número de telefone. Quando o usuário pressionar o botão \"Check\", o script verificará a validade do número. Se o número for válido (a sequência de caracteres especificada corresponderá a expressão regular), então, o script exibe uma mensagem agradecendo o usuário e confirmando o seu número. Se o número for inválido, o script informa ao usuário que o número de telefone não é válido.</p>\n<p>A expressão regular procura por zero ou uma ocorrência de parênteses de abertura \\(?, seguido de três dígitos \\d{3}, seguido de zero ou uma ocorrência de parênteses de fechamento \\)?, seguido de um hífen, barra ou ponto decimal e, quando encontrado, guarda o caractere ([-\\/\\.]), seguido de três dígitos \\d{3}, seguido por um caractere de hífen, barra ou ponto decimal que fora guardado \\1, seguido por quatro dígitos \\d{4}.</p>\n<p>Com o evento Change ativo, quando o usuário pressionar Enter, o valor será capturado por RegExp.input.</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Content-Type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/html; charset=ISO-8859-1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Content-Script-Type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\(?\\d{3}\\)?([-\\/\\.])\\d{3}\\1\\d{4}</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">function</span> <span class=\"token function\">testInfo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">phoneInput</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> <span class=\"token constant\">OK</span> <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>phoneInput<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token constant\">OK</span><span class=\"token punctuation\">)</span>\n          window<span class=\"token punctuation\">.</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>RegExp<span class=\"token punctuation\">.</span>input <span class=\"token operator\">+</span> <span class=\"token string\">\" Não é um número de telefone com código de área!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n          window<span class=\"token punctuation\">.</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Obrigado, o seu número de telefone é \"</span> <span class=\"token operator\">+</span> <span class=\"token constant\">OK</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Informe o seu número de telefone (com código de área) e então clique em \"Check\".\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>O formato esperado é ###-###-####.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>phone<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">testInfo</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'phone'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>Check<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/pt-BR/docs/Web/JavaScript/Guide/Text_formatting\">« Previous</a></li>\n    <li><a class=\"button minimal\" href=\"/pt-BR/docs/Web/JavaScript/Guide/Indexed_collections\">Next  »</a></li>\n</ul>"}}],"toc":[{"text":"Criando uma Expressão Regular","id":"criando_uma_expressão_regular"},{"text":"Escrevendo um padrão de expressão regular","id":"escrevendo_um_padrão_de_expressão_regular"},{"text":"Trabalhando com expressões regulares","id":"trabalhando_com_expressões_regulares"},{"text":"Exemplos","id":"exemplos"}],"summary":"Expressões regulares são padrões utilizados para selecionar combinações de caracteres em uma string. Em JavaScript, expressões regulares também são objetos. Elas podem ser utilizadas com os métodos exec (en-US) e test (en-US) do objeto RegExp (en-US), e com os métodos match (en-US), replace (en-US),search (en-US), e split (en-US) do objeto String. Este capítulo descreve o uso de expressões regulares em JavaScript.","popularity":0.0067,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Regular expressions","locale":"en-US","native":"English (US)"},{"title":"Expresiones Regulares","locale":"es","native":"Español"},{"title":"Expressions rationnelles","locale":"fr","native":"Français"},{"title":"正規表現","locale":"ja","native":"日本語"},{"title":"정규 표현식","locale":"ko","native":"한국어"},{"title":"Регулярные выражения","locale":"ru","native":"Русский"},{"title":"正则表达式","locale":"zh-CN","native":"中文 (简体)"},{"title":"正規表達式","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"pt-br/web/javascript/guide/regular_expressions","github_url":"https://github.com/mdn/translated-content/blob/main/files/pt-br/web/javascript/guide/regular_expressions/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/pt-BR/docs/Web","title":"Tecnologia Web para desenvolvedores"},{"uri":"/pt-BR/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/pt-BR/docs/Web/JavaScript/Guide","title":"Guia JavaScript"},{"uri":"/pt-BR/docs/Web/JavaScript/Guide/Regular_Expressions","title":"Expressões Regulares"}],"pageTitle":"Expressões Regulares - JavaScript | MDN","noIndexing":false}}