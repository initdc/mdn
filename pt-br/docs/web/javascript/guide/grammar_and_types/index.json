{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Sintaxe e tipos","mdn_url":"/pt-BR/docs/Web/JavaScript/Guide/Grammar_and_types","locale":"pt-BR","native":"Português (do Brasil)","sidebarHTML":"\n <ol>\n  <li><a href=\"/pt-BR/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/pt-BR/docs/Web/JavaScript/Tutorials\"><strong>Tutoriais:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Completos iniciantes</summary>\n      <ol>\n        <li><a href=\"/pt-BR/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">O básico de JavaScript</a></li>\n        <li><a href=\"/pt-BR/docs/Learn/JavaScript/First_steps\">Primeiros passos com JavaScript</a></li>\n        <li><a href=\"/pt-BR/docs/Learn/JavaScript/Building_blocks\">Blocos de construção de JavaScript</a></li>\n        <li><a href=\"/pt-BR/docs/Learn/JavaScript/Objects\">Introdução a objetos JavaScript</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Guia de JavaScript</summary>\n      <ol>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Introduction\">Introdução</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Grammar_and_Types\">Gramática e tipos</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Controle de fluxo e tratamento de erros</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Loops_and_iteration\">Repetição e iteração</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Functions\">Funções</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressões e operadores</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Numbers_and_dates\">Números e datas</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Text_formatting\">Formatação de texto</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Regular_Expressions\">Expressões Regulares</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Indexed_collections\">Coleções indexadas</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Keyed_collections\">Coleções com chave (chave-valor)</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Working_with_Objects\">Trabalhando com objetos</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Detalhes do modelo de objetos</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Using_promises\">Usando \"promises\"</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Iterators_and_generators\">Iteradores e geradores</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Meta_programming\">Metaprogramação</a></li>\n          <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Intermediário</summary>\n      <ol>\n        <li><a href=\"/pt-BR/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/pt-BR/docs/Learn/JavaScript/Client-side_web_APIs\">APIs Web para aplicações Cliente</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">Uma reintrodução a JavaScript</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Data_structures\">Estruturas de dados de JavaScript</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Comparadores de igualdade e semelhança</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Closures\">Closures</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Avançado</summary>\n      <ol>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Herança e a cadeia de \"prototype\"</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode - Modo estrito</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Typed_arrays\">Arranjos tipados em JavaScript</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Memory_Management\">Gerenciamento de memória</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/EventLoop\">Modelo de concorrência e Loop de Eventos</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/pt-BR/docs/Web/JavaScript/Reference\">Referências:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Objetos pré-definidos</summary>\n        <ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Expressões e operadores</summary>\n      <ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Afirmações e declarações</summary>\n      <ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Funções</summary>\n      <ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Erros</summary>\n      <ol><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Mais conteúdo</summary>\n      <ol>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/JavaScript_technologies_overview\">Visão geral das Tecnologias JavaScript</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Lexical_grammar\">Gramática léxica</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Data_structures\">Estruturas de dados de JavaScript</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Enumerabilidade e domínio de propriedades</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Iteration_protocols\">Protocolos de iteração</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode - Modo estrito</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Migrando para o \"strict mode\"</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Template_literals\">Template literals</a></li>\n        <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Funcionalidades depreciadas</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/pt-BR/docs/Web/JavaScript/Guide/Introduction\">« Previous</a></li>\n    <li><a class=\"button minimal\" href=\"/pt-BR/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Next  »</a></li>\n</ul>\n<p>Este capítulo trata sobre a sintaxe básica do JavaScript, declarações de variáveis, tipos de dados e literais.</p>"}},{"type":"prose","value":{"id":"sintaxe_básica","title":"Sintaxe básica","isH3":false,"content":"<p>JavaScript pega emprestado a maior parte de sua sintaxe do Java, mas também é influenciado por Awk, Perl e Python.</p>\n<p>JavaScript é <strong>case-sensitive</strong> e usa o conjunto de caracteres <strong>Unicode.</strong> Por exemplo, a palavra Früh (que significa \"cedo\" em Alemão) pode ser usada como nome de variável.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> Früh <span class=\"token operator\">=</span> <span class=\"token string\">\"foobar\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Mas a variável <code>früh</code> não é a mesma que <code>Früh</code> porque JavaScript é case sensitive.</p>\n<p>No JavaScript, instruções são chamadas de <a href=\"/pt-BR/docs/Glossary/Statement\">declaração</a> e são separadas por um ponto e vírgula (;). Espaços, tabulação e uma nova linha são chamados de espaços em branco. O código fonte dos scripts em JavaScript são lidos da esquerda para a direita e são convertidos em uma sequência de elementos de entrada como simbolos, caracteres de controle, terminadores de linha, comentários ou espaço em branco. ECMAScript também define determinadas palavras-chave e literais, e tem regras para inserção automática de ponto e vírgula (<a href=\"/pt-BR/docs/Web/JavaScript/Reference/Lexical_grammar#automatic_semicolon_insertion\">ASI</a>) para terminar as declarações. No entanto, recomenda-se sempre adicionar ponto e vírgula no final de suas declarações; isso evitará alguns imprevistos. Para obter mais informações, consulte a referência detalhada sobre a <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Lexical_grammar\">gramática léxica</a> do JavaScript.</p>"}},{"type":"prose","value":{"id":"comentários","title":"Comentários","isH3":false,"content":"<p>A sintaxe dos comentários em JavaScript é semelhante como em C++ e em muitas outras linguagens:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// comentário de uma linha</span>\n\n<span class=\"token comment\">/* isto é um comentário longo\n   de múltiplas linhas.\n */</span>\n\n<span class=\"token comment\">/* Você não pode, porém, /* aninhar comentários */</span> SyntaxError <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"declarações","title":"Declarações","isH3":false,"content":"<p>Existem três tipos de declarações em JavaScript.</p>\n<dl>\n  <dt id=\"var\"><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/var\"><code>var</code></a></dt>\n  <dd>\n    <p>Declara uma variável, opcionalmente, inicializando-a com um valor.</p>\n  </dd>\n  <dt id=\"sect1\"><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg> <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code></a></dt>\n  <dd>\n    <p>Declara uma variável local de escopo do bloco, opcionalmente, inicializando-a com um valor.</p>\n  </dd>\n  <dt id=\"sect2\"><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg> <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/const\"><code>const</code></a></dt>\n  <dd>\n    <p>Declara uma constante de escopo de bloco, apenas de leitura.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"variáveis","title":"Variáveis","isH3":true,"content":"<p>Você usa variáveis como nomes simbólicos para os valores em sua aplicação. O nome das variáveis, chamados de <a href=\"/pt-BR/docs/Glossary/Identifier\">identificadores</a>, obedecem determinadas regras.</p>\n<p>Um identificador JavaScript deve começar com uma letra, underline (<code>_</code>), ou cifrão (<code>$</code>); os caracteres subsequentes podem também ser números (0-9). Devido JavaScript ser case-sensitive, letras incluem caracteres de \"A\" a \"Z\" (maiúsculos) e caracteres de \"a\" a \"z\" (minúsculos).</p>\n<p>Você pode usar a ISO 8859-1 ou caracteres Unicode tal como os identificadores å e ü. Você pode também usar as <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Lexical_grammar#string_literals\">sequências de escape Unicode</a> como caracteres e identificadores.</p>\n<p>Alguns exemplos de nomes legais são <code>Numeros_visitas</code>, <code>temp99</code>, e <code>_nome</code>.</p>"}},{"type":"prose","value":{"id":"declarando_variáveis","title":"Declarando variáveis","isH3":true,"content":"<p>Você pode declarar uma variável de três formas:</p>\n<ul>\n  <li>Com a palavra chave <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/var\"><code>var</code></a>. Por exemplo, var <code>x = 42</code>. Esta sintaxe pode ser usada para declarar tanto variáveis locais como variáveis globais.</li>\n  <li>Por simples adição de valor. Por exemplo, <code>x = 42</code>. Isso declara uma variável global. Essa declaração gera um aviso de advertência no JavaScript. Você não deve usar essa variante.</li>\n  <li>Com a palavra chave <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code></a>. Por exemplo, <code>let y = 13</code>. Essa sintaxe pode ser usada para declarar uma variável local de escopo de bloco. Veja <a href=\"/pt-BR/docs/Web/JavaScript/Guide/Grammar_and_Types#Variable_scope\" aria-current=\"page\">escopo de variável</a> abaixo.</li>\n</ul>"}},{"type":"prose","value":{"id":"classificando_variáveis","title":"Classificando variáveis","isH3":true,"content":"<p>Uma variável declarada usando a declaração <code>var</code> ou <code>let</code> sem especificar o valor inicial tem o valor <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</p>\n<p>Uma tentativa de acessar uma variável não declarada resultará no lançamento de uma exceção <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\"><code>ReferenceError</code></a>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"O valor de a é \"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// saída \"O valor de a é undefined\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"O valor de b é \"</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// executa uma exception de erro de referência (ReferenceError)</span>\n</code></pre></div>\n<p>Você pode usar <code>undefined</code> para determinar se uma variável tem um valor. No código a seguir, não é atribuído um valor de entrada na variável e a declaração <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/if...else\"><code>if</code></a> será avaliada como verdadeira (<code>true</code>).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> input<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>input <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">facaIsto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">facaAquilo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>O valor <code>undefined</code> se comporta como falso (<code>false</code>), quando usado em um contexto booleano. Por exemplo, o código a seguir executa a função <code>myFunction</code> devido o elemento <code>myArray</code> ser undefined:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>myArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>O valor <code>undefined</code> converte-se para <code>NaN</code> quando usado no contexto numérico.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>\na <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Avaliado como NaN</span>\n</code></pre></div>\n<p>Quando você avalia uma variável nula, o valor nulo se comporta como 0 em contextos numéricos e como falso em contextos booleanos. Por exemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a saída para o console será 0.</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"escopo_de_variável","title":"Escopo de variável","isH3":true,"content":"<p>Quando você declara uma váriavel fora de qualquer função, ela é chamada de variável <em>global</em>, porque está disponível para qualquer outro código no documento atual. Quando você declara uma variável dentro de uma função, é chamada de variável <em>local</em>, pois ela está disponível somente dentro dessa função.</p>\n<p>JavaScript antes do ECMAScript 6 não possuía escopo de <a href=\"/pt-BR/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#block_statement\">declaração de bloco</a>; pelo contrário, uma variável declarada dentro de um bloco de uma <em>função</em> é uma variável local (ou contexto <em>global</em>) do bloco que está inserido a função. Por exemplo o código a seguir exibirá 5, porque o escopo de <code>x</code> está na função (ou contexto global) no qual <code>x</code> é declarado, não o bloco, que neste caso é a declaração <code>if</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 5</span>\n</code></pre></div>\n<p>Esse comportamento é alterado, quando usado a declaração <code>let</code> introduzida pelo ECMAScript 6.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// ReferenceError: y não está definido</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"variável_de_elevação","title":"Variável de elevação","isH3":true,"content":"<p>Outra coisa incomum sobre variáveis em JavaScript é que você pode utilizar a variável e declará-la depois, sem obter uma exceção. Este conceito é conhecido como <strong>hoisting</strong>; variáveis em JavaScript são num sentido \"hoisted\" ou lançada para o topo da função ou declaração. No entanto, as variáveis que são \"hoisted\" retornarão um valor <code>undefined</code>. Então, mesmo se você usar ou referir a variável e depois declará-la e inicializá-la, ela ainda retornará undefined.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/**\n * Exemplo 1\n */</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// exibe \"true\"</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Exemplo 2\n */</span>\n<span class=\"token comment\">// retornará um valor undefined</span>\n<span class=\"token keyword\">var</span> myvar <span class=\"token operator\">=</span> <span class=\"token string\">\"my value\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myvar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n  <span class=\"token keyword\">var</span> myvar <span class=\"token operator\">=</span> <span class=\"token string\">\"local value\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Os exemplos acima serão interpretados como:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/**\n * Exemplo 1\n */</span>\n<span class=\"token keyword\">var</span> x<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// exibe \"true\"</span>\nx <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Exemplo 2\n */</span>\n<span class=\"token keyword\">var</span> myvar <span class=\"token operator\">=</span> <span class=\"token string\">\"um valor\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> myvar<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myvar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n  myvar <span class=\"token operator\">=</span> <span class=\"token string\">\"valor local\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Devido o hoisting, todas as declarações <code>var</code> em uma função devem ser colocadas no início da função. Essa recomendação de prática deixa o código mais legível.</p>"}},{"type":"prose","value":{"id":"variáveis_globais","title":"Variáveis Globais","isH3":true,"content":"<p>Variáveis globais são propriedades do <em>objeto global</em>. Em páginas web o objeto global é a <a href=\"/pt-BR/docs/Web/API/Window\"><code>window</code></a>, assim você pode configurar e acessar variáveis globais utilizando a sintaxe <code>window.variavel.</code></p>\n<p>Consequentemente, você pode acessar variáveis globais declaradas em uma janela ou frame ou frame de outra janela. Por exemplo, se uma variável chamada phoneNumber é declarada em um documento, você pode consultar esta variável de um frame como <code>parent.phoneNumber</code>.</p>"}},{"type":"prose","value":{"id":"constantes","title":"Constantes","isH3":true,"content":"<p>Você pode criar uma constante apenas de leitura por meio da palavra-chave <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Statements/const\"><code>const</code></a>. A sintaxe de um identificador de uma constante é semelhante ao identificador de uma variável: deve começar com uma letra, sublinhado ou cifrão e pode conter caractere alfabético, numérico ou sublinhado.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token constant\">PI</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Uma constante não pode alterar seu valor por meio de uma atribuição ou ser declarada novamente enquanto o script está em execução. Deve ser inicializada com um valor.</p>\n<p>As regras de escopo para as constantes são as mesmas para as váriaveis <code>let</code> de escopo de bloco. Se a palavra-chave <code>const</code> for omitida, presume-se que o identificador represente uma variável.</p>\n<p>Você não pode declarar uma constante com o mesmo nome de uma função ou variável que estão no mesmo escopo. Por exemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token comment\">// Isto irá causar um  erro</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Isto também irá causar um erro.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> g <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> g<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//declarações</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"estrutura_de_dados_e_tipos","title":"Estrutura de dados e tipos","isH3":false,"content":""}},{"type":"prose","value":{"id":"tipos_de_dados","title":"Tipos de dados","isH3":true,"content":"<p>O mais recente padrão ECMAScript define sete tipos de dados:</p>\n<ul>\n  <li>Seis tipos de dados são os chamados <a href=\"/pt-BR/docs/Glossary/Primitive\">primitivos</a>:\n    <ul>\n      <li><a href=\"/pt-BR/docs/Glossary/Boolean\">Boolean</a>. <code>true</code> e <code>false</code>.</li>\n      <li><a href=\"/pt-BR/docs/Glossary/Null\">null</a>. Uma palavra-chave que indica valor nulo. Devido JavaScript ser case-sensitive, <code>null</code> não é o mesmo que <code>Null</code>, <code>NULL</code>, ou ainda outra variação.</li>\n      <li><a href=\"/pt-BR/docs/Glossary/undefined\">undefined</a>. Uma propriedade superior cujo valor é indefinido.</li>\n      <li><a href=\"/pt-BR/docs/Glossary/Number\">Number</a>. <code>42</code> ou <code>3.14159</code>.</li>\n      <li><a href=\"/pt-BR/docs/Glossary/String\">String</a>. \"Howdy\"</li>\n      <li><a href=\"/pt-BR/docs/conflicting/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a> (novo em ECMAScript 6). Um tipo de dado cuja as instâncias são únicas e imutáveis.</li>\n    </ul>\n  </li>\n  <li>e <a href=\"/pt-BR/docs/Glossary/Object\">Object</a></li>\n</ul>\n<p>Embora esses tipos de dados sejam uma quantidade relativamente pequena, eles permitem realizar funções úteis em suas aplicações. <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Objetos</code></a> e <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>funções</code></a> são outros elementos fundamentais na linguagem. Você pode pensar em objetos como recipientes para os valores, e funções como métodos que suas aplicações podem executar.</p>"}},{"type":"prose","value":{"id":"conversão_de_tipos_de_dados","title":"Conversão de tipos de dados","isH3":true,"content":"<p>JavaScript é uma linguagem dinamicamente tipada. Isso significa que você não precisa especificar o tipo de dado de uma variável quando declará-la, e tipos de dados são convertidos automaticamente conforme a necessidade durante a execução do script. Então, por exemplo, você pode definir uma variável da seguinte forma:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>E depois, você pode atribuir uma string para a mesma variável, por exemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>answer <span class=\"token operator\">=</span> <span class=\"token string\">\"Obrigado pelos peixes...\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Devido JavaScript ser dinamicamente tipado, essa declaração não gera uma mensagem de erro.</p>\n<p>Em expressões envolvendo valores numérico e string com o operador +, JavaScript converte valores numérico para strings. Por exemplo, considere a seguinte declaração:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>x <span class=\"token operator\">=</span> <span class=\"token string\">\"A resposta é \"</span> <span class=\"token operator\">+</span> <span class=\"token number\">42</span> <span class=\"token comment\">// \"A resposta é 42\"</span>\ny <span class=\"token operator\">=</span> <span class=\"token number\">42</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" é a resposta\"</span> <span class=\"token comment\">// \"42 é a resposta\"</span>\n</code></pre></div>\n<p>Nas declarações envolvendo outros operadores, JavaScript não converte valores numérico para strings. Por exemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"37\"</span> <span class=\"token operator\">-</span> <span class=\"token number\">7</span> <span class=\"token comment\">// 30</span>\n<span class=\"token string\">\"37\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span> <span class=\"token comment\">// \"377\"</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"convertendo_strings_para_números","title":"Convertendo strings para números","isH3":true,"content":"<p>No caso de um valor que representa um número está armazenado na memória como uma string, existem métodos para a conversão.</p>\n<ul>\n  <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/parseInt\"><code>parseInt()</code></a></li>\n  <li><a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\"><code>parseFloat()</code></a></li>\n</ul>\n<p>parseInt irá retornar apenas números inteiros, então seu uso é restrito para a casa dos decimais. Além disso, é uma boa prática ao usar parseInt incluir o parâmetro da base. O parâmetro da base é usado para especificar qual sistema númerico deve ser usado.</p>\n<p>Uma método alternativo de conversão de um número em forma de string é com o operador <code>+</code> (operador soma):</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"1.1\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"1.1\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1.11.1\"</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token string\">\"1.1\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token string\">\"1.1\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.2</span>\n<span class=\"token comment\">// Nota: Os parênteses foram usados para deixar mais legível o código, ele não é requirido.</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"literais","title":"Literais","isH3":false,"content":"<p>Você usa literais para representar valores em JavaScript. Estes são valores fixados, não variáveis, que você <code>literalmente</code> insere em seu script. Esta seção descreve os seguintes tipos literais:</p>\n<ul>\n  <li><a href=\"#array_literal\">Array literal</a></li>\n  <li><a href=\"#literais_boolean\">Literais boolean</a></li>\n  <li><a href=\"#literais_de_ponto_flutuante\">Literais de ponto flutuante</a></li>\n  <li><a href=\"#inteiros\">Inteiros</a></li>\n  <li><a href=\"#objeto_literal\">Objeto literal</a></li>\n  <li><a href=\"#string_literal\">String literal</a></li>\n</ul>"}},{"type":"prose","value":{"id":"array_literal","title":"Array literal","isH3":true,"content":"<p>Um array literal é uma lista de zero ou mais expressões, onde cada uma delas representam um elemento do array, inseridas entre colchetes (<code>[]</code>). Quando você cria um array usando um array literal, ele é inicializado com os valores especificados como seus elementos, e seu comprimento é definido com o número de elementos especificados.</p>\n<p>O exemplo a seguir cria um array <code>coffees</code> com três elementos e um comprimento de três:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> coffees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"French Roast\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Colombian\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Kona\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<blockquote>\n  <p><strong>Nota:</strong> <strong>Nota :</strong> Um array literal é um tipo de inicializador de objetos. Veja <a href=\"/pt-BR/docs/Web/JavaScript/Guide/Working_with_Objects#using_object_initializers\">Usando inicializadores de Objetos</a>.</p>\n</blockquote>\n<p>Se um array é criado usando um literal no topo do script, JavaScript interpreta o array cada vez que avalia a expressão que contêm o array literal. Além disso, um literal usado em uma função é criado cada vez que a função é chamada.</p>\n<p>Array literal são também um array de objetos. Veja <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> e <a href=\"/pt-BR/docs/Web/JavaScript/Guide/Indexed_collections\">Coleções indexadas</a> para detalhes sobre array de objetos.</p>\n<h4 id=\"vírgulas_extras_em_array_literal\">Vírgulas extras em array literal</h4>\n<p>Você não precisa especificar todos os elementos em um array literal. Se você colocar duas vírgulas em uma linha, o array é criado com <code>undefined</code> para os elementos não especificados. O exemplo a seguir cria um array chamado <code>fish</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> fish <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Lion\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"Angel\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Esse array tem dois elementos com valores e um elemento vazio (<code>fish[0]</code> é \"Lion\", <code>fish[1]</code> é <code>undefined</code>, e <code>fish[2]</code> é \"Angel\" ).</p>\n<p>Se você incluir uma vírgula à direita no final da lista dos elementos, a vírgula é ignorada. No exemplo a seguir, o comprimento do array é três. Não há nenhum <code>myList[3]</code>. Todas as outras vírgulas na lista indicam um novo elemento.</p>\n<blockquote>\n  <p><strong>Nota:</strong> <strong>Nota :</strong> Vírgulas à direita podem criar erros em algumas versões de navegadores web antigos, é recomendável removê-las.</p>\n</blockquote>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'home'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'school'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>No exemplo a seguir, o comprimento do array é quatro, e <code>myList[0]</code> e <code>myList[2]</code> são <code>undefined</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'home'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'school'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>No exemplo a seguir, o comprimento do array é quatro, e <code>myList[1]</code> e <code>myList[3]</code> são <code>undefined</code>. Apenas a última vírgula é ignorada.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'home'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'school'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Entender o comportamento de vírgulas extras é importante para a compreensão da linguagem JavaScript, no entanto, quando você escrever seu próprio código: declarar explicitamente os elementos em falta como <code>undefined</code> vai aumentar a clareza do código, e consequentemente na sua manutenção.</p>"}},{"type":"prose","value":{"id":"literais_boolean","title":"Literais Boolean","isH3":true,"content":"<p>O tipo Boolean tem dois valores literal: <code>true</code> e <code>false</code>.</p>\n<p>Não confunda os valores primitivos Boolean <code>true</code> e <code>false</code> com os valores <code>true</code> e <code>false</code> do objeto Boolean. O objeto Boolean é um invólucro em torno do tipo de dado primitivo. Veja <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> para mais informação.</p>"}},{"type":"prose","value":{"id":"inteiros","title":"Inteiros","isH3":true,"content":"<p>Inteiros podem ser expressos em decimal (base 10), hexadecimal (base 16), octal (base 8) e binário (base 2).</p>\n<ul>\n  <li>Decimal inteiro literal consiste em uma sequência de dígitos sem um 0 (zero).</li>\n  <li>0 (zero) em um inteiro literal indica que ele está em octal. Octal pode incluir somente os dígitos 0-7.</li>\n  <li>0x (ou 0X) indica um hexadecimal. Inteiros hexadecimais podem incluir dígitos (0-9) e as letras a-f e A-F.</li>\n  <li>0b (ou 0B) indica um binário. Inteiros binário podem incluir apenas os dígitos 0 e 1.</li>\n</ul>\n<p>Alguns exemplos de inteiros literal são:</p>\n<pre class=\"notranslate\">0, 117 and -345 (decimal, base 10)\n015, 0001 and -077 (octal, base 8)\n0x1123, 0x00111 and -0xF1A7 (hexadecimal, \"hex\" or base 16)\n0b11, 0b0011 and -0b11 (binário, base 2)\n</pre>\n<p>Para maiores informações, veja <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Lexical_grammar#numeric_literals\">Literais numérico na referência Léxica</a>.</p>"}},{"type":"prose","value":{"id":"literais_de_ponto_flutuante","title":"Literais de ponto flutuante","isH3":true,"content":"<p>Um literal de ponto flutuante pode ter as seguintes partes:</p>\n<ul>\n  <li>Um inteiro decimal que pode ter sinal (precedido por \"<code>+</code>\" ou \"<code>-</code>\"),</li>\n  <li>Um ponto decimal (\"<code>.</code>\"),</li>\n  <li>Uma fração (outro número decimal),</li>\n  <li>Um expoente.</li>\n</ul>\n<p>O expoente é um \"e\" ou \"E\" seguido por um inteiro, que pode ter sinal (precedido por \"+\" ou \"-\"). Um literal de ponto flutuante deve ter no mínimo um dígito e um ponto decimal ou \"e\" (ou \"E\").</p>\n<p>Mais sucintamente, a sintaxe é:</p>\n<pre class=\"notranslate\">[(+|-)][digitos][.digitos][(E|e)[(+|-)]digitos]\n</pre>\n<p>Por exemplo:</p>\n<pre class=\"notranslate\">3.1415926\n-.123456789\n-3.1E+12\n.1e-23\n</pre>"}},{"type":"prose","value":{"id":"objeto_literal","title":"Objeto literal","isH3":true,"content":"<p>Um objeto literal é uma lista de zero ou mais pares de nomes de propriedades e valores associados de um objeto, colocado entre chaves (<code>{}</code>). Você não deve usar um objeto literal no início de uma declaração. Isso levará a um erro ou não se comportará conforme o esperado, porque o <code>{</code> será interpretado como início de um bloco.</p>\n<p>Segue um exemplo de um objeto literal. O primeiro elemento do objeto <code>carro</code> define uma propriedade, <code>meuCarro</code>, e atribui para ele uma nova string, \"Punto\"; o segundo elemento, a propriedade <code>getCarro</code>, é imediatamente atribuído o resultado de chamar uma função (<code>tipoCarro(\"Fiat\")</code>); o terceiro elemento, a propriedade <code>especial</code>, usa uma variável existente (<code>vendas)</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> vendas <span class=\"token operator\">=</span> <span class=\"token string\">\"Toyota\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">tipoCarro</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nome</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nome <span class=\"token operator\">==</span> <span class=\"token string\">\"Fiat\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> nome<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Desculpa, não vendemos carros \"</span> <span class=\"token operator\">+</span> nome <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> carro <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">meuCarro</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Punto\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">getCarro</span><span class=\"token operator\">:</span> <span class=\"token function\">tipoCarro</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fiat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">especial</span><span class=\"token operator\">:</span> vendas <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>carro<span class=\"token punctuation\">.</span>meuCarro<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Punto</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>carro<span class=\"token punctuation\">.</span>getCarro<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Fiat</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>carro<span class=\"token punctuation\">.</span>especial<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Toyota</span>\n</code></pre></div>\n<p>Além disso, você pode usar um literal numérico ou string para o nome de uma propriedade ou aninhar um objeto dentro do outro. O exemplo a seguir usar essas opções.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> carro <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">carros</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Saab\"</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">\"b\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Jeep\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Mazda\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>carro<span class=\"token punctuation\">.</span>carros<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Jeep</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>carro<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Mazda</span>\n</code></pre></div>\n<p>Nomes de propriedades de objeto podem ser qualquer string, incluindo uma string vazia. Caso o nome da propriedade não seja um <a href=\"/pt-BR/docs/Glossary/Identifier\">identificador</a> JavaScript ou número, ele deve ser colocado entre aspas. Nomes de propriedades que não possuem identificadores válido, também não podem ser acessadas pela propriedade de ponto (<code>.</code>), mas podem ser acessadas e definidas com a notação do tipo array (\"<code>[]</code>\").</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> unusualPropertyNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">\"\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Uma string vazia\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"!\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bang!\"</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>unusualPropertyNames<span class=\"token punctuation\">.</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// SyntaxError: string inesperada</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>unusualPropertyNames<span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Um string vazia</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>unusualPropertyNames<span class=\"token punctuation\">.</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// SyntaxError: símbolo ! inesperado</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>unusualPropertyNames<span class=\"token punctuation\">[</span><span class=\"token string\">\"!\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Bang!</span>\n</code></pre></div>\n<p>Observe:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">\"alpha\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// alpha</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// two</span>\n<span class=\"token comment\">//console.log(foo.2);  // Error: missing ) after argument list</span>\n<span class=\"token comment\">//console.log(foo[a]); // Error: a não está definido</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// alpha</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">[</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// two</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"expressão_regex_literal","title":"Expressão Regex Literal","isH3":true,"content":"<p>Um regex literal é um padrão entre barras. A seguir um exemplo de regex literal.</p>\n<pre class=\"notranslate\">var re = /ab+c/;\n</pre>"}},{"type":"prose","value":{"id":"string_literal","title":"String Literal","isH3":true,"content":"<p>Uma string literal são zero ou mais caracteres dispostos em aspas duplas (<code>\"</code>) ou aspas simples (<code>'</code>). Uma sequência de caracteres deve ser delimitada por aspas do mesmo tipo; ou seja, as duas aspas simples ou ambas aspas duplas. A seguir um exemplo de strings literais.</p>\n<pre class=\"notranslate\">\"foo\"\n'bar'\n\"1234\"\n\"um linha \\n outra linha\"\n\"John's cat\"\n</pre>\n<p>Você pode chamar qualquer um dos métodos do objeto string em uma string literal - JavaScript automaticamente converte a string literal para um objeto string temporário, chama o método, em seguida, descarta o objeto string temporário. Você também pode usar a propriedade <code>String.length</code> com uma string literal:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John's cat\"</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Irá exibir a quantidade de caracteres na string incluindo o espaço em branco.</span>\n<span class=\"token comment\">// Nesse caso, 10 caracteres.</span>\n</code></pre></div>\n<p>Você deve usar string literal, a não ser que você precise usar um objeto string. Veja <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> para detalhes sobre objetos de strings.</p>\n<h4 id=\"uso_de_caracteres_especiais_em_string\">Uso de caracteres especiais em string</h4>\n<p>Além dos caracteres comuns, você também pode incluir caracteres especiais em strings, como mostrado no exemplo a seguir.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"uma linha \\n outra linha\"</span>\n</code></pre></div>\n<p>A tabela a seguir lista os caracteres especiais que podem ser usados em strings no JavaScript.</p>\n<table>\n  <thead>\n    <tr>\n      <th>Caracter</th>\n      <th>Descrição</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>\\0</code></td>\n      <td>Byte nulo</td>\n    </tr>\n    <tr>\n      <td><code>\\b</code></td>\n      <td>Backspace</td>\n    </tr>\n    <tr>\n      <td><code>\\f</code></td>\n      <td>Alimentador de formulário</td>\n    </tr>\n    <tr>\n      <td><code>\\n</code></td>\n      <td>Nova linha</td>\n    </tr>\n    <tr>\n      <td><code>\\r</code></td>\n      <td>Retorno do carro</td>\n    </tr>\n    <tr>\n      <td><code>\\t</code></td>\n      <td>Tabulação</td>\n    </tr>\n    <tr>\n      <td><code>\\v</code></td>\n      <td>Tabulação vertical</td>\n    </tr>\n    <tr>\n      <td><code>\\'</code></td>\n      <td>Apóstrofo ou aspas simples</td>\n    </tr>\n    <tr>\n      <td><code>\\\"</code></td>\n      <td>Aspas dupla</td>\n    </tr>\n    <tr>\n      <td><code>\\\\</code></td>\n      <td>Caractere de barra invertida</td>\n    </tr>\n    <tr>\n      <td><code>\\XXX</code></td>\n      <td>Caractere com a codificação Latin-1 especificada por três dígitos octal <em>XXX</em> entre 0 e 377. Por exemplo, \\251 é sequência octal para o símbolo de direitos autorais.</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>\\xXX</code></td>\n      <td>Caractere com a codificação Latin-1 especificada por dois dígitos hexadecimal <em>XX</em> entre 00 e FF. Por exemplo, \\xA9 é a sequência hexadecimal para o símbolo de direitos autorais.</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>\\uXXXX</code></td>\n      <td>Caractere Unicode especificado por quatro dígitos hexadecimal <em>XXXX</em>. Por exemplo, \\u00A9 é a sequência Unicode para o símbolo de direitos autorais. Veja <a href=\"/pt-BR/docs/Web/JavaScript/Reference/Lexical_grammar#string_literals\">sequências de escape Unicode</a>.</td>\n    </tr>\n  </tbody>\n</table>\n<h4 id=\"caracteres_de_escape\">Caracteres de escape</h4>\n<p>Para caracteres não listados na tabela, se precedidos de barra invertida ela é ignorada, seu uso está absoleto e deve ser ignorado.</p>\n<p>Você pode inserir uma aspa dentro de uma string precendendo-a com uma barra invertida. Isso é conhecido como <em>escaping</em> das aspas. Por exemplo:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> quote <span class=\"token operator\">=</span> <span class=\"token string\">\"Ele lê \\\"The Cremation of Sam McGee\\\" de R.W. Service.\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>quote<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>O resultado disso seria:</p>\n<pre class=\"notranslate\">Ele lê \"The Cremation of Sam McGee\" de R.W. Service.\n</pre>\n<p>Para incluir uma barra invertida dentro de uma string, você deve escapar o caractere de barra invertida. Por exemplo, para atribuir o caminho do arquivo <code>c:\\temp</code> para uma string, utilize o seguinte:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> home <span class=\"token operator\">=</span> <span class=\"token string\">\"c:\\\\temp\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Você também pode escapar quebras de linhas, precedendo-as com barra invertida. A barra invertida e a quebra de linha são ambas removidas da string.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"esta string \\\nestá quebrada \\\nem várias\\\nlinhas.\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// esta string está quebrada em várias linhas.</span>\n</code></pre></div>\n<p>Embora JavaScript não tenha sintaxe \"heredoc\", você pode adicionar uma quebra de linha e um escape de quebra de linha no final de cada linha:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> poema <span class=\"token operator\">=</span>\n<span class=\"token string\">\"Rosas são vermelhas\\n\\\nVioletas são azuis,\\n\\\nEsse seu sorriso\\n\\\né o que me seduz. (Lucas Pedrosa)\"</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"mais_informação","title":"Mais informação","isH3":false,"content":"<p>Este capítulo focou na sintaxe básica das declarações e tipos. Para saber mais sobre a linguagem JavaScript, veja também os seguintes capítulos deste guia:</p>\n<ul>\n  <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Controle de fluxo e manipulação de erro</a></li>\n  <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Loops_and_iteration\">Laços e iteração</a></li>\n  <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Functions\">Funções</a></li>\n  <li><a href=\"/pt-BR/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressões e operadores</a></li>\n</ul>\n<p>No próximo capítulo, veremos a construção de controle de fluxos e manipulação de erro.</p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/pt-BR/docs/Web/JavaScript/Guide/Introduction\">« Previous</a></li>\n    <li><a class=\"button minimal\" href=\"/pt-BR/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Next  »</a></li>\n</ul>"}}],"toc":[{"text":"Sintaxe básica","id":"sintaxe_básica"},{"text":"Comentários","id":"comentários"},{"text":"Declarações","id":"declarações"},{"text":"Estrutura de dados e tipos","id":"estrutura_de_dados_e_tipos"},{"text":"Literais","id":"literais"},{"text":"Mais informação","id":"mais_informação"}],"summary":"Este capítulo trata sobre a sintaxe básica do JavaScript, declarações de variáveis, tipos de dados e literais.","popularity":0.0051,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Grammar and types","locale":"en-US","native":"English (US)"},{"title":"Gramática y Tipos","locale":"es","native":"Español"},{"title":"Types et grammaire","locale":"fr","native":"Français"},{"title":"文法とデータ型","locale":"ja","native":"日本語"},{"title":"문법과 자료형","locale":"ko","native":"한국어"},{"title":"Грамматика и типы","locale":"ru","native":"Русский"},{"title":"语法和数据类型","locale":"zh-CN","native":"中文 (简体)"},{"title":"語法與型別","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"pt-br/web/javascript/guide/grammar_and_types","github_url":"https://github.com/mdn/translated-content/blob/main/files/pt-br/web/javascript/guide/grammar_and_types/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/pt-BR/docs/Web","title":"Tecnologia Web para desenvolvedores"},{"uri":"/pt-BR/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/pt-BR/docs/Web/JavaScript/Guide","title":"Guia JavaScript"},{"uri":"/pt-BR/docs/Web/JavaScript/Guide/Grammar_and_types","title":"Sintaxe e tipos"}],"pageTitle":"Sintaxe e tipos - JavaScript | MDN","noIndexing":false}}