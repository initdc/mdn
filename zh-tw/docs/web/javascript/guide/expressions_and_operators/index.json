{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"運算式與運算子","mdn_url":"/zh-TW/docs/Web/JavaScript/Guide/Expressions_and_Operators","locale":"zh-TW","native":"正體中文 (繁體)","sidebarHTML":"\n <ol>\n  <li><a href=\"/zh-TW/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/zh-TW/docs/Web/JavaScript/Tutorials\"><strong>Tutorials:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Complete beginners</summary>\n      <ol>\n        <li><a href=\"/zh-TW/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript basics</a></li>\n        <li><a href=\"/zh-TW/docs/Learn/JavaScript/First_steps\">JavaScript first steps</a></li>\n        <li><a href=\"/zh-TW/docs/Learn/JavaScript/Building_blocks\">JavaScript building blocks</a></li>\n        <li><a href=\"/zh-TW/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>JavaScript Guide</summary>\n      <ol>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Introduction\">Introduction</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Grammar_and_Types\">Grammar and types</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Control flow and error handling</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Loops_and_iteration\">Loops and iteration</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Functions\">Functions</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressions and operators</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Numbers_and_dates\">Numbers and dates</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Text_formatting\">Text formatting</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Regular_Expressions\">Regular expressions</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Indexed_collections\">Indexed collections</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Keyed_collections\">Keyed collections</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Working_with_Objects\">Working with objects</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Details of the object model</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Iterators_and_generators\">Iterators and generators</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Meta_programming\">Meta programming</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Intermediate</summary>\n      <ol>\n        <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/zh-TW/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">A re-introduction to JavaScript</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Equality comparisons and sameness</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Closures\">Closures</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Advanced</summary>\n      <ol>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Inheritance and the prototype chain</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Typed_arrays\">JavaScript typed arrays</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Memory_Management\">Memory Management</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/EventLoop\">Concurrency model and Event Loop</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/zh-TW/docs/Web/JavaScript/Reference\">References:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Built-in objects</summary>\n        <ol><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Expressions &amp; operators</summary>\n      <ol><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Statements &amp; declarations</summary>\n      <ol><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Functions</summary>\n      <ol><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Misc</summary>\n      <ol>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/JavaScript_technologies_overview\">JavaScript technologies overview</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Lexical_grammar\">Lexical grammar</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Enumerability and ownership of properties</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Iteration_protocols\">Iteration protocols</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Transitioning to strict mode</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Template_literals\">Template literals</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Deprecated features</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-TW/docs/Web/JavaScript/Guide/Functions\">« 前頁</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-TW/docs/Web/JavaScript/Guide/Numbers_and_dates\">次頁  »</a></li>\n</ul>\n<p>這個章節將講述 JavaScript 的運算式與運算子，包括賦值運算子，比較運算子，算術運算子，位元運算子， 邏輯運算子, 字串運算子, 條件(三元)運算子 以及更多運算子.</p>\n<p>更多關於運算子以及運算式的資料可以在 <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators\">reference</a> 中找到。</p>"}},{"type":"prose","value":{"id":"運算子","title":"運算子","isH3":false,"content":"<p>JavaScript 有以下幾種運算子。 此處將描述運算子以及一些運算子的優先順序。</p>\n<ul>\n  <li><a href=\"#%E8%B3%A6%E5%80%BC%E9%81%8B%E7%AE%97%E5%AD%90\">賦值運算子</a></li>\n  <li><a href=\"#%E6%AF%94%E8%BC%83%E9%81%8B%E7%AE%97%E5%AD%90\">比較運算子</a></li>\n  <li><a href=\"#%E7%AE%97%E8%A1%93%E9%81%8B%E7%AE%97%E5%AD%90\">算術運算子</a></li>\n  <li><a href=\"#%E4%BD%8D%E5%85%83%E9%81%8B%E7%AE%97%E5%AD%90\">位元運算子</a></li>\n  <li><a href=\"#%E9%82%8F%E8%BC%AF%E9%81%8B%E7%AE%97%E5%AD%90\">邏輯運算子</a></li>\n  <li><a href=\"#%E5%AD%97%E4%B8%B2%E9%81%8B%E7%AE%97%E5%AD%90\">字串運算子</a></li>\n  <li><a href=\"#%E6%A2%9D%E4%BB%B6%EF%BC%88%E4%B8%89%E5%85%83%EF%BC%89%E9%81%8B%E7%AE%97%E5%AD%90\">條件（三元）運算子</a></li>\n  <li><a href=\"#%E9%80%97%E9%BB%9E%E9%81%8B%E7%AE%97%E5%AD%90\">逗點運算子</a></li>\n  <li><a href=\"#%E4%B8%80%E5%85%83%E9%81%8B%E7%AE%97%E5%AD%90\">一元運算子</a></li>\n  <li><a href=\"#%E9%97%9C%E4%BF%82%E9%81%8B%E7%AE%97%E5%AD%90\">關係運算子</a></li>\n</ul>\n<p>JavaScript 同時具有二元運算子及一元運算子， 以及一種特殊的 三元運算子，也就是 條件運算子。 一個二元運算子需要具備兩個運算元， 一個在運算元之前，一個在運算元之後:</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">運算元1 運算子 運算元2\n</pre></div>\n<p>例如, <code>3+4</code> 或 <code>x*y</code>.</p>\n<p>一個 一元運算子 需要一個運算元， 位於運算子之前或之後:</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">運算子 運算元\n</pre></div>\n<p>或</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">運算元 運算子\n</pre></div>\n<p>例如， <code>x++</code> 或 <code>++x</code>.</p>"}},{"type":"prose","value":{"id":"賦值運算子","title":"賦值運算子","isH3":true,"content":"<p>一個 <a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">賦值運算子 (en-US)</a> 將 基於其 右方的運算元 的值賦予其 左方的運算元。 最簡單的 賦值運算子 是 等於 (<code>=</code>)， 它將賦予 左方運算元 與 右方運算元相同之值。 也就是， <code>x = y</code> 會把 y 的值賦予給 x。</p>\n<p>也有一些復合的 賦值運算子 是為了縮短下面表中的運算:</p>\n<table>\n  <thead>\n    <tr>\n      <th>名稱</th>\n      <th>簡化的運算子</th>\n      <th>意義</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">賦值 (en-US)</a></td>\n      <td><code>x = y</code></td>\n      <td><code>x = y</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#addition_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">加法 (en-US)</a><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">賦值 (en-US)</a></td>\n      <td><code>x += y</code></td>\n      <td><code>x = x + y</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#subtraction_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">減法 (en-US)</a><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">賦值 (en-US)</a></td>\n      <td><code>x -= y</code></td>\n      <td><code>x = x - y</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#multiplication_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">乘法 (en-US)</a><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">賦值 (en-US)</a></td>\n      <td><code>x *= y</code></td>\n      <td><code>x = x * y</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#division_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">除法 (en-US)</a><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">賦值 (en-US)</a></td>\n      <td><code>x /= y</code></td>\n      <td><code>x = x / y</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#remainder_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">餘數 (en-US)</a><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">賦值 (en-US)</a></td>\n      <td><code>x %= y</code></td>\n      <td><code>x = x % y</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#exponentiation_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">指數 (en-US)</a><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">賦值 (en-US)</a></td>\n      <td><code>x **= y</code></td>\n      <td><code>x = x ** y</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#left_shift_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">左移賦值 (en-US)</a></td>\n      <td><code>x &lt;&lt;= y</code></td>\n      <td><code>x = x &lt;&lt; y</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#right_shift_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">右移賦值 (en-US)</a></td>\n      <td><code>x &gt;&gt;= y</code></td>\n      <td><code>x = x &gt;&gt; y</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#unsigned_right_shift_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">無號右移賦值 (en-US)</a></td>\n      <td><code>x &gt;&gt;&gt;= y</code></td>\n      <td><code>x = x &gt;&gt;&gt; y</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#bitwise_and_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">位元 AND 賦值 (en-US)</a></td>\n      <td><code>x &amp;= y</code></td>\n      <td><code>x = x &amp; y</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#bitwise_xor_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">位元 XOR 賦值 (en-US)</a></td>\n      <td><code>x ^= y</code></td>\n      <td><code>x = x ^ y</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators#bitwise_or_assignment\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">位元 OR 賦值 (en-US)</a></td>\n      <td><code>x |= y</code></td>\n      <td><code>x = x | y</code></td>\n    </tr>\n  </tbody>\n</table>\n<h4 id=\"解構\">解構</h4>\n<p>為了進行更複雜的賦值，<a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">解構賦值</a>是 JavaScript 用來從陣列或物件中提取資料的語法。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 不使用解構</span>\n<span class=\"token keyword\">var</span> one   <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> two   <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> three <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 使用解構</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span>one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">,</span> three<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"比較運算子","title":"比較運算子","isH3":true,"content":"<p><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators\">比較運算子</a> 會比較 運算元 並基於比較的結果回傳邏輯值。 運算元可以是數字，字串，邏輯，或物件的值。 字串的比較是基於字典序的， 使用 Unicode 的值。 在多數情況下，假如兩個運算元不具有相同型態， JavaScript 會嘗試將它們轉換成相同型態。這個行為通常是將運算元以數學形式對待。 在某些的轉換型態的例外中會使用到 <code>===</code> 及 <code>!==</code> 運算子， 它們會嚴格地進行相等或不相等的比較。 這些運算子不會在確認相等與否前嘗試轉換運算元的型態。 下面的表解釋了比較運算子:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> var1 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> var2 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<table>\n  <thead>\n    <tr>\n      <th>運算子</th>\n      <th>描述</th>\n      <th>會回傳 True 的例子</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators#equality\">等於</a> (<code>==</code>)</td>\n      <td>假如運算元等價就回傳 True。</td>\n      <td><code>3 == var1``\"3\" == var1``3 == '3'</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators#inequality\">不等於</a> (<code>!=</code>)</td>\n      <td>假如運算元等價就回傳 True。</td>\n      <td><code>var1 != 4 var2 != \"3\"</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators#identity\">嚴格等於</a> (<code>===</code>)</td>\n      <td>假如運算元具有相同型態且等價則回傳 True。參考 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is</code> <small>(en-US)</small></a> 及 <a href=\"/zh-TW/docs/Web/JavaScript/Equality_comparisons_and_sameness\">JS 中的等價性</a>。</td>\n      <td><code>3 === var1</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators#nonidentity\">嚴格不等於</a> (<code>!==</code>)</td>\n      <td>假如運算元具有相同型態但不等價，或是具有不同型態，回傳 True。</td>\n      <td><code>var1 !== \"3\" 3 !== '3'</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators#greater_than_operator\">大於</a> (<code>&gt;</code>)</td>\n      <td>假如左方運算元大於右方運算元，回傳 True。</td>\n      <td><code>var2 &gt; var1 \"12\" &gt; 2</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators#greater_than_or_equal_operator\">大於或等於</a> (<code>&gt;=</code>)</td>\n      <td>假如左方運算元大於或等於右方運算元，回傳 True。</td>\n      <td><code>var2 &gt;= var1 var1 &gt;= 3</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators#less_than_operator\">小於</a> (<code>&lt;</code>)</td>\n      <td>假如左方運算元小於右方運算元，回傳 True。</td>\n      <td><code>var1 &lt; var2 \"2\" &lt; 12</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators#less_than_or_equal_operator\">小於或等於</a> (<code>&lt;=</code>)</td>\n      <td>假如左方運算元小於或等於右方運算元，回傳 True。</td>\n      <td><code>var1 &lt;= var2 var2 &lt;= 5</code></td>\n    </tr>\n  </tbody>\n</table>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>備註：</strong> <code>=&gt;</code> 不是運算子，是 <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">箭頭函式</a>。</p>\n</div>"}},{"type":"prose","value":{"id":"算術運算子","title":"算術運算子","isH3":true,"content":"<p><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators\">算術運算子</a> 以 數值 (文字或變數也可以)作為其運算元，並回傳單一數值。最常見的算術運算元是 加法 (<code>+</code>)，減法 (<code>-</code>)， 乘法 (<code>*</code>)，及除法 (<code>/</code>)。 這些運算子在大多數程式語言中功能相同 (比較特別的是，在除數為 0 時 <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>)。例如:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.5</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 會是 true</span>\n</code></pre></div>\n<p>除了標準的算術運算子外 (+, -, * /)， JavaScript 提供以下表中的算術運算子:</p>\n<table>\n  <thead>\n    <tr>\n      <th>運算子</th>\n      <th>描述</th>\n      <th>範例</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators#remainder\">取餘數</a> (<code>%</code>)</td>\n      <td>二元運算子。回傳兩個運算元相除後的餘數。</td>\n      <td>12 % 5 回傳 2.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators#increment\">增加</a> (<code>++</code>)</td>\n      <td>一元運算子。 將運算元增加 1。假如使用在運算元之前 (<code>++x</code>)，會運算元回傳增加 1 後的值;假如使用在運算元之後。 (<code>x++</code>)<code>，</code> 會回傳運算元加 1 前的值。</td>\n      <td>假如 <code>x是</code> 3，那 <code>++x</code> 將把 <code>x</code> 設定為 4 並回傳 4，而 <code>x++ 會回傳</code> 3 ， 接著才把 <code>x 設定為</code> 4。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators#decrement\">減少</a> (<code>--</code>)</td>\n      <td>一元運算子。 將運算元減少 1。回傳值的情況與 增加運算元 相同。</td>\n      <td>假如 <code>x是</code> 3，那 <code>--x</code> 將把 <code>x</code> 設定為 2 並回傳 2，而 <code>x-- 會回傳</code> 3 ， 接著才把 <code>x 設定為</code> 2。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators#unary_negation\">(一元運算子)減號</a> (<code>-</code>)</td>\n      <td>一元運算子。回傳運算元的負數。</td>\n      <td>假如 x 是 3，-x 回傳 -3。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators#unary_plus\">(一元運算子)加號</a> (<code>+</code>)</td>\n      <td>一元運算子。嘗試將運算元轉換成數字，假如它還不是數字的話。</td>\n      <td><code>+\"3\"</code> <code>回傳 3</code>。 <code>+true</code> 回傳 <code>1.</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators#exponentiation\">指數運算子</a> (<code>**</code>) <svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg></td>\n      <td>計算以 a 為底的 <code>b</code> 次方， 也就是, <code>a^b</code></td>\n      <td><code>2 ** 3</code> <code>回傳 8</code>. <code>10 ** -1</code> 回傳 <code>0.1</code>.</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"位元運算子","title":"位元運算子","isH3":true,"content":"<p><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators\">位元運算子</a> 把運算元當作 32 位元的集合來看待 (0 和 1)， 而不是十進位，十六進位，或八進位。例如，十進位數字 9 以二進位表示就是 1001。 位元運算子將運算元以上述二進位的形式處理，但是回傳 Javascript 中的數字類型值。</p>\n<p>下列表總結了 JavaScript' 中的位元運算子。</p>\n<table>\n  <thead>\n    <tr>\n      <th>運算子</th>\n      <th>用法</th>\n      <th>描述</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators#bitwise_and\">位元 AND</a></td>\n      <td><code>a &amp; b</code></td>\n      <td>回傳兩個運算元對於每個 bit 做 AND 的結果。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators#bitwise_or\">位元 OR</a></td>\n      <td><code>a | b</code></td>\n      <td>回傳兩個運算元對於每個 bit 做 OR 的結果。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators#bitwise_xor\">位元 XOR</a></td>\n      <td><code>a ^ b</code></td>\n      <td>回傳兩個運算元對於每個 bit 做 XOR 的結果。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators#bitwise_not\">位元 NOT</a></td>\n      <td><code>~ a</code></td>\n      <td>將運算元中的每個 bit 反轉(1-&gt;0,0-&gt;1)。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators#left_shift\">左移</a></td>\n      <td><code>a &lt;&lt; b</code></td>\n      <td>將 <code>a</code> 的每個 bit 向左移動 <code>b</code> 個 bits，空餘的位數以 0 填滿。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators#right_shift\">有號右移</a></td>\n      <td><code>a &gt;&gt; b</code></td>\n      <td>將 <code>a</code> 的每個 bit 向右移動 <code>b</code> 個 bits，空餘位數以最高位補滿。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators#unsigned_right_shift\">以 0 填充的右移</a></td>\n      <td><code>a &gt;&gt;&gt; b</code></td>\n      <td>將 <code>a</code> 的每個 bit 向右移動 <code>b</code> 個 bits，空餘的位數以 0 填滿。</td>\n    </tr>\n  </tbody>\n</table>\n<h4 id=\"位元邏輯運算子\">位元邏輯運算子</h4>\n<p>概念上，位元邏輯運算子運作過程如下:</p>\n<ul>\n  <li>運算元被轉換為 32 bits 的整數以二進位形式表示 (0 和 1)。大於 32 bits 的數字將被捨棄多出來的位元。例如， 下列整數大於 32 個 bit 但是會被轉換為 32 個 bit 的整數:\n    <div class=\"code-example\"><pre class=\"brush: plain notranslate\">轉換之前:  11100110111110100000000000000110000000000001\n轉換之後:              10100000000000000110000000000001\n</pre></div>\n  </li>\n  <li>第一個運算元中的每個 bit 分別對應到第二個運算元的每個 bit: 第一個 bit 對 第一個 bit, 第二個 bit 對 第二個 bit， 以此類推。</li>\n  <li>運算子會對於 bit 進行運算， 結果也是基於 bit 來決定的。</li>\n</ul>\n<p>例如， 9 的二元表示法是 1001， 15 的二元表示法是 1111。因此，在使用位元運算子的時候，結果如下:</p>\n<table>\n  <thead>\n    <tr>\n      <th>運算式</th>\n      <th>結果</th>\n      <th>二元描述式</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>15 &amp; 9</code></td>\n      <td><code>9</code></td>\n      <td><code>1111 &amp; 1001 = 1001</code></td>\n    </tr>\n    <tr>\n      <td><code>15 | 9</code></td>\n      <td><code>15</code></td>\n      <td><code>1111 | 1001 = 1111</code></td>\n    </tr>\n    <tr>\n      <td><code>15 ^ 9</code></td>\n      <td><code>6</code></td>\n      <td><code>1111 ^ 1001 = 0110</code></td>\n    </tr>\n    <tr>\n      <td><code>~15</code></td>\n      <td><code>-16</code></td>\n      <td><code>~ 0000 0000 … 0000 1111 = 1111 1111 … 1111 0000</code></td>\n    </tr>\n    <tr>\n      <td><code>~9</code></td>\n      <td><code>-10</code></td>\n      <td><code>~ 0000 0000 … 0000 1001 = 1111 1111 … 1111 0110</code></td>\n    </tr>\n  </tbody>\n</table>\n<p>注意，在使用 位元 NOT 運算子時， 所有的 32 個 bit 都被進行 NOT 了，包含最左邊用來描述正負數的位元(two's-complement representation)。</p>\n<h4 id=\"位元移動運算子\">位元移動運算子</h4>\n<p>位元移動運算子需要兩個運算元: 第一個是運算的目標，第二個是要移動的位元數。移動的方向取決於使用的運算子。</p>\n<p>移動運算子會將運算元轉換成 32 bits 的整數，並且會回傳與左方運算元相同的型態。</p>\n<p>移動運算子在下表被列出.</p>\n<table>\n  <thead>\n    <tr>\n      <th>運算子</th>\n      <th>描述</th>\n      <th>範例</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>[左移](&lt;/zh-TW/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#&lt;&lt;_(Left_shift)&gt;) (<code>&lt;&lt;</code>)</td>\n      <td>這個運算子會將第 一個運算元的每個 bit 向左移動 第二個運算元所指定的 bit 數量。左邊超出的位數會被捨棄，右邊空出的位數以 0 補齊。</td>\n      <td><code>9&lt;&lt;2</code> 得到 36，因為 1001 向左移動 2 bits 會得到 100100， 也就是二進位的 36。</td>\n    </tr>\n    <tr>\n      <td>[有號右移](&lt;/zh-TW/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#&gt;&gt;_(Sign-propagating_right_shift)&gt;) (<code>&gt;&gt;</code>)</td>\n      <td>這個運算子會將第 一個運算元的每個 bit 向右移動 第二個運算元所指定的 bit 數量。右邊超出的位數會被捨棄，左邊空出的位數以最高位補齊。</td>\n      <td><code>9&gt;&gt;2</code> 得到 2，因為 1001 向右移動 2 bits 會得到 10，也就是二進位的 2。 相同的， <code>-9&gt;&gt;2</code> 會得到 -3，因為最高位用來表示正負號的 bit 被保留了。</td>\n    </tr>\n    <tr>\n      <td>[以 0 填充的右移](&lt;/zh-TW/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#&gt;&gt;&gt;_(Zero-fill_right_shift)&gt;) (<code>&gt;&gt;&gt;</code>)</td>\n      <td>這個運算子會將第 一個運算元的每個 bit 向右移動 第二個運算元所指定的 bit 數量。右邊超出的位數會被捨棄，左邊空出的位數以 0 補齊。</td>\n      <td><code>19&gt;&gt;&gt;2 得到</code> 4， 因為 10011 向右移動 2 bits 會得到 100，是二進位的 4。對於非負的數字而言， 以 0 填充的右移 會得到和 有號右移相同的結果。</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"邏輯運算子","title":"邏輯運算子","isH3":true,"content":"<p><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators\">邏輯運算子</a> 通常被用於布林(邏輯)值; 使用於 布林(邏輯)值時， 它們會回傳布林型態的值。 然而，<code>&amp;&amp;</code> 和 <code>||</code> 運算子實際上是回傳兩指定運算元之一，因此用於非布林型態值時，它可能會回傳一個非布林型態的值。 邏輯運算子將在下表中被詳細解釋。</p>\n<table>\n  <thead>\n    <tr>\n      <th>Operator</th>\n      <th>Usage</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators#logical_and\">邏輯 AND</a> (<code>&amp;&amp;</code>)</td>\n      <td><code>運算式1 &amp;&amp; 運算式2</code></td>\n      <td>假如 <code>運算式1</code> 可以被轉換成 false 的話，回傳 <code>運算式1</code>; 否則，回傳 <code>運算式2</code>。 因此，<code>&amp;&amp;</code>只有在 兩個運算元都是 True 時才會回傳 True，否則回傳 <code>false</code>。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators#logical_or\">邏輯 OR</a> (<code>||</code>)</td>\n      <td><code>運算式1 || 運算式2</code></td>\n      <td>假如 <code>運算式1</code> 可以被轉換成 true 的話，回傳 <code>運算式1</code>; 否則，回傳 <code>運算式2</code>。 因此，<code>||</code>在 兩個運算元有任一個是 True 時就會回傳 True，否則回傳 <code>false</code>。</td>\n    </tr>\n    <tr>\n      <td><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators#logical_not\">邏輯 NOT</a> (<code>!</code>)</td>\n      <td><code>!運算式</code></td>\n      <td>假如單一個運算元能被轉換成 True 時，回傳<code>false</code> ， 不然回傳 <code>true</code>。</td>\n    </tr>\n  </tbody>\n</table>\n<p>可以被轉換為 false 的運算式是 null， 0， NaN， 空字串 (\"\")，或 未定義。</p>\n<p>下面是 <code>&amp;&amp;</code> (邏輯 AND) 運算子 的範例。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a1 <span class=\"token operator\">=</span>  <span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// t &amp;&amp; t 回傳 true</span>\n<span class=\"token keyword\">var</span> a2 <span class=\"token operator\">=</span>  <span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t &amp;&amp; f 回傳 false</span>\n<span class=\"token keyword\">var</span> a3 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// f &amp;&amp; t 回傳 false</span>\n<span class=\"token keyword\">var</span> a4 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f &amp;&amp; f 回傳 false</span>\n<span class=\"token keyword\">var</span> a5 <span class=\"token operator\">=</span> <span class=\"token string\">\"Cat\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"Dog\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t &amp;&amp; t 回傳 Dog</span>\n<span class=\"token keyword\">var</span> a6 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"Cat\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// f &amp;&amp; t 回傳 false</span>\n<span class=\"token keyword\">var</span> a7 <span class=\"token operator\">=</span> <span class=\"token string\">\"Cat\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t &amp;&amp; f 回傳 false</span>\n</code></pre></div>\n<p>下列是 || (邏輯 OR) 運算子的範例。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> o1 <span class=\"token operator\">=</span>  <span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// t || t 回傳 true</span>\n<span class=\"token keyword\">var</span> o2 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// f || t 回傳 true</span>\n<span class=\"token keyword\">var</span> o3 <span class=\"token operator\">=</span>  <span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t || f 回傳 true</span>\n<span class=\"token keyword\">var</span> o4 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f || f 回傳 false</span>\n<span class=\"token keyword\">var</span> o5 <span class=\"token operator\">=</span> <span class=\"token string\">'Cat'</span> <span class=\"token operator\">||</span> <span class=\"token string\">'Dog'</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t || t 回傳 Cat</span>\n<span class=\"token keyword\">var</span> o6 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// f || t 回傳 Cat</span>\n<span class=\"token keyword\">var</span> o7 <span class=\"token operator\">=</span> <span class=\"token string\">'Cat'</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t || f 回傳 Cat</span>\n</code></pre></div>\n<p>下列是 ! (邏輯 NOT) 運算子的範例。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> n1 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// !t 回傳 false</span>\n<span class=\"token keyword\">var</span> n2 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// !f 回傳 true</span>\n<span class=\"token keyword\">var</span> n3 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token string\">'Cat'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// !t 回傳 false</span>\n</code></pre></div>\n<h4 id=\"短路解析\">短路解析</h4>\n<p>邏輯運算式是由左向右解析的， 他們會以下列規則嘗試進行 短路解析:</p>\n<ul>\n  <li><code>false</code> &amp;&amp; <em>任何東西</em> 是 false 的短路解析。</li>\n  <li><code>true</code> || <em>任何東西</em> 是 true 的短路解析。</li>\n</ul>\n<p>這些規則保證 解析總是正確的。 值得注意的地方是，剩餘部分的運算式並沒有被解析，所以不會占用任何效能。</p>"}},{"type":"prose","value":{"id":"字串運算子","title":"字串運算子","isH3":true,"content":"<p>除了作為比較運算子之外， 運算子 (+) 也能用於字串，將兩字串接在一起，並回傳接在一起後的結果。</p>\n<p>例如，</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我的 '</span> <span class=\"token operator\">+</span> <span class=\"token string\">'字串'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 會印出 字串 \"我的字串\"。</span>\n</code></pre></div>\n<p>簡化的設定運算子 += 也能用於串接字串。</p>\n<p>例如，</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> mystring <span class=\"token operator\">=</span> <span class=\"token string\">'字'</span><span class=\"token punctuation\">;</span>\nmystring <span class=\"token operator\">+=</span> <span class=\"token string\">'母'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到 \"字母\" 並賦與給變數 mystring.</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"條件（三元）運算子","title":"條件（三元）運算子","isH3":true,"content":"<p><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">條件運算子</a> 是 JavaScript 中唯一需要三個運算元的運算子。 這個運算子接受兩個運算元作為值且一個運算元作為條件。 語法是:</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">條件 ? 值1 : 值2\n</pre></div>\n<p>如果 <em>條件</em> 為 true，運算子回傳 <em>值 1，</em> 否則回傳 <em>值 2。</em> 你可以在任何使用標準運算子的地方改用 條件運算子。</p>\n<p>例如，</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> status <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>age <span class=\"token operator\">&gt;=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'成人'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'小孩'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>這個陳述句會將 \"成人\" 賦與給變數 <code>status</code> 假如 <code>age</code> 大於等於 18。 否則，會將 \"小孩\" 賦與給變數 <code>status</code>。</p>"}},{"type":"prose","value":{"id":"逗號運算子","title":"逗號運算子","isH3":true,"content":"<p><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">逗點運算子</a> (<code>,</code>) 作用是解析兩個運算元並回傳後面那個運算元的值。 這個運算子通常用於 for 迴圈內部，讓多個變數能在每次迴圈中被更新。</p>\n<p>例如，假如 <code>a</code> 是一個有十個物件在裡面的二維陣列， 下面的程式中就使用了逗點運算子來同時更新兩個變數。 這段程式碼會印出陣列中所有對角線上的物件:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a['</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">']['</span> <span class=\"token operator\">+</span> j <span class=\"token operator\">+</span> <span class=\"token string\">']= '</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"一元運算子","title":"一元運算子","isH3":true,"content":"<p>一元運算 是只需要一個運算元的運算。</p>\n<h4 id=\"delete\"><code>delete</code></h4>\n<p><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/delete\"><code>delete</code></a> 運算子會刪除物件，物件的性質，或是陣列中指定 index 的物件。 語法是:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">delete</span> 物件名稱<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> 物件名稱<span class=\"token punctuation\">.</span>性質<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> 物件名稱<span class=\"token punctuation\">[</span>索引<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> 性質<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 只有在 with 陳述句中可以使用</span>\n</code></pre></div>\n<p><code>物件名稱</code> 是物件的名稱， 性質 是物件中的一個特性， 索引 是用來表示物件在陣列中位置的一個整數。</p>\n<p>第四種形式只有在 <a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/with\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">with (en-US)</a> 陳述句中可用， 用來刪除物件中的一個特性。</p>\n<p>你可以用 <code>delete</code> 運算子來刪除隱式宣告的變數， 但不適用於使用 var 宣告的變數。</p>\n<p>假如 <code>delete</code> 運算子使用成功， 它會將物件 或是 物件的特性設定為 <code>未定義。</code> <code>delete</code> 運算子會在運算成功時回傳 true ，失敗時回傳 <code>false</code> 。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>x <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">43</span><span class=\"token punctuation\">;</span>\nmyobj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyobj<span class=\"token punctuation\">.</span>h <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 建立特性 h</span>\n<span class=\"token keyword\">delete</span> x<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 回傳 true (只有在隱式宣告時能被刪除)</span>\n<span class=\"token keyword\">delete</span> y<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 回傳 false (在使用 var 宣告時無法刪除)</span>\n<span class=\"token keyword\">delete</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 回傳 false (不能刪除內建定義的特性)</span>\n<span class=\"token keyword\">delete</span> myobj<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 回傳 true (可以刪除使用者自定義的特性)</span>\n<span class=\"token keyword\">delete</span> myobj<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 回傳 true (在隱式宣告時可被刪除)</span>\n</code></pre></div>\n<h5 id=\"刪除陣列元素\">刪除陣列元素</h5>\n<p>在你刪除了陣列中的一個元素後， 陣列的長度並不會改變。 例如， 假如你<code>刪除 a[3]</code>， <code>a[4]</code> 依然是 <code>a[4]</code> 而 <code>a[3]</code> 為 未定義。</p>\n<p>當使用 <code>delete</code> 運算子刪除陣列中的一個元素後， 那個元素便不再存在於陣列中了。 在下面的程式中， <code>trees[3]</code> 被用 delete 移除了。然而， <code>trees[3]</code> 的記憶體位址仍可用並且會回傳 未定義。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> trees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'redwood'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bay'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cedar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oak'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'maple'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> trees<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 不會執行到這裡</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>假如你希望給予陣列元素 未定義 的值， 你可以直接使用 <code>undefined</code> 關鍵字而不是使用 delete 運算子。 下列範例中， <code>trees[3]</code> 被指定了 <code>undefined</code>， 然而陣列元素依然存在:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> trees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'redwood'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bay'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cedar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oak'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'maple'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\ntrees<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 會執行這裡</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"typeof\"><code>typeof</code></h4>\n<p><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/typeof\"><code>typeof</code> 運算子</a> 能以下列任一方式使用:</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">typeof 運算元\ntypeof (運算元)\n</pre></div>\n<p><code>typeof</code> 運算子會回傳代表運算元類型的 字串。 <code>運算元能是字串，變數，關鍵字，或是會回傳型態的物件。</code> 括號是可有可無的。</p>\n<p>假設你定義了以下這些變數:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myFun <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'5 + 2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> shape <span class=\"token operator\">=</span> <span class=\"token string\">'round'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> size <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> today <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>typeof</code> 運算子會回傳下列結果:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> myFun<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 回傳 \"function\"</span>\n<span class=\"token keyword\">typeof</span> shape<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 回傳 \"string\"</span>\n<span class=\"token keyword\">typeof</span> size<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 回傳 \"number\"</span>\n<span class=\"token keyword\">typeof</span> today<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 回傳 \"object\"</span>\n<span class=\"token keyword\">typeof</span> doesntExist<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 回傳 \"undefined\"</span>\n</code></pre></div>\n<p>對於 <code>true</code> 和 <code>null關鍵字，</code> <code>typeof</code> 運算子會回傳下列結果:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 回傳 \"boolean\"</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 回傳 \"object\"</span>\n</code></pre></div>\n<p>對於字串或數字， <code>typeof</code> 運算子會回傳下列結果:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> <span class=\"token number\">62</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 回傳 \"number\"</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 回傳 \"string\"</span>\n</code></pre></div>\n<p>對於特性，<code>typeof</code> 運算子會回傳 特性的值的類型:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> document<span class=\"token punctuation\">.</span>lastModified<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 回傳 \"string\"</span>\n<span class=\"token keyword\">typeof</span> window<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 回傳 \"number\"</span>\n<span class=\"token keyword\">typeof</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">LN2</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 回傳 \"number\"</span>\n</code></pre></div>\n<p>對於 方法 及 函式， <code>typeof</code> 運算子會回傳下列結果:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> blur<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 回傳 \"function\"</span>\n<span class=\"token keyword\">typeof</span> eval<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 回傳 \"function\"</span>\n<span class=\"token keyword\">typeof</span> parseInt<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 回傳 \"function\"</span>\n<span class=\"token keyword\">typeof</span> shape<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 回傳 \"function\"</span>\n</code></pre></div>\n<p>對於內建定義的物件， <code>typeof</code> 運算子會回傳下列結果:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> Date<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 回傳 \"function\"</span>\n<span class=\"token keyword\">typeof</span> Function<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 回傳 \"function\"</span>\n<span class=\"token keyword\">typeof</span> Math<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 回傳 \"object\"</span>\n<span class=\"token keyword\">typeof</span> Option<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 回傳 \"function\"</span>\n<span class=\"token keyword\">typeof</span> String<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 回傳 \"function\"</span>\n</code></pre></div>\n<h4 id=\"void\"><code>void</code></h4>\n<p><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/void\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">void 運算子 (en-US)</a> 能以下列任一方式使用:</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">void (運算式)\nvoid 運算式\n</pre></div>\n<p><code>void</code> 運算子會解析運算式而不回傳任何值。 <code>運算式</code> 是 JavaScript 中要解析的對象。 括號是可有可無的，但是建議使用。</p>\n<p>你可以使用 <code>void</code> 運算子來解析超連結中的運算式。 運算式會被解析而不會在當前頁面被印出。</p>\n<p>下列範例是一個在點擊時甚麼都不做的超連結。 當使用者點擊連結時， <code>void(0)</code> 被解析為 未定義， 而甚麼都不會發生。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javascript:void(0)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>點擊這裡，甚麼都不會發生<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>下列範例是一個在使用者點擊時傳送表單的超連結。</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javascript:void(document.form.submit())<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n點擊以送出<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"關係運算子","title":"關係運算子","isH3":true,"content":"<p>關係運算子比較兩運算元並基於比較結果回傳布林值。</p>\n<h4 id=\"in\"><code>in</code></h4>\n<p><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/in\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">in 運算子 (en-US)</a> 在指定性質存在於物件中時回傳 true 。 語法是:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>性質名稱 <span class=\"token keyword\">in</span> 物件名稱\n</code></pre></div>\n<p>性質名稱 可以是 字串或數字，或是陣列的索引， 且物件名稱是物件的名稱。</p>\n<p>下列範例示範了 <code>in</code> 運算子的一些用法。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// 陣列</span>\n<span class=\"token keyword\">var</span> trees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'redwood'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bay'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cedar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oak'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'maple'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">0</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 回傳 true</span>\n<span class=\"token number\">3</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 回傳 true</span>\n<span class=\"token number\">6</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 回傳 false</span>\n<span class=\"token string\">'bay'</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 回傳 false (你必須指定 索引，</span>\n                   <span class=\"token comment\">// 而不是 索引所對應的元素)</span>\n<span class=\"token string\">'length'</span> <span class=\"token keyword\">in</span> trees<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 回傳 true (length 是陣列的性質之一)</span>\n\n<span class=\"token comment\">// 內建物件</span>\n<span class=\"token string\">'PI'</span> <span class=\"token keyword\">in</span> Math<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 回傳 true</span>\n<span class=\"token keyword\">var</span> myString <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"coral\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">'length'</span> <span class=\"token keyword\">in</span> myString<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 回傳 true</span>\n\n<span class=\"token comment\">// 自訂義物件</span>\n<span class=\"token keyword\">var</span> mycar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">make</span><span class=\"token operator\">:</span> <span class=\"token string\">'Honda'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token string\">'Accord'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token number\">1998</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">'make'</span> <span class=\"token keyword\">in</span> mycar<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 回傳 true</span>\n<span class=\"token string\">'model'</span> <span class=\"token keyword\">in</span> mycar<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 回傳 true</span>\n</code></pre></div>\n<h4 id=\"instanceof\"><code>instanceof</code></h4>\n<p><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/instanceof\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">instanceof 運算子 (en-US)</a> 在 指定物件 具有 指定的物件型態 時回傳 true。 語法是:</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">物件名稱 instanceof 物件類型\n</pre></div>\n<p><code>物件名稱</code> 是用來與 物件類型 比較的物件的名字， 物件類型 是物件的類型， 例如 <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> 或 <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>。</p>\n<p>當你需要在程式執行中確認物件的形態時，你可以使用 ins<code>tanceof</code> 運算子。 例如，當捕捉到例外時， 你可以依照例外的類型來決定用來處理意外的程式碼。</p>\n<p>例如，下列程式碼使用 <code>instanceof</code> 來判斷變數 <code>theDay</code> 是不是 <code>Date</code> 類型的物件。 因為 <code>theDay</code> 是 <code>Date</code> 類型的物件， 所以 if 陳述中的陳述句會被執行。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> theDay <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">1995</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>theDay <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 會被執行的陳述</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"運算子優先級","title":"運算子優先級","isH3":true,"content":"<p>運算子優先級決定運算子被使用於運算元的先後順序。 你也可以使用括號來強制指定優先級。</p>\n<p>下列表格列出了運算子的優先級， 從高到低。</p>\n<table>\n  <thead>\n    <tr>\n      <th>運算子類型</th>\n      <th>屬於該類別的運算子</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>成員</td>\n      <td><code>. []</code></td>\n    </tr>\n    <tr>\n      <td>呼叫/建立 實例</td>\n      <td><code>() new</code></td>\n    </tr>\n    <tr>\n      <td>反向/增加</td>\n      <td><code>! ~ - + ++ -- typeof void delete</code></td>\n    </tr>\n    <tr>\n      <td>乘法/除法</td>\n      <td><code>* / %</code></td>\n    </tr>\n    <tr>\n      <td>加法/減法</td>\n      <td><code>+ -</code></td>\n    </tr>\n    <tr>\n      <td>位元移動</td>\n      <td><code>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</code></td>\n    </tr>\n    <tr>\n      <td>關係運算子</td>\n      <td><code>&lt; &lt;= &gt; &gt;= in instanceof</code></td>\n    </tr>\n    <tr>\n      <td>相等性</td>\n      <td><code>== != === !==</code></td>\n    </tr>\n    <tr>\n      <td>位元 and</td>\n      <td><code>&amp;</code></td>\n    </tr>\n    <tr>\n      <td>位元 xor</td>\n      <td><code>^</code></td>\n    </tr>\n    <tr>\n      <td>位元 or</td>\n      <td><code>|</code></td>\n    </tr>\n    <tr>\n      <td>邏輯 and</td>\n      <td><code>&amp;&amp;</code></td>\n    </tr>\n    <tr>\n      <td>邏輯 or</td>\n      <td><code>||</code></td>\n    </tr>\n    <tr>\n      <td>條件運算子</td>\n      <td><code>?:</code></td>\n    </tr>\n    <tr>\n      <td>指定運算子</td>\n      <td><code>= += -= *= /= %= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;= &amp;= ^= |=</code></td>\n    </tr>\n    <tr>\n      <td>逗點運算子</td>\n      <td><code>,</code></td>\n    </tr>\n  </tbody>\n</table>\n<p>這個表格更詳細的版本，解釋了運算子的更多細節和關聯性， 可以在 <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#table\">JavaScript 參考</a> 中被找到。</p>"}},{"type":"prose","value":{"id":"運算式","title":"運算式","isH3":false,"content":"<p>運算式是任何一段可以取得一個值的程式碼。</p>\n<p>任何合乎語法的運算式都能取得一個值，概念上， 有兩種不同型態的運算式: 有副作用的 (例如: 將一個值指定給一個變數) 以及只為了取得值而解析的運算式。</p>\n<p>運算式 <code>x = 7</code> 是上述的第一種類型。這個使用 = 運算子的運算式會將數值 7 賦與給 x。 運算式本身也會被解析為 7。</p>\n<p>運算式 <code>3 + 4</code> 是上述的第二種類型。這個運算式使用 + 運算子把 3 和 4 加起來，而不指定給任何變數。</p>\n<p>JavaScript 運算式有下列幾種種類:</p>\n<ul>\n  <li>算術: 解析出數字， 例如 3.14159。（通常使用<a href=\"#%E7%AE%97%E8%A1%93%E9%81%8B%E7%AE%97%E5%AD%90\">算術運算子</a>。）</li>\n  <li>字串: 解析出字串， 例如 \"Fred\" or \"234\"。（通常使用<a href=\"#%E5%AD%97%E4%B8%B2%E9%81%8B%E7%AE%97%E5%AD%90\">字串運算子</a>。）</li>\n  <li>邏輯: 解析出 True 或 False（通常與<a href=\"#%E9%82%8F%E8%BC%AF%E9%81%8B%E7%AE%97%E5%AD%90\">邏輯運算子</a>相關。）</li>\n  <li>主流運算式: JavaScript 基本的關鍵字及運算式。</li>\n  <li>左側運算式: 左側是指定值的對象。</li>\n</ul>"}},{"type":"prose","value":{"id":"主流運算式","title":"主流運算式","isH3":true,"content":"<p>JavaScript 基本的關鍵字及運算式。</p>\n<h4 id=\"this\"><code>this</code></h4>\n<p><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/this\"><code>this</code> 關鍵字</a> 能取得當前所在物件。 一般而言， <code>this</code> 能取得呼叫處所在的物件。 你可以使用 點 或是 中括號 來取用該物件中的特性:</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">this['特性名稱']\nthis.特性名稱\n</pre></div>\n<p>以下定義一個叫做 <code>validate</code> 的函式，比較物件中特性 <code>value 與傳入的兩變數</code>:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> lowval<span class=\"token punctuation\">,</span> hival</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> lowval<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&gt;</span> hival<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不可用的值!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>你可以在表單的 <code>onChange</code> event handler 中呼叫 <code>validate</code> 函式， 並以 <code>this</code> 來傳入表單的元素， 範例如下:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>請輸入一介於18 與 99 的數字:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>3</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onChange</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<h4 id=\"分組運算子\">分組運算子</h4>\n<p>分組運算子 <code>( )</code> 控制了運算子的優先順序。 例如，你可以覆寫先乘除，後加減的優先順序，使其變成先加減，後乘除。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 預設運算級</span>\na <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> c     <span class=\"token comment\">// 7</span>\n<span class=\"token comment\">// 預設的結果</span>\na <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> c<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 7</span>\n\n<span class=\"token comment\">// 現在複寫運算級</span>\n<span class=\"token comment\">// 變成先進行加法，後乘法了</span>\n<span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> c   <span class=\"token comment\">// 9</span>\n\n<span class=\"token comment\">// 結果</span>\na <span class=\"token operator\">*</span> c <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> c <span class=\"token comment\">// 9</span>\n</code></pre></div>\n<h4 id=\"解析\">解析</h4>\n<p>解析是 JavaScript 中的一個實驗性功能， 在未來版本的 ECMAScript 計畫被導入。有兩種不同類型的解析:</p>\n<dl>\n  <dt id=\"sect2\"><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg> <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\"><code>[for (x of y) x]</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>陣列解析。</p>\n  </dd>\n  <dt id=\"sect3\"><svg class=\"icon icon-experimental\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-experimental\"></use>\n</svg> <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\"><code>(for (x of y) y)</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>產生器解析。</p>\n  </dd>\n</dl>\n<p>解析在許多程式語言中都存在，允許你快速地基於現存陣列產生新的陣列，例如:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">[</span><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">of</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> i<span class=\"token operator\">*</span>i <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [ 1, 4, 9 ]</span>\n\n<span class=\"token keyword\">var</span> abc <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>letters <span class=\"token keyword\">of</span> abc<span class=\"token punctuation\">)</span> letters<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [ 'a', 'b', 'c' ]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"左側運算式","title":"左側運算式","isH3":true,"content":"<p>左側是指定值的對象。</p>\n<h4 id=\"new\"><code>new</code></h4>\n<p>你可以使用 <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code> 運算子</a> 來建立一個使用者自定義物件或內建物件的實例。 用法如下:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> 物件名稱 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">物件型態</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>參數<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 參數<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> 參數<span class=\"token constant\">N</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"super\">super</h4>\n<p><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/super\">super 關鍵字</a> 用於呼叫物件的父物件中的函式。 在使用 <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Classes\">類別</a> 來呼叫父類別的建構子時很實用，例如:</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">super([參數]); // 呼叫父物件的建構子.\nsuper.父物件的函式([參數]);\n</pre></div>\n<h4 id=\"展開運算子\">展開運算子</h4>\n<p><a href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">展開運算子 (en-US)</a>能將運算式展開於需要多個參數的地方 (如函式呼叫) 或是需要多個元素 (如陣列字串常數) 的地方。</p>\n<p><strong>範例:</strong> 現在你想要用已存在的一個陣列做為新的一個陣列的一部份，當字串常數不再可用而你必須使用指令式編程，也就是使用，一連串的 <code>push</code>, <code>splice</code>, <code>concat</code>，等等。 展開運算子能讓過程變得更加簡潔:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> parts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'肩膀'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'膝蓋'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> lyrics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'頭'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>parts<span class=\"token punctuation\">,</span> <span class=\"token string\">'和'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'腳趾'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>相同的，展開運算子也適用於函式呼叫:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>參數<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-TW/docs/Web/JavaScript/Guide/Functions\">« 前頁</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-TW/docs/Web/JavaScript/Guide/Numbers_and_dates\">次頁  »</a></li>\n</ul>"}}],"toc":[{"text":"運算子","id":"運算子"},{"text":"運算式","id":"運算式"}],"summary":"這個章節將講述 JavaScript 的運算式與運算子，包括賦值運算子，比較運算子，算術運算子，位元運算子， 邏輯運算子, 字串運算子, 條件(三元)運算子 以及更多運算子.","popularity":0.0023,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Expressions and operators","locale":"en-US","native":"English (US)"},{"title":"Expresiones y operadores","locale":"es","native":"Español"},{"title":"Expressions et opérateurs","locale":"fr","native":"Français"},{"title":"式と演算子","locale":"ja","native":"日本語"},{"title":"표현식과 연산자","locale":"ko","native":"한국어"},{"title":"Expressões e operadores","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Выражения и операторы","locale":"ru","native":"Русский"},{"title":"表达式与运算符","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"zh-tw/web/javascript/guide/expressions_and_operators","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-tw/web/javascript/guide/expressions_and_operators/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-TW/docs/Web","title":"給開發者的網頁技術文件"},{"uri":"/zh-TW/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/zh-TW/docs/Web/JavaScript/Guide","title":"JavaScript 指南"},{"uri":"/zh-TW/docs/Web/JavaScript/Guide/Expressions_and_Operators","title":"運算式與運算子"}],"pageTitle":"運算式與運算子 - JavaScript | MDN","noIndexing":false}}