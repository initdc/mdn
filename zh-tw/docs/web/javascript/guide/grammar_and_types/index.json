{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"語法與型別","mdn_url":"/zh-TW/docs/Web/JavaScript/Guide/Grammar_and_types","locale":"zh-TW","native":"正體中文 (繁體)","sidebarHTML":"\n <ol>\n  <li><a href=\"/zh-TW/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/zh-TW/docs/Web/JavaScript/Tutorials\"><strong>Tutorials:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Complete beginners</summary>\n      <ol>\n        <li><a href=\"/zh-TW/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript basics</a></li>\n        <li><a href=\"/zh-TW/docs/Learn/JavaScript/First_steps\">JavaScript first steps</a></li>\n        <li><a href=\"/zh-TW/docs/Learn/JavaScript/Building_blocks\">JavaScript building blocks</a></li>\n        <li><a href=\"/zh-TW/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>JavaScript Guide</summary>\n      <ol>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Introduction\">Introduction</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Grammar_and_Types\">Grammar and types</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Control flow and error handling</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Loops_and_iteration\">Loops and iteration</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Functions\">Functions</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressions and operators</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Numbers_and_dates\">Numbers and dates</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Text_formatting\">Text formatting</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Regular_Expressions\">Regular expressions</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Indexed_collections\">Indexed collections</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Keyed_collections\">Keyed collections</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Working_with_Objects\">Working with objects</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Details of the object model</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Iterators_and_generators\">Iterators and generators</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Meta_programming\">Meta programming</a></li>\n          <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Intermediate</summary>\n      <ol>\n        <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/zh-TW/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">A re-introduction to JavaScript</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Equality comparisons and sameness</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Closures\">Closures</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Advanced</summary>\n      <ol>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Inheritance and the prototype chain</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Typed_arrays\">JavaScript typed arrays</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Memory_Management\">Memory Management</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/EventLoop\">Concurrency model and Event Loop</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/zh-TW/docs/Web/JavaScript/Reference\">References:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Built-in objects</summary>\n        <ol><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Expressions &amp; operators</summary>\n      <ol><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Statements &amp; declarations</summary>\n      <ol><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Functions</summary>\n      <ol><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Misc</summary>\n      <ol>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/JavaScript_technologies_overview\">JavaScript technologies overview</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Lexical_grammar\">Lexical grammar</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Data_structures\">JavaScript data structures</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Enumerability and ownership of properties</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Iteration_protocols\">Iteration protocols</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Strict_mode\">Strict mode</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Transitioning to strict mode</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Template_literals\">Template literals</a></li>\n        <li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Deprecated features</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-TW/docs/Web/JavaScript/Guide/Introduction\">« 前頁</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-TW/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">次頁  »</a></li>\n</ul>\n<p>本章討論 JavaScript 的基本語法與基礎資料類型、包括變數、常數、字元常數</p>"}},{"type":"prose","value":{"id":"基礎知識","title":"基礎知識","isH3":false,"content":"<p>JavaScript 許多基本語法借鑒自 Java，C 或是 C++，但亦受 Awk、Perl 和 Python 的影響。</p>\n<p>JavaScript 是 Case-sensitive（區分大小寫）並使用 Unicode 編碼。舉例來說，Früh (德文的\"early\") 可以當作變數的名稱。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">var Früh = \"foobar\";\n</pre></div>\n<p>但變數 früh 並不等於 Früh，因為大小寫對 JavaScript 是有區別的。</p>\n<p>在 JavaScript 中，每行指令被稱為 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Statement\">Statements <small>(en-US)</small></a>，並用分號（;）分隔。空格、Tab 與換行符號皆被視為空白。JavaScript 的文件會從左到右進行掃描，並轉換成一系列的元素，像是令牌（Token）、控制字符（Control characters）、換行器（line terminators）、註解（Comments）或是空白（Withespace），ECMAScript 也定義了特定的保留字和字面值，並在每個沒有加分號的 Statement 自動加上分號。然而，推薦的作法還是在每個 Statement 的結尾自行加上分號，以防止一些潛在的副作用，如果需要更多資訊，可以參考<a href=\"/zh-TW/docs/Web/JavaScript/Reference/Lexical_grammar\">這篇</a>。</p>"}},{"type":"prose","value":{"id":"註解（comments）","title":"註解（Comments）","isH3":false,"content":"<p>註解語法跟 C++ 和其他語言相同：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// a one line comment</span>\n\n<span class=\"token comment\">/* this is a longer,\n   multi-line comment\n */</span>\n\n<span class=\"token comment\">/* You can't, however, /* nest comments */</span> SyntaxError <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"宣告（declarations）","title":"宣告（Declarations）","isH3":false,"content":"<p>JavaScript 有三種宣告方式</p>\n<dl>\n  <dt id=\"var\"><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/var\"><code>var</code></a></dt>\n  <dd>\n    <p>宣告一個可隨意更改其內容的變數</p>\n  </dd>\n  <dt id=\"let\"><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code></a></dt>\n  <dd>\n    <p>宣告一個可隨意更改其內容的區塊區域變數</p>\n  </dd>\n  <dt id=\"const\"><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/const\"><code>const</code></a></dt>\n  <dd>\n    <p>宣告一個只可讀取的不可變常數</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"變數（variables）","title":"變數（Variables）","isH3":true,"content":"<p>變數（variable）是對值（value）的引用，變數的名稱被稱為 <a href=\"/zh-TW/docs/Glossary/Identifier\">identifiers</a> 需要遵從一定的規則。</p>\n<p>在 JavaScript 中，變數必須使用字母（letter）、下底線（_）、錢號（$）作為開頭；後面的字員組成可以包含數字（0-9）。JavaScript 是區分大小寫（case sensitive）的，大寫字母（'A' ~ 'Z'）和小寫字母（'a' ~ 'z'）皆可使用且不相等。</p>\n<p>You can use most of ISO 8859-1 or Unicode letters such as å and ü in identifiers (for more details see <a href=\"https://mathiasbynens.be/notes/javascript-identifiers-es6\" class=\"external\" rel=\" noopener\">this blog post</a>). You can also use the <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Lexical_grammar#string_literals\">Unicode escape sequences</a> as characters in identifiers.</p>\n<p>Some examples of legal names are <code>Number_hits</code>, <code>temp99</code>, <code>$credit</code>, and <code>_name</code>.</p>"}},{"type":"prose","value":{"id":"定義變數","title":"定義變數","isH3":true,"content":"<p>你可以透過三種方式來定義變數：</p>\n<ul>\n  <li>透過保留字 <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/var\"><code>var</code></a> 來定義變數，舉例來說： <code>var x = 42</code>，這種方式可以用來定義區域以及全域變數。</li>\n  <li>直接指定一個值給該變數，例如：<code>x = 42</code>，這種方式只能定義全域變數，如果在方法外面使用該方法定義變數，嚴格模式裡會產生警告，該定義方式應該盡可能避免。</li>\n  <li>透過保留字 <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code></a>，舉例來說：<code>let y = 13</code>，<a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code></a> 可以用來定義區塊裡的區域變數。想瞭解更多，可以參考<a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/const\">變數區域</a>的章節。</li>\n</ul>"}},{"type":"prose","value":{"id":"變數取值","title":"變數取值","isH3":true,"content":"<p>變數可以透過 <code>var</code> 或是 <code>let</code> 來定義，如果尚未指定數值給該變數，那麼該變數的值會是 <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>。如果嘗試去存取未定義的變數，會跳出 <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>ReferenceError</code></a> 的例外。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The value of a is '</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The value of a is undefined</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The value of b is '</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The value of b is undefined</span>\n<span class=\"token keyword\">var</span> b<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The value of c is '</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught ReferenceError: c is not defined</span>\n\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The value of x is '</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The value of x is undefined</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The value of y is '</span> <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught ReferenceError: y is not defined</span>\n<span class=\"token keyword\">let</span> y<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>你可以利用 <code>undefined</code> 來判斷該變數是否有值，在下面的程式碼的例子中，<code>input</code> 這個變數沒有賦值，<code>if</code> 判斷式會得到 <code>true</code> 的結果。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> input<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">doThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">doThat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>被賦予 <code>undefined</code> 的變數，在被當做布林值的情境下都會被視為 <code>false</code>，以下面的例子來說，程式碼會執行 <code>myFunction</code>，因為 <code>myArray</code> 是 <code>undefined</code>：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>myArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>被賦予 <code>undefined</code> 的變數，在和數值進行運算之後，會被轉成非數值（<code>NaN</code>）：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>\na <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Evaluates to NaN</span>\n</code></pre></div>\n<p>當你對 <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> 進行運算，<a href=\"/zh-TW/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> 會自動轉換成數值 0，如果當做布林值運算，會被當成 <code>false</code>，舉例來說：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Will log 0 to the console</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"變數範圍","title":"變數範圍","isH3":true,"content":"<p>當我們在函式外宣告一個變數時，這個變數會是一個全域變數 (global variable), 因為在這份程式文件裡面的所有程式碼都可以使用到這個變數。但當我們只在函式內宣告變數時，這變數是區域變數 (local variable)，因為變數只會在函式內被使用到。</p>\n<p><strong>請注意!!</strong> 在 ECMAScript 2015 以前的 JavaScript 版本裡，並沒有定義區塊描述 (<a href=\"/zh-TW/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#block_statement\">block statement</a>) 的變數有效範圍。更精確的說，之前版本所定義的變數，其特性相當於全域變數；不只在宣告的區塊或函數裡面有效 ，其變數值還會超出宣告區塊而影響到全部的描述碼。</p>\n<p>從下面例子來看，其輸出結果會是 5。雖然 x 是在 if { } 區塊裡面被宣告的，但卻因為有全域變數的特性，因此溢出大括號而成為後續描述碼的變數值。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// x is 5</span>\n</code></pre></div>\n<p>接著舉一個 ECMAScript 2015 之後的宣告範例。當使用了 <code>let</code> 這個區域變數宣告方式，變數 y 的有效範圍只有在 if { } 的範圍內，因此輸出結果是 ReferenceError。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// ReferenceError: y is not defined (y沒有被定義)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"變數提升","title":"變數提升","isH3":true,"content":"<p>\n  在 JavaScript 中另一件有關變數不常見的事, 是你可引用一個較晚宣告的變數並且不會有異常。這個概念被稱為「<strong>提升</strong>（<strong>hoisting</strong>）」；從意義上來說明，變數在 JavaScript 中是「被提升（hoisted）」或「被抬至（lifted）」到函式（function）或陳述式（statement）的頂部。\n  然而，被提升（hoisted）的變數將返回一個未定義的值（undefined）。所以即使你在使用或者引用這個變數之後才宣告和初始化它，它仍然會返回它是一個未定義的值（undefined）。\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/**\n * Example 1\n */</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Example 2\n */</span>\n<span class=\"token comment\">// will return a value of undefined</span>\n<span class=\"token keyword\">var</span> myvar <span class=\"token operator\">=</span> <span class=\"token string\">'my value'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myvar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n  <span class=\"token keyword\">var</span> myvar <span class=\"token operator\">=</span> <span class=\"token string\">'local value'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>上面的例子可以轉譯成如下相同的程式:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/**\n * Example 1\n */</span>\n<span class=\"token keyword\">var</span> x<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nx <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Example 2\n */</span>\n<span class=\"token keyword\">var</span> myvar <span class=\"token operator\">=</span> <span class=\"token string\">'my value'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> myvar<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myvar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n  myvar <span class=\"token operator\">=</span> <span class=\"token string\">'local value'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>由於提升(hoisting)，全部在函數(function) 中的 var 陳述式應該盡可能地置放在接近函數(function)的頂部。這個最佳實踐增加了程式碼的清晰度。</p>\n<p>在 ECMAScript 2015 中，let（const）不會將變數提升到區塊（block）的頂部。但是，在變數宣告之前就引用塊中的變數，會導致 <a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>ReferenceError</code></a>。變數從區塊（block）的開始到宣告被處理之前，就處於「暫時無效（temporal dead zone）」。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"函式提升","title":"函式提升","isH3":true,"content":"<p>針對函式來說，只有函式宣告式(function declaration)提昇到頂部，但函式表示式(function exprssion) 不被提昇至頂部。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/* Function declaration */</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"bar\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">/* Function expression */</span>\n\n<span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError: baz is not a function</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">baz</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"全域變數_global_variables","title":"全域變數 (Global variables)","isH3":true,"content":"<p>全域變數事實上是全域物件的屬性值。在網頁中的全域物件是 <a href=\"/zh-TW/docs/Web/API/Window\"><code>window</code></a>，因此你可使用 <code>window.variable</code> 的語法來設定及存取全域變數。</p>\n<p>Consequently, 你可以指定 window 或 frame 物件的名稱來存取在另一個在 window 物件或 frame 物件所宣告的全域變數。例如，如果在一個文檔中已宣告一個稱為 <code>phoneNumber</code> 的變數，你可以在 iframe 中使用 <code>parent.phoneNumber</code> 來存取該變數</p>"}},{"type":"prose","value":{"id":"常數_constants","title":"常數 (Constants)","isH3":true,"content":"<p>你可用 <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/const\"><code>const</code></a> 關鍵字來建立一個唯讀、有名稱的常數。 常數識別子的命名語法與變數識別子的命名語法是一樣的: 必須由一個英文字母，底線或錢符號($)開始，之後可包含英文字母，數字及底線字元。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token constant\">PI</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>當程式執行時，無法再透過賦值或重新宣告來改變常數已設定的值。常數必須被初始化。</p>\n<p>The scope rules for constants are the same as those for <code>let</code> block-scope variables. If the <code>const</code> keyword is omitted, the identifier is assumed to represent a variable.</p>\n<p>你不能在同一個局部範圍內使用與其它函式或變數相同的名稱來宣告變數。例如:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// THIS WILL CAUSE AN ERROR</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// THIS WILL CAUSE AN ERROR ALSO</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> g <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> g<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//statements</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>但是常數物件內的物件屬性並不受到保護，因此以下陳述式可以正常執行。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token constant\">MY_OBJECT</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string-property property\">'key'</span><span class=\"token operator\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">MY_OBJECT</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> <span class=\"token string\">'otherValue'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"資料結構及型別","title":"資料結構及型別","isH3":false,"content":""}},{"type":"prose","value":{"id":"資料型別_data_types","title":"資料型別 (Data types)","isH3":true,"content":"<p>最新 ECMAScript 標準定義以下七種資料型別:</p>\n<ul>\n  <li>六種基本(<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Primitive\">primitives <small>(en-US)</small></a>)資料型別 :\n    <ul>\n      <li><a href=\"/zh-TW/docs/Glossary/Boolean\">Boolean</a>. <code>true</code> and <code>false</code>.</li>\n      <li><a href=\"/zh-TW/docs/Glossary/Null\">null</a>. A special keyword denoting a null value. Because JavaScript is case-sensitive, <code>null</code> is not the same as <code>Null</code>, <code>NULL</code>, or any other variant.</li>\n      <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/undefined\">undefined <small>(en-US)</small></a>. A top-level property whose value is undefined.</li>\n      <li><a href=\"/zh-TW/docs/Glossary/Number\">Number</a>. <code>42</code> or <code>3.14159</code>.</li>\n      <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/String\">String <small>(en-US)</small></a>. \"Howdy\"</li>\n      <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol <small>(en-US)</small></a> (new in ECMAScript 2015). A data type whose instances are unique and immutable.</li>\n    </ul>\n  </li>\n  <li>and <a href=\"/zh-TW/docs/Glossary/Object\">Object</a></li>\n</ul>\n<p>儘管這些變數關聯性很小, 他們可以讓你在你的應用程式中, 產生出有意義的函數.</p>\n<p><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">物件 (en-US)</a>與 <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Function\">函數</a> 在語言中是其它的基本元素. 你可以把物件想成是一個被命名過且用來裝數值的容器,以及函數則為你的應用程式所執行的步驟.</p>"}},{"type":"prose","value":{"id":"資料型別轉換","title":"資料型別轉換","isH3":true,"content":"<p>JavaScript 是一個動態型別的語言，這意味著你不需要在宣告變數時定義它的資料型別，程式執行時會自動轉換，你可以用下面方式宣告變數：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>你可以指派字串在同個變數中，例如：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>answer <span class=\"token operator\">=</span> <span class=\"token string\">\"Thanks for all the fish...\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>由於 Javascript 是一個動態型別的語言，因此這樣的宣告方式不會導致錯誤。</p>\n<p>在該陳述式中，它調用了字串和數字，並使用 + 進行運算，JavaScript 會自動把數字轉換成字串，例如：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>x <span class=\"token operator\">=</span> <span class=\"token string\">\"The answer is \"</span> <span class=\"token operator\">+</span> <span class=\"token number\">42</span> <span class=\"token comment\">// \"The answer is 42\"</span>\ny <span class=\"token operator\">=</span> <span class=\"token number\">42</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" is the answer\"</span> <span class=\"token comment\">// \"42 is the answer\"</span>\n</code></pre></div>\n<p>在該陳述式中，它調用了其它運算子，JavaScript 就不會將數字轉換成字串，例如：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"37\"</span> <span class=\"token operator\">-</span> <span class=\"token number\">7</span> <span class=\"token comment\">// 30</span>\n<span class=\"token string\">\"37\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span> <span class=\"token comment\">// \"377\"</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"字串轉數值","title":"字串轉數值","isH3":true,"content":"<p>當代表數字的值以字串形式存在記憶體中，有些方法可用來將這種字串轉換成整數或浮點數。</p>\n<ul>\n  <li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/parseInt\"><code>parseInt()</code></a></li>\n  <li><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>parseFloat()</code></a></li>\n</ul>\n<p><code>parseInt</code> 只會返回整數，因此減少了對小數的使用。此外，parseInt 的最佳實務是始終包含基數參數。基數參數用於指定使用的數值系統。</p>\n<p>另一個將字串轉成數字是使用單元 <code>+</code> (unary plus) 運算子:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">'1.1'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'1.1'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'1.11.1'</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token string\">'1.1'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token string\">'1.1'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">2.2</span>\n<span class=\"token comment\">// 注意: 括號是為了易於閱讀，並不是必須的.</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"字面值（literals）","title":"字面值（Literals）","isH3":false,"content":"<p>您能使用字面值來表示 JavaScript 中的值。這些是您在腳本中實際提供的固定值，而不是變量。本節描述以下類型的字面值：</p>\n<ul>\n  <li><a href=\"#%E9%99%A3%E5%88%97%E5%AD%97%E9%9D%A2%E5%80%BC_array_literals\">Array literals</a></li>\n  <li><a href=\"#%E5%B8%83%E6%9E%97%E5%AD%97%E9%9D%A2%E5%80%BC_boolean_literals\">Boolean literals</a></li>\n  <li><a href=\"#%E6%B5%AE%E9%BB%9E%E6%95%B8%E5%AD%97%E9%9D%A2%E5%80%BC_floating-point_literals\">Floating-point literals</a></li>\n  <li><a href=\"#%E6%95%B4%E6%95%B8%E5%AD%97%E9%9D%A2%E5%80%BC_numerical_literals\">Integers</a></li>\n  <li><a href=\"#%E7%89%A9%E4%BB%B6%E5%AD%97%E9%9D%A2%E5%80%BC_object_literals\">Object literals</a></li>\n  <li><a href=\"#%E6%AD%A3%E8%A6%8F%E8%A1%A8%E9%81%94%E5%BC%8F%E5%AD%97%E9%9D%A2%E5%80%BC_regexp_literals\">RegExp literals</a></li>\n  <li><a href=\"#%E5%AD%97%E4%B8%B2%E5%AD%97%E9%9D%A2%E5%80%BC_string_literals\">String literals</a></li>\n</ul>"}},{"type":"prose","value":{"id":"陣列字面值_array_literals","title":"陣列字面值 (Array literals)","isH3":true,"content":"<p>陣列字面值是零或多個表達式的列表，每個表達式代表一個數組元素，並用方括號（[]）括起來。使用陣列字面值創建陣列時，將使用指定的值作為其元素對其進行初始化，並將其長度設置為指定的參數值。</p>\n<p>以下範例創建了陣列 <code>coffees</code> ，長度為 3 並包含三個元素：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> coffees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'French Roast'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Colombian'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Kona'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>備註：</strong> An array literal is a type of object initializer. See <a href=\"/zh-TW/docs/Web/JavaScript/Guide/Working_with_Objects#using_object_initializers\">Using Object Initializers</a>.</p>\n</div>\n<p>If an array is created using a literal in a top-level script, JavaScript interprets the array each time it evaluates the expression containing the array literal. In addition, a literal used in a function is created each time the function is called.</p>\n<p>Array literals are also <code>Array</code> objects. See <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> and <a href=\"/zh-TW/docs/Web/JavaScript/Guide/Indexed_collections\">Indexed collections</a> for details on <code>Array</code> objects.</p>\n<h4 id=\"extra_commas_in_array_literals\">Extra commas in array literals</h4>\n<p>You do not have to specify all elements in an array literal. If you put two commas in a row, the array is created with <code>undefined</code> for the unspecified elements. The following example creates the <code>fish</code> array:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> fish <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Lion'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'Angel'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>This array has two elements with values and one empty element (<code>fish[0]</code> is \"Lion\", <code>fish[1]</code> is <code>undefined</code>, and <code>fish[2]</code> is \"Angel\").</p>\n<p>If you include a trailing comma at the end of the list of elements, the comma is ignored. In the following example, the length of the array is three. There is no <code>myList[3]</code>. All other commas in the list indicate a new element.</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>備註：</strong> Trailing commas can create errors in older browser versions and it is a best practice to remove them.</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'home'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'school'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>In the following example, the length of the array is four, and <code>myList[0]</code> and <code>myList[2]</code> are missing.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">,</span><span class=\"token string\">'home'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'school'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>In the following example, the length of the array is four, and <code>myList[1]</code> and <code>myList[3]</code> are missing. <strong>Only the last comma is ignored.</strong></p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'home'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'school'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Understanding the behavior of extra commas is important to understanding JavaScript as a language, however when writing your own code: explicitly declaring the missing elements as <code>undefined</code> will increase your code's clarity and maintainability.</p>"}},{"type":"prose","value":{"id":"布林字面值_boolean_literals","title":"布林字面值 (Boolean literals)","isH3":true,"content":"<p>布林型別有兩種字面值： <code>true</code> 跟 <code>false</code>.</p>\n<p>Do not confuse the primitive Boolean values <code>true</code> and <code>false</code> with the true and false values of the Boolean object. The Boolean object is a wrapper around the primitive Boolean data type. See <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> for more information.</p>"}},{"type":"prose","value":{"id":"整數字面值_numerical_literals","title":"整數字面值 (Numerical literals)","isH3":true,"content":"<p>整數能表示為「十進制」、「十六進制」、「八進制」、「二進制」</p>\n<ul>\n  <li>十進制整數字面值由「『不帶前導 0』的整數序列」組成</li>\n  <li>八進制整數字面值由「『前導 0』」或『前導 0o』或『前導 0O』的整數序列」組成。八進制整數只能包含數字 0-7</li>\n  <li>十六進制整數字面值由「『前導 0x』」或『前導 0X』的整數序列」組成。十六進制整數只能包含數字 0-9 、字母 A-F 和 a-f</li>\n  <li>二進制整數字面值由「『前導 0b』」或『前導 0B』的整數序列」組成。二進制整數只能包含數字 0 跟 1</li>\n</ul>\n<p>整數字面值範例如下：</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">0, 117 and -345 (decimal, base 10)\n015, 0001 and -0o77 (octal, base 8)\n0x1123, 0x00111 and -0xF1A7 (hexadecimal, \"hex\" or base 16)\n0b11, 0b0011 and -0b11 (binary, base 2)\n</pre></div>\n<p>更多資訊請參閱 <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Lexical_grammar#numeric_literals\">Numeric literals in the Lexical grammar reference</a>.</p>"}},{"type":"prose","value":{"id":"浮點數字面值_floating-point_literals","title":"浮點數字面值 (Floating-point literals)","isH3":true,"content":"<p>浮點數字面值能包含以下部分：</p>\n<ul>\n  <li>整數部分 (十進位，可帶符號 \"+\" 或 \"-\" 於整數前)</li>\n  <li>小數點 \".\"</li>\n  <li>小數部分 (另一個十進位整數)</li>\n  <li>指數部分</li>\n</ul>\n<p>指數部分由「\"e\" 或 \"E\" 後面跟整數」所組成，可帶符號 \"+\" 或 \"-\" 於整數前。浮點數字面值至少由「一位數字」與「一個小數點 \"e\" (或 \"E\")」組成。</p>\n<p>簡言之，於法如下：</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">[(+|-)][digits][.digits][(E|e)[(+|-)]digits]\n</pre></div>\n<p>舉個例子：</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">3.1415926\n-.123456789\n-3.1E+12\n.1e-23\n</pre></div>"}},{"type":"prose","value":{"id":"物件字面值_object_literals","title":"物件字面值 (Object literals)","isH3":true,"content":"<p>物件字面值是用大括號（{}）括起來的零或多對鍵值對的列表。因為 \"{\" 將被解譯為區塊(block)的開頭，因此你不應在陳述句開頭使用物件字面值，這將導致錯誤或不預期的行為。</p>\n<p>以下是物件字面值的範例。<code>car</code> 物件包含三個屬性：</p>\n<ul>\n  <li>第一個屬性 <code>myCar</code> 賦值為字串 '<code>Saturn</code>'</li>\n  <li>第二個屬性 <code>getCar</code> 賦值為「調用函數<code>carTypes('Honda')</code>」的結果</li>\n  <li>第三個屬性 <code>special</code> 使用現有變量 <code>sales</code> 賦值</li>\n</ul>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> sales <span class=\"token operator\">=</span> <span class=\"token string\">'Toyota'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">carTypes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'Honda'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Sorry, we don't sell \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">myCar</span><span class=\"token operator\">:</span> <span class=\"token string\">'Saturn'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">getCar</span><span class=\"token operator\">:</span> <span class=\"token function\">carTypes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Honda'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">special</span><span class=\"token operator\">:</span> sales <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>myCar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Saturn</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>getCar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Honda</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>special<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Toyota</span>\n</code></pre></div>\n<p>此外，您可以使用數字或字串字面值作為屬性名，也可將物件嵌套在另一個物件中。如下範例：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">manyCars</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">'Saab'</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">'b'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Jeep'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span> <span class=\"token string\">'Mazda'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>manyCars<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Jeep</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Mazda</span>\n</code></pre></div>\n<p>物件屬性名可以是任何字串，包括空字串。如果屬性名不是有效的 JavaScript <a href=\"/zh-TW/docs/Glossary/Identifier\">識別字</a> 或數字，則必須將其用引號引起來。無效的屬性名稱也不能作為點 (<code>.</code>) 屬性訪問，但是可以使用類似數組的符號（\"<code>[]</code>\"）進行訪問和設置。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> unusualPropertyNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string-property property\">''</span><span class=\"token operator\">:</span> <span class=\"token string\">'An empty string'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'!'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bang!'</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>unusualPropertyNames<span class=\"token punctuation\">.</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// SyntaxError: Unexpected string</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>unusualPropertyNames<span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// An empty string</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>unusualPropertyNames<span class=\"token punctuation\">.</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// SyntaxError: Unexpected token !</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>unusualPropertyNames<span class=\"token punctuation\">[</span><span class=\"token string\">'!'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Bang!</span>\n</code></pre></div>\n<h4 id=\"enhanced_object_literals\">Enhanced Object literals</h4>\n<p>In ES2015, object literals are extended to support setting the prototype at construction, shorthand for <code>foo: foo</code> assignments, defining methods, making super calls, and computing property names with expressions. Together, these also bring object literals and class declarations closer together, and let object-based design benefit from some of the same conveniences.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// __proto__</span>\n    <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> theProtoObj<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Shorthand for ‘handler: handler’</span>\n    handler<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Methods</span>\n    <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// Super calls</span>\n     <span class=\"token keyword\">return</span> <span class=\"token string\">'d '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Computed (dynamic) property names</span>\n    <span class=\"token punctuation\">[</span> <span class=\"token string\">'prop_'</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Please note:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">'alpha'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// alpha</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// two</span>\n<span class=\"token comment\">//console.log(foo.2);  // Error: missing ) after argument list</span>\n<span class=\"token comment\">//console.log(foo[a]); // Error: a is not defined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// alpha</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">[</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// two</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"正規表達式字面值_regexp_literals","title":"正規表達式字面值 (RegExp literals)","isH3":true,"content":"<p>正則表達式字面值是包含在斜杠間的樣式。以下是正則表達式文字的範例。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">ab+c</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"字串字面值_string_literals","title":"字串字面值 (String literals)","isH3":true,"content":"<p>字串字面值是用雙引號（“）或單引號（'）包住的零或多個字元。字串必須用同類的引號定界；也就是「兩個單引號」或「兩個雙引號」。以下是字串字面值的範例：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">'foo'</span>\n<span class=\"token string\">\"bar\"</span>\n<span class=\"token string\">'1234'</span>\n<span class=\"token string\">'one line \\n another line'</span>\n<span class=\"token string\">\"John's cat\"</span>\n</code></pre></div>\n<p>你可以在字串字面值上調用 String 物件的任何方法 - JavaScript 將自動轉換字串字面值為臨時 String 物件並調用該方法，然後丟棄該臨時 String 物件。您還可以將 String.length 屬性與字串字面值一起使用：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John's cat\"</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Will print the number of symbols in the string including whitespace.</span>\n<span class=\"token comment\">// In this case, 10.</span>\n</code></pre></div>\n<p>In ES2015, template literals are also available. Template literals are enclosed by the back-tick (` `) (<a href=\"http://en.wikipedia.org/wiki/Grave_accent\" class=\"external\" rel=\" noopener\">grave accent</a>) character instead of double or single quotes. Template strings provide syntactic sugar for constructing strings. This is similar to string interpolation features in Perl, Python and more. Optionally, a tag can be added to allow the string construction to be customized, avoiding injection attacks or constructing higher level data structures from string contents.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Basic literal string creation</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">In JavaScript '\\n' is a line-feed.</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token comment\">// Multiline strings</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">In JavaScript template strings can run\n over multiple lines, but double and single\n quoted strings cannot.</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token comment\">// String interpolation</span>\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> time <span class=\"token operator\">=</span> <span class=\"token string\">'today'</span><span class=\"token punctuation\">;</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, how are you </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>time<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">?</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token comment\">// Construct an HTTP request prefix is used to interpret the replacements and construction</span>\n<span class=\"token constant\">POST</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://foo.org/bar?a=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;b=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n     Content-Type: application/json\n     X-Credentials: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>credentials<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n     { \"foo\": </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>foo<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,\n       \"bar\": </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>bar<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">}</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">(</span>myOnReadyStateChangeHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>You should use string literals unless you specifically need to use a String object. See <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> for details on <code>String</code> objects.</p>\n<h4 id=\"字串裡的特殊字元\">字串裡的特殊字元</h4>\n<p>除了普通字元，字串也能包含特殊字元，範例如下：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">'one line \\n another line'</span>\n</code></pre></div>\n<p>下表列出了可以在 JavaScript 字串中使用的特殊字元。</p>\n<table>\n  <thead>\n    <tr>\n      <th>字元</th>\n      <th>意涵</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>\\0</code></td>\n      <td>Null Byte</td>\n    </tr>\n    <tr>\n      <td><code>\\b</code></td>\n      <td>退格 (Backspace)</td>\n    </tr>\n    <tr>\n      <td><code>\\f</code></td>\n      <td>Form feed</td>\n    </tr>\n    <tr>\n      <td><code>\\n</code></td>\n      <td>換行 (New line)</td>\n    </tr>\n    <tr>\n      <td><code>\\r</code></td>\n      <td>回車 (Carriage return)</td>\n    </tr>\n    <tr>\n      <td><code>\\t</code></td>\n      <td>跳格 (Tab)</td>\n    </tr>\n    <tr>\n      <td><code>\\v</code></td>\n      <td>Vertical tab</td>\n    </tr>\n    <tr>\n      <td><code>\\'</code></td>\n      <td>Apostrophe or single quote</td>\n    </tr>\n    <tr>\n      <td><code>\\\"</code></td>\n      <td>Double quote</td>\n    </tr>\n    <tr>\n      <td><code>\\\\</code></td>\n      <td>Backslash character</td>\n    </tr>\n    <tr>\n      <td><code>\\XXX</code></td>\n      <td>The character with the Latin-1 encoding specified by up to three octal digits <em>XXX</em> between 0 and 377. For example, \\251 is the octal sequence for the copyright symbol.</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>\\xXX</code></td>\n      <td>The character with the Latin-1 encoding specified by the two hexadecimal digits <em>XX</em> between 00 and FF. For example, \\xA9 is the hexadecimal sequence for the copyright symbol.</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>\\uXXXX</code></td>\n      <td>The Unicode character specified by the four hexadecimal digits <em>XXXX</em>. For example, \\u00A9 is the Unicode sequence for the copyright symbol. See <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Lexical_grammar#string_literals\">Unicode escape sequences</a>.</td>\n    </tr>\n    <tr>\n      <td><code>\\u{XXXXX}</code></td>\n      <td>Unicode code point escapes. For example, \\u{2F804} is the same as the simple Unicode escapes \\uD87E\\uDC04.</td>\n    </tr>\n  </tbody>\n</table>\n<h4 id=\"escaping_characters\">Escaping characters</h4>\n<p>For characters not listed in the table, a preceding backslash is ignored, but this usage is deprecated and should be avoided.</p>\n<p>You can insert a quotation mark inside a string by preceding it with a backslash. This is known as <em>escaping</em> the quotation mark. For example:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> quote <span class=\"token operator\">=</span> <span class=\"token string\">\"He read \\\"The Cremation of Sam McGee\\\" by R.W. Service.\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>quote<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The result of this would be:</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">He read \"The Cremation of Sam McGee\" by R.W. Service.\n</pre></div>\n<p>To include a literal backslash inside a string, you must escape the backslash character. For example, to assign the file path <code>c:\\temp</code> to a string, use the following:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> home <span class=\"token operator\">=</span> <span class=\"token string\">'c:\\\\temp'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>You can also escape line breaks by preceding them with backslash. The backslash and line break are both removed from the value of the string.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'this string \\\nis broken \\\nacross multiple \\\nlines.'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// this string is broken across multiplelines.</span>\n</code></pre></div>\n<p>Although JavaScript does not have \"heredoc\" syntax, you can get close by adding a line break escape and an escaped line break at the end of each line:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> poem <span class=\"token operator\">=</span>\n<span class=\"token string\">'Roses are red,\\n\\\nViolets are blue.\\n\\\nSugar is sweet,\\n\\\nand so is foo.'</span>\n</code></pre></div>\n<p>ECMAScript 2015 introduces a new type of literal, namely <a href=\"/en-US/docs/Web/JavaScript/Reference/Template_literals\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">template literals (en-US)</a>. This allows for many new features including multiline strings!</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> poem <span class=\"token operator\">=</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Roses are red,\nViolets are blue.\nSugar is sweet,\nand so is foo.</span><span class=\"token template-punctuation string\">`</span></span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"more_information","title":"More information","isH3":false,"content":"<p>This chapter focuses on basic syntax for declarations and types. To learn more about JavaScript's language constructs, see also the following chapters in this guide:</p>\n<ul>\n  <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Control flow and error handling</a></li>\n  <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Loops_and_iteration\">Loops and iteration</a></li>\n  <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Functions\">Functions</a></li>\n  <li><a href=\"/zh-TW/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressions and operators</a></li>\n</ul>\n<p>In the next chapter, we will have a look at control flow constructs and error handling.</p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-TW/docs/Web/JavaScript/Guide/Introduction\">« 前頁</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-TW/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">次頁  »</a></li>\n</ul>"}}],"toc":[{"text":"基礎知識","id":"基礎知識"},{"text":"註解（Comments）","id":"註解（comments）"},{"text":"宣告（Declarations）","id":"宣告（declarations）"},{"text":"資料結構及型別","id":"資料結構及型別"},{"text":"字面值（Literals）","id":"字面值（literals）"},{"text":"More information","id":"more_information"}],"summary":"本章討論 JavaScript 的基本語法與基礎資料類型、包括變數、常數、字元常數","popularity":0.0008,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Grammar and types","locale":"en-US","native":"English (US)"},{"title":"Gramática y Tipos","locale":"es","native":"Español"},{"title":"Types et grammaire","locale":"fr","native":"Français"},{"title":"文法とデータ型","locale":"ja","native":"日本語"},{"title":"문법과 자료형","locale":"ko","native":"한국어"},{"title":"Sintaxe e tipos","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Грамматика и типы","locale":"ru","native":"Русский"},{"title":"语法和数据类型","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"zh-tw/web/javascript/guide/grammar_and_types","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-tw/web/javascript/guide/grammar_and_types/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-TW/docs/Web","title":"給開發者的網頁技術文件"},{"uri":"/zh-TW/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/zh-TW/docs/Web/JavaScript/Guide","title":"JavaScript 指南"},{"uri":"/zh-TW/docs/Web/JavaScript/Guide/Grammar_and_types","title":"語法與型別"}],"pageTitle":"語法與型別 - JavaScript | MDN","noIndexing":false}}