{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"try...catch 語法","mdn_url":"/zh-TW/docs/Web/JavaScript/Reference/Statements/try...catch","locale":"zh-TW","native":"正體中文 (繁體)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><code>try...catch</code> 語法標記出一整塊需要測試的語句，並指定一個以上的回應方法，萬一有例外拋出時，<code>try...catch</code> 語句就會捕捉。</p>\n<p><code>try...catch</code> 語法由 <code>try</code> 區塊所組成，其中內含一個以上的語句，和零個以上的 <code>catch</code> 區塊，其中內含語句用來指明當例外在 try 區塊裡拋出時要做些什麼。也就是當你希望 <code>try</code> 區塊成功，但如果他不成功時，你會想要把控制權移交給 <code>catch</code> 區塊。如果任何在 <code>try</code> 區塊內部裡的語句（或者在 <code>try</code> 區塊內部呼叫的函數裡）拋出例外，控制權將立即轉移給 <code>catch</code> 區塊。如果沒有例外從 <code>try</code> 區塊裡拋出，就會跳過 <code>catch</code> 區塊。<code>finally</code> 區塊會在 <code>try</code> 或 <code>catch</code> 區塊執行之後才執行，但會在 <code>try...catch</code> 語法後面的語句之前執行。</p>\n<p>以下範例使用 <code>try...catch</code> 語法。本範例呼叫函數，這個函數是用來在陣列裡根據傳給函數的值來查詢月份的名稱。如果傳入的值不符合月份的數字 (1-12)，就會拋出值為 <code>InvalidMonthNo</code> 的例外，而且在 <code>catch</code> 區塊裡的語句會把 <code>monthName</code> 變數設定為 <code>unknown</code>。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">getMonthName</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">mo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mo<span class=\"token operator\">=</span>mo<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 針對陣列索引調整月份的數字 (1=Jan, 12=Dec)</span>\n    <span class=\"token keyword\">var</span> months<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jan\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Feb\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Mar\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Apr\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"May\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Jun\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Jul\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"Aug\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Sep\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Oct\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Nov\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Dec\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>months<span class=\"token punctuation\">[</span>mo<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> months<span class=\"token punctuation\">[</span>mo<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">throw</span> <span class=\"token string\">\"InvalidMonthNo\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 需要測試的語句</span>\n    monthName<span class=\"token operator\">=</span><span class=\"token function\">getMonthName</span><span class=\"token punctuation\">(</span>myMonth<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 可拋出例外的函數</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    monthName<span class=\"token operator\">=</span><span class=\"token string\">\"unknown\"</span>\n    <span class=\"token function\">logMyErrors</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 把例外物件傳給錯誤處理器</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"catch_區塊\">catch 區塊</h4>\n<p>你可以使用單一的 <code>catch</code> 區塊來處理所有在 <code>try</code> 區塊裡可能會產生的例外，或者你也可以使用分離的 <code>catch</code> 區塊，每一個皆各自處理特定的例外類型。</p>\n<p>\n  <strong>單一 catch 區塊</strong>\n  使用單一 <code>try...catch</code> 語法的 <code>catch</code> 區塊針對在 <code>try</code> 區塊裡拋出的所有例外來執行錯誤處理的代碼。\n</p>\n<p>單一的 <code>catch</code> 區塊語句如下︰</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>catchID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  statements\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>catch</code> 區塊所指定的識別子（前面語句裡的 <code>catchID</code>）持有由 <code>throw</code> 語法所指定的值。你可以使用這個識別子來取得有關於被拋出的例外的資訊。當進入 <code>catch</code> 區塊時，JavaScript 就會建立這個識別子。識別子只能在 <code>catch</code> 區塊的期間內持續作用。<code>catch</code> 區塊執行結束以後，識別子就不再能使用。</p>\n<p>舉例來說，以下代碼會拋出例外。當例外出現的時候，控制權就轉移給 <code>catch</code> 區塊。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">throw</span> <span class=\"token string\">\"myException\"</span> <span class=\"token comment\">// 產生例外</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 用來處理任何例外的語句</span>\n   <span class=\"token function\">logMyErrors</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 把例外物件傳給錯誤處理器</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>\n  <strong>多重 catch 區塊</strong>\n  單一的 <code>try</code> 語句可以對應複數個有前提條件的 <code>catch</code> 區塊，每一個皆可處理特定的例外的類型。於是，當指定的的例外被拋出時，就只會進入適當條件的 <code>catch</code> 區塊。你也可以針對所有未指定的例外，使用選用性的對應所有例外的 <code>catch</code> 區塊來作為語法裡最後一個的 catch 區塊。\n</p>\n<p>舉例來說，以下函數呼叫三個其他的函數（已在別處定義了）來檢驗自己的參數。如果檢驗函數判斷出他所要檢驗的元素是無效的話，他就返回 0，導致呼叫者拋出對應的例外。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">getCustInfo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> email</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">var</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">validate_name</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token keyword\">throw</span> <span class=\"token string\">\"InvalidNameException\"</span>\n   <span class=\"token keyword\">else</span>\n       n <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">validate_id</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">throw</span> <span class=\"token string\">\"InvalidIdException\"</span>\n       <span class=\"token keyword\">else</span>\n          i <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">validate_email</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">throw</span> <span class=\"token string\">\"InvalidEmailException\"</span>\n       <span class=\"token keyword\">else</span>\n          e <span class=\"token operator\">=</span> email<span class=\"token punctuation\">;</span>\n       cust <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>cust<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>有各種條件的 <code>catch</code> 區塊會把控制權安排給適當的例外處理器。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 可以拋出三個例外的函數</span>\n   <span class=\"token function\">getCustInfo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lee\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1234</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lee@netscape.com\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e <span class=\"token keyword\">if</span> e <span class=\"token operator\">==</span> <span class=\"token string\">\"InvalidNameException\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 針對無效的名稱呼叫處理器</span>\n   <span class=\"token function\">bad_name_handler</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e <span class=\"token keyword\">if</span> e <span class=\"token operator\">==</span> <span class=\"token string\">\"InvalidIdException\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 針對無效的 ID 呼叫處理器</span>\n   <span class=\"token function\">bad_id_handler</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e <span class=\"token keyword\">if</span> e <span class=\"token operator\">==</span> <span class=\"token string\">\"InvalidEmailException\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 針對無效的電子郵件位址呼叫處理器</span>\n   <span class=\"token function\">bad_email_handler</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 不知道該做什麼，就記在日誌裡</span>\n   <span class=\"token function\">logError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"finally_區塊\">finally 區塊</h4>\n<p><code>finally</code> 區塊內含的語句，會在 try 和 catch 區塊執行以後、並在 <code>try...catch</code> 語法後面的語句之前來執行。無論有沒有被拋出的例外，<code>finally</code> 區塊都會執行。如果有被拋出的例外，即使沒有 catch 區塊來處理這些例外，還是會執行 <code>finally</code> 區塊裡的語句。</p>\n<p>當出現例外時，你可以使用 <code>finally</code> 區塊來使你的 Script 優美的停止。舉例來說，你可能需要釋放 Script 所佔用的資源。以下範例開啟了檔案，並執行使用這個檔案（伺服端的 JavaScript 可讓你存取檔案）的語句。如果在開啟檔案時有例外被拋出，<code>finally</code> 區塊會在 Script 停止之前把檔案關閉。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">openMyFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">writeMyFile</span><span class=\"token punctuation\">(</span>theData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 這裡有可能拋出錯誤</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果我們得到錯誤，就處理他</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">closeMyFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 永遠會關閉這項資源</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"try...catch_語法的嵌套\">try...catch 語法的嵌套</h4>\n<p>你可以嵌套一個以上的 <code>try...catch</code> 語法。如果有一個內部的 <code>try...catch</code> 語法沒有 catch 區塊，圍住這些 <code>try...catch</code> 語法的 catch 區塊就會被用來比對。</p>\n<h4 id=\"error_物件的用處\">Error 物件的用處</h4>\n<p>根據錯誤的類型，你有可能使用 “name” 和 “message” 屬性來取得更多明確的訊息。“name” 提供錯誤的一般類別（例如，“DOMException” 或 “Error”），“message” 通常提供更為簡練的訊息，如此就能把錯誤物件轉換為字串來取得訊息。</p>\n<p>如果你要拋出你自己的例外，以從這些屬性取得好處（例如，如果你的 catch 區塊不區分你自己的例外和系統的例外的話），你可以使用錯誤建構子。例如︰</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">doSomethingErrorProne</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ourCodeMakesAMistake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The message'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">doSomethingToGetAJavascriptError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">doSomethingErrorProne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 警報 'Error'</span>\n   <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 警報 'The message' 或 JavaScript 錯誤訊息</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-TW/docs/Web/JavaScript/教學/例外處理語法/throw_語法\">« 前頁</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-TW/docs/Web/JavaScript/教學/函數的定義\">次頁  »</a></li>\n</ul>"}}],"toc":[],"summary":"try...catch 語法標記出一整塊需要測試的語句，並指定一個以上的回應方法，萬一有例外拋出時，try...catch 語句就會捕捉。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"try...catch","locale":"en-US","native":"English (US)"},{"title":"try...catch","locale":"es","native":"Español"},{"title":"try...catch","locale":"fr","native":"Français"},{"title":"try...catch","locale":"ja","native":"日本語"},{"title":"try...catch","locale":"ko","native":"한국어"},{"title":"try...catch","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"try...catch","locale":"ru","native":"Русский"},{"title":"try...catch","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"zh-tw/web/javascript/reference/statements/try...catch","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-tw/web/javascript/reference/statements/try...catch/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-TW/docs/Web","title":"給開發者的網頁技術文件"},{"uri":"/zh-TW/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/zh-TW/docs/Web/JavaScript/Reference","title":"JavaScript 參考文件"},{"uri":"/zh-TW/docs/Web/JavaScript/Reference/Statements","title":"陳述式與宣告"},{"uri":"/zh-TW/docs/Web/JavaScript/Reference/Statements/try...catch","title":"try...catch 語法"}],"pageTitle":"try...catch 語法 - JavaScript | MDN","noIndexing":false}}