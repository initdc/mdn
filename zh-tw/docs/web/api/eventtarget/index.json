{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"EventTarget","mdn_url":"/zh-TW/docs/Web/API/EventTarget","locale":"zh-TW","native":"正體中文 (繁體)","sidebarHTML":"<ol><li><strong><a href=\"/zh-TW/docs/Web/API/EventTarget\"><code>EventTarget</code></a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Constructor</summary><ol><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/EventTarget/EventTarget\"><code>EventTarget()</code> <small>(en-US)</small></a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Methods</summary><ol><li><a href=\"/zh-TW/docs/Web/API/EventTarget/addEventListener\"><code>addEventListener()</code></a></li><li><a href=\"/zh-TW/docs/Web/API/EventTarget/dispatchEvent\"><code>dispatchEvent()</code></a></li><li><a href=\"/zh-TW/docs/Web/API/EventTarget/removeEventListener\"><code>removeEventListener()</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>EventTarget</code></strong> 介面定義了其實作的物件具有接收事件的能力，也可能擁有處理事件的監聽器。</p>\n<p>除了最為常見的 <a href=\"/zh-TW/docs/Web/API/Element\"><code>Element</code></a>、<a href=\"/zh-TW/docs/Web/API/Document\"><code>Document</code></a> 與 <a href=\"/zh-TW/docs/Web/API/Window\"><code>Window</code></a> 繼承或實作了 <code>EventTarget</code> 介面之外，其它的物件還有 <a href=\"/zh-TW/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a>、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioNode\"><code>AudioNode</code> <small>(en-US)</small></a>、<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/AudioContext\"><code>AudioContext</code> <small>(en-US)</small></a>⋯ 等等。</p>\n<p>許多 <code>EventTarget</code>（包括 Element、Document 和 Window）除了透過 <a href=\"/zh-TW/docs/Web/API/EventTarget/addEventListener\" title=\"addEventListener()\"><code>addEventListener()</code></a> 方法外，還可藉由 <a href=\"/zh-TW/docs/Web/API/Document_Object_Model\" title=\"DOM\"><code>DOM</code></a> 物件的屬性（<a href=\"/zh-TW/docs/Glossary/property/JavaScript\">property</a>）或 <a href=\"/zh-TW/docs/Web/HTML/Element\">HTML 元素</a>屬性（<a href=\"/zh-TW/docs/Glossary/Attribute\">attribute</a>）來設定<a href=\"/en-US/docs/Web/Events/Event_handlers\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">事件處理器 (en-US)</a>。</p>"}},{"type":"prose","value":{"id":"方法","title":"方法","isH3":false,"content":"<dl>\n  <dt id=\"eventtarget.addeventlistener\"><a href=\"/zh-TW/docs/Web/API/EventTarget/addEventListener\"><code>EventTarget.addEventListener()</code></a></dt>\n  <dd>\n    <p>於 <code>EventTarget</code> 物件上註冊指定事件的監聽器。</p>\n  </dd>\n  <dt id=\"eventtarget.removeeventlistener\"><a href=\"/zh-TW/docs/Web/API/EventTarget/removeEventListener\"><code>EventTarget.removeEventListener()</code></a></dt>\n  <dd>\n    <p>移除 <code>EventTarget</code> 物件上的指定事件監聽器。</p>\n  </dd>\n  <dt id=\"eventtarget.dispatchevent\"><a href=\"/zh-TW/docs/Web/API/EventTarget/dispatchEvent\"><code>EventTarget.dispatchEvent()</code></a></dt>\n  <dd>\n    <p>對此 <code>EventTarget</code> 物件派送（dispatch）一個事件物件，也就是於此 <code>EventTarget</code> 物件上觸發一個指定的事件物件實體。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"mozilla_chrome_code_的額外方法","title":"Mozilla chrome code 的額外方法","isH3":true,"content":"<p>Mozilla extensions for use by JS-implemented event targets to implement on properties. See also <a href=\"/docs/Mozilla/WebIDL_bindings\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">WebIDL bindings</a>.</p>\n<ul>\n  <li>void <strong>setEventHandler</strong>(DOMString type, EventHandler handler) <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg></li>\n  <li>EventHandler <strong>getEventHandler</strong>(DOMString type) <svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg></li>\n</ul>"}},{"type":"prose","value":{"id":"範例","title":"範例","isH3":false,"content":""}},{"type":"prose","value":{"id":"simple_implementation_of_eventtarget","title":"Simple implementation of EventTarget","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">EventTarget</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">EventTarget</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>listeners <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">EventTarget</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">addEventListener</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>type <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">EventTarget</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">removeEventListener</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>type <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">var</span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      stack<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">EventTarget</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">dispatchEvent</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>type <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">var</span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>listeners<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  event<span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    stack<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>event<span class=\"token punctuation\">.</span>defaultPrevented<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><iframe class=\"sample-code-frame\" title=\"Simple implementation of EventTarget\" id=\"frame__simple_implementation_of_eventtarget\" src=\"https://yari-demos.prod.mdn.mozit.cloud/zh-TW/docs/Web/API/EventTarget/_sample_._simple_implementation_of_eventtarget.html\" loading=\"lazy\"></iframe>"}},{"type":"specifications","value":{"title":"規範","id":"規範","isH3":false,"specifications":[{"bcdSpecificationURL":"https://dom.spec.whatwg.org/#interface-eventtarget","title":"DOM Standard"}],"query":"api.EventTarget"}},{"type":"browser_compatibility","value":{"title":"瀏覽器相容性","id":"瀏覽器相容性","isH3":false,"query":"api.EventTarget","dataURL":"/zh-TW/docs/Web/API/EventTarget/bcd.json"}},{"type":"prose","value":{"id":"參見","title":"參見","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-TW/docs/Web/Events\">Event reference</a> - the events available in the platform.</li>\n  <li><a href=\"/docs/Web/Guide/DOM/Events\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Event developer guide</a></li>\n  <li><a href=\"/zh-TW/docs/Web/API/Event\"><code>Event</code></a> interface</li>\n</ul>"}}],"toc":[{"text":"方法","id":"方法"},{"text":"範例","id":"範例"},{"text":"規範","id":"規範"},{"text":"瀏覽器相容性","id":"瀏覽器相容性"},{"text":"參見","id":"參見"}],"summary":"EventTarget 介面定義了其實作的物件具有接收事件的能力，也可能擁有處理事件的監聽器。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"EventTarget","locale":"en-US","native":"English (US)"},{"title":"EventTarget","locale":"es","native":"Español"},{"title":"EventTarget","locale":"fr","native":"Français"},{"title":"EventTarget","locale":"ja","native":"日本語"},{"title":"EventTarget","locale":"ko","native":"한국어"},{"title":"EventTarget","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"EventTarget","locale":"ru","native":"Русский"},{"title":"EventTarget","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"zh-tw/web/api/eventtarget","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-tw/web/api/eventtarget/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-TW/docs/Web","title":"給開發者的網頁技術文件"},{"uri":"/zh-TW/docs/Web/API","title":"Web APIs"},{"uri":"/zh-TW/docs/Web/API/EventTarget","title":"EventTarget"}],"pageTitle":"EventTarget - Web APIs | MDN","noIndexing":false}}