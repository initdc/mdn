{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"DOM 中的空白字元","mdn_url":"/zh-TW/docs/Web/API/Document_Object_Model/Whitespace","locale":"zh-TW","native":"正體中文 (繁體)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<h4 id=\"問題說明\">問題說明</h4>\n<p><a href=\"zh_tw/DOM\">DOM</a> 裡的空白字元會讓處理節點結構時增加不少麻煩。Mozilla 相關軟體中，原始文件裡所有空白字元都會在 DOM 中出現（不包括標籤內含的空白字元）。這樣的處理方式有其必要，一方面編輯器中可逕行排列文字、二方面 <a href=\"zh_tw/CSS\">CSS</a> 裡的 <code>white-space: pre</code> 也才能發揮作用。 如此一來就表示：</p>\n<ul>\n  <li>有些空白字元會自成一個文字節點。</li>\n  <li>有些空白字元會與其他字串合成一個文字節點。</li>\n</ul>\n<p>換句話說，下面這段程式碼的 DOM 節點結構就如附圖一般，其中「\\n」代表換行字元：</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token comment\">&lt;!-- My document --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>My Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>Header<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n    Paragraph\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>\n  <img src=\"/en-US/docs/Web/API/Document_Object_Model/Whitespace/dom-string.png\" alt=\"dom tree equivalent of the above HTML example\" width=\"562\" height=\"288\" loading=\"lazy\">\n</p>\n<p>這麼一來，要使用 DOM 遊走於節點結構間又不想要無用的空白字元時，會有點困難。</p>\n<h4 id=\"助你一臂之力\">助你一臂之力</h4>\n<p>以下的 JavaScript 程式碼定義了許多函式，讓你處理 DOM 中的空白字元時能輕鬆點：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/**\n * 以下所謂的「空白字元」代表：\n *  \"\\t\" TAB \\u0009 （移位字元）\n *  \"\\n\" LF  \\u000A （換行字元）\n *  \"\\r\" CR  \\u000D （歸位字元）\n *  \" \"  SPC \\u0020 （真正的空白）\n *\n * 不包括 JavaScript 的「\\s」，因為那代表如不斷行字元等其他字元。\n */</span>\n\n\n<span class=\"token comment\">/**\n * 測知某節點的文字內容是否全為空白。\n *\n * @參數   nod  |CharacterData| 類的節點（如  |Text|、|Comment| 或 |CDATASection|）。\n * @傳回值      若 |nod| 的文字內容全為空白則傳回 true，否則傳回 false。\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">is_all_ws</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">nod</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Use ECMA-262 Edition 3 String and RegExp features</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[^\\t\\n\\r ]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>nod<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">/**\n * 測知是否該略過某節點。\n *\n * @參數   nod  DOM1 |Node| 物件\n * @傳回值      若 |Text| 節點內僅有空白字元或為 |Comment| 節點時，傳回 true，\n *              否則傳回 false。\n */</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">is_ignorable</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">nod</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> nod<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">==</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token comment\">// 註解節點</span>\n         <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>nod<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">is_all_ws</span><span class=\"token punctuation\">(</span>nod<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 僅含空白字元的文字節點</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 此為會跳過空白字元節點及註解節點的 |previousSibling| 函式\n * （ |previousSibling| 是 DOM 節點的特性值，為該節點的前一個節點。）\n *\n * @參數   sib  節點。\n * @傳回值      有兩種可能：\n *               1) |sib| 的前一個「非空白、非註解」節點（由 |is_ignorable| 測知。）\n *               2) 若該節點前無任何此類節點，則傳回 null。\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">node_before</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">sib</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sib <span class=\"token operator\">=</span> sib<span class=\"token punctuation\">.</span>previousSibling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_ignorable</span><span class=\"token punctuation\">(</span>sib<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> sib<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 此為會跳過空白字元節點及註解節點的 |nextSibling| 函式\n *\n * @參數   sib  節點。\n * @傳回值      有兩種可能：\n *               1) |sib| 的下一個「非空白、非註解」節點。\n *               2) 若該節點後無任何此類節點，則傳回 null。\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">node_after</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">sib</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sib <span class=\"token operator\">=</span> sib<span class=\"token punctuation\">.</span>nextSibling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_ignorable</span><span class=\"token punctuation\">(</span>sib<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> sib<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 此為會跳過空白字元節點及註解節點的 |lastChild| 函式\n * （ lastChild| 是 DOM 節點的特性值，為該節點之中最後一個子節點。）\n *\n * @參數   par  節點。\n * @傳回值      有兩種可能：\n *               1) |par| 中最後一個「非空白、非註解」節點。\n *               2) 若該節點中無任何此類子節點，則傳回 null。\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">last_child</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">par</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> res<span class=\"token operator\">=</span>par<span class=\"token punctuation\">.</span>lastChild<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_ignorable</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    res <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>previousSibling<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 此為會跳過空白字元節點及註解節點的 |firstChild| 函式\n *\n * @參數   par  節點。\n * @傳回值      有兩種可能：\n *               1) |par| 中第一個「非空白、非註解」節點。\n *               2) 若該節點中無任何此類子節點，則傳回 null。\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">first_child</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">par</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> res<span class=\"token operator\">=</span>par<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_ignorable</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    res <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>nextSibling<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 此為傳回值不包含文字節點資料的首尾所有空白字元、\n * 並將兩個以上的空白字元縮減為一個的 |data| 函式。\n *（ data 是 DOM 文字節點的特性值，為該文字節點中的資料。）\n *\n * @參數   txt 欲傳回其中資料的文字節點\n * @傳回值     文字節點的內容，其中空白字元已依前述方式處理。\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">data_of</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">txt</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> txt<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Use ECMA-262 Edition 3 String and RegExp features</span>\n  data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\t\\n\\r ]+</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n    data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n    data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4 id=\"範例\">範例</h4>\n<p>以下示範上述函式的應用方法，在節點結構中依序檢查、找出內容為「<code>\"This is the third paragraph\"</code>」的節點，並修改其 class 屬性及文字內容。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> cur <span class=\"token operator\">=</span> <span class=\"token function\">first_child</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">data_of</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"This is the third paragraph.\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n      cur<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">\"magic\"</span><span class=\"token punctuation\">;</span>\n      cur<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token string\">\"This is the magic paragraph.\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  cur <span class=\"token operator\">=</span> <span class=\"token function\">node_after</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}}],"toc":[],"summary":"DOM 裡的空白字元會讓處理節點結構時增加不少麻煩。Mozilla 相關軟體中，原始文件裡所有空白字元都會在 DOM 中出現（不包括標籤內含的空白字元）。這樣的處理方式有其必要，一方面編輯器中可逕行排列文字、二方面 CSS 裡的 white-space: pre 也才能發揮作用。 如此一來就表示：","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"How whitespace is handled by HTML, CSS, and in the DOM","locale":"en-US","native":"English (US)"},{"title":"Cómo manejan el espacio en blanco HTML, CSS y el DOM","locale":"es","native":"Español"},{"title":"Gestion des espaces dans le DOM","locale":"fr","native":"Français"},{"title":"ホワイトスペースは HTML、 CSS、そして DOM 内でどう扱われるか","locale":"ja","native":"日本語"},{"title":"Whitespace no DOM","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"DOM 中的空白符","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"zh-tw/web/api/document_object_model/whitespace","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-tw/web/api/document_object_model/whitespace/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-TW/docs/Web","title":"給開發者的網頁技術文件"},{"uri":"/zh-TW/docs/Web/API","title":"Web APIs"},{"uri":"/zh-TW/docs/Web/API/Document_Object_Model","title":"文件物件模型 (DOM)"},{"uri":"/zh-TW/docs/Web/API/Document_Object_Model/Whitespace","title":"DOM 中的空白字元"}],"pageTitle":"DOM 中的空白字元 - Web APIs | MDN","noIndexing":false}}