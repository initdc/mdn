{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"操控瀏覽器歷史紀錄","mdn_url":"/zh-TW/docs/Web/API/History_API","locale":"zh-TW","native":"正體中文 (繁體)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>DOM <a href=\"/zh-TW/docs/Web/API/Window\"><code>window</code></a> 物件透過 <a href=\"/zh-TW/docs/Web/API/Window/history\" title=\"history\"><code>history</code></a> 物件，提供了進入瀏覽歷史的方式。他透過一些方便的屬性與方法，讓你可以在歷史紀錄中往上一步或往下一步移動，並且讓你——從 HTML5 開始——能操作歷史紀錄堆疊（history stack）的內容。</p>"}},{"type":"prose","value":{"id":"在歷史紀錄中移動","title":"在歷史紀錄中移動","isH3":false,"content":"<p>往前往後歷史紀錄可以用 <code>back()</code>, <code>forward()</code>, 和 <code>go()</code> 的方法。</p>"}},{"type":"prose","value":{"id":"往前往後","title":"往前往後","isH3":true,"content":"<p>要在歷史紀錄中往上一步移動，可以：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>這完全等同於用戶在瀏覽器上點選「上一頁」按鈕。</p>\n<p>同樣的，你也可以往下一步移動（等同於用戶點擊往後一頁的按鈕）：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"移動到特定的歷史紀錄","title":"移動到特定的歷史紀錄","isH3":true,"content":"<p>你可以用 <code>go()</code> 方法來從頁面的 session history 紀錄中載入特定紀錄，以目前頁面的相對位置而定（目前的頁面想當然爾是 index 0）。</p>\n<p>往前一頁（等同於呼叫 <code>back()</code>）：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>往後一頁（等同於呼叫 <code>forward()</code>）：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>同樣的你也可以傳入 2，讓頁面直往後兩頁，依此類推。</p>\n<p>你可以查看 length 這個屬性來取得目前瀏覽歷史的總數我：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> numberOfEntries <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>備註：</strong> Internet Explorer 支援在 <code>go()</code> 中以 URL 的值作為參數；這不在標準中，Gecko 也不支援。</p>\n</div>"}},{"type":"prose","value":{"id":"加入和修改歷史紀錄","title":"加入和修改歷史紀錄","isH3":false,"content":"<p>HTML5 加入了 <a href=\"/en-US/docs/Web/API/History/pushState\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">history.pushState() (en-US)</a> 和 <a href=\"/zh-TW/docs/Web/API/History_API#The_replaceState()_method\" aria-current=\"page\"><code>history.replaceState()</code></a> 方法，讓你可以加入或修改歷史紀錄。這些方法都可以跟 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Window/popstate_event\"><code>window.onpopstate</code> <small>(en-US)</small></a> 事件一同應用。</p>\n<p>使用 <code>history.pushState()</code>後，會改變 <a href=\"/zh-TW/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> 時 HTTP 標頭中 referrer 的值。referrer 會是創造 <a href=\"/zh-TW/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> 物件時的當前視窗文件（<code>this</code>）的 URL。</p>"}},{"type":"prose","value":{"id":"pushstate_方法範例","title":"pushState() 方法範例","isH3":true,"content":"<p>假設 <code>http://mozilla.org/foo.html</code> 執行了下面的 JavaScript：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> stateObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bar\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span>stateObj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"page 2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>這會讓網址列顯示 <code>http://mozilla.org/bar.html</code>，但不會讓瀏覽器去載入 <code>bar.html</code>，甚或去檢查 <code>bar.html</code> 存在與否。</p>\n<p>假設現在使用者瀏覽到 <code>http://google.com</code>，然後點擊上一頁鈕。這時網址列會顯示 <code>http://mozilla.org/bar.html</code>，頁面會獲得 <code>popstate</code> 的事件（<em>state object</em> 會包含一份 <code>stateObj</code> 的副件）。頁面長得跟 <code>foo.html</code> 很像，但是可能在 <code>popstate</code> 事件執行中被修改。</p>\n<p>如果我再點一次上一頁鈕， 網址會改變成為 <code>http://mozilla.org/foo.html</code>，且文件會得到另外一個 <code>popstate</code> 事件，此次會包含一個 null state object。同樣的，回上頁鈕不會改變文件的內容，只是文件可能會在 <code>popstate</code> 事件中被手動更新。</p>"}},{"type":"prose","value":{"id":"pushstate_方法","title":"pushState() 方法","isH3":true,"content":"<p><code>pushState()</code> 取用三個參數：一個 state 物件、title（目前忽略）與 URL（可選用）。我們來看看三個參數的細節之處：</p>\n<ul>\n  <li>\n    <strong>state object</strong>——state object 是與 <code>pushState()</code> 建立的新瀏覽歷史紀錄有關的一個 JavaScript 物件。只要使用者到了新的 state ，一個 <code>popstate</code> 的事件就會被觸發，然後該事件的 <code>state</code> 屬性會包含一個複製的歷史紀錄的 state object。\n    state 物件可以是任何可序列化的東西。因為 Firefox 儲存 state 物件到使用者的硬碟，當瀏覽器被重新啟動的時候，他們是可以被恢復的，因此我們加上了 640k 個字元的長度限制在一個以序列化表示的 state object。如果你傳送一個比這個更大的序列化表示的 state object 到 <code>pushState()</code>，這個方法會丟出一個例外事件。如果你需要更多空間的話，你可以試著用 <code>sessionStorage</code> 和／或 <code>localStorage</code>。\n  </li>\n  <li><strong>title</strong>——Firefox 目前忽略了這個參數，雖然他以後有可能會採用。如果以後改變了這個作法，傳送空白的字串應該還會是安全的。另外，你可以傳送一個短的標題來敘述你想要到的 state。</li>\n  <li><strong>URL</strong>——這個新歷史紀錄的 URL 從這個參數做設定。值得注意的是，在 <code>pushState()</code> 被呼叫之後，瀏覽器並不會馬上嘗試載入這個 URL ，但是它可能在以後嘗試載入這個 URL ，例如使用者重新開啟瀏覽器之後。新的 URL 不一定需要為一個絕對的路徑；如果是相對路徑，會依據目前的 URL 來解析。新的 URL 需要與目前 URL 的 origin 是一樣的；否則，pushState() 會丟出一個錯誤的例外。這個參數是選擇性的；如果沒有被指定的話，他會設定為目前文件的 URL。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>備註：</strong> 在 Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1) 到 Gecko 5.0 (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2)，是採用 JSON 來序列化這個傳送的物件。從 Gecko 6.0 (Firefox 6.0 / Thunderbird 6.0 / SeaMonkey 2.3) 開始,這個物件是以 <a href=\"/zh-TW/docs/DOM/The_structured_clone_algorithm\">the structured clone algorithm</a> 序列化。這會允許更多種不同的物件可以被安全的傳送。</p>\n</div>\n<p>從某種意義上，呼叫 <code>pushState()</code> 與設定 <code>window.location = \"#foo\"</code> 是類似的，兩個都會去建立和啟用另一個和目前文件有關的歷史紀錄。但是 <code>pushState()</code> 有一些優勢：</p>\n<ul>\n  <li>新的 URL 可以是任何一個與目前的 URL 在同一個 origin 的 URL。相對來說，只有你設定 <code>window.location</code> 只修改 hash 時，才讓你保持在同一個 <a href=\"/zh-TW/docs/Web/API/Document\"><code>document</code></a> 。</li>\n  <li>如果你不想要的話，你可以不必去改變 URL 。相對來說，設定 <code>window.location = \"#foo\";</code> 只有在目前的 hash 不是 <code>#foo</code> 的時候，會建立一個新的歷史紀錄。</li>\n  <li>你可以將任意的資料與你的新的歷史紀錄做關聯。用 hash-based 的方法，你需要將所有相關的資料編碼成一個短字串。</li>\n  <li>If <code>title</code> is subsequently used by browsers, this data can be utilized (independent of, say, the hash).</li>\n</ul>\n<p>注意 <code>pushState()</code> 永遠不會造成一個 <code>hashchange</code> 事件被觸發，即使新的 URL 和舊的 URL 的不同處只有 hash 的部份也不會。</p>\n<p>In a <a href=\"/zh-TW/docs/Mozilla/Tech/XUL\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">XUL</a> document, it creates the specified XUL element.</p>\n<p>In other documents, it creates an element with a <code>null</code> namespace URI.</p>"}},{"type":"prose","value":{"id":"replacestate_方法","title":"replaceState() 方法","isH3":true,"content":"<p><code>history.replaceState()</code> 的執行就像 <code>history.pushState()</code> ，除了 <code>replaceState()</code> 是修改目前的歷史紀錄而不是創造一個新的。</p>\n<p><code>replaceState()</code> 很實用的時機是當你要更新目前歷史紀錄的 state object 或是 URL 來反應一些使用者的動作時。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>備註：</strong> 在 Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1) 到 Gecko 5.0 (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2)，是採用 JSON 來序列化這個傳送的物件。從 Gecko 6.0 (Firefox 6.0 / Thunderbird 6.0 / SeaMonkey 2.3) 開始, 這個物件是以 <a href=\"/zh-TW/docs/DOM/The_structured_clone_algorithm\">the structured clone algorithm</a> 序列化。這會允許更多種不同的物件可以被安全的傳送。</p>\n</div>"}},{"type":"prose","value":{"id":"replacestate_方法範例","title":"replaceState() 方法範例","isH3":true,"content":"<p>Suppose <code>http://mozilla.org/foo.html</code> executes the following JavaScript:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> stateObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bar\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span>stateObj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"page 2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>The explanation of these two lines above can be found at \"Example of pushState() method\" section. Then suppose <code>http://mozilla.org/bar.html</code> executes the following JavaScript:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>history<span class=\"token punctuation\">.</span><span class=\"token function\">replaceState</span><span class=\"token punctuation\">(</span>stateObj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"page 3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar2.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>This will cause the URL bar to display <code>http://mozilla.org/bar2.html</code>, but won't cause the browser to load <code>bar2.html</code> or even check that <code>bar2.html</code> exists.</p>\n<p>Suppose now that the user now navigates to <code>http://www.microsoft.com</code>, then clicks back. At this point, the URL bar will display <code>http://mozilla.org/bar2.html</code>. If the user now clicks back again, the URL bar will display <code>http://mozilla.org/foo.html</code>, and totaly bypass bar.html.</p>"}},{"type":"prose","value":{"id":"popstate_事件","title":"popstate 事件","isH3":true,"content":"<p>每次 active 的歷史紀錄被更動的時候，一個 <code>popstate</code> 事件會被發送到目前的 window。如果被啟用的歷史紀錄是由於呼叫 <code>pushState</code> 建立的或是呼叫 <code>replaceState</code> 所影響的，這個 <code>popstate</code> 事件的 <code>state</code> 屬性會含有一個歷史紀錄的 state object 的副本。</p>\n<p>使用範例參閱 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/Window/popstate_event\"><code>window.onpopstate</code> <small>(en-US)</small></a>。</p>"}},{"type":"prose","value":{"id":"讀取目前的_state","title":"讀取目前的 state","isH3":true,"content":"<p>當你讀取頁面的時候，可能會有 non-null state 的物件。這會發生在，例如說，如果設定一個 state 物件（用 <code>pushState()</code> 或是 <code>replaceState()</code>），然後使用者重新啟動他的瀏覽器。當重新讀取你的頁面的時候，頁面會得到一個 <code>onload</code> 事件，但是沒有 <code>popstate</code> 事件。然而，如果你讀取了 <code>history.state</code> 屬性，你會得到像是 <code>popstate</code> 被觸發時，你會得到的 state object 。</p>\n<p>像這樣使用 <code>history.state</code> 屬性，你可以讀取目前的歷史紀錄的<code>狀態</code>而不需要等待一個 <code>popstate</code> 事件：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> currentState <span class=\"token operator\">=</span> history<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"範例","title":"範例","isH3":false,"content":"<p>完整的 AJAX 網站範例 ，請參閱：<a href=\"/en-US/docs/Web/API/History_API/Example\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Ajax navigation example (en-US)</a>。</p>"}},{"type":"specifications","value":{"title":"規範","id":"規範","isH3":false,"specifications":[{"bcdSpecificationURL":"https://html.spec.whatwg.org/multipage/history.html#the-history-interface","title":"HTML Standard"}],"query":"api.History"}},{"type":"browser_compatibility","value":{"title":"瀏覽器相容性","id":"瀏覽器相容性","isH3":false,"query":"api.History","dataURL":"/zh-TW/docs/Web/API/History_API/bcd.json"}}],"toc":[{"text":"在歷史紀錄中移動","id":"在歷史紀錄中移動"},{"text":"加入和修改歷史紀錄","id":"加入和修改歷史紀錄"},{"text":"範例","id":"範例"},{"text":"規範","id":"規範"},{"text":"瀏覽器相容性","id":"瀏覽器相容性"}],"summary":"DOM window 物件透過 history 物件，提供了進入瀏覽歷史的方式。他透過一些方便的屬性與方法，讓你可以在歷史紀錄中往上一步或往下一步移動，並且讓你——從 HTML5 開始——能操作歷史紀錄堆疊（history stack）的內容。","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"History API","locale":"en-US","native":"English (US)"},{"title":"Manipulando el historial del navegador","locale":"es","native":"Español"},{"title":"Manipuler l'historique du navigateur","locale":"fr","native":"Français"},{"title":"History API","locale":"ja","native":"日本語"},{"title":"History API","locale":"ko","native":"한국어"},{"title":"Manipulando o histórico do navegador","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"History API","locale":"ru","native":"Русский"},{"title":"History API","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"zh-tw/web/api/history_api","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-tw/web/api/history_api/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-TW/docs/Web","title":"給開發者的網頁技術文件"},{"uri":"/zh-TW/docs/Web/API","title":"Web APIs"},{"uri":"/zh-TW/docs/Web/API/History_API","title":"操控瀏覽器歷史紀錄"}],"pageTitle":"操控瀏覽器歷史紀錄 - Web APIs | MDN","noIndexing":false}}