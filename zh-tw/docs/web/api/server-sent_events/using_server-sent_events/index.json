{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"使用 server-sent 事件","mdn_url":"/zh-TW/docs/Web/API/Server-sent_events/Using_server-sent_events","locale":"zh-TW","native":"正體中文 (繁體)","sidebarHTML":"<ol><li><strong><a href=\"/zh-TW/docs/Web/API/Server-sent_events\">Server-sent events</a></strong></li><li class=\"toggle\"><details open=\"\"><summary>Guides</summary><ol><li><a href=\"/zh-TW/docs/Web/API/Server-sent_events/Using_server-sent_events\">Using server-sent events</a></li></ol></details></li><li class=\"toggle\"><details open=\"\"><summary>Interfaces</summary><ol><li><a href=\"/zh-TW/docs/Web/API/EventSource\"><code>EventSource</code></a></li></ol></details></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>開發一個使用 server-sent 事件的網頁應用程式很簡單。在伺服器端只需要一些的程式碼與網頁串流事件，而客戶端這邊的處理進入事件的部分幾乎跟 <a href=\"/zh-TW/docs/Web/API/WebSockets_API\">websockets</a> 一樣。這是一種單向的連線，所以你無法從客戶端向伺服器傳送事件。</p>"}},{"type":"prose","value":{"id":"從伺服器端接收事件","title":"從伺服器端接收事件","isH3":false,"content":"<p>server-sent event API 包含在 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/EventSource\"><code>EventSource</code> <small>(en-US)</small></a> 介面；為了與伺服器端開啟連線並接收事件，需要建立帶有產生事件 script URL 的 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/EventSource\"><code>EventSource</code> <small>(en-US)</small></a> 物件。例如：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> evtSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ssedemo.php\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>如果事件產生的 script 在不同源的伺服器上，在建立 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/EventSource\"><code>EventSource</code> <small>(en-US)</small></a> 物件時需要同時提供 URL 和第二個參數作為選項設定。假設客戶端的 script 伺服於 <code>example.com</code> ：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> evtSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"//api.example.com/ssedemo.php\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">withCredentials</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>當你完成初始化事件來源後，你就可以透過新增 <code><a href=\"/zh-TW/docs/Web/Reference/Events/message\" title=\"This is a link to an unwritten page\" class=\"page-not-created\">message</a></code> 事件的處理器來開始監聽來自伺服器的訊息：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>evtSource<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> eventList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  newElement<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"message: \"</span> <span class=\"token operator\">+</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  eventList<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>上述的程式碼會監聽進入的訊息（這裡來自伺服器的通知沒有指明 <code>event</code> 欄位，所以統一用 <code>onmessage</code> 處理即可）並且把訊息的文字附加到 document 的清單。</p>\n<p>你也可以利用 <code>addEventListener()</code> 監聽事件：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>evtSource<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ping\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> time <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">;</span>\n  newElement<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"ping at \"</span> <span class=\"token operator\">+</span> time<span class=\"token punctuation\">;</span>\n  eventList<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>上述的程式碼大同小異，不同之處在於若伺服器傳送了 <code>event</code> 欄位值為「ping」的訊息時它就會把 <code>data</code> 欄位的值解析為 JSON 並輸出到畫面上。</p>\n<div class=\"notecard warning\" id=\"sect1\">\n  <p><strong>警告：</strong> 當連線不是透過 <strong>HTTP/2</strong> 時，SSE 會受到最大連線數限制所苦，尤其當開啟多個分頁。每個瀏覽器有自己的限制數而且被限制在很低的數量（6）。這個問題已經被 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=275955\" class=\"external\" rel=\" noopener\">Chrome</a> 和 <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=906896\" class=\"external\" rel=\" noopener\">Firefox</a> 標註為「Won't fix」（不修復）。限制是基於每個瀏覽器 + 網域，也就是說你可以針對 www.example1.com 網域在所有的分頁中開啟六個 SSE 連線，另一個網域 www.example2.com 也可以開啟六個（根據 <a href=\"https://stackoverflow.com/a/5326159/1905229\" class=\"external\" rel=\" noopener\">Stackoverflow</a>）。當使用 HTTP/2 時最大同時 <em>HTTP streams</em> 連線數是由伺服器和客戶端之間協調（預設 100）。</p>\n</div>"}},{"type":"prose","value":{"id":"從伺服器發送事件","title":"從伺服器發送事件","isH3":false,"content":"<p>由伺服器端所發送的事件需要使用 <code>text/event-stream</code> 的 MIME 類型回應。每一個通知皆由一組文字組成並由一對換行結尾。如何處理事件串流的格式，請參考 <a href=\"#%E4%BA%8B%E4%BB%B6%E4%B8%B2%E6%B5%81%EF%BC%88event_stream%EF%BC%89%E6%A0%BC%E5%BC%8F\">Event stream format</a> 。</p>\n<p>下面是一個 <a href=\"/zh-TW/docs/Glossary/PHP\">PHP</a> 範例：</p>\n<div class=\"code-example\"><pre class=\"brush: php notranslate\"><code><span class=\"token function\">date_default_timezone_set</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"America/New_York\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Cache-Control: no-cache\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Content-Type: text/event-stream\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$counter</span> <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Every second, send a \"ping\" event.</span>\n\n  <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"event: ping\\n\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$curDate</span> <span class=\"token operator\">=</span> <span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DATE_ISO8601</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'data: {\"time\": \"'</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$curDate</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'\"}'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"\\n\\n\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Send a simple message at random intervals.</span>\n\n  <span class=\"token variable\">$counter</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$counter</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'data: This is a message at time '</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$curDate</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"\\n\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$counter</span> <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">ob_end_flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Break the loop if the client aborted the connection (closed the page)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">connection_aborted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>\n  上述的程式碼會在每秒產生一個類型為「ping」的事件。每一個事件的資料是一個 JSON 物件，內容為事件產生時的 ISO 8601 時間戳。同時會隨機發送一個簡易訊息（沒有事件類型）。\n  迴圈的執行會獨立於連線的狀態，，所以在迴圈裡必須檢查連線的狀態，若斷線了要關閉連線（譬如，客戶端關閉了網頁）。\n</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>備註：</strong> 你可以從下列的 Github 文章中找到包含本文所使用程式碼的完整範例 —— 參考 <a href=\"https://github.com/mdn/dom-examples/tree/master/server-sent-events\" class=\"external\" rel=\" noopener\">Simple SSE demo using PHP.</a></p>\n</div>"}},{"type":"prose","value":{"id":"錯誤處理","title":"錯誤處理","isH3":false,"content":"<p>當錯誤發生時（譬如網路逾時或有關<a href=\"/zh-TW/docs/Web/HTTP/CORS\">存取控制</a>的問題）會產生錯誤事件。你可以透過對 <code>EventSource</code> 物件實作 <code>onerror</code> 回呼的方式採取程式化的處理：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>evtSource<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"EventSource failed:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"關閉事件串流","title":"關閉事件串流","isH3":false,"content":"<p>預設的情況下，如果客戶端和伺服器的連線關閉則連線會被重啟。連線的關閉會伴隨著 <code>.close()</code> 方法的執行。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">evtSource.close();\n</pre></div>"}},{"type":"prose","value":{"id":"事件串流（event_stream）格式","title":"事件串流（Event Stream）格式","isH3":false,"content":"<p>事件串流是個簡易的文字資料串流，內容必須以 UTF-8 格式編碼。在事件串流中，不同的訊息以一對換行符號做區隔。若要撰寫註解，則要在該行的開頭加上冒號（:）。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>備註：</strong> 註解將有助於防止連線逾時；伺服器端可以定時發送註解以維持連線活著。</p>\n</div>\n<p>每一個訊息是由一到多列的欄位所組成的文字。每個欄位依序由欄位的名稱、冒號、該欄位的文字內容所組合而成。</p>"}},{"type":"prose","value":{"id":"欄位","title":"欄位","isH3":true,"content":"<p>每隔訊息皆可以由下列的欄位組合而成，每個欄位以換行做為區隔：</p>\n<dl>\n  <dt id=\"event\"><code>event</code></dt>\n  <dd>\n    <p>事件的類型。如果有指定則在瀏覽器端會對該事件名稱的監聽器發布事件；網頁的原始碼必須使用 <code>addEventListener()</code> 來監聽已命名的事件。 <code>onmessage</code> 處理器只有在訊息沒有指定事件名稱時才會被呼叫。</p>\n  </dd>\n  <dt id=\"data\"><code>data</code></dt>\n  <dd>\n    <p>訊息的資料欄位。當 EventSource 連續接收到多列以 <code>data:</code> 開頭的內容；<a href=\"https://www.w3.org/TR/eventsource/#dispatchMessage\" class=\"external\" rel=\" noopener\">它會串接這些內容</a>並為每一列插入一個換行字元。最後的換行會被移除。</p>\n  </dd>\n  <dt id=\"id\"><code>id</code></dt>\n  <dd>\n    <p><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/EventSource\"><code>EventSource</code> <small>(en-US)</small></a> 物件的最新一個事件 ID 。</p>\n  </dd>\n  <dt id=\"retry\"><code>retry</code></dt>\n  <dd>\n    <p>當嘗試傳送事件時重新連線的時間。這個值必須是整數，單位是毫秒，作為重新連線的時間。若指定是非整數則這個欄位會被忽略。</p>\n  </dd>\n</dl>\n<p>除上述的幾個欄位，其他欄位均會被忽略。</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>備註：</strong> 如果某列的內容沒有包含冒號，則該列的內容都會被視為欄位名稱及空字串的欄位值。</p>\n</div>"}},{"type":"prose","value":{"id":"範例","title":"範例","isH3":true,"content":"<h4 id=\"data-only_訊息\">Data-only 訊息</h4>\n<p>在下列的範例中，共發送了三個訊息。第一個是註解，因其以冒號開頭。如之前提到的，對不會持續發送訊息的情境下，這將有助於維持連線的存續。</p>\n<p>第二則訊息包含了 data 欄位及「some text」的值。第三則訊息包含了 data 欄位及「another message\\nwith two lines」。注意在內容所出現的換行符號。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">: this is a test stream\n\ndata: some text\n\ndata: another message\ndata: with two lines\n</pre></div>\n<h4 id=\"命名事件\">命名事件</h4>\n<p>這個範例傳送了一些命名的事件。每一個事件都被指定了 <code>event</code> 欄位並且 <code>data</code> 欄位也有相應的 JSON 字串作為客戶端回應事件所需的資料。 <code>data</code> 欄位的內容可以是任何的字串；它並沒有強制必須以 JSON 的格式撰寫。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">event: userconnect\ndata: {\"username\": \"bobby\", \"time\": \"02:33:48\"}\n\nevent: usermessage\ndata: {\"username\": \"bobby\", \"time\": \"02:34:11\", \"text\": \"Hi everyone.\"}\n\nevent: userdisconnect\ndata: {\"username\": \"bobby\", \"time\": \"02:34:23\"}\n\nevent: usermessage\ndata: {\"username\": \"sean\", \"time\": \"02:34:36\", \"text\": \"Bye, bobby.\"}\n</pre></div>\n<h4 id=\"混合及配對\">混合及配對</h4>\n<p>你並非一定只能用未命名訊息或已分類的事件；實際上你可以在單一的事件中把它們混合在一起。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">event: userconnect\ndata: {\"username\": \"bobby\", \"time\": \"02:33:48\"}\n\ndata: Here's a system message of some kind that will get used\ndata: to accomplish some task.\n\nevent: usermessage\ndata: {\"username\": \"bobby\", \"time\": \"02:34:11\", \"text\": \"Hi everyone.\"}\n</pre></div>"}},{"type":"browser_compatibility","value":{"title":"EventSource","id":"eventsource","isH3":true,"query":"api.EventSource","dataURL":"/zh-TW/docs/Web/API/Server-sent_events/Using_server-sent_events/bcd.json"}}],"toc":[{"text":"從伺服器端接收事件","id":"從伺服器端接收事件"},{"text":"從伺服器發送事件","id":"從伺服器發送事件"},{"text":"錯誤處理","id":"錯誤處理"},{"text":"關閉事件串流","id":"關閉事件串流"},{"text":"事件串流（Event Stream）格式","id":"事件串流（event_stream）格式"}],"summary":"開發一個使用 server-sent 事件的網頁應用程式很簡單。在伺服器端只需要一些的程式碼與網頁串流事件，而客戶端這邊的處理進入事件的部分幾乎跟 websockets 一樣。這是一種單向的連線，所以你無法從客戶端向伺服器傳送事件。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using server-sent events","locale":"en-US","native":"English (US)"},{"title":"Utilizando eventos enviados por el servidor (server-sent event)","locale":"es","native":"Español"},{"title":"Utiliser les évènements envoyés par le serveur","locale":"fr","native":"Français"},{"title":"サーバー送信イベントの使用","locale":"ja","native":"日本語"},{"title":"Server-Sent Events 사용하기","locale":"ko","native":"한국어"},{"title":"Using server-sent events","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Using server-sent events","locale":"ru","native":"Русский"},{"title":"使用服务器发送事件","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"zh-tw/web/api/server-sent_events/using_server-sent_events","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-tw/web/api/server-sent_events/using_server-sent_events/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-TW/docs/Web","title":"給開發者的網頁技術文件"},{"uri":"/zh-TW/docs/Web/API","title":"Web APIs"},{"uri":"/zh-TW/docs/Web/API/Server-sent_events","title":"Server-sent events"},{"uri":"/zh-TW/docs/Web/API/Server-sent_events/Using_server-sent_events","title":"使用 server-sent 事件"}],"pageTitle":"使用 server-sent 事件 - Web APIs | MDN","noIndexing":false}}