{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"提升（Hoisting）","mdn_url":"/zh-TW/docs/Glossary/Hoisting","locale":"zh-TW","native":"正體中文 (繁體)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>提升（Hoisting）是在 <a href=\"https://www.ecma-international.org/ecma-262/6.0/index.html\" class=\"external\" rel=\" noopener\">ECMAScript® 2015 Language Specification</a> 裡面找不到的專有名詞。它是一種釐清 JaveScript 在執行階段內文如何運行的思路（尤其是在創建和執行階段）。然而，提升一詞可能會引起誤解：例如，提升看起來是單純地將變數和函式宣告，移動到程式的區塊頂端，然而並非如此。變數和函數的宣告會在編譯階段就被放入記憶體，但實際位置和程式碼中完全一樣。</p>"}},{"type":"prose","value":{"id":"了解更多","title":"了解更多","isH3":false,"content":""}},{"type":"prose","value":{"id":"技術範例","title":"技術範例","isH3":true,"content":"<p>\n  在執行任何程式碼前，JavaScript 會把函式宣告放進記憶體裡面，這樣做的優點是：可以在程式碼宣告該函式之前使用它。\n  例如：\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My cat's name is \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tigger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n上面程式的結果是: \"My cat's name is Tigger\"\n*/</span>\n</code></pre></div>\n<p>上面的程式碼片段，就是你希望程式碼運作的樣子。現在讓我們看看，如果在這一段函式宣告之前就執行它，到底會發生什麼事：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Chloe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">catName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My cat's name is \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\n上面程式的結果是: \"My cat's name is Chloe\"\n*/</span>\n</code></pre></div>\n<p>即使我們函式的程式碼之前就先呼叫它，程式碼仍然可以運作。這是出於 JavaScript 內文執行的運作原理。</p>\n<p>提升也適用於其他型別和變數。變數可以在宣告之前進行初始化和使用。但如果沒有初始化，就不能使用它們。</p>"}},{"type":"prose","value":{"id":"技術範例_2","title":"技術範例","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>num <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\nnum <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* 只要 num 有被宣告，就不會有錯誤 */</span>\n</code></pre></div>\n<p>JavaScript 僅提升宣告的部分，而不是初始化。如果在使用該變數後才宣告和初始化，那麼該值將是 undefined。以下兩個範例顯示了這個特性。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化 x</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// '1 undefined'</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//上下的程式結果都一樣</span>\n\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化 x</span>\n<span class=\"token keyword\">var</span> y<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 宣告 y</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// '1 undefined'</span>\ny <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化 y</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"技術參考","title":"技術參考","isH3":true,"content":"<ul>\n  <li><a href=\"https://www.udemy.com/understand-javascript/\" class=\"external\" rel=\" noopener\">JavaScript: Understanding the Weird Parts</a> - Udemy.com Course</li>\n  <li><a href=\"/zh-TW/docs/Web/JavaScript/Reference/Statements/var\">var statement</a> - MDN</li>\n  <li><a href=\"/en-US/docs/Web/JavaScript/Reference/Statements/function\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">function statement (en-US)</a> - MDN</li>\n</ul>"}}],"toc":[{"text":"了解更多","id":"了解更多"}],"summary":"提升（Hoisting）是在 ECMAScript® 2015 Language Specification 裡面找不到的專有名詞。它是一種釐清 JaveScript 在執行階段內文如何運行的思路（尤其是在創建和執行階段）。然而，提升一詞可能會引起誤解：例如，提升看起來是單純地將變數和函式宣告，移動到程式的區塊頂端，然而並非如此。變數和函數的宣告會在編譯階段就被放入記憶體，但實際位置和程式碼中完全一樣。","popularity":0.0003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Hoisting","locale":"en-US","native":"English (US)"},{"title":"Hoisting","locale":"es","native":"Español"},{"title":"Hoisting","locale":"fr","native":"Français"},{"title":"Hoisting (巻き上げ、ホイスティング)","locale":"ja","native":"日本語"},{"title":"호이스팅","locale":"ko","native":"한국어"},{"title":"Hoisting","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Поднятие","locale":"ru","native":"Русский"},{"title":"Hoisting（变量提升）","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"zh-tw/glossary/hoisting","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-tw/glossary/hoisting/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-TW/docs/Glossary","title":"術語表"},{"uri":"/zh-TW/docs/Glossary/Hoisting","title":"提升（Hoisting）"}],"pageTitle":"提升（Hoisting） - 術語表 | MDN","noIndexing":false}}