{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"SQL 注入","mdn_url":"/zh-TW/docs/Glossary/SQL_Injection","locale":"zh-TW","native":"正體中文 (繁體)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>**SQL 注入（SQL injection）**利用了網路程式（Web apps）的錯誤輸入。駭客可以透過執行後端資料庫的網路程式，惡意繞過 SQL 指令。</p>\n<p>SQL 注入能在未授權的情況下，直接從資料庫訪問資料庫與檢索信息。許多數據洩露肇因於 SQL 注入。</p>\n<p><a href=\"https://cdn.acunetix.com/wp_content/uploads/2010/09/sql_inj_xss.gif\" class=\"external\" rel=\" noopener\"><img src=\"/en-US/docs/Glossary/SQL_Injection/sql_inj_xss.gif\" alt=\"\" width=\"500\" height=\"275\" loading=\"lazy\"></a></p>"}},{"type":"prose","value":{"id":"如何做動","title":"如何做動","isH3":false,"content":"<p>\n  <img src=\"/en-US/docs/Glossary/SQL_Injection/updates_loginscreen.png\" alt=\"\" width=\"293\" height=\"309\" loading=\"lazy\">\n</p>\n<p>在輸入 username （用戶名）與 password （密碼）後，GUI 背後的 SQL 查詢會這樣工作：</p>\n<div class=\"code-example\"><pre class=\"brush: sql notranslate\"><code><span class=\"token string\">\"SELECT Count(*) FROM Users WHERE Username=' \"</span> <span class=\"token operator\">+</span> txt<span class=\"token punctuation\">.</span><span class=\"token keyword\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">Text</span><span class=\"token operator\">+</span><span class=\"token string\">\" ' AND Password=' \"</span><span class=\"token operator\">+</span> txt<span class=\"token punctuation\">.</span>Password<span class=\"token punctuation\">.</span><span class=\"token keyword\">Text</span><span class=\"token operator\">+</span><span class=\"token string\">\" ' \"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>假設用戶在 username 欄位輸入了 admin 還在 password 欄位輸入了 passwd123，接著按了下面的 Log in（登入）， SQL 查詢會這樣運作：</p>\n<div class=\"code-example\"><pre class=\"brush: sql notranslate\"><code><span class=\"token string\">\"SELECT Count(*) FROM Users WHERE Username=' admin ' AND Password=' passwd123 ' \"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>如果驗證正確，用戶就可以登入，是個很簡單（所以很不安全）的機制。駭客利用者這種不安全，獲取未經授權的訪問。</p>\n<p>駭客使用一種稱為 Magical String 的簡單字串，例如：</p>\n<p><strong>Username: <em>admin</em></strong></p>\n<p><strong>Password: <em>anything 'or'1'='1</em></strong></p>\n<p>在按下 login 按鈕以後，SQL 查詢會這樣運作：</p>\n<div class=\"code-example\"><pre class=\"brush: sql notranslate\"><code><span class=\"token string\">\"SELECT Count(*) FROM Users WHERE Username=' admin ' AND Password=' anything 'or'1'='1 ' \"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>仔細檢查一下查詢密碼的部分。</p>\n<div class=\"code-example\"><pre class=\"brush: sql notranslate\"><code>Password<span class=\"token operator\">=</span><span class=\"token string\">' anything '</span><span class=\"token operator\">or</span><span class=\"token string\">'1'</span><span class=\"token operator\">=</span><span class=\"token string\">'1 '</span>\n</code></pre></div>\n<p>密碼不是 anything，因此 password=anything 會回傳 FALSE（錯誤）。但 '1'='1' 是正確的宣告，所以會回傳 TRUE（正確）。最後，透過 OR （或）運算符，FALSE OR TRUE 的比較結果是 TRUE，認證因而成功通過。只要一點簡單的字串（Magical String）整個資料庫就會被洩漏。</p>"}},{"type":"prose","value":{"id":"如何避免","title":"如何避免","isH3":false,"content":"<p>在執行用戶的憑證查詢前，先做如下的改變：</p>\n<div class=\"code-example\"><pre class=\"brush: sql notranslate\"><code>$id <span class=\"token operator\">=</span> $_GET<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> $id <span class=\"token operator\">=</span> Stripslashes<span class=\"token punctuation\">(</span>$id<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> $id <span class=\"token operator\">=</span> mysql_real_escape_String<span class=\"token punctuation\">(</span>$id<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>藉由 (1) 所有輸入字串的單引號 ' 取代成雙引號 \"，還有 (2) 在每個 ' 之前加上 /。 修正後的 Magical String 不能繞過驗證，並使你的資料庫保持安全。</p>"}},{"type":"prose","value":{"id":"了解詳情","title":"了解詳情","isH3":false,"content":""}},{"type":"prose","value":{"id":"基本知識","title":"基本知識","isH3":true,"content":"<ul>\n  <li>維基百科的 <a href=\"https://zh.wikipedia.org/wiki/SQL%E8%B3%87%E6%96%99%E9%9A%B1%E7%A2%BC%E6%94%BB%E6%93%8A\" class=\"external\" rel=\" noopener\">SQL資料隱碼攻擊</a></li>\n  <li>OWASP (Open Web Application Security Project) <a href=\"https://www.owasp.org/index.php/SQL_Injection\" class=\"external\" rel=\" noopener\">解釋 SQL 注入</a></li>\n</ul>"}}],"toc":[{"text":"如何做動","id":"如何做動"},{"text":"如何避免","id":"如何避免"},{"text":"了解詳情","id":"了解詳情"}],"summary":"**SQL 注入（SQL injection）**利用了網路程式（Web apps）的錯誤輸入。駭客可以透過執行後端資料庫的網路程式，惡意繞過 SQL 指令。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"SQL Injection","locale":"en-US","native":"English (US)"},{"title":"Injection SQL","locale":"fr","native":"Français"},{"title":"SQL Injection (SQLインジェクション)","locale":"ja","native":"日本語"}],"source":{"folder":"zh-tw/glossary/sql_injection","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-tw/glossary/sql_injection/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-TW/docs/Glossary","title":"術語表"},{"uri":"/zh-TW/docs/Glossary/SQL_Injection","title":"SQL 注入"}],"pageTitle":"SQL 注入 - 術語表 | MDN","noIndexing":false}}