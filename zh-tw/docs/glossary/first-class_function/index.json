{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"一級函式（First-class Function）","mdn_url":"/zh-TW/docs/Glossary/First-class_Function","locale":"zh-TW","native":"正體中文 (繁體)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>當函式在那個語言中可以被視為跟其他的變數一樣時，我們稱那樣的程式語言擁有<strong>一級函式</strong>。例如，函式可以作為參數傳遞到另一個函式，可以被另一個函式作為回傳值且可以被當作值一樣指派到另一個變數。</p>"}},{"type":"prose","value":{"id":"範例_指定函式到一個變數","title":"範例 | 指定函式到一個變數","isH3":false,"content":""}},{"type":"prose","value":{"id":"javascript","title":"JavaScript","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foobar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Invoke it using the variable</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>我們指派一個匿名函式 到 <code>變數</code> 中，然後在這個變數後面加上括弧 <code>()</code> 的方式來調用那個函式。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>備註：</strong> 即使你已經為函式命名了，你仍然可以透過這個變數的名稱來調用它。有命名的函數在你除錯時是有幫助的。<em>但是這並不會影響我們調用它的方式</em>。</p>\n</div>"}},{"type":"prose","value":{"id":"範例_將函式作為參數來傳遞","title":"範例 | 將函式作為參數來傳遞","isH3":false,"content":""}},{"type":"prose","value":{"id":"javascript_2","title":"JavaScript","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello, \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">helloMessage<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">helloMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Pass `sayHello` as an argument to `greeting` function</span>\n<span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span>sayHello<span class=\"token punctuation\">,</span> <span class=\"token string\">\"JavaScript!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>我們將 <code>sayHello()</code> 函式當成是變數傳遞到 <code>greeting()</code> 函式，這說明了我們將函式視為是一個值來使用它。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>備註：</strong> 將函式作為參數傳遞到另一個函式時，被當作參數傳遞的那個函式我們稱之為回調函式 <strong><a href=\"/zh-TW/docs/Glossary/Callback_function\">Callback function</a>。</strong> <em><code>sayHello</code> 就是一個回調函式。</em></p>\n</div>"}},{"type":"prose","value":{"id":"範例_回傳一個函式","title":"範例 | 回傳一個函式","isH3":false,"content":""}},{"type":"prose","value":{"id":"javascript_3","title":"JavaScript","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>在這個例子中，我們需要從另一個函式中回傳函式回來 - <em>在 JavaScript 中，我們可以回傳函式是因為我們將函式當成是一個 <code>值</code> 。</em></p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>備註：</strong> 當一個函式可以回傳一個函式時，稱之為高階函式 (<strong>Higher-Order Function</strong> )。</p>\n</div>\n<p>回到剛才的例子，現在我們需要調用 <code>sayHello</code> 函式與它所回傳的匿名函式 (<code>Anonymous Function</code>)。為了達成這個目標，我們有兩種方式：</p>"}},{"type":"prose","value":{"id":"1-_使用變數","title":"1- 使用變數","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> myFunc <span class=\"token operator\">=</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>這樣做的話，它會回傳 <code>Hello!</code> 這個訊息。</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>備註：</strong> 如果你直接調用 <code>sayHello</code> 的話，你必須再使用另一個變數來儲存之後再調用它，調用 <code>sayHello</code> 只會回傳函式回來而<strong>非調用它所回傳的函式</strong>。</p>\n</div>"}},{"type":"prose","value":{"id":"2-_使用雙括號","title":"2- 使用雙括號","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>我們也可使用雙括號 <code>()()</code> 來調用所回傳的函數。</p>"}},{"type":"prose","value":{"id":"learn_more","title":"Learn more","isH3":false,"content":""}},{"type":"prose","value":{"id":"general_knowledge","title":"General knowledge","isH3":true,"content":"<ul>\n  <li><a href=\"https://zh.wikipedia.org/wiki/First-class_function\" class=\"external\" rel=\" noopener\">First-class functions</a> on Wikipedia</li>\n</ul>"}}],"toc":[{"text":"範例 | 指定函式到一個變數","id":"範例_指定函式到一個變數"},{"text":"範例 | 將函式作為參數來傳遞","id":"範例_將函式作為參數來傳遞"},{"text":"範例 | 回傳一個函式","id":"範例_回傳一個函式"},{"text":"Learn more","id":"learn_more"}],"summary":"當函式在那個語言中可以被視為跟其他的變數一樣時，我們稱那樣的程式語言擁有一級函式。例如，函式可以作為參數傳遞到另一個函式，可以被另一個函式作為回傳值且可以被當作值一樣指派到另一個變數。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"First-class Function","locale":"en-US","native":"English (US)"},{"title":"Funcion de primera clase","locale":"es","native":"Español"},{"title":"Fonction de première classe","locale":"fr","native":"Français"},{"title":"First-class Function (第一級関数)","locale":"ja","native":"日本語"},{"title":"일급 함수","locale":"ko","native":"한국어"},{"title":"Função First-class","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Функции первого класса","locale":"ru","native":"Русский"},{"title":"First-class Function（头等函数）","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"zh-tw/glossary/first-class_function","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-tw/glossary/first-class_function/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-TW/docs/Glossary","title":"術語表"},{"uri":"/zh-TW/docs/Glossary/First-class_Function","title":"一級函式（First-class Function）"}],"pageTitle":"一級函式（First-class Function） - 術語表 | MDN","noIndexing":false}}