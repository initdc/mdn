{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"IIFE","mdn_url":"/zh-TW/docs/Glossary/IIFE","locale":"zh-TW","native":"正體中文 (繁體)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong>IIFE</strong> (Immediately Invoked Function Expression) 是一個定義完馬上就執行的 <a href=\"/zh-TW/docs/Glossary/JavaScript\">JavaScript</a> <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Function\">function <small>(en-US)</small></a>。</p>\n<p>他又稱為 <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Glossary/Self-Executing_Anonymous_Function\">Self-Executing Anonymous Function <small>(en-US)</small></a>，也是一種常見的設計模式，包含兩個主要部分：第一個部分是使用<a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Operators/Grouping\"><code>Grouping Operator</code> <small>(en-US)</small></a> <code>()</code> 包起來的 anonymous function。這樣的寫法可以避免裡面的變數污染到 global scope。</p>\n<p>第二個部分是馬上執行 function 的 expression <code>()</code>，JavaScript 引擎看到它就會立刻轉譯該 function。</p>"}},{"type":"prose","value":{"id":"examples","title":"Examples","isH3":false,"content":"<p>Function 轉換為 expression 形式，並且馬上執行，function scope 內的變數在外面是無法存取的。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> aName <span class=\"token operator\">=</span> <span class=\"token string\">\"Barry\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Variable name is not accessible from the outside scope</span>\naName <span class=\"token comment\">// throws \"Uncaught ReferenceError: aName is not defined\"</span>\n</code></pre></div>\n<p>把 IIFE 只配給變數會儲存它的結果，而非 function 本身</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Barry\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Immediately creates the output:</span>\nresult<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Barry\"</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"其它形式","title":"其它形式","isH3":true,"content":"<p>符合 JSLint 的版本，行為一樣，只有語意略有差異：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> aName <span class=\"token operator\">=</span> <span class=\"token string\">\"Barry\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Arrow function 版本，程式碼更為精簡，行為一致：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> aName <span class=\"token operator\">=</span> <span class=\"token string\">\"Barry\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Async function 版本，目前主要為了 top level await 而使用：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> aName <span class=\"token operator\">=</span> <span class=\"token string\">\"Barry\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> aName <span class=\"token operator\">=</span> <span class=\"token string\">\"Barry\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"更多資訊","title":"更多資訊","isH3":false,"content":""}},{"type":"prose","value":{"id":"學習它","title":"學習它","isH3":true,"content":"<ul>\n  <li><a href=\"/zh-TW/docs/Web/JavaScript/Language_Overview#functions\">Quick example</a> (在 \"Functions\" 部分的最後面, \"Custom objects\" 的正前面)</li>\n</ul>"}},{"type":"prose","value":{"id":"基本知識","title":"基本知識","isH3":true,"content":"<ul>\n  <li><a href=\"https://zh.wikipedia.org/wiki/Immediately-invoked_function_expression\" class=\"external\" rel=\" noopener\">IIFE</a> 維基百科</li>\n</ul>"}}],"toc":[{"text":"Examples","id":"examples"},{"text":"更多資訊","id":"更多資訊"}],"summary":"IIFE (Immediately Invoked Function Expression) 是一個定義完馬上就執行的 JavaScript function (en-US)。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"IIFE","locale":"en-US","native":"English (US)"},{"title":"IIFE: Expresión de función ejecutada inmediatamente","locale":"es","native":"Español"},{"title":"IIFE","locale":"fr","native":"Français"},{"title":"IIFE (即時実行関数式)","locale":"ja","native":"日本語"},{"title":"IIFE","locale":"ko","native":"한국어"},{"title":"IIFE","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"IIFE","locale":"ru","native":"Русский"},{"title":"IIFE（立即调用函数表达式）","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"zh-tw/glossary/iife","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-tw/glossary/iife/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-TW/docs/Glossary","title":"術語表"},{"uri":"/zh-TW/docs/Glossary/IIFE","title":"IIFE"}],"pageTitle":"IIFE - 術語表 | MDN","noIndexing":false}}