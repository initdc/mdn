{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"物件原型","mdn_url":"/zh-TW/docs/Learn/JavaScript/Objects/Object_prototypes","locale":"zh-TW","native":"正體中文 (繁體)","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"\"><a href=\"/zh-TW/docs/Learn/Getting_started_with_the_web\"><strong>全新手請從這開始！</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Web 入門</summary>\n          <ol>\n            <li><a href=\"/zh-TW/docs/Learn/Getting_started_with_the_web\">Web 概述</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/Getting_started_with_the_web/Installing_basic_software\">安裝基本軟體</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/Getting_started_with_the_web/What_will_your_website_look_like\">自己的網站會是什麼樣子？</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/Getting_started_with_the_web/Dealing_with_files\">處理檔案</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/Getting_started_with_the_web/HTML_basics\">HTML 基礎概念</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/Getting_started_with_the_web/CSS_basics\">CSS 基礎概念</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript 基礎概念</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/Getting_started_with_the_web/Publishing_your_website\">發佈自己的網站</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/Getting_started_with_the_web/How_the_Web_works\">Web 運作的方式</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/zh-TW/docs/Learn/HTML\"><strong>HTML — 架構 Web</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>HTML 介紹</summary>\n          <ol>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Introduction_to_HTML\">HTML 概述</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Introduction_to_HTML/Getting_started\">HTML 入門</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML\">標題裡是什麼？HTML 中的後設資料 (Metadata)</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Introduction_to_HTML/HTML_text_fundamentals\">HTML 文字基礎概念</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Introduction_to_HTML/Creating_hyperlinks\">建立超連結</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Introduction_to_HTML/Advanced_text_formatting\">進階文字格式</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure\">文件與網站架構</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML\">HTML 除錯</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Introduction_to_HTML/Marking_up_a_letter\">親和度：設個字母</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Introduction_to_HTML/Structuring_a_page_of_content\">親和度：架構出具備內容的網頁</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>多媒體與嵌入</summary>\n          <ol>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Multimedia_and_embedding\">多媒體與嵌入的概述</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Multimedia_and_embedding/Images_in_HTML\">HTML 中的圖片</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Multimedia_and_embedding/Video_and_audio_content\">視訊與音訊內容</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Multimedia_and_embedding/Other_embedding_technologies\">從物件到 iframe — 其他嵌入技巧</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Multimedia_and_embedding/Adding_vector_graphics_to_the_Web\">為 Web 新增向量圖</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images\">適應性圖片</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Multimedia_and_embedding/Mozilla_splash_page\">親和度：Mozilla 形象頁面</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>HTML 表格</summary>\n          <ol>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Tables\">HTML 表格概述</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Tables/Basics\">HTML表格基礎</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Tables/Advanced\">HTML Table advanced features and accessibility</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Tables/Structuring_planet_data\">Assessment: Structuring planet data</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/zh-TW/docs/Learn/CSS\"><strong>CSS — 設計 Web 的風格</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>初探 CSS</summary>\n          <ol>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/First_steps\">初探 CSS（概述）</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/First_steps/What_is_CSS\">CSS 是什麼？</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/First_steps/Getting_started\">CSS 入門</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/First_steps/How_CSS_is_structured\">How CSS is structured</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/First_steps/How_CSS_works\">CSS 怎麼運作</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/First_steps/Using_your_new_knowledge\">Using your new knowledge</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS 組件</summary>\n          <ol>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks\">CSS building blocks overview</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">Cascade and inheritance</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks/Selectors\">CSS selectors</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks/The_box_model\">The box model</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks/Backgrounds_and_borders\">Backgrounds and borders</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks/Handling_different_text_directions\">Handling different text directions</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks/Overflowing_content\">Overflowing content</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks/Values_and_units\">Values and units</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks/Sizing_items_in_CSS\">Sizing items in CSS</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks/Images_media_form_elements\">Images, media, and form elements</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks/Styling_tables\">Styling tables</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks/Debugging_CSS\">Debugging CSS</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks/Organizing\">Organizing your CSS</a></li>\n      </ol></details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>樣式化文字</summary>\n          <ol>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Styling_text\">樣式化文字概述</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Styling_text/Fundamentals\">基礎的文字與字型樣式化</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Styling_text/Styling_lists\">樣式化列表</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Styling_text/Styling_links\">樣式化連結</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Styling_text/Web_fonts\">Web 字型</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Styling_text/Typesetting_a_homepage\">親合度：設定社區大學首頁的版面</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS 版面配置</summary>\n          <ol>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout\">CSS 版面配置概述</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout/Introduction\">Introduction to CSS layout</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout/Normal_Flow\">Normal Flow</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout/Flexbox\">彈性區塊</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout/Grids\">格線</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout/Floats\">浮動</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout/Positioning\">定位</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout/Multiple-column_Layout\">Multiple-column Layout</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout/Responsive_Design\">Responsive design</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout/Media_queries\">Beginner's guide to media queries</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout/Legacy_Layout_Methods\">Legacy Layout Methods</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout/Supporting_Older_Browsers\">Supporting Older Browsers</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout/Fundamental_Layout_Comprehension\">Fundamental Layout Comprehension</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"open\"><a href=\"/zh-TW/docs/Learn/JavaScript\"><strong>JavaScript — 動態的用戶端指令</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>JavaScript 第一步</summary>\n          <ol>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/First_steps\">JavaScript 第一步概述</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/First_steps/What_is_JavaScript\">什麼是 JavaScript？</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/First_steps/A_first_splash\">初次接觸 JavaScript</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/First_steps/What_went_wrong\">出了什麼問題？JavaScript 疑難排解</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/First_steps/Variables\">儲存你所需的資訊 — 變數</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/First_steps/Math\">JavaScript 基礎概念 — 數字與運算子</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/First_steps/Strings\">處理文字 — JavaScript 中的字串</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/First_steps/Useful_string_methods\">有用的字串函式</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/First_steps/Arrays\">陣列</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/First_steps/Silly_story_generator\">親合度：傻瓜故事產生器</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>JavaScript 基礎要件</summary>\n          <ol>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Building_blocks\">JavaScript 基礎要件概述</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Building_blocks/conditionals\">於程式碼中決策 — 條件</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Building_blocks/Looping_code\">程式碼迴圈</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Building_blocks/Functions\">函式 — 可重複使用的程式碼區塊</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Building_blocks/Build_your_own_function\">建立自己的函式</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Building_blocks/Return_values\">函式回傳值</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Building_blocks/Events\">事件介紹</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Building_blocks/Image_gallery\">親合度：圖庫</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details open=\"\">\n          <summary>JavaScript 物件介紹</summary>\n          <ol>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Objects\">JavaScript 物件概述</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Objects/Basics\">物件基礎概念</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Objects/Object_prototypes\">物件原型</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Objects/Object-oriented_programming\">Object-oriented programming concepts</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Objects/Classes_in_JavaScript\">Classes in JavaScript</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Objects/JSON\">使用 JSON 資料</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Objects/Object_building_practice\">物件建構實作</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Objects/Adding_bouncing_balls_features\">親合度：為彈跳球展示新增功能</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>非同步的 JavaScript</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Asynchronous\">Asynchronous JavaScript overview</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Asynchronous/Concepts\">General asynchronous programming concepts</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Asynchronous/Introducing\">Introducing asynchronous JavaScript</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Asynchronous/Timeouts_and_intervals\">Cooperative asynchronous Java​Script: Timeouts and intervals</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Asynchronous/Promises\">Graceful asynchronous programming with Promises</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Asynchronous/Async_await\">Making asynchronous programming easier with async and await</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Asynchronous/Choosing_the_right_approach\">Choosing the right approach</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>客戶端 web APIs</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Client-side_web_APIs\">客戶端 web APIs</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Client-side_web_APIs/Introduction\">Introduction to web APIs</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents\">文件操作</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data\">Fetching data from the server</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Client-side_web_APIs/Third_party_APIs\">Third party APIs</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Client-side_web_APIs/Drawing_graphics\">Drawing graphics</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Client-side_web_APIs/Video_and_audio_APIs\">Video and audio APIs</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Client-side_web_APIs/Client-side_storage\">Client-side storage</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/zh-TW/docs/Learn/Forms\"><strong>網頁表單-與使用者資料合作</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>核心的表單學習途徑</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Forms\">網頁表單概述</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/Your_first_form\">Your first form</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/How_to_structure_a_web_form\">如何建構網頁表單</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/Basic_native_form_controls\">Basic native form controls</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/HTML5_input_types\">The HTML5 input types</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/Other_form_controls\">Other form controls</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/Styling_web_forms\">Styling web forms</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/Advanced_form_styling\">Advanced form styling</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/UI_pseudo-classes\">UI pseudo-classes</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/Form_validation\">Client-side form validation</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/Sending_and_retrieving_form_data\">Sending form data</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>深入網頁表單</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/How_to_build_custom_form_controls\">How to build custom form controls</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/Sending_forms_through_JavaScript\">Sending forms through JavaScript</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/Property_compatibility_table_for_form_controls\">CSS property compatibility table for form controls</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/zh-TW/docs/Learn/Accessibility\"><strong>無障礙網頁 — 每個人都可以使用的網頁</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>無障礙網頁指南</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Accessibility\">無障礙網頁概述</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Accessibility/What_is_accessibility\">何謂無障礙網頁？</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Accessibility/HTML\">HTML: A good basis for accessibility</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Accessibility/CSS_and_JavaScript\">CSS and JavaScript accessibility best practices</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Accessibility/WAI-ARIA_basics\">WAI-ARIA 基礎</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Accessibility/Multimedia\">Accessible multimedia</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Accessibility/Mobile\">行動裝置上的無障礙</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>無障礙網頁評估</summary>\n        <ol>\n            <li><a href=\"/zh-TW/docs/Learn/Accessibility/Accessibility_troubleshooting\">Assessment: Accessibility troubleshooting</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing\"><strong>工具與測試</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Client-side web development tools</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Understanding_client-side_tools\">Client-side web development tools index</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Overview\">Client-side tooling overview</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Command_line\">Command line crash course</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Package_management\">Package management basics</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Introducing_complete_toolchain\">Introducing a complete toolchain</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Deployment\">Deploying our app</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>介紹前端框架</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Introduction\">前端框架簡介</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Main_features\">Framework main features</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>React</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started\">Getting started with React</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_todo_list_beginning\">Beginning our React todo list</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_components\">Componentizing our React app</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state\">React interactivity: Events and state</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_filtering_conditional_rendering\">React interactivity: Editing, filtering, conditional rendering</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_accessibility\">Accessibility in React</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_resources\">React resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Ember</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_getting_started\">Getting started with Ember</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_structure_componentization\">Ember app structure and componentization</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_interactivity_events_state\">Ember interactivity: Events, classes and state</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_conditional_footer\">Ember Interactivity: Footer functionality, conditional rendering</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_routing\">Routing in Ember</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_resources\">Ember resources and troubleshooting</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Vue</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_getting_started\">開始學 Vue</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_first_component\">Creating our first Vue component</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_rendering_lists\">Rendering a list of Vue components</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_methods_events_models\">Adding a new todo form: Vue events, methods, and models</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_styling\">Styling Vue components with CSS</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_computed_properties\">Using Vue computed properties</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_conditional_rendering  \">Vue conditional rendering: editing existing todos</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_refs_focus_management\">Focus management with Vue refs</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_resources\">Vue resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Svelte</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_getting_started\">Svelte 入門</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_Todo_list_beginning\">Starting our Svelte Todo list app</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_variables_props\">Dynamic behavior in Svelte: working with variables and props</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_components\">Componentizing our Svelte app</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_reactivity_lifecycle_accessibility\">Advanced Svelte: Reactivity, lifecycle, accessibility</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_stores\">Working with Svelte stores</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_TypeScript  \">TypeScript support in Svelte</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_deployment_next\">Deployment and next steps</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Angular</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_getting_started\">Angular 新手入門</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_todo_list_beginning\">開始開發我們的 Angular 待辦事項應用程式</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_styling\">使用樣式點綴我們的 Angular 應用程式</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_item_component\">建立一個 item 元件</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_filtering\">篩選我們的待辦事項項目</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_building\">建構 Angular 應用程式與更多資源</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Git and GitHub</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/GitHub\">Git and GitHub 概述</a></li>\n          <li><a href=\"https://guides.github.com/activities/hello-world/\">Hello World</a></li>\n          <li><a href=\"https://guides.github.com/introduction/git-handbook/\">Git Handbook</a></li>\n          <li><a href=\"https://guides.github.com/activities/forking/\">Forking Projects</a></li>\n          <li><a href=\"https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests\">About pull requests</a></li>\n          <li><a href=\"https://guides.github.com/features/issues/\">Mastering Issues</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>跨瀏覽器測試</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Cross_browser_testing\">跨瀏覽器測試概述</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Cross_browser_testing/Introduction\">跨瀏覽器測試介紹</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Cross_browser_testing/Testing_strategies\">測試執行策略</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Cross_browser_testing/HTML_and_CSS\">處理常見的 HTML 與 CSS 問題</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Cross_browser_testing/JavaScript\">處理常見的 JavaScript 問題</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Cross_browser_testing/Accessibility\">處理常見的親合度問題</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Cross_browser_testing/Feature_detection\">建置功能偵測</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Cross_browser_testing/Automated_testing\">自動化測試介紹</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Cross_browser_testing/Your_own_automation_environment\">設定自己的自動化測試環境</a></li>\n        </ol>\n    </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/zh-TW/docs/Learn/Server-side\"><strong>伺服端網站程式設計</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>第一步</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/First_steps\">第一步概述</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/First_steps/Introduction\">伺服端介紹</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/First_steps/Client-Server_overview\">用戶端概述</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/First_steps/Web_frameworks\">伺服端網路框架</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/First_steps/Website_security\">網站安全</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Django 網站框架 (Python)</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django\">Django 網站框架 (Python) 概述</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/Introduction\">介紹</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/development_environment\">設定開發環境</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/Tutorial_local_library_website\">線上教學：本地圖書館網站</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/skeleton_website\">線上教學 2：建立網站骨架</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/Models\">線上教學 3：使用模型</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/Admin_site\">線上教學 4：Django 管理網站</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/Home_page\">線上教學 5：建立我們的首頁</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/Generic_views\">線上教學 6：泛型清單與細節檢視</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/Sessions\">線上教學 7：會話 (Sessions) 框架</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/Authentication\">線上教學 8：使用者授權與許可</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/Forms\">線上教學 9：搭配表單</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/Testing\">線上教學 10：測試 Django 的 Web App</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/Deployment\">線上教學 11：佈署 Django 至產品</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/web_application_security\">Web App 安全性</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/django_assessment_blog\">親合度：DIY 迷你部落格</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Express 網站框架 (node.js/JavaScript)</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs\">Express 網站框架 (Node.js/JavaScript) 概述</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/Introduction\">Express/Node 介紹</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/development_environment\">設定 Node (Express) 的開發環境</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website\">Express 教學 1: 本地圖書館網站</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">Express 教學 2: 建立骨架網站</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/mongoose\">Express 教學 3: 使用資料庫 (Mongoose)</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/routes\">Express 教學 4: 路由與控制器</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express 教程 5: 呈現圖書館的資料</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/forms\">Express 教學 6: 使用表單</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/deployment\">Express 教學 7: 佈署到正式環境</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"#\"><strong>更多資源</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>常見問題</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/HTML/Howto\">HTML 問題</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/CSS/Howto\">CSS 問題</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Howto\">JavaScript questions</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Common_questions#Web_mechanics\">Web 的運作方式</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Common_questions#Tools_and_setup\">工具與設定</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Common_questions#Design_and_accessibility\">設計與親合度</a></li>\n        </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-TW/docs/Learn/JavaScript/Objects/Classes_in_JavaScript\"> 前頁 </a></li>\n    <li><a class=\"button minimal\" href=\"/zh-TW/docs/Learn/JavaScript/Objects\"> Overview: Objects</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-TW/docs/Learn/JavaScript/Objects/Classes_in_JavaScript\"> 次頁  </a></li>\n</ul>\n<p>JavaScript 的物件即透過原型 (Prototype) 機制相互繼承功能，且與典型的物件導向 (OO) 程式語言相較，其運作方式有所差異。我們將透過本文說明相異之處、解釋原型鍊 (Prototype chain) 運作的方式，並了解原型屬性是如何將函式新增至現有的建構子 (Constructor) 之中。</p>\n<table class=\"learn-box standard-table\">\n  <tbody>\n    <tr>\n      <th scope=\"row\">必備條件：</th>\n      <td>基本的電腦素養、已初步了解 HTML 與 CSS、熟悉 JavaScript (參閱〈<a href=\"/zh-TW/docs/Learn/JavaScript/First_steps\">First steps</a>〉與〈<a href=\"/zh-TW/docs/Learn/JavaScript/Building_blocks\">Building blocks</a>〉以及 OOJS 基礎概念 (參閱〈<a href=\"/en-US/docs/Learn/JavaScript/Objects/Basics\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Introduction to objects (en-US)</a>〉。</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">主旨：</th>\n      <td>\n        了解 JavaScript\n        的物件原型、原型鍊的運作方式、應如何將新的函式加入原型屬性之中。\n      </td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"「原型」架構的程式語言？","title":"「原型」架構的程式語言？","isH3":false,"content":"<p>常有人說 JavaScript 是<strong>原型架構的程式語言</strong> — 各個物件均具備 1 組<strong>原型物件</strong>作為範本物件，用以繼承函式與屬性。物件的原型物件可能也具備原型物件，並繼承了其上的函式與屬性。這就是我們所謂的「<strong>原型鍊 (Prototype chain)</strong>」，同時正好說明為何 A 物件的屬性與函式是透過 B 物件的屬性與函式所定義。</p>\n<p>精確點說，這些屬性與函式都是透過物件的建構子函式所定義，並非物件實例本身。</p>\n<p>傳統的 OOP 都是先定義了類別，接著在建立物件實例之後，在類型上定義的所有屬性與函式均複製到此實例。但 JavaScript 不會複製這些屬性與函式，卻是在物件實例與其建構子之間設定連結 (原型鍊中的連結)，只要順著原型鍊就能在建構子之中找到屬性與函式。</p>\n<p>先看個範例會比較清楚點。</p>"}},{"type":"prose","value":{"id":"了解原型物件","title":"了解原型物件","isH3":false,"content":"<p>先回到我們寫過的 <code>Person()</code> 建構子範例。在你的瀏覽器裡載入範例。如果你還沒看完前篇文章並製作出此範例，可先使用 <a href=\"https://mdn.github.io/learning-area/javascript/oojs/introduction/oojs-class-further-exercises.html\" class=\"external\" rel=\" noopener\">oojs-class-further-exercises.html</a> 這個範例 (可看到<a href=\"https://github.com/mdn/learning-area/blob/master/javascript/oojs/introduction/oojs-class-further-exercises.html\" class=\"external\" rel=\" noopener\">原始碼</a>)。</p>\n<p>我們在此範例中定義了建構子函式：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">first<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> interests</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// property and method definitions</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>接著建立如下的物件實例：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> person1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Smith'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'male'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'music'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'skiing'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>如果你在自己的 JavaScript 主控台中鍵入「<code>person1.」，應該會看到瀏覽器根據此物件可用的成員名稱開始自動補完：</code></p>\n<p>\n  <img src=\"/en-US/docs/Learn/JavaScript/Objects/Object_prototypes/object-available-members.png\" alt=\"\" width=\"355\" height=\"361\" loading=\"lazy\">\n</p>\n<p>在此列表中，可以看到 <code>person1</code> 原型物件上所定義的成員，也就是 <code>Person()</code> 建構子 — <code>name</code>、<code>age</code>、<code>gender</code>、<code>interests</code>、<code>bio</code>、<code>greeting</code>。你也會看到其他如 <code>watch</code>、<code>valueOf 等，同樣也是定義在</code> <code>Person()</code> 建構子原型物件之上的成員，如此構成 <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a>。下圖顯示原型鍊的運作方式。</p>\n<p>\n  <img src=\"/en-US/docs/Learn/JavaScript/Objects/Object_prototypes/mdn-graphics-person-person-object-2.png\" alt=\"\" width=\"700\" height=\"150\" loading=\"lazy\">\n</p>\n<p>所以當你在 <code>person1 上呼叫了「實際上是定義於 Object 上的函式」，會發生什麼事呢？舉例來說：</code></p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>person1<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>此函式僅回傳所呼叫的物件數值。此範例所將發生的是：</p>\n<ul>\n  <li>瀏覽器先檢查 <code>person1</code> 物件上是否有可用的 <code>valueOf()</code> 函式。</li>\n  <li>其實沒有，所以瀏覽器接著檢查 <code>person1</code> 物件的原型物件 (<code>Person</code>) 上是否有可用的 <code>valueOf()</code> 函式。</li>\n  <li>同樣沒有，所以瀏覽器再檢查 <code>Person()</code> 建構子的原型物件 (<code>Object</code>) 上是否有可用的 <code>valueOf()</code> 函式。這次有，所以就會呼叫。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>備註：</strong> 再次重申，在原型鍊中的函式與屬性並<strong>不是</strong>從任一物件複製到另一個物件，而是如上述的，沿著該原型鍊向上存取而得。</p>\n</div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>備註：</strong> 直接存取物件的原型物件，並沒有一定的方式。原型鍊中，項目之間的「連結」均定義於內部屬性之內，即 JavaScript 規格中的 <code>[[prototype]]</code> (可參閱 <a href=\"/zh-TW/docs/Glossary/ECMAScript\">ECMAScript</a>)。新版瀏覽器均具備所謂的「<a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>__proto__</code></a> (兩邊都是 2 個底線)」屬性，其中就包含了物件的原型物件。舉例來說，你可嘗試「<code>person1.__proto__」</code>與「<code>person1.__proto__.__proto__</code>」看看程式碼中的鍊會是什麼樣子！</p>\n</div>"}},{"type":"prose","value":{"id":"原型屬性也定義所要繼承的成員","title":"原型屬性也定義所要繼承的成員","isH3":false,"content":"<p>所以該在哪裡定義所要繼承的屬性與函式呢？若看一下 <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> 參考頁面，你就會看到左邊列出許多屬性與函式，遠超過上方擷圖所列 <code>person1</code> 物件所繼承的成員數量。有些繼承了，有些則無？為什麼呢？</p>\n<p>原因在於，繼承的成員就是在 <code>prototype</code> 屬性 (你也能稱之為子命名空間 sub namespace) 中定義的成員，也就是以「<code>Object.prototype.」開頭的成員；並非只以「``Object.」開頭的成員。``prototype</code> 屬性值就是 1 個物件，基本上儲存了許多我們想「讓原型鍊上的物件一路繼承下去」的屬性與函式。</p>\n<p>所以如 <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object/watch\" class=\"page-not-created\" title=\"This is a link to an unwritten page\"><code>Object.prototype.watch()</code></a>、<a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Object.prototype.valueOf() (en-US)</a> 等等，均可用於繼承自 <code>Object()</code> 的任何物件類型，包含以建構子建立的新物件實例。</p>\n<p><a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Object.is() (en-US)</a>、<a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys()</code></a>，及其他未於 <code>prototype</code> 內定義的成員，也就不會繼承至 1). 物件實例或 2). 從 <code>Object() 繼承而來的物件類型。</code>這些函式＼屬性都只能用於 <code>Object()</code> 建構子本身。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>備註：</strong> 這看起來很奇怪：你怎麼能在建構子上定義函式 (Method)，而且這建構子本身也是函式 (Function)？其實「Function」也屬於一個物件類型，可參閱 <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function()</code></a> 建構子參考以進一步了解。</p>\n</div>\n<ol>\n  <li>你可自行檢查現有的原型屬性。回到我們之前的範例，試著於 JavaScript 主控台中輸入：\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype\n</code></pre></div>\n  </li>\n  <li>輸出結果很平淡，畢竟我們並未在自定的建構子原型上定義任何東西。依預設值，建構子的 <code>prototype</code> 都是從空白開始。現在可嘗試下列：\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype\n</code></pre></div>\n  </li>\n</ol>\n<p>這樣就會看到 <code>Object</code> 的 <code>prototype</code> 屬性中所定義的許多函式，而繼承自 <code>Object</code> 的物件也能找到這些函式。</p>\n<p>只要試著尋找如 <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>、<a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a>、<a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>、<a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> 等全域物件的原型上定義的函式與屬性，就會看到 JavaScript 中的其他原型鍊繼承範例。這些物件都在其原型上定義了多個成員，因此可作為你建立字串時的範例：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> myString <span class=\"token operator\">=</span> <span class=\"token string\">'This is my string.'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>myString</code> 上立刻就有多個有用的函式，如 <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">split() (en-US)</a>、<a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">indexOf() (en-US)</a>、<a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>replace()</code></a> 等。</p>\n<div class=\"notecard warning\" id=\"sect4\">\n  <p><strong>警告：</strong> <code>prototype</code> 這個屬性，是 JavaScript 中最讓人混淆的名稱之一。你可能會認為<code>this</code>屬性即指目前物件(current object)的原型物件(prototype object)，但它其實不是原型 (應該是可透過 <code>__proto__</code> 存取的內部物件(internal object)才對，記得上面說過的嗎？)。<code>prototype</code>是一個物件(object)，內含了你定義所應該繼承的成員。</p>\n</div>"}},{"type":"prose","value":{"id":"再次溫習_create","title":"再次溫習 create()","isH3":false,"content":"<p>我們先前講過用 <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a> 函式建立新物件實例的方法。</p>\n<ol>\n  <li>舉例來說，你可先在前面的 JavaScript 主控台範例中試著輸入：\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> person2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li><code>create()</code> 實際上是透過特定的原型物件，來建立新的物件。我們在這裡將 <code>person1</code> 作為原型物件，建立了 <code>person2</code>。你可於主控台輸入下列以測試之：\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>person2<span class=\"token punctuation\">.</span>__proto__\n</code></pre></div>\n  </li>\n</ol>\n<p>如此將回傳 <code>person1</code> 物件。</p>"}},{"type":"prose","value":{"id":"建構子的屬性","title":"建構子的屬性","isH3":false,"content":"<p>每個物件實例都具備 1 個<a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">建構子 (en-US)</a>屬性，指向「用以建立實例」的原始建構子函式。</p>\n<ol>\n  <li>\n    舉例來說，若在主控台中輸入下列指令：\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>person1<span class=\"token punctuation\">.</span>constructor\nperson2<span class=\"token punctuation\">.</span>constructor\n</code></pre></div>應該兩者都會回傳 <code>Person()</code> 建構子，因為此建構子包含這些實例的原始定義。\n    偷吃步的方法，是將圓括弧加到 <code>constructor</code> 屬性 (須包含任何必要參數) 末端，以從該建構子建立其他物件實例。畢竟建構子也是函式 (Function)，所以可透過圓括弧將之觸發。你只要納入 <code>new</code> 這個關鍵字，即可將此函式作為建構子。\n  </li>\n  <li>在主控台中輸入：\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> person3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">person1<span class=\"token punctuation\">.</span>constructor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Karen'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Stephenson'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'female'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'playing drums'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mountain climbing'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n  <li>現在可試著存取新物件的功能，例如：\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>person3<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>first\nperson3<span class=\"token punctuation\">.</span>age\nperson3<span class=\"token punctuation\">.</span><span class=\"token function\">bio</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n  </li>\n</ol>\n<p>這樣運作得還不差。你不需常常用這方法，但當你要建立新的實例，又因為某些原因找不到原始建構子的參照，這就特別有用了。</p>\n<p>此外，<a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">constructor (en-US)</a> 屬性還有其他用處。舉例來說，如果你有個物件實例，並要回傳建構子 (本身就是實例) 的名稱，就透過：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>instanceName<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>name\n</code></pre></div>\n<p>也可嘗試：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>person1<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>name\n</code></pre></div>"}},{"type":"prose","value":{"id":"修改原型","title":"修改原型","isH3":false,"content":"<p>先看看建構子的 <code>prototype</code> 屬性的修改範例：</p>\n<ol>\n  <li>回到 <a href=\"https://mdn.github.io/learning-area/javascript/oojs/introduction/oojs-class-further-exercises.html\" class=\"external\" rel=\" noopener\">oojs-class-further-exercises.html</a> 範例，先在本機儲存 1 份<a href=\"https://github.com/mdn/learning-area/blob/master/javascript/oojs/introduction/oojs-class-further-exercises.html\" class=\"external\" rel=\" noopener\">原始碼</a>的副本。在現成的 JavaScript 中加入下列程式碼，即是將新函式新增到建構子的 <code>prototype</code> 屬性：\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">farewell</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>first <span class=\"token operator\">+</span> <span class=\"token string\">' has left the building. Bye for now!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n  </li>\n  <li>儲存程式碼並在瀏覽器中載入頁面，再輸入下列程式碼：\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>person1<span class=\"token punctuation\">.</span><span class=\"token function\">farewell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n  </li>\n</ol>\n<p>這時應該會看到警示訊息且內含了建構子所定義的人名。這樣很有用，但如果能動態更新整個繼承鍊，且從建構子分割出來的所有物件實例都能使用此新的函式，就會更有用！</p>\n<p>花個 1 分鐘想想，我們的程式碼中定義了建構子，然後根據建構子建立實例物件，接著將新函式添增到建構子的原型：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">first<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> interests</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// property and method definitions</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> person1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tammi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Smith'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'neutral'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'music'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'skiing'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'kickboxing'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">farewell</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>first <span class=\"token operator\">+</span> <span class=\"token string\">' has left the building. Bye for now!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>但是 <code>farewell()</code> 函式仍可用於 <code>person1</code> 物件實例，其可用的功能已自動更新過。如此證明了我們之前對原型鍊的說明，也代表瀏覽器會沿著鍊往上找「尚未於物件實例上定義的函式」，而非「複製到實例中的函式」。如此可建構強大且靈活的系統。</p>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>備註：</strong> 如果你在讓此範例運作時感覺有點困難，可參閱 <a href=\"https://github.com/mdn/learning-area/blob/master/javascript/oojs/advanced/oojs-class-prototype.html\" class=\"external\" rel=\" noopener\">oojs-class-prototype.html</a> 範例 (也可看<a href=\"https://mdn.github.io/learning-area/javascript/oojs/advanced/oojs-class-prototype.html\" class=\"external\" rel=\" noopener\">即時運作</a>的情形)。</p>\n</div>\n<p>你很少會看到在 <code>prototype</code> 屬性上定義的屬性，因為照此範例定義的屬性彈性較低，舉例來說，你可新增如下的屬性：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>fullName <span class=\"token operator\">=</span> <span class=\"token string\">'Bob Smith'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>但因為幾乎不會有人取這名字，所以就沒什麼彈性。最好可以在 <code>name.first</code> 與 <code>name.last 之外建立 fullName：</code></p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>fullName <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>first <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>但因為這樣會參照全域範圍，而非函式範圍，所以也不適用。若呼叫此屬性，則將回傳 <code>undefined undefined</code>。這種模式適合我們先前於原型中定義的函式，因為該函式就是在功能範圍之內，且可成功轉移至物件實例的的範圍。因此你可能會在原型中定義常數屬性 (也就是永遠不需更改的屬性)，但一般來說會比較適合在建構子中定義屬性。</p>\n<p>事實上，許多物件定義較常見的模式，就是在建構子中定義屬性，而在原型中定義函式。這樣一來，建構子只有屬性定義；函式則切分到不同的區塊，讓整個程式碼較清楚易讀。舉例來說：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Constructor with property definitions</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// property definitions</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// First method definition</span>\n\n<span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">x</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Second method definition</span>\n\n<span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">y</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// etc.</span>\n</code></pre></div>\n<p>你可在 Piotr Zalewa 的「<a href=\"https://github.com/zalun/school-plan-app/blob/master/stage9/js/index.js\" class=\"external\" rel=\" noopener\">school plan app</a>」範例中看到實際運作的範例。</p>"}},{"type":"prose","value":{"id":"摘要","title":"摘要","isH3":false,"content":"<p>本文說明了 JavaScript 物件原型，包含原型物件鍊是如何讓物件能互相繼承其特性、原型屬性的本質、原型屬性又是如何能將函式新增至建構子，以及其他相關概念。</p>\n<p>接著我們將讓你在自己的任 2 個自訂物件之間，實作功能的繼承。</p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-TW/docs/Learn/JavaScript/Objects/Classes_in_JavaScript\"> 前頁 </a></li>\n    <li><a class=\"button minimal\" href=\"/zh-TW/docs/Learn/JavaScript/Objects\"> Overview: Objects</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-TW/docs/Learn/JavaScript/Objects/Classes_in_JavaScript\"> 次頁  </a></li>\n</ul>"}}],"toc":[{"text":"「原型」架構的程式語言？","id":"「原型」架構的程式語言？"},{"text":"了解原型物件","id":"了解原型物件"},{"text":"原型屬性也定義所要繼承的成員","id":"原型屬性也定義所要繼承的成員"},{"text":"再次溫習 create()","id":"再次溫習_create"},{"text":"建構子的屬性","id":"建構子的屬性"},{"text":"修改原型","id":"修改原型"},{"text":"摘要","id":"摘要"}],"summary":"JavaScript 的物件即透過原型 (Prototype) 機制相互繼承功能，且與典型的物件導向 (OO) 程式語言相較，其運作方式有所差異。我們將透過本文說明相異之處、解釋原型鍊 (Prototype chain) 運作的方式，並了解原型屬性是如何將函式新增至現有的建構子 (Constructor) 之中。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Object prototypes","locale":"en-US","native":"English (US)"},{"title":"Prototipos de objetos","locale":"es","native":"Español"},{"title":"Prototypes Objet","locale":"fr","native":"Français"},{"title":"Object のプロトタイプ","locale":"ja","native":"日本語"},{"title":"Object prototypes","locale":"ko","native":"한국어"},{"title":"Protótipos de objetos","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Прототипы объектов","locale":"ru","native":"Русский"},{"title":"对象原型","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"zh-tw/learn/javascript/objects/object_prototypes","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-tw/learn/javascript/objects/object_prototypes/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-TW/docs/Learn","title":"學習該如何開發 Web"},{"uri":"/zh-TW/docs/Learn/JavaScript","title":"JavaScript — 動態的客戶端指令"},{"uri":"/zh-TW/docs/Learn/JavaScript/Objects","title":"JavaScript 物件介紹"},{"uri":"/zh-TW/docs/Learn/JavaScript/Objects/Object_prototypes","title":"物件原型"}],"pageTitle":"物件原型 - 學習該如何開發 Web | MDN","noIndexing":false}}