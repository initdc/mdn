{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Express 教學 3: 使用資料庫 ( Mongoose)","mdn_url":"/zh-TW/docs/Learn/Server-side/Express_Nodejs/mongoose","locale":"zh-TW","native":"正體中文 (繁體)","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"\"><a href=\"/zh-TW/docs/Learn/Getting_started_with_the_web\"><strong>全新手請從這開始！</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>Web 入門</summary>\n          <ol>\n            <li><a href=\"/zh-TW/docs/Learn/Getting_started_with_the_web\">Web 概述</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/Getting_started_with_the_web/Installing_basic_software\">安裝基本軟體</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/Getting_started_with_the_web/What_will_your_website_look_like\">自己的網站會是什麼樣子？</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/Getting_started_with_the_web/Dealing_with_files\">處理檔案</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/Getting_started_with_the_web/HTML_basics\">HTML 基礎概念</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/Getting_started_with_the_web/CSS_basics\">CSS 基礎概念</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript 基礎概念</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/Getting_started_with_the_web/Publishing_your_website\">發佈自己的網站</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/Getting_started_with_the_web/How_the_Web_works\">Web 運作的方式</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/zh-TW/docs/Learn/HTML\"><strong>HTML — 架構 Web</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>HTML 介紹</summary>\n          <ol>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Introduction_to_HTML\">HTML 概述</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Introduction_to_HTML/Getting_started\">HTML 入門</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML\">標題裡是什麼？HTML 中的後設資料 (Metadata)</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Introduction_to_HTML/HTML_text_fundamentals\">HTML 文字基礎概念</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Introduction_to_HTML/Creating_hyperlinks\">建立超連結</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Introduction_to_HTML/Advanced_text_formatting\">進階文字格式</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure\">文件與網站架構</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML\">HTML 除錯</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Introduction_to_HTML/Marking_up_a_letter\">親和度：設個字母</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Introduction_to_HTML/Structuring_a_page_of_content\">親和度：架構出具備內容的網頁</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>多媒體與嵌入</summary>\n          <ol>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Multimedia_and_embedding\">多媒體與嵌入的概述</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Multimedia_and_embedding/Images_in_HTML\">HTML 中的圖片</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Multimedia_and_embedding/Video_and_audio_content\">視訊與音訊內容</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Multimedia_and_embedding/Other_embedding_technologies\">從物件到 iframe — 其他嵌入技巧</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Multimedia_and_embedding/Adding_vector_graphics_to_the_Web\">為 Web 新增向量圖</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images\">適應性圖片</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Multimedia_and_embedding/Mozilla_splash_page\">親和度：Mozilla 形象頁面</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>HTML 表格</summary>\n          <ol>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Tables\">HTML 表格概述</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Tables/Basics\">HTML表格基礎</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Tables/Advanced\">HTML Table advanced features and accessibility</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/HTML/Tables/Structuring_planet_data\">Assessment: Structuring planet data</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/zh-TW/docs/Learn/CSS\"><strong>CSS — 設計 Web 的風格</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>初探 CSS</summary>\n          <ol>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/First_steps\">初探 CSS（概述）</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/First_steps/What_is_CSS\">CSS 是什麼？</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/First_steps/Getting_started\">CSS 入門</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/First_steps/How_CSS_is_structured\">How CSS is structured</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/First_steps/How_CSS_works\">CSS 怎麼運作</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/First_steps/Using_your_new_knowledge\">Using your new knowledge</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS 組件</summary>\n          <ol>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks\">CSS building blocks overview</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance\">Cascade and inheritance</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks/Selectors\">CSS selectors</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks/The_box_model\">The box model</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks/Backgrounds_and_borders\">Backgrounds and borders</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks/Handling_different_text_directions\">Handling different text directions</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks/Overflowing_content\">Overflowing content</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks/Values_and_units\">Values and units</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks/Sizing_items_in_CSS\">Sizing items in CSS</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks/Images_media_form_elements\">Images, media, and form elements</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks/Styling_tables\">Styling tables</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks/Debugging_CSS\">Debugging CSS</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Building_blocks/Organizing\">Organizing your CSS</a></li>\n      </ol></details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>樣式化文字</summary>\n          <ol>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Styling_text\">樣式化文字概述</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Styling_text/Fundamentals\">基礎的文字與字型樣式化</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Styling_text/Styling_lists\">樣式化列表</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Styling_text/Styling_links\">樣式化連結</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Styling_text/Web_fonts\">Web 字型</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/Styling_text/Typesetting_a_homepage\">親合度：設定社區大學首頁的版面</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>CSS 版面配置</summary>\n          <ol>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout\">CSS 版面配置概述</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout/Introduction\">Introduction to CSS layout</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout/Normal_Flow\">Normal Flow</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout/Flexbox\">彈性區塊</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout/Grids\">格線</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout/Floats\">浮動</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout/Positioning\">定位</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout/Multiple-column_Layout\">Multiple-column Layout</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout/Responsive_Design\">Responsive design</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout/Media_queries\">Beginner's guide to media queries</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout/Legacy_Layout_Methods\">Legacy Layout Methods</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout/Supporting_Older_Browsers\">Supporting Older Browsers</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/CSS/CSS_layout/Fundamental_Layout_Comprehension\">Fundamental Layout Comprehension</a></li>\n          </ol>\n      </details>\n  </li>\n  <li data-default-state=\"\"><a href=\"/zh-TW/docs/Learn/JavaScript\"><strong>JavaScript — 動態的用戶端指令</strong></a></li>\n  <li class=\"toggle\">\n      <details>\n          <summary>JavaScript 第一步</summary>\n          <ol>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/First_steps\">JavaScript 第一步概述</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/First_steps/What_is_JavaScript\">什麼是 JavaScript？</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/First_steps/A_first_splash\">初次接觸 JavaScript</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/First_steps/What_went_wrong\">出了什麼問題？JavaScript 疑難排解</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/First_steps/Variables\">儲存你所需的資訊 — 變數</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/First_steps/Math\">JavaScript 基礎概念 — 數字與運算子</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/First_steps/Strings\">處理文字 — JavaScript 中的字串</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/First_steps/Useful_string_methods\">有用的字串函式</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/First_steps/Arrays\">陣列</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/First_steps/Silly_story_generator\">親合度：傻瓜故事產生器</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>JavaScript 基礎要件</summary>\n          <ol>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Building_blocks\">JavaScript 基礎要件概述</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Building_blocks/conditionals\">於程式碼中決策 — 條件</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Building_blocks/Looping_code\">程式碼迴圈</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Building_blocks/Functions\">函式 — 可重複使用的程式碼區塊</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Building_blocks/Build_your_own_function\">建立自己的函式</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Building_blocks/Return_values\">函式回傳值</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Building_blocks/Events\">事件介紹</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Building_blocks/Image_gallery\">親合度：圖庫</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n      <details>\n          <summary>JavaScript 物件介紹</summary>\n          <ol>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Objects\">JavaScript 物件概述</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Objects/Basics\">物件基礎概念</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Objects/Object_prototypes\">物件原型</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Objects/Object-oriented_programming\">Object-oriented programming concepts</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Objects/Classes_in_JavaScript\">Classes in JavaScript</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Objects/JSON\">使用 JSON 資料</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Objects/Object_building_practice\">物件建構實作</a></li>\n            <li><a href=\"/zh-TW/docs/Learn/JavaScript/Objects/Adding_bouncing_balls_features\">親合度：為彈跳球展示新增功能</a></li>\n          </ol>\n      </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>非同步的 JavaScript</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Asynchronous\">Asynchronous JavaScript overview</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Asynchronous/Concepts\">General asynchronous programming concepts</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Asynchronous/Introducing\">Introducing asynchronous JavaScript</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Asynchronous/Timeouts_and_intervals\">Cooperative asynchronous Java​Script: Timeouts and intervals</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Asynchronous/Promises\">Graceful asynchronous programming with Promises</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Asynchronous/Async_await\">Making asynchronous programming easier with async and await</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Asynchronous/Choosing_the_right_approach\">Choosing the right approach</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>客戶端 web APIs</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Client-side_web_APIs\">客戶端 web APIs</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Client-side_web_APIs/Introduction\">Introduction to web APIs</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents\">文件操作</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data\">Fetching data from the server</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Client-side_web_APIs/Third_party_APIs\">Third party APIs</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Client-side_web_APIs/Drawing_graphics\">Drawing graphics</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Client-side_web_APIs/Video_and_audio_APIs\">Video and audio APIs</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Client-side_web_APIs/Client-side_storage\">Client-side storage</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/zh-TW/docs/Learn/Forms\"><strong>網頁表單-與使用者資料合作</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>核心的表單學習途徑</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Forms\">網頁表單概述</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/Your_first_form\">Your first form</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/How_to_structure_a_web_form\">如何建構網頁表單</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/Basic_native_form_controls\">Basic native form controls</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/HTML5_input_types\">The HTML5 input types</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/Other_form_controls\">Other form controls</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/Styling_web_forms\">Styling web forms</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/Advanced_form_styling\">Advanced form styling</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/UI_pseudo-classes\">UI pseudo-classes</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/Form_validation\">Client-side form validation</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/Sending_and_retrieving_form_data\">Sending form data</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>深入網頁表單</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/How_to_build_custom_form_controls\">How to build custom form controls</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/Sending_forms_through_JavaScript\">Sending forms through JavaScript</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Forms/Property_compatibility_table_for_form_controls\">CSS property compatibility table for form controls</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/zh-TW/docs/Learn/Accessibility\"><strong>無障礙網頁 — 每個人都可以使用的網頁</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>無障礙網頁指南</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Accessibility\">無障礙網頁概述</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Accessibility/What_is_accessibility\">何謂無障礙網頁？</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Accessibility/HTML\">HTML: A good basis for accessibility</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Accessibility/CSS_and_JavaScript\">CSS and JavaScript accessibility best practices</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Accessibility/WAI-ARIA_basics\">WAI-ARIA 基礎</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Accessibility/Multimedia\">Accessible multimedia</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Accessibility/Mobile\">行動裝置上的無障礙</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>無障礙網頁評估</summary>\n        <ol>\n            <li><a href=\"/zh-TW/docs/Learn/Accessibility/Accessibility_troubleshooting\">Assessment: Accessibility troubleshooting</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing\"><strong>工具與測試</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Client-side web development tools</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Understanding_client-side_tools\">Client-side web development tools index</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Overview\">Client-side tooling overview</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Command_line\">Command line crash course</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Package_management\">Package management basics</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Introducing_complete_toolchain\">Introducing a complete toolchain</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Deployment\">Deploying our app</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>介紹前端框架</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Introduction\">前端框架簡介</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Main_features\">Framework main features</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>React</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started\">Getting started with React</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_todo_list_beginning\">Beginning our React todo list</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_components\">Componentizing our React app</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state\">React interactivity: Events and state</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_filtering_conditional_rendering\">React interactivity: Editing, filtering, conditional rendering</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_accessibility\">Accessibility in React</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_resources\">React resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Ember</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_getting_started\">Getting started with Ember</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_structure_componentization\">Ember app structure and componentization</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_interactivity_events_state\">Ember interactivity: Events, classes and state</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_conditional_footer\">Ember Interactivity: Footer functionality, conditional rendering</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_routing\">Routing in Ember</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_resources\">Ember resources and troubleshooting</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Vue</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_getting_started\">開始學 Vue</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_first_component\">Creating our first Vue component</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_rendering_lists\">Rendering a list of Vue components</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_methods_events_models\">Adding a new todo form: Vue events, methods, and models</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_styling\">Styling Vue components with CSS</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_computed_properties\">Using Vue computed properties</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_conditional_rendering  \">Vue conditional rendering: editing existing todos</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_refs_focus_management\">Focus management with Vue refs</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_resources\">Vue resources</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Svelte</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_getting_started\">Svelte 入門</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_Todo_list_beginning\">Starting our Svelte Todo list app</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_variables_props\">Dynamic behavior in Svelte: working with variables and props</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_components\">Componentizing our Svelte app</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_reactivity_lifecycle_accessibility\">Advanced Svelte: Reactivity, lifecycle, accessibility</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_stores\">Working with Svelte stores</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_TypeScript  \">TypeScript support in Svelte</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_deployment_next\">Deployment and next steps</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Angular</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_getting_started\">Angular 新手入門</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_todo_list_beginning\">開始開發我們的 Angular 待辦事項應用程式</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_styling\">使用樣式點綴我們的 Angular 應用程式</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_item_component\">建立一個 item 元件</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_filtering\">篩選我們的待辦事項項目</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_building\">建構 Angular 應用程式與更多資源</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Git and GitHub</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/GitHub\">Git and GitHub 概述</a></li>\n          <li><a href=\"https://guides.github.com/activities/hello-world/\">Hello World</a></li>\n          <li><a href=\"https://guides.github.com/introduction/git-handbook/\">Git Handbook</a></li>\n          <li><a href=\"https://guides.github.com/activities/forking/\">Forking Projects</a></li>\n          <li><a href=\"https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests\">About pull requests</a></li>\n          <li><a href=\"https://guides.github.com/features/issues/\">Mastering Issues</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>跨瀏覽器測試</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Cross_browser_testing\">跨瀏覽器測試概述</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Cross_browser_testing/Introduction\">跨瀏覽器測試介紹</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Cross_browser_testing/Testing_strategies\">測試執行策略</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Cross_browser_testing/HTML_and_CSS\">處理常見的 HTML 與 CSS 問題</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Cross_browser_testing/JavaScript\">處理常見的 JavaScript 問題</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Cross_browser_testing/Accessibility\">處理常見的親合度問題</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Cross_browser_testing/Feature_detection\">建置功能偵測</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Cross_browser_testing/Automated_testing\">自動化測試介紹</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Tools_and_testing/Cross_browser_testing/Your_own_automation_environment\">設定自己的自動化測試環境</a></li>\n        </ol>\n    </details>\n  </li>\n  <li data-default-state=\"open\"><a href=\"/zh-TW/docs/Learn/Server-side\"><strong>伺服端網站程式設計</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>第一步</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/First_steps\">第一步概述</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/First_steps/Introduction\">伺服端介紹</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/First_steps/Client-Server_overview\">用戶端概述</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/First_steps/Web_frameworks\">伺服端網路框架</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/First_steps/Website_security\">網站安全</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n        <summary>Django 網站框架 (Python)</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django\">Django 網站框架 (Python) 概述</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/Introduction\">介紹</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/development_environment\">設定開發環境</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/Tutorial_local_library_website\">線上教學：本地圖書館網站</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/skeleton_website\">線上教學 2：建立網站骨架</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/Models\">線上教學 3：使用模型</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/Admin_site\">線上教學 4：Django 管理網站</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/Home_page\">線上教學 5：建立我們的首頁</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/Generic_views\">線上教學 6：泛型清單與細節檢視</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/Sessions\">線上教學 7：會話 (Sessions) 框架</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/Authentication\">線上教學 8：使用者授權與許可</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/Forms\">線上教學 9：搭配表單</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/Testing\">線上教學 10：測試 Django 的 Web App</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/Deployment\">線上教學 11：佈署 Django 至產品</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/web_application_security\">Web App 安全性</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Django/django_assessment_blog\">親合度：DIY 迷你部落格</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n        <summary>Express 網站框架 (node.js/JavaScript)</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs\">Express 網站框架 (Node.js/JavaScript) 概述</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/Introduction\">Express/Node 介紹</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/development_environment\">設定 Node (Express) 的開發環境</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website\">Express 教學 1: 本地圖書館網站</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">Express 教學 2: 建立骨架網站</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/mongoose\">Express 教學 3: 使用資料庫 (Mongoose)</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/routes\">Express 教學 4: 路由與控制器</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express 教程 5: 呈現圖書館的資料</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/forms\">Express 教學 6: 使用表單</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/deployment\">Express 教學 7: 佈署到正式環境</a></li>\n        </ol>\n    </details>\n  </li>\n  <li><a href=\"#\"><strong>更多資源</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n        <summary>常見問題</summary>\n        <ol>\n          <li><a href=\"/zh-TW/docs/Learn/HTML/Howto\">HTML 問題</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/CSS/Howto\">CSS 問題</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/JavaScript/Howto\">JavaScript questions</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Common_questions#Web_mechanics\">Web 的運作方式</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Common_questions#Tools_and_setup\">工具與設定</a></li>\n          <li><a href=\"/zh-TW/docs/Learn/Common_questions#Design_and_accessibility\">設計與親合度</a></li>\n        </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/skeleton_website\"> 前頁 </a></li>\n    <li><a class=\"button minimal\" href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs\"> Overview: Express Nodejs</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/routes\"> 次頁  </a></li>\n</ul>\n<p>本文簡短介紹數據庫，以及如何搭配 Node / Express 應用，使用數據庫。接下來會演示我們如何使用 <a href=\"http://mongoosejs.com/\" class=\"external\" rel=\" noopener\">Mongoose</a>，為本地圖書館提供數據庫存取。本文說明物件要求與模型如何宣告，主要的欄位型態，以及基本驗證。本文也簡短演示一些存取模型數據的主要方法。</p>\n<table class=\"learn-box standard-table\">\n  <tbody>\n    <tr>\n      <th scope=\"row\">前置條件:</th>\n      <td><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">Express 教學 2: 創建一個骨架網站</a></td>\n    </tr>\n    <tr>\n      <th scope=\"row\">目標:</th>\n      <td>能夠使用Mongoose設計並創造自己的模型。</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"概覽","title":"概覽","isH3":false,"content":"<p>圖書館職員會使用本地圖書館網站，存放書本和借書者訊息。圖書館使用者會用網站瀏覽與尋找書本，看看是否有可以藉閱的書本複本，然後預約或者藉閱。為了有效率地存放與取用訊息，我們將把它存放到數據庫。</p>\n<p>Express 應用可以使用許多不同的數據庫，並且有好幾種方法可以執行創建 <strong>C</strong>reate、讀取 <strong>R</strong>ead、更新 <strong>U</strong>pdate 和刪除 <strong>D</strong>elete (CRUD) 操作。本教程為一些可用的選項，提供簡短的概覽，然後接著詳細演示該選項的特定運行機制。</p>"}},{"type":"prose","value":{"id":"我可以使用什麼數據庫","title":"我可以使用什麼數據庫?","isH3":true,"content":"<p>Express 應用程序可以使用 Node 支持的任何數據庫（Express 本身不會為數據庫管理，定義任何特定的附加行為/要求）。有許多<a href=\"https://expressjs.com/en/guide/database-integration.html\" class=\"external\" rel=\" noopener\">流行的選項</a>，包括 PostgreSQL，MySQL，Redis，SQLite 和 MongoDB。</p>\n<p>在選擇數據庫時，您應該考慮時間 - 生產力/學習曲線，性能，易複製/備份，成本，社區支持等等。雖然沒有單一的 “最佳” 數據庫，但幾乎任何流行的解決方案，我們的本地圖書館這樣的中小型網站，應該都可以接受。</p>\n<p>有關選項的更多訊息，請參閱：<a href=\"https://expressjs.com/en/guide/database-integration.html\" class=\"external\" rel=\" noopener\">數據庫集成（Express docs）</a>。</p>"}},{"type":"prose","value":{"id":"與數據庫互動的最好方式是什麼","title":"與數據庫互動的最好方式是什麼?","isH3":true,"content":"<p>有兩種與數據庫互動的方法：</p>\n<ul>\n  <li>使用數據庫的原生查詢語言（例如 SQL）</li>\n  <li>使用對像數據模型（“ODM”）/對象關係模型（“ORM”）。 ODM / ORM 將網站的數據表示為 JavaScript 對象，然後將其映射到底層數據庫。一些 ORM 綁定到特定的數據庫，而另一些則提供了一個不特定數據庫的後端。</li>\n</ul>\n<p>通過使用 SQL 或數據庫支持的任何查詢語言，都可以獲得最佳性能。 ODM 通常比較慢，因為它們使用翻譯代碼，在對象和數據庫格式之間進行映射，這可能不會使用最有效的數據庫查詢（尤其是如果 ODM 支持不同的數據庫後端，並且必須在各個數據庫所支持的功能方面，做出更大的折衷）。</p>\n<p>使用 ORM 的好處是，程序員可以繼續用 JavaScript 對象而不是數據庫語義來思考 — 如果您需要使用不同數據庫（在相同或不同的網站上），那麼尤其如此。他們還提供了一個明顯的地方來執行數據驗證和檢查。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>備註：</strong> 使用 ODM / ORM 通常可以降低開發和維護成本！除非您非常熟悉本地查詢語言，或者性能對您至關重要，否則您應該強烈考慮使用 ODM。</p>\n</div>"}},{"type":"prose","value":{"id":"我應該使用哪個_ormodm_","title":"我應該使用哪個 ORM/ODM ?","isH3":true,"content":"<p>NPM 套件管理器站點上，有許多 ODM / ORM 解決方案（查看 <a href=\"https://www.npmjs.com/browse/keyword/odm\" class=\"external\" rel=\" noopener\">odm</a> 和 <a href=\"https://www.npmjs.com/browse/keyword/orm\" class=\"external\" rel=\" noopener\">orm</a> 標籤的子集合！）。</p>\n<p>在撰寫本文時，受歡迎的幾種解決方案是：</p>\n<ul>\n  <li><a href=\"https://www.npmjs.com/package/mongoose\" class=\"external\" rel=\" noopener\">Mongoose</a>: Mongoose 是一個 <a href=\"https://www.mongodb.org/\" class=\"external\" rel=\" noopener\">MongoDB</a>對象建模工具，用於在異步環境中工作。</li>\n  <li><a href=\"https://www.npmjs.com/package/waterline\" class=\"external\" rel=\" noopener\">Waterline</a>: 它是從基於 Express 的 Sails web 框架中提取的 ORM。它提供了一個統一的 API，來訪問眾多不同的數據庫，包括 Redis，mySQL，LDAP，MongoDB 和 Postgres。</li>\n  <li><a href=\"https://www.npmjs.com/package/bookshelf\" class=\"external\" rel=\" noopener\">Bookshelf</a>: 提供基於 promise 和傳統回調的接口，提供事務支持，eager/嵌套 eager 關係加載，多態關聯以及對一對一，一對多和多對多關係的支持。適用於 PostgreSQL，MySQL 和 SQLite3。</li>\n  <li><a href=\"https://www.npmjs.com/package/objection\" class=\"external\" rel=\" noopener\">Objection</a>: 以盡可能簡單的方式，使用 SQL 的全部功能，和底層數據庫引擎（支持 SQLite3，Postgres 和 MySQL）。</li>\n  <li><a href=\"https://www.npmjs.com/package/sequelize\" class=\"external\" rel=\" noopener\">Sequelize</a> 是 Node.js 和 io.js 基於 promise 的 ORM。它支持以下數據庫方言，PostgreSQL，MySQL，MariaDB，SQLite 和 MSSQL，並具有可靠的事務支持，關係，唯讀複本等功能。</li>\n</ul>\n<p>一般來說，在選擇解決方案時，您應該考慮提供的功能和 “社區活動” （下載，貢獻，錯誤報告，文檔質量等）。在撰寫本文時，Mongoose 是迄今為止最受歡迎的 ODM，如果您將 MongoDB 用於你的數據庫，那麼它是一個合理的選擇。</p>"}},{"type":"prose","value":{"id":"在本地圖書館使用_mongoose_和_mongodb","title":"在本地圖書館使用 Mongoose 和 MongoDb","isH3":true,"content":"<p>對於本地圖書館示例（以及本主題的其餘部分），我們將使用 <a href=\"https://www.npmjs.com/package/mongoose\" class=\"external\" rel=\" noopener\">Mongoose ODM</a> 來訪問我們的圖書館數據。 Mongoose 是 <a href=\"https://www.mongodb.com/what-is-mongodb\" class=\"external\" rel=\" noopener\">MongoDB</a> 的前端，MongoDB 是一個使用面向文檔數據模型的開源 <a href=\"https://en.wikipedia.org/wiki/NoSQL\" class=\"external\" rel=\" noopener\">NoSQL</a> 數據庫。在 MongoDB 數據庫中，“文檔” 的 “集合” ，<a href=\"https://docs.mongodb.com/manual/core/databases-and-collections/#collections\" class=\"external\" rel=\" noopener\">類似於</a>關係數據庫中 “行” 的 “表”。</p>\n<p>這種 ODM 和數據庫的結合在 Node 社區中非常流行，部分原因是文檔存儲和查詢系統，看起來非常像 JSON，因此對 JavaScript 開發人員來說很熟悉。</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>備註：</strong> 使用 Mongoose 時，您不需要事先了解 MongoDB，但是如果您已經熟悉 MongoDB，<a href=\"http://mongoosejs.com/docs/guide.html\" class=\"external\" rel=\" noopener\">Mongoose documentation</a>文檔的一部分會更易於使用和理解。</p>\n</div>\n<p>本教程的其餘部分，將介紹如何為 本地圖書館網站示例，定義和訪問 Mongoose 模式和模型。</p>"}},{"type":"prose","value":{"id":"設計本地圖書館的模型","title":"設計本地圖書館的模型","isH3":false,"content":"<p>在您開始編寫模型之前，花幾分鐘的時間思考，我們需要儲存的數據以及不同對象之間的關係。</p>\n<p>我們知道，我們需要儲存有關書籍的訊息（標題，摘要，作者，種類，國際標準書號），以及我們可能有多個副本可用（具有全域唯一 ID，可用狀態等）。我們可能需要存儲有關作者的更多訊息，而不僅僅是他們的名字，並且可能有多個作者，具有相同或相似的名稱。我們希望能夠根據書名，作者，種類和類別對訊息進行分類。</p>\n<p>在設計模型時，對於每個“對象”（相關訊息組）都有獨立的模型，是有意義的。在這種情況下，明顯的對像是書籍，書籍實例和作者。</p>\n<p>您可能還希望，使用模型來表示選擇列表選項（例如，選擇的下拉列表），而不是將選項硬編碼到網站本身— 在無法預先知道所有選項，或者可能更改時，更建議使用模型來表示。很明顯的，書本類型是這種模型的可能人選（例如科幻小說，法國詩歌等）。</p>\n<p>一旦我們決定了我們的模型和字段，我們就需要考慮它們之間的關係。</p>\n<p>考慮到這一點，下面的 UML 關聯圖，顯示了我們在這種情況下定義的模型（一個框對應一個模型）。如上所述，我們創建了以下模型，圖書（本書的通用細節），書本實例（系統中可用圖書的特定實際副本的狀態）和作者。我們還決定建立一個種類模型，以便可以動態創建它的值，而不是將下拉選項硬編碼。我們已經決定不為書本實例：狀態<code>BookInstance:status</code>建立模型—我們將硬編碼可接受的值，因為我們不希望這些值發生變化。在下圖每個框中，您可以看到模型名稱，字段名稱和類型，以及方法及其返回類型。</p>\n<p>下圖還顯示了模型之間的關係，包括它們的多重性。多重性是圖中顯示可能存在於關係中的每個模型的數量（最大值和最小值）的數字。例如，框之間的連接線，顯示書本<code>Book</code>和種類<code>Genre</code>是相關的。靠近書本<code>Book</code>模型的數字，表明一本書必須有零個或多個種類（您想要多少都可以），而種類<code>Genre</code>旁邊一行的數字，表明它可以有零個或多個相關書籍。</p>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>備註：</strong> 正如我們在下面的<strong>Mongoose 入門</strong>中所討論的那樣，通常只需要在一個模型中定義文檔/模型之間關係的字段（通過在另一個模型中搜索相關的<code>_id</code>仍然可以找到反向關係）。下面我們選擇在書本綱要（Book schema）中定義 Book/Genre 和 Book/Author 之間的關係，以及書本實例綱要（BookInstance Schema）中 Book/BookInstance 之間的關係。這種選擇有點武斷—我們同樣可以在其他綱要中擁有該字段。</p>\n</div>\n<p>\n  <img src=\"/en-US/docs/Learn/Server-side/Express_Nodejs/mongoose/library_website_-_mongoose_express.png\" alt=\"Mongoose Library Model  with correct cardinality\" width=\"737\" height=\"620\" loading=\"lazy\">\n</p>\n<div class=\"notecard note\" id=\"sect4\">\n  <p><strong>備註：</strong> 下一節提供了一個基本的入門知識，解釋如何定義和使用模型。在您閱讀它時，請想想我們將如何構建上圖中的每個模型。</p>\n</div>"}},{"type":"prose","value":{"id":"mongoose_入門","title":"Mongoose 入門","isH3":false,"content":"<p>本節概述如何將 Mongoose 連接到 MongoDB 數據庫，如何定義模型綱要和模型，以及如何進行基本查詢。</p>\n<div class=\"notecard note\" id=\"sect5\">\n  <p><strong>備註：</strong> 本入門受到 npm 上的<a href=\"https://www.npmjs.com/package/mongoose\" class=\"external\" rel=\" noopener\">Mongoose 快速入門</a>和<a href=\"http://mongoosejs.com/docs/guide.html\" class=\"external\" rel=\" noopener\">Mongoose 官方文檔</a>的“深度影響”。</p>\n</div>"}},{"type":"prose","value":{"id":"安裝_mongoose_和_mongodb","title":"安裝 Mongoose 和 MongoDB","isH3":true,"content":"<p>Mongoose 像任何其他依賴項一樣，安裝在您的項目（<strong>package.json</strong>）中—使用 NPM。要安裝它，請在項目文件夾中，使用以下命令：</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> mongoose\n</code></pre></div>\n<p>安裝 Mongoose 會添加所有依賴項，包括 MongoDB 數據庫驅動程序，但它不會安裝 MongoDB 。如果你想安裝一個 MongoDB 服務器，那麼你可以<a href=\"https://www.mongodb.com/download-center\" class=\"external\" rel=\" noopener\">從這裡下載</a>各種操作系統的安裝程序，並在本地安裝。您還可以使用基於雲端的 MongoDB 實例。</p>\n<div class=\"notecard note\" id=\"sect6\">\n  <p><strong>備註：</strong> 對於本教程，我們將使用基於 mLab 雲的數據庫，作為服務<a href=\"https://mlab.com/plans/pricing/\" class=\"external\" rel=\" noopener\">沙箱層</a>來提供數據庫。這適用於開發，也對於本教程很有意義，因為它使“安裝”與操作系統無關（數據庫即服務，也是您可能會用於生產環境數據庫的一種方法）。</p>\n</div>"}},{"type":"prose","value":{"id":"連接到_mongodb","title":"連接到 MongoDB","isH3":true,"content":"<p>Mongoose 需要連接到 MongoDB 數據庫。您可以<code>require()</code>並使用<code>mongoose.connect()</code>，以連接到本地託管的數據庫，如下所示。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">//Import the mongoose module</span>\n<span class=\"token keyword\">var</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Set up default mongoose connection</span>\n<span class=\"token keyword\">var</span> mongoDB <span class=\"token operator\">=</span> <span class=\"token string\">'mongodb://127.0.0.1/my_database'</span><span class=\"token punctuation\">;</span>\nmongoose<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mongoDB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Get Mongoose to use the global promise library</span>\nmongoose<span class=\"token punctuation\">.</span>Promise <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>Promise<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//Get the default connection</span>\n<span class=\"token keyword\">var</span> db <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Bind connection to error event (to get notification of connection errors)</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">,</span> <span class=\"token string\">'MongoDB connection error:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>您可以使用<code>mongoose.connection</code>獲取默認的<code>Connection</code>對象。一旦連接，在<code>Connection</code>實例上，將觸發打開事件。</p>\n<div class=\"notecard note\" id=\"sect7\">\n  <p><strong>備註：</strong> 如果需要創建其他連接，可以使用<code>mongoose.createConnection()</code>。這與<code>connect()</code>採用相同形式的數據庫 URI（包含主機，數據庫，端口，選項等），並返回<code>Connection</code>對象。</p>\n</div>"}},{"type":"prose","value":{"id":"定義並創建模型","title":"定義並創建模型","isH3":true,"content":"<p>模型使用<code>Schema</code>接口進行定義。Schema 允許您定義存儲在每個文檔中的字段，及其驗證要求和默認值。此外，您可以定義靜態和實例助手方法，以更輕鬆地處理數據類型，以及可以像其他任何字段一樣使用的虛擬屬性，但實際上並不存儲在數據庫中（我們稍後將討論）。</p>\n<p>然後，綱要 Schemas 被<code>mongoose.model()</code>方法“編譯”為模型。擁有模型後，您可以使用它來查找，創建，更新和刪除給定類型的對象。</p>\n<div class=\"notecard note\" id=\"sect8\">\n  <p><strong>備註：</strong> 每個模型都映射到 MongoDB 數據庫中的文檔集合。這些文檔將包含模型綱要<code>Schema</code>中定義的字段/綱要型態。</p>\n</div>\n<h4 id=\"定義綱要_schemas\">定義綱要 Schemas</h4>\n<p>下面的代碼片段，顯示了您可以如何定義一個簡單的綱要。首先<code>require()</code>mongoose，然後使用 Schema 構造函數，創建一個新的 Schema 實例，在構造函數的對象參數中，定義其中的各個字段。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">//Require Mongoose</span>\n<span class=\"token keyword\">var</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Define a schema</span>\n<span class=\"token keyword\">var</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> SomeModelSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">a_string</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">a_date</span><span class=\"token operator\">:</span> Date\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>在上面的例子中，我們只有兩個字段，一個字符串和一個日期。在接下來的部分中，我們將展示一些其他的字段類型，驗證和其他方法。</p>\n<h4 id=\"創建模型\">創建模型</h4>\n<p>使用<code>mongoose.model()</code>方法從綱要創建模型：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Define schema</span>\n<span class=\"token keyword\">var</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> SomeModelSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">a_string</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">a_date</span><span class=\"token operator\">:</span> Date\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Compile model from schema</span>\n<span class=\"token keyword\">var</span> SomeModel <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SomeModel'</span><span class=\"token punctuation\">,</span> SomeModelSchema <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>第一個參數，是將為模型創建的集合的單數名稱（Mongoose 將為上面的 SomeModel 模型，創建數據庫集合），第二個參數，是您要在創建模型時使用的綱要 Shema。</p>\n<div class=\"notecard note\" id=\"sect9\">\n  <p><strong>備註：</strong> 定義模型類後，可以使用它們來創建，更新或刪除記錄，並運行查詢，以獲取記錄的所有記錄，或特定子集。我們將在以下“使用模型”部分，向您展示如何執行上述操作，以及當創建視圖時，如何執行此操作。</p>\n</div>\n<h4 id=\"綱要型態（字段）\">綱要型態（字段）</h4>\n<p>綱要 schema 可以有任意數量的字段 — 每個字段代表存儲在 MongoDB 文檔中的字段。如下的示例綱要，顯示許多常見字段類型及其聲明方式。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> schema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">binary</span><span class=\"token operator\">:</span> Buffer<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">living</span><span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">updated</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span>now <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span> <span class=\"token number\">65</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">mixed</span><span class=\"token operator\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>Mixed<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">_someId</span><span class=\"token operator\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">array</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">ofString</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// You can also have an array of each of the other types too.</span>\n  <span class=\"token literal-property property\">nested</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">stuff</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lowercase</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">trim</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>大多數綱要型態<a href=\"http://mongoosejs.com/docs/schematypes.html\" class=\"external\" rel=\" noopener\">SchemaTypes</a>（“type：”之後或字段名稱之後的描述符）都是自解釋的。例外情況是：</p>\n<ul>\n  <li><code>ObjectId</code>:表示數據庫中模型的特定實例。例如，一本書可能會使用它來表示其作者對象。這實際上將包含指定對象的唯一 ID ( <code>_id</code>) 。我們可以使用<code>populate()</code>方法，在需要時提取相關訊息。</li>\n  <li><a href=\"http://mongoosejs.com/docs/schematypes.html#mixed\" class=\"external\" rel=\" noopener\">Mixed</a> :任意綱要型態。</li>\n  <li>[] :一個數組的項目。您可以在這些模型上執行 JavaScript 數組操作（push，pop，unshift 等）。上面的例子，顯示了一個沒有指定類型的對像數組，和一個 String 對像數組，但是你可以有任何類型的對像數組。</li>\n</ul>\n<p>該代碼還顯示了聲明一個字段的兩種方式：</p>\n<ul>\n  <li>字段名稱和類型作為鍵值對（即是，像上面的<code>name</code>, <code>binary</code> and <code>living</code>）。</li>\n  <li>字段名稱後跟一個定義類型<code>type</code>的對象，以及該字段的任何其他選項。選項包括如下內容：\n    <ul>\n      <li>默認值。</li>\n      <li>內置驗證器（例如最大/最小值）和自定義驗證功能。</li>\n      <li>該字段是否為必要</li>\n      <li>是否應將字符串<code>String</code>字段自動設置為小寫，大寫或修剪（例如)<code>{ type:String, lowercase: true, trim: true }</code></li>\n    </ul>\n  </li>\n</ul>\n<p>有關選項的更多訊息，請參閱<a href=\"http://mongoosejs.com/docs/schematypes.html\" class=\"external\" rel=\" noopener\">SchemaTypes</a>（Mongoose docs）。</p>\n<h4 id=\"驗證\">驗證</h4>\n<p>Mongoose 提供內置和自定義驗證器，以及同步和異步驗證器。它允許您在所有情況下，指定可接受的範圍或值，以及驗證失敗的錯誤消息。</p>\n<p>內置的驗證器包括：</p>\n<ul>\n  <li>所有<a href=\"http://mongoosejs.com/docs/schematypes.html\" class=\"external\" rel=\" noopener\">SchemaTypes</a>都具有內置的<a href=\"http://mongoosejs.com/docs/api.html#schematype_SchemaType-required\" class=\"external\" rel=\" noopener\">必需</a>驗證器。這用於指定，是否必須提供該字段才能保存文檔。</li>\n  <li><a href=\"http://mongoosejs.com/docs/api.html#schema-number-js\" class=\"external\" rel=\" noopener\">Numbers</a> 數字有最小<a href=\"http://mongoosejs.com/docs/api.html#schema_number_SchemaNumber-min\" class=\"external\" rel=\" noopener\">min</a>和最大<a href=\"http://mongoosejs.com/docs/api.html#schema_number_SchemaNumber-max\" class=\"external\" rel=\" noopener\">max</a>驗證器。</li>\n  <li><a href=\"http://mongoosejs.com/docs/api.html#schema-string-js\" class=\"external\" rel=\" noopener\">Strings</a>字符串有：\n    <ul>\n      <li><a href=\"http://mongoosejs.com/docs/api.html#schema_string_SchemaString-enum\" class=\"external\" rel=\" noopener\">enum</a>枚舉：指定該字段的允許值集合。</li>\n      <li><a href=\"http://mongoosejs.com/docs/api.html#schema_string_SchemaString-match\" class=\"external\" rel=\" noopener\">match</a> :指定字符串必須匹配的正則表達式。</li>\n      <li>字符串的最大長度<a href=\"http://mongoosejs.com/docs/api.html#schema_string_SchemaString-maxlength\" class=\"external\" rel=\" noopener\">maxlength</a>和最小長度<a href=\"http://mongoosejs.com/docs/api.html#schema_string_SchemaString-minlength\" class=\"external\" rel=\" noopener\">minlength</a></li>\n    </ul>\n  </li>\n</ul>\n<p>下面的示例（從 Mongoose 文檔稍微修改）顯示瞭如何指定一些驗證器類型和錯誤消息：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>    <span class=\"token keyword\">var</span> breakfastSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">eggs</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">min</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Too few eggs'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span>\n        <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Why no eggs?'</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">drink</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">enum</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Coffee'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tea'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Water'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>有關字段驗證的完整訊息，請參閱<a href=\"http://mongoosejs.com/docs/validation.html\" class=\"external\" rel=\" noopener\">驗證</a>（Mongoose docs）。</p>\n<h4 id=\"虛擬屬性\">虛擬屬性</h4>\n<p>虛擬屬性是您可以獲取和設置的文檔屬性，但不會持久保存到 MongoDB。getter 對格式化或組合字段非常有用，而 setter 可用於將單個值分解為多個值，以進行存儲。</p>\n<p>文檔中的示例，從名字和姓氏字段構造（並解構）一個全名虛擬屬性，這比每次在模板中使用全名更簡單，更清晰。</p>\n<div class=\"notecard note\" id=\"sect10\">\n  <p><strong>備註：</strong> 我們將使用庫中的虛擬屬性，來為每個使用路徑和記錄的<code>_id</code>值的模型記錄，定義唯一的 URL。</p>\n</div>\n<p>欲了解更多訊息，請參閱<a href=\"http://mongoosejs.com/docs/guide.html#virtuals\" class=\"external\" rel=\" noopener\">虛擬</a>（Mongoose 文檔）。</p>\n<h4 id=\"方法和查詢幫助\">方法和查詢幫助</h4>\n<p>綱要 schema 也可以有<a href=\"http://mongoosejs.com/docs/guide.html#methods\" class=\"external\" rel=\" noopener\">實例方法</a>，<a href=\"http://mongoosejs.com/docs/guide.html#statics\" class=\"external\" rel=\" noopener\">靜態方法</a>和<a href=\"http://mongoosejs.com/docs/guide.html#query-helpers\" class=\"external\" rel=\" noopener\">查詢助手</a>。實例和靜態方法很相似，但有明顯的區別，即實例方法與特定記錄相關聯，並且可以訪問當前對象。查詢助手允許您擴展 mongoose 的<a href=\"http://mongoosejs.com/docs/queries.html\" class=\"external\" rel=\" noopener\">鍊式查詢構建器 API</a>（例如，除了<code>find()</code>, <code>findOne()</code>和<code>findById()</code>方法外，還允許您添加一個“byName”查詢。</p>"}},{"type":"prose","value":{"id":"使用模型","title":"使用模型","isH3":true,"content":"<p>一旦創建了綱要，就可以使用它來創建模型。該模型代表數據庫中可以搜索的文檔集合，而模型的實例代表您可以保存和檢索的單個文檔。</p>\n<p>我們在下面簡要介紹一下。有關更多訊息，請參閱：<a href=\"http://mongoosejs.com/docs/models.html\" class=\"external\" rel=\" noopener\">模型</a>（Mongoose docs）。</p>\n<h4 id=\"創建和修改文檔\">創建和修改文檔</h4>\n<p>要創建記錄，您可以定義模型的實例，然後調用<code>save()</code>。下面的例子假設，SomeModel 是我們從綱要創建的模型（帶有單一字段“name” ）。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Create an instance of model SomeModel</span>\n<span class=\"token keyword\">var</span> awesome_instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SomeModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'awesome'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Save the new model instance, passing a callback</span>\nawesome_instance<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// saved!</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>創建記錄（以及更新，刪除和查詢）是異步操作— 您提供在操作完成時調用的回調。API 使用錯誤優先參數約定，因此回調的第一個參數將始終為錯誤值（或 null）。如果 API 返回一些結果，則將作為第二個參數提供。</p>\n<p>您還可以使用<code>create()</code>，同時定義模型實例，並保存模型實例。回調將為第一個參數返回錯誤，為第二個參數返回新創建的模型實例。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>SomeModel<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'also_awesome'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> awesome_instance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// saved!</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>每個模型都有一個關聯的連接（當您使用<code>mongoose.model()</code>時，這將成為默認連接）。您創建一個新連接並調用<code>.model()</code>，以在另一個數據庫上創建文檔。</p>\n<p>您可以使用點語法訪問此新記錄中的字段，並更改值。您必須調用<code>save()</code>或<code>update()</code>，將修改的值存回數據庫。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Access model field values using dot notation</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>awesome_instance<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//should log 'also_awesome'</span>\n\n<span class=\"token comment\">// Change record by modifying the fields, then calling save().</span>\nawesome_instance<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"New cool name\"</span><span class=\"token punctuation\">;</span>\nawesome_instance<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// saved!</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"尋找紀錄\">尋找紀錄</h4>\n<p>可以使用查詢方法搜索記錄，將查詢條件指定為 JSON 文檔。下面的代碼片段，顯示瞭如何在數據庫中，找到所有參加網球運動的運動員，只返回運動員姓名和年齡的字段。這裡我們只指定一個匹配的字段（運動 sport），但您可以添加更多條件，指定正則表達式標準，或完全刪除條件以返回所有運動員。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> Athlete <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Athlete'</span><span class=\"token punctuation\">,</span> yourSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// find all athletes who play tennis, selecting the 'name' and 'age' fields</span>\nAthlete<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'sport'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tennis'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name age'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> athletes</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 'athletes' contains the list of athletes that match the criteria.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>如果您指定回調，如上所示，查詢將立即執行。搜索完成後將調用回調。</p>\n<div class=\"notecard note\" id=\"sect11\">\n  <p><strong>備註：</strong> Mongoose 中的所有回調，都使用此回調模式<code>callback(error, result)</code>。如果執行查詢時發生錯誤，錯誤參數<code>error</code>將包含錯誤文檔，並且結果<code>result</code>將為 null。如果查詢成功，則<code>error</code>參數將為 null，並且結果<code>result</code> 將被填充到查詢結果。</p>\n</div>\n<p>如果您未指定回調，則 API 將返回<a href=\"http://mongoosejs.com/docs/api.html#query-js\" class=\"external\" rel=\" noopener\">Query</a>類型的變量。您可以使用此查詢對象來構建查詢，然後稍後使用<code>exec()</code>方法執行（使用回調）。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// find all athletes that play tennis</span>\n<span class=\"token keyword\">var</span> query <span class=\"token operator\">=</span> Athlete<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'sport'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tennis'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// selecting the 'name' and 'age' fields</span>\nquery<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// limit our results to 5 items</span>\nquery<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// sort by age</span>\nquery<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// execute the query at a later time</span>\nquery<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> athletes</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// athletes contains an ordered list of 5 athletes who play Tennis</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>上面我們在<code>find()</code>方法中，定義了查詢條件。我們也可以使用<code>where()</code>函數來執行此操作，並且我們可以使用點運算符（ . ）將查詢的所有部分鏈接在一起，而不是分別添加它們。</p>\n<p>下面的代碼片段，與我們上面的查詢相同，並有年齡的附加條件。</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">Athlete.\n  find().\n  where('sport').equals('Tennis').\n  where('age').gt(17).lt(50).  //Additional where query\n  limit(5).\n  sort({ age: -1 }).\n  select('name age').\n  exec(callback); // where callback is the name of our callback function.\n</pre></div>\n<p><a href=\"http://mongoosejs.com/docs/api.html#query_Query-find\" class=\"external\" rel=\" noopener\">find()</a> 方法獲取所有匹配的記錄，但通常你只想獲得一個匹配。以下方法可以查詢單個記錄：</p>\n<ul>\n  <li><a href=\"http://mongoosejs.com/docs/api.html#model_Model.findById\" class=\"external\" rel=\" noopener\"><code>findById()</code></a>:用指定的<code>id</code>查找文檔（每個文檔都有一個唯一的<code>id</code>）。</li>\n  <li><a href=\"http://mongoosejs.com/docs/api.html#query_Query-findOne\" class=\"external\" rel=\" noopener\"><code>findOne()</code></a>: 查找與指定條件匹配的單個文檔。</li>\n  <li><a href=\"http://mongoosejs.com/docs/api.html#model_Model.findByIdAndRemove\" class=\"external\" rel=\" noopener\"><code>findByIdAndRemove()</code></a>, <a href=\"http://mongoosejs.com/docs/api.html#model_Model.findByIdAndUpdate\" class=\"external\" rel=\" noopener\"><code>findByIdAndUpdate()</code></a>, <a href=\"http://mongoosejs.com/docs/api.html#query_Query-findOneAndRemove\" class=\"external\" rel=\" noopener\"><code>findOneAndRemove()</code></a>, <a href=\"http://mongoosejs.com/docs/api.html#query_Query-findOneAndUpdate\" class=\"external\" rel=\" noopener\"><code>findOneAndUpdate()</code></a>:通過<code>id</code> 或條件查找單個文檔，並更新或刪除它。這些是用於更新和刪除記錄的有用便利功能。</li>\n</ul>\n<div class=\"notecard note\" id=\"sect12\">\n  <p><strong>備註：</strong> 還有一個<a href=\"http://mongoosejs.com/docs/api.html#model_Model.count\" class=\"external\" rel=\" noopener\"><code>count()</code></a>方法，您可以使用它來獲取與條件匹配的項目數。如果您想要在不實際提取記錄的情況下執行計數，這非常有用。</p>\n</div>\n<p>查詢可以做更多的事情。有關更多訊息，請參閱：<a href=\"http://mongoosejs.com/docs/queries.html\" class=\"external\" rel=\" noopener\">查詢</a>（Mongoose 文檔）。</p>\n<h4 id=\"運用相關文檔—_population_方法\">運用相關文檔— population 方法</h4>\n<p>您可以使用<code>ObjectId</code>綱要字段，從一個文檔/模型實例，創建一對一引用，或者使用<code>ObjectIds</code>數組，從一個文檔創建一對多的引用。該字段存儲相關模型的 ID。如果需要關聯文檔的實際內容，可以在查詢中使用<a href=\"http://mongoosejs.com/docs/api.html#query_Query-populate\" class=\"external\" rel=\" noopener\"><code>populate()</code></a>方法，將 id 替換為實際數據。</p>\n<p>例如，以下綱要定義作者和故事。每個作者可以有多個故事，我們將其表示為一個<code>ObjectId</code>數組。每個故事可以有一個作者。綱要從“ref”（以粗體突出顯示）得知，可以分配給該字段的模型。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">,</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema\n\n<span class=\"token keyword\">var</span> authorSchema <span class=\"token operator\">=</span> <span class=\"token function\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span>    <span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">stories</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token string\">'Story'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> storySchema <span class=\"token operator\">=</span> <span class=\"token function\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">author</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token string\">'Author'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">title</span>    <span class=\"token operator\">:</span> String\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> Story  <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Story'</span><span class=\"token punctuation\">,</span> storySchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> Author <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Author'</span><span class=\"token punctuation\">,</span> authorSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>我們可以通過分配<code>_id</code>值，來保存對相關文檔的引用。下面我們創建一個作者，然後創建一個故事，並將作者 ID 分配給我們的故事作者字段。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> bob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Author</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bob Smith'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbob<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//Bob now exists, so lets create a story</span>\n  <span class=\"token keyword\">var</span> story <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Story</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bob goes sledding\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> bob<span class=\"token punctuation\">.</span>_id    <span class=\"token comment\">// assign the _id from the our author Bob. This ID is created by default!</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  story<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Bob now has his story</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>我們的故事文檔，現在有作者文檔 ID 引用的作者。為了在我們的故事結果中，獲取作者訊息，我們使用<code>populate()</code>，如下所示。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Story\n<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bob goes sledding'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'author'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//This populates the author id with actual author information!</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> story</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The author is %s'</span><span class=\"token punctuation\">,</span> story<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// prints \"The author is Bob Smith\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect13\">\n  <p><strong>備註：</strong> 敏銳的讀者會注意到，我們在故事中添加了作者，但我們沒有做任何事情，來將我們的故事添加到作者的故事<code>stories</code>數組中。那麼我們怎樣才能得到特定作者的所有故事？</p>\n  <p>一種方法，是將作者添加到故事數組中，但這會導致我們需要在兩個地方，維護與作者和故事有關的訊息。更好的方法是獲取作者的<code>_id</code>，然後使用<code>find()</code>，在所有故事的作者字段中搜索此內容。</p>\n  <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Story\n<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">author</span> <span class=\"token operator\">:</span> bob<span class=\"token punctuation\">.</span>_id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> stories</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// returns all stories that have Bob's id as their author.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</div>\n<p>這幾乎是您在本教程中，使用相關項目時，需要了解的所有內容。有關更多詳細訊息，請參閱<a href=\"http://mongoosejs.com/docs/populate.html\" class=\"external\" rel=\" noopener\">Population</a>（Mongoose docs）。</p>"}},{"type":"prose","value":{"id":"一個檔案對應一個綱要模型","title":"一個檔案對應一個綱要/模型","isH3":true,"content":"<p>雖然您可以使用任何喜歡的文件結構創建綱要和模型，但我們強烈建議在每個模型模塊（文件）中，定義每個模型綱要，導出方法以創建模型。如下所示：</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// File: ./models/somemodel.js</span>\n\n<span class=\"token comment\">//Require Mongoose</span>\n<span class=\"token keyword\">var</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Define a schema</span>\n<span class=\"token keyword\">var</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> SomeModelSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">a_string</span>          <span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">a_date</span>            <span class=\"token operator\">:</span> Date<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Export function to create \"SomeModel\" model class</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SomeModel'</span><span class=\"token punctuation\">,</span> SomeModelSchema <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>然後，您可以在其他文件中，立即要求並使用該模型。下面我們展示如何使用它，來獲取模型的所有實例。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">//Create a SomeModel model just by requiring the module</span>\n<span class=\"token keyword\">var</span> SomeModel <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/somemodel'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Use the SomeModel object (model) to find all SomeModel records</span>\nSomeModel<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>callback_function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"架設_mongodb_數據庫","title":"架設 MongoDB 數據庫","isH3":false,"content":"<p>現在我們了解了 Mongoose 能做什麼，以及我們想如何設計我們的模型，現在該開始在 LocalLibrary 網站上工作了。我們想要做的第一件事，就是設置一個 MongoDb 數據庫，我們可以使用它來儲存我們的圖書館數據。</p>\n<p>本教程，我們將使用<a href=\"https://mlab.com/welcome/\" class=\"external\" rel=\" noopener\">mLab</a>免費的雲託管的“ <a href=\"https://mlab.com/plans/pricing/\" class=\"external\" rel=\" noopener\">沙盒</a> ”數據庫。這個數據庫層不適合生產環境的網站，因為它沒有冗餘設計，但它對於開發和原型設計來說非常有用。我們在這裡使用它，是因為它免費且易於設置，並且因為作為數據庫服務供應商來說，mLab 是流行的數據庫選擇之一，您可能會合理選擇您的生產環境數據庫（撰寫本文時，其他流行的選擇包括<a href=\"https://www.compose.com/\" class=\"external\" rel=\" noopener\">Compose</a>、<a href=\"https://scalegrid.io/pricing.html\" class=\"external\" rel=\" noopener\">ScaleGrid</a>和<a href=\"https://www.mongodb.com/cloud/atlas\" class=\"external\" rel=\" noopener\">MongoDB Atlas</a>）。</p>\n<div class=\"notecard note\" id=\"sect14\">\n  <p><strong>備註：</strong> 如果您願意，可以下載並安裝<a href=\"https://www.mongodb.com/download-center\" class=\"external\" rel=\" noopener\">與系統相對應的二進製文件</a>，在本地設置 MongoDb 數據庫。除了您在連接時指定的數據庫 URL 之外，本文中的其餘指令將很類似。</p>\n</div>\n<p>您首先需要<a href=\"https://mlab.com/signup/\" class=\"external\" rel=\" noopener\">使用 mLab 創建一個賬戶</a>（這是免費的，只需要輸入基本聯繫訊息，並確認其服務條款）。</p>\n<p>登錄後，您將進入<a href=\"https://mlab.com/home\" class=\"external\" rel=\" noopener\">mLab 主</a>畫面:</p>\n<ol>\n  <li>單擊<em>MongoDB Deployments</em>部分中的<strong>Create New。</strong>\n    <img src=\"https://mdn.mozillademos.org/files/14446/mLabCreateNewDeployment.png\" alt=\"\" loading=\"lazy\">\n  </li>\n  <li>\n    這將打開“雲提供商”Cloud Provider 選擇畫面。\n    \n    <img src=\"https://mdn.mozillademos.org/files/15661/mLab_new_deployment_form_v2.png\" alt=\"MLab - screen for new deployment\" loading=\"lazy\">\n    <ul>\n      <li>從“計劃類型”Plan Type 部分中，選擇“SANDBOX（免費）”計劃。</li>\n      <li>從“雲提供商” <em>Cloud Provider</em>部分，選擇任意提供商。不同的提供商，提供不同的地區（顯示在選定的計劃類型下面）。</li>\n      <li>單擊“繼續” <strong>Continue</strong>按鈕。</li>\n    </ul>\n  </li>\n  <li>\n    這將打開“選擇區域” <em>Select Region</em> 畫面。\n    \n    <img src=\"https://mdn.mozillademos.org/files/15662/mLab_new_deployment_select_region_v2.png\" alt=\"Select new region screen\" loading=\"lazy\">\n    <ul>\n      <li>選擇離您最近的地區，然後選擇繼續<strong>Continue</strong> .</li>\n    </ul>\n  </li>\n  <li>\n    這將打開 Final Details 畫面。\n    \n    <img src=\"https://mdn.mozillademos.org/files/15663/mLab_new_deployment_final_details.png\" alt=\"New deployment database name\" loading=\"lazy\">\n    <ul>\n      <li>輸入新數據庫的名稱<code>local_library</code>，然後選擇繼續<strong>Continue</strong>。</li>\n    </ul>\n  </li>\n  <li>\n    這將打開訂單確認畫面。\n    \n    <img src=\"https://mdn.mozillademos.org/files/15664/mLab_new_deployment_order_confirmation.png\" alt=\"Order confirmation screen\" loading=\"lazy\">\n    <ul>\n      <li>單擊“提交訂單” <strong>Submit Order</strong>以創建數據庫。</li>\n    </ul>\n  </li>\n  <li>\n    您將返回到主畫面。單擊剛剛創建的新數據庫，以打開其詳細訊息畫面。正如你所看到的，數據庫沒有集合（數據）。\n    \n    <img src=\"https://mdn.mozillademos.org/files/15665/mLab_new_deployment_database_details.png\" alt=\"mLab - Database details screen\" loading=\"lazy\">\n    您需要用來訪問數據庫的 URL，顯示在上面的表單中（如上圖所示）。為了使用它，您需要創建一個可以在 URL 中指定的數據庫用戶。\n  </li>\n  <li>單擊用戶<strong>Users</strong>選項卡，並選擇添加數據庫用戶按鈕<strong>Add database user</strong>。</li>\n  <li>\n    輸入用戶名和密碼（兩次），然後按創建<strong>Create</strong>。不要選擇只讀<em>read-only</em>。\n    \n    <img src=\"https://mdn.mozillademos.org/files/14454/mLab_database_users.png\" alt=\"\" loading=\"lazy\">\n  </li>\n</ol>\n<p>您現在已經創建了數據庫，並且有一個可以用來訪問它的 URL（帶有用戶名和密碼）。這看起來像是這樣的：<code>mongodb://your_user_namer:your_password@ds119748.mlab.com:19748/local_library</code>.</p>"}},{"type":"prose","value":{"id":"安裝_mongoose","title":"安裝 Mongoose","isH3":false,"content":"<p>打開命令提示符，並到您創建<a href=\"/zh-CN/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">本地圖書館骨架網站</a>的目錄。輸入以下命令，安裝 Mongoose（及其依賴項），並將其添加到您的<strong>package.json</strong>文件中，除非您在閱讀上述<strong>Mongoose 入門</strong>時，已經這樣做了。</p>\n<div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> mongoose\n</code></pre></div>"}},{"type":"prose","value":{"id":"連接到_mongodb_2","title":"連接到 MongoDB","isH3":false,"content":"<p>打開**/app.js**（位於項目的根目錄），並在宣告 Express 應用程序對象的位置（在<code>var app = express();</code>之後）複製以下文本。將數據庫 url 字符串（'insert_your_database_url_here'）替換為表示您自己的數據庫的位置 URL（即是使用<strong>來自上面 mLab</strong>的訊息）。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">//Set up mongoose connection</span>\n<span class=\"token keyword\">var</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> mongoDB <span class=\"token operator\">=</span> <span class=\"token string\">'insert_your_database_url_here'</span><span class=\"token punctuation\">;</span>\nmongoose<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mongoDB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmongoose<span class=\"token punctuation\">.</span>Promise <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>Promise<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> db <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">;</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">,</span> <span class=\"token string\">'MongoDB connection error:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>正如上面的<strong>Mongoose 入門</strong>中所討論的，此代碼創建了與數據庫的默認連接，並綁定到錯誤事件（以便將錯誤打印到控制台）。</p>"}},{"type":"prose","value":{"id":"定義本地圖書館綱要","title":"定義本地圖書館綱要","isH3":false,"content":"<p>如上所述，我們將為每個模型定義一個單獨的模塊。首先在項目根目錄（<strong>/models</strong>）中，為我們的模型創建一個文件夾，然後為每個模型創建單獨的文件：</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">/express-locallibrary-tutorial  //the project root\n  /models\n    author.js\n    book.js\n    bookinstance.js\n    genre.js\n</pre></div>"}},{"type":"prose","value":{"id":"作者模型","title":"作者模型","isH3":true,"content":"<p>複製下面顯示的<code>Author</code>作者綱要代碼，並將其粘貼到**./models/author.js**文件中。該綱要定義了一個作者，具有<code>String</code>SchemaTypes 的第一個名稱和家族名稱，這是必需的，最多有 100 個字符，<code>Date</code>字段為出生和死亡日期。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> AuthorSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">first_name</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">family_name</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">max</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">date_of_birth</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">date_of_death</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Virtual for author's full name</span>\nAuthorSchema\n<span class=\"token punctuation\">.</span><span class=\"token function\">virtual</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>family_name <span class=\"token operator\">+</span> <span class=\"token string\">', '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>first_name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Virtual for author's URL</span>\nAuthorSchema\n<span class=\"token punctuation\">.</span><span class=\"token function\">virtual</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'/catalog/author/'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Export model</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Author'</span><span class=\"token punctuation\">,</span> AuthorSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>我們還為 AuthorSchema，聲明了一個名為“url”的虛擬屬性，它返回獲取模型的特定實例所需的絕對 URL — 每當我們需要獲取指向特定作者的鏈接時，我們將在模板中使用該屬性。</p>\n<div class=\"notecard note\" id=\"sect15\">\n  <p><strong>備註：</strong> 在綱要中聲明我們的 URL 是虛擬的，這是一個好主意，因為一個項目的 URL 只需要在一個地方更改。此時，使用此 URL 的鏈接將不起作用，因為我們還沒有任何路由，可以處理個別模型實例的代碼。我們將在後面的文章中介紹這些內容！</p>\n</div>\n<p>在模塊的最後，我們導出了模型。</p>"}},{"type":"prose","value":{"id":"書本模型","title":"書本模型","isH3":true,"content":"<p>複製下面顯示的<code>Book</code>綱要代碼，並將其粘貼到**./models/book.js**文件中。其中大部分與作者模型相似—我們已經聲明了一個具有多個字符串字段的綱要，以及一個虛擬屬性，用於獲取特定書籍記錄的 URL，並且我們已經導出了模型。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> BookSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token string\">'Author'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">summary</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">isbn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">genre</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token string\">'Genre'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Virtual for book's URL</span>\nBookSchema\n<span class=\"token punctuation\">.</span><span class=\"token function\">virtual</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'/catalog/book/'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Export model</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Book'</span><span class=\"token punctuation\">,</span> BookSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>這裡的主要區別，是我們已經創建了兩個對其他模型的引用：</p>\n<ul>\n  <li>作者是對單個<code>Author</code>作者模型對象的引用，並且是必要的。</li>\n  <li>種類是對<code>Genre</code>種類模型對像數組的引用。我們還沒有宣告這個對象！</li>\n</ul>"}},{"type":"prose","value":{"id":"書本實例模型","title":"書本實例模型","isH3":true,"content":"<p>最後，複製下面顯示的<code>BookInstance</code>綱要代碼，並將其粘貼到**./models/bookinstance.js**文件中。<code>BookInstance</code>表示某人可能藉閱的書籍的特定副本，並包含有關該副本是否可用，或預期返回日期的訊息，“印記”或版本詳細訊息。</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> BookInstanceSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">book</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ref</span><span class=\"token operator\">:</span> <span class=\"token string\">'Book'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//reference to the associated book</span>\n    <span class=\"token literal-property property\">imprint</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">status</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">enum</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Available'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Maintenance'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Loaned'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Reserved'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">'Maintenance'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">due_back</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> Date<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Virtual for bookinstance's URL</span>\nBookInstanceSchema\n<span class=\"token punctuation\">.</span><span class=\"token function\">virtual</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'/catalog/bookinstance/'</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Export model</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'BookInstance'</span><span class=\"token punctuation\">,</span> BookInstanceSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>我們在這裡展示的新東西，是字段選項：</p>\n<ul>\n  <li>枚舉<code>enum</code>:這允許我們設置字符串的允許值。在這種情況下，我們用它來指定我們書籍的可用性狀態（使用枚舉，意味著我們可以防止錯誤拼寫和任意值，成為我們的狀態）</li>\n  <li>默認值<code>default</code>:我們使用默認值，將新創 ​​ 建的書本實例的默認狀態，設置為維護，並將默認的<code>due_back</code>日期，設置為現在<code>now</code>（請注意在設置日期時，如何調用 Date 函數！）</li>\n</ul>\n<p>其他所有內容，大夥應該在前面教程裡邊已經熟悉了。</p>"}},{"type":"prose","value":{"id":"種類模型-自我挑戰!","title":"種類模型-自我挑戰!","isH3":true,"content":"<p>打開你的**./models/genre.js**文件，並創建一個存儲類型的綱要（書本的類別，例如它是小說還是非小說，浪漫史或軍事歷史等）。</p>\n<p>該定義將與其他模型非常相似：</p>\n<ul>\n  <li>該模型應該有一個名為<code>name</code>的<code>String</code>SchemaType ，來描述種類。</li>\n  <li>這個<code>name</code>字段應該是必要的，並且有 3 到 ​​100 個字符。</li>\n  <li>為類型的 URL 聲明虛擬，名為<code>url</code>。</li>\n  <li>導出模型。</li>\n</ul>"}},{"type":"prose","value":{"id":"測試—創建一些項目","title":"測試—創建一些項目","isH3":false,"content":"<p>就是這樣。我們現在已經為該網站建立了所有模型！</p>\n<p>為了測試這些模型（並創建一些示例書籍，和其他項目以便於我們在後面文章使用），現在我們將運行一個獨立的腳本來創建每種類型的項目：</p>\n<ol>\n  <li>在 express-locallibrary-tutorial 目錄下（與<code>package.json</code>處於同一級別），下載（或以其他方式創建）文件<a href=\"https://raw.githubusercontent.com/hamishwillee/express-locallibrary-tutorial/master/populatedb.js\" class=\"external\" rel=\" noopener\">populatedb.js</a>。\n    <div class=\"notecard note\" id=\"sect16\">\n      <p><strong>備註：</strong> 您不需要知道<a href=\"https://raw.githubusercontent.com/hamishwillee/express-locallibrary-tutorial/master/populatedb.js\" class=\"external\" rel=\" noopener\">populatedb.js</a>的工作原理;它只是將示例數據添加到數據庫中。</p>\n    </div>\n  </li>\n  <li>在項目根目錄中，輸入以下命令，以安裝腳本所需的異步模塊（我們將在後面的教程中討論這一點）\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">npm</span> <span class=\"token function\">install</span> async\n</code></pre></div>\n  </li>\n  <li>在命令提示符下，使用 node 運行此腳本，傳遞 MongoDB 數據庫的 URL（與之前在<code>app.js</code>中替換 insert_your_database_url_here 佔位符的那個相同）：\n    <div class=\"code-example\"><pre class=\"brush: bash notranslate\"><code><span class=\"token function\">node</span> populatedb <span class=\"token operator\">&lt;</span>your mongodb url<span class=\"token operator\">&gt;</span>​​​​\n</code></pre></div>\n  </li>\n  <li>該腳本應一路運行至完成，並在終端中創建它們時顯示各項目。</li>\n</ol>\n<div class=\"notecard note\" id=\"sect17\">\n  <p><strong>備註：</strong> 至<a href=\"https://mlab.com/home\" class=\"external\" rel=\" noopener\">mLab</a>上的數據庫。您現在應該可以深入到書本籍，作者，種類和書本實例的各個集合中，並查看單個文檔。</p>\n</div>"}},{"type":"prose","value":{"id":"總結","title":"總結","isH3":false,"content":"<p>本文中我們學到了一點數據庫和 Node/Express 的 ORMs，更多的是關於如何定義 Mongoose 綱要與模型。然後我們使用這些知識，為本地圖書館網站設計並實作出書本<code>Book</code>,書本實例<code>BookInstance</code>，作者<code>Author</code>和種類<code>Genre</code>模型。</p>\n<p>最後，我們創建一些實例，以測試模型(使用獨立運作的命令稿)。下一篇文章，我們將關注於如何創建一些網頁，以呈現這些物件。</p>"}},{"type":"prose","value":{"id":"參閱","title":"參閱","isH3":false,"content":"<ul>\n  <li><a href=\"https://expressjs.com/en/guide/database-integration.html\" class=\"external\" rel=\" noopener\">Database integration</a> (Express docs)</li>\n  <li><a href=\"http://mongoosejs.com/\" class=\"external\" rel=\" noopener\">Mongoose website</a> (Mongoose docs)</li>\n  <li><a href=\"http://mongoosejs.com/docs/guide.html\" class=\"external\" rel=\" noopener\">Mongoose Guide</a> (Mongoose docs)</li>\n  <li><a href=\"http://mongoosejs.com/docs/validation.html\" class=\"external\" rel=\" noopener\">Validation</a> (Mongoose docs)</li>\n  <li><a href=\"http://mongoosejs.com/docs/schematypes.html\" class=\"external\" rel=\" noopener\">Schema Types</a> (Mongoose docs)</li>\n  <li><a href=\"http://mongoosejs.com/docs/models.html\" class=\"external\" rel=\" noopener\">Models</a> (Mongoose docs)</li>\n  <li><a href=\"http://mongoosejs.com/docs/queries.html\" class=\"external\" rel=\" noopener\">Queries</a> (Mongoose docs)</li>\n  <li><a href=\"http://mongoosejs.com/docs/populate.html\" class=\"external\" rel=\" noopener\">Population</a> (Mongoose docs)</li>\n</ul><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/skeleton_website\"> 前頁 </a></li>\n    <li><a class=\"button minimal\" href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs\"> Overview: Express Nodejs</a></li>\n    <li><a class=\"button minimal\" href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/routes\"> 次頁  </a></li>\n</ul>"}},{"type":"prose","value":{"id":"本教程連結","title":"本教程連結","isH3":false,"content":"<ul>\n  <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/Introduction\">Express/Node introduction</a></li>\n  <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/development_environment\">Setting up a Node (Express) development environment</a></li>\n  <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website\">Express Tutorial: The Local Library website</a></li>\n  <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">Express Tutorial Part 2: Creating a skeleton website</a></li>\n  <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/mongoose\" aria-current=\"page\">Express Tutorial Part 3: Using a Database (with Mongoose)</a></li>\n  <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/routes\">Express Tutorial Part 4: Routes and controllers</a></li>\n  <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express Tutorial Part 5: Displaying library data</a></li>\n  <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/forms\">Express Tutorial Part 6: Working with forms</a></li>\n  <li><a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/deployment\">Express Tutorial Part 7: Deploying to production</a></li>\n</ul>"}}],"toc":[{"text":"概覽","id":"概覽"},{"text":"設計本地圖書館的模型","id":"設計本地圖書館的模型"},{"text":"Mongoose 入門","id":"mongoose_入門"},{"text":"架設 MongoDB 數據庫","id":"架設_mongodb_數據庫"},{"text":"安裝 Mongoose","id":"安裝_mongoose"},{"text":"連接到 MongoDB","id":"連接到_mongodb_2"},{"text":"定義本地圖書館綱要","id":"定義本地圖書館綱要"},{"text":"測試—創建一些項目","id":"測試—創建一些項目"},{"text":"總結","id":"總結"},{"text":"參閱","id":"參閱"},{"text":"本教程連結","id":"本教程連結"}],"summary":"本文簡短介紹數據庫，以及如何搭配 Node / Express 應用，使用數據庫。接下來會演示我們如何使用 Mongoose，為本地圖書館提供數據庫存取。本文說明物件要求與模型如何宣告，主要的欄位型態，以及基本驗證。本文也簡短演示一些存取模型數據的主要方法。","popularity":0.0008,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Express Tutorial Part 3: Using a Database (with Mongoose)","locale":"en-US","native":"English (US)"},{"title":"Express チュートリアル Part 3: データベースの使用 (Mongoose を使用)","locale":"ja","native":"日本語"},{"title":"Express Tutorial Part 3: Using a Database (with Mongoose)","locale":"ko","native":"한국어"},{"title":"Tutorial Express Parte 3: Usando um banco de dados (com Mongoose)","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Учебник Express часть 3: Использование базы данных (с помощью Mongoose)","locale":"ru","native":"Русский"},{"title":"Express 教程 3：使用数据库  (Mongoose)","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"zh-tw/learn/server-side/express_nodejs/mongoose","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-tw/learn/server-side/express_nodejs/mongoose/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-TW/docs/Learn","title":"學習該如何開發 Web"},{"uri":"/zh-TW/docs/Learn/Server-side","title":"伺服端網站程式設計"},{"uri":"/zh-TW/docs/Learn/Server-side/Express_Nodejs","title":"Express web framework (Node.js/JavaScript)"},{"uri":"/zh-TW/docs/Learn/Server-side/Express_Nodejs/mongoose","title":"Express 教學 3: 使用資料庫 ( Mongoose)"}],"pageTitle":"Express 教學 3: 使用資料庫 ( Mongoose) - 學習該如何開發 Web | MDN","noIndexing":false}}