{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"模板入門","mdn_url":"/zh-TW/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Template_primer","locale":"zh-TW","native":"正體中文 (繁體)","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>模板是一個文字檔，定義了一個輸出檔的<em>結構</em>或者排版，使用定位符號表示，當模板被繪製時，資料將插入到何處（在<em>Express</em>，模板被稱為<em>視圖</em>）。</p>"}},{"type":"prose","value":{"id":"express_模板選擇","title":"Express 模板選擇","isH3":false,"content":"<p>Express 可以與許多不同的<a href=\"https://expressjs.com/zh-tw/guide/using-template-engines.html\" class=\"external\" rel=\" noopener\">模板渲染引擎</a>一起使用。在本教程中，我們使用 <a href=\"https://pugjs.org/api/getting-started.html\" class=\"external\" rel=\" noopener\">Pug</a>（以前稱為 <em>Jade</em>）作為模板。這是最流行的 Node 模板語言，並且官方將自身描述為 “用於編寫 HTML，語法乾淨且空格敏感，受 <a href=\"http://haml.info/\" class=\"external\" rel=\" noopener\">Haml</a> 影響很大”。</p>\n<p>不同的模板語言使用不同的方法，來定義佈局和標記數據的佔位符 — 一些使用 HTML 來定義佈局，而另一些則使用可以編譯為 HTML 的不同標記格式。 Pug 是第二種類型；它使用 HTML 的<em>表示形式</em>，其中任何行中的第一個單詞，通常表示 HTML 元素，後續行中的縮進，用於表示嵌套在這些元素中的任何內容。結果是一個頁面定義直接轉換為 HTML，但可以說更簡潔，更容易閱讀。</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>備註：</strong> The downside of using <em>Pug</em> is that it is sensitive to indentation and whitespace (if you add an extra space in the wrong place you may get an unhelpful error code). However once you have your templates in place, they are very easy to read and maintain.</p>\n</div>"}},{"type":"prose","value":{"id":"template_configuration","title":"Template configuration","isH3":false,"content":"<p>The <em>LocalLibrary</em> was configured to use <a href=\"https://pugjs.org/api/getting-started.html\" class=\"external\" rel=\" noopener\">Pug</a> when we <a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">created the skeleton website</a>. You should see the pug module included as a dependency in the website's <strong>package.json</strong> file, and the following configuration settings in the <strong>app.js</strong> file. The settings tell us that we're using pug as the view engine, and that <em>Express</em> should search for templates in the <strong>/views</strong> subdirectory.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// View engine setup.</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'views'</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'views'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'view engine'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pug'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>If you look in the views directory you will see the .pug files for the project's default views. These include the view for the home page (<strong>index.pug</strong>) and base template (<strong>layout.pug</strong>) that we will need to replace with our own content.</p>\n<div class=\"code-example\"><pre class=\"brush: plain notranslate\">/express-locallibrary-tutorial  //the project root\n  /views\n    error.pug\n    index.pug\n    layout.pug\n</pre></div>"}},{"type":"prose","value":{"id":"template_syntax","title":"Template syntax","isH3":false,"content":"<p>The example template file below shows off many of Pug's most useful features.</p>\n<p>The first thing to notice is that the file maps the structure of a typical HTML file, with the first word in (almost) every line being an HTML element, and indentation being used to indicate nested elements. So for example, the <code>body</code> element is inside an <code>html</code> element, and paragraph elements (<code>p</code>) are within the <code>body</code> element, etc. Non-nested elements (e.g. individual paragraphs) are on separate lines.</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>doctype html\nhtml(lang=\"en\")\n  head\n    title= title\n    script(type='text/javascript').\n  body\n    h1= title\n\n    p This is a line with #[em some emphasis] and #[strong strong text] markup.\n    p This line has un-escaped data: !{'<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">&gt;</span></span> is emphasised<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">&gt;</span></span>'} and escaped data: #{'<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">&gt;</span></span> is not emphasised<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">&gt;</span></span>'}.\n      | This line follows on.\n    p= 'Evaluated and <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">&gt;</span></span>escaped expression<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">&gt;</span></span>:' + title\n\n    <span class=\"token comment\">&lt;!-- You can add HTML comments directly --&gt;</span>\n    // You can add single line JavaScript comments and they are generated to HTML comments\n    //- Introducing a single line JavaScript comment with \"//-\" ensures the comment isn't rendered to HTML\n\n    p A line with a link\n      a(href='/catalog/authors') Some link text\n      |  and some extra text.\n\n    #container.col\n      if title\n        p A variable named \"title\" exists.\n      else\n        p A variable named \"title\" does not exist.\n      p.\n        Pug is a terse and simple template language with a\n        strong focus on performance and powerful features.\n\n    h2 Generate a list\n\n    ul\n      each val in [1, 2, 3, 4, 5]\n        li= val\n</code></pre></div>\n<p>Element attributes are defined in parentheses after their associated element. Inside the parentheses, the attributes are defined in comma- or whitespace- separated lists of the pairs of attribute names and attribute values, for example:</p>\n<ul>\n  <li><code>script(type='text/javascript')</code>, <code>link(rel='stylesheet', href='/stylesheets/style.css')</code></li>\n  <li><code>meta(name='viewport' content='width=device-width initial-scale=1')</code></li>\n</ul>\n<p>The values of all attributes are <em>escaped</em> (e.g. characters like \"<code>&gt;</code>\" are converted to their HTML code equivalents like \"<code>&amp;gt;\"</code>) to prevent injection of JavaScript/cross-site scripting attacks.</p>\n<p>If a tag is followed by the equals sign, the following text is treated as a JavaScript <em>expression</em>. So for example, in the first line below, the content of the <code>h1</code> tag will be <em>variable</em> <code>title</code> (either defined in the file or passed into the template from Express). In the second line the paragraph content is a text string concatented with the <code>title</code> variable. In both cases the default behaviour is to <em>escape</em> the line.</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>h1= title\np= 'Evaluated and <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">&gt;</span></span>escaped expression<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">&gt;</span></span>:' + title\n</code></pre></div>\n<p>If there is no equals symbol after the tag then the content is treated as plain text. Within the plain text you can insert escaped and unescaped data using the <code>#{}</code> and <code>!{}</code> syntax, as shown below. You can also add raw HTML within the plain text.</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>p This is a line with #[em some emphasis] and #[strong strong text] markup.\np This line has an un-escaped string: !{'<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">&gt;</span></span> is emphasised<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">&gt;</span></span>'}, an escaped string: #{'<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">&gt;</span></span> is not emphasised<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">&gt;</span></span>'}, and escaped variables: #{title}.\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>備註：</strong> You will almost always want to escape data from users (via the <strong><code>#{}</code></strong> syntax). Data that can be trusted (e.g. generated counts of records, etc.) may be displayed without escaping the values.</p>\n</div>\n<p>You can use the pipe ('<strong>|</strong>') character at the beginning of a line to indicate \"<a href=\"https://pugjs.org/language/plain-text.html\" class=\"external\" rel=\" noopener\">plain text</a>\". For example, the additional text shown below will be displayed on the same line as the preceding anchor, but will not be linked.</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>a(href='http://someurl/') Link text\n| Plain text\n</code></pre></div>\n<p>Pug allows you to perform conditional operations using <code>if</code>, <code>else</code> , <code>else if</code> and <code>unless</code>—for example:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>if title\n  p A variable named \"title\" exists\nelse\n  p A variable named \"title\" does not exist\n</code></pre></div>\n<p>You can also perform loop/iteration operations using <code>each-in</code> or <code>while</code> syntax. In the code fragment below we've looped through an array to display a list of variables (note the use of the 'li=' to evaluate the \"val\" as a variable below. The value you iterate across can also be passed into the template as a variable!</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>ul\n  each val in [1, 2, 3, 4, 5]\n    li= val\n</code></pre></div>\n<p>The syntax also supports comments (that can be rendered in the output—or not—as you choose), mixins to create reusable blocks of code, case statements, and many other features. For more detailed information see <a href=\"https://pugjs.org/api/getting-started.html\" class=\"external\" rel=\" noopener\">The Pug docs</a>.</p>"}},{"type":"prose","value":{"id":"extending_templates","title":"Extending templates","isH3":false,"content":"<p>Across a site, it is usual for all pages to have a common structure, including standard HTML markup for the head, footer, navigation, etc. Rather than forcing developers to duplicate this \"boilerplate\" in every page, <em>Pug</em> allows you to declare a base template and then extend it, replacing just the bits that are different for each specific page.</p>\n<p>For example, the base template <strong>layout.pug</strong> created in our <a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/skeleton_website\">skeleton project</a> looks like this:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>doctype html\nhtml\n  head\n    title= title\n    link(rel='stylesheet', href='/stylesheets/style.css')\n  body\n    block content\n</code></pre></div>\n<p>The <code>block</code> tag is used to mark up sections of content that may be replaced in a derived template (if the block is not redefined then its implementation in the base class is used).</p>\n<p>The default <strong>index.pug</strong> (created for our skeleton project) shows how we override the base template. The <code>extends</code> tag identifies the base template to use, and then we use <code>block section_name</code> to indicate the new content of the section that we will override.</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>extends layout\n\nblock content\n  h1= title\n  p Welcome to #{title}\n</code></pre></div>"}},{"type":"prose","value":{"id":"next_steps","title":"Next steps","isH3":false,"content":"<ul>\n  <li>Return to <a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/Displaying_data\">Express Tutorial Part 5: Displaying library data</a>.</li>\n  <li>Proceed to the next subarticle of part 5: <a href=\"/zh-TW/docs/Learn/Server-side/Express_Nodejs/Displaying_data/LocalLibrary_base_template\">The LocalLibrary base template</a>.</li>\n</ul>"}}],"toc":[{"text":"Express 模板選擇","id":"express_模板選擇"},{"text":"Template configuration","id":"template_configuration"},{"text":"Template syntax","id":"template_syntax"},{"text":"Extending templates","id":"extending_templates"},{"text":"Next steps","id":"next_steps"}],"summary":"模板是一個文字檔，定義了一個輸出檔的結構或者排版，使用定位符號表示，當模板被繪製時，資料將插入到何處（在Express，模板被稱為視圖）。","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Template primer","locale":"en-US","native":"English (US)"},{"title":"テンプレートプライマー","locale":"ja","native":"日本語"},{"title":"Основы шаблонов","locale":"ru","native":"Русский"},{"title":"模板入门","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"zh-tw/learn/server-side/express_nodejs/displaying_data/template_primer","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-tw/learn/server-side/express_nodejs/displaying_data/template_primer/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/zh-TW/docs/Learn","title":"學習該如何開發 Web"},{"uri":"/zh-TW/docs/Learn/Server-side","title":"伺服端網站程式設計"},{"uri":"/zh-TW/docs/Learn/Server-side/Express_Nodejs","title":"Express web framework (Node.js/JavaScript)"},{"uri":"/zh-TW/docs/Learn/Server-side/Express_Nodejs/Displaying_data","title":"Express 教程 5: 呈現圖書館數據"},{"uri":"/zh-TW/docs/Learn/Server-side/Express_Nodejs/Displaying_data/Template_primer","title":"模板入門"}],"pageTitle":"模板入門 - 學習該如何開發 Web | MDN","noIndexing":false}}