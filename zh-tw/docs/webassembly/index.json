{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"WebAssembly","mdn_url":"/zh-TW/docs/WebAssembly","locale":"zh-TW","native":"正體中文 (繁體)","sidebarHTML":"\n\n<ol>\n  <li data-default-state=\"open\"><a href=\"/zh-TW/docs/WebAssembly\"><strong>WebAssembly home page</strong></a>\n  </li><li class=\"toggle\">\n    <details open=\"\">\n      <summary>Tutorials</summary>\n      <ol>\n        <li><a href=\"/zh-TW/docs/WebAssembly/Concepts\">WebAssembly concepts</a></li>\n        <li><a href=\"/zh-TW/docs/WebAssembly/C_to_wasm\">Compiling from C/C++ to WebAssembly</a></li>\n        <li><a href=\"/zh-TW/docs/WebAssembly/Rust_to_wasm\">Compiling from Rust to WebAssembly</a></li>\n        <li><a href=\"/zh-TW/docs/WebAssembly/Using_the_JavaScript_API\">Using the WebAssembly JavaScript API</a></li>\n        <li><a href=\"/zh-TW/docs/WebAssembly/Understanding_the_text_format\">Understanding WebAssembly text format</a></li>\n        <li><a href=\"/zh-TW/docs/WebAssembly/Text_format_to_wasm\">Converting WebAssembly text format to wasm</a></li>\n        <li><a href=\"/zh-TW/docs/WebAssembly/Loading_and_running\">Loading and running WebAssembly code</a></li>\n        <li><a href=\"/zh-TW/docs/WebAssembly/Caching_modules\">Caching compiled WebAssembly modules</a></li>\n        <li><a href=\"/zh-TW/docs/WebAssembly/Exported_functions\">Exported WebAssembly functions</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Object reference</summary>\n      <ol>\n        <li><a class=\"page-not-created\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>WebAssembly</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code> <small>(en-US)</small></a></li>\n      </ol>\n    </details>\n  </li>\n</ol>\n\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>WebAssembly 是一種新的低階程式語言，可在今日的網頁瀏覽器中被執行 —— 它是低階的類組合語言，具有嚴謹的二進位格式，能以接近原生應用程式的效能執行，並提供如 C/C++ 等語言一個構建目標，使它們能在 Web 上被執行。他也被設計為可與 JavaScript 共存，允許兩者一同工作。</p>"}},{"type":"prose","value":{"id":"簡而言之","title":"簡而言之","isH3":false,"content":"<p>WebAssembly 對於網路平台而言具有極大的意義 —— 它提供了一種方式，使得那些以各種語言編寫的程式都能以接近原生的速度於 Web 環境中執行，在這條件下，先前無法以此種方式運作的用戶端軟體皆能在 Web 中被執行。</p>\n<p>WebAssembly 被設計來與 JavaScript 協同工作 —— 藉由 WebAssembly 的 JavaScript API，你可以把 WebAssembly 模組載入至一個 JavaScript 應用程式，並在兩者間共享功能。這允許你在同一應用程式內彈性地發揮 WebAssembly 的高效能威力同時兼顧 JavaScript 的表達力與高靈活性，即便你可能不知道如何編寫 WebAssembly 程式碼。</p>\n<p>而且更棒的是，這是由 <a href=\"https://www.w3.org/wasm/\" class=\"external\" rel=\" noopener\">W3C WebAssembly Working Group</a> 和 <a href=\"https://www.w3.org/community/webassembly/\" class=\"external\" rel=\" noopener\">Community Group</a> 開發的一項網路標準，並也得到來自各大主要瀏覽器廠商的積極參與。</p>"}},{"type":"prose","value":{"id":"指南","title":"指南","isH3":false,"content":"<dl>\n  <dt id=\"webassembly_概念\"><a href=\"/en-US/docs/WebAssembly/Concepts\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">WebAssembly 概念 (en-US)</a></dt>\n  <dd>\n    <p>藉由閱讀 WebAssembly 後的高階概念開始 —— 也就是說，它為何是如此有用，是如何相容網路平台（及其他），和如何使用它。</p>\n  </dd>\n  <dt id=\"將_cc_模組編譯為_webassembly\"><a href=\"/en-US/docs/WebAssembly/C_to_wasm\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">將 C/C++ 模組編譯為 WebAssembly (en-US)</a></dt>\n  <dd>\n    <p>當你使用 C/C++ 編寫程式後，你可以使用諸如 <a href=\"https://emscripten.org/\" class=\"external\" rel=\" noopener\">Emscripten</a> 等工具將其編譯為 .wasm 文件。讓我們看看它是如何實作的。</p>\n  </dd>\n  <dt id=\"從現有的_c_模組編譯為_webassembly\"><a href=\"/en-US/docs/WebAssembly/existing_C_to_wasm\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">從現有的 C 模組編譯為 WebAssembly (en-US)</a></dt>\n  <dd>\n    <p>WebAssembly 核心的使用案例是期望能讓開發者在 Web 環境中使用現存 C 的生態環境。</p>\n  </dd>\n  <dt id=\"將_rust_程式碼編譯為_webassembly\"><a href=\"/en-US/docs/WebAssembly/Rust_to_wasm\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">將 Rust 程式碼編譯為 WebAssembly (en-US)</a></dt>\n  <dd>\n    <p>你可以將 Rust 編譯為 WebAssembly！本教程將帶您了解將 Rust 項目編譯為 wasm 並在現有的 Web 應用程序中使用它所需的所有知識。</p>\n  </dd>\n  <dt id=\"載入並運行_webassembly_程式碼\"><a href=\"/en-US/docs/WebAssembly/Loading_and_running\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">載入並運行 WebAssembly 程式碼 (en-US)</a></dt>\n  <dd>\n    <p>本文介紹如何透過把 <a href=\"/zh-TW/docs/Web/API/Fetch_API\">Fetch</a> 或 <a href=\"/zh-TW/docs/Web/API/XMLHttpRequest\">XHR</a> API 與 <a href=\"/en-US/docs/WebAssembly/JavaScript_interface\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">WebAssembly JavaScript (en-US)</a> API 結合起來、編譯及實例化 .wasm 文件。</p>\n  </dd>\n  <dt id=\"使用_webassembly_的_javascript_api\"><a href=\"/en-US/docs/WebAssembly/Using_the_JavaScript_API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">使用 WebAssembly 的 JavaScript API (en-US)</a></dt>\n  <dd>\n    <p>當你載入一個 .wasm 模組後，你就用到它。在本文中將向你展示如何透過 WebAssembly 的 JavaScript API 來使用 WebAssembly。</p>\n  </dd>\n  <dt id=\"導出_webassembly_函數\"><a href=\"/en-US/docs/WebAssembly/Exported_functions\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">導出 WebAssembly 函數 (en-US)</a></dt>\n  <dd>\n    <p>被導出的 WebAssembly 函數是用 JavaScript 來表示 WebAssembly 函數的封裝，並允許從 JavaScript 調用 WebAssembly 原始碼。本文將描述他們。</p>\n  </dd>\n  <dt id=\"了解_webassembly_的文件格式\"><a href=\"/en-US/docs/WebAssembly/Understanding_the_text_format\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">了解 WebAssembly 的文件格式 (en-US)</a></dt>\n  <dd>\n    <p>本文介紹了 .wasm 的文件格式。這是在進行偵錯時由瀏覽器開發工具中展現出 .wasm 模組的一種低階文件格式。</p>\n  </dd>\n  <dt id=\"把_webassembly_文件格式轉為_wasm\"><a href=\"/en-US/docs/WebAssembly/Text_format_to_wasm\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">把 WebAssembly 文件格式轉為 wasm (en-US)</a></dt>\n  <dd>\n    <p>本文提供一個如何把以 WebAssembly 編寫的模組轉換為二進位的 .wasm 文件格式的指南。</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"api_參考","title":"API 參考","isH3":false,"content":"<dl>\n  <dt id=\"webassembly_control_flow\"><a href=\"/en-US/docs/WebAssembly/Reference/Control_flow\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">WebAssembly control flow (en-US)</a></dt>\n  <dd>\n    <p>Reference documentation for the set of WebAssembly control-flow operators.</p>\n  </dd>\n  <dt id=\"webassembly_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>This object acts as the namespace for all WebAssembly related functionality.</p>\n  </dd>\n  <dt id=\"webassembly.global_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>A <code>WebAssembly.Global</code> object represents a global variable instance, accessible from both JavaScript and importable/exportable across one or more <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code> <small>(en-US)</small></a> instances. This allows dynamic linking of multiple modules.</p>\n  </dd>\n  <dt id=\"webassembly.module_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>A <code>WebAssembly.Module</code> object contains stateless WebAssembly code that has already been compiled by the browser and can be efficiently <a href=\"/en-US/docs/Web/API/Worker/postMessage\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">shared with Workers (en-US)</a>, and instantiated multiple times.</p>\n  </dd>\n  <dt id=\"webassembly.instance_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>A <code>WebAssembly.Instance</code> object is a stateful, executable instance of a <code>Module</code>. <code>Instance</code> objects contain all the <a href=\"/en-US/docs/WebAssembly/Exported_functions\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Exported WebAssembly functions (en-US)</a> that allow calling into WebAssembly code from JavaScript.</p>\n  </dd>\n  <dt id=\"webassembly.instantiatestreaming_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>The <code>WebAssembly.instantiateStreaming()</code> function is the primary API for compiling and instantiating WebAssembly code, returning both a <code>Module</code> and its first <code>Instance</code>.</p>\n  </dd>\n  <dt id=\"webassembly.memory_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>A <code>WebAssembly.Memory</code> object is a resizable <a href=\"/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> that holds the raw bytes of memory accessed by an <code>Instance</code>.</p>\n  </dd>\n  <dt id=\"webassembly.table_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>A <code>WebAssembly.Table</code> object is a resizable typed array of opaque values, like function references, that are accessed by an <code>Instance</code>.</p>\n  </dd>\n  <dt id=\"webassembly.compileerror_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Creates a new WebAssembly <code>CompileError</code> object.</p>\n  </dd>\n  <dt id=\"webassembly.linkerror_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Creates a new WebAssembly <code>LinkError</code> object.</p>\n  </dd>\n  <dt id=\"webassembly.runtimeerror_en-us\"><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError()</code> <small>(en-US)</small></a></dt>\n  <dd>\n    <p>Creates a new WebAssembly <code>RuntimeError</code> object.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"範本","title":"範本","isH3":false,"content":"<ul>\n  <li><a href=\"https://github.com/JasonWeathersby/WASMSobel\" class=\"external\" rel=\" noopener\">WASMSobel</a></li>\n  <li>參考我們的 <a href=\"https://github.com/mdn/webassembly-examples/\" class=\"external\" rel=\" noopener\">webassembly-範例</a> 庫來獲取更多例子。</li>\n</ul>"}},{"type":"specifications","value":{"title":"規範","id":"規範","isH3":false,"specifications":[{"bcdSpecificationURL":"https://webassembly.github.io/spec/js-api/#webassembly-namespace","title":"WebAssembly JavaScript Interface"}],"query":"javascript.builtins.WebAssembly"}},{"type":"browser_compatibility","value":{"title":"瀏覽器相容性","id":"瀏覽器相容性","isH3":false,"query":"javascript.builtins.WebAssembly","dataURL":"/zh-TW/docs/WebAssembly/bcd.json"}},{"type":"prose","value":{"id":"參見","title":"參見","isH3":false,"content":"<ul>\n  <li><a href=\"https://research.mozilla.org/\" class=\"external\" rel=\" noopener\">WebAssembly on Mozilla Research</a></li>\n  <li><a href=\"https://webassembly.org/\" class=\"external\" rel=\" noopener\">webassembly.org</a></li>\n  <li><a href=\"https://hacks.mozilla.org/category/webassembly/\" class=\"external\" rel=\" noopener\">WebAssembly articles on Mozilla Hacks blog</a></li>\n  <li><a href=\"https://www.w3.org/community/webassembly/\" class=\"external\" rel=\" noopener\">W3C WebAssembly Community Group</a></li>\n  <li><a href=\"https://web.dev/emscripting-a-c-library/\" class=\"external\" rel=\" noopener\">Emscripting a C Library to Wasm</a></li>\n</ul>"}}],"toc":[{"text":"簡而言之","id":"簡而言之"},{"text":"指南","id":"指南"},{"text":"API 參考","id":"api_參考"},{"text":"範本","id":"範本"},{"text":"規範","id":"規範"},{"text":"瀏覽器相容性","id":"瀏覽器相容性"},{"text":"參見","id":"參見"}],"summary":"WebAssembly 是一種新的低階程式語言，可在今日的網頁瀏覽器中被執行 —— 它是低階的類組合語言，具有嚴謹的二進位格式，能以接近原生應用程式的效能執行，並提供如 C/C++ 等語言一個構建目標，使它們能在 Web 上被執行。他也被設計為可與 JavaScript 共存，允許兩者一同工作。","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"WebAssembly","locale":"en-US","native":"English (US)"},{"title":"WebAssembly","locale":"es","native":"Español"},{"title":"WebAssembly","locale":"fr","native":"Français"},{"title":"WebAssembly","locale":"ja","native":"日本語"},{"title":"웹어셈블리","locale":"ko","native":"한국어"},{"title":"WebAssembly","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"WebAssembly","locale":"ru","native":"Русский"},{"title":"WebAssembly","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"zh-tw/webassembly","github_url":"https://github.com/mdn/translated-content/blob/main/files/zh-tw/webassembly/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"pageTitle":"WebAssembly | MDN","noIndexing":false}}