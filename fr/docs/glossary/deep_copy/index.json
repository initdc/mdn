{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Copie profonde","mdn_url":"/fr/docs/Glossary/Deep_copy","locale":"fr","native":"Français","sidebarHTML":"\n  <ol>\n    <li><a href=\"/fr/docs/MDN/About\">À propos</a></li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Contribuer au MDN</summary>\n            <ol>\n                <li><a href=\"/fr/docs/MDN/Contribute/Getting_started\">Débuter sur MDN</a></li>\n                <li><a href=\"/fr/docs/MDN/Contribute\">Contribuer au MDN</a></li>\n                <li><a href=\"/fr/docs/MDN/Contribute/Howto\">Guides \"Comment faire\"</a></li>\n                <li><a href=\"/fr/docs/MDN/Contribute/Localize\">Localiser MDN</a></li>\n                <li><a href=\"/fr/docs/MDN/Guidelines\">Guides du style et du contenu MDN</a></li>\n                <li><a href=\"/fr/docs/MDN/Structures\">Structures des contenus</a></li>\n             </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Une <strong>copie profonde</strong> d'un objet est une copie dont les propriétés ne partagent pas les mêmes références (ne pointent pas vers les mêmes valeurs sous-jacentes) que celles de l'objet source de laquelle la copie a été faite. Par conséquent, lorsque vous modifiez la source ou la copie, vous pouvez être assuré que vous ne modifiez pas également l'autre objet&nbsp;; c'est-à-dire que vous ne provoquerez pas involontairement des modifications inattendues de la source ou de la copie. Ce comportement contraste avec celui d'une <a href=\"/en-US/docs/Glossary/Shallow_copy\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">copie superficielle (en-US)</a>, dans lequel les modifications apportées à la source ou à la copie peuvent également entraîner la modification de l'autre objet (car les deux objets partagent les mêmes références).</p>\n<p>En JavaScript, les opérations de copie d'objet intégrées standards (telles que <a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">la syntaxe de décomposition</a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>Array.prototype.concat()</code></a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>Array.prototype.slice()</code></a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Array/from\"><code>Array.from()</code></a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"><code>Object.assign()</code></a>, et <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a>) ne créent pas de copies profondes. Au lieu de cela, ils créent des copies superficielles.</p>\n<p>Une façon de faire une copie complète d'un objet JavaScript, s'il peut être <a href=\"/fr/docs/Glossary/Serialization\">sérialisé</a>, est d'utiliser <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a> pour convertir l'objet en une chaîne JSON, puis de reconvertir la chaîne en un (entièrement nouvel) objet JavaScript avec <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\"><code>JSON.parse()</code></a>&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> liste_ingredients <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"nouilles\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"liste\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"œufs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"farine\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"eau\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> liste_ingredients_copieprofonde <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>liste_ingredients<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Modifier la valeur de la propriété 'liste' dans liste_ingredients_copieprofonde</span>\nliste_ingredients_copieprofonde<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>liste <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"farine de riz\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"water\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// La propriété 'liste' ne change pas dans liste_ingredients</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>liste_ingredients<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>liste<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Array(3) [ \"œufs\", \"farine\", \"eau\" ]</span>\n</code></pre></div>\n<p>Comme le montre le code ci-dessus, étant donné qu'une copie complète ne partage aucune référence avec son objet source, toute modification apportée à la copie complète n'affecte pas l'objet source.</p>\n<p>Cependant, alors que l'objet dans le code ci-dessus est assez simple pour être <a href=\"/fr/docs/Glossary/Serialization\">sérialisable</a>, de nombreux objets JavaScript ne sont pas du tout sérialisables — par exemple, les <a href=\"/fr/docs/Web/JavaScript/Guide/Functions\">fonctions</a> (avec des fermetures), les <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">symboles</a>, les objets qui représentent des éléments HTML dans <a href=\"/en-US/docs/Web/API/HTML_DOM_API\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">l'API HTML DOM (en-US)</a>, les données récursives, et bien d'autres cas. L'appel de <code>JSON.stringify()</code> pour sérialiser ces objets échouera. Il n'y a donc aucun moyen de faire des copies complètes de tels objets.</p>\n<p>Pour les objets qui <em>sont</em> sérialisables, vous pouvez également utiliser la méthode <a href=\"/en-US/docs/Web/API/structuredClone\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">structuredClone() (en-US)</a> pour créer des copies profondes. <code>structuredClone()</code> est avantageuse car elle permet de <em>transférer</em> des <a href=\"/en-US/docs/Glossary/Transferable_objects\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">objets transférables (en-US)</a> dans la source vers la nouvelle copie, plutôt que de simplement les cloner. Mais notez que <code>structuredClone()</code> n'est pas une fonctionnalité du langage JavaScript lui-même — il s'agit plutôt d'une fonctionnalité des navigateurs et de tout autre environnement d'exécution de JavaScript qui implémente un objet global comme <a href=\"/fr/docs/Web/API/Window\"><code>window</code></a>, et appeler <code>structuredClone()</code> pour cloner un objet non sérialisable échouera de la même manière que l'appel de <code>JSON.stringify()</code> pour le sérialiser échouera.</p>"}},{"type":"prose","value":{"id":"voir_aussi","title":"Voir aussi","isH3":false,"content":"<ul>\n  <li><a href=\"/en-US/docs/Glossary/Shallow_copy\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">Copie superficielle (en-US)</a></li>\n  <li><a href=\"/en-US/docs/Web/API/structuredClone\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">window.structuredClone() (en-US)</a></li>\n</ul>"}}],"toc":[{"text":"Voir aussi","id":"voir_aussi"}],"summary":"Une copie profonde d'un objet est une copie dont les propriétés ne partagent pas les mêmes références (ne pointent pas vers les mêmes valeurs sous-jacentes) que celles de l'objet source de laquelle la copie a été faite. Par conséquent, lorsque vous modifiez la source ou la copie, vous pouvez être assuré que vous ne modifiez pas également l'autre objet ; c'est-à-dire que vous ne provoquerez pas involontairement des modifications inattendues de la source ou de la copie. Ce comportement contraste avec celui d'une copie superficielle (en-US), dans lequel les modifications apportées à la source ou à la copie peuvent également entraîner la modification de l'autre objet (car les deux objets partagent les mêmes références).","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Deep copy","locale":"en-US","native":"English (US)"},{"title":"Deep copy (ディープコピー)","locale":"ja","native":"日本語"}],"source":{"folder":"fr/glossary/deep_copy","github_url":"https://github.com/mdn/translated-content/blob/main/files/fr/glossary/deep_copy/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/fr/docs/Glossary","title":"Glossaire MDN : définitions des termes du Web"},{"uri":"/fr/docs/Glossary/Deep_copy","title":"Copie profonde"}],"pageTitle":"Copie profonde - Glossaire MDN : définitions des termes du Web | MDN","noIndexing":false}}