{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Détection de collisions en 2D","mdn_url":"/fr/docs/Games/Techniques/2D_collision_detection","locale":"fr","native":"Français","sidebarHTML":"\n  <ol>\n    <li class=\"toggle\">\n        <details>\n            <summary>Introduction</summary>\n            <ol>\n              <li><a href=\"/fr/docs/Games/Introduction\">Introduction</a></li>\n              <li><a href=\"/fr/docs/Games/Anatomy\">Anatomie d'un jeu vidéo</a></li>\n              <li><a href=\"/fr/docs/Games/Examples\">Exemples</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>API pour le développement de jeux</summary>\n            <ol>\n              <li><a href=\"/fr/docs/Web/API/Canvas_API\">Canvas</a></li>\n              <li><a href=\"/fr/docs/Web/CSS\">CSS</a></li>\n              <li><a href=\"/fr/docs/Web/API/Fullscreen_API\">Full Screen (plein écran)</a></li>\n              <li><a href=\"/fr/docs/Web/API/Gamepad_API\">Gamepad (manette)</a></li>\n              <li><a href=\"/fr/docs/Web/API/IndexedDB_API\">IndexedDB</a></li>\n              <li><a href=\"/fr/docs/Web/JavaScript\">JavaScript</a></li>\n              <li><a href=\"/fr/docs/Web/API/Pointer_Lock_API\">Pointer Lock (verrou de pointeur)</a></li>\n              <li><a href=\"/fr/docs/Web/SVG\">SVG</a></li>\n              <li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">Typed Arrays (tableaux typés)</a></li>\n              <li><a href=\"/fr/docs/Web/API/Web_Audio_API\">Web Audio</a></li>\n              <li><a href=\"/fr/docs/Web/API/WebGL_API\">WebGL</a></li>\n              <li><a href=\"/fr/docs/Web/API/WebRTC_API\">WebRTC</a></li>\n              <li><a href=\"/fr/docs/Web/API/WebSockets_API\">WebSockets</a></li>\n              <li><a href=\"/fr/docs/Web/API/WebVR_API\">WebVR (réalité virtuelle)</a></li>\n              <li><a href=\"/fr/docs/Web/API/Web_Workers_API\">Web Workers</a></li>\n              <li><a href=\"/fr/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Techniques</summary>\n            <ol>\n              <li><a href=\"/fr/docs/Games/Techniques/Async_scripts\">Utiliser des scripts asynchrones pour asm.js</a></li>\n              <li><a href=\"/fr/docs/Web/Apps/Developing/Optimizing_startup_performance\">Optimiser les performances de démarrage</a></li>\n              <li><a href=\"/fr/docs/Games/Techniques/WebRTC_data_channels\">Utiliser WebRTC - canaux de données pair-à-pair</a></li>\n              <li><a href=\"/fr/docs/Games/Techniques/Efficient_animation_for_web_games\">Animation efficace pour un jeu internet</a></li>\n              <li><a href=\"/fr/docs/Games/Techniques/Audio_for_Web_Games\">Audio pour les jeux web</a></li>\n              <li><a href=\"/fr/docs/Games/Techniques/2D_collision_detection\">Détection de collision 2D</a></li>\n              <li><a href=\"/fr/docs/Games/Techniques/Tilemaps\">Carreaux et carrelages</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Jeux 3D sur le Web</summary>\n            <ol>\n              <li><a href=\"/fr/docs/Games/Techniques/3D_on_the_web\">Aperçu des jeux 3D sur le Web</a></li>\n              <li><a href=\"/fr/docs/Games/Techniques/3D_on_the_web/Basic_theory\">Théorie de base sur la 3D</a></li>\n              <li><a href=\"/fr/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_A-Frame\">Construire une démo avec A-Frame</a></li>\n              <li><a href=\"/fr/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Babylon.js\">Construire une démo avec Babylon.js</a></li>\n              <li><a href=\"/fr/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_PlayCanvas\">Construire une démo avec PlayCanvas</a></li>\n              <li><a href=\"/fr/docs/Games/Techniques/3D_on_the_web/Building_up_a_basic_demo_with_Three.js\">Construire une démo avec Three.js</a></li>\n              <li><a href=\"/fr/docs/Games/Techniques/3D_on_the_web/WebVR\">WebVR (réalité virtuelle)</a></li>\n              <li><a href=\"/fr/docs/Games/Techniques/3D_collision_detection\">Détection de collision en 3D</a></li>\n              <li><a href=\"/fr/docs/Games/Techniques/3D_collision_detection/Bounding_volume_collision_detection_with_THREE.js\">Détection de collision de volumes avec THREE.js</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Mise en place des contrôle du jeu</summary>\n            <ol>\n              <li><a href=\"/fr/docs/Games/Techniques/Control_mechanisms\">Aperçu des mécanismes de contrôle du jeu</a></li>\n              <li><a href=\"/fr/docs/Games/Techniques/Control_mechanisms/Mobile_touch\">Commandes tactiles mobiles</a></li>\n              <li><a href=\"/fr/docs/Games/Techniques/Control_mechanisms/Desktop_with_mouse_and_keyboard\">Commandes à la souris et au clavier</a></li>\n              <li><a href=\"/fr/docs/Games/Techniques/Control_mechanisms/Desktop_with_gamepad\">Commandes à la manette</a></li>\n              <li><a href=\"/fr/docs/Games/Techniques/Control_mechanisms/Other\">Contrôles non conventionnels</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Tutoriels</summary>\n            <ol>\n              <li><a href=\"/fr/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript\">Jeu de casse-briques 2D avec du pur JavaScript</a></li>\n              <li><a href=\"/fr/docs/Games/Tutorials/2D_breakout_game_Phaser\">Jeu de casse-tête 2D avec Phaser</a></li>\n              <li><a href=\"/fr/docs/Games/Tutorials/HTML5_Gamedev_Phaser_Device_Orientation\">Jeu de labyrinthe 2D avec orientation du périphérique</a></li>\n              <li><a href=\"https://mozdevs.github.io/html5-games-workshop/en/guides/platformer/start-here/\">Jeu de plateforme 2D avec Phaser</a></li>\n            </ol>\n        </details>\n    </li>\n    <li class=\"toggle\">\n        <details>\n            <summary>Publication de jeux</summary>\n            <ol>\n              <li><a href=\"/fr/docs/Games/Publishing_games\">Aperçu des outils de publication des jeux</a></li>\n              <li><a href=\"/fr/docs/Games/Publishing_games/Game_distribution\">Distribution des jeux</a></li>\n              <li><a href=\"/fr/docs/Games/Publishing_games/Game_promotion\">Promotion des jeux</a></li>\n              <li><a href=\"/fr/docs/Games/Publishing_games/Game_monetization\">Monétisation des jeux</a></li>\n            </ol>\n        </details>\n    </li>\n  </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Les algorithmes de détection de collisions dans les jeux en 2 dimensions dépendent de la forme des objets à détecter (par exemple&nbsp;: rectangle contre rectangle, cercle contre rectangle, cercle contre cercle…). Habituellement, il est préférable d’utiliser une forme générique appelée masque de collision («&nbsp;<em>hitbox</em>&nbsp;») qui couvrira l’entité. Ainsi, les collisions ne seront pas assurées au pixel près mais cela permettra d’avoir de bonnes performances pour un grand nombre d’entités à tester.</p>\n<p>Cet article donne un résumé des techniques les plus utilisées pour la détection des collisions dans les jeux en deux dimensions.</p>"}},{"type":"prose","value":{"id":"boîtes_englobantes_alignées_sur_les_axes","title":"Boîtes englobantes alignées sur les axes","isH3":false,"content":"<p>Une des formes les plus simples de détection de collision est une collision entre deux rectangles alignés sur les mêmes axes (c’est-à-dire sans rotation). L’algorithme suivant fonctionne en vérifiant qu’il n’y a pas d’espace vide entre les 4 côtés du rectangle. Si l’ensemble du rectangle est entouré de vide, on en conclut qu’il n’y a pas de collision.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> rect1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> rect2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rect1<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;</span> rect2<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> rect2<span class=\"token punctuation\">.</span>width <span class=\"token operator\">&amp;&amp;</span>\n   rect1<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> rect1<span class=\"token punctuation\">.</span>width <span class=\"token operator\">&gt;</span> rect2<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&amp;&amp;</span>\n   rect1<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&lt;</span> rect2<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> rect2<span class=\"token punctuation\">.</span>height <span class=\"token operator\">&amp;&amp;</span>\n   rect1<span class=\"token punctuation\">.</span>height <span class=\"token operator\">+</span> rect1<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&gt;</span> rect2<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// collision détectée !</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// remplissage des valeurs =&gt;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">30</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token number\">55</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">20</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token number\">5</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token number\">55</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// collision détectée !</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note :</strong> vous pouvez tester un <a href=\"http://jsfiddle.net/knam8/\" class=\"external\" rel=\" noopener\">exemple interactif de cet algorithme</a> sur jsFiddle, pour mieux comprendre le fonctionnement de ce code.</p>\n</div>"}},{"type":"prose","value":{"id":"collision_de_cercles","title":"Collision de cercles","isH3":false,"content":"<p>Une autre forme simple de détection de collision est la collision entre deux cercles. Cet algorithme fonctionne en prenant le point central de deux cercles puis il vérifie que la distance entre ces deux points est inférieure à la somme des rayons de ces deux cercles.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> circle1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">radius</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> circle2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">radius</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> dx <span class=\"token operator\">=</span> circle1<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> circle2<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> dy <span class=\"token operator\">=</span> circle1<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> circle2<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> distance <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>dx <span class=\"token operator\">*</span> dx <span class=\"token operator\">+</span> dy <span class=\"token operator\">*</span> dy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>distance <span class=\"token operator\">&lt;</span> circle1<span class=\"token punctuation\">.</span>radius <span class=\"token operator\">+</span> circle2<span class=\"token punctuation\">.</span>radius<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// collision détectée !</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note :</strong> vous pouvez tester un <a href=\"http://jsfiddle.net/gQ3hD/2/\" class=\"external\" rel=\" noopener\">exemple interactif de cet algorithme</a> sur jsFiddle, pour mieux comprendre le fonctionnement de ce code.</p>\n</div>"}},{"type":"prose","value":{"id":"théorème_des_axes_séparateurs","title":"Théorème des axes séparateurs","isH3":false,"content":"<p>Cet algorithme permet de détecter une collision entre deux polygones <em>convexes</em>. Cet algorithme est plus compliqué à implémenter que les deux précédents mais il est bien plus puissant. La complexité d’un tel algorithme induit de prendre en considération l’optimisation des performances (voir section suivante).</p>\n<p>L’implémentation de cet algorithme est hors de propos sur cette page, nous vous conseillons les articles suivants&nbsp;:</p>\n<ol>\n  <li><a href=\"http://www.sevenson.com.au/actionscript/sat/\" class=\"external\" rel=\" noopener\">Separating Axis Theorem (SAT) explanation</a>&nbsp;;</li>\n  <li><a href=\"http://www.metanetsoftware.com/technique/tutorialA.html\" class=\"external\" rel=\" noopener\">(Anglais) Collision detection and response (en)</a>&nbsp;;</li>\n  <li><a href=\"http://gamedevelopment.tutsplus.com/tutorials/collision-detection-using-the-separating-axis-theorem--gamedev-169\" class=\"external\" rel=\" noopener\">Collision detection Using the Separating Axis Theorem (en)</a>&nbsp;;</li>\n  <li><a href=\"http://www.codezealot.org/archives/55\" class=\"external\" rel=\" noopener\">SAT (Separating Axis Theorem) (en)</a>&nbsp;;</li>\n  <li><a href=\"http://rocketmandevelopment.com/blog/separation-of-axis-theorem-for-collision-detection/\" class=\"external\" rel=\" noopener\">Separation of Axis Theorem (SAT) for Collision Detection (en)</a>.</li>\n</ol>"}},{"type":"prose","value":{"id":"performances","title":"Performances","isH3":false,"content":"<p>Alors que la plupart de ces algorithmes de détection de collision sont très simples à calculer, cela peut être une perte de ressources de tester <em>chaque entité</em> avec les autres entités. Habituellement les jeux découpent les collisions en deux phases&nbsp;: large («&nbsp;<em>broad</em>&nbsp;») et étroite («&nbsp;<em>narrow</em>&nbsp;»).</p>"}},{"type":"prose","value":{"id":"phase_large","title":"Phase large","isH3":true,"content":"<p>La phase large sert à récupérer une liste d’entités qui <em>pourraient</em> entrer en collision. Cela peut être facilement implémenté avec une structure de données spaciale qui vous donnera une meilleure idée d’où est situé chaque entité et de ce qui existe autour d’elle. Par exemple&nbsp;:</p>\n<ul>\n  <li>Les <em>Quad Trees</em> (exemple&nbsp;: <a href=\"http://blogs.adobe.com/digitalmedia/2011/03/javascript-quadtree-implementation/\" class=\"external\" rel=\" noopener\">JavaScript QuadTree Implementation (en)</a>)&nbsp;;</li>\n  <li>Les <em>R-Trees</em> (voir <a href=\"http://en.wikipedia.org/wiki/R-tree\" class=\"external\" rel=\" noopener\">R-Tree sur Wikipédia (en anglais)</a>)&nbsp;;</li>\n  <li>Une «&nbsp;<em>hashmap</em>&nbsp;».</li>\n</ul>"}},{"type":"prose","value":{"id":"phase_étroite","title":"Phase étroite","isH3":true,"content":"<p>Quand vous avez une liste réduite d’entités à vérifier, il convient d’utiliser un algorithme de phase étroite tels que ceux décrits ci-dessus afin de détecter s’il y a bien une collision entre deux objets ou non.</p>"}}],"toc":[{"text":"Boîtes englobantes alignées sur les axes","id":"boîtes_englobantes_alignées_sur_les_axes"},{"text":"Collision de cercles","id":"collision_de_cercles"},{"text":"Théorème des axes séparateurs","id":"théorème_des_axes_séparateurs"},{"text":"Performances","id":"performances"}],"summary":"Les algorithmes de détection de collisions dans les jeux en 2 dimensions dépendent de la forme des objets à détecter (par exemple : rectangle contre rectangle, cercle contre rectangle, cercle contre cercle…). Habituellement, il est préférable d’utiliser une forme générique appelée masque de collision (« hitbox ») qui couvrira l’entité. Ainsi, les collisions ne seront pas assurées au pixel près mais cela permettra d’avoir de bonnes performances pour un grand nombre d’entités à tester.","popularity":0.0002,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"2D collision detection","locale":"en-US","native":"English (US)"},{"title":"Detección de colisiones 2D","locale":"es","native":"Español"},{"title":"二次元の衝突検出","locale":"ja","native":"日本語"},{"title":"Detecção de Colisão 2D","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"2D collision detection","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"fr/games/techniques/2d_collision_detection","github_url":"https://github.com/mdn/translated-content/blob/main/files/fr/games/techniques/2d_collision_detection/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/fr/docs/Games","title":"Développement de jeux vidéo"},{"uri":"/fr/docs/Games/Techniques","title":"Techniques pour le développement de jeux vidéo"},{"uri":"/fr/docs/Games/Techniques/2D_collision_detection","title":"Détection de collisions en 2D"}],"pageTitle":"Détection de collisions en 2D - Développement de jeux vidéo | MDN","noIndexing":false}}