{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"WebAssembly.instantiate()","mdn_url":"/fr/docs/WebAssembly/JavaScript_interface/instantiate","locale":"fr","native":"Français","sidebarHTML":"<ol><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects\">Objets standards</a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Méthodes</strong></a><ol><li><a href=\"/fr/docs/WebAssembly/JavaScript_interface/compile\"><code>WebAssembly.compile()</code></a></li><li><a href=\"/fr/docs/WebAssembly/JavaScript_interface/compileStreaming\"><code>WebAssembly.compileStreaming()</code></a></li><li><em><code>WebAssembly.instantiate()</code></em></li><li><a href=\"/fr/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code></a></li><li><a href=\"/fr/docs/WebAssembly/JavaScript_interface/validate\"><code>WebAssembly.validate()</code></a></li></ol></li><li><strong>Pages similaires&nbsp;:</strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></strong></li><li><strong>Héritage&nbsp;:</strong></li><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Propriétés</strong></a><ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Méthodes</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>La fonction <strong><code>WebAssembly.instantiate()</code></strong> permet de compiler et d'instancier du code WebAssembly. Cette fonction possède deux formes :</p>\n<ul>\n  <li>La première forme prend un code binaire WebAssembly sous forme d'un <a href=\"/fr/docs/Web/JavaScript/Typed_arrays\">tableau typé</a> ou d'un <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> et effectue les étapes de compilation et d'instanciation en une fois. La valeur de résolution de la promesse renvoyée se compose d'un module <a href=\"/fr/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a> compilé et de sa première instance <a href=\"/fr/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a>.</li>\n  <li>La seconde forme prend un module (<a href=\"/fr/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a>) déjà compilé et renvoie une promesse dont la valeur de résolution est une instance de ce module. Cette forme s'avère utile lorsque le module a déjà été compilé.</li>\n</ul>\n<div class=\"notecard warning\" id=\"sect1\">\n  <p><strong>Attention :</strong> Tant que faire se peut, utiliser la méthode <a href=\"/fr/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code></a> car elle est plus efficace et récupère, compile et instancie un module en une seule étape à partir du <em>bytecode</em> et il n'est pas nécessaire de passer par une conversion en <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>.</p>\n</div>"}},{"type":"prose","value":{"id":"syntaxe","title":"Syntaxe","isH3":false,"content":""}},{"type":"prose","value":{"id":"première_forme_utiliser_le_bytecode_webassembly","title":"Première forme : utiliser le <em>bytecode</em> WebAssembly","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Promise<span class=\"token operator\">&lt;</span>ResultObject<span class=\"token operator\">&gt;</span> WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span>bufferSource<span class=\"token punctuation\">,</span> importObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"paramètres\">Paramètres</h4>\n<dl>\n  <dt id=\"buffersource\"><code>bufferSource</code></dt>\n  <dd>\n    <p>Un <a href=\"/fr/docs/Web/JavaScript/Typed_arrays\">tableau typé</a> ou un <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> qui contient le <em>bytecode</em> du module WebAssembly qu'on souhaite compiler.</p>\n  </dd>\n  <dt id=\"importobject\"><code>importObject</code> <span class=\"badge inline optional\">Facultatif</span></dt>\n  <dd>\n    <p>Un objet qui contient les valeurs à importer dans l'instance qui sera créée. Ces valeurs peuvent être des fonctions ou des objets <a href=\"/fr/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a>. Il doit y avoir une propriété correspondante au sein du module compilé pour chacun des imports, si ce n'est pas le cas, une exception <a href=\"/fr/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a> sera levée.</p>\n  </dd>\n</dl>\n<h4 id=\"valeur_de_retour\">Valeur de retour</h4>\n<p>Une promesse qui est résoluee en un objet qui contient deux champs :</p>\n<ul>\n  <li><code>module</code> : un objet <a href=\"/fr/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a> qui représente le module WebAssembly compilé. Ce module peut être instancié à nouveau grâce à <a href=\"/fr/docs/Web/API/Worker/postMessage\" title=\"postMessage()\"><code>postMessage()</code></a> ou via <a href=\"/en-US/docs/WebAssembly/Caching_modules\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">un cache IndexedDB (en-US)</a>.</li>\n  <li><code>instance</code> : un objet <a href=\"/fr/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a> qui contient l'ensemble <a href=\"/fr/docs/WebAssembly/Exported_functions\">des fonctions WebAssembly exportées</a>.</li>\n</ul>\n<h4 id=\"exceptions\">Exceptions</h4>\n<ul>\n  <li>Si l'un des paramètres n'a pas le bon type ou la bonne structure, une exception <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> sera levée.</li>\n  <li>Si l'opération échoue, la promesse est rompue avec une exception <a href=\"/fr/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a>, <a href=\"/fr/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a> ou <a href=\"/fr/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a> selon l'origine de l'échec.</li>\n</ul>","titleAsText":"Première forme : utiliser le bytecode WebAssembly"}},{"type":"prose","value":{"id":"seconde_forme_utiliser_une_instance_dun_module","title":"Seconde forme : utiliser une instance d'un module","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Promise<span class=\"token operator\">&lt;</span>WebAssembly<span class=\"token punctuation\">.</span>Instance<span class=\"token operator\">&gt;</span> WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">,</span> importObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4 id=\"paramètres_2\">Paramètres</h4>\n<dl>\n  <dt id=\"module\"><code>module</code></dt>\n  <dd>\n    <p>L'objet <a href=\"/fr/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a> qui doit être instancié.</p>\n  </dd>\n  <dt id=\"importobject_2\"><code>importObject</code> <span class=\"badge inline optional\">Facultatif</span></dt>\n  <dd>\n    <p>Un objet qui contient les valeurs à importer dans l'instance qui sera créée. Ces valeurs peuvent être des fonctions ou des objets <a href=\"/fr/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a>. Il doit y avoir une propriété correspondante au sein du module compilé pour chacun des imports, si ce n'est pas le cas, une exception <a href=\"/fr/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a> sera levée.</p>\n  </dd>\n</dl>\n<h4 id=\"valeur_de_retour_2\">Valeur de retour</h4>\n<p>Une promesse qui est résolue en un objet <a href=\"/fr/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a>.</p>\n<h4 id=\"exceptions_2\">Exceptions</h4>\n<ul>\n  <li>Si l'un des paramètres n'est pas du bon type ou n'a pas la bonne structure, une exception <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> est levée.</li>\n  <li>Si l'opération échoue, la promesse sera rompue avec une exception <a href=\"/fr/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a>, <a href=\"/fr/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a> ou <a href=\"/fr/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a> selon l'origine de l'échec.</li>\n</ul>"}},{"type":"prose","value":{"id":"exemples","title":"Exemples","isH3":false,"content":"<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note :</strong> Dans la plupart des cas, on utilisera plus vraisemblablement <a href=\"/fr/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code></a> qui est plus efficace que <code>instantiate()</code>.</p>\n</div>"}},{"type":"prose","value":{"id":"première_forme","title":"Première forme","isH3":true,"content":"<p>Après avoir récupéré le <em>bytecode</em> WebAssembly grâce à <code>fetch()</code>, on compile et on instancie le module grâce à la fonction <a href=\"/fr/docs/WebAssembly/JavaScript_interface/instantiate\" aria-current=\"page\"><code>WebAssembly.instantiate()</code></a> et on importe une fonction JavaScript dans le module lors de cette étape. Ensuite, on invoque <a href=\"/fr/docs/WebAssembly/Exported_functions\">une fonction WebAssembly exportée</a> via l'instance.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> importObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">imports</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">imported_func</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'simple.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=&gt;</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">arrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bytes</span> <span class=\"token operator\">=&gt;</span>\n  WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> importObject<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=&gt;</span>\n  result<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">exported_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note :</strong> Voir le fichier <a href=\"https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index.html\" class=\"external\" rel=\" noopener\">index.html</a> sur GitHub (<a href=\"https://mdn.github.io/webassembly-examples/js-api-examples/\" class=\"external\" rel=\" noopener\">ainsi que la démonstration associée</a>) qui contient un exemple analogue et qui utilise la fonction utilitaire <a href=\"https://github.com/mdn/webassembly-examples/blob/master/wasm-utils.js#L1\" class=\"external\" rel=\" noopener\"><code>fetchAndInstantiate()</code></a>.</p>\n</div>"}},{"type":"prose","value":{"id":"seconde_forme","title":"Seconde forme","isH3":true,"content":"<p>Dans l'exemple qui suit (tiré du fichier <a href=\"https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/index-compile.html\" class=\"external\" rel=\" noopener\"><code>index-compile.html</code></a> sur GitHub et qui dispose d'<a href=\"https://mdn.github.io/webassembly-examples/js-api-examples/index-compile.html\" class=\"external\" rel=\" noopener\">une démonstration</a>), on compile le <em>bytecode</em> du module chargé <code>simple.wasm</code> grâce à la fonction <a href=\"/fr/docs/WebAssembly/JavaScript_interface/compileStreaming\"><code>WebAssembly.compileStreaming()</code></a> puis on envoie le résultat à un <em><a href=\"/fr/docs/Web/API/Web_Workers_API\">worker</a></em> grâce à la méthode <a href=\"/fr/docs/Web/API/Worker/postMessage\" title=\"postMessage()\"><code>postMessage()</code></a>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wasm_worker.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nWebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">compileStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'simple.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mod</span> <span class=\"token operator\">=&gt;</span>\n  worker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Dans le <em>worker</em> (cf. <a href=\"https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/wasm_worker.js\" class=\"external\" rel=\" noopener\"><code>wasm_worker.js</code></a>), on définit un objet d'import qui sera utilisé par le module puis on paramètre un gestionnaire d'évènement afin de recevoir le module depuis le <em>thread</em> principal. Lorsqu'on reçoit le module, on en crée une instance grâce à la méthode <a href=\"/fr/docs/WebAssembly/JavaScript_interface/instantiate\" aria-current=\"page\"><code>WebAssembly.instantiate()</code></a> puis on appelle une fonction exportée depuis le module.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> importObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">imports</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">imported_func</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module reçu depuis le thread principal'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> mod <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n\n  WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> importObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">exported_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"spécifications","title":"Spécifications","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>Spécification</th>\n      <th>État</th>\n      <th>Commentaires</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://webassembly.github.io/spec/js-api/#webassemblyinstantiate\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">WebAssembly JavaScript Interface<br><small lang=\"fr\">La définition de 'instantiate()' dans cette spécification.</small></a></td>\n      <td><span class=\"spec-wd\">Version de travail</span></td>\n      <td>Brouillon de définition initiale.</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"Compatibilité des navigateurs","id":"compatibilité_des_navigateurs","isH3":false,"query":"javascript.builtins.WebAssembly.instantiate","dataURL":"/fr/docs/WebAssembly/JavaScript_interface/instantiate/bcd.json"}},{"type":"prose","value":{"id":"voir_aussi","title":"Voir aussi","isH3":false,"content":"<ul>\n  <li><a href=\"/fr/docs/WebAssembly\">Le portail WebAssembly</a></li>\n  <li><a href=\"/fr/docs/WebAssembly/Concepts\">Les concepts relatifs à WebAssembly</a></li>\n  <li><a href=\"/fr/docs/WebAssembly/Using_the_JavaScript_API\">Utiliser l'API JavaScript WebAssembly</a></li>\n</ul>"}}],"toc":[{"text":"Syntaxe","id":"syntaxe"},{"text":"Exemples","id":"exemples"},{"text":"Spécifications","id":"spécifications"},{"text":"Compatibilité des navigateurs","id":"compatibilité_des_navigateurs"},{"text":"Voir aussi","id":"voir_aussi"}],"summary":"La fonction WebAssembly.instantiate() permet de compiler et d'instancier du code WebAssembly. Cette fonction possède deux formes :","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"WebAssembly.instantiate()","locale":"en-US","native":"English (US)"},{"title":"WebAssembly.instantiate()","locale":"ja","native":"日本語"},{"title":"WebAssembly.instantiate()","locale":"ko","native":"한국어"},{"title":"WebAssembly.instantiate()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"fr/webassembly/javascript_interface/instantiate","github_url":"https://github.com/mdn/translated-content/blob/main/files/fr/webassembly/javascript_interface/instantiate/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/fr/docs/WebAssembly","title":"WebAssembly"},{"uri":"/fr/docs/WebAssembly/JavaScript_interface","title":"WebAssembly"},{"uri":"/fr/docs/WebAssembly/JavaScript_interface/instantiate","title":"WebAssembly.instantiate()"}],"pageTitle":"WebAssembly.instantiate() - WebAssembly | MDN","noIndexing":false}}