{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"WebAssembly.Exception.prototype.getArg()","mdn_url":"/fr/docs/WebAssembly/JavaScript_interface/Exception/getArg","locale":"fr","native":"Français","sidebarHTML":"<ol><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects\">Objets standards</a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Méthodes</strong></a><ol><li><a href=\"/fr/docs/WebAssembly/JavaScript_interface/compile\"><code>WebAssembly.compile()</code></a></li><li><a href=\"/fr/docs/WebAssembly/JavaScript_interface/compileStreaming\"><code>WebAssembly.compileStreaming()</code></a></li><li><a href=\"/fr/docs/WebAssembly/JavaScript_interface/instantiate\"><code>WebAssembly.instantiate()</code></a></li><li><a href=\"/fr/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code></a></li><li><a href=\"/fr/docs/WebAssembly/JavaScript_interface/validate\"><code>WebAssembly.validate()</code></a></li></ol></li><li><strong>Pages similaires&nbsp;:</strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></strong></li><li><strong>Héritage&nbsp;:</strong></li><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Propriétés</strong></a><ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Méthodes</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>La méthode <strong><code>getArg()</code></strong>, rattachée au prototype d'un objet <a href=\"/fr/docs/WebAssembly/JavaScript_interface/Exception\"><code>Exception</code></a>, permet d'obtenir la valeur d'un élément spécifique parmi les arguments de donnée d'une exception.</p>\n<p>Cette méthode prend comme argument une balise <a href=\"/fr/docs/WebAssembly/JavaScript_interface/Tag\"><code>WebAssembly.Tag</code></a> et fonctionnera uniquement si l'exception levée a été créée avec cette même balise. Dans le cas contraire, la méthode déclenchera une exception <code>TypeError</code>. On s'assure ainsi que l'exception puisse être lue seulement si le code appelant a accès à la balise. Les balies qui ne sont ni importées ni exportées dans/depuis le code WebAssembly sont internes et les exceptions correspondantes ne peuvent pas être inspectées avec cette méthode&nbsp;!</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note :</strong> Avoir la même séquence des mêmes types de données ne suffit pas. Il faut que la balise ait la même <em>identité</em> (que ce soit la même balise) que celle utilisée pour créer l'exception.</p>\n</div>"}},{"type":"prose","value":{"id":"syntaxe","title":"Syntaxe","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">getArg</span><span class=\"token punctuation\">(</span>exceptionTag<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"paramètres","title":"Paramètres","isH3":true,"content":"<dl>\n  <dt id=\"exceptiontag\"><code>exceptionTag</code></dt>\n  <dd>\n    <p>Un objet <a href=\"/fr/docs/WebAssembly/JavaScript_interface/Tag\"><code>WebAssembly.Tag</code></a> qui doit correspondre à la balise associée à l'exception. Si les balises ne correspondent pas, une exception <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> sera levée.</p>\n  </dd>\n  <dt id=\"index\"><code>index</code></dt>\n  <dd>\n    <p>L'indice de la valeur, parmi les arguments de données, à renvoyer (l'indexation commence à 0). Si l'indice dépasse le nombre d'éléments disponibles, la méthode lèvera une exception <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"valeur_de_retour","title":"Valeur de retour","isH3":true,"content":"<p>La valeur de l'argument située à la position <code>index</code>.</p>"}},{"type":"prose","value":{"id":"exceptions","title":"Exceptions","isH3":true,"content":"<dl>\n  <dt id=\"typeerror\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></dt>\n  <dd>\n    <p>L'exception n'a pas été créée avec la balise passée à la méthode.</p>\n  </dd>\n  <dt id=\"rangeerror\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a></dt>\n  <dd>\n    <p>La valeur du paramètre <code>index</code> est supérieure ou égale au nombre de champs de données disponibles.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"exemples","title":"Exemples","isH3":false,"content":"<p>Pour accéder aux valeurs de l'exception, la balise doit être connue du code appelant. Pour cela, il faut qu'elle ait été importée dans ce code ou exportée depuis ce dernier.</p>"}},{"type":"prose","value":{"id":"obtenir_la_valeur_dexception_avec_une_balise_importée","title":"Obtenir la valeur d'exception avec une balise importée","isH3":true,"content":"<p>Prenons le fragment de code WebAssembly qui suit en supposant qu'il soit compilé dans un fichier intitulé <strong>exemple.wasm</strong>. On y importe une balise à laquelle on fait référence avec <code>$tagname</code>, et on exporte une méthode <code>run1</code> qui peut être appelée depuis du code externe et qui lève une exception utilisant la balise.</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n  <span class=\"token comment\">;; On importe la balise à laquelle on fera référence avec $tagname</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span> <span class=\"token string\">\"extmod\"</span> <span class=\"token string\">\"exttag\"</span> <span class=\"token punctuation\">(</span>tag <span class=\"token variable\">$tagname</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">;; La fonction $throwException renvoie un paramère i32 et a une balise $tagname</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$throwException</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span>.get <span class=\"token number\">0</span>\n    throw <span class=\"token variable\">$tagname</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">;; La fonction exportée \"run1\" qui appelle $throwException</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"run1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">call</span> <span class=\"token variable\">$throwException</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>Le fragment de code JavaScript qui suit appelle <a href=\"/fr/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming</code></a> afin d'importer le fichier 'exemple.wasm' et lui passe un objet d'import (<code>importObject</code>) contenant une nouvelle balise <a href=\"/fr/docs/WebAssembly/JavaScript_interface/Tag\"><code>WebAssembly.Tag</code></a> intitulée <code>tag_to_import</code>. L'objet d'import définit un objet dont les propriétés correspondent à celles de l'instruction <code>import</code> présente dans le code WebAssembly (un entier <code>i32</code>).</p>\n<p>Une fois le fichier instancié, le code invoque la méthode WebAssembly exportée <code>run1()</code>, qui déclenche immédiatement une exception.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> tag_to_import <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Tag</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">parameters</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'i32'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Note : les propriétés de l'objet d'import correspondent à la</span>\n<span class=\"token comment\">// structure décrite par l'instruction import dans le code WebAssembly !</span>\n<span class=\"token keyword\">const</span> importObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"extmod\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"exttag\"</span><span class=\"token operator\">:</span> tag_to_import<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\nWebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'exemple.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> importObject <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">run1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> e <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">getArg 0 : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getArg</span><span class=\"token punctuation\">(</span>tag_to_import<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Affichage dans la console</span>\n<span class=\"token comment\">// exemple.js:40 WebAssembly.Exception: wasm exception</span>\n<span class=\"token comment\">// exemple.js:41 getArg 0 : 1</span>\n</code></pre></div>\n<p>Le code intercepte l'exception et utilise <code>getArg()</code> afin d'afficher la valeur située en première position. Dans ce cas, il s'agit de \"1\".</p>"}},{"type":"prose","value":{"id":"obtenir_la_valeur_dexception_avec_une_balise_exportée","title":"Obtenir la valeur d'exception avec une balise exportée","isH3":true,"content":"<p>Lorsqu'il s'agit plutôt d'une balise exportée, le procédé est semblable à celui de l'exemple précédent. On a le même module WebAssembly dans lequel on a juste remplacé l'import par un export.</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n\n  <span class=\"token comment\">;; On exporte la balise avec le nom externe \"exptag\"</span>\n  <span class=\"token punctuation\">(</span>tag <span class=\"token variable\">$tagname</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"exptag\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$throwException</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">local</span>.get <span class=\"token number\">0</span>\n     throw <span class=\"token variable\">$tagname</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"run1\"</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">1</span>\n     <span class=\"token keyword\">call</span> <span class=\"token variable\">$throwException</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>Le code JavaScript est aussi semblable. Dans ce cas, on n'a pas d'import, on récupère à la place la balise exportée et on l'utilise pour obtenir l'argument. Pour assurer l'ensemble, on teste également qu'il s'agit de la bonne balise en utilisant la méthode <a href=\"/fr/docs/WebAssembly/JavaScript_interface/Exception/is\"><code>is()</code></a>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> tag_exported_from_wasm<span class=\"token punctuation\">;</span>\nWebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'exemple.wasm'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// On importe la balise avec le nom exporté depuis WebAssembly</span>\n    tag_exported_from_wasm<span class=\"token operator\">=</span>obj<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>exptag<span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">run1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> e <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Si la balise correspond, on récupère la valeur</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>tag_exported_from_wasm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">getArg 0 : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getArg</span><span class=\"token punctuation\">(</span>tag_exported_from_wasm<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Spécifications","id":"spécifications","isH3":false,"query":"javascript.builtins.WebAssembly.Exception.getArg","specifications":[]}},{"type":"browser_compatibility","value":{"title":"Compatibilité des navigateurs","id":"compatibilité_des_navigateurs","isH3":false,"data":null,"query":"javascript.builtins.WebAssembly.Exception.getArg","browsers":null}},{"type":"prose","value":{"id":"voir_aussi","title":"Voir aussi","isH3":false,"content":"<ul>\n  <li><a href=\"/fr/docs/WebAssembly\">Aperçu général de WebAssembly</a></li>\n  <li><a href=\"/fr/docs/WebAssembly/Concepts\">Concepts WebAssembly</a></li>\n  <li><a href=\"/fr/docs/WebAssembly/Using_the_JavaScript_API\">Utiliser l'API JavaScript WebAssembly</a></li>\n</ul>"}}],"toc":[{"text":"Syntaxe","id":"syntaxe"},{"text":"Exemples","id":"exemples"},{"text":"Spécifications","id":"spécifications"},{"text":"Compatibilité des navigateurs","id":"compatibilité_des_navigateurs"},{"text":"Voir aussi","id":"voir_aussi"}],"summary":"La méthode getArg(), rattachée au prototype d'un objet Exception, permet d'obtenir la valeur d'un élément spécifique parmi les arguments de donnée d'une exception.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"WebAssembly.Exception.prototype.getArg()","locale":"en-US","native":"English (US)"}],"source":{"folder":"fr/webassembly/javascript_interface/exception/getarg","github_url":"https://github.com/mdn/translated-content/blob/main/files/fr/webassembly/javascript_interface/exception/getarg/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/fr/docs/WebAssembly","title":"WebAssembly"},{"uri":"/fr/docs/WebAssembly/JavaScript_interface","title":"WebAssembly"},{"uri":"/fr/docs/WebAssembly/JavaScript_interface/Exception","title":"WebAssembly.Exception"},{"uri":"/fr/docs/WebAssembly/JavaScript_interface/Exception/getArg","title":"WebAssembly.Exception.prototype.getArg()"}],"pageTitle":"WebAssembly.Exception.prototype.getArg() - WebAssembly | MDN","noIndexing":false}}