{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"WebAssembly.Exception.prototype.stack","mdn_url":"/fr/docs/WebAssembly/JavaScript_interface/Exception/stack","locale":"fr","native":"Français","sidebarHTML":"<ol><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects\">Objets standards</a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Méthodes</strong></a><ol><li><a href=\"/fr/docs/WebAssembly/JavaScript_interface/compile\"><code>WebAssembly.compile()</code></a></li><li><a href=\"/fr/docs/WebAssembly/JavaScript_interface/compileStreaming\"><code>WebAssembly.compileStreaming()</code></a></li><li><a href=\"/fr/docs/WebAssembly/JavaScript_interface/instantiate\"><code>WebAssembly.instantiate()</code></a></li><li><a href=\"/fr/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code></a></li><li><a href=\"/fr/docs/WebAssembly/JavaScript_interface/validate\"><code>WebAssembly.validate()</code></a></li></ol></li><li><strong>Pages similaires&nbsp;:</strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></strong></li><li><strong>Héritage&nbsp;:</strong></li><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Propriétés</strong></a><ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Méthodes</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>La propriété en lecture seule <strong><code>stack</code></strong>, rattachée à une instance d'<a href=\"/fr/docs/WebAssembly/JavaScript_interface/Exception\"><code>Exception</code></a> <em>peut</em> contenir une trace de pile d'appels pour une exception levée par du code WebAssembly.</p>\n<p>Par défaut, les exceptions levées par du code WebAssembly n'incluent pas la pile d'appels. Si le code WebAssembly doit fournir une pile d'appels, il doit appeler une fonction JavaScript pour créer l'exception et passer le paramètre <code>options.traceStack=true</code> au <a href=\"/fr/docs/WebAssembly/JavaScript_interface/Exception/Exception\">constructeur</a>. La machine virtuelle peut ensuite attacher la pile d'appels à l'exception lorsqu'elle est levée.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note :</strong> Les traces de pile d'appels ne sont pas envoyées par défaut depuis du code WebAssembly afin d'améliorer les performances. La possibilité d'ajouter les traces de pile d'appels à ces exceptions est un outil pour le développement, il ne s'agit pas d'une pratique recommandée plus largement.</p>\n</div>"}},{"type":"prose","value":{"id":"valeur","title":"Valeur","isH3":false,"content":"<p>Une chaîne de caractères <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>DOMString</code></a> contenant la pile d'appels, ou <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> si aucune trace n'a été affectée.</p>\n<p>La chaîne de caractères décrivant la pile d'appels liste les emplacements de chaque opération de la pile, au format WebAssembly. Il s'agit d'une chaîne de caractères, lisible par un humain, qui indique l'URL, le nom du type de fonction appelé, l'indice de la fonction et son décalage au sein du module binaire. Elle a approximativement ce format (voir <a href=\"https://webassembly.github.io/spec/web-api/index.html#conventions\" class=\"external\" rel=\" noopener\">les conventions quant à la pile d'appels</a> dans la spécification pour plus d'informations)&nbsp;:</p>\n<pre class=\"notranslate\">${url}:wasm-function[${funcIndex}]:${pcOffset}\n</pre>"}},{"type":"prose","value":{"id":"exemples","title":"Exemples","isH3":false,"content":"<p>Dans l'exemple qui suit, on illustre comment lever une exception depuis du code WebAssembly et qui contient une trace de pile d'appels.</p>\n<p>Prenons le code WebAssembly suivant et supposons qu'il soit compilé dans un fichier intitulé <strong>exemple.wasm</strong>. On y importe une balise à laquelle on fait référence, en interne, avec <code>$tagname</code> et on importe une fonction à laquelle on fait référence avec <code>$throwExnWithStack</code>. Ce module exporte la méthode <code>run1</code> qui peut être appelée depuis le code externe afin d'appeler <code>$throwExnWithStack</code> (et donc la fonction JavaScript).</p>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n  <span class=\"token comment\">;; On importe la balise à laquelle on fera référence avec $tagname</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span> <span class=\"token string\">\"extmod\"</span> <span class=\"token string\">\"exttag\"</span> <span class=\"token punctuation\">(</span>tag <span class=\"token variable\">$tagname</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">;; On importe la fonction à laquelle on fera référence avec $throwExnWithStack</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span> <span class=\"token string\">\"extmod\"</span> <span class=\"token string\">\"throwExnWithStack\"</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$throwExnWithStack</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">;; On appelle $throwExnWithStack en passant 42 comme paramètre</span>\n      <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"run1\"</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">42</span>\n     <span class=\"token keyword\">call</span> <span class=\"token variable\">$throwExnWithStack</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>Le code JavaScript qui suit définit une nouvelle balise <code>tag</code> et la fonction <code>throwExceptionWithStack</code>. Ceux-ci sont passés au module WebAssembly via <code>importObject</code> lors de son instanciation.</p>\n<p>Une fois le fichier instancié, le code appelle la méthode WebAssembly <code>run1()</code>, qui déclenchera immédiatement l'exception. La pile d'appels est alors affichée dans la console dans l'instruction <code>catch</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> tag <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Tag</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">parameters</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'i32'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">throwExceptionWithStack</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Note : on déclare l'exception avec '{traceStack: true}'</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Exception</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>param<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">traceStack</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Note : les propriétés d'importObject correspondent aux instructions d'import WebAssembly.</span>\n<span class=\"token keyword\">const</span> importObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"extmod\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"exttag\"</span><span class=\"token operator\">:</span> tag<span class=\"token punctuation\">,</span> <span class=\"token string-property property\">\"throwExnWithStack\"</span><span class=\"token operator\">:</span> throwExceptionWithStack<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\nWebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'exemple.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> importObject <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">run1</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// On ne fait rien avec la valeur passée</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">stack : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> e<span class=\"token punctuation\">.</span>stack <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Affichera dans la console quelque chose comme :</span>\n<span class=\"token comment\">// stack: throwExceptionWithStack@http://&lt;url&gt;/main.js:76:9</span>\n<span class=\"token comment\">// @http://&lt;url&gt;/exemple.wasm:wasm-function[3]:0x73</span>\n<span class=\"token comment\">// @http://&lt;url&gt;/main.js:82:38</span>\n</code></pre></div>\n<p>La partie la plus «&nbsp;intéressante&nbsp;» du code est ici la ligne où l'exception est créée&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Exception</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>param<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">traceStack</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>En passant <code>{traceStack: true}</code>, on indique à la machine virtuelle WebAssembly qu'il faut attacher la pile d'appels à l'exception. Sans cette option, la propriété portant la pile aurait valu <code>undefined</code>.</p>"}},{"type":"specifications","value":{"title":"Spécifications","id":"spécifications","isH3":false,"query":"javascript.builtins.WebAssembly.Exception.stack","specifications":[]}},{"type":"browser_compatibility","value":{"title":"Compatibilité des navigateurs","id":"compatibilité_des_navigateurs","isH3":false,"data":null,"query":"javascript.builtins.WebAssembly.Exception.stack","browsers":null}},{"type":"prose","value":{"id":"voir_aussi","title":"Voir aussi","isH3":false,"content":"<ul>\n  <li><a href=\"/fr/docs/WebAssembly\">Aperçu général de WebAssembly</a></li>\n  <li><a href=\"/fr/docs/WebAssembly/Concepts\">Concepts WebAssembly</a></li>\n  <li><a href=\"/fr/docs/WebAssembly/Using_the_JavaScript_API\">Utiliser l'API JavaScript WebAssembly</a></li>\n</ul>"}}],"toc":[{"text":"Valeur","id":"valeur"},{"text":"Exemples","id":"exemples"},{"text":"Spécifications","id":"spécifications"},{"text":"Compatibilité des navigateurs","id":"compatibilité_des_navigateurs"},{"text":"Voir aussi","id":"voir_aussi"}],"summary":"La propriété en lecture seule stack, rattachée à une instance d'Exception peut contenir une trace de pile d'appels pour une exception levée par du code WebAssembly.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"WebAssembly.Exception.prototype.stack","locale":"en-US","native":"English (US)"}],"source":{"folder":"fr/webassembly/javascript_interface/exception/stack","github_url":"https://github.com/mdn/translated-content/blob/main/files/fr/webassembly/javascript_interface/exception/stack/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/fr/docs/WebAssembly","title":"WebAssembly"},{"uri":"/fr/docs/WebAssembly/JavaScript_interface","title":"WebAssembly"},{"uri":"/fr/docs/WebAssembly/JavaScript_interface/Exception","title":"WebAssembly.Exception"},{"uri":"/fr/docs/WebAssembly/JavaScript_interface/Exception/stack","title":"WebAssembly.Exception.prototype.stack"}],"pageTitle":"WebAssembly.Exception.prototype.stack - WebAssembly | MDN","noIndexing":false}}