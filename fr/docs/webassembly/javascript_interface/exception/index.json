{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"WebAssembly.Exception","mdn_url":"/fr/docs/WebAssembly/JavaScript_interface/Exception","locale":"fr","native":"Français","sidebarHTML":"<ol><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects\">Objets standards</a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface\"><code>WebAssembly</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Méthodes</strong></a><ol><li><a href=\"/fr/docs/WebAssembly/JavaScript_interface/compile\"><code>WebAssembly.compile()</code></a></li><li><a href=\"/fr/docs/WebAssembly/JavaScript_interface/compileStreaming\"><code>WebAssembly.compileStreaming()</code></a></li><li><a href=\"/fr/docs/WebAssembly/JavaScript_interface/instantiate\"><code>WebAssembly.instantiate()</code></a></li><li><a href=\"/fr/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code></a></li><li><a href=\"/fr/docs/WebAssembly/JavaScript_interface/validate\"><code>WebAssembly.validate()</code></a></li></ol></li><li><strong>Pages similaires&nbsp;:</strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/Module\"><code>WebAssembly.Module</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/Global\"><code>WebAssembly.Global</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/Instance\"><code>WebAssembly.Instance</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/Memory\"><code>WebAssembly.Memory</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/Table\"><code>WebAssembly.Table</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/CompileError\"><code>WebAssembly.CompileError</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/LinkError\"><code>WebAssembly.LinkError</code></a></strong></li><li><strong><a href=\"/fr/docs/WebAssembly/JavaScript_interface/RuntimeError\"><code>WebAssembly.RuntimeError</code></a></strong></li><li><strong>Héritage&nbsp;:</strong></li><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Propriétés</strong></a><ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Méthodes</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Un objet <strong><code>WebAssembly.Exception</code></strong> représente une exception d'exécution levée depuis WebAssembly vers JavaScript ou levée depuis JavaScript vers un gestionnaire d'exception WebAssembly.</p>\n<p>Le <a href=\"/fr/docs/WebAssembly/JavaScript_interface/Exception/Exception\">constructeur</a> prend comme arguments un objet <a href=\"/fr/docs/WebAssembly/JavaScript_interface/Tag\"><code>WebAssembly.Tag</code></a>, un tableau de valeurs et un objet <code>options</code>.</p>\n<p>La balise fournie par l'objet <code>WebAssembly.Tag</code> définit de façon unique le <em>type</em> d'une exception, en incluant l'ordre de ses arguments et leurs types de données. Il est nécessaire d'utiliser la même balise que celle utilisée pour la création de l'objet <code>Exception</code> afin d'accéder aux arguments de l'exception déclenchée.</p>\n<p>Différentes méthodes existent pour tester la correspondance entre une exception et une balise donnée, et pour obtenir une valeur particulière par indice (si l'exception correspond à la balise indiquée).</p>\n<p>Le code JavaScript ou d'autre code côté client peut uniquement accéder aux valeurs des exceptions WebAssembly lorsque la balise associée est partagée (on ne peut pas utiliser une autre balise qui ne fait que définir les mêmes types de données). Sans balise correspondante, les exceptions peuvent être interceptées et réémises, mais elles ne peuvent pas être inspectées.</p>\n<p>Afin que l'émission des exceptions soit plus rapide, les exceptions levées depuis WebAssembly n'incluent généralement pas la pile d'appels (<i lang=\"en\">stack trace</i>). Le code WebAssembly qui doit fournir une pile d'appels doit appeler une fonction JavaScript pour créer l'exception en passant le paramètre <code>options.traceStack=true</code> au constructeur. Une fois l'exception disponible pour le module WebAssembly, il peut y attacher une pile d'appels via la propriété <a href=\"/fr/docs/WebAssembly/JavaScript_interface/Exception/stack\"><code>stack</code></a> puis lever l'exception.</p><div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note:</strong> Cette fonctionnalité est disponible via les <a href=\"/fr/docs/Web/API/Web_Workers_API\">Web Workers</a></p>\n</div>"}},{"type":"prose","value":{"id":"constructeur","title":"Constructeur","isH3":false,"content":"<dl>\n  <dt id=\"webassembly.exception\"><a href=\"/fr/docs/WebAssembly/JavaScript_interface/Exception/Exception\"><code>WebAssembly.Exception()</code></a></dt>\n  <dd>\n    <p>Crée un nouvel objet <code>WebAssembly.Exception</code>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"méthodes_des_instansces","title":"Méthodes des instansces","isH3":false,"content":"<dl>\n  <dt id=\"exception.prototype.is\"><a href=\"/fr/docs/WebAssembly/JavaScript_interface/Exception/is\"><code>Exception.prototype.is()</code></a></dt>\n  <dd>\n    <p>Teste si une exception correspond à une balise donnée.</p>\n  </dd>\n  <dt id=\"exception.prototype.getarg\"><a href=\"/fr/docs/WebAssembly/JavaScript_interface/Exception/getArg\"><code>Exception.prototype.getArg()</code></a></dt>\n  <dd>\n    <p>Renvoie les champs de données d'une exception qui correspond à la balise donnée.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"propriétés_des_instances","title":"Propriétés des instances","isH3":false,"content":"<dl>\n  <dt id=\"exception.prototype.stack\"><a href=\"/fr/docs/WebAssembly/JavaScript_interface/Exception/stack\"><code>Exception.prototype.stack</code></a></dt>\n  <dd>\n    <p>Renvoie la pile d'appels de l'exception, ou <code>undefined</code>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"exemples","title":"Exemples","isH3":false,"content":"<p>Dans cet exemple, on montre comment définir une balise et l'importer dans un module, puis on l'utilise afin de lever une exception interceptée en JavaScript.</p>\n<p>Prenons le code WebAssembly suivant et supposons qu'il soit compilé dans un fichier nommé <strong>exemple.wasm</strong>.</p>\n<ul>\n  <li>Le module importe une balise à laquelle il est fait référence par <code>$tagname</code> et qui a un unique paramètre de type <code>i32</code>. La balise doit être passée en utilisant le module <code>extmod</code> et la balise <code>exttag</code>.</li>\n  <li>La fonction <code>$throwException</code> lève une exception à l'aide du mot-clé <code>throw</code>, en prenant en argument <code>$tagname</code> et le paramètre.</li>\n  <li>Le module exporte la fonction <code>run1()</code> qui lève une exception avec la valeur \"42\".</li>\n</ul>\n<div class=\"code-example\"><pre class=\"brush: wasm notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n  <span class=\"token comment\">;; on importe la balise qui sera ici désignée par $tagname</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span> <span class=\"token string\">\"extmod\"</span> <span class=\"token string\">\"exttag\"</span> <span class=\"token punctuation\">(</span>tag <span class=\"token variable\">$tagname</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">;; la fonction $throwException utilise un paramètre i32 pour l'exception $tagname</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$throwException</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span>.get <span class=\"token number\">0</span>\n    throw <span class=\"token variable\">$tagname</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">;; La fonction exportée \"run1\" appelle $throwException</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"run1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>const</span> <span class=\"token number\">42</span>\n    <span class=\"token keyword\">call</span> <span class=\"token variable\">$throwException</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>Le fragment de code qui suit appelle <a href=\"/fr/docs/WebAssembly/JavaScript_interface/instantiateStreaming\"><code>WebAssembly.instantiateStreaming</code></a> pour importer le fichier <strong>exemple.wasm</strong>, en lui passant un «&nbsp;objet d'import&nbsp;» (<code>importObject</code>) qui inclue une nouvelle balise (<a href=\"/fr/docs/WebAssembly/JavaScript_interface/Tag\"><code>WebAssembly.Tag</code></a>) intitulée <code>tag_to_import</code>. L'objet d'import définit un objet dont les propriétés correspondent à l'instruction <code>import</code> du code WebAssembly.</p>\n<p>Une fois le fichier instancié, le code appelle la méthode WebAssembly exportée <code>run1()</code>, qui lèvera immédiatement une exception.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> tag_to_import <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Tag</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">parameters</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'i32'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Note : les propriétés de l'objet d'import correspondent à l'instruction</span>\n<span class=\"token comment\">// WebAssembly import</span>\n<span class=\"token keyword\">const</span> importObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">\"extmod\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"exttag\"</span><span class=\"token operator\">:</span> tag_to_import<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\nWebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiateStreaming</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'exemple.wasm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> importObject <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">run1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> e <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// On vérifie qu'on a la bonne balise pour l'exception</span>\n    <span class=\"token comment\">// Si c'est le cas, on utilise getArg() afin de l'inspecter</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tag_to_import</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">getArg 0 : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getArg</span><span class=\"token punctuation\">(</span>tag_to_import<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Affichage dans la console</span>\nexemple<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">40</span> WebAssembly<span class=\"token punctuation\">.</span>Exception<span class=\"token operator\">:</span> wasm exception\nexemple<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">41</span> getArg <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token number\">42</span>\n</code></pre></div>\n<p>L'exception est interceptée en JavaScript à l'aide d'un bloc <code>catch</code>. On peut voir qu'elle est de type <code>WebAssembly.Exception</code>, mais si on ne dispose pas de la bonne balise, on ne pourrait pas en savoir grand-chose de plus.</p>\n<p>Ici, nous connaissons la balise et on utilise donc <a href=\"/fr/docs/WebAssembly/JavaScript_interface/Exception/is\"><code>Exception.prototype.is()</code></a> afin de vérifier que c'est la bonne balise. C'est bien le cas et on appelle <a href=\"/fr/docs/WebAssembly/JavaScript_interface/Exception/getArg\"><code>Exception.prototype.getArg()</code></a> qui permet de lire la valeur \"42\".</p>"}},{"type":"specifications","value":{"title":"Spécifications","id":"spécifications","isH3":false,"query":"javascript.builtins.WebAssembly.Exception","specifications":[]}},{"type":"browser_compatibility","value":{"title":"Compatibilité des navigateurs","id":"compatibilité_des_navigateurs","isH3":false,"data":null,"query":"javascript.builtins.WebAssembly.Exception","browsers":null}},{"type":"prose","value":{"id":"voir_aussi","title":"Voir aussi","isH3":false,"content":"<ul>\n  <li><a href=\"/fr/docs/WebAssembly\">Aperçu général de WebAssembly</a></li>\n  <li><a href=\"/fr/docs/WebAssembly/Concepts\">Concepts WebAssembly</a></li>\n  <li><a href=\"/fr/docs/WebAssembly/Using_the_JavaScript_API\">Utiliser l'API JavaScript WebAssembly</a></li>\n</ul>"}}],"toc":[{"text":"Constructeur","id":"constructeur"},{"text":"Méthodes des instansces","id":"méthodes_des_instansces"},{"text":"Propriétés des instances","id":"propriétés_des_instances"},{"text":"Exemples","id":"exemples"},{"text":"Spécifications","id":"spécifications"},{"text":"Compatibilité des navigateurs","id":"compatibilité_des_navigateurs"},{"text":"Voir aussi","id":"voir_aussi"}],"summary":"Un objet WebAssembly.Exception représente une exception d'exécution levée depuis WebAssembly vers JavaScript ou levée depuis JavaScript vers un gestionnaire d'exception WebAssembly.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"WebAssembly.Exception","locale":"en-US","native":"English (US)"}],"source":{"folder":"fr/webassembly/javascript_interface/exception","github_url":"https://github.com/mdn/translated-content/blob/main/files/fr/webassembly/javascript_interface/exception/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/fr/docs/WebAssembly","title":"WebAssembly"},{"uri":"/fr/docs/WebAssembly/JavaScript_interface","title":"WebAssembly"},{"uri":"/fr/docs/WebAssembly/JavaScript_interface/Exception","title":"WebAssembly.Exception"}],"pageTitle":"WebAssembly.Exception - WebAssembly | MDN","noIndexing":false}}