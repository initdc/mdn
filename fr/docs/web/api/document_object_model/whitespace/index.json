{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Gestion des espaces dans le DOM","mdn_url":"/fr/docs/Web/API/Document_Object_Model/Whitespace","locale":"fr","native":"Français","sidebarHTML":"","body":[{"type":"prose","value":{"id":"le_problème","title":"Le problème","isH3":false,"content":"<p>La présence d'espaces et de blancs dans le <a href=\"fr/DOM\">DOM</a> peut rendre la manipulation de l'arbre de contenu difficile dans des aspects qu'on ne prévoit pas forcément. Dans Mozilla, tous les espaces et blancs dans le contenu texte du document original sont représentés dans le DOM (cela ne concerne pas les blancs à l'intérieur des balises). (C'est nécessaire en interne afin que l'éditeur puisse conserver le formatage des documents et que l'instruction <code>white-space: pre</code> en <a href=\"fr/CSS\">CSS</a> fonctionne.) Cela signifie que&nbsp;:</p>\n<ul>\n  <li>il y aura certains nœuds texte qui ne contiendront que du vide, et</li>\n  <li>certains nœuds texte commenceront ou se termineront par des blancs.</li>\n</ul>\n<p>En d'autres termes, l'arbre DOM pour le document qui suit ressemblera à l'image ci-dessous (où «&nbsp;\\n&nbsp;» représente un retour à la ligne)&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token comment\">&lt;!-- My document --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>My Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>Header<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n    Paragraph\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>\n  <img src=\"/en-US/docs/Web/API/Document_Object_Model/Whitespace/dom-string.png\" alt=\"Arbre du DOM équivalent à l'exemple HTML ci-avant\" width=\"562\" height=\"288\" loading=\"lazy\">\n</p>\n<p>Ceci peut rendre les choses un peu plus difficiles pour les utilisateurs du DOM qui aimeraient parcourir le contenu, sans se préoccuper des blancs.</p>"}},{"type":"prose","value":{"id":"rendre_les_choses_plus_faciles","title":"Rendre les choses plus faciles","isH3":false,"content":"<p>On peut formater leur code comme indiqué ci-dessous pour contourner le problème:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token comment\">&lt;!-- jolie impression conventionnelle\n     avec des espaces entre les balises:\n --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Position 1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Position 2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Position 3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">&lt;!-- jolie impression adaptée au problème :\n --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n <span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span>\n  <span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Position 1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span>\n  <span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Position 2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span>\n  <span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Position 3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span>\n <span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span>\n<span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<p>Le code JavaScript ci-dessous définit plusieurs fonctions facilitant la manipulation d'espaces dans le DOM&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">/**\n * Tout au long, les espaces sont définis comme l'un des caractères\n *  \"\\t\" TAB \\u0009\n *  \"\\n\" LF  \\u000A\n *  \"\\r\" CR  \\u000D\n *  \" \"  SPC \\u0020\n *\n * Ceci n'utilise pas le \"\\s\" de Javascript parce que cela inclut le non-brisement\n * espaces (et aussi d'autres caractères).\n */</span>\n\n\n<span class=\"token comment\">/**\n * Détermine si le contenu du texte d'un nœud est entièrement blanc.\n *\n * @param nod Un nœud implémentant l'interface |CharacterData| (c'est-à-dire,\n *             un nœud |Text|, |Comment| ou |CDATASection|\n * @return     True (vrai) Si tout le contenu du texte du |nod| est un espace,\n *             sinon false (faux).\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">is_all_ws</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">nod</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Utilise ECMA-262 Edition 3 chaînes et fonctionnalités RegExp</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[^\\t\\n\\r ]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>nod<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">/**\n * Détermine si le nœud doit être ignoré par les fonctions d'itération.\n *\n * @param nod Un objet implémentant l'interface DOM1 |Node|.\n * @return     true (vrai) si le nœud est :\n *                1) un nœud |Text| qui est tout en espace\n *                2) un nœud |Comment|\n *             et autrement false (faux).\n */</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">is_ignorable</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">nod</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> nod<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">==</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token comment\">// un nœud commentaire</span>\n         <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>nod<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">is_all_ws</span><span class=\"token punctuation\">(</span>nod<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// un nœud texte, tout espace</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Version de |previousSibling| qui ignore les nœuds qui sont entièrement\n * espace ou commentaire.  (Normalement |previousSibling| est une propriété\n * de tous les nœuds DOM qui donnent le nœud frère, le nœud qui est\n * un enfant du même parent, qui se produit immédiatement avant le\n * nœud référence.)\n *\n * @param sib Le nœud référence .\n * @return     soit :\n *               1) le frère précédent le plus proche de |sib| qui ne peut\n *                  être ignoré du fait de la fonction |is_ignorable|, ou\n *               2) null si aucun nœud n'existe.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">node_before</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">sib</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sib <span class=\"token operator\">=</span> sib<span class=\"token punctuation\">.</span>previousSibling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_ignorable</span><span class=\"token punctuation\">(</span>sib<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> sib<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Version de |nextSibling| qui ignore les nœuds qui sont entièrement\n * espace ou commentaire.\n *\n * @param sib Le nœud référence .\n * @return     soit :\n *               1) le frère précédent le plus proche de |sib| qui ne peut\n *                  être ignoré du fait de la fonction |is_ignorable|, ou\n *               2) null si aucun nœud n'existe.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">node_after</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">sib</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sib <span class=\"token operator\">=</span> sib<span class=\"token punctuation\">.</span>nextSibling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_ignorable</span><span class=\"token punctuation\">(</span>sib<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> sib<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Version de |lastChild| qui ignore les nœuds qui sont entièrement\n * espace ou commentaire. (Normalement |lastChild| est une propriété\n * de tous les nœuds DOM qui donnent le dernier des nœuds contenus\n * directement dans le nœud de référence.)\n *\n * @param sib Le nœud référence.\n * @return     soit :\n *               1) Le dernier enfant de |sib| qui ne peut\n *                  être ignoré du fait de la fonction |is_ignorable|, ou\n *               2) null si aucun nœud n'existe.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">last_child</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">par</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> res<span class=\"token operator\">=</span>par<span class=\"token punctuation\">.</span>lastChild<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_ignorable</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    res <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>previousSibling<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Version de |firstChild| qui ignore les nœuds qui sont entièrement\n * espace ou commentaire..\n *\n * @param sib le nœud référence.\n * @return     soit:\n *               1) le nœud premier enfant de |sib| qui ne peut\n *                  être ignoré du fait de la fonction |is_ignorable|, ou\n *               2) null si aucun nœud n'existe.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">first_child</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">par</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> res<span class=\"token operator\">=</span>par<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_ignorable</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    res <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>nextSibling<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Version de |data| cela n'inclut pas les espaces au début\n * et termine et normalise tous les espaces dans un seul espace. (Normalement\n * |data | est une propriété des nœuds de texte qui donne le texte du nœud.)\n *\n * @param txt Le nœud de texte dont les données doivent être renvoyées\n * @return     Une chaîne donnant le contenu du nœud de texte avec\n *             espace blanc s'est effondré.\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">data_of</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">txt</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> txt<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Utilise ECMA-262 Edition 3 chaînes et fonctionnalités RegExp</span>\n  data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\t\\n\\r ]+</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n    data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n    data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"exemple","title":"Exemple","isH3":false,"content":"<p>Le code qui suit montre l'utilisation des fonctions présentées plus haut. Il parcourt les enfants d'un élément (dont les enfants sont tous des éléments) pour trouver celui dont le texte est <code>\"Ceci est le troisième paragraphe\"</code>, et change ensuite l'attribut <code>class</code> et le contenu de ce paragraphe.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> cur <span class=\"token operator\">=</span> <span class=\"token function\">first_child</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">data_of</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"This is the third paragraph.\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n      cur<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">\"magic\"</span><span class=\"token punctuation\">;</span>\n      cur<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">\"This is the magic paragraph.\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  cur <span class=\"token operator\">=</span> <span class=\"token function\">node_after</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}}],"toc":[{"text":"Le problème","id":"le_problème"},{"text":"Rendre les choses plus faciles","id":"rendre_les_choses_plus_faciles"},{"text":"Exemple","id":"exemple"}],"summary":"La présence d'espaces et de blancs dans le DOM peut rendre la manipulation de l'arbre de contenu difficile dans des aspects qu'on ne prévoit pas forcément. Dans Mozilla, tous les espaces et blancs dans le contenu texte du document original sont représentés dans le DOM (cela ne concerne pas les blancs à l'intérieur des balises). (C'est nécessaire en interne afin que l'éditeur puisse conserver le formatage des documents et que l'instruction white-space: pre en CSS fonctionne.) Cela signifie que :","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"How whitespace is handled by HTML, CSS, and in the DOM","locale":"en-US","native":"English (US)"},{"title":"Cómo manejan el espacio en blanco HTML, CSS y el DOM","locale":"es","native":"Español"},{"title":"ホワイトスペースは HTML、 CSS、そして DOM 内でどう扱われるか","locale":"ja","native":"日本語"},{"title":"Whitespace no DOM","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"DOM 中的空白符","locale":"zh-CN","native":"中文 (简体)"},{"title":"DOM 中的空白字元","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"fr/web/api/document_object_model/whitespace","github_url":"https://github.com/mdn/translated-content/blob/main/files/fr/web/api/document_object_model/whitespace/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/fr/docs/Web","title":"Technologies web pour développeurs"},{"uri":"/fr/docs/Web/API","title":"Référence Web API"},{"uri":"/fr/docs/Web/API/Document_Object_Model","title":"Référence du DOM"},{"uri":"/fr/docs/Web/API/Document_Object_Model/Whitespace","title":"Gestion des espaces dans le DOM"}],"pageTitle":"Gestion des espaces dans le DOM - Référence Web API | MDN","noIndexing":false}}