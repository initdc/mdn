{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Écrire un serveur WebSocket en Java","mdn_url":"/fr/docs/Web/API/WebSockets_API/Writing_a_WebSocket_server_in_Java","locale":"fr","native":"Français","sidebarHTML":"","body":[{"type":"prose","value":{"id":"introduction","title":"Introduction","isH3":false,"content":"<p>Cet exemple montre comment créer un serveur d'API WebSocket API utilisant Java d'Oracle.</p>\n<p>Bien que d'autres languages exécutés côté serveur peuvent être utilisés pour créer un serveur de WebSocket, cet exemple utilise Java d'Oracle pour simplifier le code en exemple.</p>\n<p>Ce serveur respecte la <a href=\"https://datatracker.ietf.org/doc/html/rfc6455\" class=\"external\" rel=\" noopener\">RFC 6455</a>, dont il prend uniquement en charge les connexions depuis Chrome 16, Firefox 11, IE 10 et au-delà.</p>"}},{"type":"prose","value":{"id":"premiers_pas","title":"Premiers pas","isH3":false,"content":"<p>WebSockets communique via une connexion <a href=\"http://en.wikipedia.org/wiki/Transmission_Control_Protocol\" class=\"external\" rel=\" noopener\">TCP (Transmission Control Protocol)</a>. La classe Java <a href=\"https://docs.oracle.com/javase/8/docs/api/java/net/ServerSocket.html\" class=\"external\" rel=\" noopener\">ServerSocket</a> est située dans le paquet <em>java.net</em>.</p>"}},{"type":"prose","value":{"id":"serversocket","title":"ServerSocket","isH3":true,"content":"<p>Constructeur :</p>\n<div class=\"code-example\"><pre class=\"brush: java notranslate\"><code><span class=\"token class-name\">ServerSocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> port<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>Lors de l'instanciation de la classe ServerSocket, celle-ci est liée au numéro de port renseigné par le paramètre <em>port</em>.</p>\n<p>Voici comment implémenter ce que nous venons d'apprendre :</p>\n<div class=\"code-example\"><pre class=\"brush: java notranslate\"><code><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServerSocket</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Socket</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Server</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ServerSocket</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerSocket</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Démarrage du serveur sur 127.0.0.1:80.\\r\\nAttente d’une connexion...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Socket</span> client <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Un client s’est connecté.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"socket","title":"Socket","isH3":true,"content":"<p>Méthodes :</p>\n<ul>\n  <li>\n    <code>java.net.</code><a href=\"https://docs.oracle.com/javase/8/docs/api/java/net/Socket.html\" class=\"external\" rel=\" noopener\">Socket</a> <code>getInputStream()</code>\n    Renvoie un flux d’entrée pour ce socket.\n  </li>\n  <li>\n    <code>java.net.</code><a href=\"https://docs.oracle.com/javase/8/docs/api/java/net/Socket.html\" class=\"external\" rel=\" noopener\">Socket</a> <code>getOutputStream()</code>\n    Renvoie un flux sortant pour ce socket.\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"outputstream","title":"OutputStream","isH3":true,"content":"<p>Méthode :</p>\n<div class=\"code-example\"><pre class=\"brush: java notranslate\"><code><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> off<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>En débutant à partir de la position <em>off</em>, écrit <em><code>len</code></em> octets du tableau d'octets fourni.</p>"}},{"type":"prose","value":{"id":"inputstream","title":"InputStream","isH3":true,"content":"<p>Méthodes :</p>\n<div class=\"code-example\"><pre class=\"brush: java notranslate\"><code><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> off<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>Reads up to <em>len</em> bytes of data from the input stream into an array of bytes.</p>\n<p>Lit jusqu'à <em>len</em> octets de données depuis source d'entrée dans un tableau d'octets.</p>\n<p>Développons notre exemple.</p>\n<div class=\"code-example\"><pre class=\"brush: java notranslate\"><code><span class=\"token class-name\">Socket</span> client <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Un client s’est connecté.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">InputStream</span> in <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">OutputStream</span> out <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">useDelimiter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\r\\\\n\\\\r\\\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"établissement_d‘une_liaison_handshaking","title":"Établissement d‘une liaison (handshaking)","isH3":false,"content":"<p>Quand un client se connecte à un serveur, il envoit une requête GET pour passer à une connexion WebSocket à partir d'une simple connexion HTTP. Ceci est appelé l’établissement d’une liaison.</p>\n<div class=\"code-example\"><pre class=\"brush: java notranslate\"><code><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>regex<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Matcher</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>regex<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//translate bytes of request to string</span>\n<span class=\"token class-name\">String</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">,</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">useDelimiter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\r\\\\n\\\\r\\\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Matcher</span> get <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^GET\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>get<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Créer une réponse est plus facile que de comprendre pourquoi vous devez le faire comme ça.</p>\n<p>Vous devez,</p>\n<ol>\n  <li>obtenir la valeur de la requête d’entête <em>Sec-WebSocket-Key</em> sans aucun espacement;</li>\n  <li>la lier avec « 258EAFA5-E914-47DA-95CA-C5AB0DC85B11 »;</li>\n  <li>en calculer les codes SHA-1 et Base64;</li>\n  <li>renvoyer le résultat comme valeur de l'entête de réponse <em>Sec-WebSocket-Accept</em> qui sera une partie d’une réponse HTTP.</li>\n</ol>\n<div class=\"code-example\"><pre class=\"brush: java notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>get<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Matcher</span> match <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sec-WebSocket-Key: (.*)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    match<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"HTTP/1.1 101 Switching Protocols\\r\\n\"</span>\n            <span class=\"token operator\">+</span> <span class=\"token string\">\"Connection: Upgrade\\r\\n\"</span>\n            <span class=\"token operator\">+</span> <span class=\"token string\">\"Upgrade: websocket\\r\\n\"</span>\n            <span class=\"token operator\">+</span> <span class=\"token string\">\"Sec-WebSocket-Accept: \"</span>\n            <span class=\"token operator\">+</span> <span class=\"token class-name\">DatatypeConverter</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">printBase64Binary</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token class-name\">MessageDigest</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SHA-1\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">+</span> <span class=\"token string\">\"\\r\\n\\r\\n\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"décoder_les_messages","title":"Décoder les messages","isH3":false,"content":"<p>Après l’établissement réussie d’une liaison, le client peut transmettre des messages au serveur, ils seront désormais encodés.</p>\n<p>Si nous envoyons « abcdef », nous obtenons :</p>\n<table>\n  <tbody>\n    <tr>\n      <td>129</td>\n      <td>134</td>\n      <td>167</td>\n      <td>225</td>\n      <td>225</td>\n      <td>210</td>\n      <td>198</td>\n      <td>131</td>\n      <td>130</td>\n      <td>182</td>\n      <td>194</td>\n      <td>135</td>\n    </tr>\n  </tbody>\n</table>\n<p>- 129:</p>\n<table>\n  <thead>\n    <tr>\n      <th>FIN (est-ce la totalité du message ?)</th>\n      <th>RSV1</th>\n      <th>RSV2</th>\n      <th>RSV3</th>\n      <th>Opcode</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0x1=0001</td>\n    </tr>\n  </tbody>\n</table>\n<p>\n  FIN : votre message peut être transmis en plusieurs morceaux, mais restons simple pour l’instant.\n  Opcode <em>0x1</em> signifie que ceci est un texte. <a href=\"https://tools.ietf.org/html/rfc6455#section-5.2\" class=\"external\" rel=\" noopener\">Liste exhaustive des Opcodes</a>\n</p>\n<p>- 134:</p>\n<p>If the second byte minus 128 is between 0 and 125, this is the length of the message. If it is 126, the following 2 bytes (16-bit unsigned integer), if 127, the following 8 bytes (64-bit unsigned integer, the most significant bit MUST be 0) are the length.</p>\n<p>Si le second octet moins 128 est entre 0 et 125, alors il s’agit de la longueur du message. Si c’est 126, les deux octets suivants (entier non signé de 16-bits), si c’est 127, les huit octets suivants (entier non signé de 64-bis, dont le poid ford doit être 0) sont la longueur.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note :</strong> Je peux prendre 128 car le premier bit est toujours 1.</p>\n</div>\n<p>- 167, 225, 225 et 210 sont les octets de la clef à décoder. Cela change en permanence.</p>\n<p>- Les octets encodés restants constituent le message.</p>"}},{"type":"prose","value":{"id":"algorithme_de_décodage","title":"Algorithme de décodage","isH3":true,"content":"<p>octet décodé = octet encodé XOR (position de l’octet ET LOGIQUE 0x3)th octet de la clef</p>\n<p>Exemple en Java :</p>\n<div class=\"code-example\"><pre class=\"brush: java notranslate\"><code><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> decoded <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> encoded <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token number\">198</span><span class=\"token punctuation\">,</span> <span class=\"token number\">131</span><span class=\"token punctuation\">,</span> <span class=\"token number\">130</span><span class=\"token punctuation\">,</span> <span class=\"token number\">182</span><span class=\"token punctuation\">,</span> <span class=\"token number\">194</span><span class=\"token punctuation\">,</span> <span class=\"token number\">135</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> key <span class=\"token operator\">=</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token number\">167</span><span class=\"token punctuation\">,</span> <span class=\"token number\">225</span><span class=\"token punctuation\">,</span> <span class=\"token number\">225</span><span class=\"token punctuation\">,</span> <span class=\"token number\">210</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> encoded<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    decoded<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> key<span class=\"token punctuation\">[</span>i <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"voir_aussi","title":"Voir aussi","isH3":false,"content":"<ul>\n  <li><a href=\"/fr/docs/Web/API/WebSockets_API/Writing_WebSocket_servers\">Écriture de serveurs WebSocket</a></li>\n</ul>"}}],"toc":[{"text":"Introduction","id":"introduction"},{"text":"Premiers pas","id":"premiers_pas"},{"text":"Établissement d‘une liaison (handshaking)","id":"établissement_d‘une_liaison_handshaking"},{"text":"Décoder les messages","id":"décoder_les_messages"},{"text":"Voir aussi","id":"voir_aussi"}],"summary":"Cet exemple montre comment créer un serveur d'API WebSocket API utilisant Java d'Oracle.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Writing a WebSocket server in Java","locale":"en-US","native":"English (US)"},{"title":"Java で WebSocket サーバーを記述する","locale":"ja","native":"日本語"},{"title":"Writing a WebSocket server in Java","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"fr/web/api/websockets_api/writing_a_websocket_server_in_java","github_url":"https://github.com/mdn/translated-content/blob/main/files/fr/web/api/websockets_api/writing_a_websocket_server_in_java/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/fr/docs/Web","title":"Technologies web pour développeurs"},{"uri":"/fr/docs/Web/API","title":"Référence Web API"},{"uri":"/fr/docs/Web/API/WebSockets_API","title":"WebSockets"},{"uri":"/fr/docs/Web/API/WebSockets_API/Writing_a_WebSocket_server_in_Java","title":"Écrire un serveur WebSocket en Java"}],"pageTitle":"Écrire un serveur WebSocket en Java - Référence Web API | MDN","noIndexing":false}}