{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Appliquer des découpes simples","mdn_url":"/fr/docs/Web/API/WebGL_API/By_example/Basic_scissoring","locale":"fr","native":"Français","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/fr/docs/Web/API/WebGL_API/By_example/Color_masking\">« Précédent</a></li>\n    <li><a class=\"button minimal\" href=\"/fr/docs/Web/API/WebGL_API/By_example/Canvas_size_and_WebGL\">Suivant  »</a></li>\n</ul>\n<p>Dans cet article, on illustre comment dessiner des rectangles et des carrés grâce à des opérations de découpe simple (<em>scissoring</em>).</p><iframe class=\"sample-code-frame\" title=\"Appliquer les changements sur le buffer lors de la découpe sample\" id=\"frame_appliquer_les_changements_sur_le_buffer_lors_de_la_découpe\" width=\"660\" height=\"330\" src=\"https://yari-demos.prod.mdn.mozit.cloud/fr/docs/Web/API/WebGL_API/By_example/Basic_scissoring/_sample_.appliquer_les_changements_sur_le_buffer_lors_de_la_d%C3%A9coupe.html\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"appliquer_les_changements_sur_le_buffer_lors_de_la_découpe","title":"Appliquer les changements sur le <em>buffer</em> lors de la découpe","isH3":true,"content":"<p>Voici une démonstration simple des opérations appliquées sur le contexte de rendu avec la méthode <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderingContext/scissor\"><code>scissor</code> <small>(en-US)</small></a>.</p>\n<p>La commande <a href=\"/fr/docs/Web/API/WebGLRenderingContext/clear\" title=\"clear()\"><code>clear()</code></a> permet de dessiner la couleur d'applique (définie à l'aide de <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderingContext/clearColor\"><code>clearColor()</code> <small>(en-US)</small></a>) sur tous les pixels du tampon (<em>buffer</em>) de dessin. La commande <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderingContext/scissor\"><code>scissor()</code> <small>(en-US)</small></a> permet quant à elle de définir un masque qui permet de ne modifier que les pixels contenus dans un rectangle donné.</p>\n<p>Cet article représente une excellente occasion pour distinguer les <em>pixels</em> des <em>fragments</em>. Un pixel est un élément d'une image (en pratique c'est un point) sur l'écran ou un élément unique du tampon de dessin (l'espace mémoire qui contient les données relatives aux pixels comme les différentes composantes couleur). Un <em>fragment</em> fait référence au pixel manipulé par les processus <a href=\"/fr/docs/Glossary/WebGL\">WebGL</a>.</p>\n<p>Cette distinction existe car la couleur d'un fragment (et ses autres caractéristiques comme la profondeur) peut être manipulée et modifiée à plusieurs reprises avant d'être écrite à l'écran. On a déjà vu comment la couleur d'un fragment pouvait être modifiée au cours des opérations graphiques en appliquant un <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderingContext/colorMask\">masque de couleur <small>(en-US)</small></a>. Il existe d'autres cas où les fragments sont ignorés (le pixel n'est pass mis à jour) ou d'autres où ils interagissent avec la valeur du pixel existant (afin de fusionner les couleurs pour les éléments transparents qui composent une scène).</p>\n<p>Ici, on voit une autre distinction entre les fragments et les pixels. La découpe est une étape distincte du processus graphique de <a href=\"/fr/docs/Glossary/WebGL\">WebGL</a>/<a href=\"/fr/docs/Glossary/OpenGL\">OpenGL</a> (elle est traitée après l'applique de couleur et avant le masque de couleur). Avant que les pixels réels soient mis à jour, les fragments doivent passer le test de la découpe. S'ils réussissent ce test, ils continuent dans le processus de traitement et les pixels correspondants sont mis à jours. S'ils échouent, le processus rejette les fragments et ils ne sont plus gérés pour les traitements ultérieurs, les pixels correspondants ne seront pas mis à jour. Seuls les fragments appartenant à la zone rectangulaire donnée réussissent le test et seuls les pixels correspondants sont mis à jour. Au final, on obtient un rectangle qui est dessiné à l'écran.</p>\n<p>Par défaut, l'étape de découpe est désactivée dans le processus. Ici, on l'active avec la méthode <a href=\"/fr/docs/Web/API/WebGLRenderingContext/enable\" title=\"enable()\"><code>enable()</code></a> (<code>enable()</code> sera utilisée pour activer de nombreuses autres fonctionnalités liées à WebGL) avec la constante <code>SCISSOR_TEST</code>. Là aussi, on voit l'ordre généralement utilisé pour les commandes <a href=\"/fr/docs/Glossary/WebGL\">WebGL</a>. Tout d'abord, on modifie l'état de WebGL (ici on active le test de découpe et on crée un masque rectangulaire). Une fois que l'état a bien été modifié, on exécute les commandes de dessin (ici <code>clear()</code>) pour commencer le processus de traitement des fragments.</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Le résultat de la découpe.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>canvas</span><span class=\"token punctuation\">&gt;</span></span>Il semblerait que votre navigateur\n    ne supporte pas l'élément canvas.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>canvas</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: css notranslate\"><code><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">text-align</span> <span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">canvas</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span> <span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span> <span class=\"token punctuation\">:</span> 280px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span> <span class=\"token punctuation\">:</span> 210px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span> <span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span> <span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span> <span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span> <span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setupWebGL</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"use strict\"</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span>evt<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">,</span> setupWebGL<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> paragraph <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Les deux lignes suivantes définissent la taille,</span>\n  <span class=\"token comment\">// en pixels CSS, du buffer de dessin qui est la même</span>\n  <span class=\"token comment\">// que celle du canevas (définie avec CSS).</span>\n  canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span>clientWidth<span class=\"token punctuation\">;</span>\n  canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span>clientHeight<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> gl <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webgl\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">||</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"experimental-webgl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gl<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    paragraph<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"Échec de la récupération du \"</span>\n      <span class=\"token operator\">+</span> <span class=\"token string\">\"contexte WebGL. Votre navigateur pourrait ne pas \"</span>\n      <span class=\"token operator\">+</span> <span class=\"token string\">\"supporter WebGL.\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">viewport</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    gl<span class=\"token punctuation\">.</span>drawingBufferWidth<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span>drawingBufferHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// On applique une découpe et on définit la taille de</span>\n  <span class=\"token comment\">// la zone de découpe.</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">enable</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">SCISSOR_TEST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">scissor</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">170</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// On applique un jaune uni dans le contexte de rendu.</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">clearColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">COLOR_BUFFER_BIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Le code source de cet exemple est également disponible sur <a href=\"https://github.com/idofilin/webgl-by-example/tree/master/basic-scissoring\" class=\"external\" rel=\" noopener\">GitHub</a>.</p><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/fr/docs/Web/API/WebGL_API/By_example/Color_masking\">« Précédent</a></li>\n    <li><a class=\"button minimal\" href=\"/fr/docs/Web/API/WebGL_API/By_example/Canvas_size_and_WebGL\">Suivant  »</a></li>\n</ul>","titleAsText":"Appliquer les changements sur le buffer lors de la découpe"}}],"toc":[],"summary":"Dans cet article, on illustre comment dessiner des rectangles et des carrés grâce à des opérations de découpe simple (scissoring).","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Basic scissoring","locale":"en-US","native":"English (US)"},{"title":"Basic scissoring","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"fr/web/api/webgl_api/by_example/basic_scissoring","github_url":"https://github.com/mdn/translated-content/blob/main/files/fr/web/api/webgl_api/by_example/basic_scissoring/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/fr/docs/Web","title":"Technologies web pour développeurs"},{"uri":"/fr/docs/Web/API","title":"Référence Web API"},{"uri":"/fr/docs/Web/API/WebGL_API","title":"L'API WebGL : graphismes 2D et 3D pour le web"},{"uri":"/fr/docs/Web/API/WebGL_API/By_example","title":"WebGL par l'exemple"},{"uri":"/fr/docs/Web/API/WebGL_API/By_example/Basic_scissoring","title":"Appliquer des découpes simples"}],"pageTitle":"Appliquer des découpes simples - Référence Web API | MDN","noIndexing":false}}