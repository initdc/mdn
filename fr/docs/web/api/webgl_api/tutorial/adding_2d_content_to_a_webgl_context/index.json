{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Ajouter du contenu à WebGL","mdn_url":"/fr/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context","locale":"fr","native":"Français","sidebarHTML":"\n <ol>\n  <li><a href=\"/fr/docs/Web/API/WebGL_API\"><strong>WebGL API</strong></a></li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>WebGL tutoriel</summary>\n      <ol>\n        <li><a href=\"/fr/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\">Commencer avec WebGL</a></li>\n        <li><a href=\"/fr/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context\">Ajouter du contenu à WebGL</a></li>\n        <li><a href=\"/fr/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL\">Ajouter des couleurs avec les shaders</a></li>\n        <li><a href=\"/fr/docs/Web/API/WebGL_API/Tutorial/Animating_objects_with_WebGL\">Animer des objets avec WebGL</a></li>\n        <li><a href=\"/fr/docs/Web/API/WebGL_API/Tutorial/Creating_3D_objects_using_WebGL\">Créer des objets 3D avec WebGL</a></li>\n        <li><a href=\"/fr/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\">Utiliser les textures avec WebGL</a></li>\n        <li><a href=\"/fr/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL\">Lighting in WebGL</a></li>\n        <li><a href=\"/fr/docs/Web/API/WebGL_API/Tutorial/Animating_textures_in_WebGL\">Animating textures in WebGL</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Examples and articles</summary>\n      <ol>\n        <li><a href=\"/fr/docs/Web/API/WebGL_API/Matrix_math_for_the_web\">Matrix math for the web</a></li>\n        <li><a href=\"/fr/docs/Web/API/WebGL_API/WebGL_model_view_projection\">WebGL model view projection</a></li>\n        <li><a href=\"/fr/docs/Web/API/WebGL_API/WebGL_best_practices\">WebGL best practices</a></li>\n        <li><a href=\"/fr/docs/Web/API/WebGL_API/Using_Extensions\">Using WebGL extensions</a></li>\n        <li><a href=\"/fr/docs/Web/API/WebGL_API/Basic_2D_animation_example\">A basic 2D WebGL animation example</a></li>\n        <li><a href=\"/fr/docs/Web/API/WebGL_API/By_example\">WebGL by example</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Interfaces</summary>\n      <ol>\n        <li><a href=\"/fr/docs/Web/API/WebGLRenderingContext\"><code>WebGLRenderingContext</code></a></li>\n        <li><a href=\"/fr/docs/Web/API/WebGL2RenderingContext\"><code>WebGL2RenderingContext</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLActiveInfo\"><code>WebGLActiveInfo</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/fr/docs/Web/API/WebGLBuffer\"><code>WebGLBuffer</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLContextEvent\"><code>WebGLContextEvent</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/fr/docs/Web/API/WebGLFramebuffer\"><code>WebGLFramebuffer</code></a></li>\n        <li><a href=\"/fr/docs/Web/API/WebGLProgram\"><code>WebGLProgram</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLQuery\"><code>WebGLQuery</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderbuffer\"><code>WebGLRenderbuffer</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLSampler\"><code>WebGLSampler</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/fr/docs/Web/API/WebGLShader\"><code>WebGLShader</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLShaderPrecisionFormat\"><code>WebGLShaderPrecisionFormat</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLSync\"><code>WebGLSync</code> <small>(en-US)</small></a></li>\n        <li><a href=\"/fr/docs/Web/API/WebGLTexture\"><code>WebGLTexture</code></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLTransformFeedback\"><code>WebGLTransformFeedback</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLUniformLocation\"><code>WebGLUniformLocation</code> <small>(en-US)</small></a></li>\n        <li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLVertexArrayObject\"><code>WebGLVertexArrayObject</code> <small>(en-US)</small></a></li>\n      </ol>\n    </details>\n  </li>\n\n  <li><strong><a href=\"/fr/docs/MDN\">Documentation:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Contribuer</summary>\n      <ol>\n        <li><a href=\"/fr/docs/MDN\">Le projet MDN</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/fr/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\">« Précédent</a></li>\n    <li><a class=\"button minimal\" href=\"/fr/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL\">Suivant  »</a></li>\n</ul>\n<p>Une fois que vous avez correctement créé un contexte WebGL, vous pouvez commencer à y dessiner. Une chose simple que nous pouvons faire est de dessiner un simple carré 2D sans texture, commençons donc par là, en construisant un code pour dessiner un carré 2D.</p>"}},{"type":"prose","value":{"id":"dessiner_la_scène","title":"Dessiner la scène","isH3":false,"content":"<p>La chose la plus importante à comprendre avant que nous ne commencions est que, bien que nous dessinions seulement un carré 2D dans cet exemple, nous sommes toujours en train de dessiner dans un espace 3D. Nous dessinons juste un carré et nous le mettons exactement en face de la caméra, perpendiculairement à la direction de vision. Nous avons besoin de définir les shaders qui créeront la couleur pour notre scène simple, et qui dessineront notre objet. Cela définira comment notre carré 2D apparaîtra à l'écran.</p>"}},{"type":"prose","value":{"id":"les_shaders","title":"Les shaders","isH3":true,"content":"<p>Un shader est un programme, écrit en utilisant le <a href=\"https://www.khronos.org/files/opengles_shading_language.pdf\" class=\"external\" rel=\" noopener\">OpenGL ES Shading Language</a> (GLSL), qui utilise les informations des sommets constituant une forme, et qui génère les données nécessaires pour faire un rendu des pixels à l'écran : nommément, les positions des pixels et leurs couleurs.</p>\n<p>Deux fonctions de shader sont exécutées lors du dessin d'un contenu WebGL : le <strong>shader de sommet</strong> et le <strong>shader de fragment</strong>. Vous les écrivez en GLSL et vous passez le texte du code à WebGL pour qu'il soit compilé pour exécution dans la GPU. Pris conjointement, un ensemble de shaders de sommet et de fragment sont appelés un <strong>programme shader</strong>.</p>\n<p>Jetons un coup d'œil rapide aux deux types de shaders, en gardant présent à l'esprit l'exemple du dessin d'une forme 2D dans le contexte WebGL.</p>\n<h4 id=\"le_shader_de_sommet\">Le shader de sommet</h4>\n<p>Chaque fois qu'une forme est rendue, le shader de sommet est exécuté pour chaque sommet de la forme. Son travail consiste à effectuer les transformations souhaitées sur la position du sommet.</p>\n<p>Les informations de position sont stockées dans une variable spéciale fournie par GLSL, appelée <code>gl_Position</code>.</p>\n<p>Le shader de sommet peut, au besoin, aussi faire des choses comme déterminer les coordonnées dans la texture des faces du <a href=\"https://fr.wikipedia.org/wiki/Texel_(infographie)\" class=\"external\" rel=\" noopener\">texel</a> à appliquer au sommet, appliquer les normales pour déterminer le facteur d'éclairage à appliquer au sommet, et ainsi de suite. Ces informations peuvent alors être stockées dans des variations ou des attributs comme approprié, pour être partagées avec le shader de fragment.</p>\n<p>Notre shader de sommet ci-dessous reçoit des valeurs de position de sommet à partir d'un attribut que nous définissons, appelé <code>aVertexPosition</code>. Cette position est ensuite multipliée par deux matrices 4x4 que nous fournissons, appelées <code>uProjectionMatrix</code> et <code>uModelMatrix</code> ; <code>gl_Position</code> est définie comme étant le résultat. Pour plus d'informations sur la projection et autres matrices, <a href=\"https://webglfundamentals.org/webgl/lessons/webgl-3d-perspective.html\" class=\"external\" rel=\" noopener\">vous pourriez trouver cet article utile</a>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Programme shader de sommet</span>\n\n<span class=\"token keyword\">const</span> vsSource <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  attribute vec4 aVertexPosition;\n\n  uniform mat4 uModelViewMatrix;\n  uniform mat4 uProjectionMatrix;\n\n  void main() {\n    gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Dans cet exemple, nous ne calculons pas d'éclairage du tout, puisque nous n'en avons pas encore appliqué à la scène. Cela viendra plus tard, dans l'exemple <a href=\"/fr/docs/Web/API/WebGL_API/Tutorial/Lighting_in_WebGL\">Éclairage en WebGL</a>. Notez également l'absence de tout travail sur les textures ici ; cela sera ajouté dans <a href=\"/fr/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\">Utilisation de textures en WebGL</a>.</p>\n<h4 id=\"le_shader_de_fragment\">Le shader de fragment</h4>\n<p>Le <strong>shader de fragment</strong> est appelé une fois pour chaque pixel de chaque forme à dessiner, une fois que les sommets de la forme ont été traités par le shader de sommet. Son travail consiste à déterminer la couleur de ce pixel en déterminant quel texel (c'est-à-dire le pixel de la texture de la forme) appliquer au pixel, à obtenir la couleur de ce texel, puis à appliquer l'éclairage approprié à la couleur. La couleur est ensuite renvoyée à la couche WebGL en la stockant dans la variable spéciale <code>gl_FragColor</code>. Cette couleur est alors dessinée à l'écran dans la position correcte pour le pixel correspondant de la forme.</p>\n<p>Dans ce cas, nous retournons simplement du blanc à chaque fois, car nous sommes seulement en train de dessiner un carré blanc, sans éclairage.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> fsSource <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  void main() {\n    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"initialisation_des_shaders","title":"Initialisation des shaders","isH3":true,"content":"<p>Maintenant que nous avons défini les deux shaders, nous devons les transmettre à WebGL, les compiler et les lier ensemble. Le code ci-dessous crée les deux shaders en appelant <code>loadShader()</code>, lui passant le type et la source du shader. Il crée alors un programme, attache les shaders et les relie ensemble. Si la compilation ou la liaison échoue, le code affiche une alerte.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">//</span>\n<span class=\"token comment\">// Initialiser un programme shader, de façon à ce que WebGL sache comment dessiner nos données</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">initShaderProgram</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gl<span class=\"token punctuation\">,</span> vsSource<span class=\"token punctuation\">,</span> fsSource</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> vertexShader <span class=\"token operator\">=</span> <span class=\"token function\">loadShader</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">VERTEX_SHADER</span><span class=\"token punctuation\">,</span> vsSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> fragmentShader <span class=\"token operator\">=</span> <span class=\"token function\">loadShader</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FRAGMENT_SHADER</span><span class=\"token punctuation\">,</span> fsSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Créer le programme shader</span>\n\n  <span class=\"token keyword\">const</span> shaderProgram <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">attachShader</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> vertexShader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">attachShader</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> fragmentShader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">linkProgram</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Si la création du programme shader a échoué, alerte</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gl<span class=\"token punctuation\">.</span><span class=\"token function\">getProgramParameter</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">LINK_STATUS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Impossible d\\'initialiser le programme shader : '</span> <span class=\"token operator\">+</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getProgramInfoLog</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> shaderProgram<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Crée un shader du type fourni, charge le source et le compile.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">loadShader</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gl<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> source</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> shader <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createShader</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Envoyer le source à l'objet shader</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">shaderSource</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Compiler le programme shader</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">compileShader</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Vérifier s'il a ét compilé avec succès</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gl<span class=\"token punctuation\">.</span><span class=\"token function\">getShaderParameter</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">COMPILE_STATUS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'An error occurred compiling the shaders: '</span> <span class=\"token operator\">+</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getShaderInfoLog</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">deleteShader</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> shader<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>La fonction <code>loadShader()</code> prend en entrée le contexte WebGL, le type de shader et le code source, puis crée et compile le shader comme suit :</p>\n<ol>\n  <li>un nouveau shader est créé en appelant <a href=\"/fr/docs/Web/API/WebGLRenderingContext/createShader\" title=\"gl.createShader()\"><code>gl.createShader()</code></a>&nbsp;;</li>\n  <li>le code source du shader est envoyé au shader en appelant <a href=\"/fr/docs/Web/API/WebGLRenderingContext/shaderSource\" title=\"gl.shaderSource()\"><code>gl.shaderSource()</code></a> ;</li>\n  <li>une fois que le shader a le code source, il est compilé en utilisant <a href=\"/fr/docs/Web/API/WebGLRenderingContext/compileShader\" title=\"gl.compileShader()\"><code>gl.compileShader()</code></a> ;</li>\n  <li>pour vérifier que le shader a été compilé avec succès, le paramètre <code>gl.COMPILE_STATUS</code> du shader est vérifié ; pour obtenir sa valeur, nous appelons <a href=\"/fr/docs/Web/API/WebGLRenderingContext/getShaderParameter\" title=\"gl.getShaderParameter()\"><code>gl.getShaderParameter()</code></a>, en indiquant le shader et le nom du paramètre que nous voulons vérifier (<code>gl.COMPILE_STATUS</code>) ; si c'est <code>false</code>, nous savons que le shader n'a pas pu être compilé, aussi nous affichons une alerte avec les informations du journalisation obtenues du compilateur en utilisant <a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/API/WebGLRenderingContext/getShaderInfoLog\"><code>gl.getShaderInfoLog()</code> <small>(en-US)</small></a>, puis nous supprimons le shader et nous renvoyons <code>null</code> pour indiquer l'échec du chargement du shader ;</li>\n  <li>si le shader a été chargé et compilé avec succès, le shader compilé est renvoyé à l'appelant.</li>\n</ol>\n<p>Pour utiliser ce code, nous l'appelons de la façon suivante :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> shaderProgram <span class=\"token operator\">=</span> <span class=\"token function\">initShaderProgram</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">,</span> vsSource<span class=\"token punctuation\">,</span> fsSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Après avoir créé un programme de shaders, nous devons rechercher les emplacements que WebGL a assignés à nos entrées. Dans ce cas, nous avons un attribut et deux uniformes. Les attributs reçoivent des valeurs des tampons. Chaque itération du shader des sommets reçoit la valeur suivante du tampon affecté à cet attribut. Les uniformes sont similaires aux variables globales JavaScript. Ils conservent la même valeur pour toutes les itérations d'un shader. Du fait que les attributs et les emplacements des uniformes sont spécifiques à un programme de shader donné, nous les stockerons ensemble pour les rendre plus faciles à transmettre.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> programInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">program</span><span class=\"token operator\">:</span> shaderProgram<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">attribLocations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">vertexPosition</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">'aVertexPosition'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">uniformLocations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">projectionMatrix</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">'uProjectionMatrix'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">modelViewMatrix</span><span class=\"token operator\">:</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>shaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">'uModelViewMatrix'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"création_du_carré_2d","title":"Création du carré 2D","isH3":false,"content":"<p>Avant de pouvoir faire un rendu de notre carré 2D, nous devons créer le tampon qui contiendra les positions de ses sommets et y placer les positions des sommets. Nous ferons cela en utilisant une fonction que nous appelerons <code>initBuffers()</code> ; à mesure que nous explorerons des concepts WebGL plus avancés, cette routine sera augmentée pour créer plus d'objets 3D, et plus complexes.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">initBuffers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gl</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// Créer un tampon des positions pour le carré.</span>\n\n  <span class=\"token keyword\">const</span> positionBuffer <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token function\">createBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Définir le positionBuffer comme étant celui auquel appliquer les opérations</span>\n  <span class=\"token comment\">// de tampon à partir d'ici.</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> positionBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Créer maintenant un tableau des positions pour le carré.</span>\n\n  <span class=\"token keyword\">const</span> positions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Passer mainenant la liste des positions à WebGL pour construire la forme.</span>\n  <span class=\"token comment\">// Nous faisons cela en créant un Float32Array à partir du tableau JavaScript,</span>\n  <span class=\"token comment\">// puis en l'utilisant pour remplir le tampon en cours.</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">bufferData</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float32Array</span><span class=\"token punctuation\">(</span>positions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                gl<span class=\"token punctuation\">.</span><span class=\"token constant\">STATIC_DRAW</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">position</span><span class=\"token operator\">:</span> positionBuffer<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Cette routine est assez simpliste du fait de la nature basique de la scène dans cet exemple. Elle commence par appeler la méthode <a href=\"/fr/docs/Web/API/WebGLRenderingContext/createBuffer\" title=\"createBuffer()\"><code>createBuffer()</code></a> de l'objet gl pour obtenir un tampon dans lequel nous stockerons les positions des sommets. Ce dernier est ensuite lié au contexte en appelant la méthode <a href=\"/fr/docs/Web/API/WebGLRenderingContext/bindBuffer\" title=\"bindBuffer()\"><code>bindBuffer()</code></a>.</p>\n<p>Une fois que cela est fait, nous créons un tableau JavaScript contenant la position de chaque sommet du carré 2D. Ce dernier est ensuite converti en un tableau de flottants et transmis à la méthode <a href=\"/fr/docs/Web/API/WebGLRenderingContext/bufferData\" title=\"bufferData()\"><code>bufferData()</code></a> de l'objet <code>gl</code> pour définir les positions des sommets de l'objet.</p>"}},{"type":"prose","value":{"id":"rendu_de_la_scène","title":"Rendu de la scène","isH3":false,"content":"<p>Une fois que les shaders sont définis, que les emplacements sont retrouvés, et que les positions des sommets du carré 2D sont stockées dans le tampon, nous pouvons faire effectivement le rendu de la scène. Puisque nous n'animons rien dans cet exemple, notre fonction <code>drawScene()</code> est très simple. Elle utilise quelques routines utilitaires que nous décrirons sous peu.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note :</strong> Vous pourriez obtenir une erreur JavaScript indiquant <em>\"mat4 n'est pas défini\"</em>. Cela signifie qu'il existe une dépendance à <strong>glmatrix</strong>. Vous pouvez inclure <a href=\"https://mdn.github.io/webgl-examples/tutorial/gl-matrix.js\" class=\"external\" rel=\" noopener\">gl-matrix.js</a> pour résoudre ce problème, comme suggéré <a href=\"https://github.com/mdn/webgl-examples/issues/20\" class=\"external\" rel=\" noopener\">ici</a>.</p>\n</div>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">drawScene</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gl<span class=\"token punctuation\">,</span> programInfo<span class=\"token punctuation\">,</span> buffers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">clearColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// effacement en noir, complètement opaque</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">clearDepth</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// tout effacer</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">enable</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">DEPTH_TEST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// activer le test de profondeur</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">depthFunc</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">LEQUAL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// les choses proches cachent les choses lointaines</span>\n\n  <span class=\"token comment\">// Effacer le canevas avant que nous ne commencions à dessiner dessus.</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">COLOR_BUFFER_BIT</span> <span class=\"token operator\">|</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">DEPTH_BUFFER_BIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Créer une matrice de perspective, une matrice spéciale qui est utilisée pour</span>\n  <span class=\"token comment\">// simuler la distorsion de la perspective dans une caméra.</span>\n  <span class=\"token comment\">// Notre champ de vision est de 45 degrés, avec un rapport largeur/hauteur qui</span>\n  <span class=\"token comment\">// correspond à la taille d'affichage du canvas ;</span>\n  <span class=\"token comment\">// et nous voulons seulement voir les objets situés entre 0,1 unité et 100 unités</span>\n  <span class=\"token comment\">// à partir de la caméra.</span>\n\n  <span class=\"token keyword\">const</span> fieldOfView <span class=\"token operator\">=</span> <span class=\"token number\">45</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">/</span> <span class=\"token number\">180</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// en radians</span>\n  <span class=\"token keyword\">const</span> aspect <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">.</span>clientWidth <span class=\"token operator\">/</span> gl<span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">.</span>clientHeight<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> zNear <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> zFar <span class=\"token operator\">=</span> <span class=\"token number\">100.0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> projectionMatrix <span class=\"token operator\">=</span> mat4<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// note: glmatrix.js a toujours comme premier argument la destination</span>\n  <span class=\"token comment\">// où stocker le résultat.</span>\n  mat4<span class=\"token punctuation\">.</span><span class=\"token function\">perspective</span><span class=\"token punctuation\">(</span>projectionMatrix<span class=\"token punctuation\">,</span>\n                    fieldOfView<span class=\"token punctuation\">,</span>\n                    aspect<span class=\"token punctuation\">,</span>\n                    zNear<span class=\"token punctuation\">,</span>\n                    zFar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Définir la position de dessin comme étant le point \"origine\", qui est</span>\n  <span class=\"token comment\">// le centre de la scène.</span>\n  <span class=\"token keyword\">const</span> modelViewMatrix <span class=\"token operator\">=</span> mat4<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Commencer maintenant à déplacer la position de dessin un peu vers là où</span>\n  <span class=\"token comment\">// nous voulons commencer à dessiner le carré.</span>\n\n  mat4<span class=\"token punctuation\">.</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>modelViewMatrix<span class=\"token punctuation\">,</span>     <span class=\"token comment\">// matrice de destination</span>\n                  modelViewMatrix<span class=\"token punctuation\">,</span>     <span class=\"token comment\">// matrice de déplacement</span>\n                  <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">6.0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// quantité de déplacement</span>\n\n  <span class=\"token comment\">// Indiquer à WebGL comment extraire les positions à partir du tampon des</span>\n  <span class=\"token comment\">// positions pour les mettre dans l'attribut vertexPosition.</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> numComponents <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// extraire 2 valeurs par itération</span>\n    <span class=\"token keyword\">const</span> type <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">FLOAT</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// les données dans le tampon sont des flottants 32bit</span>\n    <span class=\"token keyword\">const</span> normalize <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// ne pas normaliser</span>\n    <span class=\"token keyword\">const</span> stride <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// combien d'octets à extraire entre un jeu de valeurs et le suivant</span>\n                              <span class=\"token comment\">// 0 = utiliser le type et numComponents ci-dessus</span>\n    <span class=\"token keyword\">const</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// démarrer à partir de combien d'octets dans le tampon</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> buffers<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">vertexAttribPointer</span><span class=\"token punctuation\">(</span>\n        programInfo<span class=\"token punctuation\">.</span>attribLocations<span class=\"token punctuation\">.</span>vertexPosition<span class=\"token punctuation\">,</span>\n        numComponents<span class=\"token punctuation\">,</span>\n        type<span class=\"token punctuation\">,</span>\n        normalize<span class=\"token punctuation\">,</span>\n        stride<span class=\"token punctuation\">,</span>\n        offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">enableVertexAttribArray</span><span class=\"token punctuation\">(</span>\n        programInfo<span class=\"token punctuation\">.</span>attribLocations<span class=\"token punctuation\">.</span>vertexPosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Indiquer à WebGL d'utiliser notre programme pour dessiner</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">useProgram</span><span class=\"token punctuation\">(</span>programInfo<span class=\"token punctuation\">.</span>program<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Définir les uniformes du shader</span>\n\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniformMatrix4fv</span><span class=\"token punctuation\">(</span>\n      programInfo<span class=\"token punctuation\">.</span>uniformLocations<span class=\"token punctuation\">.</span>projectionMatrix<span class=\"token punctuation\">,</span>\n      <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      projectionMatrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  gl<span class=\"token punctuation\">.</span><span class=\"token function\">uniformMatrix4fv</span><span class=\"token punctuation\">(</span>\n      programInfo<span class=\"token punctuation\">.</span>uniformLocations<span class=\"token punctuation\">.</span>modelViewMatrix<span class=\"token punctuation\">,</span>\n      <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      modelViewMatrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> vertexCount <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    gl<span class=\"token punctuation\">.</span><span class=\"token function\">drawArrays</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TRIANGLE_STRIP</span><span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> vertexCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>La première étape consiste à effacer le canevas avec notre arrière plan ; ensuite, nous établissons la perspective de la caméra. Nous définissons un champ de vision de 45°, avec un rapport largeur sur hauteur qui correspond aux dimensions d'affichage de notre canevas. Nous indiquons également que seuls les objets situés entre 0,1 et 100 unités à partir de la caméra doivent être rendus.</p>\n<p>Ensuite, nous établissons la position du carré 2D en chargeant la position de l'origine et en nous déplaçant de 6 unités à partir de la caméra. Après cela, nous lions le tampon des sommets du carré à l'attribut que le shader utilise comme <code>aVertexPosition</code> et nous indiquons à WebGL comment en extraire les données. Enfin, nous dessinons l'objet en appelant la méthode <a href=\"/fr/docs/Web/API/WebGLRenderingContext/drawArrays\" title=\"drawArrays()\"><code>drawArrays()</code></a>.</p><iframe width=\"670\" height=\"510\" src=\"https://mdn.github.io/webgl-examples/tutorial/sample2/index.html\" loading=\"lazy\"></iframe>\n<p><a href=\"https://github.com/mdn/webgl-examples/tree/gh-pages/tutorial/sample2\" class=\"external\" rel=\" noopener\">Voir le code complet</a> | <a href=\"https://mdn.github.io/webgl-examples/tutorial/sample2/\" class=\"external\" rel=\" noopener\">Ouvrir cette démo dans une nouvelle page</a></p>"}},{"type":"prose","value":{"id":"opérations_utilitaires_matricielles","title":"Opérations utilitaires matricielles","isH3":false,"content":"<p>Les opérations matricielles peuvent sembler compliquées, mais <a href=\"https://webglfundamentals.org/webgl/lessons/webgl-2d-matrices.html\" class=\"external\" rel=\" noopener\">elles sont en fait assez simples si vous en prenez une à la fois</a>. En général, les gens utilisent une bibliothèque matricielle plutôt que d'écrire la leur. Dans notre cas, nous utilisons la bibliothèque populaire <a href=\"https://glmatrix.net/\" class=\"external\" rel=\" noopener\">glMatrix</a>.</p>\n<p>Voir aussi&nbsp;:</p>\n<ul>\n  <li>les <a href=\"https://webglfundamentals.org/webgl/lessons/webgl-2d-matrices.html\" class=\"external\" rel=\" noopener\">matrices</a> sur WebGLFundamentals ;</li>\n  <li>les <a href=\"https://mathworld.wolfram.com/Matrix.html\" class=\"external\" rel=\" noopener\">matrices</a> sur Wolfram MathWorld ;</li>\n  <li>l'article <a href=\"https://fr.wikipedia.org/wiki/Matrice_(math%C3%A9matiques)\" class=\"external\" rel=\" noopener\">matrice</a> sur Wikipédia.</li>\n</ul><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/fr/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\">« Précédent</a></li>\n    <li><a class=\"button minimal\" href=\"/fr/docs/Web/API/WebGL_API/Tutorial/Using_shaders_to_apply_color_in_WebGL\">Suivant  »</a></li>\n</ul>"}}],"toc":[{"text":"Dessiner la scène","id":"dessiner_la_scène"},{"text":"Création du carré 2D","id":"création_du_carré_2d"},{"text":"Rendu de la scène","id":"rendu_de_la_scène"},{"text":"Opérations utilitaires matricielles","id":"opérations_utilitaires_matricielles"}],"summary":"Une fois que vous avez correctement créé un contexte WebGL, vous pouvez commencer à y dessiner. Une chose simple que nous pouvons faire est de dessiner un simple carré 2D sans texture, commençons donc par là, en construisant un code pour dessiner un carré 2D.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Adding 2D content to a WebGL context","locale":"en-US","native":"English (US)"},{"title":"Agregando Contenido 2D en el Contexto WebGL","locale":"es","native":"Español"},{"title":"WebGL コンテキストへの平面コンテンツの追加","locale":"ja","native":"日本語"},{"title":"WebGL 컨텍스트에 2D 컨텐츠 추가하기","locale":"ko","native":"한국어"},{"title":"Adicionando conteúdo 2D a um contexto WebGL","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Добавление двухмерного контента в контекст WebGL","locale":"ru","native":"Русский"},{"title":"使用 WebGL 创建 2D 内容","locale":"zh-CN","native":"中文 (简体)"},{"title":"增加一個 2D 物件到 WebGL 環境","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"fr/web/api/webgl_api/tutorial/adding_2d_content_to_a_webgl_context","github_url":"https://github.com/mdn/translated-content/blob/main/files/fr/web/api/webgl_api/tutorial/adding_2d_content_to_a_webgl_context/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/fr/docs/Web","title":"Technologies web pour développeurs"},{"uri":"/fr/docs/Web/API","title":"Référence Web API"},{"uri":"/fr/docs/Web/API/WebGL_API","title":"L'API WebGL : graphismes 2D et 3D pour le web"},{"uri":"/fr/docs/Web/API/WebGL_API/Tutorial","title":"Tutoriel WebGL"},{"uri":"/fr/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context","title":"Ajouter du contenu à WebGL"}],"pageTitle":"Ajouter du contenu à WebGL - Référence Web API | MDN","noIndexing":false}}