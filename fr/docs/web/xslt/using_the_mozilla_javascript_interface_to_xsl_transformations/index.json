{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Utilisation de l'interface JavaScript de Mozilla pour les transformations XSL","mdn_url":"/fr/docs/Web/XSLT/Using_the_Mozilla_JavaScript_interface_to_XSL_Transformations","locale":"fr","native":"Français","sidebarHTML":"","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Ce document décrit l'interface JavaScript pour le moteur de traitement XSLT (TransforMiiX) de Mozilla 1.2 et supérieur.</p>"}},{"type":"prose","value":{"id":"création_de_xsltprocessor","title":"Création de XSLTProcessor","isH3":true,"content":"<p>Pour commencer, nous avons besoin de créer un objet <a href=\"fr/XSLTProcessor\">XSLTProcessor</a>&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> processor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XSLTProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"spécification_de_la_feuille_de_style","title":"Spécification de la feuille de style","isH3":true,"content":"<p>Avant d'utiliser cet objet, nous devons importer une feuille de style avec la fonction <code>importStylesheet()</code>. Elle a un unique paramètre, qui est le nœud DOM de la feuille de style XSLT à importer — remarquez que l'importation est directe, ce qui signifie que si nous modifions la feuille de style DOM après son importation, cela sera reflété lors du traitement. Il est cependant conseillé d'utiliser les paramètres de feuille de style plutôt que de modifier le DOM. C'est généralement plus facile et on obtient de meilleures performances.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> testTransform <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>implementation<span class=\"token punctuation\">.</span><span class=\"token function\">createDocument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// juste un exemple pour obtenir une transformation dans un script étant donné que</span>\n<span class=\"token comment\">// la fonction DOM XMLDocument.load est asynchrone, donc tout le traitement se fait</span>\n<span class=\"token comment\">// dans le gestionnaire onload</span>\ntestTransform<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> onload<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntestTransform<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test-transform.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">onload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  processor<span class=\"token punctuation\">.</span><span class=\"token function\">importStylesheet</span><span class=\"token punctuation\">(</span>testTransform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>importStylesheet</code> requiert un argument, un nœud DOM. Si ce nœud est un nœud de document, nous pouvons passer par une transformation XSL ou une <a href=\"https://www.w3.org/TR/xslt#result-element-stylesheet\" class=\"external\" rel=\" noopener\">transformation littérale d'élément résultant</a>, autrement il devra être un élément &lt;tt&gt;xsl:stylesheet&lt;/tt&gt; ou &lt;tt&gt;xsl:transform&lt;/tt&gt;.</p>"}},{"type":"prose","value":{"id":"transformation_du_document","title":"Transformation du document","isH3":true,"content":"<p>Nous pouvons utiliser les méthodes <a href=\"#transformtodocument\"><code>transformToDocument()</code></a> ou <a href=\"#transformtofragment\"><code>transformToFragment()</code></a> pour transformer un document à l'aide de la feuille de style spécifiée.</p>\n<h4 id=\"transformtodocument\">transformToDocument</h4>\n<p><code>transformToDocument()</code> prend un argument, le nœud source à transformer, et retourne un nouveau <code>Document</code> DOM avec les résultats de la transformation&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> newDocument <span class=\"token operator\">=</span> processor<span class=\"token punctuation\">.</span><span class=\"token function\">transformToDocument</span><span class=\"token punctuation\">(</span>domToBeTransformed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>L'objet résultant est un <code>HTMLDocument</code> si la <a href=\"https://www.w3.org/TR/xslt#output\" class=\"external\" rel=\" noopener\">méthode de sortie</a> de la feuille de style est &lt;tt&gt;html&lt;/tt&gt;, un <code>XMLDocument</code> pour &lt;tt&gt;xml&lt;/tt&gt;, et pour la méthode de sortie &lt;tt&gt;text&lt;/tt&gt; un <code>XMLDocument</code> avec uniquement un élément racine <code>&lt;transformiix:result&gt;</code> avec le texte comme descendant.</p>\n<h4 id=\"transformtofragment\">transformToFragment</h4>\n<p>Nous pouvons également utiliser <code>transformToFragment()</code> qui retournera un nœud <code>DocumentFragment</code> DOM. C'est très efficace car l'adjonction d'un fragment à un autre nœud adjoint de façon transparente tous les descendants de ce fragment, et le fragment lui-même n'est pas fusionné. Les fragment sont donc utiles pour déplacer les nœuds et les stocker sans les éléments inutiles d'un objet document entier.</p>\n<p><code>transformToFragment</code> prend deux arguments&nbsp;: le document source à transformer (comme ci-dessus) et un objet <code>Document</code> qui possèdera le fragment (tous les fragments doivent être possédés par un document).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> ownerDocument <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>implementation<span class=\"token punctuation\">.</span><span class=\"token function\">createDocument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> newFragment <span class=\"token operator\">=</span> processor<span class=\"token punctuation\">.</span><span class=\"token function\">transformToFragment</span><span class=\"token punctuation\">(</span>domToBeTransformed<span class=\"token punctuation\">,</span> ownerDocument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>transformToFragment</code> ne produira que des objets HTML DOM que si le propriétaire du document est lui-même un <code>HTMLDocument</code>, ou si la méthode de sortie de la feuille de style est &lt;tt&gt;HTML&lt;/tt&gt;. Il <strong>ne produira pas</strong> un objet HTML DOM si seul l'élément de haut niveau du résultat est <code>&lt;html&gt;</code> car <code>transformToFragment</code> est rarement utilisé pour créer cet élément. Si nous voulons annuler cela, nous pouvons définir la méthode de sortie normale par le moyen standard.</p>"}},{"type":"prose","value":{"id":"définition_des_paramètres","title":"Définition des paramètres","isH3":true,"content":"<p>Nous pouvons contrôler les <a href=\"https://www.w3.org/TR/xslt#variables\" class=\"external\" rel=\" noopener\">paramètres de la feuille de style</a> à l'aide des méthodes <code>setParameter</code>, <code>getParameter</code> et <code>removeParameter</code>. Elles nécessitent une URI d'espace de nommage et un nom local qui seront les deux premiers paramètres, <code>setParameter</code> sera un troisième paramètres — la valeur de ce dernier paramètre étant à définir.</p>"}},{"type":"prose","value":{"id":"réinitialisation","title":"Réinitialisation","isH3":true,"content":"<p>L'objet <code>XSLTProcessor</code> implémente également une méthode <code>reset()</code> qui peut être utilisée pour supprimer toutes les feuilles de style et tous les paramètres puis ramener le processeur dans son état initial. Cette méthode est implémentée dans <a href=\"fr/Gecko\">Mozilla</a> 1.3 et supérieurs.</p>"}},{"type":"prose","value":{"id":"ressources","title":"Ressources","isH3":true,"content":"<ul>\n  <li><a href=\"https://dxr.mozilla.org/mozilla-central/source/content/xslt/public/nsIXSLTProcessor.idl\" class=\"external\" rel=\" noopener\">nsIXSLTProcessor.idl</a> reflètera toujours l'interface réelle de l'objet <code>XSLTProcessor</code>.\n    <ul>\n      <li><a href=\"http://xulplanet.com/references/objref/XSLTProcessor.html\" class=\"external\" rel=\" noopener\">A XULPlanet reference page (en)</a>.</li>\n    </ul>\n  </li>\n  <li><a href=\"http://lxr.mozilla.org/seamonkey/source/content/xslt/public/nsIXSLTProcessorObsolete.idl\" class=\"external\" rel=\" noopener\">The nsIXMLProcessorObsolete IDL file (en)</a> : l'interface JS dans les versions de Mozilla antérieures à la 1.2.</li>\n</ul>"}}],"toc":[],"summary":"Ce document décrit l'interface JavaScript pour le moteur de traitement XSLT (TransforMiiX) de Mozilla 1.2 et supérieur.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Using the Mozilla JavaScript interface to XSL Transformations","locale":"en-US","native":"English (US)"},{"title":"Mozilla JavaScript インターフェイスを使用した XSL 変換","locale":"ja","native":"日本語"},{"title":"Using the Mozilla JavaScript interface to XSL Transformations","locale":"ko","native":"한국어"}],"source":{"folder":"fr/web/xslt/using_the_mozilla_javascript_interface_to_xsl_transformations","github_url":"https://github.com/mdn/translated-content/blob/main/files/fr/web/xslt/using_the_mozilla_javascript_interface_to_xsl_transformations/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/fr/docs/Web","title":"Technologies web pour développeurs"},{"uri":"/fr/docs/Web/XSLT","title":"XSLT"},{"uri":"/fr/docs/Web/XSLT/Using_the_Mozilla_JavaScript_interface_to_XSL_Transformations","title":"Utilisation de l'interface JavaScript de Mozilla pour les transformations XSL"}],"pageTitle":"Utilisation de l'interface JavaScript de Mozilla pour les transformations XSL - XSLT | MDN","noIndexing":false}}