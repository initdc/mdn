{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Les liaisons JavaScript/XSLT","mdn_url":"/fr/docs/Web/XSLT/XSLT_JS_interface_in_Gecko/JavaScript_XSLT_Bindings","locale":"fr","native":"Français","sidebarHTML":"","body":[{"type":"prose","value":{"id":"les_liaisons_javascriptxslt","title":"Les liaisons JavaScript/XSLT","isH3":false,"content":"<p>JavaScript peut exécuter des transformations XSLT à travers l'objet <code>XSLTProcessor</code>. Un fois instancié, un <code>XSLTProcessor</code> a une méthode <code>importStylesheet</code> qui prend comme argument la feuille de style XSLT à utiliser pour la transformation. La feuille de style doit être passée comme un document XML, ce qui signifie que le fichier .xsl doit être chargé par la page avant d'appeler <code>importStylesheet</code>. Cela peut être fait par <code>XMLHttpRequest</code> ou par <code>XMLDocument.load</code>.</p>\n<p><strong>Figure 1&nbsp;: Instanciation d'un XSLTProcessor</strong></p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> xsltProcessor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XSLTProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Chargement du fichier xsl à l'aide de XMLHttpRequest synchrone</span>\n<span class=\"token comment\">// le 3° paramètre est défini à false</span>\n<span class=\"token keyword\">var</span> myXMLHTTPRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyXMLHTTPRequest<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"example.xsl\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyXMLHTTPRequest<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> xslRef <span class=\"token operator\">=</span> myXMLHTTPRequest<span class=\"token punctuation\">.</span>responseXML<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Importation du .xsl</span>\nxsltProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">importStylesheet</span><span class=\"token punctuation\">(</span>xslRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Pour la transformation réelle, <code>XSLTProcessor</code> requiert un document XML, qui est utilisé en conjonction avec le fichier XSL importé pour produire le résultat final. Le document XML peut être un fichier XML séparé chargé comme sur la figure 1, ou il peut être une partie d'une page existante. Pour traiter une partie du DOM d'une page, il est nécessaire de commencer par créer un document XML en mémoire. Considérons que le DOM à traiter est contenu dans un élément avec l'ID <code>example</code>, que le DOM peut être «&nbsp;cloné&nbsp;» (ou dupliqué) à l'aide de ma méthode <code>importNode</code> du document XML en mémoire. <code>importNode</code> permet le transfert d'un fragment DOM entre différents documents, dans ce cas, depuis un document HTML vers un document XML. Le premier paramètre référence le nœud DOM à dupliquer. En définissant le deuxième paramètre à <code>true</code>, il dupliquera à l'identique tous les descendants (une copie profonde). Le DOM cloné peut alors être facilement inséré dans le document XML à l'aide de <code>appendChild</code>, comme indiqué sur la figure 2.</p>\n<p><strong>Figure 2&nbsp;: Création d'un document XML à partir d'un DOM document</strong></p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// création d'u nouveau document XML en mémoire</span>\n<span class=\"token keyword\">var</span> xmlRef <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>implementation<span class=\"token punctuation\">.</span><span class=\"token function\">createDocument</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// nous voulons déplacer une partie du DOM depuis un document HTML vers un document XML.</span>\n<span class=\"token comment\">// importNode est utilisée pour cloner les nœuds que nous voulons traiter via XSLT</span>\n<span class=\"token comment\">// true permet une copie conforme</span>\n<span class=\"token keyword\">var</span> myNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> clonedNode <span class=\"token operator\">=</span> xmlRef<span class=\"token punctuation\">.</span><span class=\"token function\">importNode</span><span class=\"token punctuation\">(</span>myNode<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Ajout du DOM cloné dans le document XML</span>\nxmlRef<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>clonedNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Une fois la feuille de style importée, <code>XSLTProcessor</code> doit exécuter deux méthodes pour la transformations réelle, à savoir <code>transformToDocument()</code> et <code>transformToFragment()</code>. <code>transformToDocument()</code> retourne un document XML entier alors que <code>transformToFragment()</code> retourne un fragment de document qui peut être facilement ajouté à un document XML existant. Les deux prennent le document XML comme premier paramètre à transformer. <code>transformToFragment()</code> requiert un second paramètre, à savoir l'objet document qui possédera le fragment généré. Si le fragment généré est inséré dans le document HTML courant, passer document est suffisant.</p>\n<p><strong>Figure 2.1&nbsp;: Création d'un document XML à partir d'une chaîne 'soupe XML'</strong></p>\n<p>Alors que nous pouvons utiliser la méthode <code>loadXML</code> d'Internet Explorer pour charger une chaîne contenant du XML, nous devons faire quelques arrangements pour faire la même chose dans Mozilla. Nous devons utiliser le DomParser.no pour créer un document, car c'est géré par le<em>DomParser</em> .</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> parser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DOMParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> doc <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">parseFromString</span><span class=\"token punctuation\">(</span>aStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><strong>Figure 3&nbsp;: Exécution de la transformation</strong></p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> fragment <span class=\"token operator\">=</span> xsltProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">transformToFragment</span><span class=\"token punctuation\">(</span>xmlRef<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}}],"toc":[{"text":"Les liaisons JavaScript/XSLT","id":"les_liaisons_javascriptxslt"}],"summary":"JavaScript peut exécuter des transformations XSLT à travers l'objet XSLTProcessor. Un fois instancié, un XSLTProcessor a une méthode importStylesheet qui prend comme argument la feuille de style XSLT à utiliser pour la transformation. La feuille de style doit être passée comme un document XML, ce qui signifie que le fichier .xsl doit être chargé par la page avant d'appeler importStylesheet. Cela peut être fait par XMLHttpRequest ou par XMLDocument.load.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"JavaScript/XSLT Bindings","locale":"en-US","native":"English (US)"},{"title":"JavaScript/XSLT バインディング","locale":"ja","native":"日本語"}],"source":{"folder":"fr/web/xslt/xslt_js_interface_in_gecko/javascript_xslt_bindings","github_url":"https://github.com/mdn/translated-content/blob/main/files/fr/web/xslt/xslt_js_interface_in_gecko/javascript_xslt_bindings/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/fr/docs/Web","title":"Technologies web pour développeurs"},{"uri":"/fr/docs/Web/XSLT","title":"XSLT"},{"uri":"/fr/docs/Web/XSLT/XSLT_JS_interface_in_Gecko","title":"L'interface XSLT/JavaScript dans Gecko"},{"uri":"/fr/docs/Web/XSLT/XSLT_JS_interface_in_Gecko/JavaScript_XSLT_Bindings","title":"Les liaisons JavaScript/XSLT"}],"pageTitle":"Les liaisons JavaScript/XSLT - XSLT | MDN","noIndexing":false}}