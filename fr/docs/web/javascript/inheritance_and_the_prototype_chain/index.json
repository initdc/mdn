{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Héritage et chaîne de prototype","mdn_url":"/fr/docs/Web/JavaScript/Inheritance_and_the_prototype_chain","locale":"fr","native":"Français","sidebarHTML":"\n <ol>\n  <li><a href=\"/fr/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/fr/docs/Web/JavaScript/Tutorials\"><strong>Tutoriel&nbsp;:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Débutant</summary>\n      <ol>\n        <li><a href=\"/fr/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">Les bases en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Learn/JavaScript/First_steps\">Premiers pas en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Learn/JavaScript/Building_blocks\">Les briques JavaScript</a></li>\n        <li><a href=\"/fr/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Guide JavaScript</summary>\n      <ol>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Introduction\">Introduction</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Grammar_and_Types\">Types et grammaire</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Contrôle du flux et gestion des erreurs</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Loops_and_iteration\">Boucles et itération</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Functions\">Fonctions</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressions et opérateurs</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Numbers_and_dates\">Nombres et dates</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Text_formatting\">Formatage du texte</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Regular_Expressions\">Expressions rationnelles</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Indexed_collections\">Collections indexées</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Keyed_collections\">Collections avec clés</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Working_with_Objects\">Manipuler les objets</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Détails du modèle objet</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Iterators_and_generators\">Itérateurs et générateurs</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Meta_programming\">Meta-programmation</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Intermédiaire</summary>\n      <ol>\n        <li><a href=\"/fr/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/fr/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">Réintroduction à JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Data_structures\">Structures de données en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Différents tests d'égalité</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Closures\">Closures</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Avancé</summary>\n      <ol>\n        <li><a href=\"/fr/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Héritage et la chaîne de prototypes</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Strict_mode\">Mode strict</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Typed_arrays\">Tableaux typés en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Memory_Management\">Gestion de la mémoire</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/EventLoop\">Concurrence et boucle des événements</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/fr/docs/Web/JavaScript/Reference\">Références&nbsp;:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Objets natifs</summary>\n        <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Expressions &amp; opérateurs</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Instructions &amp; déclarations</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Fonctions</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Plus</summary>\n      <ol>\n        <li><a href=\"/fr/docs/Web/JavaScript/JavaScript_technologies_overview\">Aperçu des technologies JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Lexical_grammar\">Grammaire lexicale</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Data_structures\">Structures de données en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Rattachement des propriétés</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Iteration_protocols\">Protocoles d'itération</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Strict_mode\">Mode strict</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Passer au mode strict</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Template_literals\">Gabarit de chaîne de caractère</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Fonctionnalités dépréciées</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>JavaScript peut prêter à confusion lorsqu'on est habitué à manipuler des langages de programmation manipulant les classes (tels que Java ou C++). En effet, JavaScript est un langage dynamique et ne possède pas de concept de classe à part entière (le mot-clé <code>class</code> a certes été ajouté avec ES2015 mais il s'agit uniquement de sucre syntaxique, JavaScript continue de reposer sur l'héritage prototypique).</p>\n<p>En ce qui concerne l'héritage, JavaScript n'utilise qu'une seule structure : les objets. Chaque objet possède une propriété privée qui contient un lien vers un autre objet appelé le <strong>prototype</strong>. Ce prototype possède également son prototype et ainsi de suite, jusqu'à ce qu'un objet ait <a href=\"/fr/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> comme prototype. Par définition, <code>null</code> ne possède pas de prototype et est ainsi le dernier maillon de la <strong>chaîne de prototype</strong>.</p>\n<p>La majorité des objets JavaScript sont des instances de <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> qui est l'avant dernier maillon de la chaîne de prototype.</p>\n<p>Bien que cette confusion (entre classe et prototype) soit souvent avancée comme l'une des faiblesses de JavaScript, le modèle prototypique est plus puissant que le modèle classique et il est notamment possible de construire un modèle classique à partir d'un modèle prototypique.</p>"}},{"type":"prose","value":{"id":"héritage_et_chaîne_de_prototype","title":"Héritage et chaîne de prototype","isH3":false,"content":""}},{"type":"prose","value":{"id":"propriétés_héritées","title":"Propriétés héritées","isH3":true,"content":"<p>Les objets JavaScript sont des ensembles dynamiques de propriétés (les propriétés directement rattachées à un objet sont appelées <strong>propriétés en propre (<em>own properties</em>)</strong>). Les objets JavaScript possèdent également un lien vers un objet qui est leur prototype. Lorsqu'on tente d'accéder aux propriétés d'un objet, la propriété sera recherchée d'abord sur l'objet même, puis sur son prototype, puis sur le prototype du prototype et ainsi de suite jusqu'à ce qu'elle soit trouvée ou que la fin de la chaîne de prototype ait été atteinte.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note :</strong> Dans la spécification ECMAScript, on utilise la notation <code>unObjet.[[Prototype]]</code> pour faire référence au prototype de <code>unObjet</code>. Depuis ECMAScript 2015, on peut accéder à <code>[[Prototype]]</code> grâce aux accesseurs <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf()</code></a> et <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a>. Cela est équivalent à la propriété JavaScript <code>__proto__</code> qui était non-standard avant ES2015 mais qui était de fait implémentée par la majorité des navigateurs.</p>\n  <p>Cette propriété ne devrait pas être confondue avec la propriété <code>func.prototype</code> des fonctions qui définissent le <code>[[Prototype]]</code> à affecter aux instances des objets créés par cette fonction lorsqu'elle est utilisée comme constructeur. La propriété <strong><code>Object.prototype</code></strong> représente le prototype de <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a>.</p>\n</div>\n<p>Voici ce qui se produit lorsqu'on tente d'accéder à une propriété :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// On commence par créer un objet o pour lequel la fonction f sera</span>\n<span class=\"token comment\">// son constructeur et lui créera deux propriétés en propre</span>\n<span class=\"token comment\">// a et b :</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {a: 1, b: 2}</span>\n\n<span class=\"token comment\">// on ajoute des propriétés au prototype de la fonction</span>\n<span class=\"token comment\">// f</span>\nf<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nf<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Note : on ne définit pas le prototype de f avec f.prototype = {b:3,c:4};</span>\n<span class=\"token comment\">// car cela briserait la chaîne de prototype</span>\n\n<span class=\"token comment\">// o.[[Prototype]] possède les propriétés b and c.</span>\n<span class=\"token comment\">// o.[[Prototype]].[[Prototype]] est Object.prototype.</span>\n<span class=\"token comment\">// Enfin, o.[[Prototype]].[[Prototype]].[[Prototype]] vaut null.</span>\n<span class=\"token comment\">// On a alors atteint la fin de la chaîne de prototype car,</span>\n<span class=\"token comment\">// par définition, null n'a pas de [[Prototype]].</span>\n<span class=\"token comment\">// Ainsi, la chaîne complète est ici :</span>\n<span class=\"token comment\">// {a: 1, b: 2} ---&gt; {b: 3, c: 4} ---&gt; Object.prototype ---&gt; null</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// Existe-t-il une propriété 'a' en propre sur o ? Oui, elle vaut 1.</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// Existe-t-il une propriété 'b' en propre sur o ? Oui, elle vaut 2.</span>\n<span class=\"token comment\">// Le prototype possède également une propriété 'b' mais elle n'est pas</span>\n<span class=\"token comment\">// utilisée.</span>\n<span class=\"token comment\">// C'est ce qu'on appelle l'ombrage (shadowing en anglais)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n<span class=\"token comment\">// Existe-t-il une propriété 'c' en propre sur o ? Non, on vérifie le</span>\n<span class=\"token comment\">// prototype.</span>\n<span class=\"token comment\">// Existe-t-il une propriété 'c' en propre sur o.[[Prototype]] ?</span>\n<span class=\"token comment\">// Oui, elle vaut 4.</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token comment\">// Existe-t-il une propriété 'd' en propre sur o ? Non, on vérifie le</span>\n<span class=\"token comment\">// prototype.</span>\n<span class=\"token comment\">// Existe-t-il une propriété 'd' en propre sur o.[[Prototype]] ? Non, on vérifie le</span>\n<span class=\"token comment\">// prototype.</span>\n<span class=\"token comment\">// o.[[Prototype]].[[Prototype]] est Object.prototype et ne contient pas</span>\n<span class=\"token comment\">// de propriété 'd' par défaut. On vérifie son prototype.</span>\n<span class=\"token comment\">// o.[[Prototype]].[[Prototype]].[[Prototype]] est null, on arrête la recherche</span>\n<span class=\"token comment\">// aucune propriété n'est trouvée, le moteur renvoie undefined.</span>\n</code></pre></div>\n<p>Lorsquon définit une propriété sur un objet, cela définit une propriété en propre. La seule exception se produit lorsqu'on définit <a href=\"/fr/docs/Web/JavaScript/Guide/Working_with_Objects#d%c3%a9finir_des_accesseurs_et_des_mutateurs_(getters_et_setters)\">un accesseur et/ou un mutateur</a> sur une propriété héritée.</p>"}},{"type":"prose","value":{"id":"méthodes_héritées","title":"Méthodes héritées","isH3":true,"content":"<p>JavaScript ne possède pas de méthodes au sens des langages de classe. En effet, en JavaScript, toute fonction associée à un objet est également une propriété. Une fonction héritée se comportera comme n'importe quelle autre propriété (y compris pour l'ombrage mentionné ci-avant où on pourra parler de surcharge).</p>\n<p>Lorsqu'une fonction héritée est exécutée, la valeur de <a href=\"/fr/docs/Web/JavaScript/Reference/Operators/this\"><code>this</code></a> pointe vers l'objet hérité et non vers l'objet prototype qui possède la fonction comme propriété en propre.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">m</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// Quand on appelle o.m ici, 'this' fera référence à o</span>\n\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// p est un objet qui hérite de o</span>\n\np<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// on crée une propriété 'a' en propre sur p</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n<span class=\"token comment\">// lorsque p.m est appelée, 'this' fait référence à p.</span>\n<span class=\"token comment\">// Ainsi quand p hérite de m via o,</span>\n<span class=\"token comment\">// 'this.a' signifie p.a, soit la propriété 'a' de p</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"utiliser_les_prototypes_avec_javascript","title":"Utiliser les prototypes avec JavaScript","isH3":false,"content":"<p>Regardons un peu plus en détail ce qui se déroule en arrière-plan.</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note :</strong> Pour tous les exemples suivants, nous vous invitons à ouvrir la \"console\" de votre navigateur pour y copier/coller/éditer les fragments de code. Pour savoir comment lancer cette console, vous pouvez lire la documentation des navigateurs : <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/index.html\" class=\"external\" rel=\" noopener\">Firefox</a>, <a href=\"https://developers.google.com/web/tools/chrome-devtools/\" class=\"external\" rel=\" noopener\">Chrome</a>, <a href=\"https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide\" class=\"external\" rel=\" noopener\">Edge</a>.</p>\n</div>\n<p>En JavaScript, comme mentionné ci-dessus, les fonctions peuvent avoir des propriétés. Toutes les fonctions ont une propriété spéciale intitulée <code>prototype</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">faireUnTruc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> faireUnTruc<span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Object {...}</span>\n<span class=\"token comment\">// Peu importe comment vous déclarez la fonction.</span>\n<span class=\"token comment\">// une fonction en JavaScript aura toujours une propriété</span>\n<span class=\"token comment\">// prototype par défaut.</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">faireUnTruc</span><span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>faireUnTruc<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Object {...}</span>\n</code></pre></div>\n<p>Comme mentionné avant, <code>faireUnTruc()</code> possède une propriété par défaut <code>prototype</code>. Après avoir exécuté ce code dans une console, la console devrait afficher un objet semblable à :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">constructor</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">faireUnTruc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">constructor</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">hasOwnProperty</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">isPrototypeOf</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">propertyIsEnumerable</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">propertyIsEnumerable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">toLocaleString</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">toString</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">valueOf</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>On peut ajouter des propriétés au prototype de <code>faireUnTruc()</code> comme suit :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">faireUnTruc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nfaireUnTruc<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toto <span class=\"token operator\">=</span> <span class=\"token string\">\"truc\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> faireUnTruc<span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Produira le résultat suivant :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">toto</span><span class=\"token operator\">:</span> <span class=\"token string\">\"truc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">constructor</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">faireUnTruc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">constructor</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">hasOwnProperty</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">isPrototypeOf</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">propertyIsEnumerable</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">propertyIsEnumerable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">toLocaleString</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">toString</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">valueOf</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>On peut utiliser l'opérateur <code>new</code> afin de créer une instance de <code>faireUnTruc()</code> basée sur ce prototype. Pour utiliser l'opérateur <code>new</code>, il suffira d'appeler la fonction et de précéder cet appel avec le mot-clé <code>new</code>. Lorsqu'on appelle une fonction avec un opérateur <code>new</code>, celle-ci renvoie un objet qui est une instance de la fonction. On peut ensuite ajouter des propriétés sur cet objet.</p>\n<p>Voyons le code qui suit :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">faireUnTruc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nfaireUnTruc<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toto <span class=\"token operator\">=</span> <span class=\"token string\">\"truc\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// on ajoute une propriété au prototype</span>\n<span class=\"token keyword\">var</span> uneInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">faireUnTruc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuneInstance<span class=\"token punctuation\">.</span>prop <span class=\"token operator\">=</span> <span class=\"token string\">\"une valeur\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// on ajoute une propriété sur l'objet</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>uneInstance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Exécuté, ce code produira le résultat suivant dans la console :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">prop</span><span class=\"token operator\">:</span> <span class=\"token string\">\"une valeur\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">toto</span><span class=\"token operator\">:</span> <span class=\"token string\">\"truc\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">constructor</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">faireUnTruc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">constructor</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">hasOwnProperty</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">isPrototypeOf</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">propertyIsEnumerable</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">propertyIsEnumerable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">toLocaleString</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">toString</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">valueOf</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Comme nous l'avons vu avant, la valeur de <code>__proto__</code> pour <code>uneInstance</code> est <code>faireUnTruc.prototype</code>. Mais quel est l'intérêt ? Lorsqu'on accède à une propriété de <code>uneInstance</code>, le moteur contrôle d'abord si <code>uneInstance</code> possède cette propriété.</p>\n<p>Si <code>uneInstance</code> ne possède pas cette propriété, le moteur contrôlera la propriété sur la propriété <code>__proto__</code> de <code>uneInstance</code> (c'est-à-dire <code>faireUnTruc.prototype</code>). Si la propriété <code>__proto__</code> de <code>uneInstance</code> possède la propriété qu'on recherche, ce sera celle-ci qui sera utilisée.</p>\n<p>Si <code>__proto__</code> de <code>unTruc</code> ne possède pas la propriété recherchée, le moteur contrôle la propriété <code>__proto__</code> de la propriété <code>__proto__</code> de <code>uneInstance</code>. Par défaut, la propriété <code>__proto__</code> de n'importe quelle propriété <code>prototype</code> d'une fonction est <code>window.Object.prototype</code>. Ainsi, la propriété <code>__proto__</code> de la propriété <code>__proto__</code> de <code>uneInstance</code> (c'est-à-dire <code>__proto__</code> de <code>faireUnTruc.prototype</code> (c'est-à-dire. <code>Object.prototype</code>)) est contrôlée pour vérifier si la propriété y est présente.</p>\n<p>Si la propriété n'est pas trouvée sur la propriété <code>__proto__</code> de la propriété <code>__proto__</code> de <code>uneInstance</code>, c'est la propriété <code>__proto__</code> de la propriété <code>__proto__</code> de la propriété <code>__proto__</code> de <code>uneInstance</code> qui est contrôlée. Cependant il y a un problème car la propriété <code>__proto__</code> de la propriété <code>__proto__</code> de la propriété <code>__proto__</code> de <code>unTruc</code> n'existe pas. Autrement dit, toute la chaîne de prototype a été parcouru et on ne peut pas remonter d'un cran sur un autre <code>__proto__</code> et le moteur peut conclure que la propriété n'existe pas pour cet objet et renvoyer <code>undefined</code>.</p>\n<p>Regardons ce qui se produit dans la console avec un peu de code :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">faireUnTruc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nfaireUnTruc<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toto <span class=\"token operator\">=</span> <span class=\"token string\">\"truc\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> uneInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">faireUnTruc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuneInstance<span class=\"token punctuation\">.</span>prop <span class=\"token operator\">=</span> <span class=\"token string\">\"une valeur\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"uneInstance.prop: \"</span> <span class=\"token operator\">+</span> uneInstance<span class=\"token punctuation\">.</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"uneInstance.toto: \"</span> <span class=\"token operator\">+</span> uneInstance<span class=\"token punctuation\">.</span>toto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"faireUnTruc.prop: \"</span> <span class=\"token operator\">+</span> faireUnTruc<span class=\"token punctuation\">.</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"faireUnTruc.toto: \"</span> <span class=\"token operator\">+</span> faireUnTruc<span class=\"token punctuation\">.</span>toto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"faireUnTruc.prototype.prop: \"</span> <span class=\"token operator\">+</span> faireUnTruc<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"faireUnTruc.prototype.toto:  \"</span> <span class=\"token operator\">+</span> faireUnTruc<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Le résultat est le suivant :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>uneInstance<span class=\"token punctuation\">.</span>prop<span class=\"token operator\">:</span> une valeur\nuneInstance<span class=\"token punctuation\">.</span>toto<span class=\"token operator\">:</span> truc\nfaireUnTruc<span class=\"token punctuation\">.</span>prop<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\nfaireUnTruc<span class=\"token punctuation\">.</span>toto<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\nfaireUnTruc<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>prop<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\nfaireUnTruc<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toto<span class=\"token operator\">:</span> truc\n</code></pre></div>"}},{"type":"prose","value":{"id":"les_différentes_façons_de_créer_des_objets_et_les_impacts_sur_la_chaîne_de_prototype","title":"Les différentes façons de créer des objets et les impacts sur la chaîne de prototype","isH3":false,"content":""}},{"type":"prose","value":{"id":"objets_créés_avec_les_raccourcis_syntaxiques_littéraux","title":"Objets créés avec les raccourcis syntaxiques (littéraux)","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Le nouvel objet possède Object.prototype comme [[Prototype]]</span>\n<span class=\"token comment\">// o ne possède pas de propriété 'hasOwnProperty' en propre</span>\n<span class=\"token comment\">// hasOwnProperty est une propriété en propre de Object.prototype.</span>\n<span class=\"token comment\">// o hérite de hasOwnProperty via Object.prototype</span>\n<span class=\"token comment\">// Object.prototype possède null comme prototype.</span>\n<span class=\"token comment\">// o ---&gt; Object.prototype ---&gt; null</span>\n\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'coucou'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ça va'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Les tableaux (Array) héritent de Array.prototype</span>\n<span class=\"token comment\">// (qui possède les méthodes indexOf, forEach, etc.)</span>\n<span class=\"token comment\">// La chaîne de prototype est donc :</span>\n<span class=\"token comment\">// b ---&gt; Array.prototype ---&gt; Object.prototype ---&gt; null</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Les fonctions héritent de Function.prototype</span>\n<span class=\"token comment\">// (qui possède les méthodes call, bind, etc.)</span>\n<span class=\"token comment\">// La chaîne de prototype est donc</span>\n<span class=\"token comment\">// f ---&gt; Function.prototype ---&gt; Object.prototype ---&gt; null</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"objets_créés_avec_un_constructeur","title":"Objets créés avec un constructeur","isH3":true,"content":"<p>En JavaScript, un constructeur est <em>juste</em> une fonction que l'on invoque avec l'opérateur <a href=\"/fr/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code></a>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Graphe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sommets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arêtes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Graphe</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">ajoutSommet</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sommets<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Graphe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// g est un objet qui possède les propriétés 'sommets' and 'arêtes' en propre.</span>\n<span class=\"token comment\">// g.[[Prototype]] est la valeur de Graphe.prototype lorsque \"new Graphe()\" est exécuté.</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"objets_créés_avec_object.create","title":"Objets créés avec <code>Object.create()</code>","isH3":true,"content":"<p>ECMAScript 5 a introduit une nouvelle méthode : <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a>. Appeler cette méthode crée un nouvel objet et le prototype de cet objet est le premier argument de cette fonction :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// a ---&gt; Object.prototype ---&gt; null</span>\n\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// b ---&gt; a ---&gt; Object.prototype ---&gt; null</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 (héritée)</span>\n\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// c ---&gt; b ---&gt; a ---&gt; Object.prototype ---&gt; null</span>\n\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// d ---&gt; null</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>hasOwnProperty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// undefined, car d n'hérite pas de Object.prototype</span>\n</code></pre></div>\n<h4 id=\"suppression_des_propriétés_avec_delete\">Suppression des propriétés avec <code>delete</code></h4>\n<p>L'opérateur <a href=\"/fr/docs/Web/JavaScript/Reference/Operators/delete\"><code>delete</code></a> permet de supprimer une propriété directement rattachée à un objet. En revanche, il n'empêchera pas l'exploration de la chaîne de prototype :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">toto</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>toto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Affiche 1 car c'est une propriété disponible via le prototype</span>\nb<span class=\"token punctuation\">.</span>toto <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>toto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Affiche 5, désormais cette propriété existe sur l'objet</span>\n\n<span class=\"token keyword\">delete</span> b<span class=\"token punctuation\">.</span>toto<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>toto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Affiche 1 : la propriété n'est plus disponible sur l'objet mais</span>\n                     <span class=\"token comment\">// on peut toujours la récupérer via le prototype</span>\n</code></pre></div>","titleAsText":"Objets créés avec Object.create()"}},{"type":"prose","value":{"id":"objets_créés_avec_le_mot-clé_class","title":"Objets créés avec le mot-clé <code>class</code>","isH3":true,"content":"<p>ECMAScript 2015 introduit plusieurs mots-clés destinés à créer du sucre syntaxique pour manipuler des <a href=\"/fr/docs/Web/JavaScript/Reference/Classes\">classes</a>. Ces mots-clés sont <a href=\"/fr/docs/Web/JavaScript/Reference/Statements/class\"><code>class</code></a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Classes/constructor\"><code>constructor</code></a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Classes/static\"><code>static</code></a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Classes/extends\"><code>extends</code></a> et <a href=\"/fr/docs/Web/JavaScript/Reference/Operators/super\"><code>super</code></a>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Polygone</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">hauteur<span class=\"token punctuation\">,</span> largeur</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hauteur <span class=\"token operator\">=</span> hauteur<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>largeur <span class=\"token operator\">=</span> largeur<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Carr</span>é <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Polygone</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">longueurCôté</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>longueurCôté<span class=\"token punctuation\">,</span> longueurCôté<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">aire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hauteur <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>largeur<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">longueurCôté</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nouvelleLongueur</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hauteur <span class=\"token operator\">=</span> nouvelleLongueur<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>largeur <span class=\"token operator\">=</span> nouvelleLongueur<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> carré <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Carr</span><span class=\"token function\">é</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","titleAsText":"Objets créés avec le mot-clé class"}},{"type":"prose","value":{"id":"performance","title":"Performance","isH3":true,"content":"<p>Le temps de recherche des propriétés sera plus élevé si ces propriétés sont situées plus loin dans la chaîne de prototype. Tenter d'accéder à ces propriétés éloignées pourra avoir un impact négatif sur les performances. De plus, tenter d'accéder à des propriétés inexistantes entraînera toujours le parcours de l'ensemble de la chaîne de prototype.</p>\n<p>Lorsqu'on parcourt les propriétés d'un objet, <strong>toutes</strong> les propriétés énumérables situées sur la chaîne de prototype seront parcourues. Pour vérifier si un objet possède une propriété en propre plus que via sa chaîne de prototype, on devra utiliser la méthode <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>hasOwnProperty()</code></a> qui est héritée grâce à <code>Object.prototype</code>. Prenons un exemple concret avec le cas du graphe traité dans un exemple précédent :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arêtes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nononon'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ajoutSommet'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ajoutSommet'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note :</strong> Tester si une propriété vaut <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> ne suffit pas à vérifier la présence de la propriété sur un objet : une propriété peut très bien exister sur un objet mais valoir <code>undefined</code>.</p>\n</div>"}},{"type":"prose","value":{"id":"mauvaise_pratique_étendre_les_prototypes_natifs","title":"Mauvaise pratique : étendre les prototypes natifs","isH3":true,"content":"<p>On peut parfois voir du code qui étend <code>Object.prototype</code> ou l'un des prototypes natifs.</p>\n<p>Cette technique est intitulée <em>monkey patching</em> et brise l'encapsulation. Bien qu'elle soit utilisée par certains <em>frameworks</em>, il n'existe pas de raison suffisante pour étendre les objets natifs avec des fonctionnalités non-standard.</p>\n<p>La <strong>seule</strong> raison qui peut prévaloir pour l'extension de prototypes natifs est l'ajout de fonctionnalités JavaScript apparues avec les nouvelles versions des spécifications et moteurs afin d'en disposer dans de plus anciens environnements.</p>"}},{"type":"prose","value":{"id":"résumé_des_méthodes_pour_étendre_la_chaîne_de_prototype","title":"Résumé des méthodes pour étendre la chaîne de prototype","isH3":true,"content":"<p>Voici un tableau avec les quatre outils qui permettent d'étendre une chaîne de prototypes avec chacun leurs avantages et leurs inconvénients. Tous les exemples mentionnés permettent de créer le même objet <code>inst</code> (et affichant donc le même résultat dans la console) mais de façon différente.</p>\n<table class=\"standard-table\">\n  <tbody>\n    <tr>\n      <td style=\"width: 1%\">Nom</td>\n      <td>Exemples</td>\n      <td>Avantages</td>\n      <td style=\"vertical-align: top; width: 60%\">Inconvénients</td>\n    </tr>\n    <tr>\n      <td>Initialisation</td>\n      <td>\n        <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">toto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\ntoto<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">toto_prop</span><span class=\"token operator\">:</span> <span class=\"token string\">\"toto val\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">truc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> proto <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">toto</span><span class=\"token punctuation\">;</span>\nproto<span class=\"token punctuation\">.</span>truc_prop <span class=\"token operator\">=</span> <span class=\"token string\">\"truc val\"</span><span class=\"token punctuation\">;</span>\ntruc<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> proto<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">truc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inst<span class=\"token punctuation\">.</span>toto_prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inst<span class=\"token punctuation\">.</span>truc_prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n      </td>\n      <td style=\"vertical-align: top\">\n        Prise en charge par l'ensemble des navigateurs. Cette méthode est très\n        rapide, standard et facilement optimisable.\n      </td>\n      <td>\n        <p>\n          Afin d'utiliser cette méthode, il faut que la fonction ait été\n          initialisée. Pendant cette initialisation, le constructeur peut\n          enregistrer des informations uniques qui doivent être générées pour\n          chaque objet.\n        </p>\n        <p>\n          Toutefois, il est possible que ces informations uniques ne soient\n          générées qu'une seule fois.\n        </p>\n        <p>\n          De plus, l'initialisation du constructeur peut ajouter des méthodes\n          non souhaitées sur l'objet.\n        </p>\n        <p>Cela dit, ces problèmes ne se révèlent que rarement.</p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>Object.create()</code></td>\n      <td style=\"vertical-align: top\">\n        <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">toto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\ntoto<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">toto_prop</span><span class=\"token operator\">:</span> <span class=\"token string\">\"toto val\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">truc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n  toto<span class=\"token punctuation\">.</span>prototype\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nproto<span class=\"token punctuation\">.</span>truc_prop <span class=\"token operator\">=</span> <span class=\"token string\">\"truc val\"</span><span class=\"token punctuation\">;</span>\ntruc<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> proto<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">truc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inst<span class=\"token punctuation\">.</span>toto_prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inst<span class=\"token punctuation\">.</span>truc_prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n        <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">toto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\ntoto<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">toto_prop</span><span class=\"token operator\">:</span> <span class=\"token string\">\"toto val\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">truc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n  toto<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">truc_prop</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"truc val\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntruc<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> proto<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">truc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inst<span class=\"token punctuation\">.</span>toto_prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inst<span class=\"token punctuation\">.</span>truc_prop<span class=\"token punctuation\">)</span></code></pre></div>\n      </td>\n      <td>\n        Prise en charge par la majorité des navigateurs actuels. Elle permet de\n        définir directement <code>__proto__</code> en une seule fois et le\n        navigateur peut mieux optimiser l'objet. Elle permet aussi de créer des\n        objets sans prototype avec <code>Object.create(null)</code>.\n      </td>\n      <td style=\"vertical-align: top\">\n        <p>\n          Cette méthode n'est pas prise en charge par IE8 et les versions\n          antérieures. Toutefois, Microsoft ayant mis un terme au support des\n          systèmes qui utilisent ces navigateurs, ce ne devrait pas être un\n          problème pour la plupart des navigation.\n        </p>\n        <p>\n          De plus, la lenteur de l'initialisation de l'objet peut être causer\n          des soucis de performances lorsqu'on utilise un deuxième argument car\n          descripteur de propriété possède un objet rattaché. Lorsqu'on gère des\n          centaines de milliers de descripteurs, cela peut entraîner un certain\n          <em>lag</em>.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <p><code>Object.setPrototypeOf()</code></p>\n      </td>\n      <td>\n        <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">toto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\ntoto<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">toto_prop</span><span class=\"token operator\">:</span> <span class=\"token string\">\"toto val\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">truc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> proto <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">truc_prop</span><span class=\"token operator\">:</span> <span class=\"token string\">\"truc val\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>\n  proto<span class=\"token punctuation\">,</span> toto<span class=\"token punctuation\">.</span>prototype\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntruc<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> proto<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">truc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inst<span class=\"token punctuation\">.</span>toto_prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inst<span class=\"token punctuation\">.</span>truc_prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n        <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">toto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\ntoto<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">toto_prop</span><span class=\"token operator\">:</span> <span class=\"token string\">\"toto val\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">truc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> proto<span class=\"token punctuation\">;</span>\nproto<span class=\"token operator\">=</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">truc_prop</span><span class=\"token operator\">:</span> <span class=\"token string\">\"truc val\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  toto<span class=\"token punctuation\">.</span>prototype\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntruc<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> proto<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">truc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inst<span class=\"token punctuation\">.</span>toto_prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inst<span class=\"token punctuation\">.</span>truc_prop<span class=\"token punctuation\">)</span></code></pre></div>\n      </td>\n      <td style=\"vertical-align: top\">\n        Prise en charge par l'ensemble des navigateurs actuels. Elle permet de\n        manipuler dynamiquement le prototype d'un objet et également de\n        rattacher un prototype à un objet qui n'aurait pas de prototype.\n      </td>\n      <td>\n        Cette méthode devrait être dépréciée et possède des performances\n        faibles. En effet, les moteurs tenteront d'optimiser la connaissance de\n        la structure du prototype et cette méthode viendra à l'enconte de ces\n        hypothèses et certains navigateurs pourront même recompiler le code pour\n        le faire fonctionner selon les spécifications. Cette méthode n'est pas\n        prise en charge par IE8 et les versions antérieures.\n      </td>\n    </tr>\n    <tr>\n      <td><code>__proto__</code></td>\n      <td style=\"vertical-align: top\">\n        <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">toto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\ntoto<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">toto_prop</span><span class=\"token operator\">:</span> <span class=\"token string\">\"toto val\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">truc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> proto <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">truc_prop</span><span class=\"token operator\">:</span> <span class=\"token string\">\"truc val\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> toto<span class=\"token punctuation\">.</span>prototype\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ntruc<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> proto<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> inst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">truc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inst<span class=\"token punctuation\">.</span>toto_prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inst<span class=\"token punctuation\">.</span>truc_prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n        <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> inst <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">truc_prop</span><span class=\"token operator\">:</span> <span class=\"token string\">\"truc val\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">toto_prop</span><span class=\"token operator\">:</span> <span class=\"token string\">\"toto val\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inst<span class=\"token punctuation\">.</span>toto_prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inst<span class=\"token punctuation\">.</span>truc_prop<span class=\"token punctuation\">)</span></code></pre></div>\n      </td>\n      <td>\n        Prise en charge par l'ensemble des navigateurs actuels (y compris IE11\n        et ultérieurs). Défiinir __proto__ sur quelque chose qui n'est pas un\n        objet échouera silencieusement.\n      </td>\n      <td>\n        Cette méthode est dépréciée et n'est pas performante car les moteurs\n        tentent d'optimiser les prototypes. Aussi, le modifier ainsi\n        dynamiquement bloque ces optimisations et peut causer la recompilation\n        du code pour qu'il fonctionne selon les spécifications. Cette méthode\n        n'est pas prise en charge par IE10 et les versions antérieures.\n      </td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"prototype_et_object.getprototypeof","title":"<code>prototype</code> et <code>Object.getPrototypeOf()</code>","isH3":false,"content":"<p>JavaScript peut prêter à confusion pour les développeurs utilisant Java ou C++. JavaScript est un langage dynamique et les structures peuvent évoluer lors de l'exécution.</p>\n<p>Vous avez peut-être remarqué que la fonction <code>A</code> possède une propriété spéciale intitulée <code>prototype</code>. Cette propriété spéciale fonctionne avec l'opérateur <code>new</code>. Elle permet de copier la référence l'objet prototype sur la propriété interne <code>[[Prototype]]</code> de la nouvelle instance créée. Ainsi, avec <code>var a1 = new A()</code>, le moteur JavaScript définira <code>a1.[[Prototype]] = A.prototype</code>. Quand on tente d'accéder à une des propriétés de l'instance, JavaScript vérifie la présence sur l'instance puis analyse son prototype <code>[[Prototype]]</code>. Cela signifie que tout ce qui est défini sur <code>prototype</code> est effectivement partagé par l'ensemble des instances et on peut même modifier <code>prototype</code> en cours de route afin de modifier indirectement l'ensemble des instances.</p>\n<p>Dans l'exemple précédent, si on avait eu <code>var a1 = new A(); var a2 = new A();</code> alors <code>a1.faireUnTruc</code> aurait fait référence à <code>Object.getPrototypeOf(a1).faireUntruc</code> qui est identique à <code>A.prototype.faireUnTruc</code>. Autrement dit <code>Object.getPrototypeOf(a1).faireUnTruc == Object.getPrototypeOf(a2).faireUnTruc == A.prototype.faireUnTruc</code>.</p>\n<p>Autrement dit <code>prototype</code> peut être utilisé pour les types et <code>Object.getPrototypeOf()</code> pour les instances.</p>\n<p><code>[[Prototype]]</code> est analysé de façon récursive. Ainsi, <code>a1.faireUnTruc</code> correspondra à chercher <code>Object.getPrototypeOf(a1).faireUnTruc</code> puis <code>Object.getPrototypeOf(Object.getPrototypeOf(a1)).faireUnTruc</code> etc., jusqu'à ce qu'elle soit trouvée ou que <code>Object.getPrototypeOf</code> renvoie <code>null</code>.</p>\n<p>Ainsi, quand on appelle :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Toto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Le moteur JavaScript effectue les étapes suivantes :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\no<span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Prototype<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Toto</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n<span class=\"token function\">Toto</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>(ou quelque chose qui y ressemble) et si on écrit ensuite :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>o<span class=\"token punctuation\">.</span>unePropriété<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Le moteur vérifie si <code>o</code> possède une propriété <code>unePropriété</code> en propre. Si ce n'est pas le cas, il vérifie <code>Object.getPrototypeOf(o).unePropriété</code> et ainsi de suite.</p>","titleAsText":"prototype et Object.getPrototypeOf()"}},{"type":"prose","value":{"id":"conclusion","title":"Conclusion","isH3":false,"content":"<p>Il est essentiel de comprendre le modèle d'héritage prototypique avant d'écrire du code complexe qui repose sur ces notions. Il est également préférable d'avoir une idée de la longueur de la chaîne de prototype utilisée pour les différents objets et de fragmenter cette chaîne si besoin afin d'éviter des écueils de performances. Enfin, on veillera à ne pas étendre les prototypes natifs sauf afin d'émuler des nouvelles fonctionnalités qui ne seraient pas disponibles dans l'environnement utilisé.</p>"}}],"toc":[{"text":"Héritage et chaîne de prototype","id":"héritage_et_chaîne_de_prototype"},{"text":"Utiliser les prototypes avec JavaScript","id":"utiliser_les_prototypes_avec_javascript"},{"text":"Les différentes façons de créer des objets et les impacts sur la chaîne de prototype","id":"les_différentes_façons_de_créer_des_objets_et_les_impacts_sur_la_chaîne_de_prototype"},{"text":"<code>prototype</code> et <code>Object.getPrototypeOf()</code>","id":"prototype_et_object.getprototypeof"},{"text":"Conclusion","id":"conclusion"}],"summary":"JavaScript peut prêter à confusion lorsqu'on est habitué à manipuler des langages de programmation manipulant les classes (tels que Java ou C++). En effet, JavaScript est un langage dynamique et ne possède pas de concept de classe à part entière (le mot-clé class a certes été ajouté avec ES2015 mais il s'agit uniquement de sucre syntaxique, JavaScript continue de reposer sur l'héritage prototypique).","popularity":0.0007,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Inheritance and the prototype chain","locale":"en-US","native":"English (US)"},{"title":"Herencia y la cadena de prototipos","locale":"es","native":"Español"},{"title":"継承とプロトタイプチェーン","locale":"ja","native":"日本語"},{"title":"상속과 프로토타입","locale":"ko","native":"한국어"},{"title":"Herança e cadeia de protótipos (prototype chain)","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Наследование и цепочка прототипов","locale":"ru","native":"Русский"},{"title":"继承与原型链","locale":"zh-CN","native":"中文 (简体)"},{"title":"繼承與原型鏈","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"fr/web/javascript/inheritance_and_the_prototype_chain","github_url":"https://github.com/mdn/translated-content/blob/main/files/fr/web/javascript/inheritance_and_the_prototype_chain/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/fr/docs/Web","title":"Technologies web pour développeurs"},{"uri":"/fr/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/fr/docs/Web/JavaScript/Inheritance_and_the_prototype_chain","title":"Héritage et chaîne de prototype"}],"pageTitle":"Héritage et chaîne de prototype - JavaScript | MDN","noIndexing":false}}