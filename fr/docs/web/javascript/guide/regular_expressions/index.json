{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Expressions rationnelles","mdn_url":"/fr/docs/Web/JavaScript/Guide/Regular_Expressions","locale":"fr","native":"Français","sidebarHTML":"\n <ol>\n  <li><a href=\"/fr/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/fr/docs/Web/JavaScript/Tutorials\"><strong>Tutoriel&nbsp;:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Débutant</summary>\n      <ol>\n        <li><a href=\"/fr/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">Les bases en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Learn/JavaScript/First_steps\">Premiers pas en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Learn/JavaScript/Building_blocks\">Les briques JavaScript</a></li>\n        <li><a href=\"/fr/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Guide JavaScript</summary>\n      <ol>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Introduction\">Introduction</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Grammar_and_Types\">Types et grammaire</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Contrôle du flux et gestion des erreurs</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Loops_and_iteration\">Boucles et itération</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Functions\">Fonctions</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressions et opérateurs</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Numbers_and_dates\">Nombres et dates</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Text_formatting\">Formatage du texte</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Regular_Expressions\">Expressions rationnelles</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Indexed_collections\">Collections indexées</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Keyed_collections\">Collections avec clés</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Working_with_Objects\">Manipuler les objets</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Détails du modèle objet</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Iterators_and_generators\">Itérateurs et générateurs</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Meta_programming\">Meta-programmation</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Intermédiaire</summary>\n      <ol>\n        <li><a href=\"/fr/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/fr/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">Réintroduction à JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Data_structures\">Structures de données en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Différents tests d'égalité</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Closures\">Closures</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Avancé</summary>\n      <ol>\n        <li><a href=\"/fr/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Héritage et la chaîne de prototypes</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Strict_mode\">Mode strict</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Typed_arrays\">Tableaux typés en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Memory_Management\">Gestion de la mémoire</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/EventLoop\">Concurrence et boucle des événements</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/fr/docs/Web/JavaScript/Reference\">Références&nbsp;:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Objets natifs</summary>\n        <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Expressions &amp; opérateurs</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Instructions &amp; déclarations</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Fonctions</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Plus</summary>\n      <ol>\n        <li><a href=\"/fr/docs/Web/JavaScript/JavaScript_technologies_overview\">Aperçu des technologies JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Lexical_grammar\">Grammaire lexicale</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Data_structures\">Structures de données en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Rattachement des propriétés</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Iteration_protocols\">Protocoles d'itération</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Strict_mode\">Mode strict</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Passer au mode strict</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Template_literals\">Gabarit de chaîne de caractère</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Fonctionnalités dépréciées</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/fr/docs/Web/JavaScript/Guide/Text_formatting\">« Précédent</a></li>\n    <li><a class=\"button minimal\" href=\"/fr/docs/Web/JavaScript/Guide/Indexed_collections\">Suivant  »</a></li>\n</ul>\n<p>Les expressions rationnelles sont des motifs utilisés pour correspondre à certaines combinaisons de caractères au sein de chaînes de caractères. En JavaScript, les expressions rationnelles sont également des objets. Ces motifs sont utilisés avec les méthodes <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>exec</code></a> et <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"><code>test</code></a> de <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a>, et avec les méthodes <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>match</code></a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code>matchAll</code></a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>replace</code></a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/String/search\"><code>search</code></a> et <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code>split</code></a> de <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>. Ce chapitre explique comment utiliser les expressions rationnelles en JavaScript (aussi appelées expressions régulières ou « <em>RegExp</em> »).</p>"}},{"type":"prose","value":{"id":"créer_une_expression_rationnelle","title":"Créer une expression rationnelle","isH3":false,"content":"<p>Il est possible de construire une expression rationnelle de deux façons :</p>\n<ul>\n  <li>Utiliser un littéral d'expression régulière, qui correspond à un motif contenu entre deux barres obliques, par exemple :\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">ab+c</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>Lorsque les littéraux d'expression régulière sont utilisés, l'expression est compilée lors du chargement du script. Il est préférable d'utiliser cette méthode lorsque l'expression régulière reste constante, afin d'avoir de meilleurs performances.\n  </li>\n  <li>Appeler le constructeur de l'objet <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a>, par exemple :\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>  <span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ab+c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>Avec cette méthode, l'expression rationnelle est compilée lors de l'exécution. On utilisera cette méthode lorsque le motif utilisé est variable ou provient d'une autre source (par exemple une interaction utilisateur).\n  </li>\n</ul>"}},{"type":"prose","value":{"id":"écrire_une_expression_rationnelle","title":"Écrire une expression rationnelle","isH3":false,"content":"<p>Le motif d'une expression rationnelle est composé de caractères simples (comme <code>/abc/</code>), ou de caractères simples et spéciaux, comme <code>/ab*c/</code> ou <code>/Chapitre (\\d+)\\.\\d*/</code>. Le dernier exemple utilise des parenthèses qui permettent d'avoir une « mémoire ». La correspondance avec le motif contenu entre parenthèses pourra être utilisée par la suite. Ceci est décrit avec <a href=\"#parentheses\">ce paragraphe</a>.</p>"}},{"type":"prose","value":{"id":"utiliser_des_motifs_simples","title":"Utiliser des motifs simples","isH3":true,"content":"<p>Les motifs simples sont construits à partir de caractères pour lesquels on souhaite avoir une correspondance directe. Le motif <code>/des/</code> correspond lorsqu'on observe exactement les caractères 'des' ensemble et dans cet ordre précis. On pourrait utiliser ce motif et détecter une correspondance dans les chaînes suivantes : \"J'ai vu des licornes ?\" et \"Sa description de licorne était superbe\" car la chaîne de caractères 'des' y est présente (dans le mot description pour le second exemple). Il n'y aura pas de correspondance avec la chaîne de caractères \"Toc toc\" car 'des' n'est pas présente.</p>"}},{"type":"prose","value":{"id":"utiliser_des_caractères_spéciaux","title":"Utiliser des caractères spéciaux","isH3":true,"content":"<p>Lorsque le motif à trouver est plus complexe qu'une simple égalité (trouver tous les B, les blancs...), le motif devra contenir des caractères spéciaux. Ainsi, le motif <code>/ab*c/</code> correspond à toutes les combinaisons de caractères qui possèdent un seul 'a' suivi de zéro ou plusieurs 'b' (l'astérisque utilisée ici signifie que l'élément qui la précède doit être présent zéro ou plusieurs fois) qui sont immédiatement suivis d'un 'c'. Par exemple, la chaîne de caractère \"cbbabbbbcdebc\" correspond au motif avec la chaîne de caractères 'abbbbc'.</p>\n<p>Les pages suivantes décrivent en détail les caractères spéciaux qui peuvent être utilisés afin de composer une expression rationnelle.</p>\n<dl>\n  <dt id=\"assertions\"><a href=\"/fr/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions\">Assertions</a></dt>\n  <dd>\n    <p>Une assertion caractérisant la façon dont la correspondance peut se produire (en recherchant un motif avant, après ou avec une expression conditionnelle).</p>\n  </dd>\n  <dt id=\"limites\"><a href=\"/fr/docs/Web/JavaScript/Guide/Regular_Expressions/Assertions\">Limites</a></dt>\n  <dd>\n    <p>Permet d'indiquer le début ou la fin d'une ligne ou d'un mot.</p>\n  </dd>\n  <dt id=\"classes_de_caractère\"><a href=\"/fr/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes\">Classes de caractère</a></dt>\n  <dd>\n    <p>Les classes permettent de distinguer différents caractères selon différents groupes (par exemple les lettres et les chiffres).</p>\n  </dd>\n  <dt id=\"groupes_et_intervalles\"><a href=\"/fr/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Backreferences\">Groupes et intervalles</a></dt>\n  <dd>\n    <p>Permet d'indiquer un groupe ou un intervalle de caractères.</p>\n  </dd>\n  <dt id=\"quantificateurs\"><a href=\"/fr/docs/Web/JavaScript/Guide/Regular_Expressions/Quantifiers\">Quantificateurs</a></dt>\n  <dd>\n    <p>Permet d'indiquer un nombre de caractères ou d'expressions qui doivent correspondre.</p>\n  </dd>\n  <dt id=\"propriétés_unicode\"><a href=\"/fr/docs/Web/JavaScript/Guide/Expressions_r%C3%A9guli%C3%A8res/Unicode_Properties\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">Propriétés Unicode</a></dt>\n  <dd>\n    <p>Permet de distinguer les caractères en fonction de leurs caractéristiques Unicode (majuscule/minuscule, symbole mathématique, ponctuation).</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"échapper_des_caractères","title":"Échapper des caractères","isH3":true,"content":"<p>SI on souhaite rechercher certains caractères dans une chaîne de caractères et que ceux-ci ont une signification spéciale lorsqu'ils font partie d'une expression rationnelle (ex. \"*\"), il faudra échapper ces caractères spéciaux en plaçant une barre oblique inversée (<em>backslash</em> \"\\\") devant. Ainsi, si on souhaite trouver un \"a\" suivi d'un astérisque (\"*\") suivi d'un \"b\", on pourra composer l'expression rationnelle : <code>/a\\*b/</code> où la barre oblique inversée échappe l'astérisque afin de lui enlever sa signification particulière.</p>\n<p>De même si on écrit un littéral d'expression rationnelle et qu'on souhaite rechercher une barre oblique (\"/\") dans la chaîne cible, on pourra échapper ce caractère (sinon, il aura sa signification particulière aux expressions rationnelles et indiquera la fin du motif). Si on cherche la présence de \"/exemple/\" dans une chaîne de caractères, on pourra utiliser le littéral <code>/\\/exemple\\//</code>.</p>\n<p>Il en va de même avec la barre oblique inversée (dont la signification spécifique est justement l'échappement) : si on veut rechercher la chaîne \"C:\\\", on pourra utiliser le motif <code>/C:\\\\/</code> (la première barre oblique inversée sert à échapper la seconde).</p>\n<p>Lorsqu'on utilise le constructeur <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> avec une chaîne de caractères en paramètre (plutôt qu'un littéral), il faudra échapper la barre oblique inversée qui a un sens particulier dans les chaînes de caractères. Ainsi, le littéral <code>/a\\*b/</code> et <code>new RegExp(\"a\\\\*b\")</code> créeront la même expression (qui permet de chercher la lettre \"a\", suivie d'un astérisque, suivi de la lettre \"b\").</p>\n<p>La tableau qui suit fournit une liste complète des caractères spéciaux pouvant être utilisés dans les expressions régulières ainsi que leur signification.</p>\n<table class=\"standard-table\">\n  <caption>Caractères spéciaux utilisables pour les expressions rationnelles.</caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">Caractère</th>\n      <th scope=\"col\">Signification</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>\\</code></td>\n      <td>\n        <p>\n          Correspond selon les règles suivantes :<br><br>Une barre oblique\n          inversée (<em>backslash</em>) précédant un caractère non spécial\n          indique que le caractère qui suit est spécial et qu'il ne doit pas\n          être interprété directement. Ainsi, un '<code>b</code>', sans\n          <code>\\</code> avant, correspondra pour les 'b' minuscules quel que\n          soit leur position. En revanche '<code>\\b</code>' ne correspondra à\n          aucun caractère mais indique\n          <a href=\"#special-word-boundary\">un caractère de fin de mot</a>.<br><br>Un <em>backslash</em> précédant un caractère spécial\n          indique que le caractère qui suit doit être interprété littéralement\n          (et non pas comme un caractère spécial). Ainsi, le motif\n          <code>/a*/</code> utilise le caractère spécial '<code>*</code>' pour\n          correspondre à 0 ou plusieurs 'a'. Le motif <code>/a\\*/</code>, au\n          contraire, rend '<code>*</code>' non-spécial pour correspondre aux\n          chaînes de caractères qui comportent la lettre a et une astérisque,\n          comme 'a*'.<br><br>Il ne faut pas oublier d'échapper le caractère\n          <code>\\</code> car lui-même est un caractère d'échappement dans les\n          chaînes de caractères. Cela est utile lorsqu'on utilise la notation\n          RegExp(\"motif\").\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>^</code></td>\n      <td>\n        Correspond au début la séquence. Si le marqueur (<em>flag</em>) de\n        lignes multiples vaut <code>true</code>, il correspondra également\n        immédiatement après un caractère de saut de ligne.<br><br>Ainsi,\n        <code>/^A/</code> ne correspond pas au 'A' de \"un A\", mais correspond au\n        'A' de \"Arceau\".<br><br>Le caractère '<code>^</code>' possède un\n        sens différent lorsqu'il est utilisé dans un motif d'ensemble de\n        caractères. Voir les\n        <a href=\"#special-negated-character-set\">compléments sur les ensembles de caractères </a>pour plus de détails et d'exemples.\n      </td>\n    </tr>\n    <tr>\n      <td><code>$</code></td>\n      <td>\n        <p>\n          Correspond à la fin de la séquence. Si le marqueur (<em>flag</em>) de\n          lignes multiples vaut true, il correspondra également immédiatement\n          avant un caractère de saut de ligne.\n        </p>\n        <p>\n          Ainsi, <code>/t$/</code> ne correspond pas au 't' de \"printemps\", mais\n          correspond au 't' de \"aliment\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>*</code></td>\n      <td>\n        <p>\n          Correspond à l'expression précédente qui est répétée 0 ou plusieurs\n          fois. Équivalent à <code>{0,}</code>\n        </p>\n        <p>\n          Ainsi, <code>/bo*/</code> correspond à 'boo' dans \"Un booléen\" et à\n          'b' dans \"Un bateau bleu\", mais ne correspond à rien dans \"Ce matin\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>+</code></td>\n      <td>\n        <p>\n          Correspond à l'expression précédente qui est répétée une ou plusieurs\n          fois. C'est équivalent à <code>{1,}</code>.\n        </p>\n        <p>\n          Ainsi, <code>/a+/</code> correspond au 'a' dans \"maison\" et à tous les\n          'a' dans \"maaaaaaison\" mais ne correspond à rien dans \"mission\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>?</code></td>\n      <td>\n        Correspond à l'expression précédente qui est présente une fois ou pas du\n        tout. C'est équivalent à <code>{0,1}</code>.<br><br>Ainsi,\n        <code>/e?le?/</code> correspond au 'el' dans \"gel\" et au 'le' dans\n        \"angle\" mais aussi au 'l' dans \"Oslo\".<br><br>S'il est utilisé\n        immédiatement après l'un des quantificateurs : *, +, ?, ou {}, il rend\n        le quantificateur moins « gourmand » auquel cas le moins de caractères\n        correspond (le comportement par défaut, « gourmand », permettant de\n        faire correspondre le plus de caractères possible). Par exemple\n        <code>/\\d+/</code> utilisée avec \"123abc\" fait correspondre \"123\".\n        Utiliser <code>/\\d+?/</code> à la même chaîne de caractères fait\n        correspondre \"1\".<br><br>Ce symbole est également utilisé dans les\n        tests de présence autour de l'expression, décrits par les lignes\n        <code>x(?=y)</code> et <code>x(?!y)</code> de ce tableau.\n      </td>\n    </tr>\n    <tr>\n      <td><code>.</code></td>\n      <td>\n        <p>\n          Par défaut, (Le point) correspond à n'importe quel caractère excepté\n          un caractère de saut de ligne.\n        </p>\n        <p>\n          Ainsi, <code>/.n/</code> correspond à 'un' et 'en' dans \"Un baobab\n          nain en cours de croissance\" mais pas à 'nain'.\n        </p>\n        <p>\n          Si le marqueur <code>s</code> (<em>dotAll</em>) est utilisé, le point\n          correspondra également aux caractères de saut de ligne.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>(x)</code></td>\n      <td>\n        <p>\n          Correspond à 'x' et garde la correspondance en mémoire. Les\n          parenthèses permettent de <em>capturer </em>l'expression dans un «\n          groupe ».<br><br>Les '<code>(toto)</code>' et\n          '<code>(truc)</code>', dans le motif\n          <code>/(toto) (truc) \\1 \\2/</code> correspondent et gardent en mémoire\n          les deux premiers mots de la chaîne de caractère \"toto truc toto\n          truc\". Les <code>\\1</code> et <code>\\2</code> du motif correspondent\n          respectivement à la première et à la deuxième correspondances pour les\n          sous-chaînes entre parenthèses. Lorsqu'on souhaite effectuer un\n          remplacement, on utilisera <code>$1</code> et <code>$2</code> pour\n          faire référence au premier et second groupe et <code>$</code><code>n </code>pour faire référence au n-ième groupe capturé (ex.\n          <code>('toto truc'.replace(/(...) (...)/, '$2 $1').</code>\n          <code>$&amp;</code> fera référence à la chaîne entière).\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>(?:x)</code></td>\n      <td>\n        Correspond à 'x' mais ne garde pas la correspondance en mémoire. Les\n        parenthèses ne <em>capturent</em> pas l'expression et permettent\n        d'utiliser des sous-expressions d'une expression régulière pour\n        travailler plus finement. L'expression <code>/(?:zoo){1,2}/</code> sans\n        parenthèses non-capturantes <code>les caractères {1,2}</code> ne\n        s'appliqueraient qu'au dernier 'o' de 'zoo'. Avec les parenthèses\n        capturantes, <code>{1,2}</code> s'applique au mot entier 'zoo'. Pour\n        plus d'informations, voir\n        <a href=\"#parentheses\">Utiliser les parenthèses</a> ci-après.\n      </td>\n    </tr>\n    <tr>\n      <td><code>x(?=y)</code></td>\n      <td>\n        <p>\n          Correspond à 'x' seulement s'il est suivi de 'y'. On appelle cela un\n          test de succession (<em>lookahead</em>).\n        </p>\n        <p>\n          Ainsi, <code>/Jack(?=Sparrow)/</code> correspond à 'Jack' seulement\n          s'il est suivi de 'Sparrow'.\n          <code>/Jack(?=Sparrow|Bauer)/</code> correspond à 'Jack' seulement\n          s'il est suivi de 'Sparrow' ou de 'Bauer'. Cependant, ni 'Sparrow' ni\n          'Bauer' ne feront partie de la correspondance.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>x(?!y)</code></td>\n      <td>\n        <p>Correspond à 'x' seulement si 'x' n'est pas suivi de 'y'.</p>\n        <p>\n          Ainsi, <code>/\\d+(?!\\.)/</code> correspond à un nombre qui n'est pas\n          suivi par un point, cette expression utilisée avec\n          <code>la chaîne 3.141</code> correspondra pour '141' mais pas pour\n          '3.141'.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>(?&lt;=<em>y</em>)<em>x</em></code></td>\n      <td>\n        <p>\n          Correspond à <code><em>x</em></code> seulement si\n          <code><em>x</em></code> est précédé par <code><em>y</em></code>. C'est ce qu'on appelle une recherche arrière (<em>lookbehind</em>).\n        </p>\n        <p>\n          Ainsi /<code>(?&lt;=Jack)Sprat/</code> correspond à \"Sprat\"\n          seulement s'il est précédé de \"Jack\".<br><code>/(?&lt;=Jack|Tom)Sprat/</code>\n          correspond à \"Sprat\" seulement s'il est précédé de \"Jack\" ou \"Tom\".<br>Toutefois,\n          \"Jack\" et \"Tom\" ne feront pas partie de la correspondance.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>(?&lt;!<em>y</em>)<em>x</em></code></td>\n      <td>\n        <p>\n          Correspond à <code><em>x</em></code> uniquement si\n          <code><em>x</em></code> n'est pas précédé par\n          <code><em>y</em></code> (parfois appelée en anglais\n          <em>negated lookbehind</em>)<em>.</em>\n        </p>\n        <p>\n          Ainsi, <code>/(?&lt;!-)\\d+/</code> correspondra à un nombre\n          seulement si celui-ci n'est pas précédé d'un signe moins.<br><code>/(?&lt;!-)\\d+/.exec('3')</code>\n          cible \"3\".<br><code>/(?&lt;!-)\\d+/.exec('-3')</code> ne trouve\n          aucune correspondance car le nombre est précédé d'un signe.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>x|y</code></td>\n      <td>\n        <p>Correspond à 'x' ou 'y'.</p>\n        <p>\n          Ainsi, <code>/vert|rouge/</code> correspond à 'vert' dans \"feu vert\"\n          et à 'rouge' dans \"feu rouge\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>{n}</code></td>\n      <td>\n        Correspond pour exactement n occurences de l'expression précédente. N\n        doit être un entier positif.<br><br>Ainsi, <code>/a{2}/</code> ne\n        correspond pas au 'a' de \"Mozilla\" mais correspond à tous les 'a' de\n        \"Mozilaa\" et aux deux premiers 'a' de \"Mozillaaa\".\n      </td>\n    </tr>\n    <tr>\n      <td><code>{n,}</code></td>\n      <td>\n        <p>\n          Correspond lorsqu'il y a au moins <code>n</code> occurences de\n          l'expression précédente. <code>n</code> doit être un entier positif.\n        </p>\n        <p>\n          Par exemple <code>/a{2,}/</code> correspondra à <code>\"aa\"</code> ou à\n          <code>\"aaa\"</code> ou encore à <code>\"aaaa\"</code> mais pas à\n          <code>\"a\"</code>.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>{n,m}</code></td>\n      <td>\n        <p>\n          Lorsque <code>n</code> et <code>m</code> sont des entiers positifs,\n          cela correspond à au moins <code>n</code> occurences de l'expression\n          précédente et à au plus <code>m</code> occurrences. Lorsque\n          <code>m</code> n'est pas utilisé, la valeur par défaut correspondante\n          sera l'infini.\n        </p>\n        <p>\n          Ainsi, <code>/a{1,3}/</code> ne correspond à rien dans \"Mozill\", au\n          'a' de \"Mozilla\", au deux premiers 'a' de \"Mozillaa\" et au trois\n          premiers 'a' de \"Mozillaaaaa\". Pour ce dernier exemple, on doit noter\n          que le correspondance ne se fait que sur \"aaa\" bien qu'il y ait plus\n          de 'a' dans la chaîne de caractères.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>[xyz]</code></td>\n      <td>\n        Un ensemble de caractère. Ce type de motif correspond pour n'importe\n        quel caractètre présent entre les crochets, y compris les\n        <a href=\"/fr/docs/Web/JavaScript/Guide/Grammar_and_types#les_caract%c3%a8res_d'%c3%a9chappement\">séquences d'échappement</a>. Les caractères spéciaux comme le point (.) et l'astérisque ne sont\n        pas considérés comme spéciaux au sein d'un ensemble et n'ont donc pas\n        besoin d'être échappés. Il est possible de donner un ensemble sur un\n        intervalle de caractères en utilisant un tiret (-), comme le montre\n        l'exemple qui suit.<br><br>Le motif <code>[a-d]</code>, aura les\n        mêmes correspondances que <code>[abcd]</code>, correspondant au 'b' de\n        \"bulle\" et au 'c' de \"ciel\". Les motifis <code>/[a-z.]+/ </code>et\n        <code>/[\\w.]+/</code> correspondront pour la chaîne entirère :\n        \"Adre.ss.e\".\n      </td>\n    </tr>\n    <tr>\n      <td><code>[^xyz]</code></td>\n      <td>\n        <p>\n          Exclusion d'un ensemble de caractères. Cela correspond à tout ce qui\n          n'est pas compris entre crochets. Il est possible de fournir un\n          intervalle de caractères en utilisant un tiret (-). Les autres règles\n          qui s'appliquent pour l'ensemble de caractères (ci-avant) s'appliquent\n          également ici.\n        </p>\n        <p>\n          Par exemple, <code>[^abc]</code> est équivalent à <code>[^a-c]</code>.\n          Ils correspondent à 'u' dans \"bulle\" et à 'i' dans \"ciel\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>[\\b]</code></td>\n      <td>\n        Correspond pour un retour arrière (U+0008). (À ne pas confondre avec\n        <code>\\b</code>.)\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\b</code></td>\n      <td>\n        <p>\n          Correspond à la position d'une <em>limite de mot</em>. Une\n          limite de mot correspond à la position où un caractère d'un mot n'est\n          pas suivi ou précédé d'un autre caractère de mot. Il faut savoir que\n          la limite correspondante n'est pas incluse dans le résultat. Autrement\n          dit, la longueur d'une telle correspondance est nulle. (À ne pas\n          confondre avec <code>[\\b]</code>.)\n        </p>\n        <p>\n          Exemples :<br><code>/\\bm/</code> correspond au 'm' dans \"mignon\"\n          ;<br><code>/no\\b/</code> ne correspond pas au 'no' de \"mignon\" car\n          'no' est suivi de 'n' qui n'est pas un caractère de limite de mot;<br><code>/non\\b/</code>\n          correspond au 'non' de \"mignon\" car 'non' représente la fin de la\n          chaîne de caractère et n'est donc pas suivi par un caractère de\n          mot.<br><code>/\\w\\b\\w/</code> ne correspondra jamais à quoi que ce\n          soit car un caractère de mot ne peut pas être suivi à la fois par un\n          caractère de mot et un caractère n'étant pas un caractère de mot.\n        </p>\n        <div class=\"note notecard\" id=\"sect1\">\n          <p>\n            <strong>Note :</strong> Le moteur d'expressions rationnelles\n            JavaScript définit\n            <a href=\"https://www.ecma-international.org/ecma-262/5.1/#sec-15.10.2.6\" class=\"external\" rel=\" noopener\">un ensemble de caractères spécifiques</a>\n            qui doivent être considérés comme des caractères de mot. Tout\n            caractère qui n'est pas dans cet ensemble est considéré comme une\n            limite de mot. Cet ensemble de caractères est relativement limité\n            car constitué uniquement des caractères de l'alphabet romain en\n            minuscules et en majuscules, des chiffres décimaux et du tiret-bas\n            (<em>underscore</em>). Les autres caractères, comme les caractères\n            accentués (é ou ü par exemple), sont donc considérés comme des\n            limites de mots.\n          </p>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\B</code></td>\n      <td>\n        <p>\n          Correspond à une \"non-<em>limite de mot</em>\". Cela correspond pour\n          les cas suivants :\n        </p>\n        <ul>\n          <li>Avant le premier caractère d'une chaîne de caractères</li>\n          <li>Après le dernier caractère d'une chaîne de caractères</li>\n          <li>Entre deux caractères de mot</li>\n          <li>Entre deux caractères qui ne sont pas des caractères de mot</li>\n          <li>Avec la chaîne vide.</li>\n        </ul>\n        <p>\n          Ainsi, <code>/\\B../</code> correspond au 'oo' de \"football\" (et\n          <code>/e\\B./</code> correspond au 'er' dans \"une mer \"\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\c<em>X</em></code></td>\n      <td>\n        <p>\n          Étant donné un caractère <em>X</em> compris entre A et Z, cela\n          correspond au caractère de contrôle dans une chaîne de caractères.\n        </p>\n        <p>\n          Ainsi, <code>/\\cM/</code> correspond au caractère de contrôle M\n          (U+000D) d'une chaîne de caractère.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\d</code></td>\n      <td>\n        <p>Correspond à un chiffre et est équivalent à <code>[0-9]</code>.</p>\n        <p>\n          Ainsi, <code>/\\d/</code> ou <code>/[0-9]/</code> correspond à '2' dans\n          \"H2O est la molécule de l'eau\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\D</code></td>\n      <td>\n        <p>\n          Correspond à tout caractère qui n'est pas un chiffre et est équivalent\n          à<code> [^0-9]</code>.\n        </p>\n        <p>\n          Ainsi, <code>/\\D/</code> ou <code>/[^0-9]/</code> correspond à 'H'\n          dans \"H2O est la molécule de l'eau\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\f</code></td>\n      <td>Correspond à un saut de page (U+000C).</td>\n    </tr>\n    <tr>\n      <td><code>\\n</code></td>\n      <td>Correspond à un saut de ligne (U+000A).</td>\n    </tr>\n    <tr>\n      <td><code>\\r</code></td>\n      <td>Correspond à un retour chariot (U+000D).</td>\n    </tr>\n    <tr>\n      <td><code>\\s</code></td>\n      <td>\n        <p>\n          Correspond à un blanc (cela comprend les espace, tabulation, saut de\n          ligne ou saut de page). C'est équivalent à\n          <code>[\n\\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</code>.\n        </p>\n        <p>Ainsi, <code>/\\s\\w*/</code> correspond à ' toto' dans \"truc toto\".</p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\S</code></td>\n      <td>\n        <p>\n          Correspond à un caractère qui n'est pas un blanc. C'est équivalent à\n          <code>[^\n\\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]</code>.\n        </p>\n        <p>Ainsi, <code>/\\S\\w*/</code> correspond à 'truc' dans \"truc toto\".</p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\t</code></td>\n      <td>Correspond à une tabulation (U+0009).</td>\n    </tr>\n    <tr>\n      <td><code>\\v</code></td>\n      <td>Correspond à une tabulation verticale (U+000B).</td>\n    </tr>\n    <tr>\n      <td><code>\\w</code></td>\n      <td>\n        <p>\n          Correspond à n'importe quel caractère alphanumérique, y compris le\n          tiret bas. C'est équivalent à <code>[A-Za-z0-9_]</code>.\n        </p>\n        <p>\n          Ainsi, <code>/\\w/</code> correspond à 'l' dans \"licorne\", à '5' dans\n          \"5,28€\", et à '3' dans \"3D.\"\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\W</code></td>\n      <td>\n        <p>\n          Correspond à n'importe quel caractère n'étant pas un caractère de mot.\n          Cela est équivalent à <code>[^A-Za-z0-9_]</code>.\n        </p>\n        <p>\n          Ainsi, <code>/\\W/</code> ou <code>/[^A-Za-z0-9_]/</code> correspond à\n          '%' dans \"50%.\"\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\n</code></td>\n      <td>\n        <p>\n          Soit <em>n</em> un entier strictement positif, cela fait référence au\n          groupe de la n-ième expression entre parenthèses (en comptant les\n          parenthèses ouvrantes).\n        </p>\n        <p>\n          Ainsi, <code>/pomme(,)\\spoire\\1/</code> correspond à 'pomme, poire,'\n          dans \"pomme, poire, cerise, pêche\".\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\0</code></td>\n      <td>\n        Correspond au caractère NULL (U+0000). Il ne doit pas être suivi d'un\n        autre chiffre car <code>\\0&lt;chiffres&gt;</code> est une\n        <a href=\"/fr/docs/Web/JavaScript/Guide/Grammar_and_types#les_caract%c3%a8res_d'%c3%a9chappement\">séquence d'échappement</a>\n        pour les nombres en notation octale (si besoin d'utiliser un chiffre\n        ensuite, on pourra utiliser la forme <code>\\x00</code>, cf. ci-après).\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\xhh</code></td>\n      <td>\n        Correspond au caractère dont le code hexadécimal est hh (deux chiffres\n        hexadécimaux).\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\uhhhh</code></td>\n      <td>\n        Correspond au caractère dont le code est hhhh (quatre chiffres\n        hexadécimaux).\n      </td>\n    </tr>\n    <tr>\n      <td><code>\\u{hhhh}</code></td>\n      <td>\n        (Uniquement actif quand le marqueur <code>u</code> est activé)\n        Correspond au caractère dont la valeur Unicode est <code>hhhh</code> (en\n        chiffre hexadécimaux).\n      </td>\n    </tr>\n  </tbody>\n</table>\n<p>Afin d'échapper les informations saisies par l'utilisateur et de traîter les chaînes de caractères pour les utiliser au sein d'un expression régulière correspondante, il est possible d'utiliser le remplacement suivant :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">escapeRegExp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// $&amp; correspond à la chaîne correspondante</span>\n  <span class=\"token comment\">// dans son intégralité</span>\n  <span class=\"token keyword\">return</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[.*+?^${}()|[\\]\\\\]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\\\$&amp;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Le marqueur <code>g</code> situé en fin d'expression permet d'effectuer une recherche globale, qui parcoure toute la chaîne et renvoie l'ensemble des correspondances trouvées (voir <a href=\"#recherches_flag\">Utiliser les marqueurs</a> ci-après).</p>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note :</strong> Voir la page sur la méthode <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.replace</code></a> pour plus d'informations.</p>\n</div>"}},{"type":"prose","value":{"id":"utiliser_les_parenthèses","title":"Utiliser les parenthèses","isH3":true,"content":"<p>Les parenthèses encadrant une partie du motif de l'expression régulière peuvent être utilisées pour garder en mémoire les correspondances. Cela pourra être utile pour réutiliser la correspondance trouvée.</p>\n<p>Ainsi, le motif <code>/Chapitre (\\d+)\\.\\d*/</code> utilise des caractères échappés et spéciaux et indique une partie du motif à garder en mémoire. Ce motif correspond aux caractères 'Chapitre ' suivi par un ou plusieurs caractères numériques (<code>\\d</code> correspond à un chiffre et <code>+</code> indiquant que une série de 1 ou plusieurs chiffres), suivis par un point (qu'il est nécessaire d'échapper car c'est un caractère spécial, on utilise donc '\\' pour indiquer qu'on souhaite reconnaître le caractère '.'), suivi par 0 ou plusieurs chiffres (<code>\\d</code> correspondant à un chiffre et l'astérisque indiquant que le caractère est présent 0 ou plusieurs fois). Les parenthèses sont utilisées pour garder en mémoire les premiers chiffres correspondant.</p>\n<p>Ce motif est trouvé dans \"Ouvrir le Chapitre 4.3 au paragraphe 6\" et le chiffre '4' est gardé en mémoire. Le motif n'est pas trouvé dans \"Chapitre 3 et 4\", car la chaîne de caractères ne comporte pas de point après le '3'.</p>\n<p>Pour qu'une partie de la chaîne de caractère corresponde mais que la correspondance ne soit pas gardée en mémoire, on pourra utiliser <code>?:</code>. Ainsi, <code>(?:\\d+)</code> correspondra pour une séquence de chiffres (1 ou plusieurs chiffres) mais on ne gardera pas en mémoire les caractères correspondants.</p>"}},{"type":"prose","value":{"id":"utiliser_les_expressions_rationnelles","title":"Utiliser les expressions rationnelles","isH3":false,"content":"<p>Les expresssions régulières sont utilisées avec les méthodes <code>test</code> et <code>exec</code> de l'objet <code>RegExp</code> et avec les méthodes <code>match</code>, <code>replace</code>, <code>search</code>, et <code>split</code> de l'objet <code>String</code>. Ces méthodes sont expliquées en détail dans la <a href=\"/fr/docs/Web/JavaScript/Reference\">Référence JavaScript</a>.</p>\n<table>\n  <thead>\n    <tr>\n      <th>Méthode</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>exec</code></a></td>\n      <td>Une méthode de l'objet <code>RegExp</code> qui exécute une recherche de correspondance dans une chaîne de caractères. Elle renvoie un tableau d'informations ou <code>null</code> lorsqu'il n'y a pas de correspondance.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\"><code>test</code></a></td>\n      <td>Une méthode de l'objet <code>RegExp</code> testant la présence d'une correspondance dans une chaîne de caractères. Elle renvoie true ou false.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>match</code></a></td>\n      <td>Une méthode de l'objet <code>String</code> qui exécute une recherche de correspondance dans une chaîne de caractères. Elle renvoie un tableau d'informations ou <code>null</code> lorsqu'il n'y a pas de correspondance.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code>matchAll</code></a></td>\n      <td>Une méthode de l'objet <code>String</code> qui renvoie un itérateur contenant l'ensemble des correspondances, y compris les groupes capturants.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/String/search\"><code>search</code></a></td>\n      <td>Une méthode de l'objet <code>String</code> qui teste la présence d'une correspondance dans une chaîne de correspondance. Elle renvoie la position de la correspondance ou -1 s'il n'y en a pas.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>replace</code></a></td>\n      <td>Une méthode de l'objet <code>String</code> qui recherche une correspondance dans une chaîne de caractères et qui remplace la correspondance par une chaîne de substitution.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/String/split\"><code>split</code></a></td>\n      <td>Une méthode de l'objet <code>String</code> qui utilise une expression régulière ou une chaîne de caractères pour découper une chaîne de caractères en un tableau comprenant les fragments résultants.</td>\n    </tr>\n  </tbody>\n</table>\n<p>Pour savoir si un motif est présent au sein d'une chaîne de caractères, utiliser les méthodes <code>test</code> ou <code>search</code>. Pour obtenir plus d'informations (moins rapidement) on utilisera les méthodes <code>exec</code> ou <code>match</code>. Si on utilise <code>exec</code> ou <code>match</code> et qu'une correspondance est trouvée, ces méthodes renverront un tableau et mettront à jour des propriétés de l'objet global <code>RegExp</code> et aussi de l'instance de <code>RegExp</code> associée à l'expression rationnelle. Si aucune correspondance n'est trouvée, la méthode <code>exec</code> renverra <code>null</code> (qui est automatiquement converti à <code>false</code> lors d'un test conditionnel).</p>\n<p>Dans l'exemple qui suit, le script utilise la méthode <code>exec</code> pour trouver une correspondance dans une chaîne de caractères.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> monExpressionReguliere <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">d(b+)d</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> monTableau <span class=\"token operator\">=</span> monExpressionReguliere<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cdbbdbsbz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>S'il n'est pas nécessaire d'accéder aux propriétés de l'expression régulière, une autre façon de récupérer <code>monTableau</code> peut être :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> monTableau <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">d(b+)d</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cdbbdbsbz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// équivalent à \"cdbbdbsbz\".match(/d(b+)d/g);</span>\n</code></pre></div>\n<p>Si on souhaite construire une expression régulière à partir d'une chaîne de caractères, on peut utiliser le script suivant :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> monExpressionReguliere <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d(b+)d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> monTableau <span class=\"token operator\">=</span> monExpressionReguliere<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cdbbdbsbz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Avec ces scripts, on obtient bien une correspondance, la méthode renvoie un tableau et met à jour les propriétés listées dans le tableau qui suit.</p>\n<table class=\"standard-table\">\n  <caption>Résultats dûs à l'exécution d'une expression rationnelle.</caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">Objet</th>\n      <th scope=\"col\">Propriété ou indice</th>\n      <th scope=\"col\">Description</th>\n      <th scope=\"col\">Pour cet exemple</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td rowspan=\"4\"><code>monTableau</code></td>\n      <td></td>\n      <td>\n        La chaîne de caractères correspondante et les fragments de chaînes\n        gardés en mémoire.\n      </td>\n      <td><code>[\"dbbd\", \"bb\"]</code></td>\n    </tr>\n    <tr>\n      <td><code>index</code></td>\n      <td>\n        L'indice (débute à partir de 0) de la correspondance, compté dans la\n        chaîne de caractère initiale.\n      </td>\n      <td><code>1</code></td>\n    </tr>\n    <tr>\n      <td><code>input</code></td>\n      <td>La chaîne de caractères initiale.</td>\n      <td><code>\"cdbbdbsbz\"</code></td>\n    </tr>\n    <tr>\n      <td><code>[0]</code></td>\n      <td>Les derniers caractères qui correspondent.</td>\n      <td><code>\"dbbd\"</code></td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\"><code>monExpressionRégulière</code></td>\n      <td><code>lastIndex</code></td>\n      <td>\n        L'indice auquel débuter la prochaine correspondance. (Cette propriété\n        n'est utilisée que si l'expression régulière utilise l'option g, décrite\n        dans «\n        <a href=\"#recherches_flag\">Effectuer des recherches avancées avec les marqueurs</a>\n        ».\n      </td>\n      <td><code>5</code></td>\n    </tr>\n    <tr>\n      <td><code>source</code></td>\n      <td>\n        Le texte du motif, mis à jour à la création de l'expression régulière\n        mais pas lors de son exécution.\n      </td>\n      <td><code>\"d(b+)d\"</code></td>\n    </tr>\n  </tbody>\n</table>\n<p>Comme le montre la seconde formulation de cet exemple, il est possible d'utiliser une expression rationnelle, créée avec un objet initialisé sans l'affecter à une variable. Cela implique qu'à chaque utilisation, on aura une nouvelle expression régulière distincte et qu'on ne pourra pas, pour cette raison, accéder aux propriétés de l'expression régulière. Avec le script suivant :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> monExpressionReguliere <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">d(b+)d</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> monTableau <span class=\"token operator\">=</span> monExpressionReguliere<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cdbbdbsbz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"La valeur de lastIndex est \"</span> <span class=\"token operator\">+</span> monExpressionReguliere<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// \"La valeur de lastIndex est 5\"</span>\n</code></pre></div>\n<p>Si le script utilisé est :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> monTableau <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">d(b+)d</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cdbbdbsbz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"La valeur de lastIndex est \"</span> <span class=\"token operator\">+</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">d(b+)d</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// \"La valeur de lastIndex est 0\"</span>\n</code></pre></div>\n<p>Les occurences de <code>/d(b+)d/g</code> dans les deux instructions sont des objets différents. Leurs propriétés <code>lastIndex</code> respectives ont donc des valeurs différentes. Quand il est nécessaire d'accéder aux propriétés d'un objet décrivant une expression rationnelle, il faudra d'abord l'affecter à une variable.</p>"}},{"type":"prose","value":{"id":"utiliser_les_correspondances_de_groupes_avec_les_parenthèses","title":"Utiliser les correspondances de groupes avec les parenthèses","isH3":true,"content":"<p>Les parenthèses, utilisées dans un motif d'expression régulière, permettent de garder en mémoire un groupe (ou fragment) d'une correspondance. Ainsi, <code>/a(b)c/</code> correspond aux caractères 'abc' et garde 'b' en mémoire. Pour récupérer ces fragments mémorisés, on peut utiliser les éléments du tableau <code>array</code> <code>[1]</code>, ..., <code>[n]</code>.</p>\n<p>Le nombre de fragments qu'il est possible de garder entre parenthèses n'est pas limité. Le tableau renvoyé contiendra tout ce qui aura été trouvé. Les exemples qui suivent montrent comment utiliser cette syntaxe.</p>\n<p>Le script qui suit utilise la méthode <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>replace()</code></a> pour échanger les mots d'une chaîne de caractères. Pour remplacer le texte, le script utilise <code>$1</code> et <code>$2</code> qui correspondent au premier et deuxième groupe correspondant.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(\\w+)\\s(\\w+)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Titi toto\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> newstr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">,</span> <span class=\"token string\">\"$2, $1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Cela affichera \"toto, Titi\".</p>"}},{"type":"prose","value":{"id":"effectuer_des_recherches_avancées_en_utilisant_les_marqueurs_flags","title":"Effectuer des recherches avancées en utilisant les marqueurs (<em>flags</em>)","isH3":true,"content":"<p>Les expressions rationnelles peuvent être utilisées avec des marqueurs optionnels permettant des recherches globales et/ou ne respectant pas la casse. Ces marqueurs peuvent être utilisés séparement ou ensemble, quel que soit l'ordre. Ils font partie de l'expression régulière.</p>\n<table>\n  <thead>\n    <tr>\n      <th>Drapeau (<em>Flag</em>)</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>g</code></td>\n      <td>Recherche globale</td>\n    </tr>\n    <tr>\n      <td><code>i</code></td>\n      <td>Recherche ne respectant pas la casse</td>\n    </tr>\n    <tr>\n      <td><code>m</code></td>\n      <td>Recherche sur plusieurs lignes</td>\n    </tr>\n    <tr>\n      <td><code>s</code></td>\n      <td>Le point peut correspondre aux caractères de saut de ligne.</td>\n    </tr>\n    <tr>\n      <td><code>u</code></td>\n      <td>Unicode. Le motif de recherche est interprété comme une séquence de codets Unicode.</td>\n    </tr>\n    <tr>\n      <td><code>y</code></td>\n      <td>Effectue une recherche qui « adhère », en partant de la position courante de la chaîne de caractères sur laquelle la recherche est effectuée. Voir la page sur <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\"><code>sticky</code></a>.</td>\n    </tr>\n  </tbody>\n</table>\n<p>Pour utiliser un marqueur avec une expression régulière, on utilisera la syntaxe suivante :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>motif<span class=\"token operator\">/</span>marqueurs<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ou</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"motif\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"marqueurs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Les marqueurs font partie intégrante d'une expression régulière, ils ne peuvent pas être ajoutés ou supprimés ensuite.</p>\n<p>Ainsi, <code>re = /\\w+\\s/g</code> permet de créer une expression régulière pour trouver un ou plusieurs caractères suivis d'un espace, la recherche est effectuée globalement, sur toute la chaîne de caractères.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\w+\\s</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"un deux trois quatre\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> monTableau <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>monTableau<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Cela affichera [\"un \", \"deux \", \"trois \"]. On pourrait remplacer la ligne :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\w+\\s</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>avec la ligne :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\w+\\\\s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>pour obtenir le même résultat.</p>\n<p>Le comportement du marqueur <code>'g'</code> est différent selon qu'il est utilisé avec <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>exec()</code></a> ou avec <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code>match()</code></a>. Pour <code>match()</code>, c'est la chaîne de caractères qui invoque la méthode et l'expression rationnelle est alors un argument. Pour <code>exec()</code>, c'est l'expression rationnelle qui invoque la méthode et c'est la chaîne de caractères qui est passée en argument. Dans l'appel à <code>exec()</code>, le marqueur <code>'g'</code> permet d'avoir une progression itérative.</p>\n<p>Le marqueur <code>m</code> pourra être utilisé pour traiter une chaîne de caractères de plusieurs lignes comme plusieurs lignes distinctes. Si ce marqueur est utilisé, les caractères spéciaux <code>^</code> et <code>$</code> correspondront au début ou à la fin de n'importe quelle ligne appartenant à la chaîne de caractères au lieu de correspondre simplement au début ou à la fin de la chaîne.</p>","titleAsText":"Effectuer des recherches avancées en utilisant les marqueurs (flags)"}},{"type":"prose","value":{"id":"exemples","title":"Exemples","isH3":false,"content":"<p>Les exemples qui suivent utilisent les expressions régulières dans différents cas.</p>"}},{"type":"prose","value":{"id":"changer_lordre_dune_saisie","title":"Changer l'ordre d'une saisie","isH3":true,"content":"<p>L'exemple qui suit utilise les expressions régulières et <code>string.split()</code> et <code>string.replace()</code>. Le script nettoie la chaîne de caractères saisie qui contient des noms (prénom puis nom) séparés par des blancs, tabulations et points-virgules. Enfin il inverse les noms et prénoms puis trie la liste.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// La chaîne des noms contient plusieurs blancs et tabulations,</span>\n<span class=\"token comment\">// il peut y avoir plusieurs espaces entre le nom et le prénom.</span>\n<span class=\"token keyword\">var</span> noms <span class=\"token operator\">=</span> <span class=\"token string\">\"Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ; Chris Hand \"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"---------- Chaîne originale\\n\"</span><span class=\"token punctuation\">,</span> noms <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Préparer deux expressions régulières pour stocker un tableau.</span>\n<span class=\"token comment\">// et découper les chaînes dans ce tableau.</span>\n\n<span class=\"token comment\">// motif: on peut avoir des blancs, un point virgule puis d'autres blancs</span>\n<span class=\"token keyword\">var</span> motif <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\s*;\\s*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Découper la chaîne de caractères en morceaux séparés par le précédent motif</span>\n<span class=\"token comment\">// Stocker ces morceaux dans un tableau listeNoms</span>\n<span class=\"token keyword\">var</span> listeNoms <span class=\"token operator\">=</span> noms<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>motif<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// nouveau motif : un ou plusieurs caractères, des blancs puis des caractères.</span>\n<span class=\"token comment\">// On utilise des parenthèses pour garder en mémoire les groupes du motif.</span>\n<span class=\"token comment\">// On utilisera ces groupes par la suite.</span>\nmotif <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(\\w+)\\s+(\\w+)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Nouveau tableau pour enregistrer les noms traités.</span>\n<span class=\"token keyword\">var</span> listeParNomFamille <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Afficher le tableau des noms et remplir le nouveau tableau</span>\n<span class=\"token comment\">// avec les noms et prénoms séparés par des virgules, le nom</span>\n<span class=\"token comment\">// de famille étant écrit en premier</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// La méthode replace supprime tout ce qui correspond au motif</span>\n<span class=\"token comment\">// et le remplace par le nom (mémorisé), une virgule, un espace</span>\n<span class=\"token comment\">// et le prénom (mémorisé).</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Les variables $1 et $2 font références aux fragments gardés</span>\n<span class=\"token comment\">// en mémoire lors de l'utilisation du motif.</span>\n\noutput<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------- Après découpage avec l'expression régulière\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> i<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> listeNoms<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>listeNoms<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  listeParNomFamille<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> listeNoms<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>motif<span class=\"token punctuation\">,</span> <span class=\"token string\">\"$2, $1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Afficher le nouveau tableau</span>\noutput<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------- Noms et prénoms inversés\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> listeParNomFamille<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>listeParNomFamille<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Trier par le nom de famille puis afficher le tableau trié</span>\nlisteParNomFamille<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noutput<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------- Triée\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> listeParNomFamille<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  output<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>listeParNomFamille<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\noutput<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------- Fin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"utiliser_les_caractères_spéciaux_pour_vérifier_la_saisie","title":"Utiliser les caractères spéciaux pour vérifier la saisie","isH3":true,"content":"<p>Dans l'exemple suivant, on s'attend à ce que l'utilisateur saisissent un numéro de téléphone. Quand l'utilisateur appuie sur le bouton \"Vérifier\", le script vérifie la validité du numéro. Si le numéro est valide (il correspond à la séquence de caractères fournie par l'expression régulière), le script affiche un message remerciant l'utilisateur et confirmant le numéro. S'il est invalide, le script informe l'utilisateur et lui signifie que les informations saisies ne sont pas valides.</p>\n<p>Dans les parenthèses sans mémoire <code>(?:</code> , l'expression régulière cherche les deux premiers chiffres ou l'indicatif du pays suivi d'un blanc et du premier chiffre, ce qui correspond à</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>\\d{2}|\\+\\d{2}[ ]\\d\n</code></pre></div>\n<p>Cette partie signifie : deux chiffres OU un signe '+' suivi de deux chiffres, un blanc et un autre chiffre.</p>\n<p>Ensuite, on a un groupe qui est mémorisé (entre parenthèses) :</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>([- ])\n</code></pre></div>\n<p>Ce groupe correspond à ce qui va être utilisé pour séparer les différentes composantes du numéro de téléphone.</p>\n<p>Ensuite,</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code>\\d{2}\\1\n</code></pre></div>\n<p>signifie qu'on a deux chiffres suivi du premier groupe qui est celui qui définit le séparateur. Le reste est composé de la même façon. Ainsi les numéros de téléphone +33 1 23 45 67 89 et 01 23 45 67 89 seront tous les deux valides.</p>\n<p>L'événement <code>Change</code>, provoqué quand l'utilisateur appuie sur Entrée, renseigne la valeur <code>RegExp.input</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Content-Type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/html; charset=ISO-8859-1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Content-Script-Type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?:\\d{2}|\\+\\d{2}[ ]\\d)([- ])\\d{2}\\1\\d{2}\\1\\d{2}\\1\\d{2}</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">function</span> <span class=\"token function\">testInfo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">phoneInput</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> <span class=\"token constant\">OK</span> <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>phoneInput<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token constant\">OK</span><span class=\"token punctuation\">)</span>\n          window<span class=\"token punctuation\">.</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">.</span>input <span class=\"token operator\">+</span> <span class=\"token string\">\" n'est pas un numéro de téléphone valide!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n          window<span class=\"token punctuation\">.</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Merci, votre numéro est : \"</span> <span class=\"token operator\">+</span> <span class=\"token constant\">OK</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Saisissez votre numéro de téléphone (avec indicatif) puis cliquez sur \"Vérifier\".\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>Le format attendu est ## ## ## ## ## ou +## # ## ## ## ##.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>phone<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">testInfo</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'phone'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>Vérifier<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/fr/docs/Web/JavaScript/Guide/Text_formatting\">« Précédent</a></li>\n    <li><a class=\"button minimal\" href=\"/fr/docs/Web/JavaScript/Guide/Indexed_collections\">Suivant  »</a></li>\n</ul>"}}],"toc":[{"text":"Créer une expression rationnelle","id":"créer_une_expression_rationnelle"},{"text":"Écrire une expression rationnelle","id":"écrire_une_expression_rationnelle"},{"text":"Utiliser les expressions rationnelles","id":"utiliser_les_expressions_rationnelles"},{"text":"Exemples","id":"exemples"}],"summary":"Les expressions rationnelles sont des motifs utilisés pour correspondre à certaines combinaisons de caractères au sein de chaînes de caractères. En JavaScript, les expressions rationnelles sont également des objets. Ces motifs sont utilisés avec les méthodes exec et test de RegExp, et avec les méthodes match, matchAll, replace, search et split de String. Ce chapitre explique comment utiliser les expressions rationnelles en JavaScript (aussi appelées expressions régulières ou « RegExp »).","popularity":0.0024,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Regular expressions","locale":"en-US","native":"English (US)"},{"title":"Expresiones Regulares","locale":"es","native":"Español"},{"title":"正規表現","locale":"ja","native":"日本語"},{"title":"정규 표현식","locale":"ko","native":"한국어"},{"title":"Expressões Regulares","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Регулярные выражения","locale":"ru","native":"Русский"},{"title":"正则表达式","locale":"zh-CN","native":"中文 (简体)"},{"title":"正規表達式","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"fr/web/javascript/guide/regular_expressions","github_url":"https://github.com/mdn/translated-content/blob/main/files/fr/web/javascript/guide/regular_expressions/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/fr/docs/Web","title":"Technologies web pour développeurs"},{"uri":"/fr/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/fr/docs/Web/JavaScript/Guide","title":"Guide JavaScript"},{"uri":"/fr/docs/Web/JavaScript/Guide/Regular_Expressions","title":"Expressions rationnelles"}],"pageTitle":"Expressions rationnelles - JavaScript | MDN","noIndexing":false}}