{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Expressions et opérateurs","mdn_url":"/fr/docs/Web/JavaScript/Guide/Expressions_and_Operators","locale":"fr","native":"Français","sidebarHTML":"\n <ol>\n  <li><a href=\"/fr/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/fr/docs/Web/JavaScript/Tutorials\"><strong>Tutoriel&nbsp;:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Débutant</summary>\n      <ol>\n        <li><a href=\"/fr/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">Les bases en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Learn/JavaScript/First_steps\">Premiers pas en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Learn/JavaScript/Building_blocks\">Les briques JavaScript</a></li>\n        <li><a href=\"/fr/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Guide JavaScript</summary>\n      <ol>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Introduction\">Introduction</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Grammar_and_Types\">Types et grammaire</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Contrôle du flux et gestion des erreurs</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Loops_and_iteration\">Boucles et itération</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Functions\">Fonctions</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressions et opérateurs</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Numbers_and_dates\">Nombres et dates</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Text_formatting\">Formatage du texte</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Regular_Expressions\">Expressions rationnelles</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Indexed_collections\">Collections indexées</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Keyed_collections\">Collections avec clés</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Working_with_Objects\">Manipuler les objets</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Détails du modèle objet</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Iterators_and_generators\">Itérateurs et générateurs</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Meta_programming\">Meta-programmation</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Intermédiaire</summary>\n      <ol>\n        <li><a href=\"/fr/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/fr/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">Réintroduction à JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Data_structures\">Structures de données en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Différents tests d'égalité</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Closures\">Closures</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Avancé</summary>\n      <ol>\n        <li><a href=\"/fr/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Héritage et la chaîne de prototypes</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Strict_mode\">Mode strict</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Typed_arrays\">Tableaux typés en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Memory_Management\">Gestion de la mémoire</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/EventLoop\">Concurrence et boucle des événements</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/fr/docs/Web/JavaScript/Reference\">Références&nbsp;:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Objets natifs</summary>\n        <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Expressions &amp; opérateurs</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Instructions &amp; déclarations</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Fonctions</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Plus</summary>\n      <ol>\n        <li><a href=\"/fr/docs/Web/JavaScript/JavaScript_technologies_overview\">Aperçu des technologies JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Lexical_grammar\">Grammaire lexicale</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Data_structures\">Structures de données en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Rattachement des propriétés</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Iteration_protocols\">Protocoles d'itération</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Strict_mode\">Mode strict</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Passer au mode strict</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Template_literals\">Gabarit de chaîne de caractère</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Fonctionnalités dépréciées</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/fr/docs/Web/JavaScript/Guide/Functions\">« Précédent</a></li>\n    <li><a class=\"button minimal\" href=\"/fr/docs/Web/JavaScript/Guide/Numbers_and_dates\">Suivant  »</a></li>\n</ul>\n<p>Dans ce chapitre, nous décrirons les expressions et opérateurs en JavaScript, qui permettent notamment l'affectation, la comparaison, les opérations arithmétiques, binaires, logiques, la manipulation de chaîne de caractères, etc.</p>\n<p>Une <em>expression</em> peut être vue comme une unité de code valide qui est résolue en une valeur. Il existe deux types d'expressions, celles qui ont des effets de bord (par exemple l'affectation d'une valeur) et celles qui sont purement évaluées.</p>\n<p>L'expression <code>x = 7</code> fait partie de la première catégorie. Elle utilise <em>l'opérateur</em> <code>=</code> afin d'affecter la valeur sept à la variable <code>x</code>. L'expression elle-même est évaluée avec la valeur <code>7</code>.</p>\n<p>L'expression <code>3 + 4</code> fait partie de la deuxième catégorie. Elle utilise l'opérateur <code>+</code> afin d'ajouter <code>3</code> et <code>4</code> pour produire une valeur&nbsp;: <code>7</code>. Toutefois, si cette valeur n'est pas utilisée au sein d'une structure plus importante (par exemple avec <a href=\"/fr/docs/Web/JavaScript/Guide/Grammar_and_types#d%C3%A9clarations\">une déclaration de variable</a> comme <code>const z = 3 + 4</code>), elle sera immédiatement écartée (il s'agit généralement dans ce cas d'une erreur de programmation, car l'évaluation ne produira aucun effet).</p>\n<p>Comme les exemples précédents ont permis de montrer, toutes les expressions complexes sont formées avec des <em>opérateurs</em>, tels que <code>=</code> ou <code>+</code>. Dans cette section, nous verrons les opérateurs suivants&nbsp;:</p>\n<ul>\n  <li><a href=\"#op%C3%A9rateurs_daffectation\">Opérateurs d'affectation</a></li>\n  <li><a href=\"#op%C3%A9rateurs_de_comparaison\">Opérateurs de comparaison</a></li>\n  <li><a href=\"#op%C3%A9rateurs_arithm%C3%A9tiques\">Opérateurs arithmétiques</a></li>\n  <li><a href=\"#op%C3%A9rateurs_binaires\">Opérateurs binaires</a></li>\n  <li><a href=\"#op%C3%A9rateurs_logiques\">Opérateurs logiques</a></li>\n  <li><a href=\"#op%C3%A9rateurs_pour_les_grands_entiers\">Opérateurs pour les grands entiers</a></li>\n  <li><a href=\"#op%C3%A9rateurs_pour_les_cha%C3%AEnes_de_caract%C3%A8res\">Opérateurs pour les chaînes de caractères</a></li>\n  <li><a href=\"#op%C3%A9rateur_conditionnel_ternaire\">Opérateur conditionnel (ternaire)</a></li>\n  <li><a href=\"#op%C3%A9rateur_virgule\">Opérateur virgule</a></li>\n  <li><a href=\"#op%C3%A9rateurs_unaires\">Opérateurs unaires</a></li>\n  <li><a href=\"#op%C3%A9rateurs_relationnels\">Opérateurs relationnels</a></li>\n</ul>\n<p>Ces opérateurs assemblent des opérandes formés par des opérateurs de précédence plus haute ou par une des <a href=\"#expressions_de_base\">expressions de base</a>. Une liste complète et détaillée des opérateurs et expressions est également disponible dans <a href=\"/fr/docs/Web/JavaScript/Reference/Operators\">la référence</a>.</p>\n<p>La <em>précédence</em> des opérateurs détermine l'ordre selon lequel ils sont appliqués pour l'évaluation d'une expression. Par exemple&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Bien que <code>*</code> et <code>+</code> soit placés dans un ordre différent, ces deux expressions produisent la valeur <code>7</code>, car <code>*</code> a une précédence qui l'emporte sur celle de <code>+</code>. L'expression formée par les deux opérandes entourant <code>*</code> est donc toujours évaluée en premier ici. Vous pouvez passer outre la précédence des opérateurs en utilisant les parenthèses (ce qui crée <a href=\"#op%C3%A9rateur_de_groupement\">une expression groupée</a>, qui est une expression de base). Pour un tableau complet détaillant la précédence des opérateurs et les éventuels pièges, voir <a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#tableau\">la page de référence sur la précédence des opérateurs</a>.</p>\n<p>\n  JavaScript possède des opérateurs <em>binaires</em> et <em>unaires</em>, ainsi qu'un opérateur ternaire spécial (l'opérateur conditionnel).\n  Un opérateur binaire a besoin de deux opérandes, un placé avant l'opérateur (à sa gauche) et un placé après l'opérateur (à sa droite)&nbsp;:\n</p>\n<pre class=\"notranslate\">opérande1 opérateur opérande2\n</pre>\n<p><code>3 + 4</code> et <code>x * y</code> sont deux exemples d'expression qui utilisent un opérateur binaire. Sous cette forme, on parle d'opérateur binaire <em>infixe</em>, car l'opérateur est placé entre les deux opérandes. Tous les opérateurs binaires de JavaScript sont infixes.</p>\n<p>Un opérateur unaire fonctionne avec un seul opérande, situé avant ou après l'opérateur&nbsp;:</p>\n<pre class=\"notranslate\">opérateur opérande\nopérande opérateur\n</pre>\n<p><code>x++</code> et <code>++x</code> sont deux exemples d'expression avec un opérateur unaire. La forme <code>opérateur opérande</code> fonctionne pour les opérateurs unaires <em>postfixes</em>, tandis que la forme <code>opérande opérateur</code> fonctionne pour les opérateurs unaires <em>préfixes</em>. <code>++</code> et <code>--</code> sont les deux seuls opérateurs postfixes de JavaScript. Tous les autres opérateurs unaires, comme <code>!</code> ou <code>typeof</code>, sont préfixes.</p>"}},{"type":"prose","value":{"id":"opérateurs_daffectation","title":"Opérateurs d'affectation","isH3":false,"content":"<p>Un opérateur d'affectation affecte une valeur à son opérande gauche selon la valeur de son opérande droit. L'opérateur d'affectation simple est le signe égal (<code>=</code>), qui affecte la valeur de son opérande droit à son opérande gauche. Autrement dit, <code>x = f()</code> est une expression d'affectation qui affecte la valeur de <code>f()</code> à <code>x</code>.</p>\n<p>Il existe également des opérateurs d'affectation composites qui sont des raccourcis pour les opérations listées dans le tableau qui suit&nbsp;:</p>\n<table>\n  <thead>\n    <tr>\n      <th>Nom</th>\n      <th>Opérateur</th>\n      <th>Signification</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Assignment\">Affectation</a></td>\n      <td><code>x = f()</code></td>\n      <td><code>x = f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Affectation après addition</a></td>\n      <td><code>x += f()</code></td>\n      <td><code>x = x + f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Affectation après soustraction</a></td>\n      <td><code>x -= f()</code></td>\n      <td><code>x = x - f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Affectation après multiplication</a></td>\n      <td><code>x *= f()</code></td>\n      <td><code>x = x * f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Affectation après division</a></td>\n      <td><code>x /= f()</code></td>\n      <td><code>x = x / f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Affectation du reste</a></td>\n      <td><code>x %= f()</code></td>\n      <td><code>x = x % f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Affectation après exponentiation</a></td>\n      <td><code>x **= f()</code></td>\n      <td><code>x = x ** f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Affectation après décalage à gauche</a></td>\n      <td><code>x &lt;&lt;= f()</code></td>\n      <td><code>x = x &lt;&lt; f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Affectation après décalage à droite</a></td>\n      <td><code>x &gt;&gt;= f()</code></td>\n      <td><code>x = x &gt;&gt; f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Affectation après décalage à droite non signé</a></td>\n      <td><code>x &gt;&gt;&gt;= f()</code></td>\n      <td><code>x = x &gt;&gt;&gt; f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Affectation après ET binaire</a></td>\n      <td><code>x &amp;= f()</code></td>\n      <td><code>x = x &amp; f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Affectation après OU exclusif binaire</a></td>\n      <td><code>x ^= f()</code></td>\n      <td><code>x = x ^ f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Affectation après OU binaire</a></td>\n      <td><code>x |= f()</code></td>\n      <td><code>x = x | f()</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Affectation après ET logique</a></td>\n      <td><code>x &amp;&amp;= f()</code></td>\n      <td><code>x &amp;&amp; (x = f())</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Affectation après OU logique</a></td>\n      <td><code>x ||= f()</code></td>\n      <td><code>x || (x = f())</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Affectation après coalescence des nuls</a></td>\n      <td><code>x ??= f()</code></td>\n      <td><code>x ?? (x = f())</code></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"affectation_aux_propriétés","title":"Affectation aux propriétés","isH3":true,"content":"<p>Si une expression est évaluée en <a href=\"/fr/docs/Web/JavaScript/Guide/Working_with_Objects\">un objet</a>, le côté gauche d'une expression d'affectation pourra être utilisé pour des affectations sur les propriétés de cette expression. Par exemple&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Affiche 3.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Affiche { x: 3 }.</span>\n\n<span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"y\"</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Affiche 5.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Affiche { x: 3, y: 5 }.</span>\n</code></pre></div>\n<p>Pour plus d'informations sur les objets, voir <a href=\"/fr/docs/Web/JavaScript/Guide/Working_with_Objects\">Utiliser les objets</a>.</p>\n<p>Si une expression n'est pas évaluée en un objet, les affectations aux propriétés de cette expression ne fonctionneront pas&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> val <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nval<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Affiche undefined.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Affiche 0.</span>\n</code></pre></div>\n<p>En <a href=\"/fr/docs/Web/JavaScript/Reference/Strict_mode#convertir_les_fautes_en_erreurs\">mode strict</a>, le fragment de code qui précède déclenchera une exception, car on ne peut pas affecter de propriétés à des valeurs primitives.</p>\n<p>C'est une erreur que d'affecter des valeurs à des propriétés non-modifiables ou à des propriétés d'une expression sans propriété (<code>null</code> ou <code>undefined</code>).</p>"}},{"type":"prose","value":{"id":"décomposition","title":"Décomposition","isH3":true,"content":"<p>Pour les affectations plus complexes, <a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">l'affectation par décomposition</a> permet de construire une expression JavaScript pour extraire des données de tableaux ou d'objets avec une syntaxe qui reflète les littéraux utilisés pour la construction de tableaux ou d'objets.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> toto <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'un'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'deux'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'trois'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// sans décomposition</span>\n<span class=\"token keyword\">const</span> un    <span class=\"token operator\">=</span> toto<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> deux  <span class=\"token operator\">=</span> toto<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> trois <span class=\"token operator\">=</span> toto<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// avec décomposition</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>un<span class=\"token punctuation\">,</span> deux<span class=\"token punctuation\">,</span> trois<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> toto<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"évaluation_et_imbrication","title":"Évaluation et imbrication","isH3":true,"content":"<p>En général, les affectations sont utilisées pour une déclaration de variable (c'est-à-dire avec les instructions <a href=\"/fr/docs/Web/JavaScript/Reference/Statements/const\"><code>const</code></a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code></a>, ou <a href=\"/fr/docs/Web/JavaScript/Reference/Statements/var\"><code>var</code></a>) ou comme instructions indépendantes.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Déclare une variable x et l'initialise avec le résultat de f().</span>\n<span class=\"token comment\">// Le résultat de l'expression d'affectation \"x = f()\" est écarté.</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Réaffecte le résultat de g() à la variable x.</span>\n</code></pre></div>\n<p>Toutefois, à l'instar des autres expressions, les expressions d'affectation comme <code>x = f()</code> ont comme résultat une valeur. Bien que cette valeur ne soit généralement pas utilisée, elle peut être utilisée dans une autre expression.</p>\n<p>L'enchaînement d'affectations ou l'imbrication d'affectation dans d'autres expressions peut produire des résultats étranges. C'est pour cette raison que certains guides stylistiques JavaScript <a href=\"https://github.com/airbnb/javascript/blob/master/README.md#variables--no-chain-assignment\" class=\"external\" rel=\" noopener\">déconseillent l'enchaînement ou l'imbrication d'affectations</a>). Toutefois, vous pourrez en voir dans certains codes et il est donc important de comprendre comment ils fonctionnent.</p>\n<p>En enchaînant ou en imbriquant les expressions d'affectation, le résultat de chaque expression peut être affecté à une autre variable. On peut s'en servir pour journaliser, la placer dans un tableau, un appel de fonction, etc.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Une notation équivalente serait : const y = x = f();</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Affiche la valeur de retour de l'affectation x = f().</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Affiche la valeur de retour directement.</span>\n\n<span class=\"token comment\">// Une expression d'affectation peut être imbriquée à n'importe quel</span>\n<span class=\"token comment\">// endroit où les expressions sont autorisées, que ce soit comme</span>\n<span class=\"token comment\">// élément d'un littéral de tableau ou comme argument dans un appel</span>\n<span class=\"token comment\">// de fonction</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>\n  Le résultat de l'évaluation correspond à l'expression à droite du signe <code>=</code> dans la colonne «&nbsp;Signification&nbsp;» du tableau ci-avant. Cela signifie que l'évaluation de <code>x = f()</code> aura comme résultat celui de <code>f()</code>, que l'évaluation de <code>x += f()</code> aura comme résultat la somme <code>x + f()</code>, que celle de\n  <code>x **= f()</code> aura comme résultat <code>x ** f()</code>, etc.\n</p>\n<p>Pour les affectations logiques, <code>x &amp;&amp;= f()</code>, <code>x ||= f()</code>, et <code>x ??= f()</code>, la valeur de retour est celle de l'opération logique sans affectation, soit <code>x &amp;&amp; f()</code>, <code>x || f()</code>, et <code>x ?? f()</code>, respectivement.</p>\n<p>Lorsqu'on enchaîne ces expressions sans parenthèses ou opérateur de groupement comme les littéraux de tableau, les expressions d'affectation sont <strong>groupées de droite à gauche</strong> (elles sont <a href=\"https://en.wikipedia.org/wiki/Operator_associativity\" class=\"external\" rel=\" noopener\">associatives à droite</a>), mais sont <strong>évaluées de gauche à droite</strong>.</p>\n<p>On notera que pour les opérateurs d'affectation, à l'exception de <code>=</code>, les valeurs résultantes sont toujours basées sur les valeurs des opérandes <em>avant</em> l'opération.</p>\n<p>Par exemple, si on a les fonctions <code>f</code> et <code>g</code> et les variables <code>x</code> et <code>y</code> comme suit&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">f</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'F!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">g</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'G!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Prenons ces trois exemples&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>y <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">=</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span>\nx<span class=\"token punctuation\">[</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h4 id=\"exemple_dévaluation_n°1\">Exemple d'évaluation n°1</h4>\n<p><code>y = x = f()</code> est équivalente à <code>y = (x = f())</code>, car l'opérateur d'affectation est associatif à droite. Toutefois l'évaluation se fait de gauche à droite&nbsp;:</p>\n<ol>\n  <li>L'évaluation de l'expression d'affectation <code>y = x = f()</code> commence.\n    <ol>\n      <li>L'opérande <code>y</code> à gauche de l'affectation est évalué comme une référence à la variable nommée <code>y</code>.</li>\n      <li>L'évaluation de l'expression d'affectation <code>x = f()</code> commence.\n        <ol>\n          <li>L'opérande <code>x</code> à gauche de l'affectation est évalué comme une référence à la variable nommée <code>x</code>.</li>\n          <li>L'appel de fonction <code>f()</code> affiche \"F!\" dans la console et renvoie la valeur <code>2</code>.</li>\n          <li>Ce résultat de <code>f()</code>, <code>2</code>, est affecté à <code>x</code>.</li>\n        </ol>\n      </li>\n      <li>L'évaluation de l'expression d'affectation <code>x = f()</code> est maintenant terminée. Son résultat est la nouvelle valeur de <code>x</code>, qui est <code>2</code>.</li>\n      <li>Ce résultat, <code>2</code>, est à son tour affecté à <code>y</code>.</li>\n    </ol>\n  </li>\n  <li>L'évaluation de l'expression d'affectation <code>y = x = f()</code> est maintenant terminée. Son résultat est la nouvelle valeur de <code>y</code>, qui est ici <code>2</code>. La valeur <code>2</code> a été affectée à <code>x</code> et <code>y</code>, et la console a affiché \"F!\".</li>\n</ol>\n<h4 id=\"exemple_dévaluation_n°2\">Exemple d'évaluation n°2</h4>\n<p><code>y = [ f(), x = g() ]</code> est également évaluée de gauche à droite&nbsp;:</p>\n<ol>\n  <li>L'évaluation de l'expression d'affectation <code>y = [ f(), x = g() ]</code> commence.\n    <ol>\n      <li>L'opérande <code>y</code> à gauche de l'affectation est évalué comme une référence à la variable nommée <code>y</code>.</li>\n      <li>L'évaluation du littéral de tableau <code>[ f(), x = g() ]</code> commence.\n        <ol>\n          <li>L'appel de fonction <code>f()</code> affiche \"F!\" dans la console et renvoie la valeur <code>2</code>.</li>\n          <li>L'évaluation de l'expression d'affectation <code>x = g()</code> commence.\n            <ol>\n              <li>L'opérande <code>x</code> à gauche de l'affectation est évalué comme une référence à la variable nommée <code>x</code>.</li>\n              <li>L'appel de fonction <code>g()</code> affiche \"G!\" dans la console et renvoie la valeur <code>3</code>.</li>\n              <li>Ce résultat de <code>g()</code>, <code>3</code>, est affecté à <code>x</code>.</li>\n            </ol>\n          </li>\n          <li>L'évaluation de l'expression d'affectation <code>x = g()</code> est maintenant terminée. Son résultat est la nouvelle valeur de <code>x</code>&nbsp; <code>3</code>. Ce résultat devient l'élément qui suit dans le littéral de tableau (après le <code>2</code> provenant de <code>f()</code>).</li>\n        </ol>\n      </li>\n      <li>L'évaluation du littéral de tableau <code>[ f(), x = g() ]</code> est maintenant terminée. Son résultat est un tableau avec deux valeurs&nbsp;: <code>[ 2, 3 ]</code>.</li>\n      <li>Ce tableau, <code>[ 2, 3 ]</code>, est affecté à <code>y</code>.</li>\n    </ol>\n  </li>\n  <li>L'évaluation de l'expression d'affectation <code>y = [ f(), x = g() ]</code> est maintenant terminée. Son résultat est la nouvelle valeur de <code>y</code>, qui est <code>[ 2, 3 ]</code>. <code>3</code> est affecté à <code>x</code>, <code>[ 2, 3 ]</code> est affecté à <code>y</code> et la console a affiché \"F!\" puis \"G!\".</li>\n</ol>\n<h4 id=\"exemple_dévaluation_n°3\">Exemple d'évaluation n°3</h4>\n<p><code>x[f()] = g()</code> est également évaluée de gauche à droite. Dans cet exemple, on part du principe que la valeur de <code>x</code> est déjà un objet (pour plus d'informations sur les objets, voir <a href=\"/fr/docs/Web/JavaScript/Guide/Working_with_Objects\">Utiliser les objets</a>).</p>\n<ol>\n  <li>L'évaluation de l'expression d'affectation <code>x[f()] = g()</code> commence.\n    <ol>\n      <li>L'évaluation de l'accès à la propriété <code>x[f()]</code> situé à gauche de l'opérateur d'affectation commence.\n        <ol>\n          <li>Le <code>x</code> est évalué comme une référence à la variable nommée <code>x</code>.</li>\n          <li>Ensuite, l'appel <code>f()</code> affiche \"F!\" dans la console et renvoie la valeur <code>2</code>.</li>\n        </ol>\n      </li>\n      <li>L'évaluation de <code>x[f()]</code> est maintenant terminée et son résultat est une variable qui référence la propriété <code>x[2]</code>.</li>\n      <li>Ensuite, l'appel à la fonction <code>g()</code> affiche \"G!\" dans la console et renvoie la valeur <code>3</code>.</li>\n      <li>Ce résultat, <code>3</code>, est affecté à <code>x[2]</code> (cette étape réussira uniquement si la valeur de <code>x</code> est un <a href=\"/fr/docs/Web/JavaScript/Guide/Working_with_Objects\">objet</a>)?</li>\n    </ol>\n  </li>\n  <li>L'évaluation de l'expression d'affectation <code>x[f()] = g()</code> est maintenant terminée. Son résultat est la nouvelle valeur de <code>x[2]</code>, qui est <code>3</code>. <code>3</code> a été affecté à <code>x[2]</code> et la console a affiché \"F!\" puis \"G!\".</li>\n</ol>"}},{"type":"prose","value":{"id":"éviter_les_enchaînements_daffectation","title":"Éviter les enchaînements d'affectation","isH3":true,"content":"<p>L'enchaînement ou l'imbrication d'affectations dans d'autres expressions peut produire d'étranges résultats et c'est pour cette raison <a href=\"https://github.com/airbnb/javascript/blob/master/README.md#variables--no-chain-assignment\" class=\"external\" rel=\" noopener\">que les enchaînements et imbrications d'affectation sont déconseillés</a>).</p>\n<p>On évitera en particulier les enchaînements d'affectation dans une instruction <a href=\"/fr/docs/Web/JavaScript/Reference/Statements/const\"><code>const</code></a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Statements/let\"><code>let</code></a>, ou <a href=\"/fr/docs/Web/JavaScript/Reference/Statements/var\"><code>var</code></a> qui <em>ne fonctionnent pas</em> dans la plupart des cas. Seule la variable la plus à gauche sera alors déclarée et les variables intermédiaires dans la chaîne ne seront <em>pas</em> déclarées par l'instruction <code>const</code>/<code>let</code>/<code>var</code>. Ainsi, si on a&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> z <span class=\"token operator\">=</span> y <span class=\"token operator\">=</span> x <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>On pourrait penser que cela permet de déclarer les variables <code>x</code>, <code>y</code>, et <code>z</code>. Cependant, seule la variable <code>z</code> est déclarée. <code>y</code> et <code>x</code> sont des références invalides à des variables inexistantes (en <a href=\"/fr/docs/Web/JavaScript/Reference/Strict_mode\">mode strict</a>) ou, pire, créent des <a href=\"/fr/docs/Glossary/Global_variable\">variables globales</a> pour <code>x</code> et <code>y</code> en <a href=\"/fr/docs/Glossary/Sloppy_mode\">mode non-strict</a>.</p>"}},{"type":"prose","value":{"id":"opérateurs_de_comparaison","title":"Opérateurs de comparaison","isH3":false,"content":"<p>Un opérateur de comparaison compare ses opérandes et renvoie une valeur logique selon que la comparaison est vraie ou non. Les opérandes peuvent être des nombres, des chaînes de caractères, des booléens ou des <a href=\"/fr/docs/Web/JavaScript/Guide/Working_with_Objects\">objets</a>. Les chaînes de caractères sont comparées selon l'ordre lexicographique standard en utilisant les valeurs Unicode.</p>\n<p>Dans la plupart des cas, si les deux opérandes ne sont pas du même type, le moteur JavaScript tentera de les convertir dans un type approprié pour la comparaison. Cela entraîne généralement une comparaison numérique des opérandes.</p>\n<p>\n  Les opérateurs <code>===</code> et <code>!==</code> sont des exceptions à cette règle de conversion&nbsp;: ils réalisent des comparaisons d'égalité et d'inégalité strictes. Ces opérateurs n'effectuent pas de conversion des opérandes avant la vérification de l'égalité.\n  Le tableau qui suit décrit les opérateurs de comparaison en utilisant ce fragment de code comme exemple&nbsp;:\n</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> var1 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> var2 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<table class=\"standard-table\">\n  <caption>Opérateurs de comparaison</caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">Opérateur</th>\n      <th scope=\"col\">Description</th>\n      <th scope=\"col\">Exemples qui renvoient <code>true</code></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Equality\">Égalité</a> (<code>==</code>)</td>\n      <td>Renvoie <code>true</code> si les opérandes sont égaux (après conversion implicite).</td>\n      <td><code>3 == var1</code><br><code>\"3\" == var1</code><br><code>3 == '3'</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Inequality\">Inégalité</a> (<code>!=</code>)</td>\n      <td>Renvoie <code>true</code> si les opérandes sont différents (après conversion implicite).</td>\n      <td><code>var1 != 4</code><br><code>var2 != \"3\"</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Égalité stricte</a> (<code>===</code>)</td>\n      <td>Renvoie <code>true</code> si les opérandes sont égaux et du même type. Voir également <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is()</code></a> et <a href=\"/fr/docs/Web/JavaScript/Equality_comparisons_and_sameness\">l'égalité en JavaScript</a>.</td>\n      <td><code>3 === var1</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Inégalité stricte</a> (<code>!==</code>)</td>\n      <td>Renvoie <code>true</code> si les opérandes sont du même type et différents ou s'ils ne sont pas du même type.</td>\n      <td><code>var1 !== \"3\"</code><br><code>3 !== '3'</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Greater_than\">Supériorité stricte</a> (<code>&gt;</code>)</td>\n      <td>Renvoie <code>true</code> si l'opérande gauche est strictement supérieur à l'opérande droit.</td>\n      <td><code>var2 &gt; var1</code><br><code>\"12\" &gt; 2</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Supériorité</a> (<code>&gt;=</code>)</td>\n      <td>Renvoie <code>true</code> si l'opérande gauche est supérieur ou égal à l'opérande droit.</td>\n      <td><code>var2 &gt;= var1</code><br><code>var1 &gt;= 3</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Less_than\">Infériorité stricte</a> (<code>&lt;</code>)</td>\n      <td>Renvoie <code>true</code> si l'opérande gauche est strictement inférieur à l'opérande droit.</td>\n      <td><code>var1 &lt; var2</code><br><code>\"2\" &lt; 12</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Infériorité</a> (<code>&lt;=</code>)</td>\n      <td>Renvoie <code>true</code> si l'opérande gauche est inférieur ou égal à l'opérande droit.</td>\n      <td><code>var1 &lt;= var2</code><br><code>var2 &lt;= 5</code></td>\n    </tr>\n  </tbody>\n</table>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note :</strong> <code>=&gt;</code> n'est pas un opérateur de comparaison, il s'agit de la notation pour <a href=\"/fr/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">les fonctions fléchées</a>.</p>\n</div>"}},{"type":"prose","value":{"id":"opérateurs_arithmétiques","title":"Opérateurs arithmétiques","isH3":false,"content":"<p>Un opérateur arithmétique combine des opérandes numériques et renvoie une valeur numérique. Les opérateurs arithmétiques standard sont l'addition (<code>+</code>), la soustraction (<code>-</code>), la multiplication (<code>*</code>), et la division (<code>/</code>). Ces opérateurs fonctionnent comme dans la plupart des langages de programmation qui utilisent les nombres flottants (la division par zéro donne notamment <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>). On pourra par exemple avoir&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.5</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>En plus des opérations arithmétiques standard (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>), JavaScript fournit les opérateurs arithmétiques suivants&nbsp;:</p>\n<table class=\"fullwidth-table\">\n  <caption>Opérateurs arithmétiques</caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">Opérateur</th>\n      <th scope=\"col\">Description</th>\n      <th scope=\"col\">Exemple</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Remainder\">Reste</a> (<code>%</code>)</td>\n      <td>Un opérateur binaire qui renvoie le reste entier de la division des deux opérandes.</td>\n      <td>`12 % 5` renvoie `2`.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Increment\">Incrément</a> (<code>++</code>)</td>\n      <td>Un opérateur unaire qui ajoute un à son opérande. S'il est utilisé en opérateur préfixe (<code>++x</code>), il renvoie la valeur de son opérande après y avoir ajouté un. S'il est utilisé en opérateur postfixe (<code>x++</code>), il renvoie la valeur de l'opérande avant l'ajout de un.</td>\n      <td>Si <code>x</code> vaut 3, alors <code>++x</code> définit <code>x</code> avec 4 et renvoie 4, tandis que <code>x++</code> renvoie 3 puis, uniquement après, définit <code>x</code> avec 4.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Decrement\">Décrément</a> (<code>--</code>)</td>\n      <td>Un opérateur unaire qui soustrait un à son opérande. La valeur de retour est analogue à celle de l'opérateur d'incrément.</td>\n      <td>Si <code>x</code> vaut 3, alors <code>--x</code> définit <code>x</code> avec 2 et renvoie 2, tandis que <code>x--</code> renvoie 3 puis, uniquement après, définit <code>x</code> avec 2.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Négation unaire</a> (<code>-</code>)</td>\n      <td>Un opérateur unaire qui renvoie l'opposé de l'opérande.</td>\n      <td>Si <code>x</code> vaut 3, <code>-x</code> renvoie -3.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Plus unaire</a> (<code>+</code>)</td>\n      <td>Un opérateur unaire qui tente la conversion de l'opérande en nombre si ce n'est pas déjà une valeur numérique.</td>\n      <td>\n        <p><code>+\"3\"</code> renvoie <code>3</code>.</p>\n        <p><code>+true</code> renvoie <code>1</code>.</p>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Opérateur d'exponentiation</a> (<code>**</code>)</td>\n      <td>Élève une base donnée par l'opérande gauche à la puissance donnée par l'opérande droit.</td>\n      <td><code>2 ** 3</code> renvoie <code>8</code>. <code>10 ** -1</code> renvoie <code>0.1</code>.</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"opérateurs_binaires","title":"Opérateurs binaires","isH3":false,"content":"<p>Un opérateur binaire traite les opérandes comme des suites de 32 bits (des zéros ou des uns) plutôt que comme des nombres décimaux, hexadécimaux et octaux. Ainsi, le nombre décimal 9 se représente en binaire comme 1001. Les opérateurs binaires effectuent leur opération sur des représentations binaires et renvoient des valeurs numériques.</p>\n<p>Le tableau qui suit détaille les opérateurs binaires JavaScript.</p>\n<table>\n  <thead>\n    <tr>\n      <th>Opérateur</th>\n      <th>Utilisation</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">ET binaire</a></td>\n      <td><code>a &amp; b</code></td>\n      <td>Renvoie un à chaque position pour laquelle les bits des deux opérandes valent un.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">OU binaire</a></td>\n      <td><code>a | b</code></td>\n      <td>Renvoie un zéro à chaque position pour laquelle les bits des deux opérandes valent zéro.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">OU exclusif binaire</a></td>\n      <td><code>a ^ b</code></td>\n      <td>Renvoie un zéro à chaque position pour laquelle les bits sont les mêmes. [Renvoie un à chaque position où les bits sont différents.]</td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">NON binaire</a></td>\n      <td><code>~ a</code></td>\n      <td>Inverse les bits de l'opérande.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Left_shift\">Décalage à gauche</a></td>\n      <td><code>a &lt;&lt; b</code></td>\n      <td>Décale la représentation binaire de <code>a</code> de <code>b</code> bits vers la gauche, en ajoutant des zéros à droite.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Right_shift\">Décalage à droite avec propagation du signe</a></td>\n      <td><code>a &gt;&gt; b</code></td>\n      <td>Décale la représentation binaire de <code>a</code> de <code>b</code> bits vers la droite, enlevant les bits en trop.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Décalage à droite avec remplissage à zéro</a></td>\n      <td><code>a &gt;&gt;&gt; b</code></td>\n      <td>Décale la représentation binaire de <code>a</code> de <code>b</code> bits vers la droite, enlevant les bits en trop et en ajoutant des zéros à gauche.</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"opérateurs_binaires_logiques","title":"Opérateurs binaires logiques","isH3":true,"content":"<p>Les opérateurs logiques binaires fonctionnent de la façon suivante&nbsp;:</p>\n<ul>\n  <li>Les opérandes sont convertis en entiers sur 32 bits. Pour les nombres dont la valeur binaire dépasse 32 bits, les bits les plus hauts sont abandonnés. Ainsi, l'entier suivant sur plus de 32 bits sera converti en entier sur 32 bits&nbsp;:\n    <pre class=\"notranslate\">Avant : 1110 0110 1111 1010 0000 0000 0000 0110 0000 0000 0001\nAprès :                1010 0000 0000 0000 0110 0000 0000 0001\n</pre>\n  </li>\n  <li>Chaque bit du premier opérande est associé au bit correspondant du second opérande&nbsp;: le premier bit avec le premier bit, le second avec le second et ainsi de suite.</li>\n  <li>L'opérateur est appliqué sur chaque paire ainsi constituée et le résultat est construit en binaire.</li>\n</ul>\n<p>Par exemple, la représentation binaire du nombre décimal <code>9</code> est <code>1001</code>, et celle du nombre décimal <code>15</code> est <code>1111</code>. Aussi, quand on utilise les opérateurs binaires sur ces valeurs, on a les résultats suivants&nbsp;:</p>\n<table>\n  <thead>\n    <tr>\n      <th>Expression</th>\n      <th>Résultat</th>\n      <th>Description binaire</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>15 &amp; 9</code></td>\n      <td><code>9</code></td>\n      <td><code>1111 &amp; 1001 = 1001</code></td>\n    </tr>\n    <tr>\n      <td><code>15 | 9</code></td>\n      <td><code>15</code></td>\n      <td><code>1111 | 1001 = 1111</code></td>\n    </tr>\n    <tr>\n      <td><code>15 ^ 9</code></td>\n      <td><code>6</code></td>\n      <td><code>1111 ^ 1001 = 0110</code></td>\n    </tr>\n    <tr>\n      <td><code>~15</code></td>\n      <td><code>-16</code></td>\n      <td><code>~ 0000 0000 … 0000 1111 = 1111 1111 … 1111 0000</code></td>\n    </tr>\n    <tr>\n      <td><code>~9</code></td>\n      <td><code>-10</code></td>\n      <td><code>~ 0000 0000 … 0000 1001 = 1111 1111 … 1111 0110</code></td>\n    </tr>\n  </tbody>\n</table>\n<p>On notera que tous les 32 bits sont inversés lors de l'utilisation de l'opérateur NON binaire et que les valeurs avec le bit le plus à gauche à 1 représentent des valeurs négatives (représentation en complément à deux). Aussi, l'évaluation de <code>~x</code> fournira la même valeur que <code>-x - 1</code>.</p>"}},{"type":"prose","value":{"id":"opérateurs_de_décalage_binaire","title":"Opérateurs de décalage binaire","isH3":true,"content":"<p>Les opérateurs de décalage binaire utilisent deux opérandes&nbsp;: celui de gauche est la quantité sur laquelle effectuer le décalage et celui de droite indique le nombre de bits à décaler. La direction de l'opération de décalage dépend de l'opérateur utilisé.</p>\n<p>Les opérateurs de décalage convertissent leurs opérandes en entiers sur 32 bits et renvoient un résultat de type <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> ou <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> selon la règle suivante&nbsp;: si l'opérande gauche est de type <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>, la valeur de retour sera de type <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> et sinon, la valeur de retour sera de type <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>.</p>\n<p>Les opérateurs de décalage sont listés dans le tableau suivant.</p>\n<table class=\"fullwidth-table\">\n  <caption>Opérateurs de décalage binaire</caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">Opérateur</th>\n      <th scope=\"col\">Description</th>\n      <th scope=\"col\">Exemple</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Left_shift\">Décalage à gauche</a> (<code>&lt;&lt;</code>)</td>\n      <td>Cet opérateur décale la valeur du premier opérande du nombre de bits indiqué vers la gauche. Les bits en trop sont abandonnés et des bits à 0 sont ajoutés sur la droite.</td>\n      <td><code>9&lt;&lt;2</code> donne <code>36</code>, car <code>1001</code>, décalé de 2 bits à gauche vaut <code>100100</code> en binaire, ce qui correspond à <code>36</code> en décimal.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Right_shift\">Décalage à droite avec propagation du signe</a> (<code>&gt;&gt;</code>)</td>\n      <td>Cet opérateur décale la valeur du premier opérande du nombre de bits indiqué vers la droite. Les bits en trop à droite sont abandonnés. Des copies du bit le plus à gauche sont ajoutés sur la gauche.</td>\n      <td><code>9&gt;&gt;2</code> donne <code>2</code>, car <code>1001</code> décalé de 2 bits à droite vaut <code>10</code> en binaire, ce qui correspond à <code>2</code> en décimal. De même, <code>-9&gt;&gt;2</code> donne <code>-3</code>, car le signe est conservé.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Décalage à droite avec remplissage à zéro</a> (<code>&gt;&gt;&gt;</code>)</td>\n      <td>Cet opérateur décale la valeur du premier opérande du nombre de bits indiqué vers la droite. Les bits en trop à droite sont abandonnés. Des bits à zéro sont ajoutés sur la gauche.</td>\n      <td><code>19&gt;&gt;&gt;2</code> donne <code>4</code>, car <code>10011</code> décalé de deux bits à droite devient <code>100</code> en binaire, ce qui vaut <code>4</code> en décimal. Pour les valeurs positives, le décalage à droite avec remplissage à zéro et le décalage à droite avec propagation du signe fourniront le même résultat.</td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"opérateurs_logiques","title":"Opérateurs logiques","isH3":false,"content":"<p>Les opérateurs logiques sont généralement utilisés avec des valeurs booléennes. Lorsque c'est le cas, la valeur de retour est également booléenne. Plus généralement, les opérateurs <code>&amp;&amp;</code> et <code>||</code> renvoient la valeur d'un des deux opérandes (et peuvent donc renvoyer une valeur qui n'est pas un booléen). Ces opérateurs sont décrits dans le tableau suivant.</p>\n<table class=\"fullwidth-table\">\n  <caption>Opérateurs logiques</caption>\n  <thead>\n    <tr>\n      <th scope=\"col\">Opérateur</th>\n      <th scope=\"col\">Utilisation</th>\n      <th scope=\"col\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_AND\">ET logique</a> (<code>&amp;&amp;</code>)</td>\n      <td><code>expr1 &amp;&amp; expr2</code></td>\n      <td>Renvoie <code>expr1</code> si elle peut être convertie en <code>false</code> et renvoie <code>expr2</code> sinon. Lorsqu'il est utilisé avec des valeurs booléennes, <code>&amp;&amp;</code> renvoie <code>true</code> si les deux opérandes valent <code>true</code> et <code>false</code> sinon.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_OR\">OU logique</a> (<code>||</code>)</td>\n      <td><code>expr1 || expr2</code></td>\n      <td>Renvoie <code>expr1</code> si elle peut être convertie en <code>true</code> et renvoie <code>expr2</code> sinon. Lorsqu'il est utilisé avec des valeurs booléennes, <code>||</code> renvoie <code>true</code> si l'un des deux opérandes vaut <code>true</code> et <code>false</code> si les deux valent <code>false</code>.</td>\n    </tr>\n    <tr>\n      <td><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">NON logique</a> (<code>!</code>)</td>\n      <td><code>!expr</code></td>\n      <td>Renvoie <code>false</code> si son unique opérande peut être converti en <code>true</code>, renvoie <code>true</code> sinon.</td>\n    </tr>\n  </tbody>\n</table>\n<p>Les expressions équivalentes à <code>false</code> sont celles qui sont évaluées avec la valeur <code>null</code>, <code>0</code>, <code>NaN</code>, la chaîne vide (<code>\"\"</code>), ou <code>undefined</code>.</p>\n<p>Les exemples de code suivant illustrent l'utilisation de l'opérateur ET logique <code>&amp;&amp;</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> a1 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// t &amp;&amp; t renvoie true</span>\n<span class=\"token keyword\">const</span> a2 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// t &amp;&amp; f renvoie false</span>\n<span class=\"token keyword\">const</span> a3 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// f &amp;&amp; t renvoie false</span>\n<span class=\"token keyword\">const</span> a4 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f &amp;&amp; f renvoie false</span>\n<span class=\"token keyword\">const</span> a5 <span class=\"token operator\">=</span> <span class=\"token string\">'Chat'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'Chien'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// t &amp;&amp; t renvoie Chien</span>\n<span class=\"token keyword\">const</span> a6 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'Chat'</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// f &amp;&amp; t renvoie false</span>\n<span class=\"token keyword\">const</span> a7 <span class=\"token operator\">=</span> <span class=\"token string\">'Chat'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t &amp;&amp; f renvoie false</span>\n</code></pre></div>\n<p>Les exemples de code suivant illustrent l'utilisation de l'opérateur OU logique <code>||</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> o1 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// t || t renvoie true</span>\n<span class=\"token keyword\">const</span> o2 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// f || t renvoie true</span>\n<span class=\"token keyword\">const</span> o3 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// t || f renvoie true</span>\n<span class=\"token keyword\">const</span> o4 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f || f renvoie false</span>\n<span class=\"token keyword\">const</span> o5 <span class=\"token operator\">=</span> <span class=\"token string\">'Chat'</span> <span class=\"token operator\">||</span> <span class=\"token string\">'Chien'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// t || t renvoie Chat</span>\n<span class=\"token keyword\">const</span> o6 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token string\">'Chat'</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// f || t renvoie Chat</span>\n<span class=\"token keyword\">const</span> o7 <span class=\"token operator\">=</span> <span class=\"token string\">'Chat'</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// t || f renvoie Chat</span>\n</code></pre></div>\n<p>Les exemples de code suivant illustrent l'utilisation de l'opérateur NON logique <code>!</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> n1 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// !t renvoie false</span>\n<span class=\"token keyword\">const</span> n2 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// !f renvoie true</span>\n<span class=\"token keyword\">const</span> n3 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token string\">'Chat'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// !t renvoie false</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"évaluation_en_court-circuit","title":"Évaluation en court-circuit","isH3":true,"content":"<p>Les expressions logiques étant évaluées de gauche à droite, le moteur d'exécution utilise les courts-circuits dans les cas suivants&nbsp;:</p>\n<ul>\n  <li><code>false &amp;&amp; nimportequoi</code> sera court-circuitée pour être évaluée en <code>false</code>.</li>\n  <li><code>true || nimportequoi</code> sera court-circuitée pour être évaluée en <code>true</code>.</li>\n</ul>\n<p>Les règles logiques garantissent la véracité de ces évaluations. On notera que l'opérande <code>nimportequoi</code> dans les expressions précédentes n'est <em>pas</em> évalué et que tout effet de bord lié à cette évaluation n'aura donc pas lieu.</p>\n<p>Pour le deuxième exemple, on pourra utiliser <a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">l'opérateur de coalescence des nuls</a> (<code>??</code>) qui fonctionne comme <code>||</code>, en renvoyant uniquement la deuxième expression lorsque la première est <a href=\"/en-US/docs/Glossary/Nullish\" class=\"only-in-en-us\" title=\"Currently only available in English (US)\">équivalente à null (en-US)</a>, c'est-à-dire qu'elle vaut <a href=\"/fr/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> ou <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</p>\n<p>L'opérateur de coalescence des nuls est donc une meilleure solution lorsqu'il s'agit de fournir des valeurs par défaut, notamment lorsque <code>''</code> ou <code>0</code> sont des valeurs valides.</p>"}},{"type":"prose","value":{"id":"opérateurs_pour_les_grands_entiers","title":"Opérateurs pour les grands entiers","isH3":false,"content":"<p>La plupart des opérateurs numériques peuvent être utilisés avec des valeurs de type <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> (qui représentent des grands entiers).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Addition de grands entiers</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1n</span> <span class=\"token operator\">+</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3n</span>\n\n<span class=\"token comment\">// Une division entre grands entiers est arrondie à zéro</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1n</span> <span class=\"token operator\">/</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0n</span>\n\n<span class=\"token comment\">// Il n'y a pas de troncature avec les opérations binaires</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token number\">40000000000000000n</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10000000000000000n</span>\n</code></pre></div>\n<p><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">L'opérateur de décalage à droite non-signé (<code>&gt;&gt;&gt;</code>)</a> est une exception&nbsp;: il n'est pas défini pour les valeurs, car les grands entiers n'ont pas une largeur binaire fixe et n'ont donc pas de bit le plus haut.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> d <span class=\"token operator\">=</span> <span class=\"token number\">8n</span> <span class=\"token operator\">&gt;&gt;&gt;</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError: BigInts have no unsigned right shift, use &gt;&gt; instead</span>\n</code></pre></div>\n<p>Il n'est pas possible d'interchanger des nombres et des grands entiers. On ne peut pas les mélanger dans un même calcul.</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1n</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError: Cannot mix BigInt and other types</span>\n</code></pre></div>\n<p>En effet, <code>BigInt</code> n'est pas un sous-ensemble ou un sur-ensemble du type numérique. Les grands entiers ont une plus grande précision mais ne peuvent pas représenter de nombres décimaux. Toute conversion implicite dans un sens ou l'autre entraînerait une perte de précision. Il faudra utiliser une conversion explicite pour indiquer avec quel type on souhaite effectuer l'opération.</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">1n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1n</span> <span class=\"token operator\">+</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3n</span>\n</code></pre></div>\n<p>Il est aussi possible de comparer des grands entiers avec des nombres.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1n</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"opérateurs_pour_les_chaînes_de_caractères","title":"Opérateurs pour les chaînes de caractères","isH3":false,"content":"<p>En complément des opérateurs de comparaison qui peuvent être utilisés avec les chaînes de caractères, on peut également utiliser l'opérateur de concaténation (<code>+</code>) afin de concaténer deux chaînes de caractères ensemble et renvoyer le résultat de cette concaténation.</p>\n<p>Ainsi&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ma '</span> <span class=\"token operator\">+</span> <span class=\"token string\">'chaîne'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// affichera \"ma chaîne\" dans la console.</span>\n</code></pre></div>\n<p>L'opérateur d'affectation raccourci <code>+=</code> peut également être utilisé pour concaténer des chaînes.</p>\n<p>Par exemple&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> maChaine <span class=\"token operator\">=</span> <span class=\"token string\">'alpha'</span><span class=\"token punctuation\">;</span>\nmaChaine <span class=\"token operator\">+=</span> <span class=\"token string\">'bet'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// sera évalué en \"alphabet\" et affectera cette valeur à maChaine.</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"opérateur_conditionnel_ternaire","title":"Opérateur conditionnel (ternaire)","isH3":false,"content":"<p><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">L'opérateur conditionnel</a> est le seul opérateur JavaScript à prendre trois opérandes. Il permet de se résoudre en une valeur ou en une autre selon une condition donnée. Sa syntaxe est la suivante&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>condition <span class=\"token operator\">?</span> val1 <span class=\"token operator\">:</span> val2\n</code></pre></div>\n<p>Si <code>condition</code> est vraie, l'expression sera résolue avec la valeur de <code>val1</code>. Sinon, elle sera résolue avec la valeur de <code>val2</code>. L'opérateur conditionnel peut être utilisé à tout endroit où un opérateur standard peut être utilisé.</p>\n<p>Par exemple&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> statut <span class=\"token operator\">=</span> age <span class=\"token operator\">&gt;=</span> <span class=\"token number\">18</span> <span class=\"token operator\">?</span> <span class=\"token string\">'adulte'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'mineur'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Cette instruction affecte la valeur <code>\"adulte\"</code> à la variable <code>statut</code> si <code>age</code> est supérieur ou égal à 18. Sinon, c'est la valeur <code>\"mineur\"</code> qui est affectée à <code>statut</code>.</p>"}},{"type":"prose","value":{"id":"opérateur_virgule","title":"Opérateur virgule","isH3":false,"content":"<p><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">L'opérateur virgule</a> (<code>,</code>) évalue les deux opérandes et renvoie la valeur du dernier opérande. Cet opérateur est généralement utilisé dans les boucles <code>for</code> afin de mettre à jour plusieurs variables à chaque itération de la boucle. L'utiliser ailleurs est considéré comme une mauvaise pratique et on privilégiera plusieurs instructions séparées.</p>\n<p>Par exemple, si on a <code>a</code> qui est un tableau en deux dimensions avec 10 éléments pour chaque ligne. Le code qui suit utilise l'opérateur virgule afin de mettre à jour deux variables à la fois. Dans cet exemple, on affiche les valeurs des éléments situés sur la diagonale du tableau&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//                                ^</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">][</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>j<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]= </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"opérateurs_unaires","title":"Opérateurs unaires","isH3":false,"content":"<p>Un opérateur unaire fonctionne avec un seul opérande.</p>"}},{"type":"prose","value":{"id":"delete","title":"<code>delete</code>","isH3":true,"content":"<p><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/delete\">L'opérateur <code>delete</code></a> permet de supprimer une propriété d'un objet. La syntaxe correspondante est&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">delete</span> objet<span class=\"token punctuation\">.</span>propriete<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> objet<span class=\"token punctuation\">[</span>clePropriete<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> objet<span class=\"token punctuation\">[</span>indice<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Où <code>objet</code> est le nom d'un objet, <code>propriete</code> est une propriété existante, <code>clePropriete</code> est une chaîne de caractères ou un symbole faisant référence à une propriété existante.</p>\n<p>Lorsque l'opérateur <code>delete</code> réussit, la propriété est supprimée de l'objet et toute tentative d'accès ultérieur renverra <code>undefined</code>. L'opérateur <code>delete</code> renvoie <code>true</code> si l'opération est possible et <code>false</code> sinon.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">delete</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// renvoie false (on ne peut pas supprimer des propriétés non-configurables)</span>\n\n<span class=\"token keyword\">const</span> monObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">h</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> monObj<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">;</span> <span class=\"token comment\">// renvoie true (on peut supprimer des propriétés personnalisées)</span>\n</code></pre></div>\n<h4 id=\"supprimer_des_éléments_de_tableau\">Supprimer des éléments de tableau</h4>\n<p>Comme les tableaux sont également des objets, il est techniquement possible de supprimer des éléments avec <code>delete</code>. Il s'agit toutefois de quelque chose considéré comme une mauvaise pratique. En effet, lorsqu'on supprime une propriété d'un tableau, la longueur n'est pas modifiée et les autres éléments ne sont pas réindexés. Pour un comportement analogue, mieux vaudra réécrire la valeur de l'élément avec <code>undefined</code>. Pour manipuler un tableau, on utilisera plutôt les méthodes associées comme <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice()</code></a>.</p>","titleAsText":"delete"}},{"type":"prose","value":{"id":"typeof","title":"<code>typeof</code>","isH3":true,"content":"<p><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/typeof\">L'opérateur <code>typeof</code></a> s'utilise de la façon suivante&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> operande\n</code></pre></div>\n<p>L'opérateur <code>typeof</code> renvoie une chaîne de caractères qui indique le type de l'opérande non-évalué. <code>operande</code> est une chaîne de caractères, une variable, un mot-clé ou un objet dont on souhaite connaître le type. On peut utiliser des parenthèses autour de l'opérande.</p>\n<p>Prenons la définition des variables suivantes&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> maFonction <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'5 + 2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> forme <span class=\"token operator\">=</span> <span class=\"token string\">'rond'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> taille <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> toto <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Pomme'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Mangue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Orange'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> jour <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>L'opérateur <code>typeof</code> renvoie les résultats suivants pour ces différentes variables&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> maFonction<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// renvoie \"function\"</span>\n<span class=\"token keyword\">typeof</span> forme<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// renvoie \"string\"</span>\n<span class=\"token keyword\">typeof</span> taille<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// renvoie \"number\"</span>\n<span class=\"token keyword\">typeof</span> toto<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// renvoie \"object\"</span>\n<span class=\"token keyword\">typeof</span> jour<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// renvoie \"object\"</span>\n<span class=\"token keyword\">typeof</span> inexistant<span class=\"token punctuation\">;</span> <span class=\"token comment\">// renvoie \"undefined\"</span>\n</code></pre></div>\n<p>Pour les mots-clés <code>true</code> et <code>null</code>, l'opérateur <code>typeof</code> renvoie les résultats suivants&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// renvoie \"boolean\"</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// renvoie \"object\"</span>\n</code></pre></div>\n<p>Pour un nombre ou une chaîne de caractères, <code>typeof</code> renverra les résultats suivants&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> <span class=\"token number\">62</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// renvoie \"number\"</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token string\">'Coucou monde'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// renvoie \"string\"</span>\n</code></pre></div>\n<p>Pour les valeurs qui sont des propriétés, <code>typeof</code> renvoie le type de la valeur contenue dans la propriété&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> document<span class=\"token punctuation\">.</span>lastModified<span class=\"token punctuation\">;</span> <span class=\"token comment\">// renvoie \"string\"</span>\n<span class=\"token keyword\">typeof</span> window<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// renvoie \"number\"</span>\n<span class=\"token keyword\">typeof</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">LN2</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// renvoie \"number\"</span>\n</code></pre></div>\n<p>Pour les méthodes et fonctions, <code>typeof</code> renverra les résultats suivants&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> blur<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// renvoie \"function\"</span>\n<span class=\"token keyword\">typeof</span> eval<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// renvoie \"function\"</span>\n<span class=\"token keyword\">typeof</span> parseInt<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// renvoie \"function\"</span>\n<span class=\"token keyword\">typeof</span> shape<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">;</span> <span class=\"token comment\">// renvoie \"function\"</span>\n</code></pre></div>\n<p>Pour les objets natifs, <code>typeof</code> renverra les résultats suivants&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> Date<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// renvoie \"function\"</span>\n<span class=\"token keyword\">typeof</span> Function<span class=\"token punctuation\">;</span> <span class=\"token comment\">// renvoie \"function\"</span>\n<span class=\"token keyword\">typeof</span> Math<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// renvoie \"object\"</span>\n<span class=\"token keyword\">typeof</span> Option<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// renvoie \"function\"</span>\n<span class=\"token keyword\">typeof</span> String<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// renvoie \"function\"</span>\n</code></pre></div>","titleAsText":"typeof"}},{"type":"prose","value":{"id":"void","title":"<code>void</code>","isH3":true,"content":"<p><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/void\">L'opérateur <code>void</code></a> s'utilise d'une des deux façons suivantes&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> expression\n</code></pre></div>\n<p>L'opérateur <code>void</code> indique une expression à évaluer sans renvoyer de valeur. <code>expression</code> est une expression JavaScript à évaluer. Les parenthèses autour de l'expression sont optionnelles, mais c'est une bonne pratique que de les utiliser.</p>","titleAsText":"void"}},{"type":"prose","value":{"id":"opérateurs_relationnels","title":"Opérateurs relationnels","isH3":false,"content":"<p>Un opérateur relationnel compare ses opérandes et renvoie une valeur booléenne selon le résultat de la comparaison.</p>"}},{"type":"prose","value":{"id":"in","title":"<code>in</code>","isH3":true,"content":"<p><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/in\">L'opérateur <code>in</code></a> renvoie <code>true</code> si la propriété indiquée par l'opérande gauche est présente dans l'objet indiqué par l'opérande droit. La syntaxe est la suivante&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>nomPropriete <span class=\"token keyword\">in</span> nomObjet\n</code></pre></div>\n<p>où <code>nomPropriete</code> est une chaîne de caractères, une valeur numérique ou un symbole représentant une propriété, et <code>nomObjet</code> est le nom de l'objet.</p>\n<p>Voici quelques exemples utilisant l'opérateur <code>in</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Tableaux</span>\n<span class=\"token keyword\">const</span> arbres <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'séquoia'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'laurier'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cèdre'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chêne'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'érable'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">0</span> <span class=\"token keyword\">in</span> arbres<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// renvoie true</span>\n<span class=\"token number\">3</span> <span class=\"token keyword\">in</span> arbres<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// renvoie true</span>\n<span class=\"token number\">6</span> <span class=\"token keyword\">in</span> arbres<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// renvoie false</span>\n<span class=\"token string\">'séquoia'</span> <span class=\"token keyword\">in</span> arbres<span class=\"token punctuation\">;</span> <span class=\"token comment\">// renvoie false (il faut indiquer l'indice, pas la</span>\n                     <span class=\"token comment\">// valeur)</span>\n<span class=\"token string\">'length'</span> <span class=\"token keyword\">in</span> arbres<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// renvoie true (length est une propriété native)</span>\n\n<span class=\"token comment\">// Objets natifs</span>\n<span class=\"token string\">'PI'</span> <span class=\"token keyword\">in</span> Math<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// renvoie true</span>\n<span class=\"token keyword\">const</span> maChaine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'corail'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">'length'</span> <span class=\"token keyword\">in</span> maChaine<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// renvoie true</span>\n\n<span class=\"token comment\">// Objets personnalisés</span>\n<span class=\"token keyword\">const</span> maVoiture <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">fabricant</span><span class=\"token operator\">:</span> <span class=\"token string\">'Honda'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">modele</span><span class=\"token operator\">:</span> <span class=\"token string\">'Accord'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">annee</span><span class=\"token operator\">:</span> <span class=\"token number\">1998</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">'fabricant'</span> <span class=\"token keyword\">in</span> maVoiture<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// renvoie true</span>\n<span class=\"token string\">'modele'</span> <span class=\"token keyword\">in</span> maVoiture<span class=\"token punctuation\">;</span> <span class=\"token comment\">// renvoie true</span>\n</code></pre></div>","titleAsText":"in"}},{"type":"prose","value":{"id":"instanceof","title":"<code>instanceof</code>","isH3":true,"content":"<p><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/instanceof\">L'opérateur <code>instanceof</code></a> renvoie <code>true</code> si l'objet porté par l'opérande gauche est du type indiqué par l'opérande droit. La syntaxe est&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>nomObjet <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">typeObjet</span>\n</code></pre></div>\n<p>où <code>nomObjet</code> est le nom de l'objet dont on souhaite vérifier le type et <code>typeObjet</code> est le type en question, comme <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> ou <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>.</p>\n<p>On utilisera <code>instanceof</code> lorsqu'on souhaite confirmer le type d'un objet à l'exécution. On pourra par exemple gérer différemment une exception selon son type.</p>\n<p>Dans l'exemple qui suit, on utilise <code>instanceof</code> pour déterminer si <code>jour</code> est un objet <code>Date</code>. Comme <code>jour</code> est bien un objet de type <code>Date</code>, les instructions conditionnelles sont exécutées.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> jour <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">1995</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jour <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// instructions à exécuter</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","titleAsText":"instanceof"}},{"type":"prose","value":{"id":"expressions_de_base","title":"Expressions de base","isH3":false,"content":"<p>Tous les opérateurs manipulent en fin de compte une ou plusieurs expressions de base. Ces expressions de base utilisent <a href=\"/fr/docs/Web/JavaScript/Guide/Grammar_and_types#declarations\">les identifiants</a> et <a href=\"/fr/docs/Web/JavaScript/Guide/Grammar_and_types#literals\">les littéraux</a>, et quelques autres éléments que nous introduisons ci-après. Ils sont décrits plus en détails dans leur page de référence.</p>"}},{"type":"prose","value":{"id":"this","title":"<code>this</code>","isH3":true,"content":"<p><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/this\">Le mot-clé <code>this</code></a> fait référence à l'objet courant. En général, <code>this</code> fait référence à l'objet appelant d'une méthode. <code>this</code> pourra être utilisé avec la notation utilisant le point ou celle utilisant les crochets&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token string\">'nomPropriete'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nomPropriete\n</code></pre></div>\n<p>Prenons une fonction <code>valider()</code> qui valide la propriété <code>value</code> d'un objet en fonction d'un minimum et d'un maximum&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">valider</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">,</span> max</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&gt;</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Valeur invalide !'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>On peut appeler <code>valider()</code> pour un élément de formulaire sur le gestionnaire d'évènement <code>onChange</code> en utilisant <code>this</code> afin de passer le contrôle du formulaire&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Saisissez un nombre entre 18 et 99 :<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>3</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onChange</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">valider</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>","titleAsText":"this"}},{"type":"prose","value":{"id":"opérateur_de_groupement","title":"Opérateur de groupement","isH3":true,"content":"<p>L'opérateur de groupement, <code>( )</code>, contrôle la précédence de l'évaluation dans une expression. On peut ainsi prioriser certaines opérations par rapport à d'autres et passer outre la précédence par défaut. Dans l'exemple qui suit, on utilise les parenthèses pour que l'addition ait lieu avant la multiplication.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Précédence par défaut</span>\na <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> c     <span class=\"token comment\">// 7</span>\n<span class=\"token comment\">// Qui est évalue par défaut comme</span>\na <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> c<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 7</span>\n\n<span class=\"token comment\">// On passe outre cette précédence pour</span>\n<span class=\"token comment\">// additionner avant de multiplier</span>\n<span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> c   <span class=\"token comment\">// 9</span>\n\n<span class=\"token comment\">// Ce qui est équivalent à</span>\na <span class=\"token operator\">*</span> c <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> c <span class=\"token comment\">// 9</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"new","title":"<code>new</code>","isH3":true,"content":"<p><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/new\">L'opérateur <code>new</code></a> peut être utilisé afin de créer une instance d'un objet (que ce type d'objet soit défini dans le script ou par l'environnement d'exécution). On utilisera <code>new</code> comme suit&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> nomObjet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeObjet</span><span class=\"token punctuation\">(</span>param1<span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">,</span> <span class=\"token comment\">/* …, */</span> paramN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","titleAsText":"new"}},{"type":"prose","value":{"id":"super","title":"<code>super</code>","isH3":true,"content":"<p><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/super\">Le mot-clé <code>super</code></a> est utilisé pour appeler des fonctions sur le parent d'un objet. Il est utile lorsqu'on manipule des <a href=\"/fr/docs/Web/JavaScript/Reference/Classes\">classes</a> afin d'appeler le constructeur parent par exemple.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// On appelle le constructeur parent.</span>\n<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">fonctionSurLeParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><ul class=\"prev-next\">\n    <li><a class=\"button minimal\" href=\"/fr/docs/Web/JavaScript/Guide/Functions\">« Précédent</a></li>\n    <li><a class=\"button minimal\" href=\"/fr/docs/Web/JavaScript/Guide/Numbers_and_dates\">Suivant  »</a></li>\n</ul>","titleAsText":"super"}}],"toc":[{"text":"Opérateurs d'affectation","id":"opérateurs_daffectation"},{"text":"Opérateurs de comparaison","id":"opérateurs_de_comparaison"},{"text":"Opérateurs arithmétiques","id":"opérateurs_arithmétiques"},{"text":"Opérateurs binaires","id":"opérateurs_binaires"},{"text":"Opérateurs logiques","id":"opérateurs_logiques"},{"text":"Opérateurs pour les grands entiers","id":"opérateurs_pour_les_grands_entiers"},{"text":"Opérateurs pour les chaînes de caractères","id":"opérateurs_pour_les_chaînes_de_caractères"},{"text":"Opérateur conditionnel (ternaire)","id":"opérateur_conditionnel_ternaire"},{"text":"Opérateur virgule","id":"opérateur_virgule"},{"text":"Opérateurs unaires","id":"opérateurs_unaires"},{"text":"Opérateurs relationnels","id":"opérateurs_relationnels"},{"text":"Expressions de base","id":"expressions_de_base"}],"summary":"Dans ce chapitre, nous décrirons les expressions et opérateurs en JavaScript, qui permettent notamment l'affectation, la comparaison, les opérations arithmétiques, binaires, logiques, la manipulation de chaîne de caractères, etc.","popularity":0.003,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Expressions and operators","locale":"en-US","native":"English (US)"},{"title":"Expresiones y operadores","locale":"es","native":"Español"},{"title":"式と演算子","locale":"ja","native":"日本語"},{"title":"표현식과 연산자","locale":"ko","native":"한국어"},{"title":"Expressões e operadores","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Выражения и операторы","locale":"ru","native":"Русский"},{"title":"表达式与运算符","locale":"zh-CN","native":"中文 (简体)"},{"title":"運算式與運算子","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"fr/web/javascript/guide/expressions_and_operators","github_url":"https://github.com/mdn/translated-content/blob/main/files/fr/web/javascript/guide/expressions_and_operators/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/fr/docs/Web","title":"Technologies web pour développeurs"},{"uri":"/fr/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/fr/docs/Web/JavaScript/Guide","title":"Guide JavaScript"},{"uri":"/fr/docs/Web/JavaScript/Guide/Expressions_and_Operators","title":"Expressions et opérateurs"}],"pageTitle":"Expressions et opérateurs - JavaScript | MDN","noIndexing":false}}