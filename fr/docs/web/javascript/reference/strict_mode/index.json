{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Le mode strict","mdn_url":"/fr/docs/Web/JavaScript/Reference/Strict_mode","locale":"fr","native":"Français","sidebarHTML":"\n <ol>\n  <li><a href=\"/fr/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/fr/docs/Web/JavaScript/Tutorials\"><strong>Tutoriel&nbsp;:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Débutant</summary>\n      <ol>\n        <li><a href=\"/fr/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">Les bases en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Learn/JavaScript/First_steps\">Premiers pas en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Learn/JavaScript/Building_blocks\">Les briques JavaScript</a></li>\n        <li><a href=\"/fr/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Guide JavaScript</summary>\n      <ol>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Introduction\">Introduction</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Grammar_and_Types\">Types et grammaire</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Contrôle du flux et gestion des erreurs</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Loops_and_iteration\">Boucles et itération</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Functions\">Fonctions</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressions et opérateurs</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Numbers_and_dates\">Nombres et dates</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Text_formatting\">Formatage du texte</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Regular_Expressions\">Expressions rationnelles</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Indexed_collections\">Collections indexées</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Keyed_collections\">Collections avec clés</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Working_with_Objects\">Manipuler les objets</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Détails du modèle objet</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Iterators_and_generators\">Itérateurs et générateurs</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Meta_programming\">Meta-programmation</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Intermédiaire</summary>\n      <ol>\n        <li><a href=\"/fr/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/fr/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">Réintroduction à JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Data_structures\">Structures de données en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Différents tests d'égalité</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Closures\">Closures</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Avancé</summary>\n      <ol>\n        <li><a href=\"/fr/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Héritage et la chaîne de prototypes</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Strict_mode\">Mode strict</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Typed_arrays\">Tableaux typés en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Memory_Management\">Gestion de la mémoire</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/EventLoop\">Concurrence et boucle des événements</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/fr/docs/Web/JavaScript/Reference\">Références&nbsp;:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Objets natifs</summary>\n        <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Expressions &amp; opérateurs</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Instructions &amp; déclarations</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Fonctions</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Plus</summary>\n      <ol>\n        <li><a href=\"/fr/docs/Web/JavaScript/JavaScript_technologies_overview\">Aperçu des technologies JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Lexical_grammar\">Grammaire lexicale</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Data_structures\">Structures de données en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Rattachement des propriétés</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Iteration_protocols\">Protocoles d'itération</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Strict_mode\">Mode strict</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Passer au mode strict</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Template_literals\">Gabarit de chaîne de caractère</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Fonctionnalités dépréciées</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Le mode strict de <a href=\"https://www.ecma-international.org/publications/standards/Ecma-262.htm\" class=\"external\" rel=\" noopener\">ECMAScript 5</a> permet de choisir une variante restrictive de JavaScript. Le mode strict n'est pas seulement un sous-ensemble de JavaScript : il possède <em>intentionnellement</em> des sémantiques différentes du code normal. Les navigateurs ne supportant pas le mode strict exécuteront le code d'une façon légèrement différente de ceux le supportant, il ne faut donc pas compter sur le mode strict pour éviter des tests sur les navigateurs qui ne le supportent pas. Les codes en mode strict et en mode non-strict peuvent coexister, ce qui permet de réécrire les scripts en mode strict de façon incrémentale.</p>\n<p>Le mode strict apporte quelques changements à la sémantique « normale » de JavaScript:</p>\n<ol>\n  <li>Le mode strict élimine quelques erreurs silencieuses de JavaScript en les changeant en erreurs explicites (une exception sera levée).</li>\n  <li>Le mode strict corrige les erreurs qui font qu'autrement il est difficile pour les moteurs JavaScript d'effectuer des optimisations. Le code sera donc exécuté plus rapidement en mode strict, sans changer une seule ligne si cela n'est pas nécessaire.</li>\n  <li>Le mode strict interdit les mot-clés susceptibles d'être définis dans les futures versions de ECMAScript.</li>\n</ol>\n<p>Voir la page <a href=\"/fr/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Passer au mode strict</a> pour plus de détails quant à la migration d'une base de code non-stricte vers une base de code compatible avec le mode strict.</p>\n<div class=\"notecard note\" id=\"sect1\">\n  <p><strong>Note :</strong> Le mode non strict (celui actif par défaut) est parfois appelé « <em>sloppy mode</em> » en anglais. Bien que ce ne soit pas la dénomination officielle, on la rencontre occasionnellement.</p>\n</div>"}},{"type":"prose","value":{"id":"invoquer_le_mode_strict","title":"Invoquer le mode strict","isH3":false,"content":"<p>Le mode strict s'applique à des <em>scripts entiers</em> ou à des <em>fonctions individuelles</em>. Il ne peut s'appliquer à des blocs d'instructions entourés d'accolades <code>{}</code>; essayer de l'appliquer dans ces contextes ne fera rien. Les codes présents dans <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a>, les attributs d'événements et les chaînes passées à <a href=\"/fr/docs/Web/API/setTimeout\"><code>setTimeout</code></a>, ou autres sont des scripts entiers, et invoquer le mode strict à l'intérieur de ceux-ci fonctionnera comme prévu.</p>"}},{"type":"prose","value":{"id":"le_mode_strict_pour_les_scripts","title":"Le mode strict pour les scripts","isH3":true,"content":"<p>Pour invoquer le mode strict pour un script entier, on ajoutera l'instruction exacte <code>\"use strict\";</code> (ou <code>'use strict';</code>) avant toutes les autres instructions.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Script entier en mode strict</span>\n<span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> v <span class=\"token operator\">=</span> <span class=\"token string\">\"Allo ! Je suis en mode strict !\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Cette syntaxe possède un piège dans lequel <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=579119\" class=\"external\" rel=\" noopener\">est déjà tombé</a> un site web connu : il n'est pas possible de concaténer du script en mode strict et du code en mode non-strict. En effet, si on concatène du code non-strict à la suite d'un code strict, tout le code sera considéré comme strict. De même si on concatène du code strict à la suite d'un code non-strict, le code entier aura l'air non-strict. Ainsi, on peut concaténer entre eux des codes stricts sans aucun problème et de même concaténer uniquement des codes non-stricts sans problème. En revanche, lorsqu'on mélange les deux, cela pose un problème. Lors d'une phase de transition, il est donc recommandé de n'activer le mode strict que fonction par fonction.</p>\n<p>Il est aussi possible d'adopter une approche qui consiste à englober le code du script dans une fonction et à donner à cette dernière le mode strict. Ce procédé élimine le problème de concaténation mais cela signifie aussi qu'on doit exporter chaque variable globale hors de la fonction principale nouvellement créée.</p>"}},{"type":"prose","value":{"id":"le_mode_strict_pour_les_fonctions","title":"Le mode strict pour les fonctions","isH3":true,"content":"<p>De même, pour activer le mode strict pour une fonction, on placera l'instruction exacte <code>\"use strict\";</code> (ou <code>'use strict';</code>) dans le corps de la fonction avant toute autre déclaration.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">strict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Syntaxe en mode strict au niveau de la fonction</span>\n  <span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">nested</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Ho que oui, je le suis !\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"Allô ! Je suis une fonction en mode strict ! \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">nested</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">notStrict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Je ne suis pas strict.\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"mode_strict_pour_les_modules","title":"Mode strict pour les modules","isH3":true,"content":"<p>ECMAScript 2015 a vu apparaître les modules JavaScript. Le code de ces modules est automatiquement en mode strict et aucune instruction n'est nécessaire pour passer dans ce mode.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">maFonctionDeModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// étant dans un module, le code présent</span>\n  <span class=\"token comment\">// ici sera d'office en mode strict</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> maFonctionDeModule<span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"différences_du_mode_strict","title":"Différences du mode strict","isH3":false,"content":"<p>Le mode strict modifie à la fois la syntaxe et le comportement à l'exécution. Les changements se déclinent généralement en trois catégories : ceux qui convertissent les fautes en erreurs (comme des erreurs de syntaxe ou les erreurs d'exécution), ceux qui simplifient comment une variable pour un nom donné est traitée, simplifiant <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a> et <a href=\"/fr/docs/Web/JavaScript/Reference/Functions/arguments\"><code>arguments</code></a> et ceux qui permettent d'écrire plus simplement du code JavaScript pérenne qui anticipe les évolutions futures d'ECMAScript.</p>"}},{"type":"prose","value":{"id":"convertir_les_fautes_en_erreurs","title":"Convertir les fautes en erreurs","isH3":true,"content":"<p>Le mode strict change quelques fautes précédemment acceptées, en erreurs. JavaScript a été conçu pour les développeurs novices et, quelquefois, il ne crée pas d'erreur explicite pour certaines instructions qui devraient être des erreurs. Parfois cela règle un problème immédiatement, mais cela peut aussi créer d'autres erreurs, plus loin dans le code. Le mode strict traite ces fautes comme des erreurs afin qu'elles soient découvertes et rapidement traitées.</p>\n<p>Premièrement, en mode strict, il est impossible de créer accidentellement des variables globales. En mode normal, ne pas déclarer une variable lors d'une affectation (oublier l'instruction <a href=\"/fr/docs/Web/JavaScript/Reference/Statements/var\"><code>var</code></a>) crée une nouvelle propriété sur l'objet global et le code continue de fonctionner (même si ça peut être une source de problèmes par la suite). Les affectations qui pourraient accidentellement créer des variables globales lèveront une erreur en mode strict:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\nvariableMalDéclarée <span class=\"token operator\">=</span> <span class=\"token number\">17</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// lève une ReferenceError</span>\n</code></pre></div>\n<p>Deuxièmement, le mode strict fait en sorte que les affectations qui échoueraient silencieusement lèveront aussi une exception. Par exemple, <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> est une variable globale en lecture seule. En mode normal, une affectation à <code>NaN</code> ne fera rien ; le développeur ne recevra aucun retour par rapport à cette faute. En mode strict, affecter une valeur quelconque à <code>NaN</code> lèvera une exception. Toute affectation qui échouera silencieusement en mode non-strict (affectation à une propriété en lecture seule, affectation à une propriété sans méthode <code>set</code>, affectation à une nouvelle propriété sur un objet <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\">non-extensible</a>) lèvera une exception en mode strict :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Affectation à une propriété globale en lecture seule</span>\n<span class=\"token keyword\">var</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// déclenche une exception TypeError</span>\n<span class=\"token keyword\">var</span> <span class=\"token number\">Infinity</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// déclenche une exception TypeError</span>\n\n<span class=\"token comment\">// Affectation à une propriété en lecture seule</span>\n<span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj1<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// lève un TypeError</span>\n\n<span class=\"token comment\">// Affectation à une propriété qui n'a qu'une méthode get</span>\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">17</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj2<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// lève un TypeError</span>\n\n<span class=\"token comment\">// Affectation d'une nouvelle propriété à un objet non-extensible</span>\n<span class=\"token keyword\">var</span> gele<span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">preventExtensions</span><span class=\"token punctuation\">(</span>gele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngele<span class=\"token punctuation\">.</span>nouvelleProp <span class=\"token operator\">=</span> <span class=\"token string\">\"ohé\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// lève un TypeError</span>\n</code></pre></div>\n<p>Troisièmement, le mode strict lèvera une exception lors d'une tentative de suppression d'une propriété non-supprimable (là où cela ne produisait aucun effet en mode non strict) :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// lève une TypeError</span>\n</code></pre></div>\n<p>Quatrièmement, le mode strict, avant Gecko 34, requiert que toutes les propriétés nommées dans un objet littéral soient uniques. En mode non-strict, les propriétés peuvent être spécifiées deux fois, JavaScript ne retenant que la dernière valeur de la propriété. Cette duplication en devient alors une source de confusion, surtout dans le cas où, dans une modification de ce même code, on se met à changer la valeur de la propriété autrement qu'en changeant la dernière instance. Les noms de propriété en double sont une erreur de syntaxe en mode strict :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">p</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">p</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// !!! erreur de syntaxe</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect2\">\n  <p><strong>Note :</strong> Cela n'est plus le cas avec ECMAScript 2015 (<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1041128\" class=\"external\" rel=\" noopener\">bug&nbsp;1041128</a>).</p>\n</div>\n<p>Cinquièmement, le mode strict requiert que les noms de paramètres de fonction soient uniques. En mode non-strict, le dernier argument dupliqué cache les arguments précédents ayant le même nom. Ces arguments précédents demeurent disponibles via <code>arguments[i]</code>, ils ne sont donc pas complètement inaccessibles. Pourtant, cette cachette n'a guère de sens et n'est probablement pas souhaitable (cela pourrait cacher une faute de frappe, par exemple). Donc en mode strict, les doublons de noms d'arguments sont une erreur de syntaxe :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">somme</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// !!! erreur de syntaxe</span>\n  <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Ce code va planter s'il est exécuté</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Sixièmement, le mode strict interdit la syntaxe octale. La syntaxe octale ne fait pas partie d'ECMAScript 5, mais elle est supportée dans tous les navigateurs en préfixant le nombre octal d'un zéro : <code>0644 === 420</code> et <code>\"\\045\" === \"%\"</code>. La notation octale est supportée en utilisant le préfixe \"<code>0o</code>\" :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0o10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Notation octale ES2015</span>\n</code></pre></div>\n<p>Les développeurs novices croient parfois qu'un zéro débutant un nombre n'a pas de signification sémantique, alors ils l'utilisent comme moyen d'aligner des colonnes de nombres mais ce faisant, ils changent la valeur du nombre ! La syntaxe octale est rarement utile et peut être utilisée de manière fautive, donc le mode strict le considère comme étant une erreur de syntaxe :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> somme <span class=\"token operator\">=</span> <span class=\"token number\">015</span> <span class=\"token operator\">+</span> <span class=\"token comment\">// !!! erreur de syntaxe</span>\n            <span class=\"token number\">197</span> <span class=\"token operator\">+</span>\n            <span class=\"token number\">142</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Septièmement, le mode strict, à partir d'ECMAScript 2015 interdit de définir des propriétés sur des valeurs primitives. Sans mode strict, de telles définitions sont ignorées. En activant le mode strict cela lèvera une exception <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token boolean\">false</span><span class=\"token punctuation\">.</span><span class=\"token boolean\">true</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// TypeError</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>calvados<span class=\"token operator\">=</span> <span class=\"token string\">\"maison\"</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// TypeError</span>\n<span class=\"token string\">\"une chaîne\"</span><span class=\"token punctuation\">.</span>de <span class=\"token operator\">=</span> <span class=\"token string\">\"caractères\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"simplifier_lutilisation_des_variables","title":"Simplifier l'utilisation des variables","isH3":true,"content":"<p>Le mode strict simplifie la façon dont les noms de variables sont mis en correspondance avec les définitions de variables dans le code. De nombreuses optimisations du compilateur reposent sur la capacité à dire à quel endroit la variable <em>X</em> est stockée : cela est essentiel pour optimiser pleinement le code JavaScript. JavaScript rend parfois cette mise en correspondance impossible à réaliser avant l'exécution du code. Le mode strict élimine la plupart des cas où cela se produit, de sorte que le compilateur peut mieux optimiser le code en mode strict.</p>\n<p>Premièrement, le mode strict interdit l'utilisation de <code>with</code>. Le problème avec <code>with</code> est que tout nom de variable à l'intérieur du bloc peut faire référence à une propriété de l'objet qui lui est passé, ou encore à une variable déclarée à l'extérieur du bloc, globale ou non, à l'exécution : il est impossible de le savoir d'avance. Le mode strict fait de <code>with</code> une erreur de syntaxe, donc il n'y a aucune chance pour qu'un nom déclaré dans un <code>with</code> fasse référence à un lieu inconnu à l'exécution :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">17</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">with</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// !!! erreur de syntaxe</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Si on n'était pas en mode strict, serait-ce var x,</span>\n  <span class=\"token comment\">// ou serait-ce plutôt obj.x?  Il est impossible en général</span>\n  <span class=\"token comment\">// de le dire sans faire tourner le code, donc</span>\n  <span class=\"token comment\">// le nom ne peut pas être optimisé.</span>\n  x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Au lieu d'utiliser <code>with</code>, on peut très bien assigner l'objet à une variable avec un nom court, puis accéder aux propriétés correspondantes à cette variable.</p>\n<p>Deuxièmement, <a href=\"https://whereswalden.com/2011/01/10/new-es5-strict-mode-support-new-vars-created-by-strict-mode-eval-code-are-local-to-that-code-only/\" class=\"external\" rel=\" noopener\"><code>eval</code> en mode strict ne doit pas créer de variables dont la portée dépasse celle du <code>eval</code></a>. En mode non-strict, <code>eval(\"var x;\")</code> crée la variable <code>x</code> dans le code appelant <code>eval</code>. Ce qui signifie qu'en général, dans une fonction contenant un appel à <code>eval</code>, tous les noms qui ne réfèrent pas à un paramètre ou une variable locale devront être mis en correspondance avec une définition de variable lors de l'exécution (puisque cet <code>eval</code> a introduit une nouvelle variable qui serait susceptible de modifier la variable externe). En mode strict, <code>eval</code> ne crée des variables que pour le code étant évalué, ainsi <code>eval</code> ne peut pas réaliser d'affectation à une variable externe ou à une variable locale :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">17</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> evalX <span class=\"token operator\">=</span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'use strict'; var x = 42; x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>evalX <span class=\"token operator\">===</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>De la même manière, si la fonction <code>eval</code> est invoquée par une expression de la forme <code>eval(...)</code> dans un code en mode strict, le code sera aussi évalué en mode strict. Le code peut déclarer explicitement le mode strict, mais il est inutile de le faire.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">strict1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// str sera évalué en mode strict</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">strict2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// pas de eval(...) : str est strict si et seulement si il est déclaré en mode strict</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">nonstrict</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// str est strict si et seulement si il est déclaré en mode strict</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">strict1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'Mode strict!'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">strict1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'use strict'; 'Mode strict!'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">strict2</span><span class=\"token punctuation\">(</span>eval<span class=\"token punctuation\">,</span> <span class=\"token string\">\"'Mode non-strict.'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">strict2</span><span class=\"token punctuation\">(</span>eval<span class=\"token punctuation\">,</span> <span class=\"token string\">\"'use strict'; 'Mode strict!'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">nonstrict</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'Mode non-strict.'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">nonstrict</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'use strict'; 'Mode strict!'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Ainsi, les noms dans le code <code>eval</code> en mode strict se comportent de la même façon que les noms dans le code en mode strict n'étant pas évalués comme le résultat de <code>eval</code>.</p>\n<p>Troisièmement, le mode strict interdit la suppression des variables déclarées. <code>delete name</code> en mode strict est une erreur de syntaxe:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"var x; delete x;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// !!! erreur de syntaxe</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"rendre_eval_et_arguments_plus_simples","title":"Rendre <code>eval</code> et <code>arguments</code> plus simples","isH3":true,"content":"<p>Le mode strict rend <a href=\"/fr/docs/Web/JavaScript/Reference/Functions/arguments\"><code>arguments</code></a> et <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a> moins « étranges ». Les deux impliquent une quantité de comportements étranges dans le code en mode non-strict : <code>eval</code> afin d'ajouter et d'enlever des liaisons et pour changer les valeurs de liaisons, et <code>arguments</code> via ses propriétés indexées faisant référence à des arguments nommés. Le mode strict permet de mieux traîter <code>eval</code> et <code>arguments</code> comme des mots-clés à part entière, bien qu'une <em>réparation</em> complète ne devrait pas arriver avant une version future d'ECMAScript.</p>\n<p>Premièrement, les chaînes <code>eval</code> et <code>arguments</code> ne peuvent pas être utilisées comme identificateur. Tous les exemples suivants entraînent des erreurs de syntaxe :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\neval <span class=\"token operator\">=</span> <span class=\"token number\">17</span><span class=\"token punctuation\">;</span>\narguments<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">++</span>eval<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">set</span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arguments</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> eval<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">eval</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">arguments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">y</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arguments\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"'use strict'; return 17;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Deuxièmement, en mode strict on ne donnera pas d'alias aux propriétés de <code>arguments</code> avec les objets créées dans la fonction. En code normal, dans une fonction dont le premier argument est <code>arg</code>, modifier <code>arg</code> modifiera aussi <code>arguments[0]</code>, et vice versa (à moins qu'aucun argument ne soit fourni ou que <code>arguments[0]</code> soit supprimé). Les objets de <code>arguments</code> pour les fonctions en mode strict stockent les argument originaux, au moment où la fonction a été appelée. <code>arguments[i]</code> ne reflète pas la valeur de l'argument nommé correspondant, et vice-versa.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> pair <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Troisièmement, <code>arguments.callee</code> n'est plus supporté. En temps normal <code>arguments.callee</code> contient la référence de la fonction courante. Il suffit d'appeler la fonction courante par son nom si elle n'est pas anonyme. <code>arguments.callee</code> en mode strict est une propriété non supprimable qui lèvera une erreur si elle est définie ou récupérée :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> arguments<span class=\"token punctuation\">.</span>callee<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// lève une TypeError</span>\n</code></pre></div>","titleAsText":"Rendre eval et arguments plus simples"}},{"type":"prose","value":{"id":"«_sécuriser_»_javascript","title":"« Sécuriser » JavaScript","isH3":true,"content":"<p>Le mode strict permet d'écrire plus simplement du code JavaScript sûr. Certains sites web fournissent aujourd'hui des outils pour que les utilisateurs puissent écrire du JavaScript qui sera exécuté sur le site pour les autres utilisateurs. Dans un navigateur web, le JavaScript peut accéder à certaines informations privées de l'utilisateur. Il faut donc transformer le JavaScript écrit par un utilisateur externe pour que le code correspondant soit exécuté de façon sécurisée pour les autres utilisateurs. Pour ce faire, il faut effectuer des vérifications au moment de l'exécution. En effet, JavaScript est suffisamment flexible pour que vérifier du code avant l'exécution soit très complexe voire impossible. En revanche, vérifier le comportement du code lors de l'exécution a un coût sur les performances. Pour réduire ce nombre de vérifications et bénéficier de meilleures performances dans ce scénario, on peut restreindre le code qui peut être envoyé à du code en mode strict.</p>\n<p>Tout d'abord, la valeur passée en tant que <code>this</code> à une fonction n'est pas nécessairement transformée en un objet en mode strict. Pour une fonction « normale », <code>this</code> est toujours un objet : soit l'objet fourni si la valeur fournie pour <code>this</code> était un objet, soit la valeur, transformée en un objet quand c'est un booléen, une chaîne de caractères ou un nombre. Cette valeur peut également être l'objet global si <code>this</code> vaut <code>null</code> ou <code>undefined</code> lorsqu'il est passé à la fonction. (Les fonctions <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a> ou <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a> peuvent être utilisées lorsqu'on souhaite spécifier une certaine valeur pour <code>this</code>.) Cette conversion automatique en objet a un certain coût en termes de performances mais cela peut également exposer l'objet global ce qui est dangereux dans les navigateurs : en effet, l'objet global permet d'accéder à certaines fonctionnalités qui rendraient le code non-sécurisé. Ainsi, en mode strict, la valeur <code>this</code> n'est pas transformée en un objet et si elle n'est pas définie, <code>this</code> sera <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fun</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fun</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fun</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fun</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Cela signifie entre autres qu'il est impossible de faire référence à l'objet <code>window</code> du navigateur grâce à <code>this</code> au sein d'une fonction en mode strict.</p>\n<p>Ensuite, en mode strict, il n'est plus possible de remonter la pile d'appels grâce aux extensions communément implémentées. Par exemple, dans du code non strict, lorsqu'une fonction <code>fun</code> est en train d'être appelée, <code>fun.caller</code> fait référence à la fonction qui a appelé <code>fun</code> la dernière et <code>fun.arguments</code> correspond à l'objet <code>arguments</code> pour cet appel à <code>fun</code>. Ces deux extensions posent problème pour la sécurité car elles permettent au code d'accéder à des fonctions privilégiées et à leurs arguments (éventuellement non sécurisés). Si <code>fun</code> est passée en mode strict, <code>fun.caller</code> et <code>fun.arguments</code> seront des propriétés non-supprimables qui lèveront une exception pour chaque tentative d'accès ou de modification :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">restricted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n  restricted<span class=\"token punctuation\">.</span>caller<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// lève une TypeError</span>\n  restricted<span class=\"token punctuation\">.</span>arguments<span class=\"token punctuation\">;</span> <span class=\"token comment\">// lève une TypeError</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">privilegedInvoker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">restricted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">privilegedInvoker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Enfin, pour une fonction en mode strict, <code>arguments</code> ne permet pas d'accéder aux variables passées à la fonction lors de l'appel. Dans certaines anciennes implémentations d'ECMAScript, <code>arguments.caller</code> était un objet dont les propriétés étaient des alias pour les variables passées à la fonction. Cela entraîne <a href=\"https://stuff.mit.edu/iap/2008/facebook/\" class=\"external\" rel=\" noopener\">un problème de sécurité</a> car cela empêche de cacher des valeurs privilégiées via l'abstraction des fonctions. Cela empêche aussi de nombreuses optimisations. Pour ces raisons, les navigateurs récents n'implémentent plus cet objet. Cependant, étant donné sa présence historique, en mode strict, <code>arguments.caller</code> est une propriété non-supprimable qui déclenche une exception pour toute tentative d'accès ou de modification :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> v <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> arguments<span class=\"token punctuation\">.</span>caller<span class=\"token punctuation\">;</span> <span class=\"token comment\">// lève une TypeError</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// n'expose pas v (ni a ou b)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"prévoir_la_suite_les_prochaines_versions_decmascript","title":"Prévoir la suite : les prochaines versions d'ECMAScript","isH3":true,"content":"<p>Les prochaines versions d'ECMAScript inclueront certainement une nouvelle syntaxe, de nouveaux mots-clés. Le mode strict d'ECMAScript 5 applique certaines restrictions qui permettent de prévoir les transitions à venir lorsque des changements auront lieu. Il sera ainsi plus simple de modifier le code si les erreurs relatives à une nouvelle syntaxe sont mises en avant grâce au mode strict.</p>\n<p>Premièrement, en mode strict, une liste d'identifiants fait partie des mots-clés réservés. Ces termes sont : <code>implements</code>, <code>interface</code>, <code>let</code>, <code>package</code>, <code>private</code>, <code>protected</code>, <code>public</code>, <code>static</code>, et <code>yield</code>. En mode strict, il est donc impossible de nommer des variables ou des arguments avec ces noms.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token keyword\">package</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">protected</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// !!!</span>\n  <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> <span class=\"token keyword\">implements</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// !!!</span>\n\n  <span class=\"token keyword\">interface</span><span class=\"token operator\">:</span> <span class=\"token comment\">// !!!</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">break</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// !!!</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token keyword\">private</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// !!!</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">static</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// !!!</span>\n</code></pre></div>\n<p>Deux défauts liés à Mozilla Firefox : tout d'abord si votre code est en JavaScript 1.7 ou supérieur (par exemple pour du code qui concerne le chrome dans les extensions ou lorsqu'on utilise les balises <code>&lt;script type=\"\"&gt;</code>) et qu'il est en mode strict, <code>let</code> et <code>yield</code> fonctionnent de la façon dont ils fonctionnaient originellement au sein de Firefox. En revanche, pour du code strict utilisé sur une page web et chargé avec <code>&lt;script src=\"\"&gt;</code> ou <code>&lt;script&gt;...&lt;/script&gt;</code>, on ne pourra pas utiliser <code>let</code>/<code>yield</code> comme identifiants. Ensuite, bien qu'ES5 réserve les mots-clés <code>class</code>, <code>enum</code>, <code>export</code>, <code>extends</code>, <code>import</code>, et <code>super</code> pour le mode strict et le mode non strict, les versions antérieures à Firefox 5 ne réservaient ces mots-clés que pour le mode strict.</p>\n<p>Deuxièmement, <a href=\"https://whereswalden.com/2011/01/24/new-es5-strict-mode-requirement-function-statements-not-at-top-level-of-a-program-or-function-are-prohibited/\" class=\"external\" rel=\" noopener\">le mode strict interdit les déclarations de fonctions qui ne sont pas au niveau le plus haut d'un script ou d'une fonction</a>. En mode normal, il est possible de déclarer une fonction n'importe où avec une déclaration de fonction (voir <a href=\"/fr/docs/Web/JavaScript/Reference/Statements/function\"><code>function</code></a>). Ceci ne fait pas partie de la spécification ECMAScript et est donc une extension. <a href=\"https://wiki.ecmascript.org/doku.php?id=conventions:no_non_standard_strict_decls\" class=\"external\" rel=\" noopener\">Le mode strict interdit cela</a>, ce qui permet de lever toute ambiguité par rapport aux futures spécifications ECMAScript sur cette fonctionnalité. On notera que les instructions de fonctions écrites en dehors du plus haut niveau sont autorisées avec ES2015 :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// !!! erreur de syntaxe</span>\n  <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// !!! erreur de syntaxe</span>\n  <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">truc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// OK</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bidule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// OK également</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Cette interdiction n'est pas, à proprement parler, liée au mode strict. En effet, de telles déclarations de fonctions ne font pas partie d'ES5. Cependant, c'est un choix du comité ECMAScript que cette interdiction soit implémentée.</p>"}},{"type":"prose","value":{"id":"le_mode_strict_dans_les_navigateurs","title":"Le mode strict dans les navigateurs","isH3":false,"content":"<p>Désormais, l'ensemble des navigateurs majeurs implémentent le mode strict. Cependant, il existe toujours un certain nombre de disparités et certains navigateurs actuels ou avec leurs anciennes versions ne supportent pas le mode strict. Le mode strict modifie des éléments de sémantique de JavaScript ; faire appel au mode strict pour des navigateurs qui ne le supportent pas peut donc entraîner des erreurs indésirables. Pour cette raison, il faut faire attention à la façon dont on exécute du code strict et bien tester ce code sur l'ensemble des navigateurs : ceux qui supportent le mode strict comme ceux qui ne supportent pas ce mode.</p>"}},{"type":"prose","value":{"id":"spécifications","title":"Spécifications","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>Spécification</th>\n      <th>État</th>\n      <th>Commentaires</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://www.ecma-international.org/ecma-262/5.1/#sec-10.1.1\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">ECMAScript 5.1 (ECMA-262)<br><small lang=\"fr\">La définition de 'Strict Mode Code' dans cette spécification.</small></a> <a href=\"https://www.ecma-international.org/ecma-262/5.1/#sec-C\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">ECMAScript 5.1 (ECMA-262)<br><small lang=\"fr\">La définition de 'Strict mode restriction and exceptions' dans cette spécification.</small></a></td>\n      <td><span class=\"spec-standard\">Standard</span></td>\n      <td>Définition initiale. Voir aussi : <a href=\"https://www.ecma-international.org/ecma-262/5.1/#sec-C\" class=\"external\" rel=\" noopener\">les restrictions du mode strict et les exceptions</a></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www.ecma-international.org/ecma-262/6.0/#sec-strict-mode-code\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">ECMAScript 2015 (6th Edition, ECMA-262)<br><small lang=\"fr\">La définition de 'Strict Mode Code' dans cette spécification.</small></a> <a href=\"https://www.ecma-international.org/ecma-262/6.0/#sec-strict-mode-of-ecmascript\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">ECMAScript 2015 (6th Edition, ECMA-262)<br><small lang=\"fr\">La définition de 'Strict mode restriction and exceptions' dans cette spécification.</small></a></td>\n      <td><span class=\"spec-standard\">Standard</span></td>\n      <td><a href=\"https://www.ecma-international.org/ecma-262/6.0/#sec-strict-mode-of-ecmascript\" class=\"external\" rel=\" noopener\">Les restrictions du mode strict et les exceptions</a></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://tc39.es/ecma262/#sec-strict-mode-code\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">ECMAScript (ECMA-262)<br><small lang=\"fr\">La définition de 'Strict Mode Code' dans cette spécification.</small></a></td>\n      <td><span class=\"spec-living\">Standard évolutif</span></td>\n      <td><a href=\"https://tc39.github.io/ecma262/#sec-strict-mode-of-ecmascript\" class=\"external\" rel=\" noopener\">Les restrictions du mode strict et les exceptions</a></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"voir_aussi","title":"Voir aussi","isH3":false,"content":"<ul>\n  <li><a href=\"https://whereswalden.com/2010/09/08/new-es5-strict-mode-support-now-with-poison-pills/\" class=\"external\" rel=\" noopener\">Where's Walden? » New ES5 strict mode support: now with poison pills!</a> (billet en anglais)</li>\n  <li><a href=\"https://whereswalden.com/2011/01/24/new-es5-strict-mode-requirement-function-statements-not-at-top-level-of-a-program-or-function-are-prohibited/\" class=\"external\" rel=\" noopener\">Where's Walden? » New ES5 strict mode requirement: function statements not at top level of a program or function are prohibited</a> (billet en anglais)</li>\n  <li><a href=\"https://whereswalden.com/2011/01/10/new-es5-strict-mode-support-new-vars-created-by-strict-mode-eval-code-are-local-to-that-code-only/\" class=\"external\" rel=\" noopener\">Where's Walden? » New ES5 strict mode support: new vars created by strict mode eval code are local to that code only</a> (billet en anglais)</li>\n  <li><a href=\"https://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/\" class=\"external\" rel=\" noopener\">John Resig - ECMAScript 5 Strict Mode, JSON, and More</a> (billet en anglais)</li>\n  <li><a href=\"https://dmitrysoshnikov.com/ecmascript/es5-chapter-2-strict-mode/\" class=\"external\" rel=\" noopener\">ECMA-262-5 in detail. Chapter 2. Strict Mode.</a> (billet en anglais)</li>\n  <li><a href=\"https://kangax.github.io/compat-table/es5/#Strict_mode\" class=\"external\" rel=\" noopener\">Tableau de compatibilité pour le mode strict</a> (Kangax)</li>\n  <li><a href=\"/fr/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Passer au mode strict</a></li>\n</ul>"}}],"toc":[{"text":"Invoquer le mode strict","id":"invoquer_le_mode_strict"},{"text":"Différences du mode strict","id":"différences_du_mode_strict"},{"text":"Le mode strict dans les navigateurs","id":"le_mode_strict_dans_les_navigateurs"},{"text":"Spécifications","id":"spécifications"},{"text":"Voir aussi","id":"voir_aussi"}],"summary":"Le mode strict de ECMAScript 5 permet de choisir une variante restrictive de JavaScript. Le mode strict n'est pas seulement un sous-ensemble de JavaScript : il possède intentionnellement des sémantiques différentes du code normal. Les navigateurs ne supportant pas le mode strict exécuteront le code d'une façon légèrement différente de ceux le supportant, il ne faut donc pas compter sur le mode strict pour éviter des tests sur les navigateurs qui ne le supportent pas. Les codes en mode strict et en mode non-strict peuvent coexister, ce qui permet de réécrire les scripts en mode strict de façon incrémentale.","popularity":0.0007,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Strict mode","locale":"en-US","native":"English (US)"},{"title":"Modo Estricto","locale":"es","native":"Español"},{"title":"厳格モード","locale":"ja","native":"日本語"},{"title":"Strict mode","locale":"ko","native":"한국어"},{"title":"Strict mode","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Strict mode","locale":"ru","native":"Русский"},{"title":"严格模式","locale":"zh-CN","native":"中文 (简体)"},{"title":"Strict mode","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"fr/web/javascript/reference/strict_mode","github_url":"https://github.com/mdn/translated-content/blob/main/files/fr/web/javascript/reference/strict_mode/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/fr/docs/Web","title":"Technologies web pour développeurs"},{"uri":"/fr/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/fr/docs/Web/JavaScript/Reference","title":"Référence JavaScript"},{"uri":"/fr/docs/Web/JavaScript/Reference/Strict_mode","title":"Le mode strict"}],"pageTitle":"Le mode strict - JavaScript | MDN","noIndexing":false}}