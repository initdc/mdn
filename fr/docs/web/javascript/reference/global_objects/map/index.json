{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Map","mdn_url":"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map","locale":"fr","native":"Français","sidebarHTML":"<ol><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects\">Objets standards</a></strong></li><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Propriétés</strong></a><ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/@@species\"><code>get Map[@@species]</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/@@toStringTag\"><code>Map.prototype[@@toStringTag]</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/size\"><code>Map.prototype.size</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>Méthodes</strong></a><ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator\"><code>Map.prototype[@@iterator]()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/clear\"><code>Map.prototype.clear()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/delete\"><code>Map.prototype.delete()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/entries\"><code>Map.prototype.entries()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\"><code>Map.prototype.forEach()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/get\"><code>Map.prototype.get()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/has\"><code>Map.prototype.has()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/keys\"><code>Map.prototype.keys()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/set\"><code>Map.prototype.set()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/values\"><code>Map.prototype.values()</code></a></li></ol></li><li><strong>Héritage&nbsp;:</strong></li><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>Propriétés</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function.prototype.prototype</code></a></li></ol></li><li><a href=\"#\"><strong>Méthodes</strong></a><ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Propriétés</strong></a><ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Méthodes</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Un objet <strong><code>Map</code></strong> contient des paires de clé-valeur et mémorise l'ordre dans lequel les clés ont été insérées. N'importe quel type de valeur (<a href=\"/fr/docs/Glossary/Primitive\">primitive</a> ou objet) peut être utilisée comme clé ou comme valeur.</p><iframe class=\"interactive\" height=\"692\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/map.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"description","title":"Description","isH3":false,"content":"<p>Un objet <code>Map</code> permet de parcourir ses éléments selon leur ordre d'insertion. Par exemple, une boucle <a href=\"/fr/docs/Web/JavaScript/Reference/Statements/for...of\"><code>for…of</code></a> renverra un tableau <code>[clé, valeur]</code> pour chaque itération.</p>"}},{"type":"prose","value":{"id":"égalité_des_clés","title":"Égalité des clés","isH3":true,"content":"<ul>\n  <li>L'égalité des clés est testée avec l'algorithme basé sur <a href=\"/fr/docs/Web/JavaScript/Equality_comparisons_and_sameness#samevaluezero\"><code>sameValueZero</code></a></li>\n  <li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> est considéré égal à <code>NaN</code> (bien que pour l'égalité stricte, on a <code>NaN !== NaN</code>) et toutes les autres valeurs sont considérées égales au sens de l'égalité stricte (l'opérateur <code>===</code>).</li>\n  <li>Dans la version actuelle de la spécification ECMAScript, <code>-0</code> et <code>+0</code> sont considérées égaux même si ce n'était pas le cas dans les brouillons antérieurs. Voir <a href=\"#compatibilit%C3%A9_des_navigateurs\">le tableau de compatibilité</a> pour plus de détails.</li>\n</ul>"}},{"type":"prose","value":{"id":"comparaison_entre_objets_et_map","title":"Comparaison entre objets et <code>Map</code>","isH3":true,"content":"<p>Les <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object\">structures objets</a> sont similaires aux structures <code>Map</code>, chacune permet d'associer des clés à des valeurs, de récupérer ces valeurs, de supprimer des clés, de détecter si une valeur est associée à une clé. Aussi, avant l'apparition de <code>Map</code>, on utilisait les objets pour représenter cette structure.</p>\n<p>Toutefois, il existe des différences importantes qui font que <code>Map</code> se démarque et peut être préférable dans certains cas&nbsp;:</p>\n<table class=\"standard-table\">\n  <thead>\n    <tr>\n      <th scope=\"row\"></th>\n      <th scope=\"col\">`Map`</th>\n      <th scope=\"col\">Objet</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">Clés accidentelles</th>\n      <td>Un objet <code>Map</code> ne contient aucune clé par défaut. Il ne contient que ce qui y est explicitement placé.</td>\n      <td>\n        <p>Un objet <code>Object</code> possède un prototype et dispose donc de certaines clés par défaut, ce qui peut être source de collision avec vos propres clés si vous ne faites pas attention.</p>\n        <div class=\"notecard note\" id=\"sect1\">\n          <p><strong>Note :</strong> Avec ES5, il est possible de contourner ceci en utilisant <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create(null)</code></a>.</p>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Types de clés</th>\n      <td>Pour une structure <code>Map</code>, les clés peuvent être n'importe quelle valeur (y compris des fonctions, des objets ou des valeurs primitives).</td>\n      <td>Les clés d'une structure <code>Object</code> doivent être une chaîne de caractères (<a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>) ou un symbole (<a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a>).</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Ordre des clés</th>\n      <td>Les clés d'une structure <code>Map</code> sont triées selon leur ordre d'insertion.</td>\n      <td>\n        <p>Bien que les clés d'une structure <code>Object</code> soient désormais triées, ça n'a pas toujours été le cas et l'ordre en question est complexe. Aussi, mieux vaut ne pas utiliser cet ordre des propriétés.</p>\n        <p>L'ordre des propriétés propres d'un objet a été défini pour la première fois avec ECMAScript 2015. ECMAScript 2020 a défini l'ordre des propriétés héritées. Voir les opérations abstraites <a href=\"https://tc39.es/ecma262/#sec-ordinaryownpropertykeys\" class=\"external\" rel=\" noopener\">OrdinaryOwnPropertyKeys</a> et <a href=\"https://tc39.es/ecma262/#sec-enumerate-object-properties\" class=\"external\" rel=\" noopener\">EnumerateObjectProperties</a> qui sont décrites dans la spécification. On notera toutefois qu'aucun mécanisme ne parcourt <strong>toutes</strong> les propriétés d'un objet&nbsp;; chaque mécanisme d'itération porte sur différents ensembles de propriétés&nbsp;: <a href=\"/fr/docs/Web/JavaScript/Reference/Statements/for...in\"><code>for…in</code></a> ne porte que sur les propriétés énumérables dont les clés sont des chaînes de caractères, <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys()</code></a> ne porte que sur les propriétés propres, énumérables et dont les clés sont des chaînes de caractères, <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\"><code>Object.getOwnPropertyNames()</code></a> ne porte que sur les propriétés propres dont les clés sont des chaînes de caractères, y compris celles qui ne sont pas énumérables, et <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\"><code>Object.getOwnPropertySymbols()</code></a> porte de la même façon sur les propriétés dont les clés sont des symboles.</p>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Taille</th>\n      <td>Le nombre d'éléments d'une structure <code>Map</code> est facilement accessible avec la propriété <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/size\"><code>size</code></a>.</td>\n      <td>Le nombre d'éléments d'une structure <code>Object</code> doit être déterminé manuellement.</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Itération</th>\n      <td>Une structure <code>Map</code> est un <a href=\"/fr/docs/Web/JavaScript/Reference/Iteration_protocols\">itérable</a>, et on peut donc le parcourir directement.</td>\n      <td>\n        <p><code>Object</code> n'implémente pas de <a href=\"/fr/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\">protocole d'itération</a>, et les objets ne peuvent donc pas être parcourus directement avec une boucle <a href=\"/fr/docs/Web/JavaScript/Reference/Statements/for...of\"><code>for…of</code></a> (par défaut).</p>\n        <div class=\"notecard note\" id=\"sect2\">\n          <p><strong>Note :</strong></p>\n          <ul>\n            <li>Il est possible d'implémenter manuellement le protocole d'itération ou d'obtenir un itérable avec <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys()</code></a> ou <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\"><code>Object.entries()</code></a>.</li>\n            <li>L'instruction <a href=\"/fr/docs/Web/JavaScript/Reference/Statements/for...in\"><code>for…in</code></a> permet de parcourir les propriétés <em>enumérables</em> d'un objet.</li>\n          </ul>\n        </div>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Performance</th>\n      <td>Meilleures performances pour les utilisations avec de nombreuses additions/suppressions de clés/valeurs.</td>\n      <td>Pas d'optimisation pour les utilisations avec de nombreuses additions/suppressions de clés/valeurs.</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Sérialisation et désérialisation</th>\n      <td>\n        <p>Pas de prise en charge native pour la sérialisation ou la désérialisation.</p>\n        <p>Il est toutefois possible de construire soi-même un mécanisme de sérialisation/désérialisation pour <code>Map</code> grâce à la fonction <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a> et son argument de remplacement et grâce à la fonction <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\"><code>JSON.parse()</code></a> et son argument de régénération. Voir <a href=\"https://stackoverflow.com/q/29085197/\" class=\"external\" rel=\" noopener\">la question StackOverflow (en anglais) sur la transformation en chaîne de caractères d'une structure <code>Map</code></a>.</p>\n      </td>\n      <td>\n        <p><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a> permet la prise en charge native de la sérialisation des structures <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> en JSON.</p>\n        <p><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\"><code>JSON.parse()</code></a> permet la prise en charge native de la désérialisation des structures <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> en JSON.</p>\n      </td>\n    </tr>\n  </tbody>\n</table>","titleAsText":"Comparaison entre objets et Map"}},{"type":"prose","value":{"id":"ajouter_des_propriétés_objet","title":"Ajouter des propriétés objet","isH3":true,"content":"<p>Les structures <code>Map</code> sont également des objets et il est donc possible de leur rajouter des propriétés objets. Attention toutefois, car cela peut être source de confusion.</p>\n<p>Ainsi, on pourra faire&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code><span class=\"token keyword\">const</span> mauvaiseMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmauvaiseMap<span class=\"token punctuation\">[</span><span class=\"token string\">'bla'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'blaa'</span><span class=\"token punctuation\">;</span>\nmauvaiseMap<span class=\"token punctuation\">[</span><span class=\"token string\">'bla2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'blaaa2'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mauvaiseMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Map { bla: 'blaa', bla2: 'blaaa2' }</span>\n</code></pre></div>\n<p>Mais ces instructions n'interagissent pas avec la structure <code>Map</code>, elles ne font qu'ajouter des propriétés objet. La valeur associée à la clé <code>\"bla\"</code> n'est pas stockée dans la <code>Map</code>. Ainsi, si on utilise les méthodes de <code>Map</code>, cela échouera&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code>mauvaiseMap<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bla'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// false</span>\nmauvaiseMap<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bla'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mauvaiseMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// Map { bla: 'blaa', bla2: 'blaaa2' }</span>\n</code></pre></div>\n<p>Pour stocker des données dans une structure <code>Map</code>, on utilisera plutôt la méthode <code>set(cle, valeur)</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js example-good notranslate\"><code><span class=\"token keyword\">const</span> contacts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jessie'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">phone</span><span class=\"token operator\">:</span> <span class=\"token string\">\"01 99 00 12 34\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1 Rue de l'avenue\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jessie'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'James'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'James'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">phone</span><span class=\"token operator\">:</span> <span class=\"token string\">\"06 39 98 78 89\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3 Chemin du Parc\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jessie'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {phone: \"01 99 00 12 34\", address: \"1 Rue de l'avenue\"}</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Miaouss'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\ncontacts<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jessie'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>contacts<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"constructeur","title":"Constructeur","isH3":false,"content":"<dl>\n  <dt id=\"map\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/Map\"><code>Map()</code></a></dt>\n  <dd>\n    <p>Crée un nouvel objet <code>Map</code>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"propriétés_statiques","title":"Propriétés statiques","isH3":false,"content":"<dl>\n  <dt id=\"get_mapspecies\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/@@species\"><code>get Map[@@species]</code></a></dt>\n  <dd>\n    <p>La fonction de construction utilisée pour créer les objets dérivés.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"propriétés_des_instances","title":"Propriétés des instances","isH3":false,"content":"<dl>\n  <dt id=\"map.prototype.size\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/size\"><code>Map.prototype.size</code></a></dt>\n  <dd>\n    <p>Renvoie le nombre de paires clé/valeur contenues dans l'objet <code>Map</code>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"méthodes_des_instances","title":"Méthodes des instances","isH3":false,"content":"<dl>\n  <dt id=\"map.prototype.clear\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/clear\"><code>Map.prototype.clear()</code></a></dt>\n  <dd>\n    <p>Supprime toutes les paires de clé/valeur de l'objet <code>Map</code>.</p>\n  </dd>\n  <dt id=\"map.prototype.deletevarclevar\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/delete\"><code>Map.prototype.delete(var&gt;cle&lt;/var&gt;)</code></a></dt>\n  <dd>\n    <p>Renvoie <code>true</code> si un élément existait dans l'objet <code>Map</code> et qu'il a été retiré, ou <code>false</code> si l'élément n'existe pas. Après cette opération, <code>Map.prototype.has(cle)</code> renverra <code>false</code>.</p>\n  </dd>\n  <dt id=\"map.prototype.getvarclevar\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/get\"><code>Map.prototype.get(&lt;var&gt;cle&lt;/var&gt;)</code></a></dt>\n  <dd>\n    <p>Renvoie la valeur associée à la clé passée en argument, ou <code>undefined</code> s'il n'y a pas de valeur pour cette clé.</p>\n  </dd>\n  <dt id=\"map.prototype.hasvarclevar\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/has\"><code>Map.prototype.has(&lt;var&gt;cle&lt;/var&gt;)</code></a></dt>\n  <dd>\n    <p>Renvoie un booléen indiquant s'il existe une valeur associée à la clé fournie par l'argument dans l'objet <code>Map</code>.</p>\n  </dd>\n  <dt id=\"map.prototype.setvarclevar_varvaleurvar\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/set\"><code>Map.prototype.set(&lt;var&gt;cle&lt;/var&gt;, &lt;var&gt;valeur&lt;/var&gt;)</code></a></dt>\n  <dd>\n    <p>Définit une valeur pour la clé, indiquées par les arguments. Renvoie l'objet <code>Map</code> à jour.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"méthodes_ditération","title":"Méthodes d'itération","isH3":true,"content":"<dl>\n  <dt id=\"map.prototypeiterator\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator\"><code>Map.prototype[@@iterator]()</code></a></dt>\n  <dd>\n    <p>Renvoie un nouvel objet itérateur qui contient <strong>un tableau de <code>[cle, valeur]</code></strong> pour chaque élément de l'objet <code>Map</code>, dans leur ordre d'insertion.</p>\n  </dd>\n  <dt id=\"map.prototype.keys\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/keys\"><code>Map.prototype.keys()</code></a></dt>\n  <dd>\n    <p>Renvoie un nouvel objet itérateur qui contient les <strong>clés</strong> pour chaque élément de l'objet <code>Map</code>, dans leur ordre d'insertion.</p>\n  </dd>\n  <dt id=\"map.prototype.values\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/values\"><code>Map.prototype.values()</code></a></dt>\n  <dd>\n    <p>Renvoie un nouvel objet itérateur qui contient les <strong>valeurs</strong> pour chaque élément de l'objet <code>Map</code>, dans leur ordre d'insertion.</p>\n  </dd>\n  <dt id=\"map.prototype.entries\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/entries\"><code>Map.prototype.entries()</code></a></dt>\n  <dd>\n    <p>Renvoie un nouvel objet itérateur qui contient <strong>un tableau de <code>[cle, valeur]</code></strong> pour chaque élément de l'objet <code>Map</code>, dans leur ordre d'insertion.</p>\n  </dd>\n  <dt id=\"map.prototype.foreachvarfnrappelvarvarthisargvar\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\"><code>Map.prototype.forEach(&lt;var&gt;fnRappel&lt;/var&gt;[,&lt;var&gt;thisArg&lt;/var&gt;])</code></a></dt>\n  <dd>\n    <p>Appelle la fonction <code>fnRappel</code> une fois pour chaque paire clé/valeur contenue dans l'objet <code>Map</code>, dans leur ordre d'insertion. Si un paramètre <code>thisArg</code> est fourni à <code>forEach()</code>, sa valeur sera utilisée comme valeur pour <code>this</code> lors de chaque appel.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"exemples","title":"Exemples","isH3":false,"content":""}},{"type":"prose","value":{"id":"utiliser_un_objet_map","title":"Utiliser un objet <code>Map</code>","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> maMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> objectKey <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">functionKey</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    stringKey <span class=\"token operator\">=</span> <span class=\"token string\">\"une chaîne\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// définir les valeurs</span>\nmaMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>stringKey<span class=\"token punctuation\">,</span> <span class=\"token string\">\"valeur associée à 'une chaîne'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmaMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>objectKey<span class=\"token punctuation\">,</span> <span class=\"token string\">\"valeur associée à objectKey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmaMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>functionKey<span class=\"token punctuation\">,</span> <span class=\"token string\">\"valeur associée à functionKey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmaMap<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\n<span class=\"token comment\">// récupérer les valeurs</span>\nmaMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>stringKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// \"valeur associée à 'une chaîne'\"</span>\nmaMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>objectKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// \"valeur associée à objetClé\"</span>\nmaMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>functionKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// \"valeur associée à fonctionClé\"</span>\n\nmaMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"une chaîne\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"valeur associée à 'une chaîne'\"</span>\n                          <span class=\"token comment\">// car chaineClé === 'une chaîne'</span>\nmaMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// indéfini car objetClé !== {}</span>\nmaMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// indéfini car fonctionClé !== function () {}</span>\n</code></pre></div>","titleAsText":"Utiliser un objet Map"}},{"type":"prose","value":{"id":"utiliser_nan_comme_clé","title":"Utiliser <code>NaN</code> comme clé","isH3":true,"content":"<p><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> peut être utilisé comme une clé. Bien que <code>NaN</code> ne soit pas strictement égal à lui-même (<code>NaN !== NaN</code> vaut <code>true</code>), on peut bâtir l'exemple suivant, car on ne peut pas distinguer deux valeurs <code>NaN</code>&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> maMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmaMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"not a number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmaMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"not a number\"</span>\n\n<span class=\"token keyword\">const</span> otherNaN <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toto\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmaMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>otherNaN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"not a number\"</span>\n</code></pre></div>","titleAsText":"Utiliser NaN comme clé"}},{"type":"prose","value":{"id":"parcourir_des_objets_maps_avec_for…of","title":"Parcourir des objets <code>Maps</code> avec <code>for…of</code>","isH3":true,"content":"<p>Il est possible de parcourir les objets <code>Map</code> grâce à des boucles <code>for…of</code>&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> maMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmaMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"zéro\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmaMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"un\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> maMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// \"0 = zéro\"</span>\n<span class=\"token comment\">// \"1 = un\"</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">of</span> maMap<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 0</span>\n<span class=\"token comment\">// 1</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> value <span class=\"token keyword\">of</span> maMap<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>valeur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// zéro</span>\n<span class=\"token comment\">// un</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> maMap<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 0 = zéro</span>\n<span class=\"token comment\">// 1 = un</span>\n</code></pre></div>","titleAsText":"Parcourir des objets Maps avec for…of"}},{"type":"prose","value":{"id":"parcourir_des_objets_map_avec_foreach","title":"Parcourir des objets <code>Map</code> avec <code>forEach()</code>","isH3":true,"content":"<p>Il est aussi possible de parcourir des objets <code>Map</code> avec la méthode <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\"><code>forEach()</code></a>&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>maMap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 0 = zéro</span>\n<span class=\"token comment\">// 1 = un</span>\n</code></pre></div>","titleAsText":"Parcourir des objets Map avec forEach()"}},{"type":"prose","value":{"id":"relation_avec_les_objets_array","title":"Relation avec les objets <code>Array</code>","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> keyValuePair <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"clé1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"valeur1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"clé2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"valeur2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// On utilise le constructeur Map</span>\n<span class=\"token comment\">// pour transformer un tableau de clés/valeurs</span>\n<span class=\"token comment\">// en un objet Map</span>\n<span class=\"token keyword\">const</span> maMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>keyValuePair<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmaMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clé1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// renvoie \"valeur1\"</span>\n\n<span class=\"token comment\">// On utilise la fonction Array.from pour transformer</span>\n<span class=\"token comment\">// une map en un tableau de clés/valeurs</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>maMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// affichera la même chose que tableauCléValeur</span>\n\n<span class=\"token comment\">// Avec une méthode plus concise grâce à la décomposition</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>maMap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// On peut aussi l'utiliser pour n'extraire que les clés</span>\n<span class=\"token comment\">// ou les valeurs et créer le tableau associé</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>maMap<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// affichera [\"clé1\", \"clé2\"]</span>\n</code></pre></div>","titleAsText":"Relation avec les objets Array"}},{"type":"prose","value":{"id":"cloner_et_fusionner_des_objets_map","title":"Cloner et fusionner des objets <code>Map</code>","isH3":true,"content":"<p>Il est possible de cloner des <code>Map</code> comme on clone des tableaux&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'un'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> clone <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>clone<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// un</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>original <span class=\"token operator\">===</span> clone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false. Utile pour une comparaison superficielle</span>\n</code></pre></div>\n<div class=\"notecard note\" id=\"sect3\">\n  <p><strong>Note :</strong> La donnée contenue dans la <code>Map</code> n'est pas clonée.</p>\n</div>\n<p>Il est également possible de fusionner deux <code>Map</code> en conservant le critère d'unicité sur les clés&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> premier <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'un'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'deux'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'trois'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> second <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'uno'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dos'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// On fusionne les deux maps. C'est la \"dernière\" version</span>\n<span class=\"token comment\">// de la clé qui l'emporte.</span>\n<span class=\"token comment\">// L'opérateur de décomposition nous permet principalement ici</span>\n<span class=\"token comment\">// de convertir une map en un tableau</span>\n<span class=\"token keyword\">const</span> fusion <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>premier<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>second<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fusion<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// uno</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fusion<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// dos</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fusion<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// trois</span>\n</code></pre></div>\n<p>Il est également possible de fusionner des objets <code>Map</code> avec des objets <code>Array</code>&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> premier <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'un'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'deux'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'trois'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> second <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'uno'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dos'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// On peut fusionner des Maps avec un tableau</span>\n<span class=\"token comment\">// Là encore c'est le dernier exemplaire de la clé qui l'emporte</span>\n<span class=\"token keyword\">const</span> fusion <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>premier<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>second<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'eins'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fusion<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eins</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fusion<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// dos</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fusion<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// trois</span>\n</code></pre></div>","titleAsText":"Cloner et fusionner des objets Map"}},{"type":"specifications","value":{"title":"Spécifications","id":"spécifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/keyed-collections.html#sec-map-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Map"}},{"type":"browser_compatibility","value":{"title":"Compatibilité des navigateurs","id":"compatibilité_des_navigateurs","isH3":false,"query":"javascript.builtins.Map","dataURL":"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map/bcd.json"}},{"type":"prose","value":{"id":"voir_aussi","title":"Voir aussi","isH3":false,"content":"<ul>\n  <li>Une prothèse d'émulation pour <code>Map</code>, disponible avec <a href=\"https://github.com/zloirock/core-js#map\" class=\"external\" rel=\" noopener\">la bibliothèque <code>core-js</code></a></li>\n  <li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a></li>\n  <li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\"><code>WeakMap</code></a></li>\n  <li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\"><code>WeakSet</code></a></li>\n</ul>"}}],"toc":[{"text":"Description","id":"description"},{"text":"Constructeur","id":"constructeur"},{"text":"Propriétés statiques","id":"propriétés_statiques"},{"text":"Propriétés des instances","id":"propriétés_des_instances"},{"text":"Méthodes des instances","id":"méthodes_des_instances"},{"text":"Exemples","id":"exemples"},{"text":"Spécifications","id":"spécifications"},{"text":"Compatibilité des navigateurs","id":"compatibilité_des_navigateurs"},{"text":"Voir aussi","id":"voir_aussi"}],"summary":"Un objet Map contient des paires de clé-valeur et mémorise l'ordre dans lequel les clés ont été insérées. N'importe quel type de valeur (primitive ou objet) peut être utilisée comme clé ou comme valeur.","popularity":0.0032,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Map","locale":"en-US","native":"English (US)"},{"title":"Map","locale":"ja","native":"日本語"},{"title":"Map","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Map","locale":"zh-CN","native":"中文 (简体)"},{"title":"Map","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"fr/web/javascript/reference/global_objects/map","github_url":"https://github.com/mdn/translated-content/blob/main/files/fr/web/javascript/reference/global_objects/map/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/fr/docs/Web","title":"Technologies web pour développeurs"},{"uri":"/fr/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/fr/docs/Web/JavaScript/Reference","title":"Référence JavaScript"},{"uri":"/fr/docs/Web/JavaScript/Reference/Global_Objects","title":"Objets globaux"},{"uri":"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map","title":"Map"}],"pageTitle":"Map - JavaScript | MDN","noIndexing":false}}