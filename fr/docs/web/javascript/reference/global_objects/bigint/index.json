{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"BigInt","mdn_url":"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt","locale":"fr","native":"Français","sidebarHTML":"<ol><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects\">Objets standards</a></strong></li><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Méthodes</strong></a><ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asIntN\"><code>BigInt.asIntN()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asUintN\"><code>BigInt.asUintN()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toLocaleString\"><code>BigInt.prototype.toLocaleString()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toString\"><code>BigInt.prototype.toString()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt/valueOf\"><code>BigInt.prototype.valueOf()</code></a></li></ol></li><li><strong>Héritage&nbsp;:</strong></li><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>Propriétés</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function.prototype.prototype</code></a></li></ol></li><li><a href=\"#\"><strong>Méthodes</strong></a><ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Propriétés</strong></a><ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Méthodes</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p><strong><code>BigInt</code></strong> est <a href=\"/fr/docs/Glossary/Primitive#primitives_javascript_encapsul%C3%A9es_dans_des_objets\">une enveloppe objet</a> utilisée pour représenter et manipuler les valeurs <a href=\"/fr/docs/Glossary/Primitive\">primitives</a> <code>bigint</code> (grands entiers) qui permettent de représenter des valeurs <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\">plus grandes que celles correctement représentables</a> par une valeur primitive numérique (<code>number</code>).</p>"}},{"type":"prose","value":{"id":"description","title":"Description","isH3":false,"content":"<p>Un <strong>grand entier</strong>, aussi appelé <strong>BigInt</strong>, est une valeur primitive <code>bigint</code>, créée en ajoutant un <code>n</code> à la fin d'un littéral d'entier — <code>10n</code> par exemple, ou en appelant le constructeur <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt\"><code>BigInt()</code></a> (sans utiliser l'opérateur <code>new</code>) en lui fournissant un entier ou une chaîne de caractères en argument.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> plusGrandEntier <span class=\"token operator\">=</span> <span class=\"token number\">9007199254740991n</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> grandNombre <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">9007199254740991</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 9007199254740991n</span>\n\n<span class=\"token keyword\">const</span> grandNombreEnChaîne <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'9007199254740991'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 9007199254740991n</span>\n\n<span class=\"token keyword\">const</span> grandeNombreHexa <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0x1fffffffffffff'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 9007199254740991n</span>\n\n<span class=\"token keyword\">const</span> grandNombreOctal <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0o377777777777777777'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 9007199254740991n</span>\n\n<span class=\"token keyword\">const</span> grandeNombreBinaire <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0b11111111111111111111111111111111111111111111111111111'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 9007199254740991n</span>\n</code></pre></div>\n<p>Les objets <code>BigInt</code> sont semblables aux objets <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> selon certains aspects mais avec quelques différences clés. Les objets <code>BigInt</code> ne peuvent pas être utilisés avec les méthodes de l'objet <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Math\"><code>Math</code></a> et ne peuvent pas être manipulés avec des opérations qui impliquent des objets <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>. Il est donc nécessaire de convertir des valeurs <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> ou <code>BigInt</code> dans les opérations qui les combinent, mais attention lors de ces conversions car la précision d'une valeur <code>BigInt</code> peut être perdue lorsque ce dernier est converti en <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>.</p>"}},{"type":"prose","value":{"id":"information_de_type","title":"Information de type","isH3":true,"content":"<p>Lorsqu'on utilise <code>typeof</code> sur une valeur <code>BigInt</code>, cet opérateur renverra <code>\"bigint\"</code>&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> <span class=\"token number\">1n</span> <span class=\"token operator\">===</span> <span class=\"token string\">'bigint'</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'bigint'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>Lorsqu'on «&nbsp;enveloppe&nbsp;» la valeur primitive dans un objet, on aura alors un type <code>\"object\"</code> (comme pour les autres valeurs primitives lorsqu'on les enveloppe dans le constructeur objet)&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">typeof</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">1n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"opérateurs","title":"Opérateurs","isH3":true,"content":"<p>On peut utiliser les opérateurs suivants avec les objets <code>BigInt</code>&nbsp;:</p>\n<pre class=\"notranslate\">+ * - % **\n</pre>\n<p><a href=\"/fr/docs/Web/JavaScript/Reference/Operators\">Les opérateurs binaires</a> sont également pris en charge (à l'exception de <code>&gt;&gt;&gt;</code> / décalage à droite avec des zéros) car les grands entiers sont signés.</p>\n<p>Le <code>+</code> unaire n'est pas non plus pris en charge (afin de <a href=\"https://github.com/tc39/proposal-bigint/blob/master/ADVANCED.md#dont-break-asmjs\" class=\"external\" rel=\" noopener\">ne pas casser <code>asm.js</code></a>).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> nombreSain <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SAFE_INTEGER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 9007199254740991</span>\n\n<span class=\"token keyword\">const</span> maxPlusUn <span class=\"token operator\">=</span> nombreSain <span class=\"token operator\">+</span> <span class=\"token number\">1n</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 9007199254740992n</span>\n\n<span class=\"token keyword\">const</span> leFutur <span class=\"token operator\">=</span> nombreSain <span class=\"token operator\">+</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 9007199254740993n, cela fonctionne désormais !</span>\n\n<span class=\"token keyword\">const</span> multi <span class=\"token operator\">=</span> nombreSain <span class=\"token operator\">*</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 18014398509481982n</span>\n\n<span class=\"token keyword\">const</span> subtr <span class=\"token operator\">=</span> multi <span class=\"token operator\">-</span> <span class=\"token number\">10n</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 18014398509481972n</span>\n\n<span class=\"token keyword\">const</span> mod <span class=\"token operator\">=</span> multi <span class=\"token operator\">%</span> <span class=\"token number\">10n</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 2n</span>\n\n<span class=\"token keyword\">const</span> bigN <span class=\"token operator\">=</span> <span class=\"token number\">2n</span> <span class=\"token operator\">**</span> <span class=\"token number\">54n</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 18014398509481984n</span>\n\nbigN <span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">1n</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ -18014398509481984n</span>\n</code></pre></div>\n<p>L'opérateur <code>/</code> fonctionne de façon analogue aux nombres classiques. Toutefois, les objets <code>BigInt</code> permettent uniquement de représenter des entiers et non des nombres décimaux. Aussi, la division ne produira pas de partie décimale pour les <code>BigInt</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> attendu <span class=\"token operator\">=</span> <span class=\"token number\">4n</span> <span class=\"token operator\">/</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 2n</span>\n\n<span class=\"token keyword\">const</span> tronque <span class=\"token operator\">=</span> <span class=\"token number\">5n</span> <span class=\"token operator\">/</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 2n et pas 2.5n</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"comparaisons","title":"Comparaisons","isH3":true,"content":"<p>Un objet <code>BigInt</code> n'est pas strictement égal à <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> mais peut l'être au sens de l'égalité faible.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token number\">0n</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ false</span>\n\n<span class=\"token number\">0n</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ true</span>\n</code></pre></div>\n<p>On peut toutefois comparer des objets <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> et <code>BigInt</code>&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token number\">1n</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span>\n<span class=\"token comment\">// ↪ true</span>\n\n<span class=\"token number\">2n</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span>\n<span class=\"token comment\">// ↪ true</span>\n\n<span class=\"token number\">2</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span>\n<span class=\"token comment\">// ↪ false</span>\n\n<span class=\"token number\">2n</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span>\n<span class=\"token comment\">// ↪ false</span>\n\n<span class=\"token number\">2n</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">2</span>\n<span class=\"token comment\">// ↪ true</span>\n</code></pre></div>\n<p>On peut également mélanger ces valeurs au sein de tableaux&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> mixed <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4n</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">12n</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0n</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪  [4n, 6, -12n, 10, 4, 0, 0n]</span>\n\nmixed<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ [-12n, 0, 0n, 10, 4n, 4, 6]</span>\n\nmixed<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ne fonctionnera pas car la soustraction ne </span>\n<span class=\"token comment\">// fonctionne pas sur des types mixtes</span>\n<span class=\"token comment\">// TypeError: can't convert BigInt value to Number value</span>\n\n<span class=\"token comment\">// On peut trier avec un comparateur numérique approprié</span>\nmixed<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&gt;</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ [ -12n, 0, 0n, 4n, 4, 6, 10 ]</span>\n</code></pre></div>\n<p>On notera que les comparaisons entre les valeurs <code>BigInt</code> et les mêmes valeurs, passées dans le constructeur <code>Object()</code>, ne seront pas équivalentes au sens strict&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token number\">0n</span> <span class=\"token operator\">===</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// false</span>\n<span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// false</span>\n\n<span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\no <span class=\"token operator\">===</span> o<span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// true</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"opérations_conditionnelles","title":"Opérations conditionnelles","isH3":true,"content":"<p>Une valeur <code>BigInt</code> se comporte comme une valeur <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> lorsqu'elle est utilisée dans un contexte booléen&nbsp;: comme argument pour le constructeur <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a>, comme opérandes pour les <a href=\"/fr/docs/Web/JavaScript/Reference/Operators\">opérateurs logiques</a> <code>||</code>, <code>&amp;&amp;</code> et <code>!</code> ou avec les instructions conditionnelles telles que <a href=\"/fr/docs/Web/JavaScript/Reference/Statements/if...else\"><code>if</code></a>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Nous voici dans le if !'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Et nous voilà dans le else !'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ↪ \"Et nous voilà dans le else !\"</span>\n\n<span class=\"token number\">0n</span> <span class=\"token operator\">||</span> <span class=\"token number\">12n</span>\n<span class=\"token comment\">// ↪ 12n</span>\n\n<span class=\"token number\">0n</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">12n</span>\n<span class=\"token comment\">// ↪ 0n</span>\n\n<span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ↪ false</span>\n\n<span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">12n</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ↪ true</span>\n\n<span class=\"token operator\">!</span><span class=\"token number\">12n</span>\n<span class=\"token comment\">// ↪ false</span>\n\n<span class=\"token operator\">!</span><span class=\"token number\">0n</span>\n<span class=\"token comment\">// ↪ true</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"constructeur","title":"Constructeur","isH3":false,"content":"<dl>\n  <dt id=\"bigint\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt\"><code>BigInt()</code></a></dt>\n  <dd>\n    <p>Crée une nouvelle valeur <code>BigInt</code>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"méthodes_statiques","title":"Méthodes statiques","isH3":false,"content":"<dl>\n  <dt id=\"bigint.asintn\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asIntN\"><code>BigInt.asIntN()</code></a></dt>\n  <dd>\n    <p>Écrête une valeur <code>BigInt</code> en une valeur entière signée et renvoie cette valeur.</p>\n  </dd>\n  <dt id=\"bigint.asuintn\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asUintN\"><code>BigInt.asUintN()</code></a></dt>\n  <dd>\n    <p>Écrête une valeur <code>BigInt</code> en une valeur entière non-signée et renvoie cette valeur.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"méthodes_dinstance","title":"Méthodes d'instance","isH3":false,"content":"<dl>\n  <dt id=\"bigint.prototype.tolocalestring\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toLocaleString\"><code>BigInt.prototype.toLocaleString()</code></a></dt>\n  <dd>\n    <p>Renvoie une chaîne de caractères avec une représentation localisée de la valeur <code>BigInt</code>. Il s'agit d'une surcharge de la méthode <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a>.</p>\n  </dd>\n  <dt id=\"bigint.prototype.tostring\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toString\"><code>BigInt.prototype.toString()</code></a></dt>\n  <dd>\n    <p>Renvoie une chaîne de caractères avec une représentation de la valeur <code>BigInt</code> dans la base donnée. Il s'agit d'une surcharge de la méthode <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a>.</p>\n  </dd>\n  <dt id=\"bigint.prototype.valueof\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt/valueOf\"><code>BigInt.prototype.valueOf()</code></a></dt>\n  <dd>\n    <p>Renvoie la valeur <code>BigInt</code>. Il s'agit d'une surcharge de la méthode <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"recommandations_dusage","title":"Recommandations d'usage","isH3":false,"content":""}},{"type":"prose","value":{"id":"coercition_en_number","title":"Coercition en <code>Number</code>","isH3":true,"content":"<p>Lorsqu'on convertit une valeur <code>BigInt</code> en <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>, on perd en précision. Si on effectue des allers-retours entre ces deux types, on ne conservera pas la même valeur. Aussi, il est recommandé&nbsp;:</p>\n<ul>\n  <li>D'utiliser uniquement <code>BigInt</code> lorsque les valeurs qu'on manipule seront supérieures à <code>2^53</code> et qu'il ne sera pas nécessaire de passer d'un type à l'autre</li>\n  <li>De ne pas passer d'un type à l'autre (<code>BigInt</code> à <code>Number</code> et vice versa)</li>\n</ul>","titleAsText":"Coercition en Number"}},{"type":"prose","value":{"id":"cryptographie","title":"Cryptographie","isH3":true,"content":"<p>Les opérations prises en charge pour les valeurs <code>BigInt</code> ne s'effectuent pas à temps constant et sont donc sujettes à des <a href=\"https://fr.wikipedia.org/wiki/Attaque_temporelle\" class=\"external\" rel=\" noopener\">attaques temporelles</a>. Aussi, <code>BigInt</code> ne saurait être utilisé à des fins cryptographiques.</p>"}},{"type":"prose","value":{"id":"utilisation_avec_json","title":"Utilisation avec JSON","isH3":true,"content":"<p>L'utilisation de <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a> avec une valeur <code>BigInt</code> entraînera une exception <code>TypeError</code>, car ces valeurs ne sont pas sérialisées en JSON par défaut. Toutefois, il est possible d'utiliser <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#largument_rempla%C3%A7ant\">le paramètre de remplacement</a> de <code>JSON.stringify</code> pour sérialiser les propriétés <code>BigInt</code> sans erreur&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">remplacement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cle<span class=\"token punctuation\">,</span> valeur</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cle <span class=\"token operator\">===</span> <span class=\"token string\">'big'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> valeur<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> valeur<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> donnee <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">number</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">big</span><span class=\"token operator\">:</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'18014398509481982'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> chaine <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>donnee<span class=\"token punctuation\">,</span> remplacement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>chaine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ '{\"number\":1,\"big\":\"18014398509481982\"}'</span>\n</code></pre></div>\n<p>Si vous avez des données JSON contenant des valeurs dont vous savez qu'il s'agit de grands entiers, vous pouvez utiliser <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#utiliser_le_param%C3%A8tre_reviver\">le paramètre <code>reviver</code></a> de la méthode <code>JSON.parse()</code> pour les désérialiser&nbsp;:</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">reviver</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cle<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cle <span class=\"token operator\">===</span> <span class=\"token string\">'big'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> donnee <span class=\"token operator\">=</span> <span class=\"token string\">'{\"number\":1,\"big\":\"18014398509481982\"}'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> deserialise <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>donnee<span class=\"token punctuation\">,</span> reviver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>deserialise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ {number: 1, big: 18014398509481982n}</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"exemples","title":"Exemples","isH3":false,"content":""}},{"type":"prose","value":{"id":"calculer_des_nombres_premiers","title":"Calculer des nombres premiers","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">*</span> i <span class=\"token operator\">&lt;=</span> p<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">%</span> i <span class=\"token operator\">===</span> <span class=\"token number\">0n</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Prend une valeur BigInt comme argument</span>\n<span class=\"token comment\">// Renvoie une valeur BigInt</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">nthPrime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nth</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> maybePrime <span class=\"token operator\">=</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> prime <span class=\"token operator\">=</span> <span class=\"token number\">0n</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nth <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span>maybePrime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nth<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n      prime <span class=\"token operator\">=</span> maybePrime<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    maybePrime<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> prime<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">nthPrime</span><span class=\"token punctuation\">(</span><span class=\"token number\">20n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ↪ 73n</span>\n</code></pre></div>"}},{"type":"specifications","value":{"title":"Spécifications","id":"spécifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/numbers-and-dates.html#sec-bigint-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.BigInt"}},{"type":"browser_compatibility","value":{"title":"Compatibilité des navigateurs","id":"compatibilité_des_navigateurs","isH3":false,"query":"javascript.builtins.BigInt","dataURL":"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt/bcd.json"}},{"type":"prose","value":{"id":"voir_aussi","title":"Voir aussi","isH3":false,"content":"<ul>\n  <li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a></li>\n  <li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\"><code>Number.MAX_SAFE_INTEGER</code></a></li>\n</ul>"}}],"toc":[{"text":"Description","id":"description"},{"text":"Constructeur","id":"constructeur"},{"text":"Méthodes statiques","id":"méthodes_statiques"},{"text":"Méthodes d'instance","id":"méthodes_dinstance"},{"text":"Recommandations d'usage","id":"recommandations_dusage"},{"text":"Exemples","id":"exemples"},{"text":"Spécifications","id":"spécifications"},{"text":"Compatibilité des navigateurs","id":"compatibilité_des_navigateurs"},{"text":"Voir aussi","id":"voir_aussi"}],"summary":"BigInt est une enveloppe objet utilisée pour représenter et manipuler les valeurs primitives bigint (grands entiers) qui permettent de représenter des valeurs plus grandes que celles correctement représentables par une valeur primitive numérique (number).","popularity":0.0004,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"BigInt","locale":"en-US","native":"English (US)"},{"title":"BigInt","locale":"ja","native":"日本語"},{"title":"BigInt","locale":"ko","native":"한국어"},{"title":"BigInt","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"BigInt","locale":"ru","native":"Русский"},{"title":"BigInt","locale":"zh-CN","native":"中文 (简体)"},{"title":"BigInt","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"fr/web/javascript/reference/global_objects/bigint","github_url":"https://github.com/mdn/translated-content/blob/main/files/fr/web/javascript/reference/global_objects/bigint/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/fr/docs/Web","title":"Technologies web pour développeurs"},{"uri":"/fr/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/fr/docs/Web/JavaScript/Reference","title":"Référence JavaScript"},{"uri":"/fr/docs/Web/JavaScript/Reference/Global_Objects","title":"Objets globaux"},{"uri":"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt","title":"BigInt"}],"pageTitle":"BigInt - JavaScript | MDN","noIndexing":false}}