{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Constructeur Function()","mdn_url":"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/Function","locale":"fr","native":"Français","sidebarHTML":"<ol><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects\">Objets standards</a></strong></li><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Propriétés</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function.prototype.prototype</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>Méthodes</strong></a><ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong>Héritage&nbsp;:</strong></li><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Propriétés</strong></a><ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Méthodes</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Le <strong>constructeur <code>Function()</code></strong> permet de créer un nouvel <strong>objet</strong> <code>Function</code>. Appeler le constructeur directement permet de créer des fonctions de façon dynamique, mais souffre des mêmes problèmes de sécurité et de performance, néanmoins dans une moindre mesure, que <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a>. Toutefois, à la différence de <code>eval()</code>, le constructeur <code>Function</code> crée des fonctions qui s'exécutent uniquement dans la portée locale.</p><iframe class=\"interactive\" height=\"410\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/function-constructor.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"syntaxe","title":"Syntaxe","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span>corpsFonction<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> corpsFonction<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> … argN<span class=\"token punctuation\">,</span> corpsFonction<span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"paramètres","title":"Paramètres","isH3":true,"content":"<dl>\n  <dt id=\"arg1_…_argn\"><code>arg1, … argN</code></dt>\n  <dd>\n    <p>Les noms à utiliser par la fonction comme noms formels d'arguments. Chacun doit être une chaîne de caractères qui correspond à un paramètre JavaScript valide (<a href=\"/fr/docs/Glossary/Identifier\">un identifiant</a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Functions/rest_parameters\">un paramètre du reste</a>, ou <a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">une décomposition en paramètres</a>, éventuellement avec une valeur par défaut), ou une liste de telles chaînes, séparées par des virgules.</p>\n    <p>Les paramètres étant analysés de la même façon que les déclarations de fonction, les espaces et les commentaires sont acceptés. Ainsi, on pourra écrire <code>\"x\", \"laValeur = 42\", \"[a, b] /* nombres */\"</code> — ou <code>\"x, laValeur = 42, [a, b] /* nombres */\"</code> (<code>\"x, laValeur = 42\", \"[a, b]\"</code> est également correct, mais porte plus à confusion.)</p>\n  </dd>\n  <dt id=\"corpsfonction\"><code>corpsFonction</code></dt>\n  <dd>\n    <p>Une chaîne de caractères contenant les instructions JavaScript qui forment la définition de la fonction.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"description","title":"Description","isH3":false,"content":"<p>Les objets <code>Function</code> créés avec le constructeur <code>Function()</code> sont analysés lors de la création de la fonction. Cette méthode est moins efficace que de déclarer une fonction en utilisant une <a href=\"/fr/docs/Web/JavaScript/Reference/Operators/function\">expression de fonction</a> ou <a href=\"/fr/docs/Web/JavaScript/Reference/Statements/function\">une instruction de fonction</a> pour l'appeler ensuite dans le code, car de telles fonctions sont analysées avec le reste du code.</p>\n<p>Tous les arguments passés à la fonction sont traités comme les noms des identifiants des paramètres de la fonction à créer, dans l'ordre selon lequel ils sont passés. Omettre un argument fera que la valeur de ce paramètre sera <code>undefined</code>.</p>\n<p>Appeler le constructeur <code>Function()</code> comme une fonction, c'est-à-dire sans utiliser l'opérateur <code>new</code>, aura le même effet que de l'utiliser comme un constructeur.</p>"}},{"type":"prose","value":{"id":"exemples","title":"Exemples","isH3":false,"content":""}},{"type":"prose","value":{"id":"définir_des_arguments_avec_le_constructeur_function","title":"Définir des arguments avec le constructeur <code>Function()</code>","isH3":true,"content":"<p>Le code qui suit crée un objet <code>Function</code> qui prend deux arguments.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Crée une fonction qui prend deux arguments et qui en renvoie la somme</span>\n<span class=\"token keyword\">const</span> additionneur <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'return a + b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Appeler la fonction</span>\n<span class=\"token function\">additionneur</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 8</span>\n</code></pre></div>\n<p>Les arguments <code>\"a\"</code> et <code>\"b\"</code> sont les noms formels des arguments utilisés dans le corps de la fonction&nbsp;: <code>\"return a + b\"</code>.</p>","titleAsText":"Définir des arguments avec le constructeur Function()"}},{"type":"prose","value":{"id":"créer_un_objet_function_avec_une_déclaration_ou_une_expression_de_fonction","title":"Créer un objet <code>Function</code> avec une déclaration ou une expression de fonction","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Le constructeur Function() peut prendre plusieurs instructions séparées par des points-virgules.</span>\n<span class=\"token comment\">// Une expression de fonction doit contenir une instruction return avec le nom de la fonction.</span>\n\n<span class=\"token comment\">// On peut voir ici que le résultat de new Function est appelé.</span>\n<span class=\"token comment\">// Ainsi, on peut invoquer juste après la fonction qui vient d'être créée.</span>\n<span class=\"token keyword\">const</span> sommeTableau <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'const sommeTableau = (arr) =&gt; arr.reduce((precedente, courante) =&gt; precedente + courante); return sommeTableau'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// On appelle la fonction</span>\n<span class=\"token function\">sommeTableau</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 10</span>\n\n<span class=\"token comment\">// Si on n'appelle pas new Function au moment de la création,</span>\n<span class=\"token comment\">// on peut toujours utiliser la méthode Function.call() ensuite</span>\n<span class=\"token keyword\">const</span> plusGrandNombre <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'function plusGrandNombre (arr) { return Math.max(...arr) }; return plusGrandNombre'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// On appelle la fonction</span>\n<span class=\"token function\">plusGrandNombre</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 8</span>\n\n<span class=\"token comment\">// Une déclaration de fonction ne nécessite pas d'instruction return</span>\n<span class=\"token keyword\">const</span> direCoucou <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'return function (nom) { return `Coucou, ${nom}` }'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// On appelle la fonction</span>\n<span class=\"token function\">direCoucou</span><span class=\"token punctuation\">(</span><span class=\"token string\">'monde'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Coucou, monde</span>\n</code></pre></div>","titleAsText":"Créer un objet Function avec une déclaration ou une expression de fonction"}},{"type":"specifications","value":{"title":"Spécifications","id":"spécifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-function-constructor","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Function.Function"}},{"type":"browser_compatibility","value":{"title":"Compatibilité des navigateurs","id":"compatibilité_des_navigateurs","isH3":false,"query":"javascript.builtins.Function.Function","dataURL":"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/Function/bcd.json"}},{"type":"prose","value":{"id":"voir_aussi","title":"Voir aussi","isH3":false,"content":"<ul>\n  <li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions\">Fonctions et portées</a></li>\n  <li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/function\">Instruction <code>function</code></a></li>\n  <li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/function\">Expression <code>function</code></a></li>\n  <li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/function*\">Instruction <code>function*</code></a></li>\n  <li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/function*\">Expression <code>function*</code></a></li>\n  <li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\"><code>AsyncFunction</code></a></li>\n  <li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\"><code>GeneratorFunction</code></a></li>\n</ul>"}}],"toc":[{"text":"Syntaxe","id":"syntaxe"},{"text":"Description","id":"description"},{"text":"Exemples","id":"exemples"},{"text":"Spécifications","id":"spécifications"},{"text":"Compatibilité des navigateurs","id":"compatibilité_des_navigateurs"},{"text":"Voir aussi","id":"voir_aussi"}],"summary":"Le constructeur Function() permet de créer un nouvel objet Function. Appeler le constructeur directement permet de créer des fonctions de façon dynamique, mais souffre des mêmes problèmes de sécurité et de performance, néanmoins dans une moindre mesure, que eval(). Toutefois, à la différence de eval(), le constructeur Function crée des fonctions qui s'exécutent uniquement dans la portée locale.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Function() constructor","locale":"en-US","native":"English (US)"},{"title":"Function() constructor","locale":"es","native":"Español"},{"title":"Function() コンストラクター","locale":"ja","native":"日本語"},{"title":"Конструктор Function()","locale":"ru","native":"Русский"}],"source":{"folder":"fr/web/javascript/reference/global_objects/function/function","github_url":"https://github.com/mdn/translated-content/blob/main/files/fr/web/javascript/reference/global_objects/function/function/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/fr/docs/Web","title":"Technologies web pour développeurs"},{"uri":"/fr/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/fr/docs/Web/JavaScript/Reference","title":"Référence JavaScript"},{"uri":"/fr/docs/Web/JavaScript/Reference/Global_Objects","title":"Objets globaux"},{"uri":"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function","title":"Function"},{"uri":"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/Function","title":"Constructeur Function()"}],"pageTitle":"Constructeur Function() - JavaScript | MDN","noIndexing":false}}