{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Set","mdn_url":"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set","locale":"fr","native":"Français","sidebarHTML":"<ol><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects\">Objets standards</a></strong></li><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Propriétés</strong></a><ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/@@species\"><code>get Set[@@species]</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/size\"><code>Set.prototype.size</code></a></li></ol></li><li data-default-state=\"open\"><a href=\"#\"><strong>Méthodes</strong></a><ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator\"><code>Set.prototype[@@iterator]()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/add\"><code>Set.prototype.add()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/clear\"><code>Set.prototype.clear()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/delete\"><code>Set.prototype.delete()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/entries\"><code>Set.prototype.entries()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach\"><code>Set.prototype.forEach()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/has\"><code>Set.prototype.has()</code></a></li><li><a class=\"only-in-en-us\" title=\"Currently only available in English (US)\" href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/keys\"><code>Set.prototype.keys()</code> <small>(en-US)</small></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/values\"><code>Set.prototype.values()</code></a></li></ol></li><li><strong>Héritage&nbsp;:</strong></li><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a></strong></li><li><a href=\"#\"><strong>Propriétés</strong></a><ol><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\"><code>Function.prototype.arguments</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.prototype.caller</code></a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\"><code>Function.prototype.displayName</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/length\"><code>Function.prototype.length</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/name\"><code>Function.prototype.name</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function.prototype.prototype</code></a></li></ol></li><li><a href=\"#\"><strong>Méthodes</strong></a><ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Function.prototype.apply()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>Function.prototype.call()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\"><code>Function.prototype.toString()</code></a></li></ol></li><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Propriétés</strong></a><ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Méthodes</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>Un objet <strong><code>Set</code></strong> permet de stocker un ensemble de valeurs uniques de n'importe quel type, qu'il s'agisse de <a href=\"/fr/docs/Glossary/Primitive\">valeurs primitives</a> ou d'objets.</p>"}},{"type":"prose","value":{"id":"description","title":"Description","isH3":false,"content":"<p>Les objets <code>Set</code> sont des ensembles de valeurs. Il est possible d'itérer sur les éléments contenus dans l'objet <code>Set</code> dans leur ordre d'insertion. <strong>Une valeur donnée ne peut apparaître qu'une seule fois par <code>Set</code></strong>, elle y est unique.</p>"}},{"type":"prose","value":{"id":"égalité_des_valeurs","title":"Égalité des valeurs","isH3":true,"content":"<p>Chaque valeur d'un <code>Set</code> doit être unique, il faut donc tester l'égalité des valeurs contenues. Dans une version antérieure de la spécification ECMAScript, cette égalité n'était pas la même que celle de l'opérateur <code>===</code>. Notamment, pour les objets <code>Set</code>, <code>+0</code> (qui, selon l'égalité stricte, est égal à <code>-0</code>) et <code>-0</code> étaient des valeurs différentes. Cela a toutefois été changé avec la dernière version d'ECMAScript 2015 (ES6). Voir <a href=\"#compatibilit%C3%A9_des_navigateurs\">le tableau de compatibilité</a> ci-après quant à la prise en charge de l'égalité des clés pour <code>0</code> et <code>-0</code>.</p>\n<p><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> et <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> peuvent être enregistrés dans un objet <code>Set</code>. <code>NaN</code> est considéré comme <code>NaN</code> (bien que <code>NaN !== NaN</code>).</p>"}},{"type":"prose","value":{"id":"performance","title":"Performance","isH3":true,"content":"<p><code>Set</code> dispose d'une méthode <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/has\"><code>has()</code></a> qui permet de vérifier si une valeur est contenue dans l'objet <code>Set</code> et qui utilise une approche qui est, en moyenne, plus rapide que de tester les éléments qui ont été précédemment ajoutés à <code>Set</code>. Cette méthode est, en moyenne, plus rapide que la méthode <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>Array.prototype.includes()</code></a> qui s'applique aux objets <code>Array</code> lorsque la longueur (<code>length</code>) du tableau est égale à celle de l'objet <code>Set</code> (<code>size</code>).</p>"}},{"type":"prose","value":{"id":"constructeur","title":"Constructeur","isH3":false,"content":"<dl>\n  <dt id=\"set\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/Set\"><code>Set()</code></a></dt>\n  <dd>\n    <p>Crée un nouvel objet <code>Set</code>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"propriétés_statiques","title":"Propriétés statiques","isH3":false,"content":"<dl>\n  <dt id=\"get_setspecies\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/@@species\"><code>get Set[@@species]</code></a></dt>\n  <dd>\n    <p>La fonction de construction utilisée pour créer des objets dérivés.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"propriétés_des_instances","title":"Propriétés des instances","isH3":false,"content":"<dl>\n  <dt id=\"set.prototype.size\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/size\"><code>Set.prototype.size</code></a></dt>\n  <dd>\n    <p>Renvoie le nombre de valeurs contenues dans l'objet <code>Set</code>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"méthodes_des_instances","title":"Méthodes des instances","isH3":false,"content":"<dl>\n  <dt id=\"set.prototype.addvaleur\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/add\"><code>Set.prototype.add(<var>valeur</var>)</code></a></dt>\n  <dd>\n    <p>Ajoute une valeur à l'objet <code>Set</code> et renvoie l'objet <code>Set</code> avec la valeur ajoutée.</p>\n  </dd>\n  <dt id=\"set.prototype.clear\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/clear\"><code>Set.prototype.clear()</code></a></dt>\n  <dd>\n    <p>Supprime tous les éléments de l'objet <code>Set</code>.</p>\n  </dd>\n  <dt id=\"set.prototype.deletevaleur\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/delete\"><code>Set.prototype.delete(<var>valeur</var>)</code></a></dt>\n  <dd>\n    <p>Supprime l'élément associé à la valeur en argument et renvoie un booléen indiquant si l'élément a été retiré avec succès. Par la suite, <code>Set.prototype.has(valeur)</code> renverra <code>false</code>.</p>\n  </dd>\n  <dt id=\"set.prototype.hasvaleur\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/has\"><code>Set.prototype.has(<var>valeur</var>)</code></a></dt>\n  <dd>\n    <p>Renvoie un booléen indiquant si la valeur fournie en argument est présente dans l'ensemble représenté par l'objet <code>Set</code>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"méthodes_ditération","title":"Méthodes d'itération","isH3":true,"content":"<dl>\n  <dt id=\"set.prototypeiterator\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator\"><code>Set.prototype[@@iterator]()</code></a></dt>\n  <dd>\n    <p>Renvoie un nouvel itérateur fournissant les <strong>valeurs</strong> de chaque élément de l'objet <code>Set</code>, selon leur ordre d'insertion.</p>\n  </dd>\n  <dt id=\"set.prototype.values\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/values\"><code>Set.prototype.values()</code></a></dt>\n  <dd>\n    <p>Renvoie un nouvel itérateur fournissant les <strong>valeurs</strong> de chaque élément de l'objet <code>Set</code>, selon leur ordre d'insertion.</p>\n  </dd>\n  <dt id=\"set.prototype.keys\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/values\"><code>Set.prototype.keys()</code></a></dt>\n  <dd>\n    <p>Un alias pour <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/values\"><code>Set.prototype.values()</code></a>.</p>\n  </dd>\n  <dt id=\"set.prototype.entries\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/entries\"><code>Set.prototype.entries()</code></a></dt>\n  <dd>\n    <p>Renvoie un nouvel objet itérateur qui contient <strong>un tableau <code>[valeur, valeur]</code></strong> pour chaque élément de l'objet <code>Set</code>, selon leur ordre d'insertion.</p>\n    <p>Il s'agit d'une méthode analogue à celle disponible pour <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a>, c'est pour ça qu'on a le doublonnement de la valeur à la place de la clé.</p>\n  </dd>\n  <dt id=\"set.prototype.foreachfnrappel_thisarg\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach\"><code>Set.prototype.forEach(<var>fnRappel</var>[, <var>thisArg</var>])</code></a></dt>\n  <dd>\n    <p>Appelle la fonction <code>fnRappel</code> une fois pour chaque valeur présente dans l'objet <code>Set</code>, selon leur ordre d'insertion. Si le paramètre <code>thisArg</code> est fourni, sa valeur sera utilisée comme valeur pour <code>this</code> pour chaque appel de <code>fnRappel</code>.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"exemples","title":"Exemples","isH3":false,"content":""}},{"type":"prose","value":{"id":"utiliser_lobjet_set","title":"Utiliser l'objet <code>Set</code>","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> monSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmonSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// { 1 }</span>\nmonSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// { 1, 5 }</span>\nmonSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// { 1, 5 }</span>\nmonSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'du texte'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { 1, 5, 'du texte' }</span>\n\n<span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmonSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmonSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// o fait référence à un objet différent</span>\n<span class=\"token comment\">// il n'y a pas de problème pour cet ajout</span>\n\nmonSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nmonSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false, 3 n'a pas été ajouté à l'ensemble</span>\nmonSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// true</span>\nmonSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true</span>\nmonSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Du Texte'</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nmonSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\nmonSet<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n\nmonSet<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retire 5 du set</span>\nmonSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// false, 5 a été retiré de l'ensemble</span>\n\nmonSet<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4, on a retiré une valeur de l'ensemble</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>monSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// affiche Set(4) [ 1, \"du texte\", {…}, {…} ] pour Firefox</span>\n<span class=\"token comment\">// affiche Set(4) { 1, \"du texte\", {…}, {…} } pour Chrome</span>\n</code></pre></div>","titleAsText":"Utiliser l'objet Set"}},{"type":"prose","value":{"id":"itérer_sur_des_ensembles","title":"Itérer sur des ensembles","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// On itère sur les différents éléments de l'ensemble</span>\n<span class=\"token comment\">// ici on affiche : 1, \"du texte\", {\"a\": 1, \"b\": 2}, {\"a\": 1, \"b\": 2}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> monSet<span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ici on affiche les clés de l'ensemble : 1, \"du texte\", {\"a\": 1, \"b\": 2}, {\"a\": 1, \"b\": 2}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> monSet<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ici on affiche les valeurs de l'ensemble : 1, \"du texte\", {\"a\": 1, \"b\": 2}, {\"a\": 1, \"b\": 2}</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> monSet<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ici on affiche les clés de l'ensemble : 1, \"du texte\", {\"a\": 1, \"b\": 2}, {\"a\": 1, \"b\": 2}</span>\n<span class=\"token comment\">// (ici, les clés et les valeurs sont les mêmes)</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>clé<span class=\"token punctuation\">,</span> valeur<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> monSet<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>clé<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Une méthode de conversion avec Array.from</span>\n<span class=\"token keyword\">const</span> monTableau <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>monSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// [1, \"du texte\", {\"a\": 1, \"b\": 2}, {\"a\": 1, \"b\": 2}]</span>\n\n<span class=\"token comment\">// Cela fonctionnera également dans un document HTML</span>\nmonSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmonSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// convertir un tableau (Array) en ensemble (Set) et vice versa</span>\n<span class=\"token keyword\">const</span> monSet2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmonSet2<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>monSet2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 3, 4]</span>\n\n<span class=\"token comment\">// L'intersection peut être calculée avec</span>\n<span class=\"token keyword\">const</span> intersection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>set1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=&gt;</span> set2<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// La différence pourra être simulée avec</span>\n<span class=\"token keyword\">const</span> différence <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>set1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">!</span>set2<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// On peut itérer sur les entrées d'un ensemble avec forEach</span>\nmySet<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// 4</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"implémenter_des_opérations_ensemblistes","title":"Implémenter des opérations ensemblistes","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">isSuperset</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">set<span class=\"token punctuation\">,</span> subset</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> elem <span class=\"token keyword\">of</span> subset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">setA<span class=\"token punctuation\">,</span> setB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> _union <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> elem <span class=\"token keyword\">of</span> setB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    _union<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> _union<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">intersection</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">setA<span class=\"token punctuation\">,</span> setB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> _intersection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> elem <span class=\"token keyword\">of</span> setB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      _intersection<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> _intersection<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">symmetricDifference</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">setA<span class=\"token punctuation\">,</span> setB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> _difference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> elem <span class=\"token keyword\">of</span> setB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_difference<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      _difference<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      _difference<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> _difference<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">difference</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">setA<span class=\"token punctuation\">,</span> setB</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> _difference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> elem <span class=\"token keyword\">of</span> setB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    _difference<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> _difference<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Exemples</span>\n<span class=\"token keyword\">const</span> setA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> setB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> setC <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">isSuperset</span><span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">,</span> setB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// =&gt; true</span>\n<span class=\"token function\">union</span><span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">,</span> setC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// =&gt; Set [1, 2, 3, 4, 5, 6]</span>\n<span class=\"token function\">intersection</span><span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">,</span> setC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// =&gt; Set [3, 4]</span>\n<span class=\"token function\">symmetricDifference</span><span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">,</span> setC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// =&gt; Set {1, 2, 5, 6}</span>\n<span class=\"token function\">difference</span><span class=\"token punctuation\">(</span>setA<span class=\"token punctuation\">,</span> setC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// =&gt; Set [1, 2]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"relations_avec_les_objets_array","title":"Relations avec les objets <code>Array</code>","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> monTableau <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"valeur1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"valeur2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"valeur3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// On peut utiliser le constructeur Set pour transformer</span>\n<span class=\"token comment\">// un Array en Set</span>\n<span class=\"token keyword\">let</span> monSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>monTableau<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmonSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'valeur1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// renvoie true</span>\n\n<span class=\"token comment\">// Et utiliser l'opérateur de décomposition pour </span>\n<span class=\"token comment\">// transformer un Set en Array.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>monSet<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// affichera la même chose que monTableau</span>\n</code></pre></div>","titleAsText":"Relations avec les objets Array"}},{"type":"prose","value":{"id":"dédoublonner_un_tableau","title":"Dédoublonner un tableau","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> nombres <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>nombres<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// affichera [2, 3, 4, 5, 6, 7, 32]</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"les_relations_avec_les_objets_string","title":"Les relations avec les objets <code>String</code>","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> texte <span class=\"token operator\">=</span> <span class=\"token string\">'India'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> monSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>texte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Set(5) {'I', 'n', 'd', 'i', 'a'}</span>\n\nmonSet<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 5</span>\n\n<span class=\"token comment\">// Sensibilité à la casse</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Firefox'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Set(7) { \"F\", \"i\", \"r\", \"e\", \"f\", \"o\", \"x\" }</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'firefox'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Set(6) { \"f\", \"i\", \"r\", \"e\", \"o\", \"x\" }</span>\n</code></pre></div>","titleAsText":"Les relations avec les objets String"}},{"type":"prose","value":{"id":"utilisation_de_set_pour_vérifier_lunicité_des_valeurs_dune_liste","title":"Utilisation de <code>Set</code> pour vérifier l'unicité des valeurs d'une liste","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> tableau <span class=\"token operator\">=</span> Array\n  <span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[id]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>tableau<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> tableau<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","titleAsText":"Utilisation de Set pour vérifier l'unicité des valeurs d'une liste"}},{"type":"specifications","value":{"title":"Spécifications","id":"spécifications","isH3":false,"specifications":[{"bcdSpecificationURL":"https://tc39.es/ecma262/multipage/keyed-collections.html#sec-set-objects","title":"ECMAScript Language Specification"}],"query":"javascript.builtins.Set"}},{"type":"browser_compatibility","value":{"title":"Compatibilité des navigateurs","id":"compatibilité_des_navigateurs","isH3":false,"query":"javascript.builtins.Set","dataURL":"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set/bcd.json"}},{"type":"prose","value":{"id":"voir_aussi","title":"Voir aussi","isH3":false,"content":"<ul>\n  <li><a href=\"https://github.com/zloirock/core-js#set\" class=\"external\" rel=\" noopener\">Une prothèse d'émulation pour <code>Set</code> avec la bibliothèque <code>core-js</code></a></li>\n  <li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a></li>\n  <li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\"><code>WeakMap</code></a></li>\n  <li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\"><code>WeakSet</code></a></li>\n</ul>"}}],"toc":[{"text":"Description","id":"description"},{"text":"Constructeur","id":"constructeur"},{"text":"Propriétés statiques","id":"propriétés_statiques"},{"text":"Propriétés des instances","id":"propriétés_des_instances"},{"text":"Méthodes des instances","id":"méthodes_des_instances"},{"text":"Exemples","id":"exemples"},{"text":"Spécifications","id":"spécifications"},{"text":"Compatibilité des navigateurs","id":"compatibilité_des_navigateurs"},{"text":"Voir aussi","id":"voir_aussi"}],"summary":"Un objet Set permet de stocker un ensemble de valeurs uniques de n'importe quel type, qu'il s'agisse de valeurs primitives ou d'objets.","popularity":0.0017,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Set","locale":"en-US","native":"English (US)"},{"title":"Set","locale":"es","native":"Español"},{"title":"Set","locale":"ja","native":"日本語"},{"title":"Set","locale":"ko","native":"한국어"},{"title":"Set","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Set","locale":"ru","native":"Русский"},{"title":"Set","locale":"zh-CN","native":"中文 (简体)"},{"title":"Set","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"fr/web/javascript/reference/global_objects/set","github_url":"https://github.com/mdn/translated-content/blob/main/files/fr/web/javascript/reference/global_objects/set/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/fr/docs/Web","title":"Technologies web pour développeurs"},{"uri":"/fr/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/fr/docs/Web/JavaScript/Reference","title":"Référence JavaScript"},{"uri":"/fr/docs/Web/JavaScript/Reference/Global_Objects","title":"Objets globaux"},{"uri":"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set","title":"Set"}],"pageTitle":"Set - JavaScript | MDN","noIndexing":false}}