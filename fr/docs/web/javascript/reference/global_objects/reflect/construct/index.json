{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Reflect.construct()","mdn_url":"/fr/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct","locale":"fr","native":"Français","sidebarHTML":"<ol><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects\">Objets standards</a></strong></li><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Reflect\"><code>Reflect</code></a></strong></li><li data-default-state=\"open\"><a href=\"#\"><strong>Méthodes</strong></a><ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply\"><code>Reflect.apply()</code></a></li><li><em><code>Reflect.construct()</code></em></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty\"><code>Reflect.defineProperty()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty\"><code>Reflect.deleteProperty()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Reflect/get\"><code>Reflect.get()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor\"><code>Reflect.getOwnPropertyDescriptor()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getPrototypeOf\"><code>Reflect.getPrototypeOf()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Reflect/has\"><code>Reflect.has()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible\"><code>Reflect.isExtensible()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys\"><code>Reflect.ownKeys()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Reflect/preventExtensions\"><code>Reflect.preventExtensions()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set\"><code>Reflect.set()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf\"><code>Reflect.setPrototypeOf()</code></a></li></ol></li><li><strong>Héritage&nbsp;:</strong></li><li><strong><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a></strong></li><li><a href=\"#\"><strong>Propriétés</strong></a><ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\"><code>Object.prototype.constructor</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\"><code>Object.prototype.__proto__</code></a></li></ol></li><li><a href=\"#\"><strong>Méthodes</strong></a><ol><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\"><code>Object.prototype.__defineGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\"><code>Object.prototype.__defineSetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\"><code>Object.prototype.__lookupGetter__()</code></a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\"><code>Object.prototype.__lookupSetter__()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object.prototype.hasOwnProperty()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\"><code>Object.prototype.isPrototypeOf()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\"><code>Object.prototype.propertyIsEnumerable()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\"><code>Object.prototype.toLocaleString()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\"><code>Object.prototype.valueOf()</code></a></li></ol></li></ol>","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>La méthode statique <strong><code>Reflect.construct()</code></strong> agit comme l'opérateur <a href=\"/fr/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code></a> sous la forme d'une fonction. Elle est équivalente à <code>new cible(...args)</code> et permet d'indiquer un prototype différent.</p><iframe class=\"interactive\" height=\"490\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/reflect-construct.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\"></iframe>"}},{"type":"prose","value":{"id":"syntaxe","title":"Syntaxe","isH3":false,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>cible<span class=\"token punctuation\">,</span> listeArguments<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> newCible<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"paramètres","title":"Paramètres","isH3":true,"content":"<dl>\n  <dt id=\"cible\"><code>cible</code></dt>\n  <dd>\n    <p>La fonction cible à appeler.</p>\n  </dd>\n  <dt id=\"listearguments\"><code>listeArguments</code></dt>\n  <dd>\n    <p>Un objet semblable à un tableau définissant les arguments à passer à <code>cible</code> lors de l'appel.</p>\n  </dd>\n  <dt id=\"newcible\"><code>newCible</code> <span class=\"badge inline optional\">Facultatif</span></dt>\n  <dd>\n    <p>Le constructeur dont le prototype devrait être utilisé. Voir également l'opérateur <a href=\"/fr/docs/Web/JavaScript/Reference/Operators/new.target\"><code>new.target</code></a>. Si <code>newCible</code> n'est pas présent, c'est <code>cible</code> qui sera utilisé.</p>\n  </dd>\n</dl>"}},{"type":"prose","value":{"id":"valeur_de_retour","title":"Valeur de retour","isH3":true,"content":"<p>Un nouvelle instance de la cible indiquée, créée en l'appelant comme un constructeur (ou en appelant <code>newCible</code> si elle est fournie) avec les arguments fournis.</p>"}},{"type":"prose","value":{"id":"exceptions_levées","title":"Exceptions levées","isH3":true,"content":"<p>Une exception <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> si <code>cible</code> ou <code>newCible</code> ne sont pas des constructeurs.</p>"}},{"type":"prose","value":{"id":"description","title":"Description","isH3":false,"content":"<p><code>Reflect.construct()</code> permet d'appeler un constructeur avec un nombre d'arguments variable (ce qui peut également être fait avec <a href=\"/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateur_de_d%C3%A9composition\" class=\"page-not-created\" title=\"This is a link to an unwritten page\">l'opérateur de décomposition</a> et l'opérateur <a href=\"/fr/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code></a>).</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Toto</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>Toto<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>"}},{"type":"prose","value":{"id":"exemples","title":"Exemples","isH3":false,"content":""}},{"type":"prose","value":{"id":"utiliser_reflect.construct","title":"Utiliser <code>Reflect.construct()</code>","isH3":true,"content":"<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1776</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nd <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nd<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1776</span>\n</code></pre></div>","titleAsText":"Utiliser Reflect.construct()"}},{"type":"prose","value":{"id":"utiliser_le_paramètre_newcible","title":"Utiliser le paramètre <code>newCible</code>","isH3":true,"content":"<p>Pour plus d'informations sur la création de sous-classes, voir les <a href=\"/fr/docs/Web/JavaScript/Reference/Classes\">classes</a> et l'opérateur <a href=\"/fr/docs/Web/JavaScript/Reference/Operators/new.target\"><code>new.target</code></a>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">unConstructeur</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> résultat <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> unConstructeur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nReflect<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>résultat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// unConstructeur.prototype</span>\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>résultat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>","titleAsText":"Utiliser le paramètre newCible"}},{"type":"prose","value":{"id":"une_comparaison_entre_reflect.construct_et_object.create","title":"Une comparaison entre <code>Reflect.construct()</code> et <code>Object.create()</code>","isH3":true,"content":"<p>Avant l'apparition de <code>Reflect</code>, on pouvait construire des objets avec une combinaison donnée de consttructeur et de prototype grâce à <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">MaClasseA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MaClasseB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Avec cette instruction :</span>\n<span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>MaClasseA<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> MaClasseB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// on aura le même résultat qu'avec</span>\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MaClasseB</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">MaClasseA</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'A'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'A'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MaClasseA</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MaClasseA</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MaClasseB</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MaClasseB</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>Toutefois, si les résultats sont identiques, il y a une différence notable. Lorsqu'on utilise <code>Object.create()</code> et <code>Function.prototype.apply()</code>, l'opérateur <code>new.target</code> pointe vers <code>undefined</code> dans la fonction utilisée comme constructeur car le mot-clé <code>new</code> n'est pas utilisé à la création de l'objet.</p>\n<p>Mais quand on appelle <code>Reflect.construct()</code>, <code>new.target</code> pointe vers la valeur fournie par <code>newCible</code> si ce dernier est fourni ou vers <code>cible</code> sinon.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">MaClasseA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MaClasseA'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">MaClasseB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MaClasseB'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>MaClasseA<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Résultat :</span>\n<span class=\"token comment\">//   MaClasseA</span>\n<span class=\"token comment\">//   function MaClasseA { ... }</span>\n\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>MaClasseA<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> MaClasseB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Résultat :</span>\n<span class=\"token comment\">//   MaClasseA</span>\n<span class=\"token comment\">//   function MaClasseB { ... }</span>\n\n<span class=\"token keyword\">var</span> obj3 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MaClasseB</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">MaClasseA</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj3<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Résultat :</span>\n<span class=\"token comment\">//     MaClasseA</span>\n<span class=\"token comment\">//     undefined</span>\n</code></pre></div>","titleAsText":"Une comparaison entre Reflect.construct() et Object.create()"}},{"type":"prose","value":{"id":"spécifications","title":"Spécifications","isH3":false,"content":"<table>\n  <thead>\n    <tr>\n      <th>Spécification</th>\n      <th>État</th>\n      <th>Commentaires</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://www.ecma-international.org/ecma-262/6.0/#sec-reflect.construct\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">ECMAScript 2015 (6th Edition, ECMA-262)<br><small lang=\"fr\">La définition de 'Reflect.construct' dans cette spécification.</small></a></td>\n      <td><span class=\"spec-standard\">Standard</span></td>\n      <td>Définition initiale.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://tc39.es/ecma262/#sec-reflect.construct\" hreflang=\"en\" lang=\"en\" class=\"external\" rel=\" noopener\">ECMAScript (ECMA-262)<br><small lang=\"fr\">La définition de 'Reflect.construct' dans cette spécification.</small></a></td>\n      <td><span class=\"spec-living\">Standard évolutif</span></td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"browser_compatibility","value":{"title":"Compatibilité des navigateurs","id":"compatibilité_des_navigateurs","isH3":false,"query":"javascript.builtins.Reflect.construct","dataURL":"/fr/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct/bcd.json"}},{"type":"prose","value":{"id":"voir_aussi","title":"Voir aussi","isH3":false,"content":"<ul>\n  <li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Reflect\"><code>Reflect</code></a></li>\n  <li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/new\"><code>new</code></a></li>\n  <li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/new.target\"><code>new.target</code></a></li>\n</ul>"}}],"toc":[{"text":"Syntaxe","id":"syntaxe"},{"text":"Description","id":"description"},{"text":"Exemples","id":"exemples"},{"text":"Spécifications","id":"spécifications"},{"text":"Compatibilité des navigateurs","id":"compatibilité_des_navigateurs"},{"text":"Voir aussi","id":"voir_aussi"}],"summary":"La méthode statique Reflect.construct() agit comme l'opérateur new sous la forme d'une fonction. Elle est équivalente à new cible(...args) et permet d'indiquer un prototype différent.","popularity":0,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Reflect.construct()","locale":"en-US","native":"English (US)"},{"title":"Reflect.construct()","locale":"ja","native":"日本語"},{"title":"Reflect.construct()","locale":"ko","native":"한국어"},{"title":"Reflect.construct()","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Reflect.construct()","locale":"ru","native":"Русский"},{"title":"Reflect.construct()","locale":"zh-CN","native":"中文 (简体)"}],"source":{"folder":"fr/web/javascript/reference/global_objects/reflect/construct","github_url":"https://github.com/mdn/translated-content/blob/main/files/fr/web/javascript/reference/global_objects/reflect/construct/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/fr/docs/Web","title":"Technologies web pour développeurs"},{"uri":"/fr/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/fr/docs/Web/JavaScript/Reference","title":"Référence JavaScript"},{"uri":"/fr/docs/Web/JavaScript/Reference/Global_Objects","title":"Objets globaux"},{"uri":"/fr/docs/Web/JavaScript/Reference/Global_Objects/Reflect","title":"Reflect"},{"uri":"/fr/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct","title":"Reflect.construct()"}],"pageTitle":"Reflect.construct() - JavaScript | MDN","noIndexing":false}}