{"doc":{"isMarkdown":true,"isTranslated":true,"isActive":true,"flaws":{},"title":"Utiliser les différents tests d'égalité","mdn_url":"/fr/docs/Web/JavaScript/Equality_comparisons_and_sameness","locale":"fr","native":"Français","sidebarHTML":"\n <ol>\n  <li><a href=\"/fr/docs/Web/JavaScript\"><strong><em>JavaScript</em></strong></a></li>\n  <li><a href=\"/fr/docs/Web/JavaScript/Tutorials\"><strong>Tutoriel&nbsp;:</strong></a></li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Débutant</summary>\n      <ol>\n        <li><a href=\"/fr/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">Les bases en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Learn/JavaScript/First_steps\">Premiers pas en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Learn/JavaScript/Building_blocks\">Les briques JavaScript</a></li>\n        <li><a href=\"/fr/docs/Learn/JavaScript/Objects\">Introducing JavaScript objects</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Guide JavaScript</summary>\n      <ol>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Introduction\">Introduction</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Grammar_and_Types\">Types et grammaire</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\">Contrôle du flux et gestion des erreurs</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Loops_and_iteration\">Boucles et itération</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Functions\">Fonctions</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Expressions_and_Operators\">Expressions et opérateurs</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Numbers_and_dates\">Nombres et dates</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Text_formatting\">Formatage du texte</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Regular_Expressions\">Expressions rationnelles</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Indexed_collections\">Collections indexées</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Keyed_collections\">Collections avec clés</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Working_with_Objects\">Manipuler les objets</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\">Détails du modèle objet</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Using_promises\">Using promises</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Iterators_and_generators\">Itérateurs et générateurs</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Meta_programming\">Meta-programmation</a></li>\n          <li><a href=\"/fr/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a></li>\n        </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details open=\"\">\n      <summary>Intermédiaire</summary>\n      <ol>\n        <li><a href=\"/fr/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks\">Client-side JavaScript frameworks</a></li>\n        <li><a href=\"/fr/docs/Learn/JavaScript/Client-side_web_APIs\">Client-side web APIs</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">Réintroduction à JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Data_structures\">Structures de données en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Différents tests d'égalité</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Closures\">Closures</a></li>\n      </ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Avancé</summary>\n      <ol>\n        <li><a href=\"/fr/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Héritage et la chaîne de prototypes</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Strict_mode\">Mode strict</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Typed_arrays\">Tableaux typés en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Memory_Management\">Gestion de la mémoire</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/EventLoop\">Concurrence et boucle des événements</a></li>\n      </ol>\n    </details>\n  </li>\n  <li><strong><a href=\"/fr/docs/Web/JavaScript/Reference\">Références&nbsp;:</a></strong></li>\n  <li class=\"toggle\">\n    <details>\n       <summary>Objets natifs</summary>\n        <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\">AggregateError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\">AsyncFunction</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator\">AsyncGenerator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction\">AsyncGeneratorFunction</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Atomics\">Atomics</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array\">BigInt64Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array\">BigUint64Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/DataView\">DataView</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\">decodeURI()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/escape\">escape()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\">FinalizationRegistry</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\">Float32Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\">Float64Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Generator\">Generator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction\">GeneratorFunction</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\">Int16Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\">Int32Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\">Int8Array</a></li><li><svg class=\"icon icon-nonstandard\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-nonstandard\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/isFinite\">isFinite()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Math\">Math</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object\">Object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set\">Set</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Symbol\">Symbol</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">TypedArray</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\">Uint16Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\">Uint32Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\">Uint8Array</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\">Uint8ClampedArray</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/undefined\">undefined</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/unescape\">unescape()</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">WeakMap</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/WeakRef\">WeakRef</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\">WeakSet</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Expressions &amp; opérateurs</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Addition_assignment\">Addition assignment (+=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Addition\">Addition (+)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Assignment\">Assignment (=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/async_function*\">async function* expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/async_function\">async function expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/await\">await</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment\">Bitwise AND assignment (&amp;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_AND\">Bitwise AND (&amp;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\">Bitwise NOT (~)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment\">Bitwise OR assignment (|=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_OR\">Bitwise OR (|)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment\">Bitwise XOR assignment (^=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR\">Bitwise XOR (^)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/class\">class expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Comma_Operator\">Comma operator (,)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Decrement\">Decrement (--)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring assignment</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Division_assignment\">Division assignment (/=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Division\">Division (/)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Equality\">Equality (==)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment\">Exponentiation assignment (**=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Exponentiation\">Exponentiation (**)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/function*\">function* expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/function\">Function expression</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal\">Greater than or equal (&gt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Greater_than\">Greater than (&gt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Grouping\">Grouping operator ( )</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/import.meta\">import.meta</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/import\">import</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/in\">in operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Increment\">Increment (++)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Inequality\">Inequality (!=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/instanceof\">instanceof</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment\">Left shift assignment (&lt;&lt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Left_shift\">Left shift (&lt;&lt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal\">Less than or equal (&lt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Less_than\">Less than (&lt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">Logical AND assignment (&amp;&amp;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_AND\">Logical AND (&amp;&amp;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Logical nullish assignment (??=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">Logical OR assignment (||=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Logical_OR\">Logical OR (||)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment\">Multiplication assignment (*=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Multiplication\">Multiplication (*)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/new.target\">new.target</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/new\">new operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/null\">null</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\">Nullish coalescing operator (??)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Object_initializer\">Object initializer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">Operator precedence</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">Optional chaining (?.)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Property_Accessors\">Property accessors</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Remainder_assignment\">Remainder assignment (%=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Remainder\">Remainder (%)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment\">Right shift assignment (&gt;&gt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Right_shift\">Right shift (&gt;&gt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">Spread syntax (...)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Strict_equality\">Strict equality (===)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Strict_inequality\">Strict inequality (!==)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment\">Subtraction assignment (-=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Subtraction\">Subtraction (-)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/super\">super</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/this\">this</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/typeof\">typeof</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unary_negation\">Unary negation (-)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unary_plus\">Unary plus (+)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment\">Unsigned right shift assignment (&gt;&gt;&gt;=)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift\">Unsigned right shift (&gt;&gt;&gt;)</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/void\">void operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/yield*\">yield*</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Operators/yield\">yield</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Instructions &amp; déclarations</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/async_function*\">async function*</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/block\">block</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/break\">break</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/class\">class</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/const\">const</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/continue\">continue</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/debugger\">debugger</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/do...while\">do...while</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/Empty\">empty</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/export\">export</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/for...in\">for...in</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/for\">for</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/function*\">function*</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/if...else\">if...else</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/import\">import</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/label\">label</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/let\">let</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/return\">return</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/switch\">switch</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/throw\">throw</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/try...catch\">try...catch</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/var\">var</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/while\">while</a></li><li><svg class=\"icon icon-deprecated\" tabindex=\"0\">\n    <use xlink:href=\"/assets/badges.svg#icon-deprecated\"></use>\n</svg><a href=\"/fr/docs/Web/JavaScript/Reference/Statements/with\">with</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Fonctions</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/arguments\">The arguments object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow function expressions</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/get\">getter</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/Method_definitions\">Method definitions</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Functions/set\">setter</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Classes</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks\">Class static initialization blocks</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/constructor\">constructor</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/extends\">extends</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/Public_class_fields\">Public class fields</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Classes/static\">static</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Errors</summary>\n      <ol><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Already_has_pragma\">Warning: -file- is being assigned a //# sourceMappingURL, but already has one</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Array_sort_argument\">TypeError: invalid Array.prototype.sort argument</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Bad_octal\">Warning: 08/09 is not a legal ECMA-262 octal constant</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Bad_radix\">RangeError: radix must be an integer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Bad_regexp_flag\">SyntaxError: invalid regular expression flag \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Bad_return_or_yield\">SyntaxError: return not in function</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/BigInt_division_by_zero\">RangeError: BigInt division by zero</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/BigInt_negative_exponent\">RangeError: BigInt negative exponent</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Called_on_incompatible_type\">TypeError: X.prototype.y called on incompatible type</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_access_lexical_declaration_before_init\">ReferenceError: can't access lexical declaration 'X' before initialization</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_assign_to_property\">TypeError: can't assign to property \"x\" on \"y\": not an object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_be_converted_to_BigInt_because_it_isnt_an_integer\">RangeError: x can't be converted to BigInt because it isn't an integer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_convert_BigInt_to_number\">TypeError: can't convert BigInt to number</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_convert_x_to_BigInt\">TypeError: can't convert x to BigInt</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_define_property_object_not_extensible\">TypeError: can't define property \"x\": \"obj\" is not extensible</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_delete\">TypeError: property \"x\" is non-configurable and can't be deleted</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_redefine_property\">TypeError: can't redefine non-configurable property \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cant_use_nullish_coalescing_unparenthesized\">SyntaxError: cannot use `??` unparenthesized within `||` and `&amp;&amp;` expressions</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Cyclic_object_value\">TypeError: cyclic object value</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Dead_object\">TypeError: can't access dead object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Delete_in_strict_mode\">SyntaxError: applying the 'delete' operator to an unqualified name is deprecated</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_caller_or_arguments_usage\">ReferenceError: deprecated caller or arguments usage</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_expression_closures\">Warning: expression closures are deprecated</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_octal\">SyntaxError: \"0\"-prefixed octal literals and octal escape seq. are deprecated</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_source_map_pragma\">SyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# instead</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_String_generics\">Warning: String.x is deprecated; use String.prototype.x instead</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Deprecated_toLocaleFormat\">Warning: Date.prototype.toLocaleFormat is deprecated</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Equal_as_assign\">SyntaxError: test for equality (==) mistyped as assignment (=)?</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Getter_only\">TypeError: setting getter-only property \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Hash_outside_class\">SyntaxError: Unexpected '#' used outside of class body</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Identifier_after_number\">SyntaxError: identifier starts immediately after numeric literal</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Illegal_character\">SyntaxError: illegal character</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/in_operator_no_object\">TypeError: cannot use 'in' operator to search for 'x' in 'y'</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\">RangeError: invalid array length</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_assignment_left-hand_side\">SyntaxError: invalid assignment left-hand side</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_BigInt_syntax\">SyntaxError: invalid BigInt syntax</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\">TypeError: invalid assignment to const \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_date\">RangeError: invalid date</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_for-in_initializer\">SyntaxError: for-in loop head declarations may not have initializers</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Invalid_for-of_initializer\">SyntaxError: a declaration in the head of a for-of loop can't have an initializer</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/invalid_right_hand_side_instanceof_operand\">TypeError: invalid 'instanceof' operand 'x'</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/is_not_iterable\">TypeError: 'x' is not iterable</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/JSON_bad_parse\">SyntaxError: JSON.parse: bad parsing</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Malformed_formal_parameter\">SyntaxError: Malformed formal parameter</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Malformed_URI\">URIError: malformed URI sequence</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_bracket_after_list\">SyntaxError: missing ] after element list</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_colon_after_property_id\">SyntaxError: missing : after property id</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_function_body\">SyntaxError: missing } after function body</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_curly_after_property_list\">SyntaxError: missing } after property list</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_formal_parameter\">SyntaxError: missing formal parameter</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_initializer_in_const\">SyntaxError: missing = in const declaration</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_name_after_dot_operator\">SyntaxError: missing name after . operator</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\">SyntaxError: missing ) after argument list</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_condition\">SyntaxError: missing ) after condition</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Missing_semicolon_before_statement\">SyntaxError: missing ; before statement</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/More_arguments_needed\">TypeError: More arguments needed</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Negative_repetition_count\">RangeError: repeat count must be non-negative</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/No_non-null_object\">TypeError: \"x\" is not a non-null object</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/No_properties\">TypeError: \"x\" has no properties</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/No_variable_name\">SyntaxError: missing variable name</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Non_configurable_array_element\">TypeError: can't delete non-configurable array element</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Not_a_codepoint\">RangeError: argument is not a valid code point</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Not_a_constructor\">TypeError: \"x\" is not a constructor</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Not_a_function\">TypeError: \"x\" is not a function</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Not_defined\">ReferenceError: \"x\" is not defined</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Precision_range\">RangeError: precision is out of range</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Property_access_denied\">Error: Permission denied to access property \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Read-only\">TypeError: \"x\" is read-only</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Redeclared_parameter\">SyntaxError: redeclaration of formal parameter \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value\">TypeError: Reduce of empty array with no initial value</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Reserved_identifier\">SyntaxError: \"x\" is a reserved identifier</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Resulting_string_too_large\">RangeError: repeat count must be less than infinity</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Stmt_after_return\">Warning: unreachable code after return statement</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Strict_Non_Simple_Params\">SyntaxError: \"use strict\" not allowed in function with non-simple parameters</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Too_much_recursion\">InternalError: too much recursion</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Undeclared_var\">ReferenceError: assignment to undeclared variable \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Undefined_prop\">ReferenceError: reference to undefined property \"x\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unexpected_token\">SyntaxError: Unexpected token</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unexpected_type\">TypeError: \"x\" is (not) \"y\"</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unnamed_function_statement\">SyntaxError: function statement requires a name</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unparenthesized_unary_expr_lhs_exponentiation\">SyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'</a></li><li><a href=\"/fr/docs/Web/JavaScript/Reference/Errors/Unterminated_string_literal\">SyntaxError: unterminated string literal</a></li></ol>\n    </details>\n  </li>\n  <li class=\"toggle\">\n    <details>\n      <summary>Plus</summary>\n      <ol>\n        <li><a href=\"/fr/docs/Web/JavaScript/JavaScript_technologies_overview\">Aperçu des technologies JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Lexical_grammar\">Grammaire lexicale</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Data_structures\">Structures de données en JavaScript</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">Rattachement des propriétés</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Iteration_protocols\">Protocoles d'itération</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Strict_mode\">Mode strict</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Passer au mode strict</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Template_literals\">Gabarit de chaîne de caractère</a></li>\n        <li><a href=\"/fr/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\">Fonctionnalités dépréciées</a></li>\n      </ol>\n    </details>\n  </li>\n </ol>\n","body":[{"type":"prose","value":{"id":null,"title":null,"isH3":false,"content":"<p>JavaScript fournit trois opérations permettant de comparer des valeurs :</p>\n<ul>\n  <li>L'égalité stricte (ou identité ou « triple égal ») utilisant <a href=\"/fr/docs/Web/JavaScript/Reference/Operators#.c3.89galit.c3.a9_stricte_(.3d.3d.3d)\"><code>===</code></a>,</li>\n  <li>L'égalité faible (ou « double égal ») utilisant <a href=\"/fr/docs/Web/JavaScript/Reference/Operators#.c3.89galit.c3.a9_simple_(.3d.3d)\"><code>==</code></a>,</li>\n  <li><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is</code></a> (ajouté avec ECMAScript 2015).</li>\n</ul>\n<p>Ces trois opérations sont associées à quatre algorithmes d'égalité (depuis ES2015) :</p>\n<ul>\n  <li><a href=\"#faible\">La comparaison d'égalité abstraite (<code>==</code>)</a></li>\n  <li><a href=\"#stricte\">La comparaison d'égalité stricte (<code>===</code>)</a>\n    <ul>\n      <li>Utilisée par <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>Array.indexOf</code></a> et <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf\"><code>Array.lastIndexOf</code></a> et la sensibilité à la casse</li>\n    </ul>\n  </li>\n  <li><a href=\"#samevaluezero\"><em>SameValueZero</em> (l'égalité de valeurs nulles)</a>\n    <ul>\n      <li>Utilisée par les constructeurs <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> et <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> et par les opérations associées à <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> et <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a>. Depuis ES2016, cet algorithme est également utilisé par <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/String/includes\"><code>String.includes</code></a> et <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>Array.includes</code></a></li>\n    </ul>\n  </li>\n  <li><a href=\"#samevalue\"><em>SameValue</em> (l'égalité de valeurs)</a>\n    <ul>\n      <li>Utilisée partout ailleurs</li>\n    </ul>\n  </li>\n</ul>\n<p>Selon la comparaison qu'on souhaite effectuer, on choisira une de ces opérations.</p>\n<p>En résumé :</p>\n<ul>\n  <li>L'égalité faible (<code>==</code>) effectuera une conversion des deux éléments à comparer avant d'effectuer la comparaison</li>\n  <li>L'égalité stricte (<code>===</code>) effectuera la même comparaison mais sans conversion préalable (elle renverra toujours false si les types des deux valeurs comparées sont différents)</li>\n  <li>Enfin <code>Object.is()</code> se comportera comme l'égalité stricte sauf pour les valeurs <code>NaN</code>, <code>-0</code> et <code>+0</code> : pour <code>Object.is()</code>, <code>-0</code> et <code>+0</code> seront différents mais on aura <code>Object.is(NaN, NaN)</code> qui sera <code>true</code>. (Généralement, quand on compare <code>NaN</code> avec <code>NaN</code> en utilisant l'égalité stricte ou l'égalité faible, cela donne <code>false</code> afin de respecter la norme IEEE 754.)</li>\n</ul>\n<p>On notera que pour ces trois opérations, la comparaison s'effectue sur les valeurs des éléments qu'on compare, aucune de ces opérations ne permet de comparer la structure des paramètres. Pour des objets non primitifs, <code>x</code> et <code>y</code> qui ont la même structure mais qui sont des objets distincs, chacune des opérations présentées ci-avant sera évaluée à <code>false</code>.</p>"}},{"type":"prose","value":{"id":"légalité_stricte_avec_","title":"L'égalité stricte avec <code>===</code>","isH3":false,"content":"<p>L'égalité stricte compare deux valeurs et teste leur égalité. Aucune des valeurs n'est convertie implicitement en une autre valeur avant que la comparaison soit effectuée. Si les valeurs sont typées différemment, elles sont considérées comme différentes. Si les valeurs sont de même type et ne sont pas des nombres, elles sont considérées égales si elles ont la même valeur. Si les deux valeurs sont des nombres, elles sont égales si elles ont la même valeur et que cette valeur n'est pas NaN ou si l'une vaut +0 et l'autre -0.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">===</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">===</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">===</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">===</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">===</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">===</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>\n<p>Ce test d'égalité stricte est presque toujours la meilleure des opérations à considérer pour ces tests. Excepté pour les nombres, la sémantique utilisée est simple : une valeur est uniquement égale à elle-même. En ce qui concerne les nombres, il y a deux cas aux limites à considérer. Le premier cas concerne le nombre zéro positif ou négatif. Cela peut être utile dans la représentation de problèmes mathématiques mais ne constitue pas une différence pour de nombreuses situations : le test d'égalité stricte considère que ce sont les mêmes valeurs. Le second cas concerne la valeur « n'est pas un nombre », <code>NaN</code> (pour « not a number » en anglais) permettant de représenter certaines entités mathématiques : la somme des deux infinis (positif et négatif) par exemple. Le test d'égalité stricte considère que <code>NaN</code> est différent de toutes les valeurs, y compris lui-même. (N.B. : Le seul cas de figure pour lequel on a <code>(x !== x)</code> qui renvoie <code>true</code> est lorsque x vaut <code>NaN</code>.)</p>","titleAsText":"L'égalité stricte avec ==="}},{"type":"prose","value":{"id":"légalité_faible_avec_","title":"L'égalité faible avec <code>==</code>","isH3":false,"content":"<p>Le test d'égalité faible compare deux valeurs <em>après</em> les avoir converties en valeurs d'un même type. Une fois converties (la conversion peut s'effectuer pour l'une ou les deux valeurs), la comparaison finale est la même que celle effectuée par <code>===</code>. L'égalité faible est <em>symétrique</em> : <code>A == B</code> aura toujours la même signification que <code>B == A</code> pour toute valeur de A et B.</p>\n<p>La comparaison d'égalité est effectuée comme suit pour des opérandes de différents types :</p>\n<table class=\"standard-table\">\n  <thead>\n    <tr>\n      <th scope=\"row\"></th>\n      <th colspan=\"7\" scope=\"col\">Opérande B</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\"></th>\n      <td></td>\n      <td>Undefined</td>\n      <td>Null</td>\n      <td>Number</td>\n      <td>String</td>\n      <td>Boolean</td>\n      <td>Object</td>\n    </tr>\n    <tr>\n      <th colspan=\"1\" rowspan=\"6\" scope=\"row\">Opérande A</th>\n      <td>Undefined</td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n    </tr>\n    <tr>\n      <td>Null</td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n    </tr>\n    <tr>\n      <td>Number</td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>A === B</code></td>\n      <td><code>A === ToNumber(B)</code></td>\n      <td><code>A === ToNumber(B)</code></td>\n      <td><code>A == ToPrimitive(B)</code></td>\n    </tr>\n    <tr>\n      <td>String</td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>ToNumber(A) === B</code></td>\n      <td><code>A === B</code></td>\n      <td><code>ToNumber(A) === ToNumber(B)</code></td>\n      <td><code>A == ToPrimitive(B)</code></td>\n    </tr>\n    <tr>\n      <td>Boolean</td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>ToNumber(A) === B</code></td>\n      <td><code>ToNumber(A) === ToNumber(B)</code></td>\n      <td><code>A === B</code></td>\n      <td><code>false</code></td>\n    </tr>\n    <tr>\n      <td>Object</td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>ToPrimitive(A) == B</code></td>\n      <td><code>ToPrimitive(A) == B</code></td>\n      <td><code>ToPrimitive(A) == ToNumber(B)</code></td>\n      <td>\n        <p><code>A === B</code></p>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<p>Dans le tableau ci-dessus, l'expression <code>ToNumber(A)</code> correspond à une tentative de convertir l'argument en un nombre avant la comparaison. Le résultat obtenu est équivalent à <code>+A</code> (l'opérateur unaire +). <code>ToPrimitive(A)</code> correspond à une tentative de convertir l'argument en une valeur primitive grâce à plusieurs méthodes comme <code>A.toString</code> et <code>A.valueOf</code>.</p>\n<p>Selon ECMAScript, au sens de l'égalité faible, tous les objets sont différents de <code>undefined</code> et de <code>null</code>. Cependant, la plupart des navigateurs autorisent, dans certains contextes, unensemble restreint d'objets (notamment l'objet <code>document.all</code>), à agir comme s'ils émulaient la valeur <code>undefined</code>. L'égalité faible est un de ces contextes. Pour tous les autres cas, un objet ne sera jamais approximativement égal à <code>undefined</code> ou à <code>null</code>.</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">==</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">==</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">==</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// Les deux assertions qui suivent sont fausses</span>\n<span class=\"token comment\">// sauf dans certains cas exceptionnels</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Certains développeurs considèrent que ce n'est jamais une bonne idée d'utiliser l'égalilté faible. Le résultat d'une comparaison utilisant l'égalité stricte est plus simple à appréhender et à prédire, de plus il n'y a aucune conversion implicite ce qui rend le test plus rapide.</p>","titleAsText":"L'égalité faible avec =="}},{"type":"prose","value":{"id":"égalité_de_valeurs","title":"Égalité de valeurs","isH3":false,"content":"<p>L'égalité de valeurs répond à un dernier cas d'utilisation : savoir si deux valeurs sont fonctionnellement identiques pour tout contexte. (Ce cas d'utilisation est un exemple du <a href=\"https://fr.wikipedia.org/wiki/Principe_de_substitution_de_Liskov\" class=\"external\" rel=\" noopener\">principe de substitution de Liskov</a>). On retrouve ce cas lorsqu'on essaie de changer une propriété immuable :</p>\n<div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// Ajouter la propriété immuable NEGATIVE_ZERO au constructor Number.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">,</span> <span class=\"token string\">\"NEGATIVE_ZERO\"</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">attemptMutation</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">,</span> <span class=\"token string\">\"NEGATIVE_ZERO\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> v <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>Object.defineProperty</code> lancera une exception pour tout changement de la propriété qui serait réellement un changement. Rien ne se passera si aucun changement n'est nécessaire. Ainsi, si <code>v</code> vaut <code>-0</code>, aucun changement n'est nécessaire et il n'y aura pas d'erreur. Mais si <code>v</code> vaut <code>+0</code>, <code>Number.NEGATIVE_ZERO</code> n'aurait plus la même valeur immuable. De façon interne à l'implémentation, la nouvelle valeur est comparée avec la valeur courante en utilisant une égalité de valeurs.</p>\n<p>L'égalité de valeurs peut être testée grâce à la méthode <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is</code></a>.</p>"}},{"type":"prose","value":{"id":"égalité_de_valeurs_nulles","title":"Égalité de valeurs nulles","isH3":false,"content":"<p>On utilise la même égalité que l'égalité de valeur et on considère que <code>+0</code> et <code>-0</code> sont égaux.</p>"}},{"type":"prose","value":{"id":"égalité_abstraite_égalité_stricte_et_valeurs_identiques_la_spécification","title":"Égalité abstraite, égalité stricte et valeurs identiques : la spécification","isH3":false,"content":"<p>Selon ES5, la comparaison effectuée par <a href=\"/fr/docs/Web/JavaScript/Reference/Operators#.c3.89galit.c3.a9_simple_(.3d.3d)\"><code>==</code></a> est décrite dans <a href=\"https://ecma-international.org/ecma-262/5.1/#sec-11.9.3\" class=\"external\" rel=\" noopener\">la section 11.9.3 sur l'algorithme d'égalité abstraite (<em>Abstract Equality Algorithm</em>)</a>. La comparaison donnée par <a href=\"/fr/docs/Web/JavaScript/Reference/Operators#.c3.89galit.c3.a9_stricte_(.3d.3d.3d)\"><code>===</code></a> est décrite dans <a href=\"https://ecma-international.org/ecma-262/5.1/#sec-11.9.6\" class=\"external\" rel=\" noopener\">la section 11.9.6 sur l'algorithme d'égalité stricte (<em>Strict Equality Algorithm</em>)</a>. Ces documents sont en anglais mais sont tout à fait abordables, ne pas hésiter à les consulter (conseil : d'abord commencer par l'algorithme d'égalité stricte). ES5 décrit également, dans <a href=\"https://ecma-international.org/ecma-262/5.1/#sec-9.12\" class=\"external\" rel=\" noopener\">la section 9.12 sur l'algorithme SameValue</a>, l'opération utilisée en interne par le moteur JavaScript. Cet algorithme est principalement basé sur l'algorithme d'égalité stricte : 11.9.6.4 et 9.12.4 diffèrent en ce qui concerne les nombres. ES6 (ECMAScript 2015) permet d'utiliser cet algorithme grâce à la méthode <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is</code></a>.</p>\n<p>Dans ces documents, on peut voir que l'algorithme d'égalité stricte est un sous-ensemble de l'algorithme d'égalité abstraite (exception faite de la vérification du type) car 11.9.6.2–7 correspond exactement à 11.9.3.1.a–f.</p>"}},{"type":"prose","value":{"id":"un_modèle_pour_mieux_comprendre_","title":"Un modèle pour mieux comprendre ?","isH3":false,"content":"<p>Avant ES6 (ECMAScript 2015), il était courant de dire que l'égalité stricte avec le triple égal était une version « améliorée » de l'égalité faible (double égal) et vice versa. En effet, l'égalité faible ajoute une étape de conversion des types qui n'est pas fournie par l'égalité stricte (ce qui permet d'avoir <code>6 == \"6\"</code>). On peut aussi dire que l'égalité stricte est une version améliorée de l'égalité simple car elle ajoute une fonctionnalité de vérification des types. Selon votre approche et votre problème, une de ces égalités se prêtera mieux à la résolution.</p>\n<p>Cependant, ce « modèle de pensées » ne peut pas être étendu avec l'arrivée d'<a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is</code></a> avec ES6 (ECMAScript 2015). En effet <code>Object.is()</code> n'est pas plus « faible » que l'égalité faible ou plus « stricte » que l'égalité stricte et il n'est pas non plus quelque part entre les deux. Dans le tableau de comparaison ci-après, on voit que la différence provient avant tout de la façon dont <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is</code></a> gère <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>. On note ici que si <code>Object.is(NaN, NaN)</code> valait <code>false</code>, on pourrait dire qu'<code>Object.is()</code> est plus stricte que == ou === car elle distingue <code>-0</code> et <code>+0</code>. Cependant, ce n'est pas le cas et on a bien <code>Object.is(NaN,NaN)</code> qui vaut <code>true</code>. C'est pour cette raison qu'il faut considérer <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is</code></a> selon ses caractéristiques spécifiques plutôt que comme une version plus faible ou plus stricte des autres opérateurs d'égalité.</p>\n<table>\n  <thead>\n    <tr>\n      <th>x</th>\n      <th>y</th>\n      <th><code>==</code></th>\n      <th><code>===</code></th>\n      <th><code>Object.is</code></th>\n      <th><code>SameValueZero</code></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>undefined</code></td>\n      <td><code>undefined</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n    </tr>\n    <tr>\n      <td><code>null</code></td>\n      <td><code>null</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n    </tr>\n    <tr>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n    </tr>\n    <tr>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n    </tr>\n    <tr>\n      <td><code>'toto'</code></td>\n      <td><code>'toto'</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n    </tr>\n    <tr>\n      <td><code>0</code></td>\n      <td><code>0</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n    </tr>\n    <tr>\n      <td><code>+0</code></td>\n      <td><code>-0</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n      <td><code>false</code></td>\n      <td><code>true</code></td>\n    </tr>\n    <tr>\n      <td><code>+0</code></td>\n      <td><code>0</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n    </tr>\n    <tr>\n      <td><code>-0</code></td>\n      <td><code>0</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n      <td><code>false</code></td>\n      <td><code>true</code></td>\n    </tr>\n    <tr>\n      <td><code>0</code></td>\n      <td><code>false</code></td>\n      <td><code>true</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n    </tr>\n    <tr>\n      <td><code>\"\"</code></td>\n      <td><code>false</code></td>\n      <td><code>true</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n    </tr>\n    <tr>\n      <td><code>\"\"</code></td>\n      <td><code>0</code></td>\n      <td><code>true</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n    </tr>\n    <tr>\n      <td><code>'0'</code></td>\n      <td><code>0</code></td>\n      <td><code>true</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n    </tr>\n    <tr>\n      <td><code>'17'</code></td>\n      <td><code>17</code></td>\n      <td><code>true</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n    </tr>\n    <tr>\n      <td><code>[1, 2]</code></td>\n      <td><code>'1,2'</code></td>\n      <td><code>true</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n    </tr>\n    <tr>\n      <td><code>new String('toto')</code></td>\n      <td><code>'toto'</code></td>\n      <td><code>true</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n    </tr>\n    <tr>\n      <td><code>null</code></td>\n      <td><code>undefined</code></td>\n      <td><code>true</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n    </tr>\n    <tr>\n      <td><code>null</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n    </tr>\n    <tr>\n      <td><code>undefined</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n    </tr>\n    <tr>\n      <td><code>{ toto: 'truc' }</code></td>\n      <td><code>{ toto: 'truc' }</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n    </tr>\n    <tr>\n      <td><code>new String('toto')</code></td>\n      <td><code>new String('toto')</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n    </tr>\n    <tr>\n      <td><code>0</code></td>\n      <td><code>null</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n    </tr>\n    <tr>\n      <td><code>0</code></td>\n      <td><code>NaN</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n    </tr>\n    <tr>\n      <td><code>'toto'</code></td>\n      <td><code>NaN</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n    </tr>\n    <tr>\n      <td><code>NaN</code></td>\n      <td><code>NaN</code></td>\n      <td><code>false</code></td>\n      <td><code>false</code></td>\n      <td><code>true</code></td>\n      <td><code>true</code></td>\n    </tr>\n  </tbody>\n</table>"}},{"type":"prose","value":{"id":"quand_utiliser_object.is_et_quand_utiliser_légalité_stricte","title":"Quand utiliser <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is</code></a> et quand utiliser l'égalité stricte","isH3":false,"content":"<p>En plus de la façon dont <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is</code></a> traite <code>NaN</code>, la spécificité d'<code>Object.is()</code> réside dans sa façon de traiter les valeurs proches de zéro. Dans des cas d'utilisation où on a besoin d'effectuer de la méta-programmation, notamment pour imiter certaines caractéristiques de <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty</code></a>. Si le scénario d'utilisation ne nécessite pas ce comportement, il est conseillé d'utiliser <a href=\"/fr/docs/Web/JavaScript/Reference/Operators#.c3.89galit.c3.a9_stricte_(.3d.3d.3d)\"><code>===</code></a>. Même si on souhaite pouvoir comparer <code>NaN</code> avec lui-même et que ce test vaille <code>true</code>, il sera plus simple d'utiliser la méthode <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/isNaN\"><code>isNaN</code></a> disponible avec les versions antérieures d'ECMAScript. En effet, cela évite d'avoir à traiter des cas plus complexes où il faudrait gérer les signes des zéros dans les différentes comparaisons.</p>\n<p>Voici une liste (non exhaustive) d'opérateurs et de méthodes natives qui peuvent entraîner l'apparition des valeurs <code>-0</code> et <code>+0</code> dans le code :</p>\n<dl>\n  <dt id=\"-_négation_unaire\"><a href=\"/fr/docs/Web/JavaScript/Reference/Operators#n%c3%a9gation_unaire\"><code>-</code> (négation unaire)</a></dt>\n  <dd>\n    <p>Si on prend l'opposé de <code>0</code>, on aura, bien entendu,<code>-0</code>. Cependant, avec les expressions, cela peut faire que la valeur <code>-0</code> se glisse dans les variables sans qu'on s'en rende compte. Par exemple :</p>\n    <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>    <span class=\"token keyword\">let</span> forceArrêt <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>masse <span class=\"token operator\">*</span> <span class=\"token operator\">-</span>obj<span class=\"token punctuation\">.</span>vitesse\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n\nSi </span><span class=\"token template-punctuation string\">`</span></span>obj<span class=\"token punctuation\">.</span>vitesse<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> vaut </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token number\">0</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> (ou est évalué à </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token number\">0</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">), un </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> sera introduit, ce qui fera que </span><span class=\"token template-punctuation string\">`</span></span>forceArrêt` pourra être négative<span class=\"token punctuation\">.</span>\n\n</code></pre></div>\n  </dd>\n  <dt id=\"math.atan2\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2\"><code>Math.atan2</code></a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\"><code>Math.ceil</code></a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Math/pow\"><code>Math.pow</code></a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Math/round\"><code>Math.round</code></a></dt>\n  <dd>\n    <p>Ces méthodes peuvent introduire <code>-0</code> dans une expression lors de leur évaluation, même si <code>-0</code> ne faisait pas partie des paramètres. Par exemple, si on utilise <code>Math.pow()</code> pour élever <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>-Infinity</code></a> à une puissance négative, on obtiendra <code>-0</code> pour une puissance impaire. Pour plus de détails, voir la documentation de chaque méthode.</p>\n  </dd>\n  <dt id=\"math.floor\"><a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\"><code>Math.floor</code></a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Math/max\"><code>Math.max</code></a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Math/min\"><code>Math.min</code></a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Math/sin\"><code>Math.sin</code></a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt\"><code>Math.sqrt</code></a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Math/tan\"><code>Math.tan</code></a></dt>\n  <dd>\n    <p>Ces méthodes peuvent renvoyer <code>-0</code> dans certains cas où <code>-0</code> est passé en paramètre. Par exemple, <code>Math.min(-0, +0)</code> fournira <code>-0</code>. Pour plus de détails, voir la documentation de chaque méthode.</p>\n  </dd>\n  <dt id=\"sect1\"><a href=\"/fr/docs/Web/JavaScript/Reference/Operators#.7e_.28non_binaire.29\"><code>~</code></a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Operators#.3c.3c_.28d.c3.a9calage_.c3.a0_gauche.29\"><code>&lt;&lt;</code></a>, <a href=\"/fr/docs/Web/JavaScript/Reference/Operators#.3e.3e_.28d.c3.a9calage_.c3.a0_droite_avec_propagation_du_signe.29\"><code>&gt;&gt;</code></a></dt>\n  <dd>\n    <p>Chacun de ces opérateurs utilise l'algorithme ToInt32 interne au moteur JavaScript. Étant donné qu'il n'y a qu'une seule représentation pour 0 sur les entiers exprimés avec le type interne sur 32 bits, <code>-0</code> ne sera pas invariant pour deux opérations symétriques : <code>Object.is(~~(-0), -0)</code> et <code>Object.is(-0 &lt;&lt; 2 &gt;&gt; 2, -0)</code> renverront tous les deux <code>false</code>.</p>\n  </dd>\n</dl>\n<p>Si on utilise <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is</code></a> et qu'on ne souhaite pas gérer les cas aux limites autour de zéro, cela peut avoir des effet indésirés. En revanche, si on souhaite effectivement comparer <code>-0</code> et <code>+0</code>, c'est la méthode à adopter.</p>","titleAsText":"Quand utiliser Object.is et quand utiliser l'égalité stricte"}},{"type":"prose","value":{"id":"voir_aussi","title":"Voir aussi","isH3":false,"content":"<ul>\n  <li><a href=\"https://dorey.github.io/JavaScript-Equality-Table/\" class=\"external\" rel=\" noopener\">Tableau des comparaisons en JavaScript</a></li>\n</ul>"}}],"toc":[{"text":"L'égalité stricte avec <code>===</code>","id":"légalité_stricte_avec_"},{"text":"L'égalité faible avec <code>==</code>","id":"légalité_faible_avec_"},{"text":"Égalité de valeurs","id":"égalité_de_valeurs"},{"text":"Égalité de valeurs nulles","id":"égalité_de_valeurs_nulles"},{"text":"Égalité abstraite, égalité stricte et valeurs identiques : la spécification","id":"égalité_abstraite_égalité_stricte_et_valeurs_identiques_la_spécification"},{"text":"Un modèle pour mieux comprendre ?","id":"un_modèle_pour_mieux_comprendre_"},{"text":"Quand utiliser <a href=\"/fr/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is</code></a> et quand utiliser l'égalité stricte","id":"quand_utiliser_object.is_et_quand_utiliser_légalité_stricte"},{"text":"Voir aussi","id":"voir_aussi"}],"summary":"JavaScript fournit trois opérations permettant de comparer des valeurs :","popularity":0.0011,"modified":"2022-10-01T03:41:16.000Z","other_translations":[{"title":"Equality comparisons and sameness","locale":"en-US","native":"English (US)"},{"title":"Comparadores de igualdad e identidad","locale":"es","native":"Español"},{"title":"等価性の比較と同一性","locale":"ja","native":"日本語"},{"title":"동치 비교 및 동일성","locale":"ko","native":"한국어"},{"title":"Comparações de igualdade e uniformidade","locale":"pt-BR","native":"Português (do Brasil)"},{"title":"Операторы сравнения","locale":"ru","native":"Русский"},{"title":"JavaScript 中的相等性判断","locale":"zh-CN","native":"中文 (简体)"},{"title":"相等比較","locale":"zh-TW","native":"正體中文 (繁體)"}],"source":{"folder":"fr/web/javascript/equality_comparisons_and_sameness","github_url":"https://github.com/mdn/translated-content/blob/main/files/fr/web/javascript/equality_comparisons_and_sameness/index.md","last_commit_url":"https://github.com/mdn/translated-content/commit/921c46a374ab0a9f4cc809af0370f8c412e54701","filename":"index.md"},"parents":[{"uri":"/fr/docs/Web","title":"Technologies web pour développeurs"},{"uri":"/fr/docs/Web/JavaScript","title":"JavaScript"},{"uri":"/fr/docs/Web/JavaScript/Equality_comparisons_and_sameness","title":"Utiliser les différents tests d'égalité"}],"pageTitle":"Utiliser les différents tests d'égalité - JavaScript | MDN","noIndexing":false}}